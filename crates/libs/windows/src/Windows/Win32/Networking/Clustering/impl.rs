# [ cfg ( feature ="Win32_Foundation" ) ] pub trait IGetClusterDataInfoImpl < > : Sized where { fn GetClusterName ( ) ; fn GetClusterHandle ( ) ; fn GetObjectCount ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IGetClusterDataInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IGetClusterDataInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IGetClusterDataInfoVtbl < > { unsafe extern "system" fn GetClusterName < Impl : IGetClusterDataInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpszname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pcchname : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetClusterHandle < Impl : IGetClusterDataInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> * mut _HCLUSTER { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetObjectCount < Impl : IGetClusterDataInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> i32 { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetClusterName : GetClusterName :: < Impl , IMPL_OFFSET > , GetClusterHandle : GetClusterHandle :: < Impl , IMPL_OFFSET > , GetObjectCount : GetObjectCount :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IGetClusterDataInfo < > as :: windows :: core :: Interface > :: IID } } pub trait IGetClusterGroupInfoImpl < > : Sized where { fn GetGroupHandle ( ) ; } impl < > IGetClusterGroupInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IGetClusterGroupInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IGetClusterGroupInfoVtbl < > { unsafe extern "system" fn GetGroupHandle < Impl : IGetClusterGroupInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lobjindex : i32 , ) -> * mut _HGROUP { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetGroupHandle : GetGroupHandle :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IGetClusterGroupInfo < > as :: windows :: core :: Interface > :: IID } } pub trait IGetClusterNetInterfaceInfoImpl < > : Sized where { fn GetNetInterfaceHandle ( ) ; } impl < > IGetClusterNetInterfaceInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IGetClusterNetInterfaceInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IGetClusterNetInterfaceInfoVtbl < > { unsafe extern "system" fn GetNetInterfaceHandle < Impl : IGetClusterNetInterfaceInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lobjindex : i32 , ) -> * mut _HNETINTERFACE { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetNetInterfaceHandle : GetNetInterfaceHandle :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IGetClusterNetInterfaceInfo < > as :: windows :: core :: Interface > :: IID } } pub trait IGetClusterNetworkInfoImpl < > : Sized where { fn GetNetworkHandle ( ) ; } impl < > IGetClusterNetworkInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IGetClusterNetworkInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IGetClusterNetworkInfoVtbl < > { unsafe extern "system" fn GetNetworkHandle < Impl : IGetClusterNetworkInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lobjindex : i32 , ) -> * mut _HNETWORK { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetNetworkHandle : GetNetworkHandle :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IGetClusterNetworkInfo < > as :: windows :: core :: Interface > :: IID } } pub trait IGetClusterNodeInfoImpl < > : Sized where { fn GetNodeHandle ( ) ; } impl < > IGetClusterNodeInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IGetClusterNodeInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IGetClusterNodeInfoVtbl < > { unsafe extern "system" fn GetNodeHandle < Impl : IGetClusterNodeInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lobjindex : i32 , ) -> * mut _HNODE { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetNodeHandle : GetNodeHandle :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IGetClusterNodeInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IGetClusterObjectInfoImpl < > : Sized where { fn GetObjectName ( ) ; fn GetObjectType ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IGetClusterObjectInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IGetClusterObjectInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IGetClusterObjectInfoVtbl < > { unsafe extern "system" fn GetObjectName < Impl : IGetClusterObjectInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lobjindex : i32 , lpszname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pcchname : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetObjectType < Impl : IGetClusterObjectInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lobjindex : i32 , ) -> CLUADMEX_OBJECT_TYPE { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetObjectName : GetObjectName :: < Impl , IMPL_OFFSET > , GetObjectType : GetObjectType :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IGetClusterObjectInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IGetClusterResourceInfoImpl < > : Sized where { fn GetResourceHandle ( ) ; fn GetResourceTypeName ( ) ; fn GetResourceNetworkName ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IGetClusterResourceInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IGetClusterResourceInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IGetClusterResourceInfoVtbl < > { unsafe extern "system" fn GetResourceHandle < Impl : IGetClusterResourceInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lobjindex : i32 , ) -> * mut _HRESOURCE { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetResourceTypeName < Impl : IGetClusterResourceInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lobjindex : i32 , lpszrestypename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pcchrestypename : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetResourceNetworkName < Impl : IGetClusterResourceInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lobjindex : i32 , lpsznetname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pcchnetname : * mut u32 , ) -> super::super::Foundation:: BOOL { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetResourceHandle : GetResourceHandle :: < Impl , IMPL_OFFSET > , GetResourceTypeName : GetResourceTypeName :: < Impl , IMPL_OFFSET > , GetResourceNetworkName : GetResourceNetworkName :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IGetClusterResourceInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IGetClusterUIInfoImpl < > : Sized where { fn GetClusterName ( ) ; fn GetLocale ( ) ; fn GetFont ( ) ; fn GetIcon ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IGetClusterUIInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IGetClusterUIInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IGetClusterUIInfoVtbl < > { unsafe extern "system" fn GetClusterName < Impl : IGetClusterUIInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpszname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pcchname : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetLocale < Impl : IGetClusterUIInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> u32 { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFont < Impl : IGetClusterUIInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> super::super::Graphics::Gdi:: HFONT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetIcon < Impl : IGetClusterUIInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> super::super::UI::WindowsAndMessaging:: HICON { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetClusterName : GetClusterName :: < Impl , IMPL_OFFSET > , GetLocale : GetLocale :: < Impl , IMPL_OFFSET > , GetFont : GetFont :: < Impl , IMPL_OFFSET > , GetIcon : GetIcon :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IGetClusterUIInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusApplicationImpl < > : Sized + IDispatchImpl where { fn DomainNames ( ) ; fn ClusterNames ( ) ; fn OpenCluster ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusApplicationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusApplicationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusApplicationVtbl < > { unsafe extern "system" fn DomainNames < Impl : ISClusApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppdomains : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ClusterNames < Impl : ISClusApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdomainname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppclusters : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenCluster < Impl : ISClusApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrclustername : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pcluster : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , DomainNames : DomainNames :: < Impl , IMPL_OFFSET > , ClusterNames : ClusterNames :: < Impl , IMPL_OFFSET > , OpenCluster : OpenCluster :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusApplication < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusCryptoKeysImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Refresh ( ) ; fn Item ( ) ; fn AddItem ( ) ; fn RemoveItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusCryptoKeysVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusCryptoKeysImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusCryptoKeysVtbl < > { unsafe extern "system" fn Count < Impl : ISClusCryptoKeysImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISClusCryptoKeysImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Refresh < Impl : ISClusCryptoKeysImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISClusCryptoKeysImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pbstrcyrptokey : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddItem < Impl : ISClusCryptoKeysImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrcryptokey : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveItem < Impl : ISClusCryptoKeysImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Refresh : Refresh :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , AddItem : AddItem :: < Impl , IMPL_OFFSET > , RemoveItem : RemoveItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusCryptoKeys < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusDiskImpl < > : Sized + IDispatchImpl where { fn Signature ( ) ; fn ScsiAddress ( ) ; fn DiskNumber ( ) ; fn Partitions ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusDiskVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusDiskImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusDiskVtbl < > { unsafe extern "system" fn Signature < Impl : ISClusDiskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plsignature : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ScsiAddress < Impl : ISClusDiskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppscsiaddress : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DiskNumber < Impl : ISClusDiskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pldisknumber : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Partitions < Impl : ISClusDiskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pppartitions : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Signature : Signature :: < Impl , IMPL_OFFSET > , ScsiAddress : ScsiAddress :: < Impl , IMPL_OFFSET > , DiskNumber : DiskNumber :: < Impl , IMPL_OFFSET > , Partitions : Partitions :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusDisk < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusDisksImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusDisksVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusDisksImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusDisksVtbl < > { unsafe extern "system" fn Count < Impl : ISClusDisksImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISClusDisksImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISClusDisksImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppdisk : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusDisks < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusNetInterfaceImpl < > : Sized + IDispatchImpl where { fn CommonProperties ( ) ; fn PrivateProperties ( ) ; fn CommonROProperties ( ) ; fn PrivateROProperties ( ) ; fn Name ( ) ; fn Handle ( ) ; fn State ( ) ; fn Cluster ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusNetInterfaceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusNetInterfaceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusNetInterfaceVtbl < > { unsafe extern "system" fn CommonProperties < Impl : ISClusNetInterfaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PrivateProperties < Impl : ISClusNetInterfaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CommonROProperties < Impl : ISClusNetInterfaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PrivateROProperties < Impl : ISClusNetInterfaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Name < Impl : ISClusNetInterfaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Handle < Impl : ISClusNetInterfaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phandle : * mut usize , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn State < Impl : ISClusNetInterfaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwstate : * mut CLUSTER_NETINTERFACE_STATE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Cluster < Impl : ISClusNetInterfaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppcluster : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , CommonProperties : CommonProperties :: < Impl , IMPL_OFFSET > , PrivateProperties : PrivateProperties :: < Impl , IMPL_OFFSET > , CommonROProperties : CommonROProperties :: < Impl , IMPL_OFFSET > , PrivateROProperties : PrivateROProperties :: < Impl , IMPL_OFFSET > , Name : Name :: < Impl , IMPL_OFFSET > , Handle : Handle :: < Impl , IMPL_OFFSET > , State : State :: < Impl , IMPL_OFFSET > , Cluster : Cluster :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusNetInterface < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusNetInterfacesImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Refresh ( ) ; fn Item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusNetInterfacesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusNetInterfacesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusNetInterfacesVtbl < > { unsafe extern "system" fn Count < Impl : ISClusNetInterfacesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISClusNetInterfacesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Refresh < Impl : ISClusNetInterfacesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISClusNetInterfacesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppclusnetinterface : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Refresh : Refresh :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusNetInterfaces < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusNetworkImpl < > : Sized + IDispatchImpl where { fn CommonProperties ( ) ; fn PrivateProperties ( ) ; fn CommonROProperties ( ) ; fn PrivateROProperties ( ) ; fn Handle ( ) ; fn Name ( ) ; fn SetName ( ) ; fn NetworkID ( ) ; fn State ( ) ; fn NetInterfaces ( ) ; fn Cluster ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusNetworkVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusNetworkImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusNetworkVtbl < > { unsafe extern "system" fn CommonProperties < Impl : ISClusNetworkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PrivateProperties < Impl : ISClusNetworkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CommonROProperties < Impl : ISClusNetworkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PrivateROProperties < Impl : ISClusNetworkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Handle < Impl : ISClusNetworkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phandle : * mut usize , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Name < Impl : ISClusNetworkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetName < Impl : ISClusNetworkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrnetworkname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NetworkID < Impl : ISClusNetworkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrnetworkid : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn State < Impl : ISClusNetworkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwstate : * mut CLUSTER_NETWORK_STATE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NetInterfaces < Impl : ISClusNetworkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppclusnetinterfaces : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Cluster < Impl : ISClusNetworkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppcluster : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , CommonProperties : CommonProperties :: < Impl , IMPL_OFFSET > , PrivateProperties : PrivateProperties :: < Impl , IMPL_OFFSET > , CommonROProperties : CommonROProperties :: < Impl , IMPL_OFFSET > , PrivateROProperties : PrivateROProperties :: < Impl , IMPL_OFFSET > , Handle : Handle :: < Impl , IMPL_OFFSET > , Name : Name :: < Impl , IMPL_OFFSET > , SetName : SetName :: < Impl , IMPL_OFFSET > , NetworkID : NetworkID :: < Impl , IMPL_OFFSET > , State : State :: < Impl , IMPL_OFFSET > , NetInterfaces : NetInterfaces :: < Impl , IMPL_OFFSET > , Cluster : Cluster :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusNetwork < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusNetworkNetInterfacesImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Refresh ( ) ; fn Item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusNetworkNetInterfacesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusNetworkNetInterfacesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusNetworkNetInterfacesVtbl < > { unsafe extern "system" fn Count < Impl : ISClusNetworkNetInterfacesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISClusNetworkNetInterfacesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Refresh < Impl : ISClusNetworkNetInterfacesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISClusNetworkNetInterfacesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppclusnetinterface : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Refresh : Refresh :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusNetworkNetInterfaces < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusNetworksImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Refresh ( ) ; fn Item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusNetworksVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusNetworksImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusNetworksVtbl < > { unsafe extern "system" fn Count < Impl : ISClusNetworksImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISClusNetworksImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Refresh < Impl : ISClusNetworksImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISClusNetworksImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppclusnetwork : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Refresh : Refresh :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusNetworks < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusNodeImpl < > : Sized + IDispatchImpl where { fn CommonProperties ( ) ; fn PrivateProperties ( ) ; fn CommonROProperties ( ) ; fn PrivateROProperties ( ) ; fn Name ( ) ; fn Handle ( ) ; fn NodeID ( ) ; fn State ( ) ; fn Pause ( ) ; fn Resume ( ) ; fn Evict ( ) ; fn ResourceGroups ( ) ; fn Cluster ( ) ; fn NetInterfaces ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusNodeVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusNodeImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusNodeVtbl < > { unsafe extern "system" fn CommonProperties < Impl : ISClusNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PrivateProperties < Impl : ISClusNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CommonROProperties < Impl : ISClusNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PrivateROProperties < Impl : ISClusNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Name < Impl : ISClusNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Handle < Impl : ISClusNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phandle : * mut usize , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NodeID < Impl : ISClusNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrnodeid : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn State < Impl : ISClusNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwstate : * mut CLUSTER_NODE_STATE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Pause < Impl : ISClusNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Resume < Impl : ISClusNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Evict < Impl : ISClusNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ResourceGroups < Impl : ISClusNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppresourcegroups : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Cluster < Impl : ISClusNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppcluster : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NetInterfaces < Impl : ISClusNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppclusnetinterfaces : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , CommonProperties : CommonProperties :: < Impl , IMPL_OFFSET > , PrivateProperties : PrivateProperties :: < Impl , IMPL_OFFSET > , CommonROProperties : CommonROProperties :: < Impl , IMPL_OFFSET > , PrivateROProperties : PrivateROProperties :: < Impl , IMPL_OFFSET > , Name : Name :: < Impl , IMPL_OFFSET > , Handle : Handle :: < Impl , IMPL_OFFSET > , NodeID : NodeID :: < Impl , IMPL_OFFSET > , State : State :: < Impl , IMPL_OFFSET > , Pause : Pause :: < Impl , IMPL_OFFSET > , Resume : Resume :: < Impl , IMPL_OFFSET > , Evict : Evict :: < Impl , IMPL_OFFSET > , ResourceGroups : ResourceGroups :: < Impl , IMPL_OFFSET > , Cluster : Cluster :: < Impl , IMPL_OFFSET > , NetInterfaces : NetInterfaces :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusNode < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusNodeNetInterfacesImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Refresh ( ) ; fn Item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusNodeNetInterfacesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusNodeNetInterfacesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusNodeNetInterfacesVtbl < > { unsafe extern "system" fn Count < Impl : ISClusNodeNetInterfacesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISClusNodeNetInterfacesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Refresh < Impl : ISClusNodeNetInterfacesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISClusNodeNetInterfacesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppclusnetinterface : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Refresh : Refresh :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusNodeNetInterfaces < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusNodesImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Refresh ( ) ; fn Item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusNodesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusNodesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusNodesVtbl < > { unsafe extern "system" fn Count < Impl : ISClusNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISClusNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Refresh < Impl : ISClusNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISClusNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Refresh : Refresh :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusNodes < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusPartitionImpl < > : Sized + IDispatchImpl where { fn Flags ( ) ; fn DeviceName ( ) ; fn VolumeLabel ( ) ; fn SerialNumber ( ) ; fn MaximumComponentLength ( ) ; fn FileSystemFlags ( ) ; fn FileSystem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusPartitionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusPartitionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusPartitionVtbl < > { unsafe extern "system" fn Flags < Impl : ISClusPartitionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plflags : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeviceName < Impl : ISClusPartitionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrdevicename : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn VolumeLabel < Impl : ISClusPartitionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrvolumelabel : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SerialNumber < Impl : ISClusPartitionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plserialnumber : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MaximumComponentLength < Impl : ISClusPartitionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plmaximumcomponentlength : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FileSystemFlags < Impl : ISClusPartitionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plfilesystemflags : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FileSystem < Impl : ISClusPartitionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrfilesystem : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Flags : Flags :: < Impl , IMPL_OFFSET > , DeviceName : DeviceName :: < Impl , IMPL_OFFSET > , VolumeLabel : VolumeLabel :: < Impl , IMPL_OFFSET > , SerialNumber : SerialNumber :: < Impl , IMPL_OFFSET > , MaximumComponentLength : MaximumComponentLength :: < Impl , IMPL_OFFSET > , FileSystemFlags : FileSystemFlags :: < Impl , IMPL_OFFSET > , FileSystem : FileSystem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusPartition < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusPartitionExImpl < > : Sized + IDispatchImpl + ISClusPartitionImpl where { fn TotalSize ( ) ; fn FreeSpace ( ) ; fn DeviceNumber ( ) ; fn PartitionNumber ( ) ; fn VolumeGuid ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusPartitionExVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusPartitionExImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusPartitionExVtbl < > { unsafe extern "system" fn TotalSize < Impl : ISClusPartitionExImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pltotalsize : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FreeSpace < Impl : ISClusPartitionExImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plfreespace : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeviceNumber < Impl : ISClusPartitionExImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pldevicenumber : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PartitionNumber < Impl : ISClusPartitionExImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plpartitionnumber : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn VolumeGuid < Impl : ISClusPartitionExImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrvolumeguid : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { ISClusPartitionVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , TotalSize : TotalSize :: < Impl , IMPL_OFFSET > , FreeSpace : FreeSpace :: < Impl , IMPL_OFFSET > , DeviceNumber : DeviceNumber :: < Impl , IMPL_OFFSET > , PartitionNumber : PartitionNumber :: < Impl , IMPL_OFFSET > , VolumeGuid : VolumeGuid :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusPartitionEx < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusPartitionsImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusPartitionsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusPartitionsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusPartitionsVtbl < > { unsafe extern "system" fn Count < Impl : ISClusPartitionsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISClusPartitionsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISClusPartitionsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pppartition : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusPartitions < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusPropertiesImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Refresh ( ) ; fn Item ( ) ; fn CreateItem ( ) ; fn UseDefaultValue ( ) ; fn SaveChanges ( ) ; fn ReadOnly ( ) ; fn Private ( ) ; fn Common ( ) ; fn Modified ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusPropertiesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusPropertiesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusPropertiesVtbl < > { unsafe extern "system" fn Count < Impl : ISClusPropertiesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISClusPropertiesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Refresh < Impl : ISClusPropertiesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISClusPropertiesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppclusproperty : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateItem < Impl : ISClusPropertiesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varvalue : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pproperty : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UseDefaultValue < Impl : ISClusPropertiesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SaveChanges < Impl : ISClusPropertiesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarstatuscode : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ReadOnly < Impl : ISClusPropertiesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarreadonly : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Private < Impl : ISClusPropertiesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarprivate : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Common < Impl : ISClusPropertiesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarcommon : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Modified < Impl : ISClusPropertiesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarmodified : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Refresh : Refresh :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , CreateItem : CreateItem :: < Impl , IMPL_OFFSET > , UseDefaultValue : UseDefaultValue :: < Impl , IMPL_OFFSET > , SaveChanges : SaveChanges :: < Impl , IMPL_OFFSET > , ReadOnly : ReadOnly :: < Impl , IMPL_OFFSET > , Private : Private :: < Impl , IMPL_OFFSET > , Common : Common :: < Impl , IMPL_OFFSET > , Modified : Modified :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusProperties < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusPropertyImpl < > : Sized + IDispatchImpl where { fn Name ( ) ; fn Length ( ) ; fn ValueCount ( ) ; fn Values ( ) ; fn Value ( ) ; fn SetValue ( ) ; fn Type ( ) ; fn SetType ( ) ; fn Format ( ) ; fn SetFormat ( ) ; fn ReadOnly ( ) ; fn Private ( ) ; fn Common ( ) ; fn Modified ( ) ; fn UseDefaultValue ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusPropertyVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusPropertyImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusPropertyVtbl < > { unsafe extern "system" fn Name < Impl : ISClusPropertyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Length < Impl : ISClusPropertyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plength : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ValueCount < Impl : ISClusPropertyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Values < Impl : ISClusPropertyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppclusterpropertyvalues : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Value < Impl : ISClusPropertyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarvalue : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetValue < Impl : ISClusPropertyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varvalue : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Type < Impl : ISClusPropertyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptype : * mut CLUSTER_PROPERTY_TYPE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetType < Impl : ISClusPropertyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , r#type : CLUSTER_PROPERTY_TYPE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Format < Impl : ISClusPropertyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pformat : * mut CLUSTER_PROPERTY_FORMAT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFormat < Impl : ISClusPropertyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , format : CLUSTER_PROPERTY_FORMAT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ReadOnly < Impl : ISClusPropertyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarreadonly : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Private < Impl : ISClusPropertyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarprivate : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Common < Impl : ISClusPropertyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarcommon : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Modified < Impl : ISClusPropertyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarmodified : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UseDefaultValue < Impl : ISClusPropertyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Name : Name :: < Impl , IMPL_OFFSET > , Length : Length :: < Impl , IMPL_OFFSET > , ValueCount : ValueCount :: < Impl , IMPL_OFFSET > , Values : Values :: < Impl , IMPL_OFFSET > , Value : Value :: < Impl , IMPL_OFFSET > , SetValue : SetValue :: < Impl , IMPL_OFFSET > , Type : Type :: < Impl , IMPL_OFFSET > , SetType : SetType :: < Impl , IMPL_OFFSET > , Format : Format :: < Impl , IMPL_OFFSET > , SetFormat : SetFormat :: < Impl , IMPL_OFFSET > , ReadOnly : ReadOnly :: < Impl , IMPL_OFFSET > , Private : Private :: < Impl , IMPL_OFFSET > , Common : Common :: < Impl , IMPL_OFFSET > , Modified : Modified :: < Impl , IMPL_OFFSET > , UseDefaultValue : UseDefaultValue :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusProperty < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusPropertyValueImpl < > : Sized + IDispatchImpl where { fn Value ( ) ; fn SetValue ( ) ; fn Type ( ) ; fn SetType ( ) ; fn Format ( ) ; fn SetFormat ( ) ; fn Length ( ) ; fn DataCount ( ) ; fn Data ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusPropertyValueVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusPropertyValueImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusPropertyValueVtbl < > { unsafe extern "system" fn Value < Impl : ISClusPropertyValueImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarvalue : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetValue < Impl : ISClusPropertyValueImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varvalue : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Type < Impl : ISClusPropertyValueImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptype : * mut CLUSTER_PROPERTY_TYPE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetType < Impl : ISClusPropertyValueImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , r#type : CLUSTER_PROPERTY_TYPE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Format < Impl : ISClusPropertyValueImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pformat : * mut CLUSTER_PROPERTY_FORMAT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFormat < Impl : ISClusPropertyValueImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , format : CLUSTER_PROPERTY_FORMAT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Length < Impl : ISClusPropertyValueImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plength : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DataCount < Impl : ISClusPropertyValueImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Data < Impl : ISClusPropertyValueImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppclusterpropertyvaluedata : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Value : Value :: < Impl , IMPL_OFFSET > , SetValue : SetValue :: < Impl , IMPL_OFFSET > , Type : Type :: < Impl , IMPL_OFFSET > , SetType : SetType :: < Impl , IMPL_OFFSET > , Format : Format :: < Impl , IMPL_OFFSET > , SetFormat : SetFormat :: < Impl , IMPL_OFFSET > , Length : Length :: < Impl , IMPL_OFFSET > , DataCount : DataCount :: < Impl , IMPL_OFFSET > , Data : Data :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusPropertyValue < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusPropertyValueDataImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Item ( ) ; fn CreateItem ( ) ; fn RemoveItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusPropertyValueDataVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusPropertyValueDataImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusPropertyValueDataVtbl < > { unsafe extern "system" fn Count < Impl : ISClusPropertyValueDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISClusPropertyValueDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISClusPropertyValueDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pvarvalue : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateItem < Impl : ISClusPropertyValueDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varvalue : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pvardata : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveItem < Impl : ISClusPropertyValueDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , CreateItem : CreateItem :: < Impl , IMPL_OFFSET > , RemoveItem : RemoveItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusPropertyValueData < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusPropertyValuesImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Item ( ) ; fn CreateItem ( ) ; fn RemoveItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusPropertyValuesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusPropertyValuesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusPropertyValuesVtbl < > { unsafe extern "system" fn Count < Impl : ISClusPropertyValuesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISClusPropertyValuesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISClusPropertyValuesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pppropertyvalue : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateItem < Impl : ISClusPropertyValuesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varvalue : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pppropertyvalue : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveItem < Impl : ISClusPropertyValuesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , CreateItem : CreateItem :: < Impl , IMPL_OFFSET > , RemoveItem : RemoveItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusPropertyValues < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusRefObjectImpl < > : Sized + IDispatchImpl where { fn Handle ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusRefObjectVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusRefObjectImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusRefObjectVtbl < > { unsafe extern "system" fn Handle < Impl : ISClusRefObjectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phandle : * mut usize , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Handle : Handle :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusRefObject < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusRegistryKeysImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Refresh ( ) ; fn Item ( ) ; fn AddItem ( ) ; fn RemoveItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusRegistryKeysVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusRegistryKeysImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusRegistryKeysVtbl < > { unsafe extern "system" fn Count < Impl : ISClusRegistryKeysImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISClusRegistryKeysImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Refresh < Impl : ISClusRegistryKeysImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISClusRegistryKeysImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pbstrregistrykey : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddItem < Impl : ISClusRegistryKeysImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrregistrykey : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveItem < Impl : ISClusRegistryKeysImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Refresh : Refresh :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , AddItem : AddItem :: < Impl , IMPL_OFFSET > , RemoveItem : RemoveItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusRegistryKeys < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusResDependenciesImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Refresh ( ) ; fn Item ( ) ; fn CreateItem ( ) ; fn DeleteItem ( ) ; fn AddItem ( ) ; fn RemoveItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusResDependenciesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusResDependenciesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusResDependenciesVtbl < > { unsafe extern "system" fn Count < Impl : ISClusResDependenciesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISClusResDependenciesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Refresh < Impl : ISClusResDependenciesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISClusResDependenciesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppclusresource : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateItem < Impl : ISClusResDependenciesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrresourcename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrresourcetype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , dwflags : CLUSTER_RESOURCE_CREATE_FLAGS , ppclusterresource : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteItem < Impl : ISClusResDependenciesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddItem < Impl : ISClusResDependenciesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , presource : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveItem < Impl : ISClusResDependenciesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Refresh : Refresh :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , CreateItem : CreateItem :: < Impl , IMPL_OFFSET > , DeleteItem : DeleteItem :: < Impl , IMPL_OFFSET > , AddItem : AddItem :: < Impl , IMPL_OFFSET > , RemoveItem : RemoveItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusResDependencies < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusResDependentsImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Refresh ( ) ; fn Item ( ) ; fn CreateItem ( ) ; fn DeleteItem ( ) ; fn AddItem ( ) ; fn RemoveItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusResDependentsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusResDependentsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusResDependentsVtbl < > { unsafe extern "system" fn Count < Impl : ISClusResDependentsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISClusResDependentsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Refresh < Impl : ISClusResDependentsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISClusResDependentsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppclusresource : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateItem < Impl : ISClusResDependentsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrresourcename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrresourcetype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , dwflags : CLUSTER_RESOURCE_CREATE_FLAGS , ppclusterresource : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteItem < Impl : ISClusResDependentsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddItem < Impl : ISClusResDependentsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , presource : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveItem < Impl : ISClusResDependentsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Refresh : Refresh :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , CreateItem : CreateItem :: < Impl , IMPL_OFFSET > , DeleteItem : DeleteItem :: < Impl , IMPL_OFFSET > , AddItem : AddItem :: < Impl , IMPL_OFFSET > , RemoveItem : RemoveItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusResDependents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusResGroupImpl < > : Sized + IDispatchImpl where { fn CommonProperties ( ) ; fn PrivateProperties ( ) ; fn CommonROProperties ( ) ; fn PrivateROProperties ( ) ; fn Handle ( ) ; fn Name ( ) ; fn SetName ( ) ; fn State ( ) ; fn OwnerNode ( ) ; fn Resources ( ) ; fn PreferredOwnerNodes ( ) ; fn Delete ( ) ; fn Online ( ) ; fn Move ( ) ; fn Offline ( ) ; fn Cluster ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusResGroupVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusResGroupImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusResGroupVtbl < > { unsafe extern "system" fn CommonProperties < Impl : ISClusResGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PrivateProperties < Impl : ISClusResGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CommonROProperties < Impl : ISClusResGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PrivateROProperties < Impl : ISClusResGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Handle < Impl : ISClusResGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phandle : * mut usize , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Name < Impl : ISClusResGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetName < Impl : ISClusResGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrgroupname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn State < Impl : ISClusResGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwstate : * mut CLUSTER_GROUP_STATE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OwnerNode < Impl : ISClusResGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppownernode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Resources < Impl : ISClusResGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppclustergroupresources : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PreferredOwnerNodes < Impl : ISClusResGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppownernodes : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Delete < Impl : ISClusResGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Online < Impl : ISClusResGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , vartimeout : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varnode : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pvarpending : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Move < Impl : ISClusResGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , vartimeout : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varnode : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pvarpending : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Offline < Impl : ISClusResGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , vartimeout : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pvarpending : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Cluster < Impl : ISClusResGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppcluster : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , CommonProperties : CommonProperties :: < Impl , IMPL_OFFSET > , PrivateProperties : PrivateProperties :: < Impl , IMPL_OFFSET > , CommonROProperties : CommonROProperties :: < Impl , IMPL_OFFSET > , PrivateROProperties : PrivateROProperties :: < Impl , IMPL_OFFSET > , Handle : Handle :: < Impl , IMPL_OFFSET > , Name : Name :: < Impl , IMPL_OFFSET > , SetName : SetName :: < Impl , IMPL_OFFSET > , State : State :: < Impl , IMPL_OFFSET > , OwnerNode : OwnerNode :: < Impl , IMPL_OFFSET > , Resources : Resources :: < Impl , IMPL_OFFSET > , PreferredOwnerNodes : PreferredOwnerNodes :: < Impl , IMPL_OFFSET > , Delete : Delete :: < Impl , IMPL_OFFSET > , Online : Online :: < Impl , IMPL_OFFSET > , Move : Move :: < Impl , IMPL_OFFSET > , Offline : Offline :: < Impl , IMPL_OFFSET > , Cluster : Cluster :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusResGroup < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusResGroupPreferredOwnerNodesImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Refresh ( ) ; fn Item ( ) ; fn InsertItem ( ) ; fn RemoveItem ( ) ; fn Modified ( ) ; fn SaveChanges ( ) ; fn AddItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusResGroupPreferredOwnerNodesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusResGroupPreferredOwnerNodesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusResGroupPreferredOwnerNodesVtbl < > { unsafe extern "system" fn Count < Impl : ISClusResGroupPreferredOwnerNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISClusResGroupPreferredOwnerNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Refresh < Impl : ISClusResGroupPreferredOwnerNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISClusResGroupPreferredOwnerNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InsertItem < Impl : ISClusResGroupPreferredOwnerNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnode : :: windows :: core :: RawPtr , nposition : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveItem < Impl : ISClusResGroupPreferredOwnerNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Modified < Impl : ISClusResGroupPreferredOwnerNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarmodified : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SaveChanges < Impl : ISClusResGroupPreferredOwnerNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddItem < Impl : ISClusResGroupPreferredOwnerNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnode : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Refresh : Refresh :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , InsertItem : InsertItem :: < Impl , IMPL_OFFSET > , RemoveItem : RemoveItem :: < Impl , IMPL_OFFSET > , Modified : Modified :: < Impl , IMPL_OFFSET > , SaveChanges : SaveChanges :: < Impl , IMPL_OFFSET > , AddItem : AddItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusResGroupPreferredOwnerNodes < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusResGroupResourcesImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Refresh ( ) ; fn Item ( ) ; fn CreateItem ( ) ; fn DeleteItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusResGroupResourcesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusResGroupResourcesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusResGroupResourcesVtbl < > { unsafe extern "system" fn Count < Impl : ISClusResGroupResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISClusResGroupResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Refresh < Impl : ISClusResGroupResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISClusResGroupResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppclusresource : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateItem < Impl : ISClusResGroupResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrresourcename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrresourcetype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , dwflags : CLUSTER_RESOURCE_CREATE_FLAGS , ppclusterresource : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteItem < Impl : ISClusResGroupResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Refresh : Refresh :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , CreateItem : CreateItem :: < Impl , IMPL_OFFSET > , DeleteItem : DeleteItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusResGroupResources < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusResGroupsImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Refresh ( ) ; fn Item ( ) ; fn CreateItem ( ) ; fn DeleteItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusResGroupsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusResGroupsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusResGroupsVtbl < > { unsafe extern "system" fn Count < Impl : ISClusResGroupsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISClusResGroupsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Refresh < Impl : ISClusResGroupsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISClusResGroupsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppclusresgroup : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateItem < Impl : ISClusResGroupsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrresourcegroupname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppresourcegroup : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteItem < Impl : ISClusResGroupsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Refresh : Refresh :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , CreateItem : CreateItem :: < Impl , IMPL_OFFSET > , DeleteItem : DeleteItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusResGroups < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusResPossibleOwnerNodesImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Refresh ( ) ; fn Item ( ) ; fn AddItem ( ) ; fn RemoveItem ( ) ; fn Modified ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusResPossibleOwnerNodesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusResPossibleOwnerNodesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusResPossibleOwnerNodesVtbl < > { unsafe extern "system" fn Count < Impl : ISClusResPossibleOwnerNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISClusResPossibleOwnerNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Refresh < Impl : ISClusResPossibleOwnerNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISClusResPossibleOwnerNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddItem < Impl : ISClusResPossibleOwnerNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnode : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveItem < Impl : ISClusResPossibleOwnerNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Modified < Impl : ISClusResPossibleOwnerNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarmodified : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Refresh : Refresh :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , AddItem : AddItem :: < Impl , IMPL_OFFSET > , RemoveItem : RemoveItem :: < Impl , IMPL_OFFSET > , Modified : Modified :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusResPossibleOwnerNodes < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusResTypeImpl < > : Sized + IDispatchImpl where { fn CommonProperties ( ) ; fn PrivateProperties ( ) ; fn CommonROProperties ( ) ; fn PrivateROProperties ( ) ; fn Name ( ) ; fn Delete ( ) ; fn Cluster ( ) ; fn Resources ( ) ; fn PossibleOwnerNodes ( ) ; fn AvailableDisks ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusResTypeVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusResTypeImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusResTypeVtbl < > { unsafe extern "system" fn CommonProperties < Impl : ISClusResTypeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PrivateProperties < Impl : ISClusResTypeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CommonROProperties < Impl : ISClusResTypeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PrivateROProperties < Impl : ISClusResTypeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Name < Impl : ISClusResTypeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Delete < Impl : ISClusResTypeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Cluster < Impl : ISClusResTypeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppcluster : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Resources < Impl : ISClusResTypeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppclusterrestyperesources : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PossibleOwnerNodes < Impl : ISClusResTypeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppownernodes : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AvailableDisks < Impl : ISClusResTypeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppavailabledisks : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , CommonProperties : CommonProperties :: < Impl , IMPL_OFFSET > , PrivateProperties : PrivateProperties :: < Impl , IMPL_OFFSET > , CommonROProperties : CommonROProperties :: < Impl , IMPL_OFFSET > , PrivateROProperties : PrivateROProperties :: < Impl , IMPL_OFFSET > , Name : Name :: < Impl , IMPL_OFFSET > , Delete : Delete :: < Impl , IMPL_OFFSET > , Cluster : Cluster :: < Impl , IMPL_OFFSET > , Resources : Resources :: < Impl , IMPL_OFFSET > , PossibleOwnerNodes : PossibleOwnerNodes :: < Impl , IMPL_OFFSET > , AvailableDisks : AvailableDisks :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusResType < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusResTypePossibleOwnerNodesImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Refresh ( ) ; fn Item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusResTypePossibleOwnerNodesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusResTypePossibleOwnerNodesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusResTypePossibleOwnerNodesVtbl < > { unsafe extern "system" fn Count < Impl : ISClusResTypePossibleOwnerNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISClusResTypePossibleOwnerNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Refresh < Impl : ISClusResTypePossibleOwnerNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISClusResTypePossibleOwnerNodesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Refresh : Refresh :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusResTypePossibleOwnerNodes < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusResTypeResourcesImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Refresh ( ) ; fn Item ( ) ; fn CreateItem ( ) ; fn DeleteItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusResTypeResourcesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusResTypeResourcesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusResTypeResourcesVtbl < > { unsafe extern "system" fn Count < Impl : ISClusResTypeResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISClusResTypeResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Refresh < Impl : ISClusResTypeResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISClusResTypeResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppclusresource : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateItem < Impl : ISClusResTypeResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrresourcename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrgroupname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , dwflags : CLUSTER_RESOURCE_CREATE_FLAGS , ppclusterresource : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteItem < Impl : ISClusResTypeResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Refresh : Refresh :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , CreateItem : CreateItem :: < Impl , IMPL_OFFSET > , DeleteItem : DeleteItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusResTypeResources < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusResTypesImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Refresh ( ) ; fn Item ( ) ; fn CreateItem ( ) ; fn DeleteItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusResTypesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusResTypesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusResTypesVtbl < > { unsafe extern "system" fn Count < Impl : ISClusResTypesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISClusResTypesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Refresh < Impl : ISClusResTypesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISClusResTypesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppclusrestype : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateItem < Impl : ISClusResTypesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrresourcetypename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrdisplayname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrresourcetypedll : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , dwlooksalivepollinterval : i32 , dwisalivepollinterval : i32 , ppresourcetype : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteItem < Impl : ISClusResTypesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Refresh : Refresh :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , CreateItem : CreateItem :: < Impl , IMPL_OFFSET > , DeleteItem : DeleteItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusResTypes < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusResourceImpl < > : Sized + IDispatchImpl where { fn CommonProperties ( ) ; fn PrivateProperties ( ) ; fn CommonROProperties ( ) ; fn PrivateROProperties ( ) ; fn Handle ( ) ; fn Name ( ) ; fn SetName ( ) ; fn State ( ) ; fn CoreFlag ( ) ; fn BecomeQuorumResource ( ) ; fn Delete ( ) ; fn Fail ( ) ; fn Online ( ) ; fn Offline ( ) ; fn ChangeResourceGroup ( ) ; fn AddResourceNode ( ) ; fn RemoveResourceNode ( ) ; fn CanResourceBeDependent ( ) ; fn PossibleOwnerNodes ( ) ; fn Dependencies ( ) ; fn Dependents ( ) ; fn Group ( ) ; fn OwnerNode ( ) ; fn Cluster ( ) ; fn ClassInfo ( ) ; fn Disk ( ) ; fn RegistryKeys ( ) ; fn CryptoKeys ( ) ; fn TypeName ( ) ; fn Type ( ) ; fn MaintenanceMode ( ) ; fn SetMaintenanceMode ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusResourceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusResourceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusResourceVtbl < > { unsafe extern "system" fn CommonProperties < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PrivateProperties < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CommonROProperties < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PrivateROProperties < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Handle < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phandle : * mut usize , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Name < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetName < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrresourcename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn State < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwstate : * mut CLUSTER_RESOURCE_STATE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CoreFlag < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwcoreflag : * mut CLUS_FLAGS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BecomeQuorumResource < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdevicepath : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , lmaxlogsize : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Delete < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Fail < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Online < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ntimeout : i32 , pvarpending : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Offline < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ntimeout : i32 , pvarpending : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ChangeResourceGroup < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , presourcegroup : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddResourceNode < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnode : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveResourceNode < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnode : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CanResourceBeDependent < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , presource : :: windows :: core :: RawPtr , pvardependent : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PossibleOwnerNodes < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppownernodes : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Dependencies < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppresdependencies : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Dependents < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppresdependents : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Group < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppresgroup : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OwnerNode < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppownernode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Cluster < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppcluster : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ClassInfo < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prcclassinfo : * mut CLUSTER_RESOURCE_CLASS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Disk < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppdisk : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RegistryKeys < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppregistrykeys : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CryptoKeys < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppcryptokeys : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TypeName < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrtypename : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Type < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppresourcetype : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MaintenanceMode < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbmaintenancemode : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetMaintenanceMode < Impl : ISClusResourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bmaintenancemode : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , CommonProperties : CommonProperties :: < Impl , IMPL_OFFSET > , PrivateProperties : PrivateProperties :: < Impl , IMPL_OFFSET > , CommonROProperties : CommonROProperties :: < Impl , IMPL_OFFSET > , PrivateROProperties : PrivateROProperties :: < Impl , IMPL_OFFSET > , Handle : Handle :: < Impl , IMPL_OFFSET > , Name : Name :: < Impl , IMPL_OFFSET > , SetName : SetName :: < Impl , IMPL_OFFSET > , State : State :: < Impl , IMPL_OFFSET > , CoreFlag : CoreFlag :: < Impl , IMPL_OFFSET > , BecomeQuorumResource : BecomeQuorumResource :: < Impl , IMPL_OFFSET > , Delete : Delete :: < Impl , IMPL_OFFSET > , Fail : Fail :: < Impl , IMPL_OFFSET > , Online : Online :: < Impl , IMPL_OFFSET > , Offline : Offline :: < Impl , IMPL_OFFSET > , ChangeResourceGroup : ChangeResourceGroup :: < Impl , IMPL_OFFSET > , AddResourceNode : AddResourceNode :: < Impl , IMPL_OFFSET > , RemoveResourceNode : RemoveResourceNode :: < Impl , IMPL_OFFSET > , CanResourceBeDependent : CanResourceBeDependent :: < Impl , IMPL_OFFSET > , PossibleOwnerNodes : PossibleOwnerNodes :: < Impl , IMPL_OFFSET > , Dependencies : Dependencies :: < Impl , IMPL_OFFSET > , Dependents : Dependents :: < Impl , IMPL_OFFSET > , Group : Group :: < Impl , IMPL_OFFSET > , OwnerNode : OwnerNode :: < Impl , IMPL_OFFSET > , Cluster : Cluster :: < Impl , IMPL_OFFSET > , ClassInfo : ClassInfo :: < Impl , IMPL_OFFSET > , Disk : Disk :: < Impl , IMPL_OFFSET > , RegistryKeys : RegistryKeys :: < Impl , IMPL_OFFSET > , CryptoKeys : CryptoKeys :: < Impl , IMPL_OFFSET > , TypeName : TypeName :: < Impl , IMPL_OFFSET > , Type : Type :: < Impl , IMPL_OFFSET > , MaintenanceMode : MaintenanceMode :: < Impl , IMPL_OFFSET > , SetMaintenanceMode : SetMaintenanceMode :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusResource < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusResourcesImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Refresh ( ) ; fn Item ( ) ; fn CreateItem ( ) ; fn DeleteItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusResourcesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusResourcesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusResourcesVtbl < > { unsafe extern "system" fn Count < Impl : ISClusResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISClusResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Refresh < Impl : ISClusResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISClusResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppclusresource : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateItem < Impl : ISClusResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrresourcename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrresourcetype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrgroupname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , dwflags : CLUSTER_RESOURCE_CREATE_FLAGS , ppclusterresource : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteItem < Impl : ISClusResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Refresh : Refresh :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , CreateItem : CreateItem :: < Impl , IMPL_OFFSET > , DeleteItem : DeleteItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusResources < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusScsiAddressImpl < > : Sized + IDispatchImpl where { fn PortNumber ( ) ; fn PathId ( ) ; fn TargetId ( ) ; fn Lun ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusScsiAddressVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusScsiAddressImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusScsiAddressVtbl < > { unsafe extern "system" fn PortNumber < Impl : ISClusScsiAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarportnumber : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PathId < Impl : ISClusScsiAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarpathid : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TargetId < Impl : ISClusScsiAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvartargetid : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Lun < Impl : ISClusScsiAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarlun : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , PortNumber : PortNumber :: < Impl , IMPL_OFFSET > , PathId : PathId :: < Impl , IMPL_OFFSET > , TargetId : TargetId :: < Impl , IMPL_OFFSET > , Lun : Lun :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusScsiAddress < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusVersionImpl < > : Sized + IDispatchImpl where { fn Name ( ) ; fn MajorVersion ( ) ; fn MinorVersion ( ) ; fn BuildNumber ( ) ; fn VendorId ( ) ; fn CSDVersion ( ) ; fn ClusterHighestVersion ( ) ; fn ClusterLowestVersion ( ) ; fn Flags ( ) ; fn MixedVersion ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusVersionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusVersionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusVersionVtbl < > { unsafe extern "system" fn Name < Impl : ISClusVersionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrclustername : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MajorVersion < Impl : ISClusVersionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnmajorversion : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MinorVersion < Impl : ISClusVersionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnminorversion : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BuildNumber < Impl : ISClusVersionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnbuildnumber : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn VendorId < Impl : ISClusVersionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrvendorid : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CSDVersion < Impl : ISClusVersionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrcsdversion : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ClusterHighestVersion < Impl : ISClusVersionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnclusterhighestversion : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ClusterLowestVersion < Impl : ISClusVersionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnclusterlowestversion : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Flags < Impl : ISClusVersionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnflags : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MixedVersion < Impl : ISClusVersionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarmixedversion : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Name : Name :: < Impl , IMPL_OFFSET > , MajorVersion : MajorVersion :: < Impl , IMPL_OFFSET > , MinorVersion : MinorVersion :: < Impl , IMPL_OFFSET > , BuildNumber : BuildNumber :: < Impl , IMPL_OFFSET > , VendorId : VendorId :: < Impl , IMPL_OFFSET > , CSDVersion : CSDVersion :: < Impl , IMPL_OFFSET > , ClusterHighestVersion : ClusterHighestVersion :: < Impl , IMPL_OFFSET > , ClusterLowestVersion : ClusterLowestVersion :: < Impl , IMPL_OFFSET > , Flags : Flags :: < Impl , IMPL_OFFSET > , MixedVersion : MixedVersion :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusVersion < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusterImpl < > : Sized + IDispatchImpl where { fn CommonProperties ( ) ; fn PrivateProperties ( ) ; fn CommonROProperties ( ) ; fn PrivateROProperties ( ) ; fn Handle ( ) ; fn Open ( ) ; fn Name ( ) ; fn SetName ( ) ; fn Version ( ) ; fn SetQuorumResource ( ) ; fn QuorumResource ( ) ; fn QuorumLogSize ( ) ; fn SetQuorumLogSize ( ) ; fn QuorumPath ( ) ; fn SetQuorumPath ( ) ; fn Nodes ( ) ; fn ResourceGroups ( ) ; fn Resources ( ) ; fn ResourceTypes ( ) ; fn Networks ( ) ; fn NetInterfaces ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusterVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusterImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusterVtbl < > { unsafe extern "system" fn CommonProperties < Impl : ISClusterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PrivateProperties < Impl : ISClusterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CommonROProperties < Impl : ISClusterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PrivateROProperties < Impl : ISClusterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Handle < Impl : ISClusterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phandle : * mut usize , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Open < Impl : ISClusterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrclustername : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Name < Impl : ISClusterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetName < Impl : ISClusterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrclustername : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Version < Impl : ISClusterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppclusversion : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetQuorumResource < Impl : ISClusterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pclusterresource : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn QuorumResource < Impl : ISClusterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pclusterresource : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn QuorumLogSize < Impl : ISClusterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnlogsize : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetQuorumLogSize < Impl : ISClusterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , nlogsize : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn QuorumPath < Impl : ISClusterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pppath : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetQuorumPath < Impl : ISClusterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppath : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Nodes < Impl : ISClusterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppnodes : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ResourceGroups < Impl : ISClusterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppclusterresourcegroups : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Resources < Impl : ISClusterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppclusterresources : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ResourceTypes < Impl : ISClusterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppresourcetypes : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Networks < Impl : ISClusterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppnetworks : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NetInterfaces < Impl : ISClusterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppnetinterfaces : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , CommonProperties : CommonProperties :: < Impl , IMPL_OFFSET > , PrivateProperties : PrivateProperties :: < Impl , IMPL_OFFSET > , CommonROProperties : CommonROProperties :: < Impl , IMPL_OFFSET > , PrivateROProperties : PrivateROProperties :: < Impl , IMPL_OFFSET > , Handle : Handle :: < Impl , IMPL_OFFSET > , Open : Open :: < Impl , IMPL_OFFSET > , Name : Name :: < Impl , IMPL_OFFSET > , SetName : SetName :: < Impl , IMPL_OFFSET > , Version : Version :: < Impl , IMPL_OFFSET > , SetQuorumResource : SetQuorumResource :: < Impl , IMPL_OFFSET > , QuorumResource : QuorumResource :: < Impl , IMPL_OFFSET > , QuorumLogSize : QuorumLogSize :: < Impl , IMPL_OFFSET > , SetQuorumLogSize : SetQuorumLogSize :: < Impl , IMPL_OFFSET > , QuorumPath : QuorumPath :: < Impl , IMPL_OFFSET > , SetQuorumPath : SetQuorumPath :: < Impl , IMPL_OFFSET > , Nodes : Nodes :: < Impl , IMPL_OFFSET > , ResourceGroups : ResourceGroups :: < Impl , IMPL_OFFSET > , Resources : Resources :: < Impl , IMPL_OFFSET > , ResourceTypes : ResourceTypes :: < Impl , IMPL_OFFSET > , Networks : Networks :: < Impl , IMPL_OFFSET > , NetInterfaces : NetInterfaces :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISCluster < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISClusterNamesImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Refresh ( ) ; fn Item ( ) ; fn DomainName ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISClusterNamesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISClusterNamesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISClusterNamesVtbl < > { unsafe extern "system" fn Count < Impl : ISClusterNamesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISClusterNamesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Refresh < Impl : ISClusterNamesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISClusterNamesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pbstrclustername : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DomainName < Impl : ISClusterNamesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrdomainname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Refresh : Refresh :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , DomainName : DomainName :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISClusterNames < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISDomainNamesImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Refresh ( ) ; fn Item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISDomainNamesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISDomainNamesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISDomainNamesVtbl < > { unsafe extern "system" fn Count < Impl : ISDomainNamesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : ISDomainNamesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Refresh < Impl : ISDomainNamesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : ISDomainNamesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varindex : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pbstrdomainname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Refresh : Refresh :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISDomainNames < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWCContextMenuCallbackImpl < > : Sized where { fn AddExtensionMenuItem ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWCContextMenuCallbackVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWCContextMenuCallbackImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWCContextMenuCallbackVtbl < > { unsafe extern "system" fn AddExtensionMenuItem < Impl : IWCContextMenuCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpszname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , lpszstatusbartext : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ncommandid : u32 , nsubmenucommandid : u32 , uflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AddExtensionMenuItem : AddExtensionMenuItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWCContextMenuCallback < > as :: windows :: core :: Interface > :: IID } } pub trait IWCPropertySheetCallbackImpl < > : Sized where { fn AddPropertySheetPage ( ) ; } impl < > IWCPropertySheetCallbackVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWCPropertySheetCallbackImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWCPropertySheetCallbackVtbl < > { unsafe extern "system" fn AddPropertySheetPage < Impl : IWCPropertySheetCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hpage : * const i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AddPropertySheetPage : AddPropertySheetPage :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWCPropertySheetCallback < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWCWizard97CallbackImpl < > : Sized where { fn AddWizard97Page ( ) ; fn EnableNext ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWCWizard97CallbackVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWCWizard97CallbackImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWCWizard97CallbackVtbl < > { unsafe extern "system" fn AddWizard97Page < Impl : IWCWizard97CallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hpage : * const i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnableNext < Impl : IWCWizard97CallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hpage : * const i32 , benable : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AddWizard97Page : AddWizard97Page :: < Impl , IMPL_OFFSET > , EnableNext : EnableNext :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWCWizard97Callback < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWCWizardCallbackImpl < > : Sized where { fn AddWizardPage ( ) ; fn EnableNext ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWCWizardCallbackVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWCWizardCallbackImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWCWizardCallbackVtbl < > { unsafe extern "system" fn AddWizardPage < Impl : IWCWizardCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hpage : * const i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnableNext < Impl : IWCWizardCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hpage : * const i32 , benable : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AddWizardPage : AddWizardPage :: < Impl , IMPL_OFFSET > , EnableNext : EnableNext :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWCWizardCallback < > as :: windows :: core :: Interface > :: IID } } pub trait IWEExtendContextMenuImpl < > : Sized where { fn AddContextMenuItems ( ) ; } impl < > IWEExtendContextMenuVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWEExtendContextMenuImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWEExtendContextMenuVtbl < > { unsafe extern "system" fn AddContextMenuItems < Impl : IWEExtendContextMenuImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidata : * mut :: core :: ffi :: c_void , picallback : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AddContextMenuItems : AddContextMenuItems :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWEExtendContextMenu < > as :: windows :: core :: Interface > :: IID } } pub trait IWEExtendPropertySheetImpl < > : Sized where { fn CreatePropertySheetPages ( ) ; } impl < > IWEExtendPropertySheetVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWEExtendPropertySheetImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWEExtendPropertySheetVtbl < > { unsafe extern "system" fn CreatePropertySheetPages < Impl : IWEExtendPropertySheetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidata : * mut :: core :: ffi :: c_void , picallback : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CreatePropertySheetPages : CreatePropertySheetPages :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWEExtendPropertySheet < > as :: windows :: core :: Interface > :: IID } } pub trait IWEExtendWizardImpl < > : Sized where { fn CreateWizardPages ( ) ; } impl < > IWEExtendWizardVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWEExtendWizardImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWEExtendWizardVtbl < > { unsafe extern "system" fn CreateWizardPages < Impl : IWEExtendWizardImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidata : * mut :: core :: ffi :: c_void , picallback : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CreateWizardPages : CreateWizardPages :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWEExtendWizard < > as :: windows :: core :: Interface > :: IID } } pub trait IWEExtendWizard97Impl < > : Sized where { fn CreateWizard97Pages ( ) ; } impl < > IWEExtendWizard97Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWEExtendWizard97Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWEExtendWizard97Vtbl < > { unsafe extern "system" fn CreateWizard97Pages < Impl : IWEExtendWizard97Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidata : * mut :: core :: ffi :: c_void , picallback : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CreateWizard97Pages : CreateWizard97Pages :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWEExtendWizard97 < > as :: windows :: core :: Interface > :: IID } } pub trait IWEInvokeCommandImpl < > : Sized where { fn InvokeCommand ( ) ; } impl < > IWEInvokeCommandVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWEInvokeCommandImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWEInvokeCommandVtbl < > { unsafe extern "system" fn InvokeCommand < Impl : IWEInvokeCommandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ncommandid : u32 , pidata : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , InvokeCommand : InvokeCommand :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWEInvokeCommand < > as :: windows :: core :: Interface > :: IID } } 