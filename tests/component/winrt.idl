namespace Component
{
    namespace Simple
    {
        runtimeclass Class
        {
            Class();
            void Method();
        }

        interface IInterface
        {
            void Method();
        };

        delegate void Delegate();

        struct Struct
        {
            Int32 First;
            Int32 Second;
        };

        enum Enum
        {
            First,
            Second,
        };
    }

    namespace Classes
    {
        runtimeclass Static
        {
            static Int32 Method();
            static Int32 Property;
            static Int32 ReadOnly{ get; };
        }

        runtimeclass Activatable
        {
            Activatable();
            Activatable(Int32 val); // midl doesn't allow "value" for some reason...
            Int32 Property{ get; };
        }

        runtimeclass Creator
        {
            static Creator Create(Int32 value);
            Int32 Property{ get; };
        }

        runtimeclass Required : [default] Component.Interfaces.IProperty
        {
            Required();
        }

        runtimeclass NoWeakRef
        {
            NoWeakRef();
            void Method();
        }
    }

    namespace Interfaces
    {
        interface IProperty
        {
            Int32 Property;
        };
    }

    namespace Delegates
    {

    }

    namespace Structs
    {
        struct Blittable
        {
            Boolean Bool;
            Char Char;
            UInt8 UInt8;
            UInt16 UInt16;
            UInt32 UInt32;
            UInt64 UInt64;
            Int16 Int16;
            Int32 Int32;
            Int64 Int64;
            Single Single;
            Double Double;
            Guid Guid;
        };

        struct NonBlittable
        {
            String String;
            Windows.Foundation.IReference<Int64> RefInt64;
        };

        struct Nested
        {
            Blittable Blittable;
            NonBlittable NonBlittable;
        };

        runtimeclass Test
        {
            static UInt32 SizeOfBlittable { get; };
            static Blittable ZeroBlittable{ get; };
            static Blittable NonZeroBlittable { get; };
        }
    }

    namespace Enums
    {
        enum Signed
        {
            Three = 3,
            Two = 2,
            One = 1,
        };

        [flags]
        enum Unsigned
        {
            Three = 0x100,
            Two   = 0x010,
            One   = 0x001
        };
    }

    namespace Collections
    {
    }

    namespace Async
    {

    }

    namespace Signatures
    {
        delegate Boolean Signature1(Boolean a, out Boolean b);
        delegate Boolean[] ArraySignature1(Boolean[] a, ref Boolean[] b, out Boolean[] c);
    
        delegate UInt8 Signature2(UInt8 a, out UInt8 b);
        delegate UInt8[] ArraySignature2(UInt8[] a, ref UInt8[] b, out UInt8[] c);

        delegate UInt16 Signature3(UInt16 a, out UInt16 b);
        delegate UInt16[] ArraySignature3(UInt16[] a, ref UInt16[] b, out UInt16[] c);

        runtimeclass Test
        {
            static Boolean Signature1(Boolean a, out Boolean b);
            static Boolean[] ArraySignature1(Boolean[] a, ref Boolean[] b, out Boolean[] c);
            static void CallSignature1(Signature1 handler);
            static void CallArraySignature1(ArraySignature1 handler);

            static UInt8 Signature2(UInt8 a, out UInt8 b);
            static UInt8[] ArraySignature2(UInt8[] a, ref UInt8[] b, out UInt8[] c);
            static void CallSignature2(Signature2 handler);
            static void CallArraySignature2(ArraySignature2 handler);

            static UInt16 Signature3(UInt16 a, out UInt16 b);
            static UInt16[] ArraySignature3(UInt16[] a, ref UInt16[] b, out UInt16[] c);
            static void CallSignature3(Signature3 handler);
            static void CallArraySignature3(ArraySignature3 handler);
        }
    }
}
