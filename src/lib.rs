/*! A crate for providing native and familiar support for the Windows Runtime for Rust developers.

The first thing to do is to specifiy your WinRT dependencies in your Cargo.toml file:

```toml
[package.metadata.winrt.dependencies]
"Microsoft.Windows.SDK.Contracts" = "10.0.19041.1"
```

This automatically downloads the dependency from NuGet and places the WinRT metadata files in a well-known spot.

Then, generate the code by specifying which types you need inside of a build.rs build script.

```rust
use winrt::build;

fn main() {
    build!(
        types
            windows::data::xml::dom::*
    );
}
```

Then use those types inside your crate.

```rust,ignore
// Include generated types
winrt::include_bindings!()

// Make use of any WinRT APIs as needed.
// For example, here is an example of using the Windows.Foundation.Uri class:
fn main() -> winrt::Result<()> {
    use windows::data::xml::dom::*;

    let doc = XmlDocument::new()?;
    doc.load_xml("<html>hello world</html>")?;

    let root = doc.document_element()?;
    assert!(root.node_name()? == "html");
    assert!(root.inner_text()? == "hello world");

    Ok(())
}
```

The actual APIs available to you will depend on what WinRT modules you are using.
The documentation found here is relevant for core functionality for WinRT, but
ultimately the code you will interact with most will be generated by this crate from
metadata. For example, documentation on using the `window::foundation::Uri` type
above, can be found [here](https://docs.microsoft.com/en-us/uwp/api/Windows.Foundation.Uri?view=winrt-19041). Of
course, when using these APIs from Rust, you will have to remember to translate CamelCase to snake_case as is
the convention in Rust.
*/

#[macro_export]
macro_rules! include_bindings {
    () => {
        include!(concat!(env!("OUT_DIR"), "/winrt.rs"));
    };
}

mod bindings {
    #![allow(unused_variables)]
    include_bindings!();
}

extern crate self as winrt;

#[doc(hidden)]
pub use bindings::windows::foundation;

mod abi_transferable;
mod activation_factory;
mod agile_object;
mod array;
mod com;
mod error;
mod factory;
mod guid;
mod hstring;
mod numerics;
mod object;
mod param;
mod runtime;
mod runtime_name;
mod runtime_type;
pub mod time_span;

#[doc(hidden)]
pub use abi_transferable::AbiTransferable;
#[doc(hidden)]
pub use activation_factory::IActivationFactory;
#[doc(hidden)]
pub use agile_object::IAgileObject;
pub use array::Array;
#[doc(hidden)]
pub use com::*;
pub use error::*;
#[doc(hidden)]
pub use factory::{factory, FactoryCache};
#[doc(hidden)]
pub use guid::Guid;
pub use hstring::HString;
pub use object::Object;
#[doc(hidden)]
pub use param::Param;
#[doc(hidden)]
pub use runtime::*;
#[doc(hidden)]
pub use runtime_name::RuntimeName;
#[doc(hidden)]
pub use runtime_type::RuntimeType;
pub use winrt_macros::build;

#[doc(hidden)]
pub type RawPtr = *mut std::ffi::c_void;

#[doc(hidden)]
pub use const_sha1::ConstBuffer;
