// This file was generated by the `windows` crate - do not edit by hand!

#[allow(
    unused_variables,
    non_upper_case_globals,
    non_snake_case,
    unused_unsafe,
    non_camel_case_types,
    dead_code,
    clippy::all
)]
pub mod Windows {
    #[allow(
        unused_variables,
        non_upper_case_globals,
        non_snake_case,
        unused_unsafe,
        non_camel_case_types,
        dead_code,
        clippy::all
    )]
    pub mod Foundation {
        #[repr(transparent)]
        #[derive(
            :: std :: cmp :: PartialEq,
            :: std :: cmp :: Eq,
            :: std :: clone :: Clone,
            :: std :: fmt :: Debug,
        )]
        pub struct IPropertyValue(::windows::IInspectable);
        unsafe impl ::windows::Interface for IPropertyValue {
            type Vtable = IPropertyValue_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                1272349405,
                30036,
                16617,
                [154, 155, 130, 101, 78, 222, 126, 98],
            );
        }
        impl IPropertyValue {
            pub fn IsNumericScalar(&self) -> ::windows::Result<bool> {
                let this = self;
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<bool>(result__)
                }
            }
            pub fn GetUInt8(&self) -> ::windows::Result<u8> {
                let this = self;
                unsafe {
                    let mut result__: <u8 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<u8>(result__)
                }
            }
            pub fn GetInt16(&self) -> ::windows::Result<i16> {
                let this = self;
                unsafe {
                    let mut result__: <i16 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<i16>(result__)
                }
            }
            pub fn GetUInt16(&self) -> ::windows::Result<u16> {
                let this = self;
                unsafe {
                    let mut result__: <u16 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<u16>(result__)
                }
            }
            pub fn GetInt32(&self) -> ::windows::Result<i32> {
                let this = self;
                unsafe {
                    let mut result__: <i32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<i32>(result__)
                }
            }
            pub fn GetUInt32(&self) -> ::windows::Result<u32> {
                let this = self;
                unsafe {
                    let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<u32>(result__)
                }
            }
            pub fn GetInt64(&self) -> ::windows::Result<i64> {
                let this = self;
                unsafe {
                    let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).13)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<i64>(result__)
                }
            }
            pub fn GetUInt64(&self) -> ::windows::Result<u64> {
                let this = self;
                unsafe {
                    let mut result__: <u64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).14)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<u64>(result__)
                }
            }
            pub fn GetSingle(&self) -> ::windows::Result<f32> {
                let this = self;
                unsafe {
                    let mut result__: <f32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).15)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<f32>(result__)
                }
            }
            pub fn GetDouble(&self) -> ::windows::Result<f64> {
                let this = self;
                unsafe {
                    let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).16)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<f64>(result__)
                }
            }
            pub fn GetChar16(&self) -> ::windows::Result<u16> {
                let this = self;
                unsafe {
                    let mut result__: <u16 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).17)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<u16>(result__)
                }
            }
            pub fn GetBoolean(&self) -> ::windows::Result<bool> {
                let this = self;
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).18)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
            pub fn GetString(&self) -> ::windows::Result<::windows::HSTRING> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).19)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HSTRING>(result__)
                }
            }
            pub fn GetGuid(&self) -> ::windows::Result<::windows::Guid> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Guid as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).20)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::Guid>(result__)
                }
            }
            pub fn GetUInt8Array(&self, value: &mut ::windows::Array<u8>) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).26)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetInt16Array(
                &self,
                value: &mut ::windows::Array<i16>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).27)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetUInt16Array(
                &self,
                value: &mut ::windows::Array<u16>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).28)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetInt32Array(
                &self,
                value: &mut ::windows::Array<i32>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).29)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetUInt32Array(
                &self,
                value: &mut ::windows::Array<u32>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).30)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetInt64Array(
                &self,
                value: &mut ::windows::Array<i64>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).31)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetUInt64Array(
                &self,
                value: &mut ::windows::Array<u64>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).32)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetSingleArray(
                &self,
                value: &mut ::windows::Array<f32>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).33)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetDoubleArray(
                &self,
                value: &mut ::windows::Array<f64>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).34)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetChar16Array(
                &self,
                value: &mut ::windows::Array<u16>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).35)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetBooleanArray(
                &self,
                value: &mut ::windows::Array<bool>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).36)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetStringArray(
                &self,
                value: &mut ::windows::Array<::windows::HSTRING>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).37)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetInspectableArray(
                &self,
                value: &mut ::windows::Array<::windows::IInspectable>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).38)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetGuidArray(
                &self,
                value: &mut ::windows::Array<::windows::Guid>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).39)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
        }
        unsafe impl ::windows::RuntimeType for IPropertyValue {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                ::windows::ConstBuffer::from_slice(b"{4bd682dd-7554-40e9-9a9b-82654ede7e62}");
        }
        impl ::std::convert::From<IPropertyValue> for ::windows::IInspectable {
            fn from(value: IPropertyValue) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IPropertyValue> for ::windows::IInspectable {
            fn from(value: &IPropertyValue) -> Self {
                value.0.clone()
            }
        }
        impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IPropertyValue {
            fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                ::windows::Param::Owned(self.0)
            }
        }
        impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IPropertyValue {
            fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                ::windows::Param::Borrowed(&self.0)
            }
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IPropertyValue_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::HRESULT,
            pub unsafe extern "system" fn(),
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut bool,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut u8,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut i16,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut u16,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut i32,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut u32,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut i64,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut u64,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut f32,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut f64,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut u16,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut bool,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::Guid,
            ) -> ::windows::HRESULT,
            pub unsafe extern "system" fn(),
            pub unsafe extern "system" fn(),
            pub unsafe extern "system" fn(),
            pub unsafe extern "system" fn(),
            pub unsafe extern "system" fn(),
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: *mut u32,
                value: *mut *mut u8,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: *mut u32,
                value: *mut *mut i16,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: *mut u32,
                value: *mut *mut u16,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: *mut u32,
                value: *mut *mut i32,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: *mut u32,
                value: *mut *mut u32,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: *mut u32,
                value: *mut *mut i64,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: *mut u32,
                value: *mut *mut u64,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: *mut u32,
                value: *mut *mut f32,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: *mut u32,
                value: *mut *mut f64,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: *mut u32,
                value: *mut *mut u16,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: *mut u32,
                value: *mut *mut bool,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: *mut u32,
                value: *mut *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: *mut u32,
                value: *mut *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: *mut u32,
                value: *mut *mut ::windows::Guid,
            ) -> ::windows::HRESULT,
            pub unsafe extern "system" fn(),
            pub unsafe extern "system" fn(),
            pub unsafe extern "system" fn(),
            pub unsafe extern "system" fn(),
            pub unsafe extern "system" fn(),
        );
        #[repr(transparent)]
        #[derive(
            :: std :: cmp :: PartialEq,
            :: std :: cmp :: Eq,
            :: std :: clone :: Clone,
            :: std :: fmt :: Debug,
        )]
        pub struct IReference<T>(::windows::IInspectable, ::std::marker::PhantomData<T>)
        where
            T: ::windows::RuntimeType + 'static;
        unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::Interface for IReference<T> {
            type Vtable = IReference_abi<T>;
            const IID: ::windows::Guid = ::windows::Guid::from_signature(
                <IReference<T> as ::windows::RuntimeType>::SIGNATURE,
            );
        }
        impl<T: ::windows::RuntimeType + 'static> IReference<T> {
            pub fn Value(&self) -> ::windows::Result<T> {
                let this = self;
                unsafe {
                    let mut result__: <T as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<T>(result__)
                }
            }
            pub fn IsNumericScalar(&self) -> ::windows::Result<bool> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<bool>(result__)
                }
            }
            pub fn GetUInt8(&self) -> ::windows::Result<u8> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <u8 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<u8>(result__)
                }
            }
            pub fn GetInt16(&self) -> ::windows::Result<i16> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <i16 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<i16>(result__)
                }
            }
            pub fn GetUInt16(&self) -> ::windows::Result<u16> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <u16 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<u16>(result__)
                }
            }
            pub fn GetInt32(&self) -> ::windows::Result<i32> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <i32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<i32>(result__)
                }
            }
            pub fn GetUInt32(&self) -> ::windows::Result<u32> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<u32>(result__)
                }
            }
            pub fn GetInt64(&self) -> ::windows::Result<i64> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).13)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<i64>(result__)
                }
            }
            pub fn GetUInt64(&self) -> ::windows::Result<u64> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <u64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).14)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<u64>(result__)
                }
            }
            pub fn GetSingle(&self) -> ::windows::Result<f32> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <f32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).15)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<f32>(result__)
                }
            }
            pub fn GetDouble(&self) -> ::windows::Result<f64> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).16)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<f64>(result__)
                }
            }
            pub fn GetChar16(&self) -> ::windows::Result<u16> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <u16 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).17)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<u16>(result__)
                }
            }
            pub fn GetBoolean(&self) -> ::windows::Result<bool> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).18)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
            pub fn GetString(&self) -> ::windows::Result<::windows::HSTRING> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).19)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HSTRING>(result__)
                }
            }
            pub fn GetGuid(&self) -> ::windows::Result<::windows::Guid> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::Guid as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).20)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::Guid>(result__)
                }
            }
            pub fn GetUInt8Array(&self, value: &mut ::windows::Array<u8>) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).26)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetInt16Array(
                &self,
                value: &mut ::windows::Array<i16>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).27)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetUInt16Array(
                &self,
                value: &mut ::windows::Array<u16>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).28)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetInt32Array(
                &self,
                value: &mut ::windows::Array<i32>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).29)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetUInt32Array(
                &self,
                value: &mut ::windows::Array<u32>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).30)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetInt64Array(
                &self,
                value: &mut ::windows::Array<i64>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).31)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetUInt64Array(
                &self,
                value: &mut ::windows::Array<u64>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).32)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetSingleArray(
                &self,
                value: &mut ::windows::Array<f32>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).33)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetDoubleArray(
                &self,
                value: &mut ::windows::Array<f64>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).34)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetChar16Array(
                &self,
                value: &mut ::windows::Array<u16>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).35)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetBooleanArray(
                &self,
                value: &mut ::windows::Array<bool>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).36)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetStringArray(
                &self,
                value: &mut ::windows::Array<::windows::HSTRING>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).37)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetInspectableArray(
                &self,
                value: &mut ::windows::Array<::windows::IInspectable>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).38)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn GetGuidArray(
                &self,
                value: &mut ::windows::Array<::windows::Guid>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).39)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
        }
        unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::RuntimeType for IReference<T> {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = {
                ::windows::ConstBuffer::new()
                    .push_slice(b"pinterface(")
                    .push_slice(b"{61c17706-2d65-11e0-9ae8-d48564015472}")
                    .push_slice(b";")
                    .push_other(<T as ::windows::RuntimeType>::SIGNATURE)
                    .push_slice(b")")
            };
        }
        impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IReference<T>>
            for ::windows::IInspectable
        {
            fn from(value: IReference<T>) -> Self {
                value.0
            }
        }
        impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IReference<T>>
            for ::windows::IInspectable
        {
            fn from(value: &IReference<T>) -> Self {
                value.0.clone()
            }
        }
        impl<'a, T: ::windows::RuntimeType + 'static>
            ::windows::IntoParam<'a, ::windows::IInspectable> for IReference<T>
        {
            fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                ::windows::Param::Owned(self.0)
            }
        }
        impl<'a, T: ::windows::RuntimeType + 'static>
            ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IReference<T>
        {
            fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                ::windows::Param::Borrowed(&self.0)
            }
        }
        impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IReference<T>> for IPropertyValue {
            fn from(value: IReference<T>) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IReference<T>> for IPropertyValue {
            fn from(value: &IReference<T>) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a, T: ::windows::RuntimeType + 'static> ::windows::IntoParam<'a, IPropertyValue>
            for IReference<T>
        {
            fn into_param(self) -> ::windows::Param<'a, IPropertyValue> {
                ::windows::Param::Owned(::std::convert::Into::<IPropertyValue>::into(self))
            }
        }
        impl<'a, T: ::windows::RuntimeType + 'static> ::windows::IntoParam<'a, IPropertyValue>
            for &'a IReference<T>
        {
            fn into_param(self) -> ::windows::Param<'a, IPropertyValue> {
                ::windows::Param::Owned(::std::convert::Into::<IPropertyValue>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IReference_abi<T>(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut <T as ::windows::Abi>::Abi,
            ) -> ::windows::HRESULT,
            pub ::std::marker::PhantomData<T>,
        )
        where
            T: ::windows::RuntimeType + 'static;
        #[repr(transparent)]
        #[derive(
            :: std :: cmp :: PartialEq,
            :: std :: cmp :: Eq,
            :: std :: clone :: Clone,
            :: std :: fmt :: Debug,
        )]
        pub struct IStringable(::windows::IInspectable);
        unsafe impl ::windows::Interface for IStringable {
            type Vtable = IStringable_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                2520162132,
                36534,
                18672,
                [171, 206, 193, 178, 17, 230, 39, 195],
            );
        }
        impl IStringable {
            pub fn ToString(&self) -> ::windows::Result<::windows::HSTRING> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HSTRING>(result__)
                }
            }
        }
        unsafe impl ::windows::RuntimeType for IStringable {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                ::windows::ConstBuffer::from_slice(b"{96369f54-8eb6-48f0-abce-c1b211e627c3}");
        }
        impl ::std::convert::From<IStringable> for ::windows::IInspectable {
            fn from(value: IStringable) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStringable> for ::windows::IInspectable {
            fn from(value: &IStringable) -> Self {
                value.0.clone()
            }
        }
        impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IStringable {
            fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                ::windows::Param::Owned(self.0)
            }
        }
        impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IStringable {
            fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                ::windows::Param::Borrowed(&self.0)
            }
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStringable_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
        );
        #[repr(transparent)]
        #[derive(
            :: std :: cmp :: PartialEq,
            :: std :: cmp :: Eq,
            :: std :: clone :: Clone,
            :: std :: fmt :: Debug,
        )]
        #[doc(hidden)]
        pub struct IPropertyValueStatics(::windows::IInspectable);
        unsafe impl ::windows::Interface for IPropertyValueStatics {
            type Vtable = IPropertyValueStatics_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                1654381512,
                55602,
                20468,
                [150, 185, 141, 150, 197, 193, 232, 88],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IPropertyValueStatics_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: u8,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: i16,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: u16,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: i32,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: u32,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: i64,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: u64,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: f32,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: f64,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: u16,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: bool,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: ::windows::Guid,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub unsafe extern "system" fn(),
            pub unsafe extern "system" fn(),
            pub unsafe extern "system" fn(),
            pub unsafe extern "system" fn(),
            pub unsafe extern "system" fn(),
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: u32,
                value: *const u8,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: u32,
                value: *const i16,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: u32,
                value: *const u16,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: u32,
                value: *const i32,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: u32,
                value: *const u32,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: u32,
                value: *const i64,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: u32,
                value: *const u64,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: u32,
                value: *const f32,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: u32,
                value: *const f64,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: u32,
                value: *const u16,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: u32,
                value: *const bool,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: u32,
                value: *const ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: u32,
                value: *const ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value_array_size: u32,
                value: *const ::windows::Guid,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub unsafe extern "system" fn(),
            pub unsafe extern "system" fn(),
            pub unsafe extern "system" fn(),
            pub unsafe extern "system" fn(),
            pub unsafe extern "system" fn(),
        );
        pub struct PropertyValue {}
        impl PropertyValue {
            pub fn CreateEmpty() -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateUInt8(value: u8) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateInt16(value: i16) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateUInt16(value: u16) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateInt32(value: i32) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateUInt32(value: u32) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateInt64(value: i64) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateUInt64(value: u64) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).13)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateSingle(value: f32) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).14)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateDouble(value: f64) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).15)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateChar16(value: u16) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).16)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateBoolean(value: bool) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).17)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateString<'a>(
                value: impl ::windows::IntoParam<'a, ::windows::HSTRING>,
            ) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).18)(
                        ::windows::Abi::abi(this),
                        value.into_param().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateInspectable<'a>(
                value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
            ) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).19)(
                        ::windows::Abi::abi(this),
                        value.into_param().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateGuid<'a>(
                value: impl ::windows::IntoParam<'a, ::windows::Guid>,
            ) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).20)(
                        ::windows::Abi::abi(this),
                        value.into_param().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateUInt8Array(
                value: &[<u8 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).26)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateInt16Array(
                value: &[<i16 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).27)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateUInt16Array(
                value: &[<u16 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).28)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateInt32Array(
                value: &[<i32 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).29)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateUInt32Array(
                value: &[<u32 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).30)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateInt64Array(
                value: &[<i64 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).31)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateUInt64Array(
                value: &[<u64 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).32)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateSingleArray(
                value: &[<f32 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).33)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateDoubleArray(
                value: &[<f64 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).34)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateChar16Array(
                value: &[<u16 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).35)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateBooleanArray(
                value: &[<bool as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).36)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateStringArray(
                value: &[<::windows::HSTRING as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).37)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateInspectableArray(
                value: &[<::windows::IInspectable as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).38)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            pub fn CreateGuidArray(
                value: &[<::windows::Guid as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::IInspectable> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).39)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::IInspectable>(result__)
                })
            }
            fn IPropertyValueStatics<
                R,
                F: FnOnce(&IPropertyValueStatics) -> ::windows::Result<R>,
            >(
                callback: F,
            ) -> ::windows::Result<R> {
                static mut SHARED: ::windows::FactoryCache<PropertyValue, IPropertyValueStatics> =
                    ::windows::FactoryCache::new();
                unsafe { SHARED.call(callback) }
            }
        }
        impl ::windows::RuntimeName for PropertyValue {
            const NAME: &'static str = "Windows.Foundation.PropertyValue";
        }
    }
    #[allow(
        unused_variables,
        non_upper_case_globals,
        non_snake_case,
        unused_unsafe,
        non_camel_case_types,
        dead_code,
        clippy::all
    )]
    pub mod Win32 {
        #[allow(
            unused_variables,
            non_upper_case_globals,
            non_snake_case,
            unused_unsafe,
            non_camel_case_types,
            dead_code,
            clippy::all
        )]
        pub mod System {
            #[allow(
                unused_variables,
                non_upper_case_globals,
                non_snake_case,
                unused_unsafe,
                non_camel_case_types,
                dead_code,
                clippy::all
            )]
            pub mod Com {
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: marker :: Copy,
                    :: std :: clone :: Clone,
                    :: std :: default :: Default,
                    :: std :: fmt :: Debug,
                )]
                #[repr(transparent)]
                pub struct CLSCTX(pub u32);
                impl ::std::convert::From<u32> for CLSCTX {
                    fn from(value: u32) -> Self {
                        Self(value)
                    }
                }
                unsafe impl ::windows::Abi for CLSCTX {
                    type Abi = Self;
                }
                impl ::std::ops::BitOr for CLSCTX {
                    type Output = Self;
                    fn bitor(self, rhs: Self) -> Self {
                        Self(self.0 | rhs.0)
                    }
                }
                impl ::std::ops::BitAnd for CLSCTX {
                    type Output = Self;
                    fn bitand(self, rhs: Self) -> Self {
                        Self(self.0 & rhs.0)
                    }
                }
                impl ::std::ops::BitOrAssign for CLSCTX {
                    fn bitor_assign(&mut self, rhs: Self) {
                        self.0.bitor_assign(rhs.0)
                    }
                }
                impl ::std::ops::BitAndAssign for CLSCTX {
                    fn bitand_assign(&mut self, rhs: Self) {
                        self.0.bitand_assign(rhs.0)
                    }
                }
                pub const CLSCTX_ALL: CLSCTX = CLSCTX(23u32 as _);
                pub unsafe fn CLSIDFromProgID<'a>(
                    lpszprogid: impl ::windows::IntoParam<'a, super::SystemServices::PWSTR>,
                    lpclsid: *mut ::windows::Guid,
                ) -> ::windows::HRESULT {
                    #[link(name = "OLE32")]
                    extern "system" {
                        fn CLSIDFromProgID(
                            lpszprogid: super::SystemServices::PWSTR,
                            lpclsid: *mut ::windows::Guid,
                        ) -> ::windows::HRESULT;
                    }
                    CLSIDFromProgID(
                        lpszprogid.into_param().abi(),
                        ::std::mem::transmute(lpclsid),
                    )
                }
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: marker :: Copy,
                    :: std :: clone :: Clone,
                    :: std :: default :: Default,
                    :: std :: fmt :: Debug,
                )]
                #[repr(transparent)]
                pub struct COINIT(pub u32);
                impl ::std::convert::From<u32> for COINIT {
                    fn from(value: u32) -> Self {
                        Self(value)
                    }
                }
                unsafe impl ::windows::Abi for COINIT {
                    type Abi = Self;
                }
                impl ::std::ops::BitOr for COINIT {
                    type Output = Self;
                    fn bitor(self, rhs: Self) -> Self {
                        Self(self.0 | rhs.0)
                    }
                }
                impl ::std::ops::BitAnd for COINIT {
                    type Output = Self;
                    fn bitand(self, rhs: Self) -> Self {
                        Self(self.0 & rhs.0)
                    }
                }
                impl ::std::ops::BitOrAssign for COINIT {
                    fn bitor_assign(&mut self, rhs: Self) {
                        self.0.bitor_assign(rhs.0)
                    }
                }
                impl ::std::ops::BitAndAssign for COINIT {
                    fn bitand_assign(&mut self, rhs: Self) {
                        self.0.bitand_assign(rhs.0)
                    }
                }
                pub const COINIT_APARTMENTTHREADED: COINIT = COINIT(2u32 as _);
                pub const COINIT_MULTITHREADED: COINIT = COINIT(0u32 as _);
                pub unsafe fn CoCreateGuid(pguid: *mut ::windows::Guid) -> ::windows::HRESULT {
                    #[link(name = "OLE32")]
                    extern "system" {
                        fn CoCreateGuid(pguid: *mut ::windows::Guid) -> ::windows::HRESULT;
                    }
                    CoCreateGuid(::std::mem::transmute(pguid))
                }
                pub unsafe fn CoCreateInstance<'a, T: ::windows::Interface>(
                    rclsid: *const ::windows::Guid,
                    punkouter: impl ::windows::IntoParam<'a, ::windows::IUnknown>,
                    dwclscontext: CLSCTX,
                ) -> ::windows::Result<T> {
                    #[link(name = "OLE32")]
                    extern "system" {
                        fn CoCreateInstance(
                            rclsid: *const ::windows::Guid,
                            punkouter: ::windows::RawPtr,
                            dwclscontext: CLSCTX,
                            riid: *const ::windows::Guid,
                            ppv: *mut *mut ::std::ffi::c_void,
                        ) -> ::windows::HRESULT;
                    }
                    let mut result__ = ::std::option::Option::None;
                    CoCreateInstance(
                        ::std::mem::transmute(rclsid),
                        punkouter.into_param().abi(),
                        ::std::mem::transmute(dwclscontext),
                        &<T as ::windows::Interface>::IID,
                        ::windows::Abi::set_abi(&mut result__),
                    )
                    .and_some(result__)
                }
                pub unsafe fn CoInitializeEx(
                    pvreserved: *mut ::std::ffi::c_void,
                    dwcoinit: COINIT,
                ) -> ::windows::HRESULT {
                    #[link(name = "OLE32")]
                    extern "system" {
                        fn CoInitializeEx(
                            pvreserved: *mut ::std::ffi::c_void,
                            dwcoinit: COINIT,
                        ) -> ::windows::HRESULT;
                    }
                    CoInitializeEx(
                        ::std::mem::transmute(pvreserved),
                        ::std::mem::transmute(dwcoinit),
                    )
                }
                pub unsafe fn CoTaskMemAlloc(cb: usize) -> *mut ::std::ffi::c_void {
                    #[link(name = "OLE32")]
                    extern "system" {
                        fn CoTaskMemAlloc(cb: usize) -> *mut ::std::ffi::c_void;
                    }
                    CoTaskMemAlloc(::std::mem::transmute(cb))
                }
                pub unsafe fn CoTaskMemFree(pv: *mut ::std::ffi::c_void) {
                    #[link(name = "OLE32")]
                    extern "system" {
                        fn CoTaskMemFree(pv: *mut ::std::ffi::c_void);
                    }
                    CoTaskMemFree(::std::mem::transmute(pv))
                }
                #[repr(transparent)]
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: clone :: Clone,
                    :: std :: fmt :: Debug,
                )]
                pub struct IAgileObject(::windows::IUnknown);
                impl IAgileObject {}
                unsafe impl ::windows::Interface for IAgileObject {
                    type Vtable = IAgileObject_abi;
                    const IID: ::windows::Guid = ::windows::Guid::from_values(
                        2498374548,
                        59852,
                        18912,
                        [192, 255, 238, 100, 202, 143, 91, 144],
                    );
                }
                impl ::std::convert::From<IAgileObject> for ::windows::IUnknown {
                    fn from(value: IAgileObject) -> Self {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&IAgileObject> for ::windows::IUnknown {
                    fn from(value: &IAgileObject) -> Self {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl<'a> ::windows::IntoParam<'a, ::windows::IUnknown> for IAgileObject {
                    fn into_param(self) -> ::windows::Param<'a, ::windows::IUnknown> {
                        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
                            self,
                        ))
                    }
                }
                impl<'a> ::windows::IntoParam<'a, ::windows::IUnknown> for &'a IAgileObject {
                    fn into_param(self) -> ::windows::Param<'a, ::windows::IUnknown> {
                        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
                            ::std::clone::Clone::clone(self),
                        ))
                    }
                }
                #[repr(C)]
                #[doc(hidden)]
                pub struct IAgileObject_abi(
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        iid: &::windows::Guid,
                        interface: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                );
            }
            #[allow(
                unused_variables,
                non_upper_case_globals,
                non_snake_case,
                unused_unsafe,
                non_camel_case_types,
                dead_code,
                clippy::all
            )]
            pub mod Diagnostics {
                #[allow(
                    unused_variables,
                    non_upper_case_globals,
                    non_snake_case,
                    unused_unsafe,
                    non_camel_case_types,
                    dead_code,
                    clippy::all
                )]
                pub mod Debug {
                    #[derive(
                        :: std :: cmp :: PartialEq,
                        :: std :: cmp :: Eq,
                        :: std :: marker :: Copy,
                        :: std :: clone :: Clone,
                        :: std :: default :: Default,
                        :: std :: fmt :: Debug,
                    )]
                    #[repr(transparent)]
                    pub struct FORMAT_MESSAGE_OPTIONS(pub u32);
                    impl ::std::convert::From<u32> for FORMAT_MESSAGE_OPTIONS {
                        fn from(value: u32) -> Self {
                            Self(value)
                        }
                    }
                    unsafe impl ::windows::Abi for FORMAT_MESSAGE_OPTIONS {
                        type Abi = Self;
                    }
                    impl ::std::ops::BitOr for FORMAT_MESSAGE_OPTIONS {
                        type Output = Self;
                        fn bitor(self, rhs: Self) -> Self {
                            Self(self.0 | rhs.0)
                        }
                    }
                    impl ::std::ops::BitAnd for FORMAT_MESSAGE_OPTIONS {
                        type Output = Self;
                        fn bitand(self, rhs: Self) -> Self {
                            Self(self.0 & rhs.0)
                        }
                    }
                    impl ::std::ops::BitOrAssign for FORMAT_MESSAGE_OPTIONS {
                        fn bitor_assign(&mut self, rhs: Self) {
                            self.0.bitor_assign(rhs.0)
                        }
                    }
                    impl ::std::ops::BitAndAssign for FORMAT_MESSAGE_OPTIONS {
                        fn bitand_assign(&mut self, rhs: Self) {
                            self.0.bitand_assign(rhs.0)
                        }
                    }
                    pub const FORMAT_MESSAGE_ALLOCATE_BUFFER: FORMAT_MESSAGE_OPTIONS =
                        FORMAT_MESSAGE_OPTIONS(256u32 as _);
                    pub const FORMAT_MESSAGE_FROM_SYSTEM: FORMAT_MESSAGE_OPTIONS =
                        FORMAT_MESSAGE_OPTIONS(4096u32 as _);
                    pub const FORMAT_MESSAGE_IGNORE_INSERTS: FORMAT_MESSAGE_OPTIONS =
                        FORMAT_MESSAGE_OPTIONS(512u32 as _);
                    pub unsafe fn FormatMessageW(
                        dwflags: FORMAT_MESSAGE_OPTIONS,
                        lpsource: *const ::std::ffi::c_void,
                        dwmessageid: u32,
                        dwlanguageid: u32,
                        lpbuffer: super::super::SystemServices::PWSTR,
                        nsize: u32,
                        arguments: *mut *mut i8,
                    ) -> u32 {
                        #[link(name = "KERNEL32")]
                        extern "system" {
                            fn FormatMessageW(
                                dwflags: FORMAT_MESSAGE_OPTIONS,
                                lpsource: *const ::std::ffi::c_void,
                                dwmessageid: u32,
                                dwlanguageid: u32,
                                lpbuffer: super::super::SystemServices::PWSTR,
                                nsize: u32,
                                arguments: *mut *mut i8,
                            ) -> u32;
                        }
                        FormatMessageW(
                            ::std::mem::transmute(dwflags),
                            ::std::mem::transmute(lpsource),
                            ::std::mem::transmute(dwmessageid),
                            ::std::mem::transmute(dwlanguageid),
                            ::std::mem::transmute(lpbuffer),
                            ::std::mem::transmute(nsize),
                            ::std::mem::transmute(arguments),
                        )
                    }
                    #[derive(
                        :: std :: cmp :: PartialEq,
                        :: std :: cmp :: Eq,
                        :: std :: marker :: Copy,
                        :: std :: clone :: Clone,
                        :: std :: default :: Default,
                        :: std :: fmt :: Debug,
                    )]
                    #[repr(transparent)]
                    pub struct WIN32_ERROR(pub u32);
                    impl ::std::convert::From<u32> for WIN32_ERROR {
                        fn from(value: u32) -> Self {
                            Self(value)
                        }
                    }
                    unsafe impl ::windows::Abi for WIN32_ERROR {
                        type Abi = Self;
                    }
                    impl ::std::ops::BitOr for WIN32_ERROR {
                        type Output = Self;
                        fn bitor(self, rhs: Self) -> Self {
                            Self(self.0 | rhs.0)
                        }
                    }
                    impl ::std::ops::BitAnd for WIN32_ERROR {
                        type Output = Self;
                        fn bitand(self, rhs: Self) -> Self {
                            Self(self.0 & rhs.0)
                        }
                    }
                    impl ::std::ops::BitOrAssign for WIN32_ERROR {
                        fn bitor_assign(&mut self, rhs: Self) {
                            self.0.bitor_assign(rhs.0)
                        }
                    }
                    impl ::std::ops::BitAndAssign for WIN32_ERROR {
                        fn bitand_assign(&mut self, rhs: Self) {
                            self.0.bitand_assign(rhs.0)
                        }
                    }
                    pub unsafe fn GetLastError() -> WIN32_ERROR {
                        #[link(name = "KERNEL32")]
                        extern "system" {
                            fn GetLastError() -> WIN32_ERROR;
                        }
                        GetLastError()
                    }
                }
            }
            #[allow(
                unused_variables,
                non_upper_case_globals,
                non_snake_case,
                unused_unsafe,
                non_camel_case_types,
                dead_code,
                clippy::all
            )]
            pub mod Memory {
                #[repr(transparent)]
                #[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
                pub struct HeapHandle(pub isize);
                impl HeapHandle {}
                impl ::std::default::Default for HeapHandle {
                    fn default() -> Self {
                        Self(0)
                    }
                }
                impl HeapHandle {
                    pub const NULL: Self = Self(0);
                    pub fn is_null(&self) -> bool {
                        self.0 == 0
                    }
                }
                impl ::std::fmt::Debug for HeapHandle {
                    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        fmt.debug_struct("HeapHandle")
                            .field("Value", &format_args!("{:?}", self.0))
                            .finish()
                    }
                }
                impl ::std::cmp::PartialEq for HeapHandle {
                    fn eq(&self, other: &Self) -> bool {
                        self.0 == other.0
                    }
                }
                impl ::std::cmp::Eq for HeapHandle {}
                unsafe impl ::windows::Abi for HeapHandle {
                    type Abi = Self;
                }
                pub unsafe fn GetProcessHeap() -> HeapHandle {
                    #[link(name = "KERNEL32")]
                    extern "system" {
                        fn GetProcessHeap() -> HeapHandle;
                    }
                    GetProcessHeap()
                }
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: marker :: Copy,
                    :: std :: clone :: Clone,
                    :: std :: default :: Default,
                    :: std :: fmt :: Debug,
                )]
                #[repr(transparent)]
                pub struct HEAP_FLAGS(pub u32);
                impl ::std::convert::From<u32> for HEAP_FLAGS {
                    fn from(value: u32) -> Self {
                        Self(value)
                    }
                }
                unsafe impl ::windows::Abi for HEAP_FLAGS {
                    type Abi = Self;
                }
                impl ::std::ops::BitOr for HEAP_FLAGS {
                    type Output = Self;
                    fn bitor(self, rhs: Self) -> Self {
                        Self(self.0 | rhs.0)
                    }
                }
                impl ::std::ops::BitAnd for HEAP_FLAGS {
                    type Output = Self;
                    fn bitand(self, rhs: Self) -> Self {
                        Self(self.0 & rhs.0)
                    }
                }
                impl ::std::ops::BitOrAssign for HEAP_FLAGS {
                    fn bitor_assign(&mut self, rhs: Self) {
                        self.0.bitor_assign(rhs.0)
                    }
                }
                impl ::std::ops::BitAndAssign for HEAP_FLAGS {
                    fn bitand_assign(&mut self, rhs: Self) {
                        self.0.bitand_assign(rhs.0)
                    }
                }
                pub const HEAP_NONE: HEAP_FLAGS = HEAP_FLAGS(0u32 as _);
                pub unsafe fn HeapAlloc<'a>(
                    hheap: impl ::windows::IntoParam<'a, HeapHandle>,
                    dwflags: HEAP_FLAGS,
                    dwbytes: usize,
                ) -> *mut ::std::ffi::c_void {
                    #[link(name = "KERNEL32")]
                    extern "system" {
                        fn HeapAlloc(
                            hheap: HeapHandle,
                            dwflags: HEAP_FLAGS,
                            dwbytes: usize,
                        ) -> *mut ::std::ffi::c_void;
                    }
                    HeapAlloc(
                        hheap.into_param().abi(),
                        ::std::mem::transmute(dwflags),
                        ::std::mem::transmute(dwbytes),
                    )
                }
                pub unsafe fn HeapFree<'a>(
                    hheap: impl ::windows::IntoParam<'a, HeapHandle>,
                    dwflags: HEAP_FLAGS,
                    lpmem: *mut ::std::ffi::c_void,
                ) -> super::SystemServices::BOOL {
                    #[link(name = "KERNEL32")]
                    extern "system" {
                        fn HeapFree(
                            hheap: HeapHandle,
                            dwflags: HEAP_FLAGS,
                            lpmem: *mut ::std::ffi::c_void,
                        ) -> super::SystemServices::BOOL;
                    }
                    HeapFree(
                        hheap.into_param().abi(),
                        ::std::mem::transmute(dwflags),
                        ::std::mem::transmute(lpmem),
                    )
                }
            }
            #[allow(
                unused_variables,
                non_upper_case_globals,
                non_snake_case,
                unused_unsafe,
                non_camel_case_types,
                dead_code,
                clippy::all
            )]
            pub mod OleAutomation {
                pub unsafe fn SysFreeString<'a>(bstrstring: impl ::windows::IntoParam<'a, BSTR>) {
                    #[link(name = "OLEAUT32")]
                    extern "system" {
                        fn SysFreeString(bstrstring: BSTR_abi);
                    }
                    SysFreeString(bstrstring.into_param().abi())
                }
                pub unsafe fn SysAllocStringLen<'a>(
                    strin: impl ::windows::IntoParam<'a, super::SystemServices::PWSTR>,
                    ui: u32,
                ) -> BSTR {
                    #[link(name = "OLEAUT32")]
                    extern "system" {
                        fn SysAllocStringLen(strin: super::SystemServices::PWSTR, ui: u32) -> BSTR;
                    }
                    SysAllocStringLen(strin.into_param().abi(), ::std::mem::transmute(ui))
                }
                pub unsafe fn SysStringLen<'a>(pbstr: impl ::windows::IntoParam<'a, BSTR>) -> u32 {
                    #[link(name = "OLEAUT32")]
                    extern "system" {
                        fn SysStringLen(pbstr: BSTR_abi) -> u32;
                    }
                    SysStringLen(pbstr.into_param().abi())
                }
                #[repr(transparent)]
                #[derive(:: std :: cmp :: Eq)]
                pub struct BSTR(*mut u16);
                impl BSTR {
                    pub fn is_empty(&self) -> bool {
                        self.0.is_null()
                    }
                    fn from_wide(value: &[u16]) -> Self {
                        if value.len() == 0 {
                            return Self(::std::ptr::null_mut());
                        }
                        unsafe {
                            SysAllocStringLen(
                                super::SystemServices::PWSTR(value.as_ptr() as _),
                                value.len() as u32,
                            )
                        }
                    }
                    fn as_wide(&self) -> &[u16] {
                        if self.0.is_null() {
                            return &[];
                        }
                        unsafe {
                            ::std::slice::from_raw_parts(
                                self.0 as *const u16,
                                SysStringLen(self) as usize,
                            )
                        }
                    }
                }
                impl ::std::clone::Clone for BSTR {
                    fn clone(&self) -> Self {
                        Self::from_wide(self.as_wide())
                    }
                }
                impl ::std::convert::From<&str> for BSTR {
                    fn from(value: &str) -> Self {
                        let value: ::std::vec::Vec<u16> = value.encode_utf16().collect();
                        Self::from_wide(&value)
                    }
                }
                impl ::std::convert::From<::std::string::String> for BSTR {
                    fn from(value: ::std::string::String) -> Self {
                        value.as_str().into()
                    }
                }
                impl ::std::convert::From<&::std::string::String> for BSTR {
                    fn from(value: &::std::string::String) -> Self {
                        value.as_str().into()
                    }
                }
                impl<'a> ::std::convert::TryFrom<&'a BSTR> for ::std::string::String {
                    type Error = ::std::string::FromUtf16Error;
                    fn try_from(value: &BSTR) -> ::std::result::Result<Self, Self::Error> {
                        ::std::string::String::from_utf16(value.as_wide())
                    }
                }
                impl ::std::convert::TryFrom<BSTR> for ::std::string::String {
                    type Error = ::std::string::FromUtf16Error;
                    fn try_from(value: BSTR) -> ::std::result::Result<Self, Self::Error> {
                        ::std::string::String::try_from(&value)
                    }
                }
                impl ::std::default::Default for BSTR {
                    fn default() -> Self {
                        Self(::std::ptr::null_mut())
                    }
                }
                impl ::std::fmt::Display for BSTR {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        use std::fmt::Write;
                        for c in ::std::char::decode_utf16(self.as_wide().iter().cloned()) {
                            f.write_char(c.map_err(|_| ::std::fmt::Error)?)?
                        }
                        Ok(())
                    }
                }
                impl ::std::fmt::Debug for BSTR {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        ::std::write!(f, "{}", self)
                    }
                }
                impl ::std::cmp::PartialEq for BSTR {
                    fn eq(&self, other: &Self) -> bool {
                        self.as_wide() == other.as_wide()
                    }
                }
                impl ::std::cmp::PartialEq<::std::string::String> for BSTR {
                    fn eq(&self, other: &::std::string::String) -> bool {
                        self == other.as_str()
                    }
                }
                impl ::std::cmp::PartialEq<str> for BSTR {
                    fn eq(&self, other: &str) -> bool {
                        self == other
                    }
                }
                impl ::std::cmp::PartialEq<&str> for BSTR {
                    fn eq(&self, other: &&str) -> bool {
                        self.as_wide().iter().copied().eq(other.encode_utf16())
                    }
                }
                impl ::std::cmp::PartialEq<BSTR> for &str {
                    fn eq(&self, other: &BSTR) -> bool {
                        other == self
                    }
                }
                impl ::std::ops::Drop for BSTR {
                    fn drop(&mut self) {
                        if !self.0.is_null() {
                            unsafe {
                                SysFreeString(self as &Self);
                            }
                        }
                    }
                }
                unsafe impl ::windows::Abi for BSTR {
                    type Abi = *mut u16;
                    fn set_abi(&mut self) -> *mut *mut u16 {
                        debug_assert!(self.0.is_null());
                        &mut self.0 as *mut _ as _
                    }
                }
                pub type BSTR_abi = *mut u16;
                #[repr(transparent)]
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: clone :: Clone,
                    :: std :: fmt :: Debug,
                )]
                pub struct IErrorInfo(::windows::IUnknown);
                impl IErrorInfo {
                    pub unsafe fn GetGUID(
                        &self,
                        pguid: *mut ::windows::Guid,
                    ) -> ::windows::HRESULT {
                        (::windows::Interface::vtable(self).3)(
                            ::windows::Abi::abi(self),
                            ::std::mem::transmute(pguid),
                        )
                    }
                    pub unsafe fn GetSource(&self, pbstrsource: *mut BSTR) -> ::windows::HRESULT {
                        (::windows::Interface::vtable(self).4)(
                            ::windows::Abi::abi(self),
                            ::std::mem::transmute(pbstrsource),
                        )
                    }
                    pub unsafe fn GetDescription(
                        &self,
                        pbstrdescription: *mut BSTR,
                    ) -> ::windows::HRESULT {
                        (::windows::Interface::vtable(self).5)(
                            ::windows::Abi::abi(self),
                            ::std::mem::transmute(pbstrdescription),
                        )
                    }
                    pub unsafe fn GetHelpFile(
                        &self,
                        pbstrhelpfile: *mut BSTR,
                    ) -> ::windows::HRESULT {
                        (::windows::Interface::vtable(self).6)(
                            ::windows::Abi::abi(self),
                            ::std::mem::transmute(pbstrhelpfile),
                        )
                    }
                    pub unsafe fn GetHelpContext(
                        &self,
                        pdwhelpcontext: *mut u32,
                    ) -> ::windows::HRESULT {
                        (::windows::Interface::vtable(self).7)(
                            ::windows::Abi::abi(self),
                            ::std::mem::transmute(pdwhelpcontext),
                        )
                    }
                }
                unsafe impl ::windows::Interface for IErrorInfo {
                    type Vtable = IErrorInfo_abi;
                    const IID: ::windows::Guid = ::windows::Guid::from_values(
                        485667104,
                        21629,
                        4123,
                        [142, 101, 8, 0, 43, 43, 209, 25],
                    );
                }
                impl ::std::convert::From<IErrorInfo> for ::windows::IUnknown {
                    fn from(value: IErrorInfo) -> Self {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&IErrorInfo> for ::windows::IUnknown {
                    fn from(value: &IErrorInfo) -> Self {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl<'a> ::windows::IntoParam<'a, ::windows::IUnknown> for IErrorInfo {
                    fn into_param(self) -> ::windows::Param<'a, ::windows::IUnknown> {
                        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
                            self,
                        ))
                    }
                }
                impl<'a> ::windows::IntoParam<'a, ::windows::IUnknown> for &'a IErrorInfo {
                    fn into_param(self) -> ::windows::Param<'a, ::windows::IUnknown> {
                        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
                            ::std::clone::Clone::clone(self),
                        ))
                    }
                }
                #[repr(C)]
                #[doc(hidden)]
                pub struct IErrorInfo_abi(
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        iid: &::windows::Guid,
                        interface: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        pguid: *mut ::windows::Guid,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        pbstrsource: *mut BSTR_abi,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        pbstrdescription: *mut BSTR_abi,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        pbstrhelpfile: *mut BSTR_abi,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        pdwhelpcontext: *mut u32,
                    ) -> ::windows::HRESULT,
                );
                pub unsafe fn GetErrorInfo(
                    dwreserved: u32,
                    pperrinfo: *mut ::std::option::Option<IErrorInfo>,
                ) -> ::windows::HRESULT {
                    #[link(name = "OLEAUT32")]
                    extern "system" {
                        fn GetErrorInfo(
                            dwreserved: u32,
                            pperrinfo: *mut ::windows::RawPtr,
                        ) -> ::windows::HRESULT;
                    }
                    GetErrorInfo(
                        ::std::mem::transmute(dwreserved),
                        ::std::mem::transmute(pperrinfo),
                    )
                }
                pub unsafe fn SetErrorInfo<'a>(
                    dwreserved: u32,
                    perrinfo: impl ::windows::IntoParam<'a, IErrorInfo>,
                ) -> ::windows::HRESULT {
                    #[link(name = "OLEAUT32")]
                    extern "system" {
                        fn SetErrorInfo(
                            dwreserved: u32,
                            perrinfo: ::windows::RawPtr,
                        ) -> ::windows::HRESULT;
                    }
                    SetErrorInfo(
                        ::std::mem::transmute(dwreserved),
                        perrinfo.into_param().abi(),
                    )
                }
            }
            #[allow(
                unused_variables,
                non_upper_case_globals,
                non_snake_case,
                unused_unsafe,
                non_camel_case_types,
                dead_code,
                clippy::all
            )]
            pub mod SystemServices {
                #[repr(transparent)]
                #[derive(
                    :: std :: clone :: Clone,
                    :: std :: marker :: Copy,
                    :: std :: cmp :: Eq,
                    :: std :: fmt :: Debug,
                )]
                pub struct PWSTR(pub *mut u16);
                impl PWSTR {
                    pub const NULL: Self = Self(::std::ptr::null_mut());
                    pub fn is_null(&self) -> bool {
                        self.0.is_null()
                    }
                }
                impl ::std::default::Default for PWSTR {
                    fn default() -> Self {
                        Self(::std::ptr::null_mut())
                    }
                }
                impl ::std::cmp::PartialEq for PWSTR {
                    fn eq(&self, other: &Self) -> bool {
                        self.0 == other.0
                    }
                }
                unsafe impl ::windows::Abi for PWSTR {
                    type Abi = Self;
                    fn drop_param(param: &mut ::windows::Param<Self>) {
                        if let ::windows::Param::Boxed(value) = param {
                            if !value.0.is_null() {
                                unsafe {
                                    ::std::boxed::Box::from_raw(value.0);
                                }
                            }
                        }
                    }
                }
                impl<'a> ::windows::IntoParam<'a, PWSTR> for &'a str {
                    fn into_param(self) -> ::windows::Param<'a, PWSTR> {
                        ::windows::Param::Boxed(PWSTR(::std::boxed::Box::<[u16]>::into_raw(
                            self.encode_utf16()
                                .chain(::std::iter::once(0))
                                .collect::<std::vec::Vec<u16>>()
                                .into_boxed_slice(),
                        ) as _))
                    }
                }
                impl<'a> ::windows::IntoParam<'a, PWSTR> for String {
                    fn into_param(self) -> ::windows::Param<'a, PWSTR> {
                        ::windows::Param::Boxed(PWSTR(::std::boxed::Box::<[u16]>::into_raw(
                            self.encode_utf16()
                                .chain(::std::iter::once(0))
                                .collect::<std::vec::Vec<u16>>()
                                .into_boxed_slice(),
                        ) as _))
                    }
                }
                #[repr(transparent)]
                #[derive(
                    :: std :: default :: Default,
                    :: std :: clone :: Clone,
                    :: std :: marker :: Copy,
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: fmt :: Debug,
                )]
                pub struct BOOL(pub i32);
                unsafe impl ::windows::Abi for BOOL {
                    type Abi = Self;
                }
                impl BOOL {
                    #[inline]
                    pub fn as_bool(self) -> bool {
                        !(self.0 == 0)
                    }
                    #[inline]
                    pub fn ok(self) -> ::windows::Result<()> {
                        if self.as_bool() {
                            Ok(())
                        } else {
                            Err(::windows::HRESULT::from_thread().into())
                        }
                    }
                    #[inline]
                    pub fn unwrap(self) {
                        self.ok().unwrap();
                    }
                    #[inline]
                    pub fn expect(self, msg: &str) {
                        self.ok().expect(msg);
                    }
                }
                impl ::std::convert::From<BOOL> for bool {
                    fn from(value: BOOL) -> Self {
                        value.as_bool()
                    }
                }
                impl ::std::convert::From<&BOOL> for bool {
                    fn from(value: &BOOL) -> Self {
                        value.as_bool()
                    }
                }
                impl ::std::convert::From<bool> for BOOL {
                    fn from(value: bool) -> Self {
                        if value {
                            BOOL(1)
                        } else {
                            BOOL(0)
                        }
                    }
                }
                impl ::std::convert::From<&bool> for BOOL {
                    fn from(value: &bool) -> Self {
                        (*value).into()
                    }
                }
                impl ::std::cmp::PartialEq<bool> for BOOL {
                    fn eq(&self, other: &bool) -> bool {
                        self.as_bool() == *other
                    }
                }
                impl ::std::cmp::PartialEq<BOOL> for bool {
                    fn eq(&self, other: &BOOL) -> bool {
                        *self == other.as_bool()
                    }
                }
                impl std::ops::Not for BOOL {
                    type Output = Self;
                    fn not(self) -> Self::Output {
                        if self.as_bool() {
                            BOOL(0)
                        } else {
                            BOOL(1)
                        }
                    }
                }
                impl<'a> ::windows::IntoParam<'a, BOOL> for bool {
                    fn into_param(self) -> ::windows::Param<'a, BOOL> {
                        ::windows::Param::Owned(self.into())
                    }
                }
                pub const CO_E_NOTINITIALIZED: ::windows::HRESULT =
                    ::windows::HRESULT(-2147221008i32 as _);
                pub const E_POINTER: ::windows::HRESULT = ::windows::HRESULT(-2147467261i32 as _);
                #[repr(transparent)]
                #[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
                pub struct HINSTANCE(pub isize);
                impl HINSTANCE {}
                impl ::std::default::Default for HINSTANCE {
                    fn default() -> Self {
                        Self(0)
                    }
                }
                impl HINSTANCE {
                    pub const NULL: Self = Self(0);
                    pub fn is_null(&self) -> bool {
                        self.0 == 0
                    }
                }
                impl ::std::fmt::Debug for HINSTANCE {
                    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        fmt.debug_struct("HINSTANCE")
                            .field("Value", &format_args!("{:?}", self.0))
                            .finish()
                    }
                }
                impl ::std::cmp::PartialEq for HINSTANCE {
                    fn eq(&self, other: &Self) -> bool {
                        self.0 == other.0
                    }
                }
                impl ::std::cmp::Eq for HINSTANCE {}
                unsafe impl ::windows::Abi for HINSTANCE {
                    type Abi = Self;
                }
                pub unsafe fn FreeLibrary<'a>(
                    hlibmodule: impl ::windows::IntoParam<'a, HINSTANCE>,
                ) -> BOOL {
                    #[link(name = "KERNEL32")]
                    extern "system" {
                        fn FreeLibrary(hlibmodule: HINSTANCE) -> BOOL;
                    }
                    FreeLibrary(hlibmodule.into_param().abi())
                }
                pub type FARPROC = unsafe extern "system" fn() -> isize;
                #[repr(transparent)]
                #[derive(
                    :: std :: clone :: Clone,
                    :: std :: marker :: Copy,
                    :: std :: cmp :: Eq,
                    :: std :: fmt :: Debug,
                )]
                pub struct PSTR(pub *mut u8);
                impl PSTR {
                    pub const NULL: Self = Self(::std::ptr::null_mut());
                    pub fn is_null(&self) -> bool {
                        self.0.is_null()
                    }
                }
                impl ::std::default::Default for PSTR {
                    fn default() -> Self {
                        Self(::std::ptr::null_mut())
                    }
                }
                impl ::std::cmp::PartialEq for PSTR {
                    fn eq(&self, other: &Self) -> bool {
                        self.0 == other.0
                    }
                }
                unsafe impl ::windows::Abi for PSTR {
                    type Abi = Self;
                    fn drop_param(param: &mut ::windows::Param<Self>) {
                        if let ::windows::Param::Boxed(value) = param {
                            if !value.0.is_null() {
                                unsafe {
                                    ::std::boxed::Box::from_raw(value.0);
                                }
                            }
                        }
                    }
                }
                impl<'a> ::windows::IntoParam<'a, PSTR> for &'a str {
                    fn into_param(self) -> ::windows::Param<'a, PSTR> {
                        ::windows::Param::Boxed(PSTR(::std::boxed::Box::<[u8]>::into_raw(
                            self.bytes()
                                .chain(::std::iter::once(0))
                                .collect::<std::vec::Vec<u8>>()
                                .into_boxed_slice(),
                        ) as _))
                    }
                }
                impl<'a> ::windows::IntoParam<'a, PSTR> for String {
                    fn into_param(self) -> ::windows::Param<'a, PSTR> {
                        ::windows::Param::Boxed(PSTR(::std::boxed::Box::<[u8]>::into_raw(
                            self.bytes()
                                .chain(::std::iter::once(0))
                                .collect::<std::vec::Vec<u8>>()
                                .into_boxed_slice(),
                        ) as _))
                    }
                }
                pub unsafe fn GetProcAddress<'a>(
                    hmodule: impl ::windows::IntoParam<'a, HINSTANCE>,
                    lpprocname: impl ::windows::IntoParam<'a, PSTR>,
                ) -> ::std::option::Option<FARPROC> {
                    #[link(name = "KERNEL32")]
                    extern "system" {
                        fn GetProcAddress(
                            hmodule: HINSTANCE,
                            lpprocname: PSTR,
                        ) -> ::std::option::Option<FARPROC>;
                    }
                    GetProcAddress(hmodule.into_param().abi(), lpprocname.into_param().abi())
                }
                pub unsafe fn LoadLibraryA<'a>(
                    lplibfilename: impl ::windows::IntoParam<'a, PSTR>,
                ) -> HINSTANCE {
                    #[link(name = "KERNEL32")]
                    extern "system" {
                        fn LoadLibraryA(lplibfilename: PSTR) -> HINSTANCE;
                    }
                    LoadLibraryA(lplibfilename.into_param().abi())
                }
                #[repr(transparent)]
                #[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
                pub struct HANDLE(pub isize);
                impl HANDLE {}
                impl ::std::default::Default for HANDLE {
                    fn default() -> Self {
                        Self(0)
                    }
                }
                impl HANDLE {
                    pub const NULL: Self = Self(0);
                    pub fn is_null(&self) -> bool {
                        self.0 == 0
                    }
                }
                impl ::std::fmt::Debug for HANDLE {
                    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        fmt.debug_struct("HANDLE")
                            .field("Value", &format_args!("{:?}", self.0))
                            .finish()
                    }
                }
                impl ::std::cmp::PartialEq for HANDLE {
                    fn eq(&self, other: &Self) -> bool {
                        self.0 == other.0
                    }
                }
                impl ::std::cmp::Eq for HANDLE {}
                unsafe impl ::windows::Abi for HANDLE {
                    type Abi = Self;
                }
                impl HANDLE {
                    pub const INVALID: Self = Self(-1);
                    pub fn is_invalid(&self) -> bool {
                        self.0 == -1
                    }
                }
                #[repr(C)]
                #[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
                pub struct SECURITY_ATTRIBUTES {
                    pub nLength: u32,
                    pub lpSecurityDescriptor: *mut ::std::ffi::c_void,
                    pub bInheritHandle: BOOL,
                }
                impl SECURITY_ATTRIBUTES {}
                impl ::std::default::Default for SECURITY_ATTRIBUTES {
                    fn default() -> Self {
                        Self {
                            nLength: 0,
                            lpSecurityDescriptor: ::std::ptr::null_mut(),
                            bInheritHandle: ::std::default::Default::default(),
                        }
                    }
                }
                impl ::std::fmt::Debug for SECURITY_ATTRIBUTES {
                    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        fmt.debug_struct("SECURITY_ATTRIBUTES")
                            .field("nLength", &format_args!("{:?}", self.nLength))
                            .field(
                                "lpSecurityDescriptor",
                                &format_args!("{:?}", self.lpSecurityDescriptor),
                            )
                            .field("bInheritHandle", &format_args!("{:?}", self.bInheritHandle))
                            .finish()
                    }
                }
                impl ::std::cmp::PartialEq for SECURITY_ATTRIBUTES {
                    fn eq(&self, other: &Self) -> bool {
                        self.nLength == other.nLength
                            && self.lpSecurityDescriptor == other.lpSecurityDescriptor
                            && self.bInheritHandle == other.bInheritHandle
                    }
                }
                impl ::std::cmp::Eq for SECURITY_ATTRIBUTES {}
                unsafe impl ::windows::Abi for SECURITY_ATTRIBUTES {
                    type Abi = Self;
                }
            }
            #[allow(
                unused_variables,
                non_upper_case_globals,
                non_snake_case,
                unused_unsafe,
                non_camel_case_types,
                dead_code,
                clippy::all
            )]
            pub mod Threading {
                pub unsafe fn CreateEventA<'a>(
                    lpeventattributes: *mut super::SystemServices::SECURITY_ATTRIBUTES,
                    bmanualreset: impl ::windows::IntoParam<'a, super::SystemServices::BOOL>,
                    binitialstate: impl ::windows::IntoParam<'a, super::SystemServices::BOOL>,
                    lpname: impl ::windows::IntoParam<'a, super::SystemServices::PSTR>,
                ) -> super::SystemServices::HANDLE {
                    #[link(name = "KERNEL32")]
                    extern "system" {
                        fn CreateEventA(
                            lpeventattributes: *mut super::SystemServices::SECURITY_ATTRIBUTES,
                            bmanualreset: super::SystemServices::BOOL,
                            binitialstate: super::SystemServices::BOOL,
                            lpname: super::SystemServices::PSTR,
                        ) -> super::SystemServices::HANDLE;
                    }
                    CreateEventA(
                        ::std::mem::transmute(lpeventattributes),
                        bmanualreset.into_param().abi(),
                        binitialstate.into_param().abi(),
                        lpname.into_param().abi(),
                    )
                }
                pub unsafe fn SetEvent<'a>(
                    hevent: impl ::windows::IntoParam<'a, super::SystemServices::HANDLE>,
                ) -> super::SystemServices::BOOL {
                    #[link(name = "KERNEL32")]
                    extern "system" {
                        fn SetEvent(
                            hevent: super::SystemServices::HANDLE,
                        ) -> super::SystemServices::BOOL;
                    }
                    SetEvent(hevent.into_param().abi())
                }
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: marker :: Copy,
                    :: std :: clone :: Clone,
                    :: std :: default :: Default,
                    :: std :: fmt :: Debug,
                )]
                #[repr(transparent)]
                pub struct WAIT_RETURN_CAUSE(pub u32);
                impl ::std::convert::From<u32> for WAIT_RETURN_CAUSE {
                    fn from(value: u32) -> Self {
                        Self(value)
                    }
                }
                unsafe impl ::windows::Abi for WAIT_RETURN_CAUSE {
                    type Abi = Self;
                }
                impl ::std::ops::BitOr for WAIT_RETURN_CAUSE {
                    type Output = Self;
                    fn bitor(self, rhs: Self) -> Self {
                        Self(self.0 | rhs.0)
                    }
                }
                impl ::std::ops::BitAnd for WAIT_RETURN_CAUSE {
                    type Output = Self;
                    fn bitand(self, rhs: Self) -> Self {
                        Self(self.0 & rhs.0)
                    }
                }
                impl ::std::ops::BitOrAssign for WAIT_RETURN_CAUSE {
                    fn bitor_assign(&mut self, rhs: Self) {
                        self.0.bitor_assign(rhs.0)
                    }
                }
                impl ::std::ops::BitAndAssign for WAIT_RETURN_CAUSE {
                    fn bitand_assign(&mut self, rhs: Self) {
                        self.0.bitand_assign(rhs.0)
                    }
                }
                pub unsafe fn WaitForSingleObject<'a>(
                    hhandle: impl ::windows::IntoParam<'a, super::SystemServices::HANDLE>,
                    dwmilliseconds: u32,
                ) -> WAIT_RETURN_CAUSE {
                    #[link(name = "KERNEL32")]
                    extern "system" {
                        fn WaitForSingleObject(
                            hhandle: super::SystemServices::HANDLE,
                            dwmilliseconds: u32,
                        ) -> WAIT_RETURN_CAUSE;
                    }
                    WaitForSingleObject(
                        hhandle.into_param().abi(),
                        ::std::mem::transmute(dwmilliseconds),
                    )
                }
            }
            #[allow(
                unused_variables,
                non_upper_case_globals,
                non_snake_case,
                unused_unsafe,
                non_camel_case_types,
                dead_code,
                clippy::all
            )]
            pub mod WinRT {
                #[repr(transparent)]
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: clone :: Clone,
                    :: std :: fmt :: Debug,
                )]
                pub struct ILanguageExceptionErrorInfo(::windows::IUnknown);
                impl ILanguageExceptionErrorInfo {
                    pub unsafe fn GetLanguageException(
                        &self,
                        languageexception: *mut ::std::option::Option<::windows::IUnknown>,
                    ) -> ::windows::HRESULT {
                        (::windows::Interface::vtable(self).3)(
                            ::windows::Abi::abi(self),
                            ::std::mem::transmute(languageexception),
                        )
                    }
                }
                unsafe impl ::windows::Interface for ILanguageExceptionErrorInfo {
                    type Vtable = ILanguageExceptionErrorInfo_abi;
                    const IID: ::windows::Guid = ::windows::Guid::from_values(
                        77782003,
                        57219,
                        4460,
                        [9, 70, 8, 18, 171, 246, 224, 125],
                    );
                }
                impl ::std::convert::From<ILanguageExceptionErrorInfo> for ::windows::IUnknown {
                    fn from(value: ILanguageExceptionErrorInfo) -> Self {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&ILanguageExceptionErrorInfo> for ::windows::IUnknown {
                    fn from(value: &ILanguageExceptionErrorInfo) -> Self {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl<'a> ::windows::IntoParam<'a, ::windows::IUnknown> for ILanguageExceptionErrorInfo {
                    fn into_param(self) -> ::windows::Param<'a, ::windows::IUnknown> {
                        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
                            self,
                        ))
                    }
                }
                impl<'a> ::windows::IntoParam<'a, ::windows::IUnknown> for &'a ILanguageExceptionErrorInfo {
                    fn into_param(self) -> ::windows::Param<'a, ::windows::IUnknown> {
                        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
                            ::std::clone::Clone::clone(self),
                        ))
                    }
                }
                #[repr(C)]
                #[doc(hidden)]
                pub struct ILanguageExceptionErrorInfo_abi(
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        iid: &::windows::Guid,
                        interface: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        languageexception: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                );
                #[repr(transparent)]
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: clone :: Clone,
                    :: std :: fmt :: Debug,
                )]
                pub struct ILanguageExceptionErrorInfo2(::windows::IUnknown);
                impl ILanguageExceptionErrorInfo2 {
                    pub unsafe fn GetLanguageException(
                        &self,
                        languageexception: *mut ::std::option::Option<::windows::IUnknown>,
                    ) -> ::windows::HRESULT {
                        (::windows::Interface::vtable(self).3)(
                            ::windows::Abi::abi(self),
                            ::std::mem::transmute(languageexception),
                        )
                    }
                    pub unsafe fn GetPreviousLanguageExceptionErrorInfo(
                        &self,
                        previouslanguageexceptionerrorinfo: *mut ::std::option::Option<
                            ILanguageExceptionErrorInfo2,
                        >,
                    ) -> ::windows::HRESULT {
                        (::windows::Interface::vtable(self).4)(
                            ::windows::Abi::abi(self),
                            ::std::mem::transmute(previouslanguageexceptionerrorinfo),
                        )
                    }
                    pub unsafe fn CapturePropagationContext<'a>(
                        &self,
                        languageexception: impl ::windows::IntoParam<'a, ::windows::IUnknown>,
                    ) -> ::windows::HRESULT {
                        (::windows::Interface::vtable(self).5)(
                            ::windows::Abi::abi(self),
                            languageexception.into_param().abi(),
                        )
                    }
                    pub unsafe fn GetPropagationContextHead(
                        &self,
                        propagatedlanguageexceptionerrorinfohead: *mut ::std::option::Option<
                            ILanguageExceptionErrorInfo2,
                        >,
                    ) -> ::windows::HRESULT {
                        (::windows::Interface::vtable(self).6)(
                            ::windows::Abi::abi(self),
                            ::std::mem::transmute(propagatedlanguageexceptionerrorinfohead),
                        )
                    }
                }
                unsafe impl ::windows::Interface for ILanguageExceptionErrorInfo2 {
                    type Vtable = ILanguageExceptionErrorInfo2_abi;
                    const IID: ::windows::Guid = ::windows::Guid::from_values(
                        1464264132,
                        23447,
                        16972,
                        [182, 32, 40, 34, 145, 87, 52, 221],
                    );
                }
                impl ::std::convert::From<ILanguageExceptionErrorInfo2> for ::windows::IUnknown {
                    fn from(value: ILanguageExceptionErrorInfo2) -> Self {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&ILanguageExceptionErrorInfo2> for ::windows::IUnknown {
                    fn from(value: &ILanguageExceptionErrorInfo2) -> Self {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl<'a> ::windows::IntoParam<'a, ::windows::IUnknown> for ILanguageExceptionErrorInfo2 {
                    fn into_param(self) -> ::windows::Param<'a, ::windows::IUnknown> {
                        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
                            self,
                        ))
                    }
                }
                impl<'a> ::windows::IntoParam<'a, ::windows::IUnknown> for &'a ILanguageExceptionErrorInfo2 {
                    fn into_param(self) -> ::windows::Param<'a, ::windows::IUnknown> {
                        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
                            ::std::clone::Clone::clone(self),
                        ))
                    }
                }
                impl ::std::convert::From<ILanguageExceptionErrorInfo2> for ILanguageExceptionErrorInfo {
                    fn from(value: ILanguageExceptionErrorInfo2) -> Self {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&ILanguageExceptionErrorInfo2> for ILanguageExceptionErrorInfo {
                    fn from(value: &ILanguageExceptionErrorInfo2) -> Self {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl<'a> ::windows::IntoParam<'a, ILanguageExceptionErrorInfo> for ILanguageExceptionErrorInfo2 {
                    fn into_param(self) -> ::windows::Param<'a, ILanguageExceptionErrorInfo> {
                        ::windows::Param::Owned(
                            ::std::convert::Into::<ILanguageExceptionErrorInfo>::into(self),
                        )
                    }
                }
                impl<'a> ::windows::IntoParam<'a, ILanguageExceptionErrorInfo>
                    for &'a ILanguageExceptionErrorInfo2
                {
                    fn into_param(self) -> ::windows::Param<'a, ILanguageExceptionErrorInfo> {
                        ::windows::Param::Owned(
                            ::std::convert::Into::<ILanguageExceptionErrorInfo>::into(
                                ::std::clone::Clone::clone(self),
                            ),
                        )
                    }
                }
                #[repr(C)]
                #[doc(hidden)]
                pub struct ILanguageExceptionErrorInfo2_abi(
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        iid: &::windows::Guid,
                        interface: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        languageexception: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        previouslanguageexceptionerrorinfo: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        languageexception: ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        propagatedlanguageexceptionerrorinfohead: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                );
                #[repr(transparent)]
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: clone :: Clone,
                    :: std :: fmt :: Debug,
                )]
                pub struct IRestrictedErrorInfo(::windows::IUnknown);
                impl IRestrictedErrorInfo {
                    pub unsafe fn GetErrorDetails(
                        &self,
                        description: *mut super::OleAutomation::BSTR,
                        error: *mut ::windows::HRESULT,
                        restricteddescription: *mut super::OleAutomation::BSTR,
                        capabilitysid: *mut super::OleAutomation::BSTR,
                    ) -> ::windows::HRESULT {
                        (::windows::Interface::vtable(self).3)(
                            ::windows::Abi::abi(self),
                            ::std::mem::transmute(description),
                            ::std::mem::transmute(error),
                            ::std::mem::transmute(restricteddescription),
                            ::std::mem::transmute(capabilitysid),
                        )
                    }
                    pub unsafe fn GetReference(
                        &self,
                        reference: *mut super::OleAutomation::BSTR,
                    ) -> ::windows::HRESULT {
                        (::windows::Interface::vtable(self).4)(
                            ::windows::Abi::abi(self),
                            ::std::mem::transmute(reference),
                        )
                    }
                }
                unsafe impl ::windows::Interface for IRestrictedErrorInfo {
                    type Vtable = IRestrictedErrorInfo_abi;
                    const IID: ::windows::Guid = ::windows::Guid::from_values(
                        2193256594,
                        19592,
                        17021,
                        [167, 188, 22, 221, 147, 254, 182, 126],
                    );
                }
                impl ::std::convert::From<IRestrictedErrorInfo> for ::windows::IUnknown {
                    fn from(value: IRestrictedErrorInfo) -> Self {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&IRestrictedErrorInfo> for ::windows::IUnknown {
                    fn from(value: &IRestrictedErrorInfo) -> Self {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl<'a> ::windows::IntoParam<'a, ::windows::IUnknown> for IRestrictedErrorInfo {
                    fn into_param(self) -> ::windows::Param<'a, ::windows::IUnknown> {
                        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
                            self,
                        ))
                    }
                }
                impl<'a> ::windows::IntoParam<'a, ::windows::IUnknown> for &'a IRestrictedErrorInfo {
                    fn into_param(self) -> ::windows::Param<'a, ::windows::IUnknown> {
                        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
                            ::std::clone::Clone::clone(self),
                        ))
                    }
                }
                unsafe impl ::std::marker::Send for IRestrictedErrorInfo {}
                unsafe impl ::std::marker::Sync for IRestrictedErrorInfo {}
                #[repr(C)]
                #[doc(hidden)]
                pub struct IRestrictedErrorInfo_abi(
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        iid: &::windows::Guid,
                        interface: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        description: *mut super::OleAutomation::BSTR_abi,
                        error: *mut ::windows::HRESULT,
                        restricteddescription: *mut super::OleAutomation::BSTR_abi,
                        capabilitysid: *mut super::OleAutomation::BSTR_abi,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        reference: *mut super::OleAutomation::BSTR_abi,
                    ) -> ::windows::HRESULT,
                );
                #[repr(transparent)]
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: clone :: Clone,
                    :: std :: fmt :: Debug,
                )]
                pub struct IWeakReference(::windows::IUnknown);
                impl IWeakReference {
                    pub unsafe fn Resolve<T: ::windows::Interface>(&self) -> ::windows::Result<T> {
                        let mut result__ = ::std::option::Option::None;
                        (::windows::Interface::vtable(self).3)(
                            ::windows::Abi::abi(self),
                            &<T as ::windows::Interface>::IID,
                            ::windows::Abi::set_abi(&mut result__),
                        )
                        .and_some(result__)
                    }
                }
                unsafe impl ::windows::Interface for IWeakReference {
                    type Vtable = IWeakReference_abi;
                    const IID: ::windows::Guid =
                        ::windows::Guid::from_values(55, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
                }
                impl ::std::convert::From<IWeakReference> for ::windows::IUnknown {
                    fn from(value: IWeakReference) -> Self {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&IWeakReference> for ::windows::IUnknown {
                    fn from(value: &IWeakReference) -> Self {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl<'a> ::windows::IntoParam<'a, ::windows::IUnknown> for IWeakReference {
                    fn into_param(self) -> ::windows::Param<'a, ::windows::IUnknown> {
                        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
                            self,
                        ))
                    }
                }
                impl<'a> ::windows::IntoParam<'a, ::windows::IUnknown> for &'a IWeakReference {
                    fn into_param(self) -> ::windows::Param<'a, ::windows::IUnknown> {
                        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
                            ::std::clone::Clone::clone(self),
                        ))
                    }
                }
                #[repr(C)]
                #[doc(hidden)]
                pub struct IWeakReference_abi(
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        iid: &::windows::Guid,
                        interface: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        riid: *const ::windows::Guid,
                        objectreference: *mut *mut ::std::ffi::c_void,
                    ) -> ::windows::HRESULT,
                );
                #[repr(transparent)]
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: clone :: Clone,
                    :: std :: fmt :: Debug,
                )]
                pub struct IWeakReferenceSource(::windows::IUnknown);
                impl IWeakReferenceSource {
                    pub unsafe fn GetWeakReference(
                        &self,
                        weakreference: *mut ::std::option::Option<IWeakReference>,
                    ) -> ::windows::HRESULT {
                        (::windows::Interface::vtable(self).3)(
                            ::windows::Abi::abi(self),
                            ::std::mem::transmute(weakreference),
                        )
                    }
                }
                unsafe impl ::windows::Interface for IWeakReferenceSource {
                    type Vtable = IWeakReferenceSource_abi;
                    const IID: ::windows::Guid =
                        ::windows::Guid::from_values(56, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
                }
                impl ::std::convert::From<IWeakReferenceSource> for ::windows::IUnknown {
                    fn from(value: IWeakReferenceSource) -> Self {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&IWeakReferenceSource> for ::windows::IUnknown {
                    fn from(value: &IWeakReferenceSource) -> Self {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl<'a> ::windows::IntoParam<'a, ::windows::IUnknown> for IWeakReferenceSource {
                    fn into_param(self) -> ::windows::Param<'a, ::windows::IUnknown> {
                        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
                            self,
                        ))
                    }
                }
                impl<'a> ::windows::IntoParam<'a, ::windows::IUnknown> for &'a IWeakReferenceSource {
                    fn into_param(self) -> ::windows::Param<'a, ::windows::IUnknown> {
                        ::windows::Param::Owned(::std::convert::Into::<::windows::IUnknown>::into(
                            ::std::clone::Clone::clone(self),
                        ))
                    }
                }
                #[repr(C)]
                #[doc(hidden)]
                pub struct IWeakReferenceSource_abi(
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        iid: &::windows::Guid,
                        interface: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        weakreference: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                );
            }
            #[allow(
                unused_variables,
                non_upper_case_globals,
                non_snake_case,
                unused_unsafe,
                non_camel_case_types,
                dead_code,
                clippy::all
            )]
            pub mod WindowsProgramming {
                pub unsafe fn CloseHandle<'a>(
                    hobject: impl ::windows::IntoParam<'a, super::SystemServices::HANDLE>,
                ) -> super::SystemServices::BOOL {
                    #[link(name = "KERNEL32")]
                    extern "system" {
                        fn CloseHandle(
                            hobject: super::SystemServices::HANDLE,
                        ) -> super::SystemServices::BOOL;
                    }
                    CloseHandle(hobject.into_param().abi())
                }
            }
        }
    }
}
