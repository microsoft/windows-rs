#![allow(
    unused_variables,
    non_upper_case_globals,
    non_snake_case,
    unused_unsafe,
    non_camel_case_types,
    dead_code,
    clippy::all
)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct ACTIVATEFLAGS(pub i32);
pub const ACTIVATE_WINDOWLESS: ACTIVATEFLAGS = ACTIVATEFLAGS(1i32);
impl ::std::convert::From<i32> for ACTIVATEFLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for ACTIVATEFLAGS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct ADVF(pub i32);
pub const ADVF_NODATA: ADVF = ADVF(1i32);
pub const ADVF_PRIMEFIRST: ADVF = ADVF(2i32);
pub const ADVF_ONLYONCE: ADVF = ADVF(4i32);
pub const ADVF_DATAONSTOP: ADVF = ADVF(64i32);
pub const ADVFCACHE_NOHANDLER: ADVF = ADVF(8i32);
pub const ADVFCACHE_FORCEBUILTIN: ADVF = ADVF(16i32);
pub const ADVFCACHE_ONSAVE: ADVF = ADVF(32i32);
impl ::std::convert::From<i32> for ADVF {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for ADVF {
    type Abi = Self;
    type DefaultType = Self;
}
pub const APPIDREGFLAGS_AAA_NO_IMPLICIT_ACTIVATE_AS_IU: u32 = 2048u32;
pub const APPIDREGFLAGS_ACTIVATE_IUSERVER_INDESKTOP: u32 = 1u32;
pub const APPIDREGFLAGS_ISSUE_ACTIVATION_RPC_AT_IDENTIFY: u32 = 4u32;
pub const APPIDREGFLAGS_IUSERVER_ACTIVATE_IN_CLIENT_SESSION_ONLY: u32 = 32u32;
pub const APPIDREGFLAGS_IUSERVER_SELF_SID_IN_LAUNCH_PERMISSION: u32 = 16u32;
pub const APPIDREGFLAGS_IUSERVER_UNMODIFIED_LOGON_TOKEN: u32 = 8u32;
pub const APPIDREGFLAGS_RESERVED1: u32 = 64u32;
pub const APPIDREGFLAGS_RESERVED2: u32 = 128u32;
pub const APPIDREGFLAGS_RESERVED3: u32 = 256u32;
pub const APPIDREGFLAGS_RESERVED4: u32 = 512u32;
pub const APPIDREGFLAGS_RESERVED5: u32 = 1024u32;
pub const APPIDREGFLAGS_RESERVED7: u32 = 4096u32;
pub const APPIDREGFLAGS_RESERVED8: u32 = 8192u32;
pub const APPIDREGFLAGS_RESERVED9: u32 = 16384u32;
pub const APPIDREGFLAGS_SECURE_SERVER_PROCESS_SD_AND_BIND: u32 = 2u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct APTTYPE(pub i32);
pub const APTTYPE_CURRENT: APTTYPE = APTTYPE(-1i32);
pub const APTTYPE_STA: APTTYPE = APTTYPE(0i32);
pub const APTTYPE_MTA: APTTYPE = APTTYPE(1i32);
pub const APTTYPE_NA: APTTYPE = APTTYPE(2i32);
pub const APTTYPE_MAINSTA: APTTYPE = APTTYPE(3i32);
impl ::std::convert::From<i32> for APTTYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for APTTYPE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct APTTYPEQUALIFIER(pub i32);
pub const APTTYPEQUALIFIER_NONE: APTTYPEQUALIFIER = APTTYPEQUALIFIER(0i32);
pub const APTTYPEQUALIFIER_IMPLICIT_MTA: APTTYPEQUALIFIER = APTTYPEQUALIFIER(1i32);
pub const APTTYPEQUALIFIER_NA_ON_MTA: APTTYPEQUALIFIER = APTTYPEQUALIFIER(2i32);
pub const APTTYPEQUALIFIER_NA_ON_STA: APTTYPEQUALIFIER = APTTYPEQUALIFIER(3i32);
pub const APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA: APTTYPEQUALIFIER = APTTYPEQUALIFIER(4i32);
pub const APTTYPEQUALIFIER_NA_ON_MAINSTA: APTTYPEQUALIFIER = APTTYPEQUALIFIER(5i32);
pub const APTTYPEQUALIFIER_APPLICATION_STA: APTTYPEQUALIFIER = APTTYPEQUALIFIER(6i32);
pub const APTTYPEQUALIFIER_RESERVED_1: APTTYPEQUALIFIER = APTTYPEQUALIFIER(7i32);
impl ::std::convert::From<i32> for APTTYPEQUALIFIER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for APTTYPEQUALIFIER {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct AUTHENTICATEF(pub i32);
pub const AUTHENTICATEF_PROXY: AUTHENTICATEF = AUTHENTICATEF(1i32);
pub const AUTHENTICATEF_BASIC: AUTHENTICATEF = AUTHENTICATEF(2i32);
pub const AUTHENTICATEF_HTTP: AUTHENTICATEF = AUTHENTICATEF(4i32);
impl ::std::convert::From<i32> for AUTHENTICATEF {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for AUTHENTICATEF {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct AUTHENTICATEINFO {
    pub dwFlags: u32,
    pub dwReserved: u32,
}
impl AUTHENTICATEINFO {}
impl ::std::default::Default for AUTHENTICATEINFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for AUTHENTICATEINFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("AUTHENTICATEINFO")
            .field("dwFlags", &self.dwFlags)
            .field("dwReserved", &self.dwReserved)
            .finish()
    }
}
impl ::std::cmp::PartialEq for AUTHENTICATEINFO {
    fn eq(&self, other: &Self) -> bool {
        self.dwFlags == other.dwFlags && self.dwReserved == other.dwReserved
    }
}
impl ::std::cmp::Eq for AUTHENTICATEINFO {}
unsafe impl ::windows::runtime::Abi for AUTHENTICATEINFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct ApplicationType(pub i32);
pub const ServerApplication: ApplicationType = ApplicationType(0i32);
pub const LibraryApplication: ApplicationType = ApplicationType(1i32);
impl ::std::convert::From<i32> for ApplicationType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for ApplicationType {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct AspectInfo {
    pub cb: u32,
    pub dwFlags: u32,
}
impl AspectInfo {}
impl ::std::default::Default for AspectInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for AspectInfo {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("AspectInfo")
            .field("cb", &self.cb)
            .field("dwFlags", &self.dwFlags)
            .finish()
    }
}
impl ::std::cmp::PartialEq for AspectInfo {
    fn eq(&self, other: &Self) -> bool {
        self.cb == other.cb && self.dwFlags == other.dwFlags
    }
}
impl ::std::cmp::Eq for AspectInfo {}
unsafe impl ::windows::runtime::Abi for AspectInfo {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct AspectInfoFlag(pub i32);
pub const DVASPECTINFOFLAG_CANOPTIMIZE: AspectInfoFlag = AspectInfoFlag(1i32);
impl ::std::convert::From<i32> for AspectInfoFlag {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for AspectInfoFlag {
    type Abi = Self;
    type DefaultType = Self;
}
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct AsyncIAdviseSink(::windows::runtime::IUnknown);
impl AsyncIAdviseSink {
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn Begin_OnDataChange(
        &self,
        pformatetc: *const FORMATETC,
        pstgmed: *const STGMEDIUM,
    ) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pformatetc),
            ::std::mem::transmute(pstgmed),
        ))
    }
    pub unsafe fn Finish_OnDataChange(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn Begin_OnViewChange(&self, dwaspect: u32, lindex: i32) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwaspect),
            ::std::mem::transmute(lindex),
        ))
    }
    pub unsafe fn Finish_OnViewChange(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn Begin_OnRename<'a, Param0: ::windows::runtime::IntoParam<'a, IMoniker>>(
        &self,
        pmk: Param0,
    ) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            pmk.into_param().abi(),
        ))
    }
    pub unsafe fn Finish_OnRename(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn Begin_OnSave(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn Finish_OnSave(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn Begin_OnClose(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn Finish_OnClose(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
        ))
    }
}
unsafe impl ::windows::runtime::Interface for AsyncIAdviseSink {
    type Vtable = AsyncIAdviseSink_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(336, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<AsyncIAdviseSink> for ::windows::runtime::IUnknown {
    fn from(value: AsyncIAdviseSink) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&AsyncIAdviseSink> for ::windows::runtime::IUnknown {
    fn from(value: &AsyncIAdviseSink) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for AsyncIAdviseSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &AsyncIAdviseSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct AsyncIAdviseSink_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pformatetc: *const FORMATETC,
        pstgmed: *const ::std::mem::ManuallyDrop<STGMEDIUM>,
    ),
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwaspect: u32, lindex: i32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmk: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct AsyncIAdviseSink2(::windows::runtime::IUnknown);
impl AsyncIAdviseSink2 {
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn Begin_OnDataChange(
        &self,
        pformatetc: *const FORMATETC,
        pstgmed: *const STGMEDIUM,
    ) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pformatetc),
            ::std::mem::transmute(pstgmed),
        ))
    }
    pub unsafe fn Finish_OnDataChange(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn Begin_OnViewChange(&self, dwaspect: u32, lindex: i32) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwaspect),
            ::std::mem::transmute(lindex),
        ))
    }
    pub unsafe fn Finish_OnViewChange(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn Begin_OnRename<'a, Param0: ::windows::runtime::IntoParam<'a, IMoniker>>(
        &self,
        pmk: Param0,
    ) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            pmk.into_param().abi(),
        ))
    }
    pub unsafe fn Finish_OnRename(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn Begin_OnSave(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn Finish_OnSave(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn Begin_OnClose(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn Finish_OnClose(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn Begin_OnLinkSrcChange<'a, Param0: ::windows::runtime::IntoParam<'a, IMoniker>>(
        &self,
        pmk: Param0,
    ) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            pmk.into_param().abi(),
        ))
    }
    pub unsafe fn Finish_OnLinkSrcChange(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
        ))
    }
}
unsafe impl ::windows::runtime::Interface for AsyncIAdviseSink2 {
    type Vtable = AsyncIAdviseSink2_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(337, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<AsyncIAdviseSink2> for ::windows::runtime::IUnknown {
    fn from(value: AsyncIAdviseSink2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&AsyncIAdviseSink2> for ::windows::runtime::IUnknown {
    fn from(value: &AsyncIAdviseSink2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for AsyncIAdviseSink2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &AsyncIAdviseSink2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<AsyncIAdviseSink2> for AsyncIAdviseSink {
    fn from(value: AsyncIAdviseSink2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&AsyncIAdviseSink2> for AsyncIAdviseSink {
    fn from(value: &AsyncIAdviseSink2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, AsyncIAdviseSink> for AsyncIAdviseSink2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, AsyncIAdviseSink> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<AsyncIAdviseSink>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, AsyncIAdviseSink> for &AsyncIAdviseSink2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, AsyncIAdviseSink> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<AsyncIAdviseSink>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct AsyncIAdviseSink2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pformatetc: *const FORMATETC,
        pstgmed: *const ::std::mem::ManuallyDrop<STGMEDIUM>,
    ),
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwaspect: u32, lindex: i32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmk: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmk: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct AsyncIMultiQI(::windows::runtime::IUnknown);
impl AsyncIMultiQI {
    pub unsafe fn Begin_QueryMultipleInterfaces(
        &self,
        cmqis: u32,
        pmqis: *mut MULTI_QI,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(cmqis),
            ::std::mem::transmute(pmqis),
        )
        .ok()
    }
    pub unsafe fn Finish_QueryMultipleInterfaces(
        &self,
        pmqis: *mut MULTI_QI,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmqis),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for AsyncIMultiQI {
    type Vtable = AsyncIMultiQI_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(917536, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<AsyncIMultiQI> for ::windows::runtime::IUnknown {
    fn from(value: AsyncIMultiQI) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&AsyncIMultiQI> for ::windows::runtime::IUnknown {
    fn from(value: &AsyncIMultiQI) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for AsyncIMultiQI {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &AsyncIMultiQI {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct AsyncIMultiQI_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        cmqis: u32,
        pmqis: *mut ::std::mem::ManuallyDrop<MULTI_QI>,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmqis: *mut ::std::mem::ManuallyDrop<MULTI_QI>,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct AsyncIPipeByte(::windows::runtime::IUnknown);
impl AsyncIPipeByte {
    pub unsafe fn Begin_Pull(&self, crequest: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(crequest),
        )
        .ok()
    }
    pub unsafe fn Finish_Pull(
        &self,
        buf: *mut u8,
        pcreturned: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(buf),
            ::std::mem::transmute(pcreturned),
        )
        .ok()
    }
    pub unsafe fn Begin_Push(&self, buf: *const u8, csent: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(buf),
            ::std::mem::transmute(csent),
        )
        .ok()
    }
    pub unsafe fn Finish_Push(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for AsyncIPipeByte {
    type Vtable = AsyncIPipeByte_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3677305547,
        12166,
        4561,
        [142, 4, 0, 192, 79, 185, 152, 154],
    );
}
impl ::std::convert::From<AsyncIPipeByte> for ::windows::runtime::IUnknown {
    fn from(value: AsyncIPipeByte) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&AsyncIPipeByte> for ::windows::runtime::IUnknown {
    fn from(value: &AsyncIPipeByte) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for AsyncIPipeByte {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &AsyncIPipeByte {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct AsyncIPipeByte_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        crequest: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        buf: *mut u8,
        pcreturned: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        buf: *const u8,
        csent: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct AsyncIPipeDouble(::windows::runtime::IUnknown);
impl AsyncIPipeDouble {
    pub unsafe fn Begin_Pull(&self, crequest: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(crequest),
        )
        .ok()
    }
    pub unsafe fn Finish_Pull(
        &self,
        buf: *mut f64,
        pcreturned: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(buf),
            ::std::mem::transmute(pcreturned),
        )
        .ok()
    }
    pub unsafe fn Begin_Push(&self, buf: *const f64, csent: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(buf),
            ::std::mem::transmute(csent),
        )
        .ok()
    }
    pub unsafe fn Finish_Push(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for AsyncIPipeDouble {
    type Vtable = AsyncIPipeDouble_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3677305551,
        12166,
        4561,
        [142, 4, 0, 192, 79, 185, 152, 154],
    );
}
impl ::std::convert::From<AsyncIPipeDouble> for ::windows::runtime::IUnknown {
    fn from(value: AsyncIPipeDouble) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&AsyncIPipeDouble> for ::windows::runtime::IUnknown {
    fn from(value: &AsyncIPipeDouble) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for AsyncIPipeDouble {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &AsyncIPipeDouble {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct AsyncIPipeDouble_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        crequest: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        buf: *mut f64,
        pcreturned: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        buf: *const f64,
        csent: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct AsyncIPipeLong(::windows::runtime::IUnknown);
impl AsyncIPipeLong {
    pub unsafe fn Begin_Pull(&self, crequest: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(crequest),
        )
        .ok()
    }
    pub unsafe fn Finish_Pull(
        &self,
        buf: *mut i32,
        pcreturned: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(buf),
            ::std::mem::transmute(pcreturned),
        )
        .ok()
    }
    pub unsafe fn Begin_Push(&self, buf: *const i32, csent: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(buf),
            ::std::mem::transmute(csent),
        )
        .ok()
    }
    pub unsafe fn Finish_Push(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for AsyncIPipeLong {
    type Vtable = AsyncIPipeLong_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3677305549,
        12166,
        4561,
        [142, 4, 0, 192, 79, 185, 152, 154],
    );
}
impl ::std::convert::From<AsyncIPipeLong> for ::windows::runtime::IUnknown {
    fn from(value: AsyncIPipeLong) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&AsyncIPipeLong> for ::windows::runtime::IUnknown {
    fn from(value: &AsyncIPipeLong) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for AsyncIPipeLong {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &AsyncIPipeLong {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct AsyncIPipeLong_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        crequest: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        buf: *mut i32,
        pcreturned: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        buf: *const i32,
        csent: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct AsyncIUnknown(::windows::runtime::IUnknown);
impl AsyncIUnknown {
    pub unsafe fn Begin_QueryInterface(
        &self,
        riid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
        )
        .ok()
    }
    pub unsafe fn Finish_QueryInterface(
        &self,
        ppvobject: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ppvobject),
        )
        .ok()
    }
    pub unsafe fn Begin_AddRef(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Finish_AddRef(&self) -> u32 {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn Begin_Release(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Finish_Release(&self) -> u32 {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
        ))
    }
}
unsafe impl ::windows::runtime::Interface for AsyncIUnknown {
    type Vtable = AsyncIUnknown_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(917504, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<AsyncIUnknown> for ::windows::runtime::IUnknown {
    fn from(value: AsyncIUnknown) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&AsyncIUnknown> for ::windows::runtime::IUnknown {
    fn from(value: &AsyncIUnknown) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for AsyncIUnknown {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &AsyncIUnknown {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct AsyncIUnknown_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppvobject: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
);
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct BINDF(pub i32);
pub const BINDF_ASYNCHRONOUS: BINDF = BINDF(1i32);
pub const BINDF_ASYNCSTORAGE: BINDF = BINDF(2i32);
pub const BINDF_NOPROGRESSIVERENDERING: BINDF = BINDF(4i32);
pub const BINDF_OFFLINEOPERATION: BINDF = BINDF(8i32);
pub const BINDF_GETNEWESTVERSION: BINDF = BINDF(16i32);
pub const BINDF_NOWRITECACHE: BINDF = BINDF(32i32);
pub const BINDF_NEEDFILE: BINDF = BINDF(64i32);
pub const BINDF_PULLDATA: BINDF = BINDF(128i32);
pub const BINDF_IGNORESECURITYPROBLEM: BINDF = BINDF(256i32);
pub const BINDF_RESYNCHRONIZE: BINDF = BINDF(512i32);
pub const BINDF_HYPERLINK: BINDF = BINDF(1024i32);
pub const BINDF_NO_UI: BINDF = BINDF(2048i32);
pub const BINDF_SILENTOPERATION: BINDF = BINDF(4096i32);
pub const BINDF_PRAGMA_NO_CACHE: BINDF = BINDF(8192i32);
pub const BINDF_GETCLASSOBJECT: BINDF = BINDF(16384i32);
pub const BINDF_RESERVED_1: BINDF = BINDF(32768i32);
pub const BINDF_FREE_THREADED: BINDF = BINDF(65536i32);
pub const BINDF_DIRECT_READ: BINDF = BINDF(131072i32);
pub const BINDF_FORMS_SUBMIT: BINDF = BINDF(262144i32);
pub const BINDF_GETFROMCACHE_IF_NET_FAIL: BINDF = BINDF(524288i32);
pub const BINDF_FROMURLMON: BINDF = BINDF(1048576i32);
pub const BINDF_FWD_BACK: BINDF = BINDF(2097152i32);
pub const BINDF_PREFERDEFAULTHANDLER: BINDF = BINDF(4194304i32);
pub const BINDF_ENFORCERESTRICTED: BINDF = BINDF(8388608i32);
pub const BINDF_RESERVED_2: BINDF = BINDF(-2147483648i32);
pub const BINDF_RESERVED_3: BINDF = BINDF(16777216i32);
pub const BINDF_RESERVED_4: BINDF = BINDF(33554432i32);
pub const BINDF_RESERVED_5: BINDF = BINDF(67108864i32);
pub const BINDF_RESERVED_6: BINDF = BINDF(134217728i32);
pub const BINDF_RESERVED_7: BINDF = BINDF(1073741824i32);
pub const BINDF_RESERVED_8: BINDF = BINDF(536870912i32);
impl ::std::convert::From<i32> for BINDF {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for BINDF {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct BINDF2(pub i32);
pub const BINDF2_DISABLEBASICOVERHTTP: BINDF2 = BINDF2(1i32);
pub const BINDF2_DISABLEAUTOCOOKIEHANDLING: BINDF2 = BINDF2(2i32);
pub const BINDF2_READ_DATA_GREATER_THAN_4GB: BINDF2 = BINDF2(4i32);
pub const BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID: BINDF2 = BINDF2(8i32);
pub const BINDF2_SETDOWNLOADMODE: BINDF2 = BINDF2(32i32);
pub const BINDF2_DISABLE_HTTP_REDIRECT_CACHING: BINDF2 = BINDF2(64i32);
pub const BINDF2_KEEP_CALLBACK_MODULE_LOADED: BINDF2 = BINDF2(128i32);
pub const BINDF2_ALLOW_PROXY_CRED_PROMPT: BINDF2 = BINDF2(256i32);
pub const BINDF2_RESERVED_17: BINDF2 = BINDF2(512i32);
pub const BINDF2_RESERVED_16: BINDF2 = BINDF2(1024i32);
pub const BINDF2_RESERVED_15: BINDF2 = BINDF2(2048i32);
pub const BINDF2_RESERVED_14: BINDF2 = BINDF2(4096i32);
pub const BINDF2_RESERVED_13: BINDF2 = BINDF2(8192i32);
pub const BINDF2_RESERVED_12: BINDF2 = BINDF2(16384i32);
pub const BINDF2_RESERVED_11: BINDF2 = BINDF2(32768i32);
pub const BINDF2_RESERVED_10: BINDF2 = BINDF2(65536i32);
pub const BINDF2_RESERVED_F: BINDF2 = BINDF2(131072i32);
pub const BINDF2_RESERVED_E: BINDF2 = BINDF2(262144i32);
pub const BINDF2_RESERVED_D: BINDF2 = BINDF2(524288i32);
pub const BINDF2_RESERVED_C: BINDF2 = BINDF2(1048576i32);
pub const BINDF2_RESERVED_B: BINDF2 = BINDF2(2097152i32);
pub const BINDF2_RESERVED_A: BINDF2 = BINDF2(4194304i32);
pub const BINDF2_RESERVED_9: BINDF2 = BINDF2(8388608i32);
pub const BINDF2_RESERVED_8: BINDF2 = BINDF2(16777216i32);
pub const BINDF2_RESERVED_7: BINDF2 = BINDF2(33554432i32);
pub const BINDF2_RESERVED_6: BINDF2 = BINDF2(67108864i32);
pub const BINDF2_RESERVED_5: BINDF2 = BINDF2(134217728i32);
pub const BINDF2_RESERVED_4: BINDF2 = BINDF2(268435456i32);
pub const BINDF2_RESERVED_3: BINDF2 = BINDF2(536870912i32);
pub const BINDF2_RESERVED_2: BINDF2 = BINDF2(1073741824i32);
pub const BINDF2_RESERVED_1: BINDF2 = BINDF2(-2147483648i32);
impl ::std::convert::From<i32> for BINDF2 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for BINDF2 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct BINDHANDLETYPES(pub i32);
pub const BINDHANDLETYPES_APPCACHE: BINDHANDLETYPES = BINDHANDLETYPES(0i32);
pub const BINDHANDLETYPES_DEPENDENCY: BINDHANDLETYPES = BINDHANDLETYPES(1i32);
pub const BINDHANDLETYPES_COUNT: BINDHANDLETYPES = BINDHANDLETYPES(2i32);
impl ::std::convert::From<i32> for BINDHANDLETYPES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for BINDHANDLETYPES {
    type Abi = Self;
    type DefaultType = Self;
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Security",
    feature = "Win32_Storage_StructuredStorage"
))]
impl ::std::clone::Clone for BINDINFO {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C)]
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Security",
    feature = "Win32_Storage_StructuredStorage"
))]
pub struct BINDINFO {
    pub cbSize: u32,
    pub szExtraInfo: super::super::Foundation::PWSTR,
    pub stgmedData: STGMEDIUM,
    pub grfBindInfoF: u32,
    pub dwBindVerb: u32,
    pub szCustomVerb: super::super::Foundation::PWSTR,
    pub cbstgmedData: u32,
    pub dwOptions: u32,
    pub dwOptionsFlags: u32,
    pub dwCodePage: u32,
    pub securityAttributes: super::super::Security::SECURITY_ATTRIBUTES,
    pub iid: ::windows::runtime::GUID,
    pub pUnk: ::std::option::Option<::windows::runtime::IUnknown>,
    pub dwReserved: u32,
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Security",
    feature = "Win32_Storage_StructuredStorage"
))]
impl BINDINFO {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Security",
    feature = "Win32_Storage_StructuredStorage"
))]
impl ::std::default::Default for BINDINFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Security",
    feature = "Win32_Storage_StructuredStorage"
))]
impl ::std::cmp::PartialEq for BINDINFO {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Security",
    feature = "Win32_Storage_StructuredStorage"
))]
impl ::std::cmp::Eq for BINDINFO {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Security",
    feature = "Win32_Storage_StructuredStorage"
))]
unsafe impl ::windows::runtime::Abi for BINDINFO {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct BINDINFOF(pub i32);
pub const BINDINFOF_URLENCODESTGMEDDATA: BINDINFOF = BINDINFOF(1i32);
pub const BINDINFOF_URLENCODEDEXTRAINFO: BINDINFOF = BINDINFOF(2i32);
impl ::std::convert::From<i32> for BINDINFOF {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for BINDINFOF {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct BINDINFO_OPTIONS(pub i32);
pub const BINDINFO_OPTIONS_WININETFLAG: BINDINFO_OPTIONS = BINDINFO_OPTIONS(65536i32);
pub const BINDINFO_OPTIONS_ENABLE_UTF8: BINDINFO_OPTIONS = BINDINFO_OPTIONS(131072i32);
pub const BINDINFO_OPTIONS_DISABLE_UTF8: BINDINFO_OPTIONS = BINDINFO_OPTIONS(262144i32);
pub const BINDINFO_OPTIONS_USE_IE_ENCODING: BINDINFO_OPTIONS = BINDINFO_OPTIONS(524288i32);
pub const BINDINFO_OPTIONS_BINDTOOBJECT: BINDINFO_OPTIONS = BINDINFO_OPTIONS(1048576i32);
pub const BINDINFO_OPTIONS_SECURITYOPTOUT: BINDINFO_OPTIONS = BINDINFO_OPTIONS(2097152i32);
pub const BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN: BINDINFO_OPTIONS = BINDINFO_OPTIONS(4194304i32);
pub const BINDINFO_OPTIONS_USEBINDSTRINGCREDS: BINDINFO_OPTIONS = BINDINFO_OPTIONS(8388608i32);
pub const BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS: BINDINFO_OPTIONS =
    BINDINFO_OPTIONS(16777216i32);
pub const BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE: BINDINFO_OPTIONS = BINDINFO_OPTIONS(33554432i32);
pub const BINDINFO_WPC_DOWNLOADBLOCKED: BINDINFO_OPTIONS = BINDINFO_OPTIONS(134217728i32);
pub const BINDINFO_WPC_LOGGING_ENABLED: BINDINFO_OPTIONS = BINDINFO_OPTIONS(268435456i32);
pub const BINDINFO_OPTIONS_ALLOWCONNECTDATA: BINDINFO_OPTIONS = BINDINFO_OPTIONS(536870912i32);
pub const BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS: BINDINFO_OPTIONS = BINDINFO_OPTIONS(1073741824i32);
pub const BINDINFO_OPTIONS_SHDOCVW_NAVIGATE: BINDINFO_OPTIONS = BINDINFO_OPTIONS(-2147483648i32);
impl ::std::convert::From<i32> for BINDINFO_OPTIONS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for BINDINFO_OPTIONS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct BINDSPEED(pub i32);
pub const BINDSPEED_INDEFINITE: BINDSPEED = BINDSPEED(1i32);
pub const BINDSPEED_MODERATE: BINDSPEED = BINDSPEED(2i32);
pub const BINDSPEED_IMMEDIATE: BINDSPEED = BINDSPEED(3i32);
impl ::std::convert::From<i32> for BINDSPEED {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for BINDSPEED {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct BINDSTATUS(pub i32);
pub const BINDSTATUS_FINDINGRESOURCE: BINDSTATUS = BINDSTATUS(1i32);
pub const BINDSTATUS_CONNECTING: BINDSTATUS = BINDSTATUS(2i32);
pub const BINDSTATUS_REDIRECTING: BINDSTATUS = BINDSTATUS(3i32);
pub const BINDSTATUS_BEGINDOWNLOADDATA: BINDSTATUS = BINDSTATUS(4i32);
pub const BINDSTATUS_DOWNLOADINGDATA: BINDSTATUS = BINDSTATUS(5i32);
pub const BINDSTATUS_ENDDOWNLOADDATA: BINDSTATUS = BINDSTATUS(6i32);
pub const BINDSTATUS_BEGINDOWNLOADCOMPONENTS: BINDSTATUS = BINDSTATUS(7i32);
pub const BINDSTATUS_INSTALLINGCOMPONENTS: BINDSTATUS = BINDSTATUS(8i32);
pub const BINDSTATUS_ENDDOWNLOADCOMPONENTS: BINDSTATUS = BINDSTATUS(9i32);
pub const BINDSTATUS_USINGCACHEDCOPY: BINDSTATUS = BINDSTATUS(10i32);
pub const BINDSTATUS_SENDINGREQUEST: BINDSTATUS = BINDSTATUS(11i32);
pub const BINDSTATUS_CLASSIDAVAILABLE: BINDSTATUS = BINDSTATUS(12i32);
pub const BINDSTATUS_MIMETYPEAVAILABLE: BINDSTATUS = BINDSTATUS(13i32);
pub const BINDSTATUS_CACHEFILENAMEAVAILABLE: BINDSTATUS = BINDSTATUS(14i32);
pub const BINDSTATUS_BEGINSYNCOPERATION: BINDSTATUS = BINDSTATUS(15i32);
pub const BINDSTATUS_ENDSYNCOPERATION: BINDSTATUS = BINDSTATUS(16i32);
pub const BINDSTATUS_BEGINUPLOADDATA: BINDSTATUS = BINDSTATUS(17i32);
pub const BINDSTATUS_UPLOADINGDATA: BINDSTATUS = BINDSTATUS(18i32);
pub const BINDSTATUS_ENDUPLOADDATA: BINDSTATUS = BINDSTATUS(19i32);
pub const BINDSTATUS_PROTOCOLCLASSID: BINDSTATUS = BINDSTATUS(20i32);
pub const BINDSTATUS_ENCODING: BINDSTATUS = BINDSTATUS(21i32);
pub const BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE: BINDSTATUS = BINDSTATUS(22i32);
pub const BINDSTATUS_CLASSINSTALLLOCATION: BINDSTATUS = BINDSTATUS(23i32);
pub const BINDSTATUS_DECODING: BINDSTATUS = BINDSTATUS(24i32);
pub const BINDSTATUS_LOADINGMIMEHANDLER: BINDSTATUS = BINDSTATUS(25i32);
pub const BINDSTATUS_CONTENTDISPOSITIONATTACH: BINDSTATUS = BINDSTATUS(26i32);
pub const BINDSTATUS_FILTERREPORTMIMETYPE: BINDSTATUS = BINDSTATUS(27i32);
pub const BINDSTATUS_CLSIDCANINSTANTIATE: BINDSTATUS = BINDSTATUS(28i32);
pub const BINDSTATUS_IUNKNOWNAVAILABLE: BINDSTATUS = BINDSTATUS(29i32);
pub const BINDSTATUS_DIRECTBIND: BINDSTATUS = BINDSTATUS(30i32);
pub const BINDSTATUS_RAWMIMETYPE: BINDSTATUS = BINDSTATUS(31i32);
pub const BINDSTATUS_PROXYDETECTING: BINDSTATUS = BINDSTATUS(32i32);
pub const BINDSTATUS_ACCEPTRANGES: BINDSTATUS = BINDSTATUS(33i32);
pub const BINDSTATUS_COOKIE_SENT: BINDSTATUS = BINDSTATUS(34i32);
pub const BINDSTATUS_COMPACT_POLICY_RECEIVED: BINDSTATUS = BINDSTATUS(35i32);
pub const BINDSTATUS_COOKIE_SUPPRESSED: BINDSTATUS = BINDSTATUS(36i32);
pub const BINDSTATUS_COOKIE_STATE_UNKNOWN: BINDSTATUS = BINDSTATUS(37i32);
pub const BINDSTATUS_COOKIE_STATE_ACCEPT: BINDSTATUS = BINDSTATUS(38i32);
pub const BINDSTATUS_COOKIE_STATE_REJECT: BINDSTATUS = BINDSTATUS(39i32);
pub const BINDSTATUS_COOKIE_STATE_PROMPT: BINDSTATUS = BINDSTATUS(40i32);
pub const BINDSTATUS_COOKIE_STATE_LEASH: BINDSTATUS = BINDSTATUS(41i32);
pub const BINDSTATUS_COOKIE_STATE_DOWNGRADE: BINDSTATUS = BINDSTATUS(42i32);
pub const BINDSTATUS_POLICY_HREF: BINDSTATUS = BINDSTATUS(43i32);
pub const BINDSTATUS_P3P_HEADER: BINDSTATUS = BINDSTATUS(44i32);
pub const BINDSTATUS_SESSION_COOKIE_RECEIVED: BINDSTATUS = BINDSTATUS(45i32);
pub const BINDSTATUS_PERSISTENT_COOKIE_RECEIVED: BINDSTATUS = BINDSTATUS(46i32);
pub const BINDSTATUS_SESSION_COOKIES_ALLOWED: BINDSTATUS = BINDSTATUS(47i32);
pub const BINDSTATUS_CACHECONTROL: BINDSTATUS = BINDSTATUS(48i32);
pub const BINDSTATUS_CONTENTDISPOSITIONFILENAME: BINDSTATUS = BINDSTATUS(49i32);
pub const BINDSTATUS_MIMETEXTPLAINMISMATCH: BINDSTATUS = BINDSTATUS(50i32);
pub const BINDSTATUS_PUBLISHERAVAILABLE: BINDSTATUS = BINDSTATUS(51i32);
pub const BINDSTATUS_DISPLAYNAMEAVAILABLE: BINDSTATUS = BINDSTATUS(52i32);
pub const BINDSTATUS_SSLUX_NAVBLOCKED: BINDSTATUS = BINDSTATUS(53i32);
pub const BINDSTATUS_SERVER_MIMETYPEAVAILABLE: BINDSTATUS = BINDSTATUS(54i32);
pub const BINDSTATUS_SNIFFED_CLASSIDAVAILABLE: BINDSTATUS = BINDSTATUS(55i32);
pub const BINDSTATUS_64BIT_PROGRESS: BINDSTATUS = BINDSTATUS(56i32);
pub const BINDSTATUS_LAST: BINDSTATUS = BINDSTATUS(56i32);
pub const BINDSTATUS_RESERVED_0: BINDSTATUS = BINDSTATUS(57i32);
pub const BINDSTATUS_RESERVED_1: BINDSTATUS = BINDSTATUS(58i32);
pub const BINDSTATUS_RESERVED_2: BINDSTATUS = BINDSTATUS(59i32);
pub const BINDSTATUS_RESERVED_3: BINDSTATUS = BINDSTATUS(60i32);
pub const BINDSTATUS_RESERVED_4: BINDSTATUS = BINDSTATUS(61i32);
pub const BINDSTATUS_RESERVED_5: BINDSTATUS = BINDSTATUS(62i32);
pub const BINDSTATUS_RESERVED_6: BINDSTATUS = BINDSTATUS(63i32);
pub const BINDSTATUS_RESERVED_7: BINDSTATUS = BINDSTATUS(64i32);
pub const BINDSTATUS_RESERVED_8: BINDSTATUS = BINDSTATUS(65i32);
pub const BINDSTATUS_RESERVED_9: BINDSTATUS = BINDSTATUS(66i32);
pub const BINDSTATUS_RESERVED_A: BINDSTATUS = BINDSTATUS(67i32);
pub const BINDSTATUS_RESERVED_B: BINDSTATUS = BINDSTATUS(68i32);
pub const BINDSTATUS_RESERVED_C: BINDSTATUS = BINDSTATUS(69i32);
pub const BINDSTATUS_RESERVED_D: BINDSTATUS = BINDSTATUS(70i32);
pub const BINDSTATUS_RESERVED_E: BINDSTATUS = BINDSTATUS(71i32);
pub const BINDSTATUS_RESERVED_F: BINDSTATUS = BINDSTATUS(72i32);
pub const BINDSTATUS_RESERVED_10: BINDSTATUS = BINDSTATUS(73i32);
pub const BINDSTATUS_RESERVED_11: BINDSTATUS = BINDSTATUS(74i32);
pub const BINDSTATUS_RESERVED_12: BINDSTATUS = BINDSTATUS(75i32);
pub const BINDSTATUS_RESERVED_13: BINDSTATUS = BINDSTATUS(76i32);
pub const BINDSTATUS_RESERVED_14: BINDSTATUS = BINDSTATUS(77i32);
pub const BINDSTATUS_LAST_PRIVATE: BINDSTATUS = BINDSTATUS(77i32);
impl ::std::convert::From<i32> for BINDSTATUS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for BINDSTATUS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct BINDSTRING(pub i32);
pub const BINDSTRING_HEADERS: BINDSTRING = BINDSTRING(1i32);
pub const BINDSTRING_ACCEPT_MIMES: BINDSTRING = BINDSTRING(2i32);
pub const BINDSTRING_EXTRA_URL: BINDSTRING = BINDSTRING(3i32);
pub const BINDSTRING_LANGUAGE: BINDSTRING = BINDSTRING(4i32);
pub const BINDSTRING_USERNAME: BINDSTRING = BINDSTRING(5i32);
pub const BINDSTRING_PASSWORD: BINDSTRING = BINDSTRING(6i32);
pub const BINDSTRING_UA_PIXELS: BINDSTRING = BINDSTRING(7i32);
pub const BINDSTRING_UA_COLOR: BINDSTRING = BINDSTRING(8i32);
pub const BINDSTRING_OS: BINDSTRING = BINDSTRING(9i32);
pub const BINDSTRING_USER_AGENT: BINDSTRING = BINDSTRING(10i32);
pub const BINDSTRING_ACCEPT_ENCODINGS: BINDSTRING = BINDSTRING(11i32);
pub const BINDSTRING_POST_COOKIE: BINDSTRING = BINDSTRING(12i32);
pub const BINDSTRING_POST_DATA_MIME: BINDSTRING = BINDSTRING(13i32);
pub const BINDSTRING_URL: BINDSTRING = BINDSTRING(14i32);
pub const BINDSTRING_IID: BINDSTRING = BINDSTRING(15i32);
pub const BINDSTRING_FLAG_BIND_TO_OBJECT: BINDSTRING = BINDSTRING(16i32);
pub const BINDSTRING_PTR_BIND_CONTEXT: BINDSTRING = BINDSTRING(17i32);
pub const BINDSTRING_XDR_ORIGIN: BINDSTRING = BINDSTRING(18i32);
pub const BINDSTRING_DOWNLOADPATH: BINDSTRING = BINDSTRING(19i32);
pub const BINDSTRING_ROOTDOC_URL: BINDSTRING = BINDSTRING(20i32);
pub const BINDSTRING_INITIAL_FILENAME: BINDSTRING = BINDSTRING(21i32);
pub const BINDSTRING_PROXY_USERNAME: BINDSTRING = BINDSTRING(22i32);
pub const BINDSTRING_PROXY_PASSWORD: BINDSTRING = BINDSTRING(23i32);
pub const BINDSTRING_ENTERPRISE_ID: BINDSTRING = BINDSTRING(24i32);
pub const BINDSTRING_DOC_URL: BINDSTRING = BINDSTRING(25i32);
pub const BINDSTRING_SAMESITE_COOKIE_LEVEL: BINDSTRING = BINDSTRING(26i32);
impl ::std::convert::From<i32> for BINDSTRING {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for BINDSTRING {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct BINDVERB(pub i32);
pub const BINDVERB_GET: BINDVERB = BINDVERB(0i32);
pub const BINDVERB_POST: BINDVERB = BINDVERB(1i32);
pub const BINDVERB_PUT: BINDVERB = BINDVERB(2i32);
pub const BINDVERB_CUSTOM: BINDVERB = BINDVERB(3i32);
pub const BINDVERB_RESERVED1: BINDVERB = BINDVERB(4i32);
impl ::std::convert::From<i32> for BINDVERB {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for BINDVERB {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct BIND_FLAGS(pub i32);
pub const BIND_MAYBOTHERUSER: BIND_FLAGS = BIND_FLAGS(1i32);
pub const BIND_JUSTTESTEXISTENCE: BIND_FLAGS = BIND_FLAGS(2i32);
impl ::std::convert::From<i32> for BIND_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for BIND_FLAGS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct BIND_OPTS {
    pub cbStruct: u32,
    pub grfFlags: u32,
    pub grfMode: u32,
    pub dwTickCountDeadline: u32,
}
impl BIND_OPTS {}
impl ::std::default::Default for BIND_OPTS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for BIND_OPTS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("BIND_OPTS")
            .field("cbStruct", &self.cbStruct)
            .field("grfFlags", &self.grfFlags)
            .field("grfMode", &self.grfMode)
            .field("dwTickCountDeadline", &self.dwTickCountDeadline)
            .finish()
    }
}
impl ::std::cmp::PartialEq for BIND_OPTS {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.grfFlags == other.grfFlags
            && self.grfMode == other.grfMode
            && self.dwTickCountDeadline == other.dwTickCountDeadline
    }
}
impl ::std::cmp::Eq for BIND_OPTS {}
unsafe impl ::windows::runtime::Abi for BIND_OPTS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct BIND_OPTS2 {
    pub __AnonymousBase_objidl_L9017_C36: BIND_OPTS,
    pub dwTrackFlags: u32,
    pub dwClassContext: u32,
    pub locale: u32,
    pub pServerInfo: *mut COSERVERINFO,
}
#[cfg(feature = "Win32_Foundation")]
impl BIND_OPTS2 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for BIND_OPTS2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for BIND_OPTS2 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("BIND_OPTS2")
            .field(
                "__AnonymousBase_objidl_L9017_C36",
                &self.__AnonymousBase_objidl_L9017_C36,
            )
            .field("dwTrackFlags", &self.dwTrackFlags)
            .field("dwClassContext", &self.dwClassContext)
            .field("locale", &self.locale)
            .field("pServerInfo", &self.pServerInfo)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for BIND_OPTS2 {
    fn eq(&self, other: &Self) -> bool {
        self.__AnonymousBase_objidl_L9017_C36 == other.__AnonymousBase_objidl_L9017_C36
            && self.dwTrackFlags == other.dwTrackFlags
            && self.dwClassContext == other.dwClassContext
            && self.locale == other.locale
            && self.pServerInfo == other.pServerInfo
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for BIND_OPTS2 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for BIND_OPTS2 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct BIND_OPTS3 {
    pub __AnonymousBase_objidl_L9041_C36: BIND_OPTS2,
    pub hwnd: super::super::Foundation::HWND,
}
#[cfg(feature = "Win32_Foundation")]
impl BIND_OPTS3 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for BIND_OPTS3 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for BIND_OPTS3 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("BIND_OPTS3")
            .field(
                "__AnonymousBase_objidl_L9041_C36",
                &self.__AnonymousBase_objidl_L9041_C36,
            )
            .field("hwnd", &self.hwnd)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for BIND_OPTS3 {
    fn eq(&self, other: &Self) -> bool {
        self.__AnonymousBase_objidl_L9041_C36 == other.__AnonymousBase_objidl_L9041_C36
            && self.hwnd == other.hwnd
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for BIND_OPTS3 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for BIND_OPTS3 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct BLOB {
    pub cbSize: u32,
    pub pBlobData: *mut u8,
}
impl BLOB {}
impl ::std::default::Default for BLOB {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for BLOB {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("BLOB")
            .field("cbSize", &self.cbSize)
            .field("pBlobData", &self.pBlobData)
            .finish()
    }
}
impl ::std::cmp::PartialEq for BLOB {
    fn eq(&self, other: &Self) -> bool {
        self.cbSize == other.cbSize && self.pBlobData == other.pBlobData
    }
}
impl ::std::cmp::Eq for BLOB {}
unsafe impl ::windows::runtime::Abi for BLOB {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct BSCF(pub i32);
pub const BSCF_FIRSTDATANOTIFICATION: BSCF = BSCF(1i32);
pub const BSCF_INTERMEDIATEDATANOTIFICATION: BSCF = BSCF(2i32);
pub const BSCF_LASTDATANOTIFICATION: BSCF = BSCF(4i32);
pub const BSCF_DATAFULLYAVAILABLE: BSCF = BSCF(8i32);
pub const BSCF_AVAILABLEDATASIZEUNKNOWN: BSCF = BSCF(16i32);
pub const BSCF_SKIPDRAINDATAFORFILEURLS: BSCF = BSCF(32i32);
pub const BSCF_64BITLENGTHDOWNLOAD: BSCF = BSCF(64i32);
impl ::std::convert::From<i32> for BSCF {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for BSCF {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct BYTE_BLOB {
    pub clSize: u32,
    pub abData: [u8; 1],
}
impl BYTE_BLOB {}
impl ::std::default::Default for BYTE_BLOB {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for BYTE_BLOB {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("BYTE_BLOB")
            .field("clSize", &self.clSize)
            .field("abData", &self.abData)
            .finish()
    }
}
impl ::std::cmp::PartialEq for BYTE_BLOB {
    fn eq(&self, other: &Self) -> bool {
        self.clSize == other.clSize && self.abData == other.abData
    }
}
impl ::std::cmp::Eq for BYTE_BLOB {}
unsafe impl ::windows::runtime::Abi for BYTE_BLOB {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct BYTE_SIZEDARR {
    pub clSize: u32,
    pub pData: *mut u8,
}
impl BYTE_SIZEDARR {}
impl ::std::default::Default for BYTE_SIZEDARR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for BYTE_SIZEDARR {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("BYTE_SIZEDARR")
            .field("clSize", &self.clSize)
            .field("pData", &self.pData)
            .finish()
    }
}
impl ::std::cmp::PartialEq for BYTE_SIZEDARR {
    fn eq(&self, other: &Self) -> bool {
        self.clSize == other.clSize && self.pData == other.pData
    }
}
impl ::std::cmp::Eq for BYTE_SIZEDARR {}
unsafe impl ::windows::runtime::Abi for BYTE_SIZEDARR {
    type Abi = Self;
    type DefaultType = Self;
}
pub const BZ_DISABLECANCELBUTTON: i32 = 1i32;
pub const BZ_DISABLERETRYBUTTON: i32 = 4i32;
pub const BZ_DISABLESWITCHTOBUTTON: i32 = 2i32;
pub const BZ_NOTRESPONDINGDIALOG: i32 = 8i32;
pub unsafe fn BindMoniker<'a, Param0: ::windows::runtime::IntoParam<'a, IMoniker>>(
    pmk: Param0,
    grfopt: u32,
    iidresult: *const ::windows::runtime::GUID,
    ppvresult: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn BindMoniker(
                pmk: ::windows::runtime::RawPtr,
                grfopt: u32,
                iidresult: *const ::windows::runtime::GUID,
                ppvresult: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        BindMoniker(
            pmk.into_param().abi(),
            ::std::mem::transmute(grfopt),
            ::std::mem::transmute(iidresult),
            ::std::mem::transmute(ppvresult),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CADWORD {
    pub cElems: u32,
    pub pElems: *mut u32,
}
impl CADWORD {}
impl ::std::default::Default for CADWORD {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CADWORD {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CADWORD")
            .field("cElems", &self.cElems)
            .field("pElems", &self.pElems)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CADWORD {
    fn eq(&self, other: &Self) -> bool {
        self.cElems == other.cElems && self.pElems == other.pElems
    }
}
impl ::std::cmp::Eq for CADWORD {}
unsafe impl ::windows::runtime::Abi for CADWORD {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CALLFRAMEINFO {
    pub iMethod: u32,
    pub fHasInValues: super::super::Foundation::BOOL,
    pub fHasInOutValues: super::super::Foundation::BOOL,
    pub fHasOutValues: super::super::Foundation::BOOL,
    pub fDerivesFromIDispatch: super::super::Foundation::BOOL,
    pub cInInterfacesMax: i32,
    pub cInOutInterfacesMax: i32,
    pub cOutInterfacesMax: i32,
    pub cTopLevelInInterfaces: i32,
    pub iid: ::windows::runtime::GUID,
    pub cMethod: u32,
    pub cParams: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl CALLFRAMEINFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CALLFRAMEINFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CALLFRAMEINFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CALLFRAMEINFO")
            .field("iMethod", &self.iMethod)
            .field("fHasInValues", &self.fHasInValues)
            .field("fHasInOutValues", &self.fHasInOutValues)
            .field("fHasOutValues", &self.fHasOutValues)
            .field("fDerivesFromIDispatch", &self.fDerivesFromIDispatch)
            .field("cInInterfacesMax", &self.cInInterfacesMax)
            .field("cInOutInterfacesMax", &self.cInOutInterfacesMax)
            .field("cOutInterfacesMax", &self.cOutInterfacesMax)
            .field("cTopLevelInInterfaces", &self.cTopLevelInInterfaces)
            .field("iid", &self.iid)
            .field("cMethod", &self.cMethod)
            .field("cParams", &self.cParams)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CALLFRAMEINFO {
    fn eq(&self, other: &Self) -> bool {
        self.iMethod == other.iMethod
            && self.fHasInValues == other.fHasInValues
            && self.fHasInOutValues == other.fHasInOutValues
            && self.fHasOutValues == other.fHasOutValues
            && self.fDerivesFromIDispatch == other.fDerivesFromIDispatch
            && self.cInInterfacesMax == other.cInInterfacesMax
            && self.cInOutInterfacesMax == other.cInOutInterfacesMax
            && self.cOutInterfacesMax == other.cOutInterfacesMax
            && self.cTopLevelInInterfaces == other.cTopLevelInInterfaces
            && self.iid == other.iid
            && self.cMethod == other.cMethod
            && self.cParams == other.cParams
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CALLFRAMEINFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CALLFRAMEINFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CALLFRAMEPARAMINFO {
    pub fIn: super::super::Foundation::BOOLEAN,
    pub fOut: super::super::Foundation::BOOLEAN,
    pub stackOffset: u32,
    pub cbParam: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl CALLFRAMEPARAMINFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CALLFRAMEPARAMINFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CALLFRAMEPARAMINFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CALLFRAMEPARAMINFO")
            .field("fIn", &self.fIn)
            .field("fOut", &self.fOut)
            .field("stackOffset", &self.stackOffset)
            .field("cbParam", &self.cbParam)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CALLFRAMEPARAMINFO {
    fn eq(&self, other: &Self) -> bool {
        self.fIn == other.fIn
            && self.fOut == other.fOut
            && self.stackOffset == other.stackOffset
            && self.cbParam == other.cbParam
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CALLFRAMEPARAMINFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CALLFRAMEPARAMINFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CALLFRAME_COPY(pub i32);
pub const CALLFRAME_COPY_NESTED: CALLFRAME_COPY = CALLFRAME_COPY(1i32);
pub const CALLFRAME_COPY_INDEPENDENT: CALLFRAME_COPY = CALLFRAME_COPY(2i32);
impl ::std::convert::From<i32> for CALLFRAME_COPY {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CALLFRAME_COPY {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CALLFRAME_FREE(pub i32);
pub const CALLFRAME_FREE_NONE: CALLFRAME_FREE = CALLFRAME_FREE(0i32);
pub const CALLFRAME_FREE_IN: CALLFRAME_FREE = CALLFRAME_FREE(1i32);
pub const CALLFRAME_FREE_INOUT: CALLFRAME_FREE = CALLFRAME_FREE(2i32);
pub const CALLFRAME_FREE_OUT: CALLFRAME_FREE = CALLFRAME_FREE(4i32);
pub const CALLFRAME_FREE_TOP_INOUT: CALLFRAME_FREE = CALLFRAME_FREE(8i32);
pub const CALLFRAME_FREE_TOP_OUT: CALLFRAME_FREE = CALLFRAME_FREE(16i32);
pub const CALLFRAME_FREE_ALL: CALLFRAME_FREE = CALLFRAME_FREE(31i32);
impl ::std::convert::From<i32> for CALLFRAME_FREE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CALLFRAME_FREE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CALLFRAME_MARSHALCONTEXT {
    pub fIn: super::super::Foundation::BOOLEAN,
    pub dwDestContext: u32,
    pub pvDestContext: *mut ::std::ffi::c_void,
    pub punkReserved: ::std::option::Option<::windows::runtime::IUnknown>,
    pub guidTransferSyntax: ::windows::runtime::GUID,
}
#[cfg(feature = "Win32_Foundation")]
impl CALLFRAME_MARSHALCONTEXT {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CALLFRAME_MARSHALCONTEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CALLFRAME_MARSHALCONTEXT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CALLFRAME_MARSHALCONTEXT")
            .field("fIn", &self.fIn)
            .field("dwDestContext", &self.dwDestContext)
            .field("pvDestContext", &self.pvDestContext)
            .field("punkReserved", &self.punkReserved)
            .field("guidTransferSyntax", &self.guidTransferSyntax)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CALLFRAME_MARSHALCONTEXT {
    fn eq(&self, other: &Self) -> bool {
        self.fIn == other.fIn
            && self.dwDestContext == other.dwDestContext
            && self.pvDestContext == other.pvDestContext
            && self.punkReserved == other.punkReserved
            && self.guidTransferSyntax == other.guidTransferSyntax
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CALLFRAME_MARSHALCONTEXT {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CALLFRAME_MARSHALCONTEXT {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CALLFRAME_NULL(pub i32);
pub const CALLFRAME_NULL_NONE: CALLFRAME_NULL = CALLFRAME_NULL(0i32);
pub const CALLFRAME_NULL_INOUT: CALLFRAME_NULL = CALLFRAME_NULL(2i32);
pub const CALLFRAME_NULL_OUT: CALLFRAME_NULL = CALLFRAME_NULL(4i32);
pub const CALLFRAME_NULL_ALL: CALLFRAME_NULL = CALLFRAME_NULL(6i32);
impl ::std::convert::From<i32> for CALLFRAME_NULL {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CALLFRAME_NULL {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CALLFRAME_WALK(pub i32);
pub const CALLFRAME_WALK_IN: CALLFRAME_WALK = CALLFRAME_WALK(1i32);
pub const CALLFRAME_WALK_INOUT: CALLFRAME_WALK = CALLFRAME_WALK(2i32);
pub const CALLFRAME_WALK_OUT: CALLFRAME_WALK = CALLFRAME_WALK(4i32);
impl ::std::convert::From<i32> for CALLFRAME_WALK {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CALLFRAME_WALK {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CALLTYPE(pub i32);
pub const CALLTYPE_TOPLEVEL: CALLTYPE = CALLTYPE(1i32);
pub const CALLTYPE_NESTED: CALLTYPE = CALLTYPE(2i32);
pub const CALLTYPE_ASYNC: CALLTYPE = CALLTYPE(3i32);
pub const CALLTYPE_TOPLEVEL_CALLPENDING: CALLTYPE = CALLTYPE(4i32);
pub const CALLTYPE_ASYNC_CALLPENDING: CALLTYPE = CALLTYPE(5i32);
impl ::std::convert::From<i32> for CALLTYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CALLTYPE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CALPOLESTR {
    pub cElems: u32,
    pub pElems: *mut super::super::Foundation::PWSTR,
}
#[cfg(feature = "Win32_Foundation")]
impl CALPOLESTR {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CALPOLESTR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CALPOLESTR {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CALPOLESTR")
            .field("cElems", &self.cElems)
            .field("pElems", &self.pElems)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CALPOLESTR {
    fn eq(&self, other: &Self) -> bool {
        self.cElems == other.cElems && self.pElems == other.pElems
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CALPOLESTR {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CALPOLESTR {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CATEGORYINFO {
    pub catid: ::windows::runtime::GUID,
    pub lcid: u32,
    pub szDescription: [u16; 128],
}
impl CATEGORYINFO {}
impl ::std::default::Default for CATEGORYINFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CATEGORYINFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CATEGORYINFO")
            .field("catid", &self.catid)
            .field("lcid", &self.lcid)
            .field("szDescription", &self.szDescription)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CATEGORYINFO {
    fn eq(&self, other: &Self) -> bool {
        self.catid == other.catid
            && self.lcid == other.lcid
            && self.szDescription == other.szDescription
    }
}
impl ::std::cmp::Eq for CATEGORYINFO {}
unsafe impl ::windows::runtime::Abi for CATEGORYINFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CAUUID {
    pub cElems: u32,
    pub pElems: *mut ::windows::runtime::GUID,
}
impl CAUUID {}
impl ::std::default::Default for CAUUID {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CAUUID {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CAUUID")
            .field("cElems", &self.cElems)
            .field("pElems", &self.pElems)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CAUUID {
    fn eq(&self, other: &Self) -> bool {
        self.cElems == other.cElems && self.pElems == other.pElems
    }
}
impl ::std::cmp::Eq for CAUUID {}
unsafe impl ::windows::runtime::Abi for CAUUID {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CF_CONVERTONLY: i32 = 256i32;
pub const CF_DISABLEACTIVATEAS: i32 = 64i32;
pub const CF_DISABLEDISPLAYASICON: i32 = 32i32;
pub const CF_HIDECHANGEICON: i32 = 128i32;
pub const CF_NULL: u32 = 0u32;
pub const CF_SELECTACTIVATEAS: i32 = 16i32;
pub const CF_SELECTCONVERTTO: i32 = 8i32;
pub const CF_SETACTIVATEDEFAULT: i32 = 4i32;
pub const CF_SETCONVERTDEFAULT: i32 = 2i32;
pub const CF_SHOWHELPBUTTON: i32 = 1i32;
pub const CIF_SELECTCURRENT: i32 = 2i32;
pub const CIF_SELECTDEFAULT: i32 = 4i32;
pub const CIF_SELECTFROMFILE: i32 = 8i32;
pub const CIF_SHOWHELP: i32 = 1i32;
pub const CIF_USEICONEXE: i32 = 16i32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CIP_STATUS(pub i32);
pub const CIP_DISK_FULL: CIP_STATUS = CIP_STATUS(0i32);
pub const CIP_ACCESS_DENIED: CIP_STATUS = CIP_STATUS(1i32);
pub const CIP_NEWER_VERSION_EXISTS: CIP_STATUS = CIP_STATUS(2i32);
pub const CIP_OLDER_VERSION_EXISTS: CIP_STATUS = CIP_STATUS(3i32);
pub const CIP_NAME_CONFLICT: CIP_STATUS = CIP_STATUS(4i32);
pub const CIP_TRUST_VERIFICATION_COMPONENT_MISSING: CIP_STATUS = CIP_STATUS(5i32);
pub const CIP_EXE_SELF_REGISTERATION_TIMEOUT: CIP_STATUS = CIP_STATUS(6i32);
pub const CIP_UNSAFE_TO_ABORT: CIP_STATUS = CIP_STATUS(7i32);
pub const CIP_NEED_REBOOT: CIP_STATUS = CIP_STATUS(8i32);
pub const CIP_NEED_REBOOT_UI_PERMISSION: CIP_STATUS = CIP_STATUS(9i32);
impl ::std::convert::From<i32> for CIP_STATUS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CIP_STATUS {
    type Abi = Self;
    type DefaultType = Self;
}
pub unsafe fn CLIPFORMAT_UserFree(param0: *const u32, param1: *const u16) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CLIPFORMAT_UserFree(param0: *const u32, param1: *const u16);
        }
        ::std::mem::transmute(CLIPFORMAT_UserFree(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CLIPFORMAT_UserFree64(param0: *const u32, param1: *const u16) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CLIPFORMAT_UserFree64(param0: *const u32, param1: *const u16);
        }
        ::std::mem::transmute(CLIPFORMAT_UserFree64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CLIPFORMAT_UserMarshal(
    param0: *const u32,
    param1: *mut u8,
    param2: *const u16,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CLIPFORMAT_UserMarshal(
                param0: *const u32,
                param1: *mut u8,
                param2: *const u16,
            ) -> *mut u8;
        }
        ::std::mem::transmute(CLIPFORMAT_UserMarshal(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CLIPFORMAT_UserMarshal64(
    param0: *const u32,
    param1: *mut u8,
    param2: *const u16,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CLIPFORMAT_UserMarshal64(
                param0: *const u32,
                param1: *mut u8,
                param2: *const u16,
            ) -> *mut u8;
        }
        ::std::mem::transmute(CLIPFORMAT_UserMarshal64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CLIPFORMAT_UserSize(param0: *const u32, param1: u32, param2: *const u16) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CLIPFORMAT_UserSize(param0: *const u32, param1: u32, param2: *const u16) -> u32;
        }
        ::std::mem::transmute(CLIPFORMAT_UserSize(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CLIPFORMAT_UserSize64(param0: *const u32, param1: u32, param2: *const u16) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CLIPFORMAT_UserSize64(param0: *const u32, param1: u32, param2: *const u16) -> u32;
        }
        ::std::mem::transmute(CLIPFORMAT_UserSize64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CLIPFORMAT_UserUnmarshal(
    param0: *const u32,
    param1: *const u8,
    param2: *mut u16,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CLIPFORMAT_UserUnmarshal(
                param0: *const u32,
                param1: *const u8,
                param2: *mut u16,
            ) -> *mut u8;
        }
        ::std::mem::transmute(CLIPFORMAT_UserUnmarshal(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CLIPFORMAT_UserUnmarshal64(
    param0: *const u32,
    param1: *const u8,
    param2: *mut u16,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CLIPFORMAT_UserUnmarshal64(
                param0: *const u32,
                param1: *const u8,
                param2: *mut u16,
            ) -> *mut u8;
        }
        ::std::mem::transmute(CLIPFORMAT_UserUnmarshal64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLSCTX(pub u32);
pub const CLSCTX_INPROC_SERVER: CLSCTX = CLSCTX(1u32);
pub const CLSCTX_INPROC_HANDLER: CLSCTX = CLSCTX(2u32);
pub const CLSCTX_LOCAL_SERVER: CLSCTX = CLSCTX(4u32);
pub const CLSCTX_INPROC_SERVER16: CLSCTX = CLSCTX(8u32);
pub const CLSCTX_REMOTE_SERVER: CLSCTX = CLSCTX(16u32);
pub const CLSCTX_INPROC_HANDLER16: CLSCTX = CLSCTX(32u32);
pub const CLSCTX_RESERVED1: CLSCTX = CLSCTX(64u32);
pub const CLSCTX_RESERVED2: CLSCTX = CLSCTX(128u32);
pub const CLSCTX_RESERVED3: CLSCTX = CLSCTX(256u32);
pub const CLSCTX_RESERVED4: CLSCTX = CLSCTX(512u32);
pub const CLSCTX_NO_CODE_DOWNLOAD: CLSCTX = CLSCTX(1024u32);
pub const CLSCTX_RESERVED5: CLSCTX = CLSCTX(2048u32);
pub const CLSCTX_NO_CUSTOM_MARSHAL: CLSCTX = CLSCTX(4096u32);
pub const CLSCTX_ENABLE_CODE_DOWNLOAD: CLSCTX = CLSCTX(8192u32);
pub const CLSCTX_NO_FAILURE_LOG: CLSCTX = CLSCTX(16384u32);
pub const CLSCTX_DISABLE_AAA: CLSCTX = CLSCTX(32768u32);
pub const CLSCTX_ENABLE_AAA: CLSCTX = CLSCTX(65536u32);
pub const CLSCTX_FROM_DEFAULT_CONTEXT: CLSCTX = CLSCTX(131072u32);
pub const CLSCTX_ACTIVATE_X86_SERVER: CLSCTX = CLSCTX(262144u32);
pub const CLSCTX_ACTIVATE_32_BIT_SERVER: CLSCTX = CLSCTX(262144u32);
pub const CLSCTX_ACTIVATE_64_BIT_SERVER: CLSCTX = CLSCTX(524288u32);
pub const CLSCTX_ENABLE_CLOAKING: CLSCTX = CLSCTX(1048576u32);
pub const CLSCTX_APPCONTAINER: CLSCTX = CLSCTX(4194304u32);
pub const CLSCTX_ACTIVATE_AAA_AS_IU: CLSCTX = CLSCTX(8388608u32);
pub const CLSCTX_RESERVED6: CLSCTX = CLSCTX(16777216u32);
pub const CLSCTX_ACTIVATE_ARM32_SERVER: CLSCTX = CLSCTX(33554432u32);
pub const CLSCTX_PS_DLL: CLSCTX = CLSCTX(2147483648u32);
pub const CLSCTX_ALL: CLSCTX = CLSCTX(23u32);
pub const CLSCTX_SERVER: CLSCTX = CLSCTX(21u32);
impl ::std::convert::From<u32> for CLSCTX {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLSCTX {
    type Abi = Self;
    type DefaultType = Self;
}
impl ::std::ops::BitOr for CLSCTX {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for CLSCTX {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for CLSCTX {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for CLSCTX {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for CLSCTX {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CLSIDFromProgID<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    lpszprogid: Param0,
) -> ::windows::runtime::Result<::windows::runtime::GUID> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CLSIDFromProgID(
                lpszprogid: super::super::Foundation::PWSTR,
                lpclsid: *mut ::windows::runtime::GUID,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        CLSIDFromProgID(lpszprogid.into_param().abi(), &mut result__)
            .from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CLSIDFromProgIDEx<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    lpszprogid: Param0,
) -> ::windows::runtime::Result<::windows::runtime::GUID> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CLSIDFromProgIDEx(
                lpszprogid: super::super::Foundation::PWSTR,
                lpclsid: *mut ::windows::runtime::GUID,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        CLSIDFromProgIDEx(lpszprogid.into_param().abi(), &mut result__)
            .from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CLSIDFromString<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    lpsz: Param0,
) -> ::windows::runtime::Result<::windows::runtime::GUID> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CLSIDFromString(
                lpsz: super::super::Foundation::PWSTR,
                pclsid: *mut ::windows::runtime::GUID,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        CLSIDFromString(lpsz.into_param().abi(), &mut result__)
            .from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const CLSID_CColorPropPage: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    199447041,
    36753,
    4558,
    [157, 227, 0, 170, 0, 75, 184, 81],
);
pub const CLSID_CFontPropPage: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    199447040,
    36753,
    4558,
    [157, 227, 0, 170, 0, 75, 184, 81],
);
pub const CLSID_CPicturePropPage: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    199447042,
    36753,
    4558,
    [157, 227, 0, 170, 0, 75, 184, 81],
);
pub const CLSID_ConvertVBX: ::windows::runtime::GUID =
    ::windows::runtime::GUID::from_values(4220454946, 356, 4123, [132, 237, 8, 0, 43, 46, 199, 19]);
pub const CLSID_PersistPropset: ::windows::runtime::GUID =
    ::windows::runtime::GUID::from_values(4220454945, 356, 4123, [132, 237, 8, 0, 43, 46, 199, 19]);
pub const CLSID_StdFont: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    199447043,
    36753,
    4558,
    [157, 227, 0, 170, 0, 75, 184, 81],
);
pub const CLSID_StdPicture: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    199447044,
    36753,
    4558,
    [157, 227, 0, 170, 0, 75, 184, 81],
);
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct COAUTHIDENTITY {
    pub User: *mut u16,
    pub UserLength: u32,
    pub Domain: *mut u16,
    pub DomainLength: u32,
    pub Password: *mut u16,
    pub PasswordLength: u32,
    pub Flags: u32,
}
impl COAUTHIDENTITY {}
impl ::std::default::Default for COAUTHIDENTITY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for COAUTHIDENTITY {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("COAUTHIDENTITY")
            .field("User", &self.User)
            .field("UserLength", &self.UserLength)
            .field("Domain", &self.Domain)
            .field("DomainLength", &self.DomainLength)
            .field("Password", &self.Password)
            .field("PasswordLength", &self.PasswordLength)
            .field("Flags", &self.Flags)
            .finish()
    }
}
impl ::std::cmp::PartialEq for COAUTHIDENTITY {
    fn eq(&self, other: &Self) -> bool {
        self.User == other.User
            && self.UserLength == other.UserLength
            && self.Domain == other.Domain
            && self.DomainLength == other.DomainLength
            && self.Password == other.Password
            && self.PasswordLength == other.PasswordLength
            && self.Flags == other.Flags
    }
}
impl ::std::cmp::Eq for COAUTHIDENTITY {}
unsafe impl ::windows::runtime::Abi for COAUTHIDENTITY {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct COAUTHINFO {
    pub dwAuthnSvc: u32,
    pub dwAuthzSvc: u32,
    pub pwszServerPrincName: super::super::Foundation::PWSTR,
    pub dwAuthnLevel: u32,
    pub dwImpersonationLevel: u32,
    pub pAuthIdentityData: *mut COAUTHIDENTITY,
    pub dwCapabilities: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl COAUTHINFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for COAUTHINFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for COAUTHINFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("COAUTHINFO")
            .field("dwAuthnSvc", &self.dwAuthnSvc)
            .field("dwAuthzSvc", &self.dwAuthzSvc)
            .field("pwszServerPrincName", &self.pwszServerPrincName)
            .field("dwAuthnLevel", &self.dwAuthnLevel)
            .field("dwImpersonationLevel", &self.dwImpersonationLevel)
            .field("pAuthIdentityData", &self.pAuthIdentityData)
            .field("dwCapabilities", &self.dwCapabilities)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for COAUTHINFO {
    fn eq(&self, other: &Self) -> bool {
        self.dwAuthnSvc == other.dwAuthnSvc
            && self.dwAuthzSvc == other.dwAuthzSvc
            && self.pwszServerPrincName == other.pwszServerPrincName
            && self.dwAuthnLevel == other.dwAuthnLevel
            && self.dwImpersonationLevel == other.dwImpersonationLevel
            && self.pAuthIdentityData == other.pAuthIdentityData
            && self.dwCapabilities == other.dwCapabilities
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for COAUTHINFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for COAUTHINFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CODEBASEHOLD {
    pub cbSize: u32,
    pub szDistUnit: super::super::Foundation::PWSTR,
    pub szCodeBase: super::super::Foundation::PWSTR,
    pub dwVersionMS: u32,
    pub dwVersionLS: u32,
    pub dwStyle: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl CODEBASEHOLD {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CODEBASEHOLD {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CODEBASEHOLD {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CODEBASEHOLD")
            .field("cbSize", &self.cbSize)
            .field("szDistUnit", &self.szDistUnit)
            .field("szCodeBase", &self.szCodeBase)
            .field("dwVersionMS", &self.dwVersionMS)
            .field("dwVersionLS", &self.dwVersionLS)
            .field("dwStyle", &self.dwStyle)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CODEBASEHOLD {
    fn eq(&self, other: &Self) -> bool {
        self.cbSize == other.cbSize
            && self.szDistUnit == other.szDistUnit
            && self.szCodeBase == other.szCodeBase
            && self.dwVersionMS == other.dwVersionMS
            && self.dwVersionLS == other.dwVersionLS
            && self.dwStyle == other.dwStyle
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CODEBASEHOLD {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CODEBASEHOLD {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct COINIT(pub u32);
pub const COINIT_APARTMENTTHREADED: COINIT = COINIT(2u32);
pub const COINIT_MULTITHREADED: COINIT = COINIT(0u32);
pub const COINIT_DISABLE_OLE1DDE: COINIT = COINIT(4u32);
pub const COINIT_SPEED_OVER_MEMORY: COINIT = COINIT(8u32);
impl ::std::convert::From<u32> for COINIT {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for COINIT {
    type Abi = Self;
    type DefaultType = Self;
}
impl ::std::ops::BitOr for COINIT {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for COINIT {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for COINIT {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for COINIT {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for COINIT {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct COINITBASE(pub i32);
pub const COINITBASE_MULTITHREADED: COINITBASE = COINITBASE(0i32);
impl ::std::convert::From<i32> for COINITBASE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for COINITBASE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct COMSD(pub i32);
pub const SD_LAUNCHPERMISSIONS: COMSD = COMSD(0i32);
pub const SD_ACCESSPERMISSIONS: COMSD = COMSD(1i32);
pub const SD_LAUNCHRESTRICTIONS: COMSD = COMSD(2i32);
pub const SD_ACCESSRESTRICTIONS: COMSD = COMSD(3i32);
impl ::std::convert::From<i32> for COMSD {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for COMSD {
    type Abi = Self;
    type DefaultType = Self;
}
pub const COM_RIGHTS_ACTIVATE_LOCAL: u32 = 8u32;
pub const COM_RIGHTS_ACTIVATE_REMOTE: u32 = 16u32;
pub const COM_RIGHTS_EXECUTE: u32 = 1u32;
pub const COM_RIGHTS_EXECUTE_LOCAL: u32 = 2u32;
pub const COM_RIGHTS_EXECUTE_REMOTE: u32 = 4u32;
pub const COM_RIGHTS_RESERVED1: u32 = 32u32;
pub const COM_RIGHTS_RESERVED2: u32 = 64u32;
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
pub struct CONFIRMSAFETY {
    pub clsid: ::windows::runtime::GUID,
    pub pUnk: ::std::option::Option<::windows::runtime::IUnknown>,
    pub dwFlags: u32,
}
impl CONFIRMSAFETY {}
impl ::std::default::Default for CONFIRMSAFETY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CONFIRMSAFETY {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CONFIRMSAFETY")
            .field("clsid", &self.clsid)
            .field("pUnk", &self.pUnk)
            .field("dwFlags", &self.dwFlags)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CONFIRMSAFETY {
    fn eq(&self, other: &Self) -> bool {
        self.clsid == other.clsid && self.pUnk == other.pUnk && self.dwFlags == other.dwFlags
    }
}
impl ::std::cmp::Eq for CONFIRMSAFETY {}
unsafe impl ::windows::runtime::Abi for CONFIRMSAFETY {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
pub const CONFIRMSAFETYACTION_LOADOBJECT: u32 = 1u32;
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
pub struct CONNECTDATA {
    pub pUnk: ::std::option::Option<::windows::runtime::IUnknown>,
    pub dwCookie: u32,
}
impl CONNECTDATA {}
impl ::std::default::Default for CONNECTDATA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CONNECTDATA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CONNECTDATA")
            .field("pUnk", &self.pUnk)
            .field("dwCookie", &self.dwCookie)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CONNECTDATA {
    fn eq(&self, other: &Self) -> bool {
        self.pUnk == other.pUnk && self.dwCookie == other.dwCookie
    }
}
impl ::std::cmp::Eq for CONNECTDATA {}
unsafe impl ::windows::runtime::Abi for CONNECTDATA {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
pub const CONNECT_E_ADVISELIMIT: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2147220991i32 as _);
pub const CONNECT_E_CANNOTCONNECT: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2147220990i32 as _);
pub const CONNECT_E_FIRST: i32 = -2147220992i32;
pub const CONNECT_E_LAST: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2147220977i32 as _);
pub const CONNECT_E_NOCONNECTION: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2147220992i32 as _);
pub const CONNECT_E_OVERRIDDEN: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2147220989i32 as _);
pub const CONNECT_S_FIRST: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(262656i32 as _);
pub const CONNECT_S_LAST: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(262671i32 as _);
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub struct CONTROLINFO {
    pub cb: u32,
    pub hAccel: super::super::UI::WindowsAndMessaging::HACCEL,
    pub cAccel: u16,
    pub dwFlags: u32,
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
impl CONTROLINFO {}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
impl ::std::default::Default for CONTROLINFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
impl ::std::fmt::Debug for CONTROLINFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CONTROLINFO")
            .field("cb", &self.cb)
            .field("hAccel", &self.hAccel)
            .field("cAccel", &self.cAccel)
            .field("dwFlags", &self.dwFlags)
            .finish()
    }
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
impl ::std::cmp::PartialEq for CONTROLINFO {
    fn eq(&self, other: &Self) -> bool {
        self.cb == other.cb
            && self.hAccel == other.hAccel
            && self.cAccel == other.cAccel
            && self.dwFlags == other.dwFlags
    }
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
impl ::std::cmp::Eq for CONTROLINFO {}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
unsafe impl ::windows::runtime::Abi for CONTROLINFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct COSERVERINFO {
    pub dwReserved1: u32,
    pub pwszName: super::super::Foundation::PWSTR,
    pub pAuthInfo: *mut COAUTHINFO,
    pub dwReserved2: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl COSERVERINFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for COSERVERINFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for COSERVERINFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("COSERVERINFO")
            .field("dwReserved1", &self.dwReserved1)
            .field("pwszName", &self.pwszName)
            .field("pAuthInfo", &self.pAuthInfo)
            .field("dwReserved2", &self.dwReserved2)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for COSERVERINFO {
    fn eq(&self, other: &Self) -> bool {
        self.dwReserved1 == other.dwReserved1
            && self.pwszName == other.pwszName
            && self.pAuthInfo == other.pAuthInfo
            && self.dwReserved2 == other.dwReserved2
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for COSERVERINFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for COSERVERINFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct COWAIT_FLAGS(pub i32);
pub const COWAIT_DEFAULT: COWAIT_FLAGS = COWAIT_FLAGS(0i32);
pub const COWAIT_WAITALL: COWAIT_FLAGS = COWAIT_FLAGS(1i32);
pub const COWAIT_ALERTABLE: COWAIT_FLAGS = COWAIT_FLAGS(2i32);
pub const COWAIT_INPUTAVAILABLE: COWAIT_FLAGS = COWAIT_FLAGS(4i32);
pub const COWAIT_DISPATCH_CALLS: COWAIT_FLAGS = COWAIT_FLAGS(8i32);
pub const COWAIT_DISPATCH_WINDOW_MESSAGES: COWAIT_FLAGS = COWAIT_FLAGS(16i32);
impl ::std::convert::From<i32> for COWAIT_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for COWAIT_FLAGS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: clone :: Clone,
    :: std :: marker :: Copy,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
)]
#[repr(transparent)]
pub struct CO_DEVICE_CATALOG_COOKIE(pub isize);
impl ::std::default::Default for CO_DEVICE_CATALOG_COOKIE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
unsafe impl ::windows::runtime::Handle for CO_DEVICE_CATALOG_COOKIE {}
unsafe impl ::windows::runtime::Abi for CO_DEVICE_CATALOG_COOKIE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CO_MARSHALING_CONTEXT_ATTRIBUTES(pub i32);
pub const CO_MARSHALING_SOURCE_IS_APP_CONTAINER: CO_MARSHALING_CONTEXT_ATTRIBUTES =
    CO_MARSHALING_CONTEXT_ATTRIBUTES(0i32);
pub const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1: CO_MARSHALING_CONTEXT_ATTRIBUTES =
    CO_MARSHALING_CONTEXT_ATTRIBUTES(-2147483648i32);
pub const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2: CO_MARSHALING_CONTEXT_ATTRIBUTES =
    CO_MARSHALING_CONTEXT_ATTRIBUTES(-2147483647i32);
pub const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3: CO_MARSHALING_CONTEXT_ATTRIBUTES =
    CO_MARSHALING_CONTEXT_ATTRIBUTES(-2147483646i32);
pub const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4: CO_MARSHALING_CONTEXT_ATTRIBUTES =
    CO_MARSHALING_CONTEXT_ATTRIBUTES(-2147483645i32);
pub const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5: CO_MARSHALING_CONTEXT_ATTRIBUTES =
    CO_MARSHALING_CONTEXT_ATTRIBUTES(-2147483644i32);
pub const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6: CO_MARSHALING_CONTEXT_ATTRIBUTES =
    CO_MARSHALING_CONTEXT_ATTRIBUTES(-2147483643i32);
pub const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7: CO_MARSHALING_CONTEXT_ATTRIBUTES =
    CO_MARSHALING_CONTEXT_ATTRIBUTES(-2147483642i32);
pub const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8: CO_MARSHALING_CONTEXT_ATTRIBUTES =
    CO_MARSHALING_CONTEXT_ATTRIBUTES(-2147483641i32);
pub const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9: CO_MARSHALING_CONTEXT_ATTRIBUTES =
    CO_MARSHALING_CONTEXT_ATTRIBUTES(-2147483640i32);
pub const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10: CO_MARSHALING_CONTEXT_ATTRIBUTES =
    CO_MARSHALING_CONTEXT_ATTRIBUTES(-2147483639i32);
pub const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11: CO_MARSHALING_CONTEXT_ATTRIBUTES =
    CO_MARSHALING_CONTEXT_ATTRIBUTES(-2147483638i32);
pub const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12: CO_MARSHALING_CONTEXT_ATTRIBUTES =
    CO_MARSHALING_CONTEXT_ATTRIBUTES(-2147483637i32);
pub const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13: CO_MARSHALING_CONTEXT_ATTRIBUTES =
    CO_MARSHALING_CONTEXT_ATTRIBUTES(-2147483636i32);
pub const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14: CO_MARSHALING_CONTEXT_ATTRIBUTES =
    CO_MARSHALING_CONTEXT_ATTRIBUTES(-2147483635i32);
pub const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15: CO_MARSHALING_CONTEXT_ATTRIBUTES =
    CO_MARSHALING_CONTEXT_ATTRIBUTES(-2147483634i32);
pub const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16: CO_MARSHALING_CONTEXT_ATTRIBUTES =
    CO_MARSHALING_CONTEXT_ATTRIBUTES(-2147483633i32);
pub const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17: CO_MARSHALING_CONTEXT_ATTRIBUTES =
    CO_MARSHALING_CONTEXT_ATTRIBUTES(-2147483632i32);
pub const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_18: CO_MARSHALING_CONTEXT_ATTRIBUTES =
    CO_MARSHALING_CONTEXT_ATTRIBUTES(-2147483631i32);
impl ::std::convert::From<i32> for CO_MARSHALING_CONTEXT_ATTRIBUTES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CO_MARSHALING_CONTEXT_ATTRIBUTES {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: clone :: Clone,
    :: std :: marker :: Copy,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
)]
#[repr(transparent)]
pub struct CO_MTA_USAGE_COOKIE(pub isize);
impl ::std::default::Default for CO_MTA_USAGE_COOKIE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
unsafe impl ::windows::runtime::Handle for CO_MTA_USAGE_COOKIE {}
unsafe impl ::windows::runtime::Abi for CO_MTA_USAGE_COOKIE {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CSF_EXPLORER: i32 = 8i32;
pub const CSF_ONLYGETSOURCE: i32 = 4i32;
pub const CSF_SHOWHELP: i32 = 1i32;
pub const CSF_VALIDSOURCE: i32 = 2i32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CSPLATFORM {
    pub dwPlatformId: u32,
    pub dwVersionHi: u32,
    pub dwVersionLo: u32,
    pub dwProcessorArch: u32,
}
impl CSPLATFORM {}
impl ::std::default::Default for CSPLATFORM {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CSPLATFORM {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CSPLATFORM")
            .field("dwPlatformId", &self.dwPlatformId)
            .field("dwVersionHi", &self.dwVersionHi)
            .field("dwVersionLo", &self.dwVersionLo)
            .field("dwProcessorArch", &self.dwProcessorArch)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CSPLATFORM {
    fn eq(&self, other: &Self) -> bool {
        self.dwPlatformId == other.dwPlatformId
            && self.dwVersionHi == other.dwVersionHi
            && self.dwVersionLo == other.dwVersionLo
            && self.dwProcessorArch == other.dwProcessorArch
    }
}
impl ::std::cmp::Eq for CSPLATFORM {}
unsafe impl ::windows::runtime::Abi for CSPLATFORM {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CTL_E_ILLEGALFUNCTIONCALL: i32 = -2146828283i32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CTRLINFO(pub i32);
pub const CTRLINFO_EATS_RETURN: CTRLINFO = CTRLINFO(1i32);
pub const CTRLINFO_EATS_ESCAPE: CTRLINFO = CTRLINFO(2i32);
impl ::std::convert::From<i32> for CTRLINFO {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CTRLINFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CWMO_FLAGS(pub i32);
pub const CWMO_DEFAULT: CWMO_FLAGS = CWMO_FLAGS(0i32);
pub const CWMO_DISPATCH_CALLS: CWMO_FLAGS = CWMO_FLAGS(1i32);
pub const CWMO_DISPATCH_WINDOW_MESSAGES: CWMO_FLAGS = CWMO_FLAGS(2i32);
impl ::std::convert::From<i32> for CWMO_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CWMO_FLAGS {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CWMO_MAX_HANDLES: u32 = 56u32;
pub const Catalog: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1857169537,
    35353,
    4560,
    [129, 182, 0, 160, 201, 35, 28, 41],
);
pub const CatalogCollection: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1857169539,
    35353,
    4560,
    [129, 182, 0, 160, 201, 35, 28, 41],
);
pub const CatalogObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1857169538,
    35353,
    4560,
    [129, 182, 0, 160, 201, 35, 28, 41],
);
pub unsafe fn CoAddRefServerProcess() -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoAddRefServerProcess() -> u32;
        }
        ::std::mem::transmute(CoAddRefServerProcess())
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoAllowSetForegroundWindow<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    punk: Param0,
    lpvreserved: *const ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoAllowSetForegroundWindow(
                punk: ::windows::runtime::RawPtr,
                lpvreserved: *const ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        CoAllowSetForegroundWindow(punk.into_param().abi(), ::std::mem::transmute(lpvreserved)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoAllowUnmarshalerCLSID(
    clsid: *const ::windows::runtime::GUID,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoAllowUnmarshalerCLSID(
                clsid: *const ::windows::runtime::GUID,
            ) -> ::windows::runtime::HRESULT;
        }
        CoAllowUnmarshalerCLSID(::std::mem::transmute(clsid)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoCancelCall(dwthreadid: u32, ultimeout: u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoCancelCall(dwthreadid: u32, ultimeout: u32) -> ::windows::runtime::HRESULT;
        }
        CoCancelCall(
            ::std::mem::transmute(dwthreadid),
            ::std::mem::transmute(ultimeout),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoCopyProxy<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    pproxy: Param0,
) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoCopyProxy(
                pproxy: ::windows::runtime::RawPtr,
                ppcopy: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        CoCopyProxy(pproxy.into_param().abi(), &mut result__)
            .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoCreateFreeThreadedMarshaler<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    punkouter: Param0,
) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoCreateFreeThreadedMarshaler(
                punkouter: ::windows::runtime::RawPtr,
                ppunkmarshal: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        CoCreateFreeThreadedMarshaler(punkouter.into_param().abi(), &mut result__)
            .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoCreateGuid() -> ::windows::runtime::Result<::windows::runtime::GUID> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoCreateGuid(pguid: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        CoCreateGuid(&mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoCreateInstance<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    T: ::windows::runtime::Interface,
>(
    rclsid: *const ::windows::runtime::GUID,
    punkouter: Param1,
    dwclscontext: CLSCTX,
) -> ::windows::runtime::Result<T> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoCreateInstance(
                rclsid: *const ::windows::runtime::GUID,
                punkouter: ::windows::runtime::RawPtr,
                dwclscontext: CLSCTX,
                riid: *const ::windows::runtime::GUID,
                ppv: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__ = ::std::option::Option::None;
        CoCreateInstance(
            ::std::mem::transmute(rclsid),
            punkouter.into_param().abi(),
            ::std::mem::transmute(dwclscontext),
            &<T as ::windows::runtime::Interface>::IID,
            &mut result__ as *mut _ as *mut _,
        )
        .and_some(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoCreateInstanceEx<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    clsid: *const ::windows::runtime::GUID,
    punkouter: Param1,
    dwclsctx: CLSCTX,
    pserverinfo: *const COSERVERINFO,
    dwcount: u32,
    presults: *mut MULTI_QI,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoCreateInstanceEx(
                clsid: *const ::windows::runtime::GUID,
                punkouter: ::windows::runtime::RawPtr,
                dwclsctx: CLSCTX,
                pserverinfo: *const COSERVERINFO,
                dwcount: u32,
                presults: *mut ::std::mem::ManuallyDrop<MULTI_QI>,
            ) -> ::windows::runtime::HRESULT;
        }
        CoCreateInstanceEx(
            ::std::mem::transmute(clsid),
            punkouter.into_param().abi(),
            ::std::mem::transmute(dwclsctx),
            ::std::mem::transmute(pserverinfo),
            ::std::mem::transmute(dwcount),
            ::std::mem::transmute(presults),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoCreateInstanceFromApp<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    clsid: *const ::windows::runtime::GUID,
    punkouter: Param1,
    dwclsctx: CLSCTX,
    reserved: *const ::std::ffi::c_void,
    dwcount: u32,
    presults: *mut MULTI_QI,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoCreateInstanceFromApp(
                clsid: *const ::windows::runtime::GUID,
                punkouter: ::windows::runtime::RawPtr,
                dwclsctx: CLSCTX,
                reserved: *const ::std::ffi::c_void,
                dwcount: u32,
                presults: *mut ::std::mem::ManuallyDrop<MULTI_QI>,
            ) -> ::windows::runtime::HRESULT;
        }
        CoCreateInstanceFromApp(
            ::std::mem::transmute(clsid),
            punkouter.into_param().abi(),
            ::std::mem::transmute(dwclsctx),
            ::std::mem::transmute(reserved),
            ::std::mem::transmute(dwcount),
            ::std::mem::transmute(presults),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoDecrementMTAUsage<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, CO_MTA_USAGE_COOKIE>,
>(
    cookie: Param0,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoDecrementMTAUsage(cookie: CO_MTA_USAGE_COOKIE) -> ::windows::runtime::HRESULT;
        }
        CoDecrementMTAUsage(cookie.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoDisableCallCancellation(
    preserved: *const ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoDisableCallCancellation(
                preserved: *const ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        CoDisableCallCancellation(::std::mem::transmute(preserved)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoDisconnectContext(dwtimeout: u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoDisconnectContext(dwtimeout: u32) -> ::windows::runtime::HRESULT;
        }
        CoDisconnectContext(::std::mem::transmute(dwtimeout)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoDisconnectObject<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    punk: Param0,
    dwreserved: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoDisconnectObject(
                punk: ::windows::runtime::RawPtr,
                dwreserved: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        CoDisconnectObject(punk.into_param().abi(), ::std::mem::transmute(dwreserved)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoDosDateTimeToFileTime(
    ndosdate: u16,
    ndostime: u16,
    lpfiletime: *mut super::super::Foundation::FILETIME,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoDosDateTimeToFileTime(
                ndosdate: u16,
                ndostime: u16,
                lpfiletime: *mut super::super::Foundation::FILETIME,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(CoDosDateTimeToFileTime(
            ::std::mem::transmute(ndosdate),
            ::std::mem::transmute(ndostime),
            ::std::mem::transmute(lpfiletime),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoEnableCallCancellation(
    preserved: *const ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoEnableCallCancellation(
                preserved: *const ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        CoEnableCallCancellation(::std::mem::transmute(preserved)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoFileTimeNow() -> ::windows::runtime::Result<super::super::Foundation::FILETIME> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoFileTimeNow(
                lpfiletime: *mut super::super::Foundation::FILETIME,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <super::super::Foundation::FILETIME as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        CoFileTimeNow(&mut result__).from_abi::<super::super::Foundation::FILETIME>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoFileTimeToDosDateTime(
    lpfiletime: *const super::super::Foundation::FILETIME,
    lpdosdate: *mut u16,
    lpdostime: *mut u16,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoFileTimeToDosDateTime(
                lpfiletime: *const super::super::Foundation::FILETIME,
                lpdosdate: *mut u16,
                lpdostime: *mut u16,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(CoFileTimeToDosDateTime(
            ::std::mem::transmute(lpfiletime),
            ::std::mem::transmute(lpdosdate),
            ::std::mem::transmute(lpdostime),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoFreeAllLibraries() {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoFreeAllLibraries();
        }
        ::std::mem::transmute(CoFreeAllLibraries())
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoFreeLibrary<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HINSTANCE>,
>(
    hinst: Param0,
) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoFreeLibrary(hinst: super::super::Foundation::HINSTANCE);
        }
        ::std::mem::transmute(CoFreeLibrary(hinst.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoFreeUnusedLibraries() {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoFreeUnusedLibraries();
        }
        ::std::mem::transmute(CoFreeUnusedLibraries())
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoFreeUnusedLibrariesEx(dwunloaddelay: u32, dwreserved: u32) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoFreeUnusedLibrariesEx(dwunloaddelay: u32, dwreserved: u32);
        }
        ::std::mem::transmute(CoFreeUnusedLibrariesEx(
            ::std::mem::transmute(dwunloaddelay),
            ::std::mem::transmute(dwreserved),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoGetApartmentType(
    papttype: *mut APTTYPE,
    paptqualifier: *mut APTTYPEQUALIFIER,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoGetApartmentType(
                papttype: *mut APTTYPE,
                paptqualifier: *mut APTTYPEQUALIFIER,
            ) -> ::windows::runtime::HRESULT;
        }
        CoGetApartmentType(
            ::std::mem::transmute(papttype),
            ::std::mem::transmute(paptqualifier),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoGetCallContext(
    riid: *const ::windows::runtime::GUID,
    ppinterface: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoGetCallContext(
                riid: *const ::windows::runtime::GUID,
                ppinterface: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        CoGetCallContext(
            ::std::mem::transmute(riid),
            ::std::mem::transmute(ppinterface),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoGetCallerTID() -> ::windows::runtime::Result<u32> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoGetCallerTID(lpdwtid: *mut u32) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CoGetCallerTID(&mut result__).from_abi::<u32>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoGetCancelObject(
    dwthreadid: u32,
    iid: *const ::windows::runtime::GUID,
    ppunk: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoGetCancelObject(
                dwthreadid: u32,
                iid: *const ::windows::runtime::GUID,
                ppunk: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        CoGetCancelObject(
            ::std::mem::transmute(dwthreadid),
            ::std::mem::transmute(iid),
            ::std::mem::transmute(ppunk),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoGetClassObject(
    rclsid: *const ::windows::runtime::GUID,
    dwclscontext: CLSCTX,
    pvreserved: *const ::std::ffi::c_void,
    riid: *const ::windows::runtime::GUID,
    ppv: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoGetClassObject(
                rclsid: *const ::windows::runtime::GUID,
                dwclscontext: CLSCTX,
                pvreserved: *const ::std::ffi::c_void,
                riid: *const ::windows::runtime::GUID,
                ppv: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        CoGetClassObject(
            ::std::mem::transmute(rclsid),
            ::std::mem::transmute(dwclscontext),
            ::std::mem::transmute(pvreserved),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(ppv),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoGetClassObjectFromURL<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param4: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param5: ::windows::runtime::IntoParam<'a, IBindCtx>,
>(
    rclassid: *const ::windows::runtime::GUID,
    szcode: Param1,
    dwfileversionms: u32,
    dwfileversionls: u32,
    sztype: Param4,
    pbindctx: Param5,
    dwclscontext: CLSCTX,
    pvreserved: *mut ::std::ffi::c_void,
    riid: *const ::windows::runtime::GUID,
    ppv: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CoGetClassObjectFromURL(
                rclassid: *const ::windows::runtime::GUID,
                szcode: super::super::Foundation::PWSTR,
                dwfileversionms: u32,
                dwfileversionls: u32,
                sztype: super::super::Foundation::PWSTR,
                pbindctx: ::windows::runtime::RawPtr,
                dwclscontext: CLSCTX,
                pvreserved: *mut ::std::ffi::c_void,
                riid: *const ::windows::runtime::GUID,
                ppv: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        CoGetClassObjectFromURL(
            ::std::mem::transmute(rclassid),
            szcode.into_param().abi(),
            ::std::mem::transmute(dwfileversionms),
            ::std::mem::transmute(dwfileversionls),
            sztype.into_param().abi(),
            pbindctx.into_param().abi(),
            ::std::mem::transmute(dwclscontext),
            ::std::mem::transmute(pvreserved),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(ppv),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoGetContextToken() -> ::windows::runtime::Result<usize> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoGetContextToken(ptoken: *mut usize) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <usize as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CoGetContextToken(&mut result__).from_abi::<usize>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoGetCurrentLogicalThreadId() -> ::windows::runtime::Result<::windows::runtime::GUID>
{
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoGetCurrentLogicalThreadId(
                pguid: *mut ::windows::runtime::GUID,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        CoGetCurrentLogicalThreadId(&mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoGetCurrentProcess() -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoGetCurrentProcess() -> u32;
        }
        ::std::mem::transmute(CoGetCurrentProcess())
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoGetInstanceFromFile<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param5: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pserverinfo: *const COSERVERINFO,
    pclsid: *const ::windows::runtime::GUID,
    punkouter: Param2,
    dwclsctx: CLSCTX,
    grfmode: u32,
    pwszname: Param5,
    dwcount: u32,
    presults: *mut MULTI_QI,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoGetInstanceFromFile(
                pserverinfo: *const COSERVERINFO,
                pclsid: *const ::windows::runtime::GUID,
                punkouter: ::windows::runtime::RawPtr,
                dwclsctx: CLSCTX,
                grfmode: u32,
                pwszname: super::super::Foundation::PWSTR,
                dwcount: u32,
                presults: *mut ::std::mem::ManuallyDrop<MULTI_QI>,
            ) -> ::windows::runtime::HRESULT;
        }
        CoGetInstanceFromFile(
            ::std::mem::transmute(pserverinfo),
            ::std::mem::transmute(pclsid),
            punkouter.into_param().abi(),
            ::std::mem::transmute(dwclsctx),
            ::std::mem::transmute(grfmode),
            pwszname.into_param().abi(),
            ::std::mem::transmute(dwcount),
            ::std::mem::transmute(presults),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage"
))]
pub unsafe fn CoGetInstanceFromIStorage<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param4: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStorage>,
>(
    pserverinfo: *const COSERVERINFO,
    pclsid: *const ::windows::runtime::GUID,
    punkouter: Param2,
    dwclsctx: CLSCTX,
    pstg: Param4,
    dwcount: u32,
    presults: *mut MULTI_QI,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoGetInstanceFromIStorage(
                pserverinfo: *const COSERVERINFO,
                pclsid: *const ::windows::runtime::GUID,
                punkouter: ::windows::runtime::RawPtr,
                dwclsctx: CLSCTX,
                pstg: ::windows::runtime::RawPtr,
                dwcount: u32,
                presults: *mut ::std::mem::ManuallyDrop<MULTI_QI>,
            ) -> ::windows::runtime::HRESULT;
        }
        CoGetInstanceFromIStorage(
            ::std::mem::transmute(pserverinfo),
            ::std::mem::transmute(pclsid),
            punkouter.into_param().abi(),
            ::std::mem::transmute(dwclsctx),
            pstg.into_param().abi(),
            ::std::mem::transmute(dwcount),
            ::std::mem::transmute(presults),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoGetInterceptor<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    iidintercepted: *const ::windows::runtime::GUID,
    punkouter: Param1,
    iid: *const ::windows::runtime::GUID,
    ppv: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoGetInterceptor(
                iidintercepted: *const ::windows::runtime::GUID,
                punkouter: ::windows::runtime::RawPtr,
                iid: *const ::windows::runtime::GUID,
                ppv: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        CoGetInterceptor(
            ::std::mem::transmute(iidintercepted),
            punkouter.into_param().abi(),
            ::std::mem::transmute(iid),
            ::std::mem::transmute(ppv),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_System_OleAutomation")]
pub unsafe fn CoGetInterceptorFromTypeInfo<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param2: ::windows::runtime::IntoParam<'a, super::OleAutomation::ITypeInfo>,
>(
    iidintercepted: *const ::windows::runtime::GUID,
    punkouter: Param1,
    typeinfo: Param2,
    iid: *const ::windows::runtime::GUID,
    ppv: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoGetInterceptorFromTypeInfo(
                iidintercepted: *const ::windows::runtime::GUID,
                punkouter: ::windows::runtime::RawPtr,
                typeinfo: ::windows::runtime::RawPtr,
                iid: *const ::windows::runtime::GUID,
                ppv: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        CoGetInterceptorFromTypeInfo(
            ::std::mem::transmute(iidintercepted),
            punkouter.into_param().abi(),
            typeinfo.into_param().abi(),
            ::std::mem::transmute(iid),
            ::std::mem::transmute(ppv),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
pub unsafe fn CoGetInterfaceAndReleaseStream<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
    T: ::windows::runtime::Interface,
>(
    pstm: Param0,
) -> ::windows::runtime::Result<T> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoGetInterfaceAndReleaseStream(
                pstm: ::windows::runtime::RawPtr,
                iid: *const ::windows::runtime::GUID,
                ppv: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__ = ::std::option::Option::None;
        CoGetInterfaceAndReleaseStream(
            pstm.into_param().abi(),
            &<T as ::windows::runtime::Interface>::IID,
            &mut result__ as *mut _ as *mut _,
        )
        .and_some(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoGetMalloc(dwmemcontext: u32) -> ::windows::runtime::Result<IMalloc> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoGetMalloc(
                dwmemcontext: u32,
                ppmalloc: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMalloc as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CoGetMalloc(::std::mem::transmute(dwmemcontext), &mut result__)
            .from_abi::<IMalloc>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoGetMarshalSizeMax<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    pulsize: *mut u32,
    riid: *const ::windows::runtime::GUID,
    punk: Param2,
    dwdestcontext: u32,
    pvdestcontext: *const ::std::ffi::c_void,
    mshlflags: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoGetMarshalSizeMax(
                pulsize: *mut u32,
                riid: *const ::windows::runtime::GUID,
                punk: ::windows::runtime::RawPtr,
                dwdestcontext: u32,
                pvdestcontext: *const ::std::ffi::c_void,
                mshlflags: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        CoGetMarshalSizeMax(
            ::std::mem::transmute(pulsize),
            ::std::mem::transmute(riid),
            punk.into_param().abi(),
            ::std::mem::transmute(dwdestcontext),
            ::std::mem::transmute(pvdestcontext),
            ::std::mem::transmute(mshlflags),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoGetObject<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pszname: Param0,
    pbindoptions: *const BIND_OPTS,
    riid: *const ::windows::runtime::GUID,
    ppv: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoGetObject(
                pszname: super::super::Foundation::PWSTR,
                pbindoptions: *const BIND_OPTS,
                riid: *const ::windows::runtime::GUID,
                ppv: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        CoGetObject(
            pszname.into_param().abi(),
            ::std::mem::transmute(pbindoptions),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(ppv),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoGetObjectContext(
    riid: *const ::windows::runtime::GUID,
    ppv: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoGetObjectContext(
                riid: *const ::windows::runtime::GUID,
                ppv: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        CoGetObjectContext(::std::mem::transmute(riid), ::std::mem::transmute(ppv)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoGetPSClsid(
    riid: *const ::windows::runtime::GUID,
) -> ::windows::runtime::Result<::windows::runtime::GUID> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoGetPSClsid(
                riid: *const ::windows::runtime::GUID,
                pclsid: *mut ::windows::runtime::GUID,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        CoGetPSClsid(::std::mem::transmute(riid), &mut result__)
            .from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoGetStandardMarshal<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    riid: *const ::windows::runtime::GUID,
    punk: Param1,
    dwdestcontext: u32,
    pvdestcontext: *const ::std::ffi::c_void,
    mshlflags: u32,
) -> ::windows::runtime::Result<IMarshal> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoGetStandardMarshal(
                riid: *const ::windows::runtime::GUID,
                punk: ::windows::runtime::RawPtr,
                dwdestcontext: u32,
                pvdestcontext: *const ::std::ffi::c_void,
                mshlflags: u32,
                ppmarshal: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMarshal as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CoGetStandardMarshal(
            ::std::mem::transmute(riid),
            punk.into_param().abi(),
            ::std::mem::transmute(dwdestcontext),
            ::std::mem::transmute(pvdestcontext),
            ::std::mem::transmute(mshlflags),
            &mut result__,
        )
        .from_abi::<IMarshal>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoGetStdMarshalEx<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    punkouter: Param0,
    smexflags: u32,
) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoGetStdMarshalEx(
                punkouter: ::windows::runtime::RawPtr,
                smexflags: u32,
                ppunkinner: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        CoGetStdMarshalEx(
            punkouter.into_param().abi(),
            ::std::mem::transmute(smexflags),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Security"))]
pub unsafe fn CoGetSystemSecurityPermissions(
    comsdtype: COMSD,
    ppsd: *mut *mut super::super::Security::SECURITY_DESCRIPTOR,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoGetSystemSecurityPermissions(
                comsdtype: COMSD,
                ppsd: *mut *mut super::super::Security::SECURITY_DESCRIPTOR,
            ) -> ::windows::runtime::HRESULT;
        }
        CoGetSystemSecurityPermissions(
            ::std::mem::transmute(comsdtype),
            ::std::mem::transmute(ppsd),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoGetTreatAsClass(
    clsidold: *const ::windows::runtime::GUID,
) -> ::windows::runtime::Result<::windows::runtime::GUID> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoGetTreatAsClass(
                clsidold: *const ::windows::runtime::GUID,
                pclsidnew: *mut ::windows::runtime::GUID,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        CoGetTreatAsClass(::std::mem::transmute(clsidold), &mut result__)
            .from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoHandlePriorityEventsFromMessagePump() {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoHandlePriorityEventsFromMessagePump();
        }
        ::std::mem::transmute(CoHandlePriorityEventsFromMessagePump())
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoImpersonateClient() -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoImpersonateClient() -> ::windows::runtime::HRESULT;
        }
        CoImpersonateClient().ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoIncrementMTAUsage() -> ::windows::runtime::Result<CO_MTA_USAGE_COOKIE> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoIncrementMTAUsage(
                pcookie: *mut CO_MTA_USAGE_COOKIE,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <CO_MTA_USAGE_COOKIE as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        CoIncrementMTAUsage(&mut result__).from_abi::<CO_MTA_USAGE_COOKIE>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoInitialize(
    pvreserved: *const ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoInitialize(pvreserved: *const ::std::ffi::c_void) -> ::windows::runtime::HRESULT;
        }
        CoInitialize(::std::mem::transmute(pvreserved)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoInitializeEx(
    pvreserved: *const ::std::ffi::c_void,
    dwcoinit: COINIT,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoInitializeEx(
                pvreserved: *const ::std::ffi::c_void,
                dwcoinit: COINIT,
            ) -> ::windows::runtime::HRESULT;
        }
        CoInitializeEx(
            ::std::mem::transmute(pvreserved),
            ::std::mem::transmute(dwcoinit),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Security"))]
pub unsafe fn CoInitializeSecurity(
    psecdesc: *const super::super::Security::SECURITY_DESCRIPTOR,
    cauthsvc: i32,
    asauthsvc: *const SOLE_AUTHENTICATION_SERVICE,
    preserved1: *const ::std::ffi::c_void,
    dwauthnlevel: RPC_C_AUTHN_LEVEL,
    dwimplevel: RPC_C_IMP_LEVEL,
    pauthlist: *const ::std::ffi::c_void,
    dwcapabilities: EOLE_AUTHENTICATION_CAPABILITIES,
    preserved3: *const ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoInitializeSecurity(
                psecdesc: *const super::super::Security::SECURITY_DESCRIPTOR,
                cauthsvc: i32,
                asauthsvc: *const SOLE_AUTHENTICATION_SERVICE,
                preserved1: *const ::std::ffi::c_void,
                dwauthnlevel: RPC_C_AUTHN_LEVEL,
                dwimplevel: RPC_C_IMP_LEVEL,
                pauthlist: *const ::std::ffi::c_void,
                dwcapabilities: EOLE_AUTHENTICATION_CAPABILITIES,
                preserved3: *const ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        CoInitializeSecurity(
            ::std::mem::transmute(psecdesc),
            ::std::mem::transmute(cauthsvc),
            ::std::mem::transmute(asauthsvc),
            ::std::mem::transmute(preserved1),
            ::std::mem::transmute(dwauthnlevel),
            ::std::mem::transmute(dwimplevel),
            ::std::mem::transmute(pauthlist),
            ::std::mem::transmute(dwcapabilities),
            ::std::mem::transmute(preserved3),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
pub unsafe fn CoInstall<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IBindCtx>,
    Param4: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pbc: Param0,
    dwflags: u32,
    pclassspec: *const super::SystemServices::uCLSSPEC,
    pquery: *const QUERYCONTEXT,
    pszcodebase: Param4,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoInstall(
                pbc: ::windows::runtime::RawPtr,
                dwflags: u32,
                pclassspec: *const super::SystemServices::uCLSSPEC,
                pquery: *const QUERYCONTEXT,
                pszcodebase: super::super::Foundation::PWSTR,
            ) -> ::windows::runtime::HRESULT;
        }
        CoInstall(
            pbc.into_param().abi(),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(pclassspec),
            ::std::mem::transmute(pquery),
            pszcodebase.into_param().abi(),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoInternetCombineIUri<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IUri>,
    Param1: ::windows::runtime::IntoParam<'a, IUri>,
>(
    pbaseuri: Param0,
    prelativeuri: Param1,
    dwcombineflags: u32,
    ppcombineduri: *mut ::std::option::Option<IUri>,
    dwreserved: usize,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CoInternetCombineIUri(
                pbaseuri: ::windows::runtime::RawPtr,
                prelativeuri: ::windows::runtime::RawPtr,
                dwcombineflags: u32,
                ppcombineduri: *mut ::windows::runtime::RawPtr,
                dwreserved: usize,
            ) -> ::windows::runtime::HRESULT;
        }
        CoInternetCombineIUri(
            pbaseuri.into_param().abi(),
            prelativeuri.into_param().abi(),
            ::std::mem::transmute(dwcombineflags),
            ::std::mem::transmute(ppcombineduri),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoInternetCombineUrl<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pwzbaseurl: Param0,
    pwzrelativeurl: Param1,
    dwcombineflags: u32,
    pszresult: super::super::Foundation::PWSTR,
    cchresult: u32,
    pcchresult: *mut u32,
    dwreserved: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CoInternetCombineUrl(
                pwzbaseurl: super::super::Foundation::PWSTR,
                pwzrelativeurl: super::super::Foundation::PWSTR,
                dwcombineflags: u32,
                pszresult: super::super::Foundation::PWSTR,
                cchresult: u32,
                pcchresult: *mut u32,
                dwreserved: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        CoInternetCombineUrl(
            pwzbaseurl.into_param().abi(),
            pwzrelativeurl.into_param().abi(),
            ::std::mem::transmute(dwcombineflags),
            ::std::mem::transmute(pszresult),
            ::std::mem::transmute(cchresult),
            ::std::mem::transmute(pcchresult),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoInternetCombineUrlEx<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IUri>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pbaseuri: Param0,
    pwzrelativeurl: Param1,
    dwcombineflags: u32,
    ppcombineduri: *mut ::std::option::Option<IUri>,
    dwreserved: usize,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CoInternetCombineUrlEx(
                pbaseuri: ::windows::runtime::RawPtr,
                pwzrelativeurl: super::super::Foundation::PWSTR,
                dwcombineflags: u32,
                ppcombineduri: *mut ::windows::runtime::RawPtr,
                dwreserved: usize,
            ) -> ::windows::runtime::HRESULT;
        }
        CoInternetCombineUrlEx(
            pbaseuri.into_param().abi(),
            pwzrelativeurl.into_param().abi(),
            ::std::mem::transmute(dwcombineflags),
            ::std::mem::transmute(ppcombineduri),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoInternetCompareUrl<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pwzurl1: Param0,
    pwzurl2: Param1,
    dwflags: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CoInternetCompareUrl(
                pwzurl1: super::super::Foundation::PWSTR,
                pwzurl2: super::super::Foundation::PWSTR,
                dwflags: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        CoInternetCompareUrl(
            pwzurl1.into_param().abi(),
            pwzurl2.into_param().abi(),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_System_SystemServices")]
pub unsafe fn CoInternetCreateSecurityManager<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::SystemServices::IServiceProvider>,
>(
    psp: Param0,
    ppsm: *mut ::std::option::Option<IInternetSecurityManager>,
    dwreserved: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CoInternetCreateSecurityManager(
                psp: ::windows::runtime::RawPtr,
                ppsm: *mut ::windows::runtime::RawPtr,
                dwreserved: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        CoInternetCreateSecurityManager(
            psp.into_param().abi(),
            ::std::mem::transmute(ppsm),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_System_SystemServices")]
pub unsafe fn CoInternetCreateZoneManager<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::SystemServices::IServiceProvider>,
>(
    psp: Param0,
    ppzm: *mut ::std::option::Option<IInternetZoneManager>,
    dwreserved: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CoInternetCreateZoneManager(
                psp: ::windows::runtime::RawPtr,
                ppzm: *mut ::windows::runtime::RawPtr,
                dwreserved: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        CoInternetCreateZoneManager(
            psp.into_param().abi(),
            ::std::mem::transmute(ppzm),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoInternetGetProtocolFlags<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pwzurl: Param0,
    pdwflags: *mut u32,
    dwreserved: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CoInternetGetProtocolFlags(
                pwzurl: super::super::Foundation::PWSTR,
                pdwflags: *mut u32,
                dwreserved: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        CoInternetGetProtocolFlags(
            pwzurl.into_param().abi(),
            ::std::mem::transmute(pdwflags),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoInternetGetSecurityUrl<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pwszurl: Param0,
    ppwszsecurl: *mut super::super::Foundation::PWSTR,
    psuaction: PSUACTION,
    dwreserved: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CoInternetGetSecurityUrl(
                pwszurl: super::super::Foundation::PWSTR,
                ppwszsecurl: *mut super::super::Foundation::PWSTR,
                psuaction: PSUACTION,
                dwreserved: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        CoInternetGetSecurityUrl(
            pwszurl.into_param().abi(),
            ::std::mem::transmute(ppwszsecurl),
            ::std::mem::transmute(psuaction),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoInternetGetSecurityUrlEx<'a, Param0: ::windows::runtime::IntoParam<'a, IUri>>(
    puri: Param0,
    ppsecuri: *mut ::std::option::Option<IUri>,
    psuaction: PSUACTION,
    dwreserved: usize,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CoInternetGetSecurityUrlEx(
                puri: ::windows::runtime::RawPtr,
                ppsecuri: *mut ::windows::runtime::RawPtr,
                psuaction: PSUACTION,
                dwreserved: usize,
            ) -> ::windows::runtime::HRESULT;
        }
        CoInternetGetSecurityUrlEx(
            puri.into_param().abi(),
            ::std::mem::transmute(ppsecuri),
            ::std::mem::transmute(psuaction),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoInternetGetSession(
    dwsessionmode: u32,
    ppiinternetsession: *mut ::std::option::Option<IInternetSession>,
    dwreserved: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CoInternetGetSession(
                dwsessionmode: u32,
                ppiinternetsession: *mut ::windows::runtime::RawPtr,
                dwreserved: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        CoInternetGetSession(
            ::std::mem::transmute(dwsessionmode),
            ::std::mem::transmute(ppiinternetsession),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoInternetIsFeatureEnabled(
    featureentry: INTERNETFEATURELIST,
    dwflags: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CoInternetIsFeatureEnabled(
                featureentry: INTERNETFEATURELIST,
                dwflags: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        CoInternetIsFeatureEnabled(
            ::std::mem::transmute(featureentry),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoInternetIsFeatureEnabledForIUri<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, IUri>,
    Param3: ::windows::runtime::IntoParam<'a, IInternetSecurityManagerEx2>,
>(
    featureentry: INTERNETFEATURELIST,
    dwflags: u32,
    piuri: Param2,
    psecmgr: Param3,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CoInternetIsFeatureEnabledForIUri(
                featureentry: INTERNETFEATURELIST,
                dwflags: u32,
                piuri: ::windows::runtime::RawPtr,
                psecmgr: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        CoInternetIsFeatureEnabledForIUri(
            ::std::mem::transmute(featureentry),
            ::std::mem::transmute(dwflags),
            piuri.into_param().abi(),
            psecmgr.into_param().abi(),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoInternetIsFeatureEnabledForUrl<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param3: ::windows::runtime::IntoParam<'a, IInternetSecurityManager>,
>(
    featureentry: INTERNETFEATURELIST,
    dwflags: u32,
    szurl: Param2,
    psecmgr: Param3,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CoInternetIsFeatureEnabledForUrl(
                featureentry: INTERNETFEATURELIST,
                dwflags: u32,
                szurl: super::super::Foundation::PWSTR,
                psecmgr: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        CoInternetIsFeatureEnabledForUrl(
            ::std::mem::transmute(featureentry),
            ::std::mem::transmute(dwflags),
            szurl.into_param().abi(),
            psecmgr.into_param().abi(),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoInternetIsFeatureZoneElevationEnabled<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param2: ::windows::runtime::IntoParam<'a, IInternetSecurityManager>,
>(
    szfromurl: Param0,
    sztourl: Param1,
    psecmgr: Param2,
    dwflags: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CoInternetIsFeatureZoneElevationEnabled(
                szfromurl: super::super::Foundation::PWSTR,
                sztourl: super::super::Foundation::PWSTR,
                psecmgr: ::windows::runtime::RawPtr,
                dwflags: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        CoInternetIsFeatureZoneElevationEnabled(
            szfromurl.into_param().abi(),
            sztourl.into_param().abi(),
            psecmgr.into_param().abi(),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoInternetParseIUri<'a, Param0: ::windows::runtime::IntoParam<'a, IUri>>(
    piuri: Param0,
    parseaction: PARSEACTION,
    dwflags: u32,
    pwzresult: super::super::Foundation::PWSTR,
    cchresult: u32,
    pcchresult: *mut u32,
    dwreserved: usize,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CoInternetParseIUri(
                piuri: ::windows::runtime::RawPtr,
                parseaction: PARSEACTION,
                dwflags: u32,
                pwzresult: super::super::Foundation::PWSTR,
                cchresult: u32,
                pcchresult: *mut u32,
                dwreserved: usize,
            ) -> ::windows::runtime::HRESULT;
        }
        CoInternetParseIUri(
            piuri.into_param().abi(),
            ::std::mem::transmute(parseaction),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(pwzresult),
            ::std::mem::transmute(cchresult),
            ::std::mem::transmute(pcchresult),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoInternetParseUrl<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pwzurl: Param0,
    parseaction: PARSEACTION,
    dwflags: u32,
    pszresult: super::super::Foundation::PWSTR,
    cchresult: u32,
    pcchresult: *mut u32,
    dwreserved: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CoInternetParseUrl(
                pwzurl: super::super::Foundation::PWSTR,
                parseaction: PARSEACTION,
                dwflags: u32,
                pszresult: super::super::Foundation::PWSTR,
                cchresult: u32,
                pcchresult: *mut u32,
                dwreserved: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        CoInternetParseUrl(
            pwzurl.into_param().abi(),
            ::std::mem::transmute(parseaction),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(pszresult),
            ::std::mem::transmute(cchresult),
            ::std::mem::transmute(pcchresult),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoInternetQueryInfo<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pwzurl: Param0,
    queryoptions: QUERYOPTION,
    dwqueryflags: u32,
    pvbuffer: *mut ::std::ffi::c_void,
    cbbuffer: u32,
    pcbbuffer: *mut u32,
    dwreserved: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CoInternetQueryInfo(
                pwzurl: super::super::Foundation::PWSTR,
                queryoptions: QUERYOPTION,
                dwqueryflags: u32,
                pvbuffer: *mut ::std::ffi::c_void,
                cbbuffer: u32,
                pcbbuffer: *mut u32,
                dwreserved: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        CoInternetQueryInfo(
            pwzurl.into_param().abi(),
            ::std::mem::transmute(queryoptions),
            ::std::mem::transmute(dwqueryflags),
            ::std::mem::transmute(pvbuffer),
            ::std::mem::transmute(cbbuffer),
            ::std::mem::transmute(pcbbuffer),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoInternetSetFeatureEnabled<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    featureentry: INTERNETFEATURELIST,
    dwflags: u32,
    fenable: Param2,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CoInternetSetFeatureEnabled(
                featureentry: INTERNETFEATURELIST,
                dwflags: u32,
                fenable: super::super::Foundation::BOOL,
            ) -> ::windows::runtime::HRESULT;
        }
        CoInternetSetFeatureEnabled(
            ::std::mem::transmute(featureentry),
            ::std::mem::transmute(dwflags),
            fenable.into_param().abi(),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoInvalidateRemoteMachineBindings<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pszmachinename: Param0,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoInvalidateRemoteMachineBindings(
                pszmachinename: super::super::Foundation::PWSTR,
            ) -> ::windows::runtime::HRESULT;
        }
        CoInvalidateRemoteMachineBindings(pszmachinename.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoIsHandlerConnected<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    punk: Param0,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoIsHandlerConnected(
                punk: ::windows::runtime::RawPtr,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(CoIsHandlerConnected(punk.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoIsOle1Class(
    rclsid: *const ::windows::runtime::GUID,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoIsOle1Class(
                rclsid: *const ::windows::runtime::GUID,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(CoIsOle1Class(::std::mem::transmute(rclsid)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoLoadLibrary<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    lpszlibname: Param0,
    bautofree: Param1,
) -> super::super::Foundation::HINSTANCE {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoLoadLibrary(
                lpszlibname: super::super::Foundation::PWSTR,
                bautofree: super::super::Foundation::BOOL,
            ) -> super::super::Foundation::HINSTANCE;
        }
        ::std::mem::transmute(CoLoadLibrary(
            lpszlibname.into_param().abi(),
            bautofree.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoLockObjectExternal<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    punk: Param0,
    flock: Param1,
    flastunlockreleases: Param2,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoLockObjectExternal(
                punk: ::windows::runtime::RawPtr,
                flock: super::super::Foundation::BOOL,
                flastunlockreleases: super::super::Foundation::BOOL,
            ) -> ::windows::runtime::HRESULT;
        }
        CoLockObjectExternal(
            punk.into_param().abi(),
            flock.into_param().abi(),
            flastunlockreleases.into_param().abi(),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
pub unsafe fn CoMarshalHresult<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
>(
    pstm: Param0,
    hresult: ::windows::runtime::HRESULT,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoMarshalHresult(
                pstm: ::windows::runtime::RawPtr,
                hresult: ::windows::runtime::HRESULT,
            ) -> ::windows::runtime::HRESULT;
        }
        CoMarshalHresult(pstm.into_param().abi(), ::std::mem::transmute(hresult)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
pub unsafe fn CoMarshalInterThreadInterfaceInStream<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    riid: *const ::windows::runtime::GUID,
    punk: Param1,
) -> ::windows::runtime::Result<super::super::Storage::StructuredStorage::IStream> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoMarshalInterThreadInterfaceInStream(
                riid: *const ::windows::runtime::GUID,
                punk: ::windows::runtime::RawPtr,
                ppstm: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__ : < super::super::Storage::StructuredStorage:: IStream as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        CoMarshalInterThreadInterfaceInStream(
            ::std::mem::transmute(riid),
            punk.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::super::Storage::StructuredStorage::IStream>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
pub unsafe fn CoMarshalInterface<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
    Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    pstm: Param0,
    riid: *const ::windows::runtime::GUID,
    punk: Param2,
    dwdestcontext: u32,
    pvdestcontext: *const ::std::ffi::c_void,
    mshlflags: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoMarshalInterface(
                pstm: ::windows::runtime::RawPtr,
                riid: *const ::windows::runtime::GUID,
                punk: ::windows::runtime::RawPtr,
                dwdestcontext: u32,
                pvdestcontext: *const ::std::ffi::c_void,
                mshlflags: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        CoMarshalInterface(
            pstm.into_param().abi(),
            ::std::mem::transmute(riid),
            punk.into_param().abi(),
            ::std::mem::transmute(dwdestcontext),
            ::std::mem::transmute(pvdestcontext),
            ::std::mem::transmute(mshlflags),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoQueryAuthenticationServices(
    pcauthsvc: *mut u32,
    asauthsvc: *mut *mut SOLE_AUTHENTICATION_SERVICE,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoQueryAuthenticationServices(
                pcauthsvc: *mut u32,
                asauthsvc: *mut *mut SOLE_AUTHENTICATION_SERVICE,
            ) -> ::windows::runtime::HRESULT;
        }
        CoQueryAuthenticationServices(
            ::std::mem::transmute(pcauthsvc),
            ::std::mem::transmute(asauthsvc),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoQueryClientBlanket(
    pauthnsvc: *mut u32,
    pauthzsvc: *mut u32,
    pserverprincname: *mut super::super::Foundation::PWSTR,
    pauthnlevel: *mut u32,
    pimplevel: *mut u32,
    pprivs: *mut *mut ::std::ffi::c_void,
    pcapabilities: *mut u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoQueryClientBlanket(
                pauthnsvc: *mut u32,
                pauthzsvc: *mut u32,
                pserverprincname: *mut super::super::Foundation::PWSTR,
                pauthnlevel: *mut u32,
                pimplevel: *mut u32,
                pprivs: *mut *mut ::std::ffi::c_void,
                pcapabilities: *mut u32,
            ) -> ::windows::runtime::HRESULT;
        }
        CoQueryClientBlanket(
            ::std::mem::transmute(pauthnsvc),
            ::std::mem::transmute(pauthzsvc),
            ::std::mem::transmute(pserverprincname),
            ::std::mem::transmute(pauthnlevel),
            ::std::mem::transmute(pimplevel),
            ::std::mem::transmute(pprivs),
            ::std::mem::transmute(pcapabilities),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoQueryProxyBlanket<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    pproxy: Param0,
    pwauthnsvc: *mut u32,
    pauthzsvc: *mut u32,
    pserverprincname: *mut super::super::Foundation::PWSTR,
    pauthnlevel: *mut u32,
    pimplevel: *mut u32,
    pauthinfo: *mut *mut ::std::ffi::c_void,
    pcapabilites: *mut u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoQueryProxyBlanket(
                pproxy: ::windows::runtime::RawPtr,
                pwauthnsvc: *mut u32,
                pauthzsvc: *mut u32,
                pserverprincname: *mut super::super::Foundation::PWSTR,
                pauthnlevel: *mut u32,
                pimplevel: *mut u32,
                pauthinfo: *mut *mut ::std::ffi::c_void,
                pcapabilites: *mut u32,
            ) -> ::windows::runtime::HRESULT;
        }
        CoQueryProxyBlanket(
            pproxy.into_param().abi(),
            ::std::mem::transmute(pwauthnsvc),
            ::std::mem::transmute(pauthzsvc),
            ::std::mem::transmute(pserverprincname),
            ::std::mem::transmute(pauthnlevel),
            ::std::mem::transmute(pimplevel),
            ::std::mem::transmute(pauthinfo),
            ::std::mem::transmute(pcapabilites),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoRegisterActivationFilter<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IActivationFilter>,
>(
    pactivationfilter: Param0,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoRegisterActivationFilter(
                pactivationfilter: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        CoRegisterActivationFilter(pactivationfilter.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoRegisterChannelHook<'a, Param1: ::windows::runtime::IntoParam<'a, IChannelHook>>(
    extensionuuid: *const ::windows::runtime::GUID,
    pchannelhook: Param1,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoRegisterChannelHook(
                extensionuuid: *const ::windows::runtime::GUID,
                pchannelhook: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        CoRegisterChannelHook(
            ::std::mem::transmute(extensionuuid),
            pchannelhook.into_param().abi(),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoRegisterClassObject<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    rclsid: *const ::windows::runtime::GUID,
    punk: Param1,
    dwclscontext: CLSCTX,
    flags: u32,
) -> ::windows::runtime::Result<u32> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoRegisterClassObject(
                rclsid: *const ::windows::runtime::GUID,
                punk: ::windows::runtime::RawPtr,
                dwclscontext: CLSCTX,
                flags: u32,
                lpdwregister: *mut u32,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CoRegisterClassObject(
            ::std::mem::transmute(rclsid),
            punk.into_param().abi(),
            ::std::mem::transmute(dwclscontext),
            ::std::mem::transmute(flags),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoRegisterDeviceCatalog<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    deviceinstanceid: Param0,
) -> ::windows::runtime::Result<CO_DEVICE_CATALOG_COOKIE> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoRegisterDeviceCatalog(
                deviceinstanceid: super::super::Foundation::PWSTR,
                cookie: *mut CO_DEVICE_CATALOG_COOKIE,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <CO_DEVICE_CATALOG_COOKIE as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        CoRegisterDeviceCatalog(deviceinstanceid.into_param().abi(), &mut result__)
            .from_abi::<CO_DEVICE_CATALOG_COOKIE>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoRegisterInitializeSpy<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IInitializeSpy>,
>(
    pspy: Param0,
) -> ::windows::runtime::Result<u64> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoRegisterInitializeSpy(
                pspy: ::windows::runtime::RawPtr,
                pulicookie: *mut u64,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CoRegisterInitializeSpy(pspy.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoRegisterMallocSpy<'a, Param0: ::windows::runtime::IntoParam<'a, IMallocSpy>>(
    pmallocspy: Param0,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoRegisterMallocSpy(
                pmallocspy: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        CoRegisterMallocSpy(pmallocspy.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoRegisterMessageFilter<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IMessageFilter>,
>(
    lpmessagefilter: Param0,
) -> ::windows::runtime::Result<IMessageFilter> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoRegisterMessageFilter(
                lpmessagefilter: ::windows::runtime::RawPtr,
                lplpmessagefilter: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMessageFilter as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CoRegisterMessageFilter(lpmessagefilter.into_param().abi(), &mut result__)
            .from_abi::<IMessageFilter>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoRegisterPSClsid(
    riid: *const ::windows::runtime::GUID,
    rclsid: *const ::windows::runtime::GUID,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoRegisterPSClsid(
                riid: *const ::windows::runtime::GUID,
                rclsid: *const ::windows::runtime::GUID,
            ) -> ::windows::runtime::HRESULT;
        }
        CoRegisterPSClsid(::std::mem::transmute(riid), ::std::mem::transmute(rclsid)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoRegisterSurrogate<'a, Param0: ::windows::runtime::IntoParam<'a, ISurrogate>>(
    psurrogate: Param0,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoRegisterSurrogate(
                psurrogate: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        CoRegisterSurrogate(psurrogate.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
pub unsafe fn CoReleaseMarshalData<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
>(
    pstm: Param0,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoReleaseMarshalData(
                pstm: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        CoReleaseMarshalData(pstm.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoReleaseServerProcess() -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoReleaseServerProcess() -> u32;
        }
        ::std::mem::transmute(CoReleaseServerProcess())
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoResumeClassObjects() -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoResumeClassObjects() -> ::windows::runtime::HRESULT;
        }
        CoResumeClassObjects().ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoRevertToSelf() -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoRevertToSelf() -> ::windows::runtime::HRESULT;
        }
        CoRevertToSelf().ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoRevokeClassObject(dwregister: u32) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoRevokeClassObject(dwregister: u32) -> ::windows::runtime::HRESULT;
        }
        CoRevokeClassObject(::std::mem::transmute(dwregister)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoRevokeDeviceCatalog<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, CO_DEVICE_CATALOG_COOKIE>,
>(
    cookie: Param0,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoRevokeDeviceCatalog(
                cookie: CO_DEVICE_CATALOG_COOKIE,
            ) -> ::windows::runtime::HRESULT;
        }
        CoRevokeDeviceCatalog(cookie.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoRevokeInitializeSpy(ulicookie: u64) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoRevokeInitializeSpy(ulicookie: u64) -> ::windows::runtime::HRESULT;
        }
        CoRevokeInitializeSpy(::std::mem::transmute(ulicookie)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoRevokeMallocSpy() -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoRevokeMallocSpy() -> ::windows::runtime::HRESULT;
        }
        CoRevokeMallocSpy().ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoSetCancelObject<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    punk: Param0,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoSetCancelObject(punk: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        CoSetCancelObject(punk.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoSetMessageDispatcher<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IMessageDispatcher>,
>(
    pmessagedispatcher: Param0,
) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoSetMessageDispatcher(pmessagedispatcher: ::windows::runtime::RawPtr);
        }
        ::std::mem::transmute(CoSetMessageDispatcher(
            pmessagedispatcher.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoSetProxyBlanket<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pproxy: Param0,
    dwauthnsvc: u32,
    dwauthzsvc: u32,
    pserverprincname: Param3,
    dwauthnlevel: RPC_C_AUTHN_LEVEL,
    dwimplevel: RPC_C_IMP_LEVEL,
    pauthinfo: *const ::std::ffi::c_void,
    dwcapabilities: EOLE_AUTHENTICATION_CAPABILITIES,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoSetProxyBlanket(
                pproxy: ::windows::runtime::RawPtr,
                dwauthnsvc: u32,
                dwauthzsvc: u32,
                pserverprincname: super::super::Foundation::PWSTR,
                dwauthnlevel: RPC_C_AUTHN_LEVEL,
                dwimplevel: RPC_C_IMP_LEVEL,
                pauthinfo: *const ::std::ffi::c_void,
                dwcapabilities: EOLE_AUTHENTICATION_CAPABILITIES,
            ) -> ::windows::runtime::HRESULT;
        }
        CoSetProxyBlanket(
            pproxy.into_param().abi(),
            ::std::mem::transmute(dwauthnsvc),
            ::std::mem::transmute(dwauthzsvc),
            pserverprincname.into_param().abi(),
            ::std::mem::transmute(dwauthnlevel),
            ::std::mem::transmute(dwimplevel),
            ::std::mem::transmute(pauthinfo),
            ::std::mem::transmute(dwcapabilities),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoSuspendClassObjects() -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoSuspendClassObjects() -> ::windows::runtime::HRESULT;
        }
        CoSuspendClassObjects().ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoSwitchCallContext<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    pnewobject: Param0,
) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoSwitchCallContext(
                pnewobject: ::windows::runtime::RawPtr,
                ppoldobject: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        CoSwitchCallContext(pnewobject.into_param().abi(), &mut result__)
            .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoTaskMemAlloc(cb: usize) -> *mut ::std::ffi::c_void {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoTaskMemAlloc(cb: usize) -> *mut ::std::ffi::c_void;
        }
        ::std::mem::transmute(CoTaskMemAlloc(::std::mem::transmute(cb)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoTaskMemFree(pv: *const ::std::ffi::c_void) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoTaskMemFree(pv: *const ::std::ffi::c_void);
        }
        ::std::mem::transmute(CoTaskMemFree(::std::mem::transmute(pv)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoTaskMemRealloc(
    pv: *const ::std::ffi::c_void,
    cb: usize,
) -> *mut ::std::ffi::c_void {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoTaskMemRealloc(
                pv: *const ::std::ffi::c_void,
                cb: usize,
            ) -> *mut ::std::ffi::c_void;
        }
        ::std::mem::transmute(CoTaskMemRealloc(
            ::std::mem::transmute(pv),
            ::std::mem::transmute(cb),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoTestCancel() -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoTestCancel() -> ::windows::runtime::HRESULT;
        }
        CoTestCancel().ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoTreatAsClass(
    clsidold: *const ::windows::runtime::GUID,
    clsidnew: *const ::windows::runtime::GUID,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoTreatAsClass(
                clsidold: *const ::windows::runtime::GUID,
                clsidnew: *const ::windows::runtime::GUID,
            ) -> ::windows::runtime::HRESULT;
        }
        CoTreatAsClass(
            ::std::mem::transmute(clsidold),
            ::std::mem::transmute(clsidnew),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CoUninitialize() {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoUninitialize();
        }
        ::std::mem::transmute(CoUninitialize())
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
pub unsafe fn CoUnmarshalHresult<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
>(
    pstm: Param0,
) -> ::windows::runtime::Result<::windows::runtime::HRESULT> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoUnmarshalHresult(
                pstm: ::windows::runtime::RawPtr,
                phresult: *mut ::windows::runtime::HRESULT,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <::windows::runtime::HRESULT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        CoUnmarshalHresult(pstm.into_param().abi(), &mut result__)
            .from_abi::<::windows::runtime::HRESULT>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
pub unsafe fn CoUnmarshalInterface<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
    T: ::windows::runtime::Interface,
>(
    pstm: Param0,
) -> ::windows::runtime::Result<T> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoUnmarshalInterface(
                pstm: ::windows::runtime::RawPtr,
                riid: *const ::windows::runtime::GUID,
                ppv: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__ = ::std::option::Option::None;
        CoUnmarshalInterface(
            pstm.into_param().abi(),
            &<T as ::windows::runtime::Interface>::IID,
            &mut result__ as *mut _ as *mut _,
        )
        .and_some(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoWaitForMultipleHandles(
    dwflags: u32,
    dwtimeout: u32,
    chandles: u32,
    phandles: *const super::super::Foundation::HANDLE,
) -> ::windows::runtime::Result<u32> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoWaitForMultipleHandles(
                dwflags: u32,
                dwtimeout: u32,
                chandles: u32,
                phandles: *const super::super::Foundation::HANDLE,
                lpdwindex: *mut u32,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CoWaitForMultipleHandles(
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(dwtimeout),
            ::std::mem::transmute(chandles),
            ::std::mem::transmute(phandles),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CoWaitForMultipleObjects(
    dwflags: u32,
    dwtimeout: u32,
    chandles: u32,
    phandles: *const super::super::Foundation::HANDLE,
) -> ::windows::runtime::Result<u32> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CoWaitForMultipleObjects(
                dwflags: u32,
                dwtimeout: u32,
                chandles: u32,
                phandles: *const super::super::Foundation::HANDLE,
                lpdwindex: *mut u32,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CoWaitForMultipleObjects(
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(dwtimeout),
            ::std::mem::transmute(chandles),
            ::std::mem::transmute(phandles),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct ComCallData {
    pub dwDispid: u32,
    pub dwReserved: u32,
    pub pUserDefined: *mut ::std::ffi::c_void,
}
impl ComCallData {}
impl ::std::default::Default for ComCallData {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for ComCallData {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("ComCallData")
            .field("dwDispid", &self.dwDispid)
            .field("dwReserved", &self.dwReserved)
            .field("pUserDefined", &self.pUserDefined)
            .finish()
    }
}
impl ::std::cmp::PartialEq for ComCallData {
    fn eq(&self, other: &Self) -> bool {
        self.dwDispid == other.dwDispid
            && self.dwReserved == other.dwReserved
            && self.pUserDefined == other.pUserDefined
    }
}
impl ::std::cmp::Eq for ComCallData {}
unsafe impl ::windows::runtime::Abi for ComCallData {
    type Abi = Self;
    type DefaultType = Self;
}
pub unsafe fn CompareSecurityIds(
    pbsecurityid1: *const u8,
    dwlen1: u32,
    pbsecurityid2: *const u8,
    dwlen2: u32,
    dwreserved: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CompareSecurityIds(
                pbsecurityid1: *const u8,
                dwlen1: u32,
                pbsecurityid2: *const u8,
                dwlen2: u32,
                dwreserved: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        CompareSecurityIds(
            ::std::mem::transmute(pbsecurityid1),
            ::std::mem::transmute(dwlen1),
            ::std::mem::transmute(pbsecurityid2),
            ::std::mem::transmute(dwlen2),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CompatFlagsFromClsid(
    pclsid: *const ::windows::runtime::GUID,
    pdwcompatflags: *mut u32,
    pdwmiscstatusflags: *mut u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CompatFlagsFromClsid(
                pclsid: *const ::windows::runtime::GUID,
                pdwcompatflags: *mut u32,
                pdwmiscstatusflags: *mut u32,
            ) -> ::windows::runtime::HRESULT;
        }
        CompatFlagsFromClsid(
            ::std::mem::transmute(pclsid),
            ::std::mem::transmute(pdwcompatflags),
            ::std::mem::transmute(pdwmiscstatusflags),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const ComponentUtil: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1857169540,
    35353,
    4560,
    [129, 182, 0, 160, 201, 35, 28, 41],
);
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Security",
    feature = "Win32_Storage_StructuredStorage"
))]
pub unsafe fn CopyBindInfo(pcbisrc: *const BINDINFO) -> ::windows::runtime::Result<BINDINFO> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CopyBindInfo(
                pcbisrc: *const ::std::mem::ManuallyDrop<BINDINFO>,
                pbidest: *mut ::std::mem::ManuallyDrop<BINDINFO>,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <BINDINFO as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CopyBindInfo(::std::mem::transmute(pcbisrc), &mut result__).from_abi::<BINDINFO>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Storage_StructuredStorage"
))]
pub unsafe fn CopyStgMedium(
    pcstgmedsrc: *const STGMEDIUM,
) -> ::windows::runtime::Result<STGMEDIUM> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CopyStgMedium(
                pcstgmedsrc: *const ::std::mem::ManuallyDrop<STGMEDIUM>,
                pstgmeddest: *mut ::std::mem::ManuallyDrop<STGMEDIUM>,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <STGMEDIUM as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CopyStgMedium(::std::mem::transmute(pcstgmedsrc), &mut result__)
            .from_abi::<STGMEDIUM>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CreateAntiMoniker() -> ::windows::runtime::Result<IMoniker> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CreateAntiMoniker(
                ppmk: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMoniker as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CreateAntiMoniker(&mut result__).from_abi::<IMoniker>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CreateAsyncBindCtx<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, IBindStatusCallback>,
    Param2: ::windows::runtime::IntoParam<'a, IEnumFORMATETC>,
>(
    reserved: u32,
    pbscb: Param1,
    pefetc: Param2,
) -> ::windows::runtime::Result<IBindCtx> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CreateAsyncBindCtx(
                reserved: u32,
                pbscb: ::windows::runtime::RawPtr,
                pefetc: ::windows::runtime::RawPtr,
                ppbc: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IBindCtx as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CreateAsyncBindCtx(
            ::std::mem::transmute(reserved),
            pbscb.into_param().abi(),
            pefetc.into_param().abi(),
            &mut result__,
        )
        .from_abi::<IBindCtx>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CreateAsyncBindCtxEx<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IBindCtx>,
    Param2: ::windows::runtime::IntoParam<'a, IBindStatusCallback>,
    Param3: ::windows::runtime::IntoParam<'a, IEnumFORMATETC>,
>(
    pbc: Param0,
    dwoptions: u32,
    pbscb: Param2,
    penum: Param3,
    ppbc: *mut ::std::option::Option<IBindCtx>,
    reserved: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CreateAsyncBindCtxEx(
                pbc: ::windows::runtime::RawPtr,
                dwoptions: u32,
                pbscb: ::windows::runtime::RawPtr,
                penum: ::windows::runtime::RawPtr,
                ppbc: *mut ::windows::runtime::RawPtr,
                reserved: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        CreateAsyncBindCtxEx(
            pbc.into_param().abi(),
            ::std::mem::transmute(dwoptions),
            pbscb.into_param().abi(),
            penum.into_param().abi(),
            ::std::mem::transmute(ppbc),
            ::std::mem::transmute(reserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CreateBindCtx(reserved: u32) -> ::windows::runtime::Result<IBindCtx> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CreateBindCtx(
                reserved: u32,
                ppbc: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IBindCtx as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CreateBindCtx(::std::mem::transmute(reserved), &mut result__).from_abi::<IBindCtx>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CreateClassMoniker(
    rclsid: *const ::windows::runtime::GUID,
) -> ::windows::runtime::Result<IMoniker> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CreateClassMoniker(
                rclsid: *const ::windows::runtime::GUID,
                ppmk: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMoniker as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CreateClassMoniker(::std::mem::transmute(rclsid), &mut result__)
            .from_abi::<IMoniker>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CreateDataAdviseHolder() -> ::windows::runtime::Result<IDataAdviseHolder> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CreateDataAdviseHolder(
                ppdaholder: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IDataAdviseHolder as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        CreateDataAdviseHolder(&mut result__).from_abi::<IDataAdviseHolder>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CreateDataCache<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    punkouter: Param0,
    rclsid: *const ::windows::runtime::GUID,
    iid: *const ::windows::runtime::GUID,
    ppv: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CreateDataCache(
                punkouter: ::windows::runtime::RawPtr,
                rclsid: *const ::windows::runtime::GUID,
                iid: *const ::windows::runtime::GUID,
                ppv: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        CreateDataCache(
            punkouter.into_param().abi(),
            ::std::mem::transmute(rclsid),
            ::std::mem::transmute(iid),
            ::std::mem::transmute(ppv),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CreateFileMoniker<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    lpszpathname: Param0,
) -> ::windows::runtime::Result<IMoniker> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CreateFileMoniker(
                lpszpathname: super::super::Foundation::PWSTR,
                ppmk: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMoniker as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CreateFileMoniker(lpszpathname.into_param().abi(), &mut result__)
            .from_abi::<IMoniker>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CreateFormatEnumerator(
    cfmtetc: u32,
    rgfmtetc: *const FORMATETC,
) -> ::windows::runtime::Result<IEnumFORMATETC> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CreateFormatEnumerator(
                cfmtetc: u32,
                rgfmtetc: *const FORMATETC,
                ppenumfmtetc: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IEnumFORMATETC as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CreateFormatEnumerator(
            ::std::mem::transmute(cfmtetc),
            ::std::mem::transmute(rgfmtetc),
            &mut result__,
        )
        .from_abi::<IEnumFORMATETC>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CreateGenericComposite<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IMoniker>,
    Param1: ::windows::runtime::IntoParam<'a, IMoniker>,
>(
    pmkfirst: Param0,
    pmkrest: Param1,
) -> ::windows::runtime::Result<IMoniker> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CreateGenericComposite(
                pmkfirst: ::windows::runtime::RawPtr,
                pmkrest: ::windows::runtime::RawPtr,
                ppmkcomposite: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMoniker as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CreateGenericComposite(
            pmkfirst.into_param().abi(),
            pmkrest.into_param().abi(),
            &mut result__,
        )
        .from_abi::<IMoniker>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CreateIUriBuilder<'a, Param0: ::windows::runtime::IntoParam<'a, IUri>>(
    piuri: Param0,
    dwflags: u32,
    dwreserved: usize,
) -> ::windows::runtime::Result<IUriBuilder> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CreateIUriBuilder(
                piuri: ::windows::runtime::RawPtr,
                dwflags: u32,
                dwreserved: usize,
                ppiuribuilder: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IUriBuilder as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CreateIUriBuilder(
            piuri.into_param().abi(),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(dwreserved),
            &mut result__,
        )
        .from_abi::<IUriBuilder>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CreateItemMoniker<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    lpszdelim: Param0,
    lpszitem: Param1,
) -> ::windows::runtime::Result<IMoniker> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CreateItemMoniker(
                lpszdelim: super::super::Foundation::PWSTR,
                lpszitem: super::super::Foundation::PWSTR,
                ppmk: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMoniker as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CreateItemMoniker(
            lpszdelim.into_param().abi(),
            lpszitem.into_param().abi(),
            &mut result__,
        )
        .from_abi::<IMoniker>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CreateObjrefMoniker<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    punk: Param0,
) -> ::windows::runtime::Result<IMoniker> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CreateObjrefMoniker(
                punk: ::windows::runtime::RawPtr,
                ppmk: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMoniker as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CreateObjrefMoniker(punk.into_param().abi(), &mut result__).from_abi::<IMoniker>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CreateOleAdviseHolder() -> ::windows::runtime::Result<IOleAdviseHolder> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CreateOleAdviseHolder(
                ppoaholder: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IOleAdviseHolder as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CreateOleAdviseHolder(&mut result__).from_abi::<IOleAdviseHolder>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CreatePointerMoniker<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    punk: Param0,
) -> ::windows::runtime::Result<IMoniker> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn CreatePointerMoniker(
                punk: ::windows::runtime::RawPtr,
                ppmk: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMoniker as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CreatePointerMoniker(punk.into_param().abi(), &mut result__).from_abi::<IMoniker>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CreateURLMoniker<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IMoniker>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pmkctx: Param0,
    szurl: Param1,
) -> ::windows::runtime::Result<IMoniker> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CreateURLMoniker(
                pmkctx: ::windows::runtime::RawPtr,
                szurl: super::super::Foundation::PWSTR,
                ppmk: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMoniker as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CreateURLMoniker(
            pmkctx.into_param().abi(),
            szurl.into_param().abi(),
            &mut result__,
        )
        .from_abi::<IMoniker>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CreateURLMonikerEx<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IMoniker>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pmkctx: Param0,
    szurl: Param1,
    ppmk: *mut ::std::option::Option<IMoniker>,
    dwflags: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CreateURLMonikerEx(
                pmkctx: ::windows::runtime::RawPtr,
                szurl: super::super::Foundation::PWSTR,
                ppmk: *mut ::windows::runtime::RawPtr,
                dwflags: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        CreateURLMonikerEx(
            pmkctx.into_param().abi(),
            szurl.into_param().abi(),
            ::std::mem::transmute(ppmk),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn CreateURLMonikerEx2<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IMoniker>,
    Param1: ::windows::runtime::IntoParam<'a, IUri>,
>(
    pmkctx: Param0,
    puri: Param1,
    ppmk: *mut ::std::option::Option<IMoniker>,
    dwflags: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CreateURLMonikerEx2(
                pmkctx: ::windows::runtime::RawPtr,
                puri: ::windows::runtime::RawPtr,
                ppmk: *mut ::windows::runtime::RawPtr,
                dwflags: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        CreateURLMonikerEx2(
            pmkctx.into_param().abi(),
            puri.into_param().abi(),
            ::std::mem::transmute(ppmk),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CreateUri<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pwzuri: Param0,
    dwflags: URI_CREATE_FLAGS,
    dwreserved: usize,
) -> ::windows::runtime::Result<IUri> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CreateUri(
                pwzuri: super::super::Foundation::PWSTR,
                dwflags: URI_CREATE_FLAGS,
                dwreserved: usize,
                ppuri: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IUri as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CreateUri(
            pwzuri.into_param().abi(),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(dwreserved),
            &mut result__,
        )
        .from_abi::<IUri>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CreateUriFromMultiByteString<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PSTR>,
>(
    pszansiinputuri: Param0,
    dwencodingflags: u32,
    dwcodepage: u32,
    dwcreateflags: u32,
    dwreserved: usize,
) -> ::windows::runtime::Result<IUri> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CreateUriFromMultiByteString(
                pszansiinputuri: super::super::Foundation::PSTR,
                dwencodingflags: u32,
                dwcodepage: u32,
                dwcreateflags: u32,
                dwreserved: usize,
                ppuri: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IUri as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CreateUriFromMultiByteString(
            pszansiinputuri.into_param().abi(),
            ::std::mem::transmute(dwencodingflags),
            ::std::mem::transmute(dwcodepage),
            ::std::mem::transmute(dwcreateflags),
            ::std::mem::transmute(dwreserved),
            &mut result__,
        )
        .from_abi::<IUri>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn CreateUriWithFragment<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pwzuri: Param0,
    pwzfragment: Param1,
    dwflags: u32,
    dwreserved: usize,
) -> ::windows::runtime::Result<IUri> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn CreateUriWithFragment(
                pwzuri: super::super::Foundation::PWSTR,
                pwzfragment: super::super::Foundation::PWSTR,
                dwflags: u32,
                dwreserved: usize,
                ppuri: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IUri as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CreateUriWithFragment(
            pwzuri.into_param().abi(),
            pwzfragment.into_param().abi(),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(dwreserved),
            &mut result__,
        )
        .from_abi::<IUri>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct DATADIR(pub i32);
pub const DATADIR_GET: DATADIR = DATADIR(1i32);
pub const DATADIR_SET: DATADIR = DATADIR(2i32);
impl ::std::convert::From<i32> for DATADIR {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DATADIR {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct DATAINFO {
    pub ulTotalSize: u32,
    pub ulavrPacketSize: u32,
    pub ulConnectSpeed: u32,
    pub ulProcessorSpeed: u32,
}
impl DATAINFO {}
impl ::std::default::Default for DATAINFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DATAINFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DATAINFO")
            .field("ulTotalSize", &self.ulTotalSize)
            .field("ulavrPacketSize", &self.ulavrPacketSize)
            .field("ulConnectSpeed", &self.ulConnectSpeed)
            .field("ulProcessorSpeed", &self.ulProcessorSpeed)
            .finish()
    }
}
impl ::std::cmp::PartialEq for DATAINFO {
    fn eq(&self, other: &Self) -> bool {
        self.ulTotalSize == other.ulTotalSize
            && self.ulavrPacketSize == other.ulavrPacketSize
            && self.ulConnectSpeed == other.ulConnectSpeed
            && self.ulProcessorSpeed == other.ulProcessorSpeed
    }
}
impl ::std::cmp::Eq for DATAINFO {}
unsafe impl ::windows::runtime::Abi for DATAINFO {
    type Abi = Self;
    type DefaultType = Self;
}
pub const DCOMSCM_ACTIVATION_DISALLOW_UNSECURE_CALL: u32 = 2u32;
pub const DCOMSCM_ACTIVATION_USE_ALL_AUTHNSERVICES: u32 = 1u32;
pub const DCOMSCM_PING_DISALLOW_UNSECURE_CALL: u32 = 32u32;
pub const DCOMSCM_PING_USE_MID_AUTHNSERVICE: u32 = 16u32;
pub const DCOMSCM_RESOLVE_DISALLOW_UNSECURE_CALL: u32 = 8u32;
pub const DCOMSCM_RESOLVE_USE_ALL_AUTHNSERVICES: u32 = 4u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct DCOM_CALL_STATE(pub i32);
pub const DCOM_NONE: DCOM_CALL_STATE = DCOM_CALL_STATE(0i32);
pub const DCOM_CALL_COMPLETE: DCOM_CALL_STATE = DCOM_CALL_STATE(1i32);
pub const DCOM_CALL_CANCELED: DCOM_CALL_STATE = DCOM_CALL_STATE(2i32);
impl ::std::convert::From<i32> for DCOM_CALL_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DCOM_CALL_STATE {
    type Abi = Self;
    type DefaultType = Self;
}
pub const DD_DEFDRAGDELAY: u32 = 200u32;
pub const DD_DEFDRAGMINDIST: u32 = 2u32;
pub const DD_DEFSCROLLDELAY: u32 = 50u32;
pub const DD_DEFSCROLLINSET: u32 = 11u32;
pub const DD_DEFSCROLLINTERVAL: u32 = 50u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct DISCARDCACHE(pub i32);
pub const DISCARDCACHE_SAVEIFDIRTY: DISCARDCACHE = DISCARDCACHE(0i32);
pub const DISCARDCACHE_NOSAVE: DISCARDCACHE = DISCARDCACHE(1i32);
impl ::std::convert::From<i32> for DISCARDCACHE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DISCARDCACHE {
    type Abi = Self;
    type DefaultType = Self;
}
pub const DISPID_ABOUTBOX: i32 = -552i32;
pub const DISPID_ACCELERATOR: i32 = -543i32;
pub const DISPID_ADDITEM: i32 = -553i32;
pub const DISPID_AMBIENT_APPEARANCE: i32 = -716i32;
pub const DISPID_AMBIENT_AUTOCLIP: i32 = -715i32;
pub const DISPID_AMBIENT_BACKCOLOR: i32 = -701i32;
pub const DISPID_AMBIENT_CHARSET: i32 = -727i32;
pub const DISPID_AMBIENT_CODEPAGE: i32 = -725i32;
pub const DISPID_AMBIENT_DISPLAYASDEFAULT: i32 = -713i32;
pub const DISPID_AMBIENT_DISPLAYNAME: i32 = -702i32;
pub const DISPID_AMBIENT_FONT: i32 = -703i32;
pub const DISPID_AMBIENT_FORECOLOR: i32 = -704i32;
pub const DISPID_AMBIENT_LOCALEID: i32 = -705i32;
pub const DISPID_AMBIENT_MESSAGEREFLECT: i32 = -706i32;
pub const DISPID_AMBIENT_PALETTE: i32 = -726i32;
pub const DISPID_AMBIENT_RIGHTTOLEFT: i32 = -732i32;
pub const DISPID_AMBIENT_SCALEUNITS: i32 = -707i32;
pub const DISPID_AMBIENT_SHOWGRABHANDLES: i32 = -711i32;
pub const DISPID_AMBIENT_SHOWHATCHING: i32 = -712i32;
pub const DISPID_AMBIENT_SUPPORTSMNEMONICS: i32 = -714i32;
pub const DISPID_AMBIENT_TEXTALIGN: i32 = -708i32;
pub const DISPID_AMBIENT_TOPTOBOTTOM: i32 = -733i32;
pub const DISPID_AMBIENT_TRANSFERPRIORITY: i32 = -728i32;
pub const DISPID_AMBIENT_UIDEAD: i32 = -710i32;
pub const DISPID_AMBIENT_USERMODE: i32 = -709i32;
pub const DISPID_APPEARANCE: i32 = -520i32;
pub const DISPID_AUTOSIZE: i32 = -500i32;
pub const DISPID_BACKCOLOR: i32 = -501i32;
pub const DISPID_BACKSTYLE: i32 = -502i32;
pub const DISPID_BORDERCOLOR: i32 = -503i32;
pub const DISPID_BORDERSTYLE: i32 = -504i32;
pub const DISPID_BORDERVISIBLE: i32 = -519i32;
pub const DISPID_BORDERWIDTH: i32 = -505i32;
pub const DISPID_CAPTION: i32 = -518i32;
pub const DISPID_CLEAR: i32 = -554i32;
pub const DISPID_CLICK: i32 = -600i32;
pub const DISPID_CLICK_VALUE: i32 = -610i32;
pub const DISPID_COLUMN: i32 = -529i32;
pub const DISPID_DBLCLICK: i32 = -601i32;
pub const DISPID_DISPLAYSTYLE: i32 = -540i32;
pub const DISPID_DOCLICK: i32 = -551i32;
pub const DISPID_DRAWMODE: i32 = -507i32;
pub const DISPID_DRAWSTYLE: i32 = -508i32;
pub const DISPID_DRAWWIDTH: i32 = -509i32;
pub const DISPID_Delete: i32 = -801i32;
pub const DISPID_ENABLED: i32 = -514i32;
pub const DISPID_ENTERKEYBEHAVIOR: i32 = -544i32;
pub const DISPID_ERROREVENT: i32 = -608i32;
pub const DISPID_FILLCOLOR: i32 = -510i32;
pub const DISPID_FILLSTYLE: i32 = -511i32;
pub const DISPID_FONT: i32 = -512i32;
pub const DISPID_FONT_BOLD: u32 = 3u32;
pub const DISPID_FONT_CHANGED: u32 = 9u32;
pub const DISPID_FONT_CHARSET: u32 = 8u32;
pub const DISPID_FONT_ITALIC: u32 = 4u32;
pub const DISPID_FONT_NAME: u32 = 0u32;
pub const DISPID_FONT_SIZE: u32 = 2u32;
pub const DISPID_FONT_STRIKE: u32 = 6u32;
pub const DISPID_FONT_UNDER: u32 = 5u32;
pub const DISPID_FONT_WEIGHT: u32 = 7u32;
pub const DISPID_FORECOLOR: i32 = -513i32;
pub const DISPID_GROUPNAME: i32 = -541i32;
pub const DISPID_HWND: i32 = -515i32;
pub const DISPID_IMEMODE: i32 = -542i32;
pub const DISPID_KEYDOWN: i32 = -602i32;
pub const DISPID_KEYPRESS: i32 = -603i32;
pub const DISPID_KEYUP: i32 = -604i32;
pub const DISPID_LIST: i32 = -528i32;
pub const DISPID_LISTCOUNT: i32 = -531i32;
pub const DISPID_LISTINDEX: i32 = -526i32;
pub const DISPID_MAXLENGTH: i32 = -533i32;
pub const DISPID_MOUSEDOWN: i32 = -605i32;
pub const DISPID_MOUSEICON: i32 = -522i32;
pub const DISPID_MOUSEMOVE: i32 = -606i32;
pub const DISPID_MOUSEPOINTER: i32 = -521i32;
pub const DISPID_MOUSEUP: i32 = -607i32;
pub const DISPID_MULTILINE: i32 = -537i32;
pub const DISPID_MULTISELECT: i32 = -532i32;
pub const DISPID_NUMBEROFCOLUMNS: i32 = -539i32;
pub const DISPID_NUMBEROFROWS: i32 = -538i32;
pub const DISPID_Name: i32 = -800i32;
pub const DISPID_Object: i32 = -802i32;
pub const DISPID_PASSWORDCHAR: i32 = -534i32;
pub const DISPID_PICTURE: i32 = -523i32;
pub const DISPID_PICT_HANDLE: u32 = 0u32;
pub const DISPID_PICT_HEIGHT: u32 = 5u32;
pub const DISPID_PICT_HPAL: u32 = 2u32;
pub const DISPID_PICT_RENDER: u32 = 6u32;
pub const DISPID_PICT_TYPE: u32 = 3u32;
pub const DISPID_PICT_WIDTH: u32 = 4u32;
pub const DISPID_Parent: i32 = -803i32;
pub const DISPID_READYSTATE: i32 = -525i32;
pub const DISPID_READYSTATECHANGE: i32 = -609i32;
pub const DISPID_REFRESH: i32 = -550i32;
pub const DISPID_REMOVEITEM: i32 = -555i32;
pub const DISPID_RIGHTTOLEFT: i32 = -611i32;
pub const DISPID_SCROLLBARS: i32 = -535i32;
pub const DISPID_SELECTED: i32 = -527i32;
pub const DISPID_SELLENGTH: i32 = -548i32;
pub const DISPID_SELSTART: i32 = -547i32;
pub const DISPID_SELTEXT: i32 = -546i32;
pub const DISPID_TABKEYBEHAVIOR: i32 = -545i32;
pub const DISPID_TABSTOP: i32 = -516i32;
pub const DISPID_TEXT: i32 = -517i32;
pub const DISPID_TOPTOBOTTOM: i32 = -612i32;
pub const DISPID_VALID: i32 = -524i32;
pub const DISPID_WORDWRAP: i32 = -536i32;
pub const DMUS_ERRBASE: u32 = 4096u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct DOCMISC(pub i32);
pub const DOCMISC_CANCREATEMULTIPLEVIEWS: DOCMISC = DOCMISC(1i32);
pub const DOCMISC_SUPPORTCOMPLEXRECTANGLES: DOCMISC = DOCMISC(2i32);
pub const DOCMISC_CANTOPENEDIT: DOCMISC = DOCMISC(4i32);
pub const DOCMISC_NOFILESUPPORT: DOCMISC = DOCMISC(8i32);
impl ::std::convert::From<i32> for DOCMISC {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DOCMISC {
    type Abi = Self;
    type DefaultType = Self;
}
pub const DROPEFFECT_COPY: u32 = 1u32;
pub const DROPEFFECT_LINK: u32 = 4u32;
pub const DROPEFFECT_MOVE: u32 = 2u32;
pub const DROPEFFECT_NONE: u32 = 0u32;
pub const DROPEFFECT_SCROLL: u32 = 2147483648u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct DVASPECT(pub i32);
pub const DVASPECT_CONTENT: DVASPECT = DVASPECT(1i32);
pub const DVASPECT_THUMBNAIL: DVASPECT = DVASPECT(2i32);
pub const DVASPECT_ICON: DVASPECT = DVASPECT(4i32);
pub const DVASPECT_DOCPRINT: DVASPECT = DVASPECT(8i32);
impl ::std::convert::From<i32> for DVASPECT {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DVASPECT {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct DVASPECT2(pub i32);
pub const DVASPECT_OPAQUE: DVASPECT2 = DVASPECT2(16i32);
pub const DVASPECT_TRANSPARENT: DVASPECT2 = DVASPECT2(32i32);
impl ::std::convert::From<i32> for DVASPECT2 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DVASPECT2 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct DVTARGETDEVICE {
    pub tdSize: u32,
    pub tdDriverNameOffset: u16,
    pub tdDeviceNameOffset: u16,
    pub tdPortNameOffset: u16,
    pub tdExtDevmodeOffset: u16,
    pub tdData: [u8; 1],
}
impl DVTARGETDEVICE {}
impl ::std::default::Default for DVTARGETDEVICE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DVTARGETDEVICE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DVTARGETDEVICE")
            .field("tdSize", &self.tdSize)
            .field("tdDriverNameOffset", &self.tdDriverNameOffset)
            .field("tdDeviceNameOffset", &self.tdDeviceNameOffset)
            .field("tdPortNameOffset", &self.tdPortNameOffset)
            .field("tdExtDevmodeOffset", &self.tdExtDevmodeOffset)
            .field("tdData", &self.tdData)
            .finish()
    }
}
impl ::std::cmp::PartialEq for DVTARGETDEVICE {
    fn eq(&self, other: &Self) -> bool {
        self.tdSize == other.tdSize
            && self.tdDriverNameOffset == other.tdDriverNameOffset
            && self.tdDeviceNameOffset == other.tdDeviceNameOffset
            && self.tdPortNameOffset == other.tdPortNameOffset
            && self.tdExtDevmodeOffset == other.tdExtDevmodeOffset
            && self.tdData == other.tdData
    }
}
impl ::std::cmp::Eq for DVTARGETDEVICE {}
unsafe impl ::windows::runtime::Abi for DVTARGETDEVICE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct DWORD_BLOB {
    pub clSize: u32,
    pub alData: [u32; 1],
}
impl DWORD_BLOB {}
impl ::std::default::Default for DWORD_BLOB {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DWORD_BLOB {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DWORD_BLOB")
            .field("clSize", &self.clSize)
            .field("alData", &self.alData)
            .finish()
    }
}
impl ::std::cmp::PartialEq for DWORD_BLOB {
    fn eq(&self, other: &Self) -> bool {
        self.clSize == other.clSize && self.alData == other.alData
    }
}
impl ::std::cmp::Eq for DWORD_BLOB {}
unsafe impl ::windows::runtime::Abi for DWORD_BLOB {
    type Abi = Self;
    type DefaultType = Self;
}
pub unsafe fn DoDragDrop<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IDataObject>,
    Param1: ::windows::runtime::IntoParam<'a, IDropSource>,
>(
    pdataobj: Param0,
    pdropsource: Param1,
    dwokeffects: u32,
    pdweffect: *mut u32,
) -> ::windows::runtime::HRESULT {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn DoDragDrop(
                pdataobj: ::windows::runtime::RawPtr,
                pdropsource: ::windows::runtime::RawPtr,
                dwokeffects: u32,
                pdweffect: *mut u32,
            ) -> ::windows::runtime::HRESULT;
        }
        ::std::mem::transmute(DoDragDrop(
            pdataobj.into_param().abi(),
            pdropsource.into_param().abi(),
            ::std::mem::transmute(dwokeffects),
            ::std::mem::transmute(pdweffect),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const ELF_DISABLECANCELLINK: i32 = 16i32;
pub const ELF_DISABLECHANGESOURCE: i32 = 8i32;
pub const ELF_DISABLEOPENSOURCE: i32 = 4i32;
pub const ELF_DISABLEUPDATENOW: i32 = 2i32;
pub const ELF_SHOWHELP: i32 = 1i32;
pub const EMBDHLP_CREATENOW: i32 = 0i32;
pub const EMBDHLP_DELAYCREATE: i32 = 65536i32;
pub const EMBDHLP_INPROC_HANDLER: i32 = 0i32;
pub const EMBDHLP_INPROC_SERVER: i32 = 1i32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct ENUM_CONTROLS_WHICH_FLAGS(pub u32);
pub const GCW_WCH_SIBLING: ENUM_CONTROLS_WHICH_FLAGS = ENUM_CONTROLS_WHICH_FLAGS(1u32);
pub const GC_WCH_CONTAINER: ENUM_CONTROLS_WHICH_FLAGS = ENUM_CONTROLS_WHICH_FLAGS(2u32);
pub const GC_WCH_CONTAINED: ENUM_CONTROLS_WHICH_FLAGS = ENUM_CONTROLS_WHICH_FLAGS(3u32);
pub const GC_WCH_ALL: ENUM_CONTROLS_WHICH_FLAGS = ENUM_CONTROLS_WHICH_FLAGS(4u32);
pub const GC_WCH_FREVERSEDIR: ENUM_CONTROLS_WHICH_FLAGS = ENUM_CONTROLS_WHICH_FLAGS(134217728u32);
pub const GC_WCH_FONLYAFTER: ENUM_CONTROLS_WHICH_FLAGS = ENUM_CONTROLS_WHICH_FLAGS(268435456u32);
pub const GC_WCH_FONLYBEFORE: ENUM_CONTROLS_WHICH_FLAGS = ENUM_CONTROLS_WHICH_FLAGS(536870912u32);
pub const GC_WCH_FSELECTED: ENUM_CONTROLS_WHICH_FLAGS = ENUM_CONTROLS_WHICH_FLAGS(1073741824u32);
impl ::std::convert::From<u32> for ENUM_CONTROLS_WHICH_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for ENUM_CONTROLS_WHICH_FLAGS {
    type Abi = Self;
    type DefaultType = Self;
}
impl ::std::ops::BitOr for ENUM_CONTROLS_WHICH_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for ENUM_CONTROLS_WHICH_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for ENUM_CONTROLS_WHICH_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for ENUM_CONTROLS_WHICH_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for ENUM_CONTROLS_WHICH_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct EOC_ChangeType(pub i32);
pub const EOC_NewObject: EOC_ChangeType = EOC_ChangeType(0i32);
pub const EOC_ModifiedObject: EOC_ChangeType = EOC_ChangeType(1i32);
pub const EOC_DeletedObject: EOC_ChangeType = EOC_ChangeType(2i32);
impl ::std::convert::From<i32> for EOC_ChangeType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for EOC_ChangeType {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct EOLE_AUTHENTICATION_CAPABILITIES(pub i32);
pub const EOAC_NONE: EOLE_AUTHENTICATION_CAPABILITIES = EOLE_AUTHENTICATION_CAPABILITIES(0i32);
pub const EOAC_MUTUAL_AUTH: EOLE_AUTHENTICATION_CAPABILITIES =
    EOLE_AUTHENTICATION_CAPABILITIES(1i32);
pub const EOAC_STATIC_CLOAKING: EOLE_AUTHENTICATION_CAPABILITIES =
    EOLE_AUTHENTICATION_CAPABILITIES(32i32);
pub const EOAC_DYNAMIC_CLOAKING: EOLE_AUTHENTICATION_CAPABILITIES =
    EOLE_AUTHENTICATION_CAPABILITIES(64i32);
pub const EOAC_ANY_AUTHORITY: EOLE_AUTHENTICATION_CAPABILITIES =
    EOLE_AUTHENTICATION_CAPABILITIES(128i32);
pub const EOAC_MAKE_FULLSIC: EOLE_AUTHENTICATION_CAPABILITIES =
    EOLE_AUTHENTICATION_CAPABILITIES(256i32);
pub const EOAC_DEFAULT: EOLE_AUTHENTICATION_CAPABILITIES =
    EOLE_AUTHENTICATION_CAPABILITIES(2048i32);
pub const EOAC_SECURE_REFS: EOLE_AUTHENTICATION_CAPABILITIES =
    EOLE_AUTHENTICATION_CAPABILITIES(2i32);
pub const EOAC_ACCESS_CONTROL: EOLE_AUTHENTICATION_CAPABILITIES =
    EOLE_AUTHENTICATION_CAPABILITIES(4i32);
pub const EOAC_APPID: EOLE_AUTHENTICATION_CAPABILITIES = EOLE_AUTHENTICATION_CAPABILITIES(8i32);
pub const EOAC_DYNAMIC: EOLE_AUTHENTICATION_CAPABILITIES = EOLE_AUTHENTICATION_CAPABILITIES(16i32);
pub const EOAC_REQUIRE_FULLSIC: EOLE_AUTHENTICATION_CAPABILITIES =
    EOLE_AUTHENTICATION_CAPABILITIES(512i32);
pub const EOAC_AUTO_IMPERSONATE: EOLE_AUTHENTICATION_CAPABILITIES =
    EOLE_AUTHENTICATION_CAPABILITIES(1024i32);
pub const EOAC_DISABLE_AAA: EOLE_AUTHENTICATION_CAPABILITIES =
    EOLE_AUTHENTICATION_CAPABILITIES(4096i32);
pub const EOAC_NO_CUSTOM_MARSHAL: EOLE_AUTHENTICATION_CAPABILITIES =
    EOLE_AUTHENTICATION_CAPABILITIES(8192i32);
pub const EOAC_RESERVED1: EOLE_AUTHENTICATION_CAPABILITIES =
    EOLE_AUTHENTICATION_CAPABILITIES(16384i32);
impl ::std::convert::From<i32> for EOLE_AUTHENTICATION_CAPABILITIES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for EOLE_AUTHENTICATION_CAPABILITIES {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct EXTCONN(pub i32);
pub const EXTCONN_STRONG: EXTCONN = EXTCONN(1i32);
pub const EXTCONN_WEAK: EXTCONN = EXTCONN(2i32);
pub const EXTCONN_CALLABLE: EXTCONN = EXTCONN(4i32);
impl ::std::convert::From<i32> for EXTCONN {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for EXTCONN {
    type Abi = Self;
    type DefaultType = Self;
}
pub const E_PENDING: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-2147483638i32 as _);
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct ExtentInfo {
    pub cb: u32,
    pub dwExtentMode: u32,
    pub sizelProposed: super::super::Foundation::SIZE,
}
#[cfg(feature = "Win32_Foundation")]
impl ExtentInfo {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for ExtentInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for ExtentInfo {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("ExtentInfo")
            .field("cb", &self.cb)
            .field("dwExtentMode", &self.dwExtentMode)
            .field("sizelProposed", &self.sizelProposed)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for ExtentInfo {
    fn eq(&self, other: &Self) -> bool {
        self.cb == other.cb
            && self.dwExtentMode == other.dwExtentMode
            && self.sizelProposed == other.sizelProposed
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for ExtentInfo {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for ExtentInfo {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct ExtentMode(pub i32);
pub const DVEXTENT_CONTENT: ExtentMode = ExtentMode(0i32);
pub const DVEXTENT_INTEGRAL: ExtentMode = ExtentMode(1i32);
impl ::std::convert::From<i32> for ExtentMode {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for ExtentMode {
    type Abi = Self;
    type DefaultType = Self;
}
pub const FIEF_FLAG_FORCE_JITUI: u32 = 1u32;
pub const FIEF_FLAG_PEEK: u32 = 2u32;
pub const FIEF_FLAG_RESERVED_0: u32 = 8u32;
pub const FIEF_FLAG_SKIP_INSTALLED_VERSION_CHECK: u32 = 4u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct FLAGGED_BYTE_BLOB {
    pub fFlags: u32,
    pub clSize: u32,
    pub abData: [u8; 1],
}
impl FLAGGED_BYTE_BLOB {}
impl ::std::default::Default for FLAGGED_BYTE_BLOB {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for FLAGGED_BYTE_BLOB {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("FLAGGED_BYTE_BLOB")
            .field("fFlags", &self.fFlags)
            .field("clSize", &self.clSize)
            .field("abData", &self.abData)
            .finish()
    }
}
impl ::std::cmp::PartialEq for FLAGGED_BYTE_BLOB {
    fn eq(&self, other: &Self) -> bool {
        self.fFlags == other.fFlags && self.clSize == other.clSize && self.abData == other.abData
    }
}
impl ::std::cmp::Eq for FLAGGED_BYTE_BLOB {}
unsafe impl ::windows::runtime::Abi for FLAGGED_BYTE_BLOB {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct FLAGGED_WORD_BLOB {
    pub fFlags: u32,
    pub clSize: u32,
    pub asData: [u16; 1],
}
impl FLAGGED_WORD_BLOB {}
impl ::std::default::Default for FLAGGED_WORD_BLOB {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for FLAGGED_WORD_BLOB {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("FLAGGED_WORD_BLOB")
            .field("fFlags", &self.fFlags)
            .field("clSize", &self.clSize)
            .field("asData", &self.asData)
            .finish()
    }
}
impl ::std::cmp::PartialEq for FLAGGED_WORD_BLOB {
    fn eq(&self, other: &Self) -> bool {
        self.fFlags == other.fFlags && self.clSize == other.clSize && self.asData == other.asData
    }
}
impl ::std::cmp::Eq for FLAGGED_WORD_BLOB {}
unsafe impl ::windows::runtime::Abi for FLAGGED_WORD_BLOB {
    type Abi = Self;
    type DefaultType = Self;
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Storage_StructuredStorage"
))]
impl ::std::clone::Clone for FLAG_STGMEDIUM {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C)]
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Storage_StructuredStorage"
))]
pub struct FLAG_STGMEDIUM {
    pub ContextFlags: i32,
    pub fPassOwnership: i32,
    pub Stgmed: STGMEDIUM,
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Storage_StructuredStorage"
))]
impl FLAG_STGMEDIUM {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Storage_StructuredStorage"
))]
impl ::std::default::Default for FLAG_STGMEDIUM {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Storage_StructuredStorage"
))]
impl ::std::cmp::PartialEq for FLAG_STGMEDIUM {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Storage_StructuredStorage"
))]
impl ::std::cmp::Eq for FLAG_STGMEDIUM {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Storage_StructuredStorage"
))]
unsafe impl ::windows::runtime::Abi for FLAG_STGMEDIUM {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
pub const FMFD_DEFAULT: u32 = 0u32;
pub const FMFD_ENABLEMIMESNIFFING: u32 = 2u32;
pub const FMFD_IGNOREMIMETEXTPLAIN: u32 = 4u32;
pub const FMFD_RESERVED_1: u32 = 64u32;
pub const FMFD_RESERVED_2: u32 = 128u32;
pub const FMFD_RESPECTTEXTPLAIN: u32 = 16u32;
pub const FMFD_RETURNUPDATEDIMGMIMES: u32 = 32u32;
pub const FMFD_SERVERMIME: u32 = 8u32;
pub const FMFD_URLASFILENAME: u32 = 1u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
pub struct FONTDESC {
    pub cbSizeofstruct: u32,
    pub lpstrName: super::super::Foundation::PWSTR,
    pub cySize: super::SystemServices::CY,
    pub sWeight: i16,
    pub sCharset: i16,
    pub fItalic: super::super::Foundation::BOOL,
    pub fUnderline: super::super::Foundation::BOOL,
    pub fStrikethrough: super::super::Foundation::BOOL,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl FONTDESC {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::default::Default for FONTDESC {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::PartialEq for FONTDESC {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::Eq for FONTDESC {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
unsafe impl ::windows::runtime::Abi for FONTDESC {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct FORMATETC {
    pub cfFormat: u16,
    pub ptd: *mut DVTARGETDEVICE,
    pub dwAspect: u32,
    pub lindex: i32,
    pub tymed: u32,
}
impl FORMATETC {}
impl ::std::default::Default for FORMATETC {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for FORMATETC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("FORMATETC")
            .field("cfFormat", &self.cfFormat)
            .field("ptd", &self.ptd)
            .field("dwAspect", &self.dwAspect)
            .field("lindex", &self.lindex)
            .field("tymed", &self.tymed)
            .finish()
    }
}
impl ::std::cmp::PartialEq for FORMATETC {
    fn eq(&self, other: &Self) -> bool {
        self.cfFormat == other.cfFormat
            && self.ptd == other.ptd
            && self.dwAspect == other.dwAspect
            && self.lindex == other.lindex
            && self.tymed == other.tymed
    }
}
impl ::std::cmp::Eq for FORMATETC {}
unsafe impl ::windows::runtime::Abi for FORMATETC {
    type Abi = Self;
    type DefaultType = Self;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
pub unsafe fn FaultInIEFeature<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>,
>(
    hwnd: Param0,
    pclassspec: *const super::SystemServices::uCLSSPEC,
    pquery: *mut QUERYCONTEXT,
    dwflags: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn FaultInIEFeature(
                hwnd: super::super::Foundation::HWND,
                pclassspec: *const super::SystemServices::uCLSSPEC,
                pquery: *mut QUERYCONTEXT,
                dwflags: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        FaultInIEFeature(
            hwnd.into_param().abi(),
            ::std::mem::transmute(pclassspec),
            ::std::mem::transmute(pquery),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn FindMediaType<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PSTR>,
>(
    rgsztypes: Param0,
) -> ::windows::runtime::Result<u16> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn FindMediaType(
                rgsztypes: super::super::Foundation::PSTR,
                rgcftypes: *mut u16,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <u16 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        FindMediaType(rgsztypes.into_param().abi(), &mut result__).from_abi::<u16>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn FindMediaTypeClass<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IBindCtx>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PSTR>,
>(
    pbc: Param0,
    sztype: Param1,
    pclsid: *mut ::windows::runtime::GUID,
    reserved: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn FindMediaTypeClass(
                pbc: ::windows::runtime::RawPtr,
                sztype: super::super::Foundation::PSTR,
                pclsid: *mut ::windows::runtime::GUID,
                reserved: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        FindMediaTypeClass(
            pbc.into_param().abi(),
            sztype.into_param().abi(),
            ::std::mem::transmute(pclsid),
            ::std::mem::transmute(reserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn FindMimeFromData<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IBindCtx>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param4: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pbc: Param0,
    pwzurl: Param1,
    pbuffer: *const ::std::ffi::c_void,
    cbsize: u32,
    pwzmimeproposed: Param4,
    dwmimeflags: u32,
    ppwzmimeout: *mut super::super::Foundation::PWSTR,
    dwreserved: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn FindMimeFromData(
                pbc: ::windows::runtime::RawPtr,
                pwzurl: super::super::Foundation::PWSTR,
                pbuffer: *const ::std::ffi::c_void,
                cbsize: u32,
                pwzmimeproposed: super::super::Foundation::PWSTR,
                dwmimeflags: u32,
                ppwzmimeout: *mut super::super::Foundation::PWSTR,
                dwreserved: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        FindMimeFromData(
            pbc.into_param().abi(),
            pwzurl.into_param().abi(),
            ::std::mem::transmute(pbuffer),
            ::std::mem::transmute(cbsize),
            pwzmimeproposed.into_param().abi(),
            ::std::mem::transmute(dwmimeflags),
            ::std::mem::transmute(ppwzmimeout),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const GC_WCH_SIBLING: i32 = 1i32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
pub struct GDI_OBJECT {
    pub ObjectType: u32,
    pub u: GDI_OBJECT_0,
}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
impl GDI_OBJECT {}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
impl ::std::default::Default for GDI_OBJECT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
impl ::std::cmp::PartialEq for GDI_OBJECT {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
impl ::std::cmp::Eq for GDI_OBJECT {}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
unsafe impl ::windows::runtime::Abi for GDI_OBJECT {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
pub union GDI_OBJECT_0 {
    pub hBitmap: *mut super::SystemServices::userHBITMAP,
    pub hPalette: *mut super::SystemServices::userHPALETTE,
    pub hGeneric: *mut super::SystemServices::userHGLOBAL,
}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
impl GDI_OBJECT_0 {}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
impl ::std::default::Default for GDI_OBJECT_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
impl ::std::cmp::PartialEq for GDI_OBJECT_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
impl ::std::cmp::Eq for GDI_OBJECT_0 {}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
unsafe impl ::windows::runtime::Abi for GDI_OBJECT_0 {
    type Abi = Self;
    type DefaultType = Self;
}
pub const GET_FEATURE_FROM_PROCESS: u32 = 2u32;
pub const GET_FEATURE_FROM_REGISTRY: u32 = 4u32;
pub const GET_FEATURE_FROM_THREAD: u32 = 1u32;
pub const GET_FEATURE_FROM_THREAD_INTERNET: u32 = 64u32;
pub const GET_FEATURE_FROM_THREAD_INTRANET: u32 = 16u32;
pub const GET_FEATURE_FROM_THREAD_LOCALMACHINE: u32 = 8u32;
pub const GET_FEATURE_FROM_THREAD_RESTRICTED: u32 = 128u32;
pub const GET_FEATURE_FROM_THREAD_TRUSTED: u32 = 32u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct GLOBALOPT_EH_VALUES(pub i32);
pub const COMGLB_EXCEPTION_HANDLE: GLOBALOPT_EH_VALUES = GLOBALOPT_EH_VALUES(0i32);
pub const COMGLB_EXCEPTION_DONOT_HANDLE_FATAL: GLOBALOPT_EH_VALUES = GLOBALOPT_EH_VALUES(1i32);
pub const COMGLB_EXCEPTION_DONOT_HANDLE: GLOBALOPT_EH_VALUES = GLOBALOPT_EH_VALUES(1i32);
pub const COMGLB_EXCEPTION_DONOT_HANDLE_ANY: GLOBALOPT_EH_VALUES = GLOBALOPT_EH_VALUES(2i32);
impl ::std::convert::From<i32> for GLOBALOPT_EH_VALUES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for GLOBALOPT_EH_VALUES {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct GLOBALOPT_PROPERTIES(pub i32);
pub const COMGLB_EXCEPTION_HANDLING: GLOBALOPT_PROPERTIES = GLOBALOPT_PROPERTIES(1i32);
pub const COMGLB_APPID: GLOBALOPT_PROPERTIES = GLOBALOPT_PROPERTIES(2i32);
pub const COMGLB_RPC_THREADPOOL_SETTING: GLOBALOPT_PROPERTIES = GLOBALOPT_PROPERTIES(3i32);
pub const COMGLB_RO_SETTINGS: GLOBALOPT_PROPERTIES = GLOBALOPT_PROPERTIES(4i32);
pub const COMGLB_UNMARSHALING_POLICY: GLOBALOPT_PROPERTIES = GLOBALOPT_PROPERTIES(5i32);
pub const COMGLB_PROPERTIES_RESERVED1: GLOBALOPT_PROPERTIES = GLOBALOPT_PROPERTIES(6i32);
pub const COMGLB_PROPERTIES_RESERVED2: GLOBALOPT_PROPERTIES = GLOBALOPT_PROPERTIES(7i32);
pub const COMGLB_PROPERTIES_RESERVED3: GLOBALOPT_PROPERTIES = GLOBALOPT_PROPERTIES(8i32);
impl ::std::convert::From<i32> for GLOBALOPT_PROPERTIES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for GLOBALOPT_PROPERTIES {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct GLOBALOPT_RO_FLAGS(pub i32);
pub const COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES: GLOBALOPT_RO_FLAGS = GLOBALOPT_RO_FLAGS(1i32);
pub const COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES: GLOBALOPT_RO_FLAGS =
    GLOBALOPT_RO_FLAGS(2i32);
pub const COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES: GLOBALOPT_RO_FLAGS =
    GLOBALOPT_RO_FLAGS(4i32);
pub const COMGLB_FAST_RUNDOWN: GLOBALOPT_RO_FLAGS = GLOBALOPT_RO_FLAGS(8i32);
pub const COMGLB_RESERVED1: GLOBALOPT_RO_FLAGS = GLOBALOPT_RO_FLAGS(16i32);
pub const COMGLB_RESERVED2: GLOBALOPT_RO_FLAGS = GLOBALOPT_RO_FLAGS(32i32);
pub const COMGLB_RESERVED3: GLOBALOPT_RO_FLAGS = GLOBALOPT_RO_FLAGS(64i32);
pub const COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES: GLOBALOPT_RO_FLAGS =
    GLOBALOPT_RO_FLAGS(128i32);
pub const COMGLB_RESERVED4: GLOBALOPT_RO_FLAGS = GLOBALOPT_RO_FLAGS(256i32);
pub const COMGLB_RESERVED5: GLOBALOPT_RO_FLAGS = GLOBALOPT_RO_FLAGS(512i32);
pub const COMGLB_RESERVED6: GLOBALOPT_RO_FLAGS = GLOBALOPT_RO_FLAGS(1024i32);
impl ::std::convert::From<i32> for GLOBALOPT_RO_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for GLOBALOPT_RO_FLAGS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct GLOBALOPT_RPCTP_VALUES(pub i32);
pub const COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL: GLOBALOPT_RPCTP_VALUES =
    GLOBALOPT_RPCTP_VALUES(0i32);
pub const COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL: GLOBALOPT_RPCTP_VALUES =
    GLOBALOPT_RPCTP_VALUES(1i32);
impl ::std::convert::From<i32> for GLOBALOPT_RPCTP_VALUES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for GLOBALOPT_RPCTP_VALUES {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct GLOBALOPT_UNMARSHALING_POLICY_VALUES(pub i32);
pub const COMGLB_UNMARSHALING_POLICY_NORMAL: GLOBALOPT_UNMARSHALING_POLICY_VALUES =
    GLOBALOPT_UNMARSHALING_POLICY_VALUES(0i32);
pub const COMGLB_UNMARSHALING_POLICY_STRONG: GLOBALOPT_UNMARSHALING_POLICY_VALUES =
    GLOBALOPT_UNMARSHALING_POLICY_VALUES(1i32);
pub const COMGLB_UNMARSHALING_POLICY_HYBRID: GLOBALOPT_UNMARSHALING_POLICY_VALUES =
    GLOBALOPT_UNMARSHALING_POLICY_VALUES(2i32);
impl ::std::convert::From<i32> for GLOBALOPT_UNMARSHALING_POLICY_VALUES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for GLOBALOPT_UNMARSHALING_POLICY_VALUES {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct GUIDKIND(pub i32);
pub const GUIDKIND_DEFAULT_SOURCE_DISP_IID: GUIDKIND = GUIDKIND(1i32);
impl ::std::convert::From<i32> for GUIDKIND {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for GUIDKIND {
    type Abi = Self;
    type DefaultType = Self;
}
pub const GUID_CHECKVALUEEXCLUSIVE: ::windows::runtime::GUID =
    ::windows::runtime::GUID::from_values(
        1716536076,
        48655,
        4122,
        [139, 187, 0, 170, 0, 48, 12, 171],
    );
pub const GUID_COLOR: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1716536065,
    48655,
    4122,
    [139, 187, 0, 170, 0, 48, 12, 171],
);
pub const GUID_FONTBOLD: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1716536079,
    48655,
    4122,
    [139, 187, 0, 170, 0, 48, 12, 171],
);
pub const GUID_FONTITALIC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1716536080,
    48655,
    4122,
    [139, 187, 0, 170, 0, 48, 12, 171],
);
pub const GUID_FONTNAME: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1716536077,
    48655,
    4122,
    [139, 187, 0, 170, 0, 48, 12, 171],
);
pub const GUID_FONTSIZE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1716536078,
    48655,
    4122,
    [139, 187, 0, 170, 0, 48, 12, 171],
);
pub const GUID_FONTSTRIKETHROUGH: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1716536082,
    48655,
    4122,
    [139, 187, 0, 170, 0, 48, 12, 171],
);
pub const GUID_FONTUNDERSCORE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1716536081,
    48655,
    4122,
    [139, 187, 0, 170, 0, 48, 12, 171],
);
pub const GUID_HANDLE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1716536083,
    48655,
    4122,
    [139, 187, 0, 170, 0, 48, 12, 171],
);
pub const GUID_HIMETRIC: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1716536064,
    48655,
    4122,
    [139, 187, 0, 170, 0, 48, 12, 171],
);
pub const GUID_OPTIONVALUEEXCLUSIVE: ::windows::runtime::GUID =
    ::windows::runtime::GUID::from_values(
        1716536075,
        48655,
        4122,
        [139, 187, 0, 170, 0, 48, 12, 171],
    );
pub const GUID_TRISTATE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1716536074,
    48655,
    4122,
    [139, 187, 0, 170, 0, 48, 12, 171],
);
pub const GUID_XPOS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1716536070,
    48655,
    4122,
    [139, 187, 0, 170, 0, 48, 12, 171],
);
pub const GUID_XPOSPIXEL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1716536066,
    48655,
    4122,
    [139, 187, 0, 170, 0, 48, 12, 171],
);
pub const GUID_XSIZE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1716536072,
    48655,
    4122,
    [139, 187, 0, 170, 0, 48, 12, 171],
);
pub const GUID_XSIZEPIXEL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1716536068,
    48655,
    4122,
    [139, 187, 0, 170, 0, 48, 12, 171],
);
pub const GUID_YPOS: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1716536071,
    48655,
    4122,
    [139, 187, 0, 170, 0, 48, 12, 171],
);
pub const GUID_YPOSPIXEL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1716536067,
    48655,
    4122,
    [139, 187, 0, 170, 0, 48, 12, 171],
);
pub const GUID_YSIZE: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1716536073,
    48655,
    4122,
    [139, 187, 0, 170, 0, 48, 12, 171],
);
pub const GUID_YSIZEPIXEL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1716536069,
    48655,
    4122,
    [139, 187, 0, 170, 0, 48, 12, 171],
);
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn GetClassFile<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    szfilename: Param0,
) -> ::windows::runtime::Result<::windows::runtime::GUID> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn GetClassFile(
                szfilename: super::super::Foundation::PWSTR,
                pclsid: *mut ::windows::runtime::GUID,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        GetClassFile(szfilename.into_param().abi(), &mut result__)
            .from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn GetClassFileOrMime<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IBindCtx>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param4: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pbc: Param0,
    szfilename: Param1,
    pbuffer: *const ::std::ffi::c_void,
    cbsize: u32,
    szmime: Param4,
    dwreserved: u32,
) -> ::windows::runtime::Result<::windows::runtime::GUID> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn GetClassFileOrMime(
                pbc: ::windows::runtime::RawPtr,
                szfilename: super::super::Foundation::PWSTR,
                pbuffer: *const ::std::ffi::c_void,
                cbsize: u32,
                szmime: super::super::Foundation::PWSTR,
                dwreserved: u32,
                pclsid: *mut ::windows::runtime::GUID,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        GetClassFileOrMime(
            pbc.into_param().abi(),
            szfilename.into_param().abi(),
            ::std::mem::transmute(pbuffer),
            ::std::mem::transmute(cbsize),
            szmime.into_param().abi(),
            ::std::mem::transmute(dwreserved),
            &mut result__,
        )
        .from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn GetClassURL<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    szurl: Param0,
) -> ::windows::runtime::Result<::windows::runtime::GUID> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn GetClassURL(
                szurl: super::super::Foundation::PWSTR,
                pclsid: *mut ::windows::runtime::GUID,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        GetClassURL(szurl.into_param().abi(), &mut result__)
            .from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
pub unsafe fn GetComponentIDFromCLSSPEC(
    pclassspec: *const super::SystemServices::uCLSSPEC,
) -> ::windows::runtime::Result<super::super::Foundation::PSTR> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn GetComponentIDFromCLSSPEC(
                pclassspec: *const super::SystemServices::uCLSSPEC,
                ppszcomponentid: *mut super::super::Foundation::PSTR,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <super::super::Foundation::PSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        GetComponentIDFromCLSSPEC(::std::mem::transmute(pclassspec), &mut result__)
            .from_abi::<super::super::Foundation::PSTR>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn GetRunningObjectTable(
    reserved: u32,
) -> ::windows::runtime::Result<IRunningObjectTable> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn GetRunningObjectTable(
                reserved: u32,
                pprot: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IRunningObjectTable as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        GetRunningObjectTable(::std::mem::transmute(reserved), &mut result__)
            .from_abi::<IRunningObjectTable>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell"))]
pub unsafe fn GetSoftwareUpdateInfo<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    szdistunit: Param0,
) -> ::windows::runtime::Result<super::super::UI::Shell::SOFTDISTINFO> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn GetSoftwareUpdateInfo(
                szdistunit: super::super::Foundation::PWSTR,
                psdi: *mut super::super::UI::Shell::SOFTDISTINFO,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <super::super::UI::Shell::SOFTDISTINFO as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        GetSoftwareUpdateInfo(szdistunit.into_param().abi(), &mut result__)
            .from_abi::<super::super::UI::Shell::SOFTDISTINFO>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HACCEL_UserFree(
    param0: *const u32,
    param1: *const super::super::UI::WindowsAndMessaging::HACCEL,
) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HACCEL_UserFree(
                param0: *const u32,
                param1: *const super::super::UI::WindowsAndMessaging::HACCEL,
            );
        }
        ::std::mem::transmute(HACCEL_UserFree(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HACCEL_UserFree64(
    param0: *const u32,
    param1: *const super::super::UI::WindowsAndMessaging::HACCEL,
) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HACCEL_UserFree64(
                param0: *const u32,
                param1: *const super::super::UI::WindowsAndMessaging::HACCEL,
            );
        }
        ::std::mem::transmute(HACCEL_UserFree64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HACCEL_UserMarshal(
    param0: *const u32,
    param1: *mut u8,
    param2: *const super::super::UI::WindowsAndMessaging::HACCEL,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HACCEL_UserMarshal(
                param0: *const u32,
                param1: *mut u8,
                param2: *const super::super::UI::WindowsAndMessaging::HACCEL,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HACCEL_UserMarshal(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HACCEL_UserMarshal64(
    param0: *const u32,
    param1: *mut u8,
    param2: *const super::super::UI::WindowsAndMessaging::HACCEL,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HACCEL_UserMarshal64(
                param0: *const u32,
                param1: *mut u8,
                param2: *const super::super::UI::WindowsAndMessaging::HACCEL,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HACCEL_UserMarshal64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HACCEL_UserSize(
    param0: *const u32,
    param1: u32,
    param2: *const super::super::UI::WindowsAndMessaging::HACCEL,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HACCEL_UserSize(
                param0: *const u32,
                param1: u32,
                param2: *const super::super::UI::WindowsAndMessaging::HACCEL,
            ) -> u32;
        }
        ::std::mem::transmute(HACCEL_UserSize(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HACCEL_UserSize64(
    param0: *const u32,
    param1: u32,
    param2: *const super::super::UI::WindowsAndMessaging::HACCEL,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HACCEL_UserSize64(
                param0: *const u32,
                param1: u32,
                param2: *const super::super::UI::WindowsAndMessaging::HACCEL,
            ) -> u32;
        }
        ::std::mem::transmute(HACCEL_UserSize64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HACCEL_UserUnmarshal(
    param0: *const u32,
    param1: *const u8,
    param2: *mut super::super::UI::WindowsAndMessaging::HACCEL,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HACCEL_UserUnmarshal(
                param0: *const u32,
                param1: *const u8,
                param2: *mut super::super::UI::WindowsAndMessaging::HACCEL,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HACCEL_UserUnmarshal(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HACCEL_UserUnmarshal64(
    param0: *const u32,
    param1: *const u8,
    param2: *mut super::super::UI::WindowsAndMessaging::HACCEL,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HACCEL_UserUnmarshal64(
                param0: *const u32,
                param1: *const u8,
                param2: *mut super::super::UI::WindowsAndMessaging::HACCEL,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HACCEL_UserUnmarshal64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HBITMAP_UserFree(
    param0: *const u32,
    param1: *const super::super::Graphics::Gdi::HBITMAP,
) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HBITMAP_UserFree(
                param0: *const u32,
                param1: *const super::super::Graphics::Gdi::HBITMAP,
            );
        }
        ::std::mem::transmute(HBITMAP_UserFree(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HBITMAP_UserFree64(
    param0: *const u32,
    param1: *const super::super::Graphics::Gdi::HBITMAP,
) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HBITMAP_UserFree64(
                param0: *const u32,
                param1: *const super::super::Graphics::Gdi::HBITMAP,
            );
        }
        ::std::mem::transmute(HBITMAP_UserFree64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HBITMAP_UserMarshal(
    param0: *const u32,
    param1: *mut u8,
    param2: *const super::super::Graphics::Gdi::HBITMAP,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HBITMAP_UserMarshal(
                param0: *const u32,
                param1: *mut u8,
                param2: *const super::super::Graphics::Gdi::HBITMAP,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HBITMAP_UserMarshal(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HBITMAP_UserMarshal64(
    param0: *const u32,
    param1: *mut u8,
    param2: *const super::super::Graphics::Gdi::HBITMAP,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HBITMAP_UserMarshal64(
                param0: *const u32,
                param1: *mut u8,
                param2: *const super::super::Graphics::Gdi::HBITMAP,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HBITMAP_UserMarshal64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HBITMAP_UserSize(
    param0: *const u32,
    param1: u32,
    param2: *const super::super::Graphics::Gdi::HBITMAP,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HBITMAP_UserSize(
                param0: *const u32,
                param1: u32,
                param2: *const super::super::Graphics::Gdi::HBITMAP,
            ) -> u32;
        }
        ::std::mem::transmute(HBITMAP_UserSize(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HBITMAP_UserSize64(
    param0: *const u32,
    param1: u32,
    param2: *const super::super::Graphics::Gdi::HBITMAP,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HBITMAP_UserSize64(
                param0: *const u32,
                param1: u32,
                param2: *const super::super::Graphics::Gdi::HBITMAP,
            ) -> u32;
        }
        ::std::mem::transmute(HBITMAP_UserSize64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HBITMAP_UserUnmarshal(
    param0: *const u32,
    param1: *const u8,
    param2: *mut super::super::Graphics::Gdi::HBITMAP,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HBITMAP_UserUnmarshal(
                param0: *const u32,
                param1: *const u8,
                param2: *mut super::super::Graphics::Gdi::HBITMAP,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HBITMAP_UserUnmarshal(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HBITMAP_UserUnmarshal64(
    param0: *const u32,
    param1: *const u8,
    param2: *mut super::super::Graphics::Gdi::HBITMAP,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HBITMAP_UserUnmarshal64(
                param0: *const u32,
                param1: *const u8,
                param2: *mut super::super::Graphics::Gdi::HBITMAP,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HBITMAP_UserUnmarshal64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HDC_UserFree(param0: *const u32, param1: *const super::super::Graphics::Gdi::HDC) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HDC_UserFree(param0: *const u32, param1: *const super::super::Graphics::Gdi::HDC);
        }
        ::std::mem::transmute(HDC_UserFree(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HDC_UserFree64(param0: *const u32, param1: *const super::super::Graphics::Gdi::HDC) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HDC_UserFree64(param0: *const u32, param1: *const super::super::Graphics::Gdi::HDC);
        }
        ::std::mem::transmute(HDC_UserFree64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HDC_UserMarshal(
    param0: *const u32,
    param1: *mut u8,
    param2: *const super::super::Graphics::Gdi::HDC,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HDC_UserMarshal(
                param0: *const u32,
                param1: *mut u8,
                param2: *const super::super::Graphics::Gdi::HDC,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HDC_UserMarshal(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HDC_UserMarshal64(
    param0: *const u32,
    param1: *mut u8,
    param2: *const super::super::Graphics::Gdi::HDC,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HDC_UserMarshal64(
                param0: *const u32,
                param1: *mut u8,
                param2: *const super::super::Graphics::Gdi::HDC,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HDC_UserMarshal64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HDC_UserSize(
    param0: *const u32,
    param1: u32,
    param2: *const super::super::Graphics::Gdi::HDC,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HDC_UserSize(
                param0: *const u32,
                param1: u32,
                param2: *const super::super::Graphics::Gdi::HDC,
            ) -> u32;
        }
        ::std::mem::transmute(HDC_UserSize(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HDC_UserSize64(
    param0: *const u32,
    param1: u32,
    param2: *const super::super::Graphics::Gdi::HDC,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HDC_UserSize64(
                param0: *const u32,
                param1: u32,
                param2: *const super::super::Graphics::Gdi::HDC,
            ) -> u32;
        }
        ::std::mem::transmute(HDC_UserSize64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HDC_UserUnmarshal(
    param0: *const u32,
    param1: *const u8,
    param2: *mut super::super::Graphics::Gdi::HDC,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HDC_UserUnmarshal(
                param0: *const u32,
                param1: *const u8,
                param2: *mut super::super::Graphics::Gdi::HDC,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HDC_UserUnmarshal(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HDC_UserUnmarshal64(
    param0: *const u32,
    param1: *const u8,
    param2: *mut super::super::Graphics::Gdi::HDC,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HDC_UserUnmarshal64(
                param0: *const u32,
                param1: *const u8,
                param2: *mut super::super::Graphics::Gdi::HDC,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HDC_UserUnmarshal64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn HGLOBAL_UserFree(param0: *const u32, param1: *const isize) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HGLOBAL_UserFree(param0: *const u32, param1: *const isize);
        }
        ::std::mem::transmute(HGLOBAL_UserFree(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn HGLOBAL_UserFree64(param0: *const u32, param1: *const isize) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HGLOBAL_UserFree64(param0: *const u32, param1: *const isize);
        }
        ::std::mem::transmute(HGLOBAL_UserFree64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn HGLOBAL_UserMarshal(
    param0: *const u32,
    param1: *mut u8,
    param2: *const isize,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HGLOBAL_UserMarshal(
                param0: *const u32,
                param1: *mut u8,
                param2: *const isize,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HGLOBAL_UserMarshal(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn HGLOBAL_UserMarshal64(
    param0: *const u32,
    param1: *mut u8,
    param2: *const isize,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HGLOBAL_UserMarshal64(
                param0: *const u32,
                param1: *mut u8,
                param2: *const isize,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HGLOBAL_UserMarshal64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn HGLOBAL_UserSize(param0: *const u32, param1: u32, param2: *const isize) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HGLOBAL_UserSize(param0: *const u32, param1: u32, param2: *const isize) -> u32;
        }
        ::std::mem::transmute(HGLOBAL_UserSize(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn HGLOBAL_UserSize64(param0: *const u32, param1: u32, param2: *const isize) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HGLOBAL_UserSize64(param0: *const u32, param1: u32, param2: *const isize) -> u32;
        }
        ::std::mem::transmute(HGLOBAL_UserSize64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn HGLOBAL_UserUnmarshal(
    param0: *const u32,
    param1: *const u8,
    param2: *mut isize,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HGLOBAL_UserUnmarshal(
                param0: *const u32,
                param1: *const u8,
                param2: *mut isize,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HGLOBAL_UserUnmarshal(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn HGLOBAL_UserUnmarshal64(
    param0: *const u32,
    param1: *const u8,
    param2: *mut isize,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HGLOBAL_UserUnmarshal64(
                param0: *const u32,
                param1: *const u8,
                param2: *mut isize,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HGLOBAL_UserUnmarshal64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HICON_UserFree(
    param0: *const u32,
    param1: *const super::super::UI::WindowsAndMessaging::HICON,
) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HICON_UserFree(
                param0: *const u32,
                param1: *const super::super::UI::WindowsAndMessaging::HICON,
            );
        }
        ::std::mem::transmute(HICON_UserFree(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HICON_UserFree64(
    param0: *const u32,
    param1: *const super::super::UI::WindowsAndMessaging::HICON,
) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HICON_UserFree64(
                param0: *const u32,
                param1: *const super::super::UI::WindowsAndMessaging::HICON,
            );
        }
        ::std::mem::transmute(HICON_UserFree64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HICON_UserMarshal(
    param0: *const u32,
    param1: *mut u8,
    param2: *const super::super::UI::WindowsAndMessaging::HICON,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HICON_UserMarshal(
                param0: *const u32,
                param1: *mut u8,
                param2: *const super::super::UI::WindowsAndMessaging::HICON,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HICON_UserMarshal(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HICON_UserMarshal64(
    param0: *const u32,
    param1: *mut u8,
    param2: *const super::super::UI::WindowsAndMessaging::HICON,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HICON_UserMarshal64(
                param0: *const u32,
                param1: *mut u8,
                param2: *const super::super::UI::WindowsAndMessaging::HICON,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HICON_UserMarshal64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HICON_UserSize(
    param0: *const u32,
    param1: u32,
    param2: *const super::super::UI::WindowsAndMessaging::HICON,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HICON_UserSize(
                param0: *const u32,
                param1: u32,
                param2: *const super::super::UI::WindowsAndMessaging::HICON,
            ) -> u32;
        }
        ::std::mem::transmute(HICON_UserSize(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HICON_UserSize64(
    param0: *const u32,
    param1: u32,
    param2: *const super::super::UI::WindowsAndMessaging::HICON,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HICON_UserSize64(
                param0: *const u32,
                param1: u32,
                param2: *const super::super::UI::WindowsAndMessaging::HICON,
            ) -> u32;
        }
        ::std::mem::transmute(HICON_UserSize64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HICON_UserUnmarshal(
    param0: *const u32,
    param1: *const u8,
    param2: *mut super::super::UI::WindowsAndMessaging::HICON,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HICON_UserUnmarshal(
                param0: *const u32,
                param1: *const u8,
                param2: *mut super::super::UI::WindowsAndMessaging::HICON,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HICON_UserUnmarshal(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HICON_UserUnmarshal64(
    param0: *const u32,
    param1: *const u8,
    param2: *mut super::super::UI::WindowsAndMessaging::HICON,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HICON_UserUnmarshal64(
                param0: *const u32,
                param1: *const u8,
                param2: *mut super::super::UI::WindowsAndMessaging::HICON,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HICON_UserUnmarshal64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct HITRESULT(pub i32);
pub const HITRESULT_OUTSIDE: HITRESULT = HITRESULT(0i32);
pub const HITRESULT_TRANSPARENT: HITRESULT = HITRESULT(1i32);
pub const HITRESULT_CLOSE: HITRESULT = HITRESULT(2i32);
pub const HITRESULT_HIT: HITRESULT = HITRESULT(3i32);
impl ::std::convert::From<i32> for HITRESULT {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for HITRESULT {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct HIT_LOGGING_INFO {
    pub dwStructSize: u32,
    pub lpszLoggedUrlName: super::super::Foundation::PSTR,
    pub StartTime: super::super::Foundation::SYSTEMTIME,
    pub EndTime: super::super::Foundation::SYSTEMTIME,
    pub lpszExtendedInfo: super::super::Foundation::PSTR,
}
#[cfg(feature = "Win32_Foundation")]
impl HIT_LOGGING_INFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for HIT_LOGGING_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for HIT_LOGGING_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("HIT_LOGGING_INFO")
            .field("dwStructSize", &self.dwStructSize)
            .field("lpszLoggedUrlName", &self.lpszLoggedUrlName)
            .field("StartTime", &self.StartTime)
            .field("EndTime", &self.EndTime)
            .field("lpszExtendedInfo", &self.lpszExtendedInfo)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for HIT_LOGGING_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.dwStructSize == other.dwStructSize
            && self.lpszLoggedUrlName == other.lpszLoggedUrlName
            && self.StartTime == other.StartTime
            && self.EndTime == other.EndTime
            && self.lpszExtendedInfo == other.lpszExtendedInfo
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for HIT_LOGGING_INFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for HIT_LOGGING_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HMENU_UserFree(
    param0: *const u32,
    param1: *const super::super::UI::WindowsAndMessaging::HMENU,
) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HMENU_UserFree(
                param0: *const u32,
                param1: *const super::super::UI::WindowsAndMessaging::HMENU,
            );
        }
        ::std::mem::transmute(HMENU_UserFree(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HMENU_UserFree64(
    param0: *const u32,
    param1: *const super::super::UI::WindowsAndMessaging::HMENU,
) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HMENU_UserFree64(
                param0: *const u32,
                param1: *const super::super::UI::WindowsAndMessaging::HMENU,
            );
        }
        ::std::mem::transmute(HMENU_UserFree64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HMENU_UserMarshal(
    param0: *const u32,
    param1: *mut u8,
    param2: *const super::super::UI::WindowsAndMessaging::HMENU,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HMENU_UserMarshal(
                param0: *const u32,
                param1: *mut u8,
                param2: *const super::super::UI::WindowsAndMessaging::HMENU,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HMENU_UserMarshal(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HMENU_UserMarshal64(
    param0: *const u32,
    param1: *mut u8,
    param2: *const super::super::UI::WindowsAndMessaging::HMENU,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HMENU_UserMarshal64(
                param0: *const u32,
                param1: *mut u8,
                param2: *const super::super::UI::WindowsAndMessaging::HMENU,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HMENU_UserMarshal64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HMENU_UserSize(
    param0: *const u32,
    param1: u32,
    param2: *const super::super::UI::WindowsAndMessaging::HMENU,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HMENU_UserSize(
                param0: *const u32,
                param1: u32,
                param2: *const super::super::UI::WindowsAndMessaging::HMENU,
            ) -> u32;
        }
        ::std::mem::transmute(HMENU_UserSize(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HMENU_UserSize64(
    param0: *const u32,
    param1: u32,
    param2: *const super::super::UI::WindowsAndMessaging::HMENU,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HMENU_UserSize64(
                param0: *const u32,
                param1: u32,
                param2: *const super::super::UI::WindowsAndMessaging::HMENU,
            ) -> u32;
        }
        ::std::mem::transmute(HMENU_UserSize64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HMENU_UserUnmarshal(
    param0: *const u32,
    param1: *const u8,
    param2: *mut super::super::UI::WindowsAndMessaging::HMENU,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HMENU_UserUnmarshal(
                param0: *const u32,
                param1: *const u8,
                param2: *mut super::super::UI::WindowsAndMessaging::HMENU,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HMENU_UserUnmarshal(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn HMENU_UserUnmarshal64(
    param0: *const u32,
    param1: *const u8,
    param2: *mut super::super::UI::WindowsAndMessaging::HMENU,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HMENU_UserUnmarshal64(
                param0: *const u32,
                param1: *const u8,
                param2: *mut super::super::UI::WindowsAndMessaging::HMENU,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HMENU_UserUnmarshal64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HPALETTE_UserFree(
    param0: *const u32,
    param1: *const super::super::Graphics::Gdi::HPALETTE,
) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HPALETTE_UserFree(
                param0: *const u32,
                param1: *const super::super::Graphics::Gdi::HPALETTE,
            );
        }
        ::std::mem::transmute(HPALETTE_UserFree(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HPALETTE_UserFree64(
    param0: *const u32,
    param1: *const super::super::Graphics::Gdi::HPALETTE,
) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HPALETTE_UserFree64(
                param0: *const u32,
                param1: *const super::super::Graphics::Gdi::HPALETTE,
            );
        }
        ::std::mem::transmute(HPALETTE_UserFree64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HPALETTE_UserMarshal(
    param0: *const u32,
    param1: *mut u8,
    param2: *const super::super::Graphics::Gdi::HPALETTE,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HPALETTE_UserMarshal(
                param0: *const u32,
                param1: *mut u8,
                param2: *const super::super::Graphics::Gdi::HPALETTE,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HPALETTE_UserMarshal(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HPALETTE_UserMarshal64(
    param0: *const u32,
    param1: *mut u8,
    param2: *const super::super::Graphics::Gdi::HPALETTE,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HPALETTE_UserMarshal64(
                param0: *const u32,
                param1: *mut u8,
                param2: *const super::super::Graphics::Gdi::HPALETTE,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HPALETTE_UserMarshal64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HPALETTE_UserSize(
    param0: *const u32,
    param1: u32,
    param2: *const super::super::Graphics::Gdi::HPALETTE,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HPALETTE_UserSize(
                param0: *const u32,
                param1: u32,
                param2: *const super::super::Graphics::Gdi::HPALETTE,
            ) -> u32;
        }
        ::std::mem::transmute(HPALETTE_UserSize(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HPALETTE_UserSize64(
    param0: *const u32,
    param1: u32,
    param2: *const super::super::Graphics::Gdi::HPALETTE,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HPALETTE_UserSize64(
                param0: *const u32,
                param1: u32,
                param2: *const super::super::Graphics::Gdi::HPALETTE,
            ) -> u32;
        }
        ::std::mem::transmute(HPALETTE_UserSize64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HPALETTE_UserUnmarshal(
    param0: *const u32,
    param1: *const u8,
    param2: *mut super::super::Graphics::Gdi::HPALETTE,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HPALETTE_UserUnmarshal(
                param0: *const u32,
                param1: *const u8,
                param2: *mut super::super::Graphics::Gdi::HPALETTE,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HPALETTE_UserUnmarshal(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HPALETTE_UserUnmarshal64(
    param0: *const u32,
    param1: *const u8,
    param2: *mut super::super::Graphics::Gdi::HPALETTE,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HPALETTE_UserUnmarshal64(
                param0: *const u32,
                param1: *const u8,
                param2: *mut super::super::Graphics::Gdi::HPALETTE,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HPALETTE_UserUnmarshal64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HRGN_UserFree(param0: *const u32, param1: *const super::super::Graphics::Gdi::HRGN) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HRGN_UserFree(param0: *const u32, param1: *const super::super::Graphics::Gdi::HRGN);
        }
        ::std::mem::transmute(HRGN_UserFree(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HRGN_UserFree64(
    param0: *const u32,
    param1: *const super::super::Graphics::Gdi::HRGN,
) {
    #[cfg(windows)]
    {
        #[link(name = "api-ms-win-core-marshal-l1-1-0")]
        extern "system" {
            fn HRGN_UserFree64(
                param0: *const u32,
                param1: *const super::super::Graphics::Gdi::HRGN,
            );
        }
        ::std::mem::transmute(HRGN_UserFree64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HRGN_UserMarshal(
    param0: *const u32,
    param1: *mut u8,
    param2: *const super::super::Graphics::Gdi::HRGN,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HRGN_UserMarshal(
                param0: *const u32,
                param1: *mut u8,
                param2: *const super::super::Graphics::Gdi::HRGN,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HRGN_UserMarshal(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HRGN_UserMarshal64(
    param0: *const u32,
    param1: *mut u8,
    param2: *const super::super::Graphics::Gdi::HRGN,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "api-ms-win-core-marshal-l1-1-0")]
        extern "system" {
            fn HRGN_UserMarshal64(
                param0: *const u32,
                param1: *mut u8,
                param2: *const super::super::Graphics::Gdi::HRGN,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HRGN_UserMarshal64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HRGN_UserSize(
    param0: *const u32,
    param1: u32,
    param2: *const super::super::Graphics::Gdi::HRGN,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HRGN_UserSize(
                param0: *const u32,
                param1: u32,
                param2: *const super::super::Graphics::Gdi::HRGN,
            ) -> u32;
        }
        ::std::mem::transmute(HRGN_UserSize(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HRGN_UserSize64(
    param0: *const u32,
    param1: u32,
    param2: *const super::super::Graphics::Gdi::HRGN,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "api-ms-win-core-marshal-l1-1-0")]
        extern "system" {
            fn HRGN_UserSize64(
                param0: *const u32,
                param1: u32,
                param2: *const super::super::Graphics::Gdi::HRGN,
            ) -> u32;
        }
        ::std::mem::transmute(HRGN_UserSize64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HRGN_UserUnmarshal(
    param0: *const u32,
    param1: *const u8,
    param2: *mut super::super::Graphics::Gdi::HRGN,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn HRGN_UserUnmarshal(
                param0: *const u32,
                param1: *const u8,
                param2: *mut super::super::Graphics::Gdi::HRGN,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HRGN_UserUnmarshal(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn HRGN_UserUnmarshal64(
    param0: *const u32,
    param1: *const u8,
    param2: *mut super::super::Graphics::Gdi::HRGN,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "api-ms-win-core-marshal-l1-1-0")]
        extern "system" {
            fn HRGN_UserUnmarshal64(
                param0: *const u32,
                param1: *const u8,
                param2: *mut super::super::Graphics::Gdi::HRGN,
            ) -> *mut u8;
        }
        ::std::mem::transmute(HRGN_UserUnmarshal64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct HYPER_SIZEDARR {
    pub clSize: u32,
    pub pData: *mut i64,
}
impl HYPER_SIZEDARR {}
impl ::std::default::Default for HYPER_SIZEDARR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for HYPER_SIZEDARR {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("HYPER_SIZEDARR")
            .field("clSize", &self.clSize)
            .field("pData", &self.pData)
            .finish()
    }
}
impl ::std::cmp::PartialEq for HYPER_SIZEDARR {
    fn eq(&self, other: &Self) -> bool {
        self.clSize == other.clSize && self.pData == other.pData
    }
}
impl ::std::cmp::Eq for HYPER_SIZEDARR {}
unsafe impl ::windows::runtime::Abi for HYPER_SIZEDARR {
    type Abi = Self;
    type DefaultType = Self;
}
pub unsafe fn HlinkGoBack<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    punk: Param0,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn HlinkGoBack(punk: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        HlinkGoBack(punk.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn HlinkGoForward<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    punk: Param0,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn HlinkGoForward(punk: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        HlinkGoForward(punk.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn HlinkNavigateMoniker<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param1: ::windows::runtime::IntoParam<'a, IMoniker>,
>(
    punk: Param0,
    pmktarget: Param1,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn HlinkNavigateMoniker(
                punk: ::windows::runtime::RawPtr,
                pmktarget: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        HlinkNavigateMoniker(punk.into_param().abi(), pmktarget.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn HlinkNavigateString<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    punk: Param0,
    sztarget: Param1,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn HlinkNavigateString(
                punk: ::windows::runtime::RawPtr,
                sztarget: super::super::Foundation::PWSTR,
            ) -> ::windows::runtime::HRESULT;
        }
        HlinkNavigateString(punk.into_param().abi(), sztarget.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn HlinkSimpleNavigateToMoniker<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IMoniker>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param3: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param4: ::windows::runtime::IntoParam<'a, IBindCtx>,
    Param5: ::windows::runtime::IntoParam<'a, IBindStatusCallback>,
>(
    pmktarget: Param0,
    szlocation: Param1,
    sztargetframename: Param2,
    punk: Param3,
    pbc: Param4,
    param5: Param5,
    grfhlnf: u32,
    dwreserved: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn HlinkSimpleNavigateToMoniker(
                pmktarget: ::windows::runtime::RawPtr,
                szlocation: super::super::Foundation::PWSTR,
                sztargetframename: super::super::Foundation::PWSTR,
                punk: ::windows::runtime::RawPtr,
                pbc: ::windows::runtime::RawPtr,
                param5: ::windows::runtime::RawPtr,
                grfhlnf: u32,
                dwreserved: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        HlinkSimpleNavigateToMoniker(
            pmktarget.into_param().abi(),
            szlocation.into_param().abi(),
            sztargetframename.into_param().abi(),
            punk.into_param().abi(),
            pbc.into_param().abi(),
            param5.into_param().abi(),
            ::std::mem::transmute(grfhlnf),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn HlinkSimpleNavigateToString<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param3: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param4: ::windows::runtime::IntoParam<'a, IBindCtx>,
    Param5: ::windows::runtime::IntoParam<'a, IBindStatusCallback>,
>(
    sztarget: Param0,
    szlocation: Param1,
    sztargetframename: Param2,
    punk: Param3,
    pbc: Param4,
    param5: Param5,
    grfhlnf: u32,
    dwreserved: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn HlinkSimpleNavigateToString(
                sztarget: super::super::Foundation::PWSTR,
                szlocation: super::super::Foundation::PWSTR,
                sztargetframename: super::super::Foundation::PWSTR,
                punk: ::windows::runtime::RawPtr,
                pbc: ::windows::runtime::RawPtr,
                param5: ::windows::runtime::RawPtr,
                grfhlnf: u32,
                dwreserved: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        HlinkSimpleNavigateToString(
            sztarget.into_param().abi(),
            szlocation.into_param().abi(),
            sztargetframename.into_param().abi(),
            punk.into_param().abi(),
            pbc.into_param().abi(),
            param5.into_param().abi(),
            ::std::mem::transmute(grfhlnf),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IAccessibilityDockingService(::windows::runtime::IUnknown);
impl IAccessibilityDockingService {
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn GetAvailableSize<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HMONITOR>,
    >(
        &self,
        hmonitor: Param0,
        pcxfixed: *mut u32,
        pcymax: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            hmonitor.into_param().abi(),
            ::std::mem::transmute(pcxfixed),
            ::std::mem::transmute(pcymax),
        )
        .ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub unsafe fn DockWindow<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HMONITOR>,
        Param3: ::windows::runtime::IntoParam<'a, IAccessibilityDockingServiceCallback>,
    >(
        &self,
        hwnd: Param0,
        hmonitor: Param1,
        cyrequested: u32,
        pcallback: Param3,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            hwnd.into_param().abi(),
            hmonitor.into_param().abi(),
            ::std::mem::transmute(cyrequested),
            pcallback.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn UndockWindow<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>,
    >(
        &self,
        hwnd: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            hwnd.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IAccessibilityDockingService {
    type Vtable = IAccessibilityDockingService_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2286541858,
        52959,
        19605,
        [153, 141, 5, 20, 25, 221, 63, 118],
    );
}
impl ::std::convert::From<IAccessibilityDockingService> for ::windows::runtime::IUnknown {
    fn from(value: IAccessibilityDockingService) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IAccessibilityDockingService> for ::windows::runtime::IUnknown {
    fn from(value: &IAccessibilityDockingService) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IAccessibilityDockingService
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IAccessibilityDockingService
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAccessibilityDockingService_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hmonitor: super::super::Graphics::Gdi::HMONITOR,
        pcxfixed: *mut u32,
        pcymax: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hwnd: super::super::Foundation::HWND,
        hmonitor: super::super::Graphics::Gdi::HMONITOR,
        cyrequested: u32,
        pcallback: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi")))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hwnd: super::super::Foundation::HWND,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IAccessibilityDockingServiceCallback(::windows::runtime::IUnknown);
impl IAccessibilityDockingServiceCallback {
    #[cfg(feature = "Win32_UI_Shell")]
    pub unsafe fn Undocked(
        &self,
        undockreason: super::super::UI::Shell::UNDOCK_REASON,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(undockreason),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IAccessibilityDockingServiceCallback {
    type Vtable = IAccessibilityDockingServiceCallback_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        360133629,
        42386,
        17125,
        [181, 148, 36, 132, 104, 197, 168, 27],
    );
}
impl ::std::convert::From<IAccessibilityDockingServiceCallback> for ::windows::runtime::IUnknown {
    fn from(value: IAccessibilityDockingServiceCallback) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IAccessibilityDockingServiceCallback> for ::windows::runtime::IUnknown {
    fn from(value: &IAccessibilityDockingServiceCallback) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IAccessibilityDockingServiceCallback
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IAccessibilityDockingServiceCallback
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAccessibilityDockingServiceCallback_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_UI_Shell")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        undockreason: super::super::UI::Shell::UNDOCK_REASON,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IActivationFilter(::windows::runtime::IUnknown);
impl IActivationFilter {
    pub unsafe fn HandleActivation(
        &self,
        dwactivationtype: u32,
        rclsid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwactivationtype),
            ::std::mem::transmute(rclsid),
            &mut result__,
        )
        .from_abi::<::windows::runtime::GUID>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IActivationFilter {
    type Vtable = IActivationFilter_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(23, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IActivationFilter> for ::windows::runtime::IUnknown {
    fn from(value: IActivationFilter) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IActivationFilter> for ::windows::runtime::IUnknown {
    fn from(value: &IActivationFilter) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IActivationFilter {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IActivationFilter {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IActivationFilter_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwactivationtype: u32,
        rclsid: *const ::windows::runtime::GUID,
        preplacementclsid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IAddrExclusionControl(::windows::runtime::IUnknown);
impl IAddrExclusionControl {
    pub unsafe fn GetCurrentAddrExclusionList(
        &self,
        riid: *const ::windows::runtime::GUID,
        ppenumerator: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(ppenumerator),
        )
        .ok()
    }
    pub unsafe fn UpdateAddrExclusionList<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    >(
        &self,
        penumerator: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            penumerator.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IAddrExclusionControl {
    type Vtable = IAddrExclusionControl_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(328, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IAddrExclusionControl> for ::windows::runtime::IUnknown {
    fn from(value: IAddrExclusionControl) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IAddrExclusionControl> for ::windows::runtime::IUnknown {
    fn from(value: &IAddrExclusionControl) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IAddrExclusionControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IAddrExclusionControl
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAddrExclusionControl_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        ppenumerator: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        penumerator: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IAddrTrackingControl(::windows::runtime::IUnknown);
impl IAddrTrackingControl {
    pub unsafe fn EnableCOMDynamicAddrTracking(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn DisableCOMDynamicAddrTracking(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IAddrTrackingControl {
    type Vtable = IAddrTrackingControl_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(327, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IAddrTrackingControl> for ::windows::runtime::IUnknown {
    fn from(value: IAddrTrackingControl) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IAddrTrackingControl> for ::windows::runtime::IUnknown {
    fn from(value: &IAddrTrackingControl) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IAddrTrackingControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IAddrTrackingControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAddrTrackingControl_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IAdviseSink(::windows::runtime::IUnknown);
impl IAdviseSink {
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn OnDataChange(&self, pformatetc: *const FORMATETC, pstgmed: *const STGMEDIUM) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pformatetc),
            ::std::mem::transmute(pstgmed),
        ))
    }
    pub unsafe fn OnViewChange(&self, dwaspect: u32, lindex: i32) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwaspect),
            ::std::mem::transmute(lindex),
        ))
    }
    pub unsafe fn OnRename<'a, Param0: ::windows::runtime::IntoParam<'a, IMoniker>>(
        &self,
        pmk: Param0,
    ) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            pmk.into_param().abi(),
        ))
    }
    pub unsafe fn OnSave(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn OnClose(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
        ))
    }
}
unsafe impl ::windows::runtime::Interface for IAdviseSink {
    type Vtable = IAdviseSink_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(271, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IAdviseSink> for ::windows::runtime::IUnknown {
    fn from(value: IAdviseSink) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IAdviseSink> for ::windows::runtime::IUnknown {
    fn from(value: &IAdviseSink) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IAdviseSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IAdviseSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAdviseSink_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pformatetc: *const FORMATETC,
        pstgmed: *const ::std::mem::ManuallyDrop<STGMEDIUM>,
    ),
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwaspect: u32, lindex: i32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmk: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IAdviseSink2(::windows::runtime::IUnknown);
impl IAdviseSink2 {
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn OnDataChange(&self, pformatetc: *const FORMATETC, pstgmed: *const STGMEDIUM) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pformatetc),
            ::std::mem::transmute(pstgmed),
        ))
    }
    pub unsafe fn OnViewChange(&self, dwaspect: u32, lindex: i32) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwaspect),
            ::std::mem::transmute(lindex),
        ))
    }
    pub unsafe fn OnRename<'a, Param0: ::windows::runtime::IntoParam<'a, IMoniker>>(
        &self,
        pmk: Param0,
    ) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            pmk.into_param().abi(),
        ))
    }
    pub unsafe fn OnSave(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn OnClose(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn OnLinkSrcChange<'a, Param0: ::windows::runtime::IntoParam<'a, IMoniker>>(
        &self,
        pmk: Param0,
    ) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            pmk.into_param().abi(),
        ))
    }
}
unsafe impl ::windows::runtime::Interface for IAdviseSink2 {
    type Vtable = IAdviseSink2_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(293, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IAdviseSink2> for ::windows::runtime::IUnknown {
    fn from(value: IAdviseSink2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IAdviseSink2> for ::windows::runtime::IUnknown {
    fn from(value: &IAdviseSink2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IAdviseSink2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IAdviseSink2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IAdviseSink2> for IAdviseSink {
    fn from(value: IAdviseSink2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IAdviseSink2> for IAdviseSink {
    fn from(value: &IAdviseSink2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IAdviseSink> for IAdviseSink2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IAdviseSink> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IAdviseSink>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IAdviseSink> for &IAdviseSink2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IAdviseSink> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IAdviseSink>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAdviseSink2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pformatetc: *const FORMATETC,
        pstgmed: *const ::std::mem::ManuallyDrop<STGMEDIUM>,
    ),
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwaspect: u32, lindex: i32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmk: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmk: ::windows::runtime::RawPtr),
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IAdviseSinkEx(::windows::runtime::IUnknown);
impl IAdviseSinkEx {
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn OnDataChange(&self, pformatetc: *const FORMATETC, pstgmed: *const STGMEDIUM) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pformatetc),
            ::std::mem::transmute(pstgmed),
        ))
    }
    pub unsafe fn OnViewChange(&self, dwaspect: u32, lindex: i32) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwaspect),
            ::std::mem::transmute(lindex),
        ))
    }
    pub unsafe fn OnRename<'a, Param0: ::windows::runtime::IntoParam<'a, IMoniker>>(
        &self,
        pmk: Param0,
    ) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            pmk.into_param().abi(),
        ))
    }
    pub unsafe fn OnSave(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn OnClose(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn OnViewStatusChange(&self, dwviewstatus: u32) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwviewstatus),
        ))
    }
}
unsafe impl ::windows::runtime::Interface for IAdviseSinkEx {
    type Vtable = IAdviseSinkEx_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        988955280,
        3222,
        4558,
        [160, 207, 0, 170, 0, 96, 10, 184],
    );
}
impl ::std::convert::From<IAdviseSinkEx> for ::windows::runtime::IUnknown {
    fn from(value: IAdviseSinkEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IAdviseSinkEx> for ::windows::runtime::IUnknown {
    fn from(value: &IAdviseSinkEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IAdviseSinkEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IAdviseSinkEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IAdviseSinkEx> for IAdviseSink {
    fn from(value: IAdviseSinkEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IAdviseSinkEx> for IAdviseSink {
    fn from(value: &IAdviseSinkEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IAdviseSink> for IAdviseSinkEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IAdviseSink> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IAdviseSink>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IAdviseSink> for &IAdviseSinkEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IAdviseSink> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IAdviseSink>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAdviseSinkEx_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pformatetc: *const FORMATETC,
        pstgmed: *const ::std::mem::ManuallyDrop<STGMEDIUM>,
    ),
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwaspect: u32, lindex: i32),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmk: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwviewstatus: u32),
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IAgileObject(::windows::runtime::IUnknown);
impl IAgileObject {}
unsafe impl ::windows::runtime::Interface for IAgileObject {
    type Vtable = IAgileObject_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2498374548,
        59852,
        18912,
        [192, 255, 238, 100, 202, 143, 91, 144],
    );
}
impl ::std::convert::From<IAgileObject> for ::windows::runtime::IUnknown {
    fn from(value: IAgileObject) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IAgileObject> for ::windows::runtime::IUnknown {
    fn from(value: &IAgileObject) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IAgileObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IAgileObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAgileObject_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IAsyncManager(::windows::runtime::IUnknown);
impl IAsyncManager {
    pub unsafe fn CompleteCall(
        &self,
        result: ::windows::runtime::HRESULT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(result),
        )
        .ok()
    }
    pub unsafe fn GetCallContext(
        &self,
        riid: *const ::windows::runtime::GUID,
        pinterface: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(pinterface),
        )
        .ok()
    }
    pub unsafe fn GetState(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IAsyncManager {
    type Vtable = IAsyncManager_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(42, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IAsyncManager> for ::windows::runtime::IUnknown {
    fn from(value: IAsyncManager) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IAsyncManager> for ::windows::runtime::IUnknown {
    fn from(value: &IAsyncManager) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IAsyncManager {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IAsyncManager {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAsyncManager_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        result: ::windows::runtime::HRESULT,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        pinterface: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pulstateflags: *mut u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IAsyncRpcChannelBuffer(::windows::runtime::IUnknown);
impl IAsyncRpcChannelBuffer {
    pub unsafe fn GetBuffer(
        &self,
        pmessage: *mut RPCOLEMESSAGE,
        riid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmessage),
            ::std::mem::transmute(riid),
        )
        .ok()
    }
    pub unsafe fn SendReceive(
        &self,
        pmessage: *mut RPCOLEMESSAGE,
        pstatus: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmessage),
            ::std::mem::transmute(pstatus),
        )
        .ok()
    }
    pub unsafe fn FreeBuffer(
        &self,
        pmessage: *mut RPCOLEMESSAGE,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmessage),
        )
        .ok()
    }
    pub unsafe fn GetDestCtx(
        &self,
        pdwdestcontext: *mut u32,
        ppvdestcontext: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pdwdestcontext),
            ::std::mem::transmute(ppvdestcontext),
        )
        .ok()
    }
    pub unsafe fn IsConnected(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn GetProtocolVersion(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn Send<'a, Param1: ::windows::runtime::IntoParam<'a, ISynchronize>>(
        &self,
        pmsg: *mut RPCOLEMESSAGE,
        psync: Param1,
        pulstatus: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmsg),
            psync.into_param().abi(),
            ::std::mem::transmute(pulstatus),
        )
        .ok()
    }
    pub unsafe fn Receive(
        &self,
        pmsg: *mut RPCOLEMESSAGE,
        pulstatus: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmsg),
            ::std::mem::transmute(pulstatus),
        )
        .ok()
    }
    pub unsafe fn GetDestCtxEx(
        &self,
        pmsg: *const RPCOLEMESSAGE,
        pdwdestcontext: *mut u32,
        ppvdestcontext: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmsg),
            ::std::mem::transmute(pdwdestcontext),
            ::std::mem::transmute(ppvdestcontext),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IAsyncRpcChannelBuffer {
    type Vtable = IAsyncRpcChannelBuffer_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2768412598,
        15412,
        4561,
        [156, 153, 0, 192, 79, 185, 152, 170],
    );
}
impl ::std::convert::From<IAsyncRpcChannelBuffer> for ::windows::runtime::IUnknown {
    fn from(value: IAsyncRpcChannelBuffer) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IAsyncRpcChannelBuffer> for ::windows::runtime::IUnknown {
    fn from(value: &IAsyncRpcChannelBuffer) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IAsyncRpcChannelBuffer
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IAsyncRpcChannelBuffer
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IAsyncRpcChannelBuffer> for IRpcChannelBuffer2 {
    fn from(value: IAsyncRpcChannelBuffer) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IAsyncRpcChannelBuffer> for IRpcChannelBuffer2 {
    fn from(value: &IAsyncRpcChannelBuffer) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IRpcChannelBuffer2> for IAsyncRpcChannelBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, IRpcChannelBuffer2> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IRpcChannelBuffer2>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IRpcChannelBuffer2> for &IAsyncRpcChannelBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, IRpcChannelBuffer2> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IRpcChannelBuffer2>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<IAsyncRpcChannelBuffer> for IRpcChannelBuffer {
    fn from(value: IAsyncRpcChannelBuffer) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IAsyncRpcChannelBuffer> for IRpcChannelBuffer {
    fn from(value: &IAsyncRpcChannelBuffer) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IRpcChannelBuffer> for IAsyncRpcChannelBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, IRpcChannelBuffer> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IRpcChannelBuffer>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IRpcChannelBuffer> for &IAsyncRpcChannelBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, IRpcChannelBuffer> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IRpcChannelBuffer>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAsyncRpcChannelBuffer_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmessage: *mut RPCOLEMESSAGE,
        riid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmessage: *mut RPCOLEMESSAGE,
        pstatus: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmessage: *mut RPCOLEMESSAGE,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwdestcontext: *mut u32,
        ppvdestcontext: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwversion: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmsg: *mut RPCOLEMESSAGE,
        psync: ::windows::runtime::RawPtr,
        pulstatus: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmsg: *mut RPCOLEMESSAGE,
        pulstatus: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmsg: *const RPCOLEMESSAGE,
        pdwdestcontext: *mut u32,
        ppvdestcontext: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IAuthenticate(::windows::runtime::IUnknown);
impl IAuthenticate {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Authenticate(
        &self,
        phwnd: *mut super::super::Foundation::HWND,
        pszusername: *mut super::super::Foundation::PWSTR,
        pszpassword: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(phwnd),
            ::std::mem::transmute(pszusername),
            ::std::mem::transmute(pszpassword),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IAuthenticate {
    type Vtable = IAuthenticate_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430224,
        47865,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<IAuthenticate> for ::windows::runtime::IUnknown {
    fn from(value: IAuthenticate) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IAuthenticate> for ::windows::runtime::IUnknown {
    fn from(value: &IAuthenticate) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IAuthenticate {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IAuthenticate {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAuthenticate_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phwnd: *mut super::super::Foundation::HWND,
        pszusername: *mut super::super::Foundation::PWSTR,
        pszpassword: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IAuthenticateEx(::windows::runtime::IUnknown);
impl IAuthenticateEx {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Authenticate(
        &self,
        phwnd: *mut super::super::Foundation::HWND,
        pszusername: *mut super::super::Foundation::PWSTR,
        pszpassword: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(phwnd),
            ::std::mem::transmute(pszusername),
            ::std::mem::transmute(pszpassword),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn AuthenticateEx(
        &self,
        phwnd: *mut super::super::Foundation::HWND,
        pszusername: *mut super::super::Foundation::PWSTR,
        pszpassword: *mut super::super::Foundation::PWSTR,
        pauthinfo: *const AUTHENTICATEINFO,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(phwnd),
            ::std::mem::transmute(pszusername),
            ::std::mem::transmute(pszpassword),
            ::std::mem::transmute(pauthinfo),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IAuthenticateEx {
    type Vtable = IAuthenticateEx_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        718400943,
        55357,
        18613,
        [154, 223, 3, 219, 225, 159, 83, 189],
    );
}
impl ::std::convert::From<IAuthenticateEx> for ::windows::runtime::IUnknown {
    fn from(value: IAuthenticateEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IAuthenticateEx> for ::windows::runtime::IUnknown {
    fn from(value: &IAuthenticateEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IAuthenticateEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IAuthenticateEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IAuthenticateEx> for IAuthenticate {
    fn from(value: IAuthenticateEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IAuthenticateEx> for IAuthenticate {
    fn from(value: &IAuthenticateEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IAuthenticate> for IAuthenticateEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IAuthenticate> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IAuthenticate>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IAuthenticate> for &IAuthenticateEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IAuthenticate> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IAuthenticate>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAuthenticateEx_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phwnd: *mut super::super::Foundation::HWND,
        pszusername: *mut super::super::Foundation::PWSTR,
        pszpassword: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phwnd: *mut super::super::Foundation::HWND,
        pszusername: *mut super::super::Foundation::PWSTR,
        pszpassword: *mut super::super::Foundation::PWSTR,
        pauthinfo: *const AUTHENTICATEINFO,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IBindCallbackRedirect(::windows::runtime::IUnknown);
impl IBindCallbackRedirect {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Redirect<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        lpcurl: Param0,
    ) -> ::windows::runtime::Result<i16> {
        let mut result__: <i16 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            lpcurl.into_param().abi(),
            &mut result__,
        )
        .from_abi::<i16>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IBindCallbackRedirect {
    type Vtable = IBindCallbackRedirect_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        298326978,
        4638,
        20181,
        [185, 196, 180, 48, 189, 84, 242, 192],
    );
}
impl ::std::convert::From<IBindCallbackRedirect> for ::windows::runtime::IUnknown {
    fn from(value: IBindCallbackRedirect) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IBindCallbackRedirect> for ::windows::runtime::IUnknown {
    fn from(value: &IBindCallbackRedirect) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IBindCallbackRedirect {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IBindCallbackRedirect
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBindCallbackRedirect_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        lpcurl: super::super::Foundation::PWSTR,
        vbcancel: *mut i16,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IBindCtx(::windows::runtime::IUnknown);
impl IBindCtx {
    pub unsafe fn RegisterObjectBound<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    >(
        &self,
        punk: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            punk.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn RevokeObjectBound<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    >(
        &self,
        punk: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            punk.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ReleaseBoundObjects(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn SetBindOptions(
        &self,
        pbindopts: *const BIND_OPTS,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pbindopts),
        )
        .ok()
    }
    pub unsafe fn GetBindOptions(
        &self,
        pbindopts: *mut BIND_OPTS,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pbindopts),
        )
        .ok()
    }
    pub unsafe fn GetRunningObjectTable(&self) -> ::windows::runtime::Result<IRunningObjectTable> {
        let mut result__: <IRunningObjectTable as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IRunningObjectTable>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterObjectParam<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    >(
        &self,
        pszkey: Param0,
        punk: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            pszkey.into_param().abi(),
            punk.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetObjectParam<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pszkey: Param0,
    ) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            pszkey.into_param().abi(),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    pub unsafe fn EnumObjectParam(&self) -> ::windows::runtime::Result<IEnumString> {
        let mut result__: <IEnumString as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumString>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RevokeObjectParam<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pszkey: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            pszkey.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IBindCtx {
    type Vtable = IBindCtx_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(14, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IBindCtx> for ::windows::runtime::IUnknown {
    fn from(value: IBindCtx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IBindCtx> for ::windows::runtime::IUnknown {
    fn from(value: &IBindCtx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IBindCtx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IBindCtx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBindCtx_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        punk: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        punk: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbindopts: *const BIND_OPTS,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbindopts: *mut BIND_OPTS,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pprot: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pszkey: super::super::Foundation::PWSTR,
        punk: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pszkey: super::super::Foundation::PWSTR,
        ppunk: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenum: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pszkey: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IBindHost(::windows::runtime::IUnknown);
impl IBindHost {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CreateMoniker<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, IBindCtx>,
    >(
        &self,
        szname: Param0,
        pbc: Param1,
        ppmk: *mut ::std::option::Option<IMoniker>,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            szname.into_param().abi(),
            pbc.into_param().abi(),
            ::std::mem::transmute(ppmk),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    pub unsafe fn MonikerBindToStorage<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IMoniker>,
        Param1: ::windows::runtime::IntoParam<'a, IBindCtx>,
        Param2: ::windows::runtime::IntoParam<'a, IBindStatusCallback>,
    >(
        &self,
        pmk: Param0,
        pbc: Param1,
        pbsc: Param2,
        riid: *const ::windows::runtime::GUID,
        ppvobj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            pmk.into_param().abi(),
            pbc.into_param().abi(),
            pbsc.into_param().abi(),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(ppvobj),
        )
        .ok()
    }
    pub unsafe fn MonikerBindToObject<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IMoniker>,
        Param1: ::windows::runtime::IntoParam<'a, IBindCtx>,
        Param2: ::windows::runtime::IntoParam<'a, IBindStatusCallback>,
    >(
        &self,
        pmk: Param0,
        pbc: Param1,
        pbsc: Param2,
        riid: *const ::windows::runtime::GUID,
        ppvobj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            pmk.into_param().abi(),
            pbc.into_param().abi(),
            pbsc.into_param().abi(),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(ppvobj),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IBindHost {
    type Vtable = IBindHost_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4232577441,
        11177,
        4559,
        [162, 41, 0, 170, 0, 61, 115, 82],
    );
}
impl ::std::convert::From<IBindHost> for ::windows::runtime::IUnknown {
    fn from(value: IBindHost) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IBindHost> for ::windows::runtime::IUnknown {
    fn from(value: &IBindHost) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IBindHost {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IBindHost {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBindHost_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        szname: super::super::Foundation::PWSTR,
        pbc: ::windows::runtime::RawPtr,
        ppmk: *mut ::windows::runtime::RawPtr,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmk: ::windows::runtime::RawPtr,
        pbc: ::windows::runtime::RawPtr,
        pbsc: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        ppvobj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmk: ::windows::runtime::RawPtr,
        pbc: ::windows::runtime::RawPtr,
        pbsc: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        ppvobj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IBindHttpSecurity(::windows::runtime::IUnknown);
impl IBindHttpSecurity {
    pub unsafe fn GetIgnoreCertMask(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IBindHttpSecurity {
    type Vtable = IBindHttpSecurity_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2850924903,
        62734,
        18995,
        [179, 88, 32, 111, 110, 243, 8, 109],
    );
}
impl ::std::convert::From<IBindHttpSecurity> for ::windows::runtime::IUnknown {
    fn from(value: IBindHttpSecurity) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IBindHttpSecurity> for ::windows::runtime::IUnknown {
    fn from(value: &IBindHttpSecurity) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IBindHttpSecurity {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IBindHttpSecurity {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBindHttpSecurity_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwignorecertmask: *mut u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IBindProtocol(::windows::runtime::IUnknown);
impl IBindProtocol {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CreateBinding<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, IBindCtx>,
    >(
        &self,
        szurl: Param0,
        pbc: Param1,
    ) -> ::windows::runtime::Result<IBinding> {
        let mut result__: <IBinding as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            szurl.into_param().abi(),
            pbc.into_param().abi(),
            &mut result__,
        )
        .from_abi::<IBinding>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IBindProtocol {
    type Vtable = IBindProtocol_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430221,
        47865,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<IBindProtocol> for ::windows::runtime::IUnknown {
    fn from(value: IBindProtocol) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IBindProtocol> for ::windows::runtime::IUnknown {
    fn from(value: &IBindProtocol) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IBindProtocol {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IBindProtocol {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBindProtocol_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        szurl: super::super::Foundation::PWSTR,
        pbc: ::windows::runtime::RawPtr,
        ppb: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IBindStatusCallback(::windows::runtime::IUnknown);
impl IBindStatusCallback {
    pub unsafe fn OnStartBinding<'a, Param1: ::windows::runtime::IntoParam<'a, IBinding>>(
        &self,
        dwreserved: u32,
        pib: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwreserved),
            pib.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetPriority(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn OnLowResource(&self, reserved: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(reserved),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnProgress<
        'a,
        Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        ulprogress: u32,
        ulprogressmax: u32,
        ulstatuscode: u32,
        szstatustext: Param3,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ulprogress),
            ::std::mem::transmute(ulprogressmax),
            ::std::mem::transmute(ulstatuscode),
            szstatustext.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnStopBinding<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        hresult: ::windows::runtime::HRESULT,
        szerror: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(hresult),
            szerror.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Security",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn GetBindInfo(
        &self,
        grfbindf: *mut u32,
        pbindinfo: *mut BINDINFO,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(grfbindf),
            ::std::mem::transmute(pbindinfo),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn OnDataAvailable(
        &self,
        grfbscf: u32,
        dwsize: u32,
        pformatetc: *const FORMATETC,
        pstgmed: *const STGMEDIUM,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(grfbscf),
            ::std::mem::transmute(dwsize),
            ::std::mem::transmute(pformatetc),
            ::std::mem::transmute(pstgmed),
        )
        .ok()
    }
    pub unsafe fn OnObjectAvailable<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    >(
        &self,
        riid: *const ::windows::runtime::GUID,
        punk: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            punk.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IBindStatusCallback {
    type Vtable = IBindStatusCallback_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430209,
        47865,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<IBindStatusCallback> for ::windows::runtime::IUnknown {
    fn from(value: IBindStatusCallback) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IBindStatusCallback> for ::windows::runtime::IUnknown {
    fn from(value: &IBindStatusCallback) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IBindStatusCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IBindStatusCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBindStatusCallback_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwreserved: u32,
        pib: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pnpriority: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        reserved: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ulprogress: u32,
        ulprogressmax: u32,
        ulstatuscode: u32,
        szstatustext: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hresult: ::windows::runtime::HRESULT,
        szerror: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Security",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        grfbindf: *mut u32,
        pbindinfo: *mut ::std::mem::ManuallyDrop<BINDINFO>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Security",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        grfbscf: u32,
        dwsize: u32,
        pformatetc: *const FORMATETC,
        pstgmed: *const ::std::mem::ManuallyDrop<STGMEDIUM>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        punk: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IBindStatusCallbackEx(::windows::runtime::IUnknown);
impl IBindStatusCallbackEx {
    pub unsafe fn OnStartBinding<'a, Param1: ::windows::runtime::IntoParam<'a, IBinding>>(
        &self,
        dwreserved: u32,
        pib: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwreserved),
            pib.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetPriority(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn OnLowResource(&self, reserved: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(reserved),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnProgress<
        'a,
        Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        ulprogress: u32,
        ulprogressmax: u32,
        ulstatuscode: u32,
        szstatustext: Param3,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ulprogress),
            ::std::mem::transmute(ulprogressmax),
            ::std::mem::transmute(ulstatuscode),
            szstatustext.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnStopBinding<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        hresult: ::windows::runtime::HRESULT,
        szerror: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(hresult),
            szerror.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Security",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn GetBindInfo(
        &self,
        grfbindf: *mut u32,
        pbindinfo: *mut BINDINFO,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(grfbindf),
            ::std::mem::transmute(pbindinfo),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn OnDataAvailable(
        &self,
        grfbscf: u32,
        dwsize: u32,
        pformatetc: *const FORMATETC,
        pstgmed: *const STGMEDIUM,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(grfbscf),
            ::std::mem::transmute(dwsize),
            ::std::mem::transmute(pformatetc),
            ::std::mem::transmute(pstgmed),
        )
        .ok()
    }
    pub unsafe fn OnObjectAvailable<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    >(
        &self,
        riid: *const ::windows::runtime::GUID,
        punk: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            punk.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Security",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn GetBindInfoEx(
        &self,
        grfbindf: *mut u32,
        pbindinfo: *mut BINDINFO,
        grfbindf2: *mut u32,
        pdwreserved: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(grfbindf),
            ::std::mem::transmute(pbindinfo),
            ::std::mem::transmute(grfbindf2),
            ::std::mem::transmute(pdwreserved),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IBindStatusCallbackEx {
    type Vtable = IBindStatusCallbackEx_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2863091449,
        36583,
        18009,
        [136, 217, 248, 197, 4, 218, 115, 204],
    );
}
impl ::std::convert::From<IBindStatusCallbackEx> for ::windows::runtime::IUnknown {
    fn from(value: IBindStatusCallbackEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IBindStatusCallbackEx> for ::windows::runtime::IUnknown {
    fn from(value: &IBindStatusCallbackEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IBindStatusCallbackEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IBindStatusCallbackEx
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IBindStatusCallbackEx> for IBindStatusCallback {
    fn from(value: IBindStatusCallbackEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IBindStatusCallbackEx> for IBindStatusCallback {
    fn from(value: &IBindStatusCallbackEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IBindStatusCallback> for IBindStatusCallbackEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IBindStatusCallback> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IBindStatusCallback>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IBindStatusCallback> for &IBindStatusCallbackEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IBindStatusCallback> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IBindStatusCallback>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBindStatusCallbackEx_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwreserved: u32,
        pib: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pnpriority: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        reserved: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ulprogress: u32,
        ulprogressmax: u32,
        ulstatuscode: u32,
        szstatustext: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hresult: ::windows::runtime::HRESULT,
        szerror: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Security",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        grfbindf: *mut u32,
        pbindinfo: *mut ::std::mem::ManuallyDrop<BINDINFO>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Security",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        grfbscf: u32,
        dwsize: u32,
        pformatetc: *const FORMATETC,
        pstgmed: *const ::std::mem::ManuallyDrop<STGMEDIUM>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        punk: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Security",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        grfbindf: *mut u32,
        pbindinfo: *mut ::std::mem::ManuallyDrop<BINDINFO>,
        grfbindf2: *mut u32,
        pdwreserved: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Security",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IBinding(::windows::runtime::IUnknown);
impl IBinding {
    pub unsafe fn Abort(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Suspend(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Resume(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn SetPriority(&self, npriority: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(npriority),
        )
        .ok()
    }
    pub unsafe fn GetPriority(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetBindResult(
        &self,
        pclsidprotocol: *mut ::windows::runtime::GUID,
        pdwresult: *mut u32,
        pszresult: *mut super::super::Foundation::PWSTR,
        pdwreserved: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pclsidprotocol),
            ::std::mem::transmute(pdwresult),
            ::std::mem::transmute(pszresult),
            ::std::mem::transmute(pdwreserved),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IBinding {
    type Vtable = IBinding_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430208,
        47865,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<IBinding> for ::windows::runtime::IUnknown {
    fn from(value: IBinding) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IBinding> for ::windows::runtime::IUnknown {
    fn from(value: &IBinding) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IBinding {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IBinding {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBinding_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        npriority: i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pnpriority: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pclsidprotocol: *mut ::windows::runtime::GUID,
        pdwresult: *mut u32,
        pszresult: *mut super::super::Foundation::PWSTR,
        pdwreserved: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IBlockingLock(::windows::runtime::IUnknown);
impl IBlockingLock {
    pub unsafe fn Lock(&self, dwtimeout: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwtimeout),
        )
        .ok()
    }
    pub unsafe fn Unlock(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IBlockingLock {
    type Vtable = IBlockingLock_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        821286010,
        25671,
        4561,
        [142, 60, 0, 192, 79, 185, 56, 109],
    );
}
impl ::std::convert::From<IBlockingLock> for ::windows::runtime::IUnknown {
    fn from(value: IBlockingLock) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IBlockingLock> for ::windows::runtime::IUnknown {
    fn from(value: &IBlockingLock) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IBlockingLock {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IBlockingLock {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBlockingLock_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwtimeout: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ICallFactory(::windows::runtime::IUnknown);
impl ICallFactory {
    pub unsafe fn CreateCall<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    >(
        &self,
        riid: *const ::windows::runtime::GUID,
        pctrlunk: Param1,
        riid2: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            pctrlunk.into_param().abi(),
            ::std::mem::transmute(riid2),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ICallFactory {
    type Vtable = ICallFactory_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        477313584,
        10780,
        4558,
        [173, 229, 0, 170, 0, 68, 119, 61],
    );
}
impl ::std::convert::From<ICallFactory> for ::windows::runtime::IUnknown {
    fn from(value: ICallFactory) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ICallFactory> for ::windows::runtime::IUnknown {
    fn from(value: &ICallFactory) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ICallFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ICallFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICallFactory_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        pctrlunk: ::windows::runtime::RawPtr,
        riid2: *const ::windows::runtime::GUID,
        ppv: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ICallFrame(::windows::runtime::IUnknown);
impl ICallFrame {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetInfo(&self) -> ::windows::runtime::Result<CALLFRAMEINFO> {
        let mut result__: <CALLFRAMEINFO as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<CALLFRAMEINFO>(result__)
    }
    pub unsafe fn GetIIDAndMethod(
        &self,
        piid: *mut ::windows::runtime::GUID,
        pimethod: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(piid),
            ::std::mem::transmute(pimethod),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetNames(
        &self,
        pwszinterface: *mut super::super::Foundation::PWSTR,
        pwszmethod: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pwszinterface),
            ::std::mem::transmute(pwszmethod),
        )
        .ok()
    }
    pub unsafe fn GetStackLocation(&self) -> *mut ::std::ffi::c_void {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn SetStackLocation(&self, pvstack: *const ::std::ffi::c_void) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pvstack),
        ))
    }
    pub unsafe fn SetReturnValue(&self, hr: ::windows::runtime::HRESULT) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(hr),
        ))
    }
    pub unsafe fn GetReturnValue(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetParamInfo(
        &self,
        iparam: u32,
    ) -> ::windows::runtime::Result<CALLFRAMEPARAMINFO> {
        let mut result__: <CALLFRAMEPARAMINFO as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(iparam),
            &mut result__,
        )
        .from_abi::<CALLFRAMEPARAMINFO>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn SetParam(
        &self,
        iparam: u32,
        pvar: *const super::OleAutomation::VARIANT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(iparam),
            ::std::mem::transmute(pvar),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn GetParam(
        &self,
        iparam: u32,
    ) -> ::windows::runtime::Result<super::OleAutomation::VARIANT> {
        let mut result__: <super::OleAutomation::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(iparam),
            &mut result__,
        )
        .from_abi::<super::OleAutomation::VARIANT>(result__)
    }
    pub unsafe fn Copy<'a, Param1: ::windows::runtime::IntoParam<'a, ICallFrameWalker>>(
        &self,
        copycontrol: CALLFRAME_COPY,
        pwalker: Param1,
    ) -> ::windows::runtime::Result<ICallFrame> {
        let mut result__: <ICallFrame as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(copycontrol),
            pwalker.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ICallFrame>(result__)
    }
    pub unsafe fn Free<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ICallFrame>,
        Param1: ::windows::runtime::IntoParam<'a, ICallFrameWalker>,
        Param2: ::windows::runtime::IntoParam<'a, ICallFrameWalker>,
        Param4: ::windows::runtime::IntoParam<'a, ICallFrameWalker>,
    >(
        &self,
        pframeargsdest: Param0,
        pwalkerdestfree: Param1,
        pwalkercopy: Param2,
        freeflags: u32,
        pwalkerfree: Param4,
        nullflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            pframeargsdest.into_param().abi(),
            pwalkerdestfree.into_param().abi(),
            pwalkercopy.into_param().abi(),
            ::std::mem::transmute(freeflags),
            pwalkerfree.into_param().abi(),
            ::std::mem::transmute(nullflags),
        )
        .ok()
    }
    pub unsafe fn FreeParam<'a, Param2: ::windows::runtime::IntoParam<'a, ICallFrameWalker>>(
        &self,
        iparam: u32,
        freeflags: u32,
        pwalkerfree: Param2,
        nullflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(iparam),
            ::std::mem::transmute(freeflags),
            pwalkerfree.into_param().abi(),
            ::std::mem::transmute(nullflags),
        )
        .ok()
    }
    pub unsafe fn WalkFrame<'a, Param1: ::windows::runtime::IntoParam<'a, ICallFrameWalker>>(
        &self,
        walkwhat: u32,
        pwalker: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(walkwhat),
            pwalker.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetMarshalSizeMax(
        &self,
        pmshlcontext: *const CALLFRAME_MARSHALCONTEXT,
        mshlflags: MSHLFLAGS,
    ) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmshlcontext),
            ::std::mem::transmute(mshlflags),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Marshal(
        &self,
        pmshlcontext: *const CALLFRAME_MARSHALCONTEXT,
        mshlflags: MSHLFLAGS,
        pbuffer: *const ::std::ffi::c_void,
        cbbuffer: u32,
        pcbbufferused: *mut u32,
        pdatarep: *mut u32,
        prpcflags: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmshlcontext),
            ::std::mem::transmute(mshlflags),
            ::std::mem::transmute(pbuffer),
            ::std::mem::transmute(cbbuffer),
            ::std::mem::transmute(pcbbufferused),
            ::std::mem::transmute(pdatarep),
            ::std::mem::transmute(prpcflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Unmarshal(
        &self,
        pbuffer: *const ::std::ffi::c_void,
        cbbuffer: u32,
        datarep: u32,
        pcontext: *const CALLFRAME_MARSHALCONTEXT,
    ) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pbuffer),
            ::std::mem::transmute(cbbuffer),
            ::std::mem::transmute(datarep),
            ::std::mem::transmute(pcontext),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ReleaseMarshalData(
        &self,
        pbuffer: *const ::std::ffi::c_void,
        cbbuffer: u32,
        ibfirstrelease: u32,
        datarep: u32,
        pcontext: *const CALLFRAME_MARSHALCONTEXT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pbuffer),
            ::std::mem::transmute(cbbuffer),
            ::std::mem::transmute(ibfirstrelease),
            ::std::mem::transmute(datarep),
            ::std::mem::transmute(pcontext),
        )
        .ok()
    }
    pub unsafe fn Invoke(
        &self,
        pvreceiver: *const ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pvreceiver),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ICallFrame {
    type Vtable = ICallFrame_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3581129904,
        35150,
        4562,
        [184, 182, 0, 192, 79, 185, 97, 138],
    );
}
impl ::std::convert::From<ICallFrame> for ::windows::runtime::IUnknown {
    fn from(value: ICallFrame) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ICallFrame> for ::windows::runtime::IUnknown {
    fn from(value: &ICallFrame) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ICallFrame {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ICallFrame {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICallFrame_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pinfo: *mut CALLFRAMEINFO,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        piid: *mut ::windows::runtime::GUID,
        pimethod: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwszinterface: *mut super::super::Foundation::PWSTR,
        pwszmethod: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> *mut ::std::ffi::c_void,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pvstack: *const ::std::ffi::c_void,
    ),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hr: ::windows::runtime::HRESULT),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iparam: u32,
        pinfo: *mut CALLFRAMEPARAMINFO,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iparam: u32,
        pvar: *const ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iparam: u32,
        pvar: *mut ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        copycontrol: CALLFRAME_COPY,
        pwalker: ::windows::runtime::RawPtr,
        ppframe: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pframeargsdest: ::windows::runtime::RawPtr,
        pwalkerdestfree: ::windows::runtime::RawPtr,
        pwalkercopy: ::windows::runtime::RawPtr,
        freeflags: u32,
        pwalkerfree: ::windows::runtime::RawPtr,
        nullflags: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iparam: u32,
        freeflags: u32,
        pwalkerfree: ::windows::runtime::RawPtr,
        nullflags: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        walkwhat: u32,
        pwalker: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmshlcontext: *const ::std::mem::ManuallyDrop<CALLFRAME_MARSHALCONTEXT>,
        mshlflags: MSHLFLAGS,
        pcbbufferneeded: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmshlcontext: *const ::std::mem::ManuallyDrop<CALLFRAME_MARSHALCONTEXT>,
        mshlflags: MSHLFLAGS,
        pbuffer: *const ::std::ffi::c_void,
        cbbuffer: u32,
        pcbbufferused: *mut u32,
        pdatarep: *mut u32,
        prpcflags: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbuffer: *const ::std::ffi::c_void,
        cbbuffer: u32,
        datarep: u32,
        pcontext: *const ::std::mem::ManuallyDrop<CALLFRAME_MARSHALCONTEXT>,
        pcbunmarshalled: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbuffer: *const ::std::ffi::c_void,
        cbbuffer: u32,
        ibfirstrelease: u32,
        datarep: u32,
        pcontext: *const ::std::mem::ManuallyDrop<CALLFRAME_MARSHALCONTEXT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pvreceiver: *const ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ICallFrameEvents(::windows::runtime::IUnknown);
impl ICallFrameEvents {
    pub unsafe fn OnCall<'a, Param0: ::windows::runtime::IntoParam<'a, ICallFrame>>(
        &self,
        pframe: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pframe.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ICallFrameEvents {
    type Vtable = ICallFrameEvents_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4250798147,
        64657,
        4560,
        [151, 215, 0, 192, 79, 185, 97, 138],
    );
}
impl ::std::convert::From<ICallFrameEvents> for ::windows::runtime::IUnknown {
    fn from(value: ICallFrameEvents) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ICallFrameEvents> for ::windows::runtime::IUnknown {
    fn from(value: &ICallFrameEvents) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ICallFrameEvents {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ICallFrameEvents {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICallFrameEvents_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pframe: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ICallFrameWalker(::windows::runtime::IUnknown);
impl ICallFrameWalker {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnWalkInterface<
        'a,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
        Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        iid: *const ::windows::runtime::GUID,
        ppvinterface: *const *const ::std::ffi::c_void,
        fin: Param2,
        fout: Param3,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(iid),
            ::std::mem::transmute(ppvinterface),
            fin.into_param().abi(),
            fout.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ICallFrameWalker {
    type Vtable = ICallFrameWalker_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        145897753,
        14637,
        4562,
        [184, 164, 0, 192, 79, 185, 97, 138],
    );
}
impl ::std::convert::From<ICallFrameWalker> for ::windows::runtime::IUnknown {
    fn from(value: ICallFrameWalker) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ICallFrameWalker> for ::windows::runtime::IUnknown {
    fn from(value: &ICallFrameWalker) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ICallFrameWalker {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ICallFrameWalker {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICallFrameWalker_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: *const ::windows::runtime::GUID,
        ppvinterface: *const *const ::std::ffi::c_void,
        fin: super::super::Foundation::BOOL,
        fout: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ICallIndirect(::windows::runtime::IUnknown);
impl ICallIndirect {
    pub unsafe fn CallIndirect(
        &self,
        phrreturn: *mut ::windows::runtime::HRESULT,
        imethod: u32,
        pvargs: *const ::std::ffi::c_void,
        cbargs: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(phrreturn),
            ::std::mem::transmute(imethod),
            ::std::mem::transmute(pvargs),
            ::std::mem::transmute(cbargs),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetMethodInfo(
        &self,
        imethod: u32,
        pinfo: *mut CALLFRAMEINFO,
        pwszmethod: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(imethod),
            ::std::mem::transmute(pinfo),
            ::std::mem::transmute(pwszmethod),
        )
        .ok()
    }
    pub unsafe fn GetStackSize(&self, imethod: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(imethod),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIID(
        &self,
        piid: *mut ::windows::runtime::GUID,
        pfderivesfromidispatch: *mut super::super::Foundation::BOOL,
        pcmethod: *mut u32,
        pwszinterface: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(piid),
            ::std::mem::transmute(pfderivesfromidispatch),
            ::std::mem::transmute(pcmethod),
            ::std::mem::transmute(pwszinterface),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ICallIndirect {
    type Vtable = ICallIndirect_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3581129905,
        35150,
        4562,
        [184, 182, 0, 192, 79, 185, 97, 138],
    );
}
impl ::std::convert::From<ICallIndirect> for ::windows::runtime::IUnknown {
    fn from(value: ICallIndirect) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ICallIndirect> for ::windows::runtime::IUnknown {
    fn from(value: &ICallIndirect) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ICallIndirect {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ICallIndirect {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICallIndirect_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phrreturn: *mut ::windows::runtime::HRESULT,
        imethod: u32,
        pvargs: *const ::std::ffi::c_void,
        cbargs: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        imethod: u32,
        pinfo: *mut CALLFRAMEINFO,
        pwszmethod: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        imethod: u32,
        cbargs: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        piid: *mut ::windows::runtime::GUID,
        pfderivesfromidispatch: *mut super::super::Foundation::BOOL,
        pcmethod: *mut u32,
        pwszinterface: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ICallInterceptor(::windows::runtime::IUnknown);
impl ICallInterceptor {
    pub unsafe fn CallIndirect(
        &self,
        phrreturn: *mut ::windows::runtime::HRESULT,
        imethod: u32,
        pvargs: *const ::std::ffi::c_void,
        cbargs: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(phrreturn),
            ::std::mem::transmute(imethod),
            ::std::mem::transmute(pvargs),
            ::std::mem::transmute(cbargs),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetMethodInfo(
        &self,
        imethod: u32,
        pinfo: *mut CALLFRAMEINFO,
        pwszmethod: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(imethod),
            ::std::mem::transmute(pinfo),
            ::std::mem::transmute(pwszmethod),
        )
        .ok()
    }
    pub unsafe fn GetStackSize(&self, imethod: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(imethod),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIID(
        &self,
        piid: *mut ::windows::runtime::GUID,
        pfderivesfromidispatch: *mut super::super::Foundation::BOOL,
        pcmethod: *mut u32,
        pwszinterface: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(piid),
            ::std::mem::transmute(pfderivesfromidispatch),
            ::std::mem::transmute(pcmethod),
            ::std::mem::transmute(pwszinterface),
        )
        .ok()
    }
    pub unsafe fn RegisterSink<'a, Param0: ::windows::runtime::IntoParam<'a, ICallFrameEvents>>(
        &self,
        psink: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            psink.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetRegisteredSink(&self) -> ::windows::runtime::Result<ICallFrameEvents> {
        let mut result__: <ICallFrameEvents as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ICallFrameEvents>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ICallInterceptor {
    type Vtable = ICallInterceptor_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        1623706229,
        35181,
        4562,
        [184, 182, 0, 192, 79, 185, 97, 138],
    );
}
impl ::std::convert::From<ICallInterceptor> for ::windows::runtime::IUnknown {
    fn from(value: ICallInterceptor) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ICallInterceptor> for ::windows::runtime::IUnknown {
    fn from(value: &ICallInterceptor) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ICallInterceptor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ICallInterceptor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<ICallInterceptor> for ICallIndirect {
    fn from(value: ICallInterceptor) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ICallInterceptor> for ICallIndirect {
    fn from(value: &ICallInterceptor) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ICallIndirect> for ICallInterceptor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ICallIndirect> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<ICallIndirect>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ICallIndirect> for &ICallInterceptor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ICallIndirect> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<ICallIndirect>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICallInterceptor_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phrreturn: *mut ::windows::runtime::HRESULT,
        imethod: u32,
        pvargs: *const ::std::ffi::c_void,
        cbargs: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        imethod: u32,
        pinfo: *mut CALLFRAMEINFO,
        pwszmethod: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        imethod: u32,
        cbargs: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        piid: *mut ::windows::runtime::GUID,
        pfderivesfromidispatch: *mut super::super::Foundation::BOOL,
        pcmethod: *mut u32,
        pwszinterface: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        psink: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppsink: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ICallUnmarshal(::windows::runtime::IUnknown);
impl ICallUnmarshal {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Unmarshal<
        'a,
        Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        imethod: u32,
        pbuffer: *const ::std::ffi::c_void,
        cbbuffer: u32,
        fforcebuffercopy: Param3,
        datarep: u32,
        pcontext: *const CALLFRAME_MARSHALCONTEXT,
        pcbunmarshalled: *mut u32,
        ppframe: *mut ::std::option::Option<ICallFrame>,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(imethod),
            ::std::mem::transmute(pbuffer),
            ::std::mem::transmute(cbbuffer),
            fforcebuffercopy.into_param().abi(),
            ::std::mem::transmute(datarep),
            ::std::mem::transmute(pcontext),
            ::std::mem::transmute(pcbunmarshalled),
            ::std::mem::transmute(ppframe),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ReleaseMarshalData(
        &self,
        imethod: u32,
        pbuffer: *const ::std::ffi::c_void,
        cbbuffer: u32,
        ibfirstrelease: u32,
        datarep: u32,
        pcontext: *const CALLFRAME_MARSHALCONTEXT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(imethod),
            ::std::mem::transmute(pbuffer),
            ::std::mem::transmute(cbbuffer),
            ::std::mem::transmute(ibfirstrelease),
            ::std::mem::transmute(datarep),
            ::std::mem::transmute(pcontext),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ICallUnmarshal {
    type Vtable = ICallUnmarshal_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        1395896323,
        11842,
        4562,
        [184, 157, 0, 192, 79, 185, 97, 138],
    );
}
impl ::std::convert::From<ICallUnmarshal> for ::windows::runtime::IUnknown {
    fn from(value: ICallUnmarshal) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ICallUnmarshal> for ::windows::runtime::IUnknown {
    fn from(value: &ICallUnmarshal) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ICallUnmarshal {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ICallUnmarshal {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICallUnmarshal_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        imethod: u32,
        pbuffer: *const ::std::ffi::c_void,
        cbbuffer: u32,
        fforcebuffercopy: super::super::Foundation::BOOL,
        datarep: u32,
        pcontext: *const ::std::mem::ManuallyDrop<CALLFRAME_MARSHALCONTEXT>,
        pcbunmarshalled: *mut u32,
        ppframe: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        imethod: u32,
        pbuffer: *const ::std::ffi::c_void,
        cbbuffer: u32,
        ibfirstrelease: u32,
        datarep: u32,
        pcontext: *const ::std::mem::ManuallyDrop<CALLFRAME_MARSHALCONTEXT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ICancelMethodCalls(::windows::runtime::IUnknown);
impl ICancelMethodCalls {
    pub unsafe fn Cancel(&self, ulseconds: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ulseconds),
        )
        .ok()
    }
    pub unsafe fn TestCancel(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for ICancelMethodCalls {
    type Vtable = ICancelMethodCalls_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(41, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<ICancelMethodCalls> for ::windows::runtime::IUnknown {
    fn from(value: ICancelMethodCalls) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ICancelMethodCalls> for ::windows::runtime::IUnknown {
    fn from(value: &ICancelMethodCalls) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ICancelMethodCalls {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ICancelMethodCalls {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICancelMethodCalls_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ulseconds: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ICatInformation(::windows::runtime::IUnknown);
impl ICatInformation {
    pub unsafe fn EnumCategories(
        &self,
        lcid: u32,
    ) -> ::windows::runtime::Result<IEnumCATEGORYINFO> {
        let mut result__: <IEnumCATEGORYINFO as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<IEnumCATEGORYINFO>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetCategoryDesc(
        &self,
        rcatid: *const ::windows::runtime::GUID,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(rcatid),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    pub unsafe fn EnumClassesOfCategories(
        &self,
        cimplemented: u32,
        rgcatidimpl: *const ::windows::runtime::GUID,
        crequired: u32,
        rgcatidreq: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<IEnumGUID> {
        let mut result__: <IEnumGUID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(cimplemented),
            ::std::mem::transmute(rgcatidimpl),
            ::std::mem::transmute(crequired),
            ::std::mem::transmute(rgcatidreq),
            &mut result__,
        )
        .from_abi::<IEnumGUID>(result__)
    }
    pub unsafe fn IsClassOfCategories(
        &self,
        rclsid: *const ::windows::runtime::GUID,
        cimplemented: u32,
        rgcatidimpl: *const ::windows::runtime::GUID,
        crequired: u32,
        rgcatidreq: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(rclsid),
            ::std::mem::transmute(cimplemented),
            ::std::mem::transmute(rgcatidimpl),
            ::std::mem::transmute(crequired),
            ::std::mem::transmute(rgcatidreq),
        )
        .ok()
    }
    pub unsafe fn EnumImplCategoriesOfClass(
        &self,
        rclsid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<IEnumGUID> {
        let mut result__: <IEnumGUID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(rclsid),
            &mut result__,
        )
        .from_abi::<IEnumGUID>(result__)
    }
    pub unsafe fn EnumReqCategoriesOfClass(
        &self,
        rclsid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<IEnumGUID> {
        let mut result__: <IEnumGUID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(rclsid),
            &mut result__,
        )
        .from_abi::<IEnumGUID>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ICatInformation {
    type Vtable = ICatInformation_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(188435, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<ICatInformation> for ::windows::runtime::IUnknown {
    fn from(value: ICatInformation) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ICatInformation> for ::windows::runtime::IUnknown {
    fn from(value: &ICatInformation) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ICatInformation {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ICatInformation {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICatInformation_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        lcid: u32,
        ppenumcategoryinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        rcatid: *const ::windows::runtime::GUID,
        lcid: u32,
        pszdesc: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        cimplemented: u32,
        rgcatidimpl: *const ::windows::runtime::GUID,
        crequired: u32,
        rgcatidreq: *const ::windows::runtime::GUID,
        ppenumclsid: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        rclsid: *const ::windows::runtime::GUID,
        cimplemented: u32,
        rgcatidimpl: *const ::windows::runtime::GUID,
        crequired: u32,
        rgcatidreq: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        rclsid: *const ::windows::runtime::GUID,
        ppenumcatid: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        rclsid: *const ::windows::runtime::GUID,
        ppenumcatid: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ICatRegister(::windows::runtime::IUnknown);
impl ICatRegister {
    pub unsafe fn RegisterCategories(
        &self,
        ccategories: u32,
        rgcategoryinfo: *const CATEGORYINFO,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ccategories),
            ::std::mem::transmute(rgcategoryinfo),
        )
        .ok()
    }
    pub unsafe fn UnRegisterCategories(
        &self,
        ccategories: u32,
        rgcatid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ccategories),
            ::std::mem::transmute(rgcatid),
        )
        .ok()
    }
    pub unsafe fn RegisterClassImplCategories(
        &self,
        rclsid: *const ::windows::runtime::GUID,
        ccategories: u32,
        rgcatid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(rclsid),
            ::std::mem::transmute(ccategories),
            ::std::mem::transmute(rgcatid),
        )
        .ok()
    }
    pub unsafe fn UnRegisterClassImplCategories(
        &self,
        rclsid: *const ::windows::runtime::GUID,
        ccategories: u32,
        rgcatid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(rclsid),
            ::std::mem::transmute(ccategories),
            ::std::mem::transmute(rgcatid),
        )
        .ok()
    }
    pub unsafe fn RegisterClassReqCategories(
        &self,
        rclsid: *const ::windows::runtime::GUID,
        ccategories: u32,
        rgcatid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(rclsid),
            ::std::mem::transmute(ccategories),
            ::std::mem::transmute(rgcatid),
        )
        .ok()
    }
    pub unsafe fn UnRegisterClassReqCategories(
        &self,
        rclsid: *const ::windows::runtime::GUID,
        ccategories: u32,
        rgcatid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(rclsid),
            ::std::mem::transmute(ccategories),
            ::std::mem::transmute(rgcatid),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ICatRegister {
    type Vtable = ICatRegister_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(188434, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<ICatRegister> for ::windows::runtime::IUnknown {
    fn from(value: ICatRegister) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ICatRegister> for ::windows::runtime::IUnknown {
    fn from(value: &ICatRegister) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ICatRegister {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ICatRegister {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICatRegister_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ccategories: u32,
        rgcategoryinfo: *const CATEGORYINFO,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ccategories: u32,
        rgcatid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        rclsid: *const ::windows::runtime::GUID,
        ccategories: u32,
        rgcatid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        rclsid: *const ::windows::runtime::GUID,
        ccategories: u32,
        rgcatid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        rclsid: *const ::windows::runtime::GUID,
        ccategories: u32,
        rgcatid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        rclsid: *const ::windows::runtime::GUID,
        ccategories: u32,
        rgcatid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ICatalog(::windows::runtime::IUnknown);
impl ICatalog {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::OleAutomation::ITypeInfo> {
        let mut result__: <super::OleAutomation::ITypeInfo as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::OleAutomation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::OleAutomation::DISPPARAMS,
        pvarresult: *mut super::OleAutomation::VARIANT,
        pexcepinfo: *mut super::OleAutomation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_OleAutomation"))]
    pub unsafe fn GetCollection<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrcollname: Param0,
    ) -> ::windows::runtime::Result<super::OleAutomation::IDispatch> {
        let mut result__: <super::OleAutomation::IDispatch as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            bstrcollname.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::OleAutomation::IDispatch>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_OleAutomation"))]
    pub unsafe fn Connect<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrconnectstring: Param0,
    ) -> ::windows::runtime::Result<super::OleAutomation::IDispatch> {
        let mut result__: <super::OleAutomation::IDispatch as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            bstrconnectstring.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::OleAutomation::IDispatch>(result__)
    }
    pub unsafe fn MajorVersion(&self, retval: *mut i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(retval),
        )
        .ok()
    }
    pub unsafe fn MinorVersion(&self, retval: *mut i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(retval),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ICatalog {
    type Vtable = ICatalog_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        1857169520,
        35353,
        4560,
        [129, 182, 0, 160, 201, 35, 28, 41],
    );
}
impl ::std::convert::From<ICatalog> for ::windows::runtime::IUnknown {
    fn from(value: ICatalog) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ICatalog> for ::windows::runtime::IUnknown {
    fn from(value: &ICatalog) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ICatalog {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ICatalog {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl ::std::convert::From<ICatalog> for super::OleAutomation::IDispatch {
    fn from(value: ICatalog) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl ::std::convert::From<&ICatalog> for super::OleAutomation::IDispatch {
    fn from(value: &ICatalog) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::OleAutomation::IDispatch> for ICatalog {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::OleAutomation::IDispatch> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<super::OleAutomation::IDispatch>::into(self),
        )
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::OleAutomation::IDispatch> for &ICatalog {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::OleAutomation::IDispatch> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<super::OleAutomation::IDispatch>::into(
                ::std::clone::Clone::clone(self),
            ),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICatalog_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_OleAutomation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::OleAutomation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::OleAutomation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_OleAutomation"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrcollname: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        ppcatalogcollection: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_OleAutomation")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_OleAutomation"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrconnectstring: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        ppcatalogcollection: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_OleAutomation")))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut i32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ICatalogFileInfo(::windows::runtime::IUnknown);
impl ICatalogFileInfo {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetCatalogFile(
        &self,
    ) -> ::windows::runtime::Result<super::super::Foundation::PSTR> {
        let mut result__: <super::super::Foundation::PSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::PSTR>(result__)
    }
    pub unsafe fn GetJavaTrust(
        &self,
        ppjavatrust: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ppjavatrust),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ICatalogFileInfo {
    type Vtable = ICatalogFileInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        1897690624,
        27464,
        4561,
        [180, 3, 0, 170, 0, 185, 42, 241],
    );
}
impl ::std::convert::From<ICatalogFileInfo> for ::windows::runtime::IUnknown {
    fn from(value: ICatalogFileInfo) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ICatalogFileInfo> for ::windows::runtime::IUnknown {
    fn from(value: &ICatalogFileInfo) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ICatalogFileInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ICatalogFileInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICatalogFileInfo_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppszcatalogfile: *mut super::super::Foundation::PSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppjavatrust: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IChannelCredentials(::windows::runtime::IUnknown);
impl IChannelCredentials {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::OleAutomation::ITypeInfo> {
        let mut result__: <super::OleAutomation::ITypeInfo as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::OleAutomation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::OleAutomation::DISPPARAMS,
        pvarresult: *mut super::OleAutomation::VARIANT,
        pexcepinfo: *mut super::OleAutomation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetWindowsCredential<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param4: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        domain: Param0,
        username: Param1,
        password: Param2,
        impersonationlevel: i32,
        allowntlm: Param4,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            domain.into_param().abi(),
            username.into_param().abi(),
            password.into_param().abi(),
            ::std::mem::transmute(impersonationlevel),
            allowntlm.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetUserNameCredential<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        username: Param0,
        password: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            username.into_param().abi(),
            password.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn SetClientCertificateFromStore<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param3: ::windows::runtime::IntoParam<'a, super::OleAutomation::VARIANT>,
    >(
        &self,
        storelocation: Param0,
        storename: Param1,
        findyype: Param2,
        findvalue: Param3,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            storelocation.into_param().abi(),
            storename.into_param().abi(),
            findyype.into_param().abi(),
            findvalue.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetClientCertificateFromStoreByName<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        subjectname: Param0,
        storelocation: Param1,
        storename: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            subjectname.into_param().abi(),
            storelocation.into_param().abi(),
            storename.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetClientCertificateFromFile<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        filename: Param0,
        password: Param1,
        keystorageflags: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            filename.into_param().abi(),
            password.into_param().abi(),
            keystorageflags.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn SetDefaultServiceCertificateFromStore<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param3: ::windows::runtime::IntoParam<'a, super::OleAutomation::VARIANT>,
    >(
        &self,
        storelocation: Param0,
        storename: Param1,
        findtype: Param2,
        findvalue: Param3,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            storelocation.into_param().abi(),
            storename.into_param().abi(),
            findtype.into_param().abi(),
            findvalue.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetDefaultServiceCertificateFromStoreByName<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        subjectname: Param0,
        storelocation: Param1,
        storename: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            subjectname.into_param().abi(),
            storelocation.into_param().abi(),
            storename.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetDefaultServiceCertificateFromFile<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        filename: Param0,
        password: Param1,
        keystorageflags: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            filename.into_param().abi(),
            password.into_param().abi(),
            keystorageflags.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetServiceCertificateAuthentication<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        storelocation: Param0,
        revocationmode: Param1,
        certificatevalidationmode: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            storelocation.into_param().abi(),
            revocationmode.into_param().abi(),
            certificatevalidationmode.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetIssuedToken<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        localissueraddres: Param0,
        localissuerbindingtype: Param1,
        localissuerbinding: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            localissueraddres.into_param().abi(),
            localissuerbindingtype.into_param().abi(),
            localissuerbinding.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IChannelCredentials {
    type Vtable = IChannelCredentials_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        404440204,
        49532,
        19223,
        [172, 109, 6, 105, 155, 147, 25, 143],
    );
}
impl ::std::convert::From<IChannelCredentials> for ::windows::runtime::IUnknown {
    fn from(value: IChannelCredentials) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IChannelCredentials> for ::windows::runtime::IUnknown {
    fn from(value: &IChannelCredentials) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IChannelCredentials {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IChannelCredentials {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl ::std::convert::From<IChannelCredentials> for super::OleAutomation::IDispatch {
    fn from(value: IChannelCredentials) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl ::std::convert::From<&IChannelCredentials> for super::OleAutomation::IDispatch {
    fn from(value: &IChannelCredentials) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::OleAutomation::IDispatch>
    for IChannelCredentials
{
    fn into_param(self) -> ::windows::runtime::Param<'a, super::OleAutomation::IDispatch> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<super::OleAutomation::IDispatch>::into(self),
        )
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::OleAutomation::IDispatch>
    for &IChannelCredentials
{
    fn into_param(self) -> ::windows::runtime::Param<'a, super::OleAutomation::IDispatch> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<super::OleAutomation::IDispatch>::into(
                ::std::clone::Clone::clone(self),
            ),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IChannelCredentials_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_OleAutomation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::OleAutomation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::OleAutomation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        domain: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        username: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        password: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        impersonationlevel: i32,
        allowntlm: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        username: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        password: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        storelocation: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        storename: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        findyype: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        findvalue: ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        subjectname: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        storelocation: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        storename: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        filename: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        password: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        keystorageflags: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        storelocation: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        storename: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        findtype: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        findvalue: ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        subjectname: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        storelocation: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        storename: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        filename: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        password: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        keystorageflags: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        storelocation: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        revocationmode: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        certificatevalidationmode: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        localissueraddres: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        localissuerbindingtype: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        localissuerbinding: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IChannelHook(::windows::runtime::IUnknown);
impl IChannelHook {
    pub unsafe fn ClientGetSize(
        &self,
        uextent: *const ::windows::runtime::GUID,
        riid: *const ::windows::runtime::GUID,
        pdatasize: *mut u32,
    ) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(uextent),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(pdatasize),
        ))
    }
    pub unsafe fn ClientFillBuffer(
        &self,
        uextent: *const ::windows::runtime::GUID,
        riid: *const ::windows::runtime::GUID,
        pdatasize: *mut u32,
        pdatabuffer: *const ::std::ffi::c_void,
    ) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(uextent),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(pdatasize),
            ::std::mem::transmute(pdatabuffer),
        ))
    }
    pub unsafe fn ClientNotify(
        &self,
        uextent: *const ::windows::runtime::GUID,
        riid: *const ::windows::runtime::GUID,
        cbdatasize: u32,
        pdatabuffer: *const ::std::ffi::c_void,
        ldatarep: u32,
        hrfault: ::windows::runtime::HRESULT,
    ) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(uextent),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(cbdatasize),
            ::std::mem::transmute(pdatabuffer),
            ::std::mem::transmute(ldatarep),
            ::std::mem::transmute(hrfault),
        ))
    }
    pub unsafe fn ServerNotify(
        &self,
        uextent: *const ::windows::runtime::GUID,
        riid: *const ::windows::runtime::GUID,
        cbdatasize: u32,
        pdatabuffer: *const ::std::ffi::c_void,
        ldatarep: u32,
    ) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(uextent),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(cbdatasize),
            ::std::mem::transmute(pdatabuffer),
            ::std::mem::transmute(ldatarep),
        ))
    }
    pub unsafe fn ServerGetSize(
        &self,
        uextent: *const ::windows::runtime::GUID,
        riid: *const ::windows::runtime::GUID,
        hrfault: ::windows::runtime::HRESULT,
        pdatasize: *mut u32,
    ) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(uextent),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(hrfault),
            ::std::mem::transmute(pdatasize),
        ))
    }
    pub unsafe fn ServerFillBuffer(
        &self,
        uextent: *const ::windows::runtime::GUID,
        riid: *const ::windows::runtime::GUID,
        pdatasize: *mut u32,
        pdatabuffer: *const ::std::ffi::c_void,
        hrfault: ::windows::runtime::HRESULT,
    ) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(uextent),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(pdatasize),
            ::std::mem::transmute(pdatabuffer),
            ::std::mem::transmute(hrfault),
        ))
    }
}
unsafe impl ::windows::runtime::Interface for IChannelHook {
    type Vtable = IChannelHook_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        269010080,
        30227,
        4559,
        [154, 241, 0, 32, 175, 110, 114, 244],
    );
}
impl ::std::convert::From<IChannelHook> for ::windows::runtime::IUnknown {
    fn from(value: IChannelHook) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IChannelHook> for ::windows::runtime::IUnknown {
    fn from(value: &IChannelHook) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IChannelHook {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IChannelHook {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IChannelHook_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        uextent: *const ::windows::runtime::GUID,
        riid: *const ::windows::runtime::GUID,
        pdatasize: *mut u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        uextent: *const ::windows::runtime::GUID,
        riid: *const ::windows::runtime::GUID,
        pdatasize: *mut u32,
        pdatabuffer: *const ::std::ffi::c_void,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        uextent: *const ::windows::runtime::GUID,
        riid: *const ::windows::runtime::GUID,
        cbdatasize: u32,
        pdatabuffer: *const ::std::ffi::c_void,
        ldatarep: u32,
        hrfault: ::windows::runtime::HRESULT,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        uextent: *const ::windows::runtime::GUID,
        riid: *const ::windows::runtime::GUID,
        cbdatasize: u32,
        pdatabuffer: *const ::std::ffi::c_void,
        ldatarep: u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        uextent: *const ::windows::runtime::GUID,
        riid: *const ::windows::runtime::GUID,
        hrfault: ::windows::runtime::HRESULT,
        pdatasize: *mut u32,
    ),
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        uextent: *const ::windows::runtime::GUID,
        riid: *const ::windows::runtime::GUID,
        pdatasize: *mut u32,
        pdatabuffer: *const ::std::ffi::c_void,
        hrfault: ::windows::runtime::HRESULT,
    ),
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IClassActivator(::windows::runtime::IUnknown);
impl IClassActivator {
    pub unsafe fn GetClassObject<T: ::windows::runtime::Interface>(
        &self,
        rclsid: *const ::windows::runtime::GUID,
        dwclasscontext: u32,
        locale: u32,
    ) -> ::windows::runtime::Result<T> {
        let mut result__ = ::std::option::Option::None;
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(rclsid),
            ::std::mem::transmute(dwclasscontext),
            ::std::mem::transmute(locale),
            &<T as ::windows::runtime::Interface>::IID,
            &mut result__ as *mut _ as *mut _,
        )
        .and_some(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IClassActivator {
    type Vtable = IClassActivator_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(320, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IClassActivator> for ::windows::runtime::IUnknown {
    fn from(value: IClassActivator) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IClassActivator> for ::windows::runtime::IUnknown {
    fn from(value: &IClassActivator) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IClassActivator {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IClassActivator {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IClassActivator_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        rclsid: *const ::windows::runtime::GUID,
        dwclasscontext: u32,
        locale: u32,
        riid: *const ::windows::runtime::GUID,
        ppv: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IClassFactory(::windows::runtime::IUnknown);
impl IClassFactory {
    pub unsafe fn CreateInstance<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
        T: ::windows::runtime::Interface,
    >(
        &self,
        punkouter: Param0,
    ) -> ::windows::runtime::Result<T> {
        let mut result__ = ::std::option::Option::None;
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            punkouter.into_param().abi(),
            &<T as ::windows::runtime::Interface>::IID,
            &mut result__ as *mut _ as *mut _,
        )
        .and_some(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn LockServer<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        flock: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            flock.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IClassFactory {
    type Vtable = IClassFactory_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(1, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IClassFactory> for ::windows::runtime::IUnknown {
    fn from(value: IClassFactory) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IClassFactory> for ::windows::runtime::IUnknown {
    fn from(value: &IClassFactory) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IClassFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IClassFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IClassFactory_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        punkouter: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        ppvobject: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        flock: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IClassFactory2(::windows::runtime::IUnknown);
impl IClassFactory2 {
    pub unsafe fn CreateInstance<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
        T: ::windows::runtime::Interface,
    >(
        &self,
        punkouter: Param0,
    ) -> ::windows::runtime::Result<T> {
        let mut result__ = ::std::option::Option::None;
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            punkouter.into_param().abi(),
            &<T as ::windows::runtime::Interface>::IID,
            &mut result__ as *mut _ as *mut _,
        )
        .and_some(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn LockServer<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        flock: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            flock.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetLicInfo(&self, plicinfo: *mut LICINFO) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(plicinfo),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RequestLicKey(
        &self,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwreserved),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CreateInstanceLic<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
        Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
        Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        punkouter: Param0,
        punkreserved: Param1,
        riid: *const ::windows::runtime::GUID,
        bstrkey: Param3,
        ppvobj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            punkouter.into_param().abi(),
            punkreserved.into_param().abi(),
            ::std::mem::transmute(riid),
            bstrkey.into_param().abi(),
            ::std::mem::transmute(ppvobj),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IClassFactory2 {
    type Vtable = IClassFactory2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2979443343,
        47796,
        4122,
        [182, 156, 0, 170, 0, 52, 29, 7],
    );
}
impl ::std::convert::From<IClassFactory2> for ::windows::runtime::IUnknown {
    fn from(value: IClassFactory2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IClassFactory2> for ::windows::runtime::IUnknown {
    fn from(value: &IClassFactory2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IClassFactory2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IClassFactory2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IClassFactory2> for IClassFactory {
    fn from(value: IClassFactory2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IClassFactory2> for IClassFactory {
    fn from(value: &IClassFactory2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IClassFactory> for IClassFactory2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IClassFactory> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IClassFactory>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IClassFactory> for &IClassFactory2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IClassFactory> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IClassFactory>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IClassFactory2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        punkouter: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        ppvobject: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        flock: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plicinfo: *mut LICINFO,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwreserved: u32,
        pbstrkey: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        punkouter: ::windows::runtime::RawPtr,
        punkreserved: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        bstrkey: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        ppvobj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IClientSecurity(::windows::runtime::IUnknown);
impl IClientSecurity {
    pub unsafe fn QueryBlanket<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    >(
        &self,
        pproxy: Param0,
        pauthnsvc: *mut u32,
        pauthzsvc: *mut u32,
        pserverprincname: *mut *mut u16,
        pauthnlevel: *mut RPC_C_AUTHN_LEVEL,
        pimplevel: *mut RPC_C_IMP_LEVEL,
        pauthinfo: *mut *mut ::std::ffi::c_void,
        pcapabilites: *mut EOLE_AUTHENTICATION_CAPABILITIES,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pproxy.into_param().abi(),
            ::std::mem::transmute(pauthnsvc),
            ::std::mem::transmute(pauthzsvc),
            ::std::mem::transmute(pserverprincname),
            ::std::mem::transmute(pauthnlevel),
            ::std::mem::transmute(pimplevel),
            ::std::mem::transmute(pauthinfo),
            ::std::mem::transmute(pcapabilites),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetBlanket<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
        Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pproxy: Param0,
        dwauthnsvc: u32,
        dwauthzsvc: u32,
        pserverprincname: Param3,
        dwauthnlevel: RPC_C_AUTHN_LEVEL,
        dwimplevel: RPC_C_IMP_LEVEL,
        pauthinfo: *const ::std::ffi::c_void,
        dwcapabilities: EOLE_AUTHENTICATION_CAPABILITIES,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            pproxy.into_param().abi(),
            ::std::mem::transmute(dwauthnsvc),
            ::std::mem::transmute(dwauthzsvc),
            pserverprincname.into_param().abi(),
            ::std::mem::transmute(dwauthnlevel),
            ::std::mem::transmute(dwimplevel),
            ::std::mem::transmute(pauthinfo),
            ::std::mem::transmute(dwcapabilities),
        )
        .ok()
    }
    pub unsafe fn CopyProxy<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    >(
        &self,
        pproxy: Param0,
    ) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            pproxy.into_param().abi(),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IClientSecurity {
    type Vtable = IClientSecurity_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(317, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IClientSecurity> for ::windows::runtime::IUnknown {
    fn from(value: IClientSecurity) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IClientSecurity> for ::windows::runtime::IUnknown {
    fn from(value: &IClientSecurity) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IClientSecurity {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IClientSecurity {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IClientSecurity_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pproxy: ::windows::runtime::RawPtr,
        pauthnsvc: *mut u32,
        pauthzsvc: *mut u32,
        pserverprincname: *mut *mut u16,
        pauthnlevel: *mut RPC_C_AUTHN_LEVEL,
        pimplevel: *mut RPC_C_IMP_LEVEL,
        pauthinfo: *mut *mut ::std::ffi::c_void,
        pcapabilites: *mut EOLE_AUTHENTICATION_CAPABILITIES,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pproxy: ::windows::runtime::RawPtr,
        dwauthnsvc: u32,
        dwauthzsvc: u32,
        pserverprincname: super::super::Foundation::PWSTR,
        dwauthnlevel: RPC_C_AUTHN_LEVEL,
        dwimplevel: RPC_C_IMP_LEVEL,
        pauthinfo: *const ::std::ffi::c_void,
        dwcapabilities: EOLE_AUTHENTICATION_CAPABILITIES,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pproxy: ::windows::runtime::RawPtr,
        ppcopy: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ICodeInstall(::windows::runtime::IUnknown);
impl ICodeInstall {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetWindow(
        &self,
        rguidreason: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<super::super::Foundation::HWND> {
        let mut result__: <super::super::Foundation::HWND as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(rguidreason),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::HWND>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnCodeInstallProblem<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        ulstatuscode: u32,
        szdestination: Param1,
        szsource: Param2,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ulstatuscode),
            szdestination.into_param().abi(),
            szsource.into_param().abi(),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ICodeInstall {
    type Vtable = ICodeInstall_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430225,
        47865,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<ICodeInstall> for ::windows::runtime::IUnknown {
    fn from(value: ICodeInstall) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ICodeInstall> for ::windows::runtime::IUnknown {
    fn from(value: &ICodeInstall) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ICodeInstall {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ICodeInstall {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<ICodeInstall> for IWindowForBindingUI {
    fn from(value: ICodeInstall) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ICodeInstall> for IWindowForBindingUI {
    fn from(value: &ICodeInstall) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IWindowForBindingUI> for ICodeInstall {
    fn into_param(self) -> ::windows::runtime::Param<'a, IWindowForBindingUI> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IWindowForBindingUI>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IWindowForBindingUI> for &ICodeInstall {
    fn into_param(self) -> ::windows::runtime::Param<'a, IWindowForBindingUI> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IWindowForBindingUI>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICodeInstall_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        rguidreason: *const ::windows::runtime::GUID,
        phwnd: *mut super::super::Foundation::HWND,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ulstatuscode: u32,
        szdestination: super::super::Foundation::PWSTR,
        szsource: super::super::Foundation::PWSTR,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IComThreadingInfo(::windows::runtime::IUnknown);
impl IComThreadingInfo {
    pub unsafe fn GetCurrentApartmentType(&self) -> ::windows::runtime::Result<APTTYPE> {
        let mut result__: <APTTYPE as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<APTTYPE>(result__)
    }
    pub unsafe fn GetCurrentThreadType(&self) -> ::windows::runtime::Result<THDTYPE> {
        let mut result__: <THDTYPE as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<THDTYPE>(result__)
    }
    pub unsafe fn GetCurrentLogicalThreadId(
        &self,
    ) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::GUID>(result__)
    }
    pub unsafe fn SetCurrentLogicalThreadId(
        &self,
        rguid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(rguid),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IComThreadingInfo {
    type Vtable = IComThreadingInfo_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(462, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IComThreadingInfo> for ::windows::runtime::IUnknown {
    fn from(value: IComThreadingInfo) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IComThreadingInfo> for ::windows::runtime::IUnknown {
    fn from(value: &IComThreadingInfo) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IComThreadingInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IComThreadingInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IComThreadingInfo_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        papttype: *mut APTTYPE,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pthreadtype: *mut THDTYPE,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pguidlogicalthreadid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        rguid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IComponentUtil(::windows::runtime::IUnknown);
impl IComponentUtil {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::OleAutomation::ITypeInfo> {
        let mut result__: <super::OleAutomation::ITypeInfo as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::OleAutomation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::OleAutomation::DISPPARAMS,
        pvarresult: *mut super::OleAutomation::VARIANT,
        pexcepinfo: *mut super::OleAutomation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn InstallComponent<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrdllfile: Param0,
        bstrtypelibfile: Param1,
        bstrproxystubdllfile: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            bstrdllfile.into_param().abi(),
            bstrtypelibfile.into_param().abi(),
            bstrproxystubdllfile.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ImportComponent<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrclsid: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            bstrclsid.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ImportComponentByName<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrprogid: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            bstrprogid.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_OleAutomation"))]
    pub unsafe fn GetCLSIDs<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrdllfile: Param0,
        bstrtypelibfile: Param1,
        aclsids: *mut *mut super::OleAutomation::SAFEARRAY,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            bstrdllfile.into_param().abi(),
            bstrtypelibfile.into_param().abi(),
            ::std::mem::transmute(aclsids),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IComponentUtil {
    type Vtable = IComponentUtil_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        1857169523,
        35353,
        4560,
        [129, 182, 0, 160, 201, 35, 28, 41],
    );
}
impl ::std::convert::From<IComponentUtil> for ::windows::runtime::IUnknown {
    fn from(value: IComponentUtil) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IComponentUtil> for ::windows::runtime::IUnknown {
    fn from(value: &IComponentUtil) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IComponentUtil {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IComponentUtil {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl ::std::convert::From<IComponentUtil> for super::OleAutomation::IDispatch {
    fn from(value: IComponentUtil) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl ::std::convert::From<&IComponentUtil> for super::OleAutomation::IDispatch {
    fn from(value: &IComponentUtil) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::OleAutomation::IDispatch> for IComponentUtil {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::OleAutomation::IDispatch> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<super::OleAutomation::IDispatch>::into(self),
        )
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::OleAutomation::IDispatch> for &IComponentUtil {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::OleAutomation::IDispatch> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<super::OleAutomation::IDispatch>::into(
                ::std::clone::Clone::clone(self),
            ),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IComponentUtil_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_OleAutomation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::OleAutomation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::OleAutomation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrdllfile: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        bstrtypelibfile: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        bstrproxystubdllfile: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrclsid: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrprogid: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_OleAutomation"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrdllfile: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        bstrtypelibfile: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        aclsids: *mut *mut super::OleAutomation::SAFEARRAY,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_OleAutomation")))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IConnectionPoint(::windows::runtime::IUnknown);
impl IConnectionPoint {
    pub unsafe fn GetConnectionInterface(
        &self,
    ) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::GUID>(result__)
    }
    pub unsafe fn GetConnectionPointContainer(
        &self,
    ) -> ::windows::runtime::Result<IConnectionPointContainer> {
        let mut result__: <IConnectionPointContainer as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IConnectionPointContainer>(result__)
    }
    pub unsafe fn Advise<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    >(
        &self,
        punksink: Param0,
    ) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            punksink.into_param().abi(),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn Unadvise(&self, dwcookie: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwcookie),
        )
        .ok()
    }
    pub unsafe fn EnumConnections(&self) -> ::windows::runtime::Result<IEnumConnections> {
        let mut result__: <IEnumConnections as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumConnections>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IConnectionPoint {
    type Vtable = IConnectionPoint_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2979443334,
        47796,
        4122,
        [182, 156, 0, 170, 0, 52, 29, 7],
    );
}
impl ::std::convert::From<IConnectionPoint> for ::windows::runtime::IUnknown {
    fn from(value: IConnectionPoint) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IConnectionPoint> for ::windows::runtime::IUnknown {
    fn from(value: &IConnectionPoint) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IConnectionPoint {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IConnectionPoint {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IConnectionPoint_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        piid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppcpc: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        punksink: ::windows::runtime::RawPtr,
        pdwcookie: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwcookie: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenum: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IConnectionPointContainer(::windows::runtime::IUnknown);
impl IConnectionPointContainer {
    pub unsafe fn EnumConnectionPoints(&self) -> ::windows::runtime::Result<IEnumConnectionPoints> {
        let mut result__: <IEnumConnectionPoints as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumConnectionPoints>(result__)
    }
    pub unsafe fn FindConnectionPoint(
        &self,
        riid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<IConnectionPoint> {
        let mut result__: <IConnectionPoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            &mut result__,
        )
        .from_abi::<IConnectionPoint>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IConnectionPointContainer {
    type Vtable = IConnectionPointContainer_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2979443332,
        47796,
        4122,
        [182, 156, 0, 170, 0, 52, 29, 7],
    );
}
impl ::std::convert::From<IConnectionPointContainer> for ::windows::runtime::IUnknown {
    fn from(value: IConnectionPointContainer) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IConnectionPointContainer> for ::windows::runtime::IUnknown {
    fn from(value: &IConnectionPointContainer) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IConnectionPointContainer
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IConnectionPointContainer
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IConnectionPointContainer_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenum: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        ppcp: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct IContext(pub u8);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IContextCallback(::windows::runtime::IUnknown);
impl IContextCallback {
    pub unsafe fn ContextCallback<
        'a,
        Param4: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    >(
        &self,
        pfncallback: ::std::option::Option<PFNCONTEXTCALL>,
        pparam: *const ComCallData,
        riid: *const ::windows::runtime::GUID,
        imethod: i32,
        punk: Param4,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pfncallback),
            ::std::mem::transmute(pparam),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(imethod),
            punk.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IContextCallback {
    type Vtable = IContextCallback_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(474, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IContextCallback> for ::windows::runtime::IUnknown {
    fn from(value: IContextCallback) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IContextCallback> for ::windows::runtime::IUnknown {
    fn from(value: &IContextCallback) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IContextCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IContextCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContextCallback_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pfncallback: ::windows::runtime::RawPtr,
        pparam: *const ComCallData,
        riid: *const ::windows::runtime::GUID,
        imethod: i32,
        punk: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IContinue(::windows::runtime::IUnknown);
impl IContinue {
    pub unsafe fn FContinue(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IContinue {
    type Vtable = IContinue_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(298, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IContinue> for ::windows::runtime::IUnknown {
    fn from(value: IContinue) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IContinue> for ::windows::runtime::IUnknown {
    fn from(value: &IContinue) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IContinue {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IContinue {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContinue_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IContinueCallback(::windows::runtime::IUnknown);
impl IContinueCallback {
    pub unsafe fn FContinue(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn FContinuePrinting<
        'a,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        ncntprinted: i32,
        ncurpage: i32,
        pwszprintstatus: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ncntprinted),
            ::std::mem::transmute(ncurpage),
            pwszprintstatus.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IContinueCallback {
    type Vtable = IContinueCallback_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3072507082,
        20072,
        4123,
        [162, 188, 0, 170, 0, 64, 71, 112],
    );
}
impl ::std::convert::From<IContinueCallback> for ::windows::runtime::IUnknown {
    fn from(value: IContinueCallback) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IContinueCallback> for ::windows::runtime::IUnknown {
    fn from(value: &IContinueCallback) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IContinueCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IContinueCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContinueCallback_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ncntprinted: i32,
        ncurpage: i32,
        pwszprintstatus: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
pub const IDC_BZ_ICON: u32 = 601u32;
pub const IDC_BZ_MESSAGE1: u32 = 602u32;
pub const IDC_BZ_RETRY: u32 = 600u32;
pub const IDC_BZ_SWITCHTO: u32 = 604u32;
pub const IDC_CI_BROWSE: u32 = 130u32;
pub const IDC_CI_CURRENT: u32 = 121u32;
pub const IDC_CI_CURRENTICON: u32 = 122u32;
pub const IDC_CI_DEFAULT: u32 = 123u32;
pub const IDC_CI_DEFAULTICON: u32 = 124u32;
pub const IDC_CI_FROMFILE: u32 = 125u32;
pub const IDC_CI_FROMFILEEDIT: u32 = 126u32;
pub const IDC_CI_GROUP: u32 = 120u32;
pub const IDC_CI_ICONDISPLAY: u32 = 131u32;
pub const IDC_CI_ICONLIST: u32 = 127u32;
pub const IDC_CI_LABEL: u32 = 128u32;
pub const IDC_CI_LABELEDIT: u32 = 129u32;
pub const IDC_CV_ACTIVATEAS: u32 = 156u32;
pub const IDC_CV_ACTIVATELIST: u32 = 154u32;
pub const IDC_CV_CHANGEICON: u32 = 153u32;
pub const IDC_CV_CONVERTLIST: u32 = 158u32;
pub const IDC_CV_CONVERTTO: u32 = 155u32;
pub const IDC_CV_DISPLAYASICON: u32 = 152u32;
pub const IDC_CV_ICONDISPLAY: u32 = 165u32;
pub const IDC_CV_OBJECTTYPE: u32 = 150u32;
pub const IDC_CV_RESULTTEXT: u32 = 157u32;
pub const IDC_EL_AUTOMATIC: u32 = 202u32;
pub const IDC_EL_CANCELLINK: u32 = 209u32;
pub const IDC_EL_CHANGESOURCE: u32 = 201u32;
pub const IDC_EL_COL1: u32 = 220u32;
pub const IDC_EL_COL2: u32 = 221u32;
pub const IDC_EL_COL3: u32 = 222u32;
pub const IDC_EL_LINKSLISTBOX: u32 = 206u32;
pub const IDC_EL_LINKSOURCE: u32 = 216u32;
pub const IDC_EL_LINKTYPE: u32 = 217u32;
pub const IDC_EL_MANUAL: u32 = 212u32;
pub const IDC_EL_OPENSOURCE: u32 = 211u32;
pub const IDC_EL_UPDATENOW: u32 = 210u32;
pub const IDC_GP_CONVERT: u32 = 1013u32;
pub const IDC_GP_OBJECTICON: u32 = 1014u32;
pub const IDC_GP_OBJECTLOCATION: u32 = 1022u32;
pub const IDC_GP_OBJECTNAME: u32 = 1009u32;
pub const IDC_GP_OBJECTSIZE: u32 = 1011u32;
pub const IDC_GP_OBJECTTYPE: u32 = 1010u32;
pub const IDC_IO_ADDCONTROL: u32 = 2115u32;
pub const IDC_IO_CHANGEICON: u32 = 2105u32;
pub const IDC_IO_CONTROLTYPELIST: u32 = 2116u32;
pub const IDC_IO_CREATEFROMFILE: u32 = 2101u32;
pub const IDC_IO_CREATENEW: u32 = 2100u32;
pub const IDC_IO_DISPLAYASICON: u32 = 2104u32;
pub const IDC_IO_FILE: u32 = 2106u32;
pub const IDC_IO_FILEDISPLAY: u32 = 2107u32;
pub const IDC_IO_FILETEXT: u32 = 2112u32;
pub const IDC_IO_FILETYPE: u32 = 2113u32;
pub const IDC_IO_ICONDISPLAY: u32 = 2110u32;
pub const IDC_IO_INSERTCONTROL: u32 = 2114u32;
pub const IDC_IO_LINKFILE: u32 = 2102u32;
pub const IDC_IO_OBJECTTYPELIST: u32 = 2103u32;
pub const IDC_IO_OBJECTTYPETEXT: u32 = 2111u32;
pub const IDC_IO_RESULTIMAGE: u32 = 2108u32;
pub const IDC_IO_RESULTTEXT: u32 = 2109u32;
pub const IDC_LP_AUTOMATIC: u32 = 1016u32;
pub const IDC_LP_BREAKLINK: u32 = 1008u32;
pub const IDC_LP_CHANGESOURCE: u32 = 1015u32;
pub const IDC_LP_DATE: u32 = 1018u32;
pub const IDC_LP_LINKSOURCE: u32 = 1012u32;
pub const IDC_LP_MANUAL: u32 = 1017u32;
pub const IDC_LP_OPENSOURCE: u32 = 1006u32;
pub const IDC_LP_TIME: u32 = 1019u32;
pub const IDC_LP_UPDATENOW: u32 = 1007u32;
pub const IDC_OLEUIHELP: u32 = 99u32;
pub const IDC_PS_CHANGEICON: u32 = 508u32;
pub const IDC_PS_DISPLAYASICON: u32 = 506u32;
pub const IDC_PS_DISPLAYLIST: u32 = 505u32;
pub const IDC_PS_ICONDISPLAY: u32 = 507u32;
pub const IDC_PS_PASTE: u32 = 500u32;
pub const IDC_PS_PASTELINK: u32 = 501u32;
pub const IDC_PS_PASTELINKLIST: u32 = 504u32;
pub const IDC_PS_PASTELIST: u32 = 503u32;
pub const IDC_PS_RESULTIMAGE: u32 = 509u32;
pub const IDC_PS_RESULTTEXT: u32 = 510u32;
pub const IDC_PS_SOURCETEXT: u32 = 502u32;
pub const IDC_PU_CONVERT: u32 = 902u32;
pub const IDC_PU_ICON: u32 = 908u32;
pub const IDC_PU_LINKS: u32 = 900u32;
pub const IDC_PU_TEXT: u32 = 901u32;
pub const IDC_UL_METER: u32 = 1029u32;
pub const IDC_UL_PERCENT: u32 = 1031u32;
pub const IDC_UL_PROGRESS: u32 = 1032u32;
pub const IDC_UL_STOP: u32 = 1030u32;
pub const IDC_VP_ASICON: u32 = 1003u32;
pub const IDC_VP_CHANGEICON: u32 = 1001u32;
pub const IDC_VP_EDITABLE: u32 = 1002u32;
pub const IDC_VP_ICONDISPLAY: u32 = 1021u32;
pub const IDC_VP_PERCENT: u32 = 1000u32;
pub const IDC_VP_RELATIVE: u32 = 1005u32;
pub const IDC_VP_RESULTIMAGE: u32 = 1033u32;
pub const IDC_VP_SCALETXT: u32 = 1034u32;
pub const IDC_VP_SPIN: u32 = 1006u32;
pub const IDD_BUSY: u32 = 1006u32;
pub const IDD_CANNOTUPDATELINK: u32 = 1008u32;
pub const IDD_CHANGEICON: u32 = 1001u32;
pub const IDD_CHANGEICONBROWSE: u32 = 1011u32;
pub const IDD_CHANGESOURCE: u32 = 1009u32;
pub const IDD_CHANGESOURCE4: u32 = 1013u32;
pub const IDD_CONVERT: u32 = 1002u32;
pub const IDD_CONVERT4: u32 = 1103u32;
pub const IDD_CONVERTONLY: u32 = 1012u32;
pub const IDD_CONVERTONLY4: u32 = 1104u32;
pub const IDD_EDITLINKS: u32 = 1004u32;
pub const IDD_EDITLINKS4: u32 = 1105u32;
pub const IDD_GNRLPROPS: u32 = 1100u32;
pub const IDD_GNRLPROPS4: u32 = 1106u32;
pub const IDD_INSERTFILEBROWSE: u32 = 1010u32;
pub const IDD_INSERTOBJECT: u32 = 1000u32;
pub const IDD_LINKPROPS: u32 = 1102u32;
pub const IDD_LINKPROPS4: u32 = 1107u32;
pub const IDD_LINKSOURCEUNAVAILABLE: u32 = 1020u32;
pub const IDD_LINKTYPECHANGED: u32 = 1022u32;
pub const IDD_LINKTYPECHANGEDA: u32 = 1026u32;
pub const IDD_LINKTYPECHANGEDW: u32 = 1022u32;
pub const IDD_OUTOFMEMORY: u32 = 1024u32;
pub const IDD_PASTESPECIAL: u32 = 1003u32;
pub const IDD_PASTESPECIAL4: u32 = 1108u32;
pub const IDD_SERVERNOTFOUND: u32 = 1023u32;
pub const IDD_SERVERNOTREG: u32 = 1021u32;
pub const IDD_SERVERNOTREGA: u32 = 1025u32;
pub const IDD_SERVERNOTREGW: u32 = 1021u32;
pub const IDD_UPDATELINKS: u32 = 1007u32;
pub const IDD_VIEWPROPS: u32 = 1101u32;
pub const ID_BROWSE_ADDCONTROL: u32 = 3u32;
pub const ID_BROWSE_CHANGEICON: u32 = 1u32;
pub const ID_BROWSE_CHANGESOURCE: u32 = 4u32;
pub const ID_BROWSE_INSERTFILE: u32 = 2u32;
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IDataAdviseHolder(::windows::runtime::IUnknown);
impl IDataAdviseHolder {
    pub unsafe fn Advise<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IDataObject>,
        Param3: ::windows::runtime::IntoParam<'a, IAdviseSink>,
    >(
        &self,
        pdataobject: Param0,
        pfetc: *const FORMATETC,
        advf: u32,
        padvise: Param3,
    ) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pdataobject.into_param().abi(),
            ::std::mem::transmute(pfetc),
            ::std::mem::transmute(advf),
            padvise.into_param().abi(),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn Unadvise(&self, dwconnection: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwconnection),
        )
        .ok()
    }
    pub unsafe fn EnumAdvise(&self) -> ::windows::runtime::Result<IEnumSTATDATA> {
        let mut result__: <IEnumSTATDATA as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumSTATDATA>(result__)
    }
    pub unsafe fn SendOnDataChange<'a, Param0: ::windows::runtime::IntoParam<'a, IDataObject>>(
        &self,
        pdataobject: Param0,
        dwreserved: u32,
        advf: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            pdataobject.into_param().abi(),
            ::std::mem::transmute(dwreserved),
            ::std::mem::transmute(advf),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDataAdviseHolder {
    type Vtable = IDataAdviseHolder_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(272, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IDataAdviseHolder> for ::windows::runtime::IUnknown {
    fn from(value: IDataAdviseHolder) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDataAdviseHolder> for ::windows::runtime::IUnknown {
    fn from(value: &IDataAdviseHolder) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IDataAdviseHolder {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IDataAdviseHolder {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataAdviseHolder_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdataobject: ::windows::runtime::RawPtr,
        pfetc: *const FORMATETC,
        advf: u32,
        padvise: ::windows::runtime::RawPtr,
        pdwconnection: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwconnection: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenumadvise: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdataobject: ::windows::runtime::RawPtr,
        dwreserved: u32,
        advf: u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IDataFilter(::windows::runtime::IUnknown);
impl IDataFilter {
    pub unsafe fn DoEncode(
        &self,
        dwflags: u32,
        linbuffersize: i32,
        pbinbuffer: *const u8,
        loutbuffersize: i32,
        pboutbuffer: *mut u8,
        linbytesavailable: i32,
        plinbytesread: *mut i32,
        ploutbyteswritten: *mut i32,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(linbuffersize),
            ::std::mem::transmute(pbinbuffer),
            ::std::mem::transmute(loutbuffersize),
            ::std::mem::transmute(pboutbuffer),
            ::std::mem::transmute(linbytesavailable),
            ::std::mem::transmute(plinbytesread),
            ::std::mem::transmute(ploutbyteswritten),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    pub unsafe fn DoDecode(
        &self,
        dwflags: u32,
        linbuffersize: i32,
        pbinbuffer: *const u8,
        loutbuffersize: i32,
        pboutbuffer: *mut u8,
        linbytesavailable: i32,
        plinbytesread: *mut i32,
        ploutbyteswritten: *mut i32,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(linbuffersize),
            ::std::mem::transmute(pbinbuffer),
            ::std::mem::transmute(loutbuffersize),
            ::std::mem::transmute(pboutbuffer),
            ::std::mem::transmute(linbytesavailable),
            ::std::mem::transmute(plinbytesread),
            ::std::mem::transmute(ploutbyteswritten),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    pub unsafe fn SetEncodingLevel(&self, dwenclevel: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwenclevel),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDataFilter {
    type Vtable = IDataFilter_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        1775324288,
        49550,
        4560,
        [169, 206, 0, 96, 151, 148, 35, 17],
    );
}
impl ::std::convert::From<IDataFilter> for ::windows::runtime::IUnknown {
    fn from(value: IDataFilter) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDataFilter> for ::windows::runtime::IUnknown {
    fn from(value: &IDataFilter) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IDataFilter {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IDataFilter {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataFilter_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwflags: u32,
        linbuffersize: i32,
        pbinbuffer: *const u8,
        loutbuffersize: i32,
        pboutbuffer: *mut u8,
        linbytesavailable: i32,
        plinbytesread: *mut i32,
        ploutbyteswritten: *mut i32,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwflags: u32,
        linbuffersize: i32,
        pbinbuffer: *const u8,
        loutbuffersize: i32,
        pboutbuffer: *mut u8,
        linbytesavailable: i32,
        plinbytesread: *mut i32,
        ploutbyteswritten: *mut i32,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwenclevel: u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IDataObject(::windows::runtime::IUnknown);
impl IDataObject {
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn GetData(
        &self,
        pformatetcin: *const FORMATETC,
    ) -> ::windows::runtime::Result<STGMEDIUM> {
        let mut result__: <STGMEDIUM as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pformatetcin),
            &mut result__,
        )
        .from_abi::<STGMEDIUM>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn GetDataHere(
        &self,
        pformatetc: *const FORMATETC,
        pmedium: *mut STGMEDIUM,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pformatetc),
            ::std::mem::transmute(pmedium),
        )
        .ok()
    }
    pub unsafe fn QueryGetData(
        &self,
        pformatetc: *const FORMATETC,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pformatetc),
        )
        .ok()
    }
    pub unsafe fn GetCanonicalFormatEtc(
        &self,
        pformatectin: *const FORMATETC,
    ) -> ::windows::runtime::Result<FORMATETC> {
        let mut result__: <FORMATETC as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pformatectin),
            &mut result__,
        )
        .from_abi::<FORMATETC>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn SetData<
        'a,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        pformatetc: *const FORMATETC,
        pmedium: *const STGMEDIUM,
        frelease: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pformatetc),
            ::std::mem::transmute(pmedium),
            frelease.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn EnumFormatEtc(
        &self,
        dwdirection: u32,
    ) -> ::windows::runtime::Result<IEnumFORMATETC> {
        let mut result__: <IEnumFORMATETC as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwdirection),
            &mut result__,
        )
        .from_abi::<IEnumFORMATETC>(result__)
    }
    pub unsafe fn DAdvise<'a, Param2: ::windows::runtime::IntoParam<'a, IAdviseSink>>(
        &self,
        pformatetc: *const FORMATETC,
        advf: u32,
        padvsink: Param2,
    ) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pformatetc),
            ::std::mem::transmute(advf),
            padvsink.into_param().abi(),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn DUnadvise(&self, dwconnection: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwconnection),
        )
        .ok()
    }
    pub unsafe fn EnumDAdvise(&self) -> ::windows::runtime::Result<IEnumSTATDATA> {
        let mut result__: <IEnumSTATDATA as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumSTATDATA>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDataObject {
    type Vtable = IDataObject_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(270, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IDataObject> for ::windows::runtime::IUnknown {
    fn from(value: IDataObject) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDataObject> for ::windows::runtime::IUnknown {
    fn from(value: &IDataObject) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IDataObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IDataObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataObject_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pformatetcin: *const FORMATETC,
        pmedium: *mut ::std::mem::ManuallyDrop<STGMEDIUM>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pformatetc: *const FORMATETC,
        pmedium: *mut ::std::mem::ManuallyDrop<STGMEDIUM>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pformatetc: *const FORMATETC,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pformatectin: *const FORMATETC,
        pformatetcout: *mut FORMATETC,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pformatetc: *const FORMATETC,
        pmedium: *const ::std::mem::ManuallyDrop<STGMEDIUM>,
        frelease: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwdirection: u32,
        ppenumformatetc: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pformatetc: *const FORMATETC,
        advf: u32,
        padvsink: ::windows::runtime::RawPtr,
        pdwconnection: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwconnection: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenumadvise: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IDropSource(::windows::runtime::IUnknown);
impl IDropSource {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn QueryContinueDrag<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fescapepressed: Param0,
        grfkeystate: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            fescapepressed.into_param().abi(),
            ::std::mem::transmute(grfkeystate),
        )
        .ok()
    }
    pub unsafe fn GiveFeedback(&self, dweffect: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dweffect),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDropSource {
    type Vtable = IDropSource_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(289, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IDropSource> for ::windows::runtime::IUnknown {
    fn from(value: IDropSource) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDropSource> for ::windows::runtime::IUnknown {
    fn from(value: &IDropSource) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IDropSource {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IDropSource {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDropSource_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fescapepressed: super::super::Foundation::BOOL,
        grfkeystate: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dweffect: u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IDropSourceNotify(::windows::runtime::IUnknown);
impl IDropSourceNotify {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn DragEnterTarget<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>,
    >(
        &self,
        hwndtarget: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            hwndtarget.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DragLeaveTarget(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDropSourceNotify {
    type Vtable = IDropSourceNotify_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(299, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IDropSourceNotify> for ::windows::runtime::IUnknown {
    fn from(value: IDropSourceNotify) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDropSourceNotify> for ::windows::runtime::IUnknown {
    fn from(value: &IDropSourceNotify) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IDropSourceNotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IDropSourceNotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDropSourceNotify_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hwndtarget: super::super::Foundation::HWND,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IDropTarget(::windows::runtime::IUnknown);
impl IDropTarget {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn DragEnter<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IDataObject>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::POINTL>,
    >(
        &self,
        pdataobj: Param0,
        grfkeystate: u32,
        pt: Param2,
        pdweffect: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pdataobj.into_param().abi(),
            ::std::mem::transmute(grfkeystate),
            pt.into_param().abi(),
            ::std::mem::transmute(pdweffect),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn DragOver<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::POINTL>,
    >(
        &self,
        grfkeystate: u32,
        pt: Param1,
        pdweffect: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(grfkeystate),
            pt.into_param().abi(),
            ::std::mem::transmute(pdweffect),
        )
        .ok()
    }
    pub unsafe fn DragLeave(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Drop<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IDataObject>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::POINTL>,
    >(
        &self,
        pdataobj: Param0,
        grfkeystate: u32,
        pt: Param2,
        pdweffect: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            pdataobj.into_param().abi(),
            ::std::mem::transmute(grfkeystate),
            pt.into_param().abi(),
            ::std::mem::transmute(pdweffect),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDropTarget {
    type Vtable = IDropTarget_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(290, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IDropTarget> for ::windows::runtime::IUnknown {
    fn from(value: IDropTarget) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDropTarget> for ::windows::runtime::IUnknown {
    fn from(value: &IDropTarget) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IDropTarget {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IDropTarget {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDropTarget_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdataobj: ::windows::runtime::RawPtr,
        grfkeystate: u32,
        pt: super::super::Foundation::POINTL,
        pdweffect: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        grfkeystate: u32,
        pt: super::super::Foundation::POINTL,
        pdweffect: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdataobj: ::windows::runtime::RawPtr,
        grfkeystate: u32,
        pt: super::super::Foundation::POINTL,
        pdweffect: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IDummyHICONIncluder(::windows::runtime::IUnknown);
impl IDummyHICONIncluder {
    #[cfg(all(
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_UI_WindowsAndMessaging"
    ))]
    pub unsafe fn Dummy<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::UI::WindowsAndMessaging::HICON>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HDC>,
    >(
        &self,
        h1: Param0,
        h2: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            h1.into_param().abi(),
            h2.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDummyHICONIncluder {
    type Vtable = IDummyHICONIncluder_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2490994910,
        52264,
        4562,
        [160, 247, 0, 128, 95, 133, 143, 177],
    );
}
impl ::std::convert::From<IDummyHICONIncluder> for ::windows::runtime::IUnknown {
    fn from(value: IDummyHICONIncluder) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDummyHICONIncluder> for ::windows::runtime::IUnknown {
    fn from(value: &IDummyHICONIncluder) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IDummyHICONIncluder {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IDummyHICONIncluder {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDummyHICONIncluder_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_UI_WindowsAndMessaging"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        h1: super::super::UI::WindowsAndMessaging::HICON,
        h2: super::super::Graphics::Gdi::HDC,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_UI_WindowsAndMessaging"
    )))]
    usize,
);
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn IEGetUserPrivateNamespaceName() -> super::super::Foundation::PWSTR {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn IEGetUserPrivateNamespaceName() -> super::super::Foundation::PWSTR;
        }
        ::std::mem::transmute(IEGetUserPrivateNamespaceName())
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn IEInstallScope() -> ::windows::runtime::Result<u32> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn IEInstallScope(pdwscope: *mut u32) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        IEInstallScope(&mut result__).from_abi::<u32>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct IEObjectType(pub i32);
pub const IE_EPM_OBJECT_EVENT: IEObjectType = IEObjectType(0i32);
pub const IE_EPM_OBJECT_MUTEX: IEObjectType = IEObjectType(1i32);
pub const IE_EPM_OBJECT_SEMAPHORE: IEObjectType = IEObjectType(2i32);
pub const IE_EPM_OBJECT_SHARED_MEMORY: IEObjectType = IEObjectType(3i32);
pub const IE_EPM_OBJECT_WAITABLE_TIMER: IEObjectType = IEObjectType(4i32);
pub const IE_EPM_OBJECT_FILE: IEObjectType = IEObjectType(5i32);
pub const IE_EPM_OBJECT_NAMED_PIPE: IEObjectType = IEObjectType(6i32);
pub const IE_EPM_OBJECT_REGISTRY: IEObjectType = IEObjectType(7i32);
impl ::std::convert::From<i32> for IEObjectType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for IEObjectType {
    type Abi = Self;
    type DefaultType = Self;
}
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IEncodingFilterFactory(::windows::runtime::IUnknown);
impl IEncodingFilterFactory {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn FindBestFilter<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param2: ::windows::runtime::IntoParam<'a, DATAINFO>,
    >(
        &self,
        pwzcodein: Param0,
        pwzcodeout: Param1,
        info: Param2,
    ) -> ::windows::runtime::Result<IDataFilter> {
        let mut result__: <IDataFilter as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pwzcodein.into_param().abi(),
            pwzcodeout.into_param().abi(),
            info.into_param().abi(),
            &mut result__,
        )
        .from_abi::<IDataFilter>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetDefaultFilter<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwzcodein: Param0,
        pwzcodeout: Param1,
    ) -> ::windows::runtime::Result<IDataFilter> {
        let mut result__: <IDataFilter as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            pwzcodein.into_param().abi(),
            pwzcodeout.into_param().abi(),
            &mut result__,
        )
        .from_abi::<IDataFilter>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEncodingFilterFactory {
    type Vtable = IEncodingFilterFactory_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        1891491328,
        49550,
        4560,
        [169, 206, 0, 96, 151, 148, 35, 17],
    );
}
impl ::std::convert::From<IEncodingFilterFactory> for ::windows::runtime::IUnknown {
    fn from(value: IEncodingFilterFactory) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IEncodingFilterFactory> for ::windows::runtime::IUnknown {
    fn from(value: &IEncodingFilterFactory) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IEncodingFilterFactory
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IEncodingFilterFactory
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEncodingFilterFactory_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwzcodein: super::super::Foundation::PWSTR,
        pwzcodeout: super::super::Foundation::PWSTR,
        info: DATAINFO,
        ppdf: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwzcodein: super::super::Foundation::PWSTR,
        pwzcodeout: super::super::Foundation::PWSTR,
        ppdf: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IEnterpriseDropTarget(::windows::runtime::IUnknown);
impl IEnterpriseDropTarget {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetDropSourceEnterpriseId<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        identity: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            identity.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsEvaluatingEdpPolicy(
        &self,
    ) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BOOL>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEnterpriseDropTarget {
    type Vtable = IEnterpriseDropTarget_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        957233272,
        64853,
        19992,
        [129, 157, 70, 130, 8, 28, 12, 253],
    );
}
impl ::std::convert::From<IEnterpriseDropTarget> for ::windows::runtime::IUnknown {
    fn from(value: IEnterpriseDropTarget) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IEnterpriseDropTarget> for ::windows::runtime::IUnknown {
    fn from(value: &IEnterpriseDropTarget) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IEnterpriseDropTarget {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IEnterpriseDropTarget
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnterpriseDropTarget_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        identity: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        value: *mut super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IEnumCATEGORYINFO(::windows::runtime::IUnknown);
impl IEnumCATEGORYINFO {
    pub unsafe fn Next(
        &self,
        celt: u32,
        rgelt: *mut CATEGORYINFO,
        pceltfetched: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(celt),
            ::std::mem::transmute(rgelt),
            ::std::mem::transmute(pceltfetched),
        )
        .ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(celt),
        )
        .ok()
    }
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IEnumCATEGORYINFO> {
        let mut result__: <IEnumCATEGORYINFO as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumCATEGORYINFO>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEnumCATEGORYINFO {
    type Vtable = IEnumCATEGORYINFO_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(188433, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IEnumCATEGORYINFO> for ::windows::runtime::IUnknown {
    fn from(value: IEnumCATEGORYINFO) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IEnumCATEGORYINFO> for ::windows::runtime::IUnknown {
    fn from(value: &IEnumCATEGORYINFO) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IEnumCATEGORYINFO {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IEnumCATEGORYINFO {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumCATEGORYINFO_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        celt: u32,
        rgelt: *mut CATEGORYINFO,
        pceltfetched: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        celt: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenum: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IEnumConnectionPoints(::windows::runtime::IUnknown);
impl IEnumConnectionPoints {
    pub unsafe fn Next(
        &self,
        cconnections: u32,
        ppcp: *mut ::std::option::Option<IConnectionPoint>,
        pcfetched: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(cconnections),
            ::std::mem::transmute(ppcp),
            ::std::mem::transmute(pcfetched),
        )
        .ok()
    }
    pub unsafe fn Skip(&self, cconnections: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(cconnections),
        )
        .ok()
    }
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IEnumConnectionPoints> {
        let mut result__: <IEnumConnectionPoints as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumConnectionPoints>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEnumConnectionPoints {
    type Vtable = IEnumConnectionPoints_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2979443333,
        47796,
        4122,
        [182, 156, 0, 170, 0, 52, 29, 7],
    );
}
impl ::std::convert::From<IEnumConnectionPoints> for ::windows::runtime::IUnknown {
    fn from(value: IEnumConnectionPoints) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IEnumConnectionPoints> for ::windows::runtime::IUnknown {
    fn from(value: &IEnumConnectionPoints) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IEnumConnectionPoints {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IEnumConnectionPoints
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumConnectionPoints_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        cconnections: u32,
        ppcp: *mut ::windows::runtime::RawPtr,
        pcfetched: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        cconnections: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenum: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IEnumConnections(::windows::runtime::IUnknown);
impl IEnumConnections {
    pub unsafe fn Next(
        &self,
        cconnections: u32,
        rgcd: *mut CONNECTDATA,
        pcfetched: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(cconnections),
            ::std::mem::transmute(rgcd),
            ::std::mem::transmute(pcfetched),
        )
        .ok()
    }
    pub unsafe fn Skip(&self, cconnections: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(cconnections),
        )
        .ok()
    }
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IEnumConnections> {
        let mut result__: <IEnumConnections as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumConnections>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEnumConnections {
    type Vtable = IEnumConnections_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2979443335,
        47796,
        4122,
        [182, 156, 0, 170, 0, 52, 29, 7],
    );
}
impl ::std::convert::From<IEnumConnections> for ::windows::runtime::IUnknown {
    fn from(value: IEnumConnections) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IEnumConnections> for ::windows::runtime::IUnknown {
    fn from(value: &IEnumConnections) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IEnumConnections {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IEnumConnections {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumConnections_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        cconnections: u32,
        rgcd: *mut ::std::mem::ManuallyDrop<CONNECTDATA>,
        pcfetched: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        cconnections: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenum: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct IEnumContextProps(pub u8);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IEnumFORMATETC(::windows::runtime::IUnknown);
impl IEnumFORMATETC {
    pub unsafe fn Next(
        &self,
        celt: u32,
        rgelt: *mut FORMATETC,
        pceltfetched: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(celt),
            ::std::mem::transmute(rgelt),
            ::std::mem::transmute(pceltfetched),
        )
        .ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(celt),
        )
        .ok()
    }
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IEnumFORMATETC> {
        let mut result__: <IEnumFORMATETC as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumFORMATETC>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEnumFORMATETC {
    type Vtable = IEnumFORMATETC_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(259, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IEnumFORMATETC> for ::windows::runtime::IUnknown {
    fn from(value: IEnumFORMATETC) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IEnumFORMATETC> for ::windows::runtime::IUnknown {
    fn from(value: &IEnumFORMATETC) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IEnumFORMATETC {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IEnumFORMATETC {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumFORMATETC_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        celt: u32,
        rgelt: *mut FORMATETC,
        pceltfetched: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        celt: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenum: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IEnumGUID(::windows::runtime::IUnknown);
impl IEnumGUID {
    pub unsafe fn Next(
        &self,
        celt: u32,
        rgelt: *mut ::windows::runtime::GUID,
        pceltfetched: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(celt),
            ::std::mem::transmute(rgelt),
            ::std::mem::transmute(pceltfetched),
        )
        .ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(celt),
        )
        .ok()
    }
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IEnumGUID> {
        let mut result__: <IEnumGUID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumGUID>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEnumGUID {
    type Vtable = IEnumGUID_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(188416, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IEnumGUID> for ::windows::runtime::IUnknown {
    fn from(value: IEnumGUID) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IEnumGUID> for ::windows::runtime::IUnknown {
    fn from(value: &IEnumGUID) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IEnumGUID {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IEnumGUID {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumGUID_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        celt: u32,
        rgelt: *mut ::windows::runtime::GUID,
        pceltfetched: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        celt: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenum: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IEnumMoniker(::windows::runtime::IUnknown);
impl IEnumMoniker {
    pub unsafe fn Next(
        &self,
        celt: u32,
        rgelt: *mut ::std::option::Option<IMoniker>,
        pceltfetched: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(celt),
            ::std::mem::transmute(rgelt),
            ::std::mem::transmute(pceltfetched),
        )
        .ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(celt),
        )
        .ok()
    }
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IEnumMoniker> {
        let mut result__: <IEnumMoniker as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumMoniker>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEnumMoniker {
    type Vtable = IEnumMoniker_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(258, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IEnumMoniker> for ::windows::runtime::IUnknown {
    fn from(value: IEnumMoniker) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IEnumMoniker> for ::windows::runtime::IUnknown {
    fn from(value: &IEnumMoniker) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IEnumMoniker {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IEnumMoniker {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumMoniker_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        celt: u32,
        rgelt: *mut ::windows::runtime::RawPtr,
        pceltfetched: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        celt: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenum: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IEnumOLEVERB(::windows::runtime::IUnknown);
impl IEnumOLEVERB {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Next(
        &self,
        celt: u32,
        rgelt: *mut OLEVERB,
        pceltfetched: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(celt),
            ::std::mem::transmute(rgelt),
            ::std::mem::transmute(pceltfetched),
        )
        .ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(celt),
        )
        .ok()
    }
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IEnumOLEVERB> {
        let mut result__: <IEnumOLEVERB as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumOLEVERB>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEnumOLEVERB {
    type Vtable = IEnumOLEVERB_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(260, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IEnumOLEVERB> for ::windows::runtime::IUnknown {
    fn from(value: IEnumOLEVERB) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IEnumOLEVERB> for ::windows::runtime::IUnknown {
    fn from(value: &IEnumOLEVERB) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IEnumOLEVERB {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IEnumOLEVERB {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumOLEVERB_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        celt: u32,
        rgelt: *mut OLEVERB,
        pceltfetched: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        celt: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenum: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IEnumOleDocumentViews(::windows::runtime::IUnknown);
impl IEnumOleDocumentViews {
    pub unsafe fn Next(
        &self,
        cviews: u32,
        rgpview: *mut ::std::option::Option<IOleDocumentView>,
        pcfetched: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(cviews),
            ::std::mem::transmute(rgpview),
            ::std::mem::transmute(pcfetched),
        )
        .ok()
    }
    pub unsafe fn Skip(&self, cviews: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(cviews),
        )
        .ok()
    }
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IEnumOleDocumentViews> {
        let mut result__: <IEnumOleDocumentViews as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumOleDocumentViews>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEnumOleDocumentViews {
    type Vtable = IEnumOleDocumentViews_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3072507080,
        20072,
        4123,
        [162, 188, 0, 170, 0, 64, 71, 112],
    );
}
impl ::std::convert::From<IEnumOleDocumentViews> for ::windows::runtime::IUnknown {
    fn from(value: IEnumOleDocumentViews) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IEnumOleDocumentViews> for ::windows::runtime::IUnknown {
    fn from(value: &IEnumOleDocumentViews) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IEnumOleDocumentViews {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IEnumOleDocumentViews
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumOleDocumentViews_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        cviews: u32,
        rgpview: *mut ::windows::runtime::RawPtr,
        pcfetched: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        cviews: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenum: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IEnumOleUndoUnits(::windows::runtime::IUnknown);
impl IEnumOleUndoUnits {
    pub unsafe fn Next(
        &self,
        celt: u32,
        rgelt: *mut ::std::option::Option<IOleUndoUnit>,
        pceltfetched: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(celt),
            ::std::mem::transmute(rgelt),
            ::std::mem::transmute(pceltfetched),
        )
        .ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(celt),
        )
        .ok()
    }
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IEnumOleUndoUnits> {
        let mut result__: <IEnumOleUndoUnits as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumOleUndoUnits>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEnumOleUndoUnits {
    type Vtable = IEnumOleUndoUnits_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3018310464,
        61335,
        4558,
        [155, 201, 0, 170, 0, 96, 142, 1],
    );
}
impl ::std::convert::From<IEnumOleUndoUnits> for ::windows::runtime::IUnknown {
    fn from(value: IEnumOleUndoUnits) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IEnumOleUndoUnits> for ::windows::runtime::IUnknown {
    fn from(value: &IEnumOleUndoUnits) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IEnumOleUndoUnits {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IEnumOleUndoUnits {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumOleUndoUnits_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        celt: u32,
        rgelt: *mut ::windows::runtime::RawPtr,
        pceltfetched: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        celt: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenum: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IEnumSTATDATA(::windows::runtime::IUnknown);
impl IEnumSTATDATA {
    pub unsafe fn Next(
        &self,
        celt: u32,
        rgelt: *mut STATDATA,
        pceltfetched: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(celt),
            ::std::mem::transmute(rgelt),
            ::std::mem::transmute(pceltfetched),
        )
        .ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(celt),
        )
        .ok()
    }
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IEnumSTATDATA> {
        let mut result__: <IEnumSTATDATA as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumSTATDATA>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEnumSTATDATA {
    type Vtable = IEnumSTATDATA_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(261, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IEnumSTATDATA> for ::windows::runtime::IUnknown {
    fn from(value: IEnumSTATDATA) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IEnumSTATDATA> for ::windows::runtime::IUnknown {
    fn from(value: &IEnumSTATDATA) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IEnumSTATDATA {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IEnumSTATDATA {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumSTATDATA_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        celt: u32,
        rgelt: *mut ::std::mem::ManuallyDrop<STATDATA>,
        pceltfetched: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        celt: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenum: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IEnumString(::windows::runtime::IUnknown);
impl IEnumString {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Next(
        &self,
        celt: u32,
        rgelt: *mut super::super::Foundation::PWSTR,
        pceltfetched: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(celt),
            ::std::mem::transmute(rgelt),
            ::std::mem::transmute(pceltfetched),
        )
        .ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(celt),
        )
        .ok()
    }
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IEnumString> {
        let mut result__: <IEnumString as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumString>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEnumString {
    type Vtable = IEnumString_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(257, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IEnumString> for ::windows::runtime::IUnknown {
    fn from(value: IEnumString) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IEnumString> for ::windows::runtime::IUnknown {
    fn from(value: &IEnumString) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IEnumString {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IEnumString {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumString_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        celt: u32,
        rgelt: *mut super::super::Foundation::PWSTR,
        pceltfetched: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        celt: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenum: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IEnumUnknown(::windows::runtime::IUnknown);
impl IEnumUnknown {
    pub unsafe fn Next(
        &self,
        celt: u32,
        rgelt: *mut ::std::option::Option<::windows::runtime::IUnknown>,
        pceltfetched: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(celt),
            ::std::mem::transmute(rgelt),
            ::std::mem::transmute(pceltfetched),
        )
        .ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(celt),
        )
        .ok()
    }
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IEnumUnknown> {
        let mut result__: <IEnumUnknown as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumUnknown>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEnumUnknown {
    type Vtable = IEnumUnknown_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(256, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IEnumUnknown> for ::windows::runtime::IUnknown {
    fn from(value: IEnumUnknown) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IEnumUnknown> for ::windows::runtime::IUnknown {
    fn from(value: &IEnumUnknown) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IEnumUnknown {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IEnumUnknown {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumUnknown_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        celt: u32,
        rgelt: *mut ::windows::runtime::RawPtr,
        pceltfetched: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        celt: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenum: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IEventProperty(::windows::runtime::IUnknown);
impl IEventProperty {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::OleAutomation::ITypeInfo> {
        let mut result__: <super::OleAutomation::ITypeInfo as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::OleAutomation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::OleAutomation::DISPPARAMS,
        pvarresult: *mut super::OleAutomation::VARIANT,
        pexcepinfo: *mut super::OleAutomation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Name(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetName<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        propertyname: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            propertyname.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn Value(&self) -> ::windows::runtime::Result<super::OleAutomation::VARIANT> {
        let mut result__: <super::OleAutomation::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::OleAutomation::VARIANT>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn SetValue(
        &self,
        propertyvalue: *const super::OleAutomation::VARIANT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(propertyvalue),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IEventProperty {
    type Vtable = IEventProperty_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3662909154,
        62686,
        4561,
        [182, 187, 0, 128, 95, 199, 146, 22],
    );
}
impl ::std::convert::From<IEventProperty> for ::windows::runtime::IUnknown {
    fn from(value: IEventProperty) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IEventProperty> for ::windows::runtime::IUnknown {
    fn from(value: &IEventProperty) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IEventProperty {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IEventProperty {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl ::std::convert::From<IEventProperty> for super::OleAutomation::IDispatch {
    fn from(value: IEventProperty) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl ::std::convert::From<&IEventProperty> for super::OleAutomation::IDispatch {
    fn from(value: &IEventProperty) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::OleAutomation::IDispatch> for IEventProperty {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::OleAutomation::IDispatch> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<super::OleAutomation::IDispatch>::into(self),
        )
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::OleAutomation::IDispatch> for &IEventProperty {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::OleAutomation::IDispatch> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<super::OleAutomation::IDispatch>::into(
                ::std::clone::Clone::clone(self),
            ),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEventProperty_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_OleAutomation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::OleAutomation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::OleAutomation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        propertyname: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        propertyname: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        propertyvalue: *mut ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        propertyvalue: *const ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IEventPublisher(::windows::runtime::IUnknown);
impl IEventPublisher {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::OleAutomation::ITypeInfo> {
        let mut result__: <super::OleAutomation::ITypeInfo as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::OleAutomation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::OleAutomation::DISPPARAMS,
        pvarresult: *mut super::OleAutomation::VARIANT,
        pexcepinfo: *mut super::OleAutomation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PublisherID(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPublisherID<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrpublisherid: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            bstrpublisherid.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PublisherName(
        &self,
    ) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPublisherName<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrpublishername: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            bstrpublishername.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PublisherType(
        &self,
    ) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPublisherType<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrpublishertype: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            bstrpublishertype.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OwnerSID(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetOwnerSID<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrownersid: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            bstrownersid.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Description(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetDescription<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrdescription: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            bstrdescription.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn GetDefaultProperty<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrpropertyname: Param0,
    ) -> ::windows::runtime::Result<super::OleAutomation::VARIANT> {
        let mut result__: <super::OleAutomation::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(
            ::std::mem::transmute_copy(self),
            bstrpropertyname.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::OleAutomation::VARIANT>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn PutDefaultProperty<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrpropertyname: Param0,
        propertyvalue: *const super::OleAutomation::VARIANT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(
            ::std::mem::transmute_copy(self),
            bstrpropertyname.into_param().abi(),
            ::std::mem::transmute(propertyvalue),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RemoveDefaultProperty<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrpropertyname: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(
            ::std::mem::transmute_copy(self),
            bstrpropertyname.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_System_ComponentServices")]
    pub unsafe fn GetDefaultPropertyCollection(
        &self,
    ) -> ::windows::runtime::Result<super::ComponentServices::IEventObjectCollection> {
        let mut result__ : < super::ComponentServices:: IEventObjectCollection as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).20)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::ComponentServices::IEventObjectCollection>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEventPublisher {
    type Vtable = IEventPublisher_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3812708715,
        11826,
        4561,
        [153, 100, 0, 192, 79, 187, 179, 69],
    );
}
impl ::std::convert::From<IEventPublisher> for ::windows::runtime::IUnknown {
    fn from(value: IEventPublisher) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IEventPublisher> for ::windows::runtime::IUnknown {
    fn from(value: &IEventPublisher) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IEventPublisher {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IEventPublisher {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl ::std::convert::From<IEventPublisher> for super::OleAutomation::IDispatch {
    fn from(value: IEventPublisher) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl ::std::convert::From<&IEventPublisher> for super::OleAutomation::IDispatch {
    fn from(value: &IEventPublisher) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::OleAutomation::IDispatch> for IEventPublisher {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::OleAutomation::IDispatch> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<super::OleAutomation::IDispatch>::into(self),
        )
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::OleAutomation::IDispatch> for &IEventPublisher {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::OleAutomation::IDispatch> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<super::OleAutomation::IDispatch>::into(
                ::std::clone::Clone::clone(self),
            ),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEventPublisher_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_OleAutomation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::OleAutomation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::OleAutomation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrpublisherid: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrpublisherid: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrpublishername: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrpublishername: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrpublishertype: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrpublishertype: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrownersid: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrownersid: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrdescription: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrdescription: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrpropertyname: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        propertyvalue: *mut ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrpropertyname: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        propertyvalue: *const ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrpropertyname: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_System_ComponentServices")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        collection: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_ComponentServices"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IExternalConnection(::windows::runtime::IUnknown);
impl IExternalConnection {
    pub unsafe fn AddConnection(&self, extconn: u32, reserved: u32) -> u32 {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(extconn),
            ::std::mem::transmute(reserved),
        ))
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ReleaseConnection<
        'a,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        extconn: u32,
        reserved: u32,
        flastreleasecloses: Param2,
    ) -> u32 {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(extconn),
            ::std::mem::transmute(reserved),
            flastreleasecloses.into_param().abi(),
        ))
    }
}
unsafe impl ::windows::runtime::Interface for IExternalConnection {
    type Vtable = IExternalConnection_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(25, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IExternalConnection> for ::windows::runtime::IUnknown {
    fn from(value: IExternalConnection) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IExternalConnection> for ::windows::runtime::IUnknown {
    fn from(value: &IExternalConnection) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IExternalConnection {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IExternalConnection {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IExternalConnection_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        extconn: u32,
        reserved: u32,
    ) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        extconn: u32,
        reserved: u32,
        flastreleasecloses: super::super::Foundation::BOOL,
    ) -> u32,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IFastRundown(::windows::runtime::IUnknown);
impl IFastRundown {}
unsafe impl ::windows::runtime::Interface for IFastRundown {
    type Vtable = IFastRundown_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(64, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IFastRundown> for ::windows::runtime::IUnknown {
    fn from(value: IFastRundown) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IFastRundown> for ::windows::runtime::IUnknown {
    fn from(value: &IFastRundown) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IFastRundown {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IFastRundown {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IFastRundown_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IFont(::windows::runtime::IUnknown);
impl IFont {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Name(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetName<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        name: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            name.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_System_SystemServices")]
    pub unsafe fn Size(&self) -> ::windows::runtime::Result<super::SystemServices::CY> {
        let mut result__: <super::SystemServices::CY as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::SystemServices::CY>(result__)
    }
    #[cfg(feature = "Win32_System_SystemServices")]
    pub unsafe fn SetSize<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::SystemServices::CY>,
    >(
        &self,
        size: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            size.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Bold(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetBold<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        bold: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            bold.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Italic(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetItalic<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        italic: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            italic.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Underline(&self) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetUnderline<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        underline: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            underline.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Strikethrough(
        &self,
    ) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetStrikethrough<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        strikethrough: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            strikethrough.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Weight(&self) -> ::windows::runtime::Result<i16> {
        let mut result__: <i16 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i16>(result__)
    }
    pub unsafe fn SetWeight(&self, weight: i16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(weight),
        )
        .ok()
    }
    pub unsafe fn Charset(&self) -> ::windows::runtime::Result<i16> {
        let mut result__: <i16 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i16>(result__)
    }
    pub unsafe fn SetCharset(&self, charset: i16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(charset),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn hFont(&self) -> ::windows::runtime::Result<super::super::Graphics::Gdi::HFONT> {
        let mut result__: <super::super::Graphics::Gdi::HFONT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Graphics::Gdi::HFONT>(result__)
    }
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IFont> {
        let mut result__: <IFont as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).20)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IFont>(result__)
    }
    pub unsafe fn IsEqual<'a, Param0: ::windows::runtime::IntoParam<'a, IFont>>(
        &self,
        pfontother: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(
            ::std::mem::transmute_copy(self),
            pfontother.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn SetRatio(
        &self,
        cylogical: i32,
        cyhimetric: i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(cylogical),
            ::std::mem::transmute(cyhimetric),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn QueryTextMetrics(
        &self,
    ) -> ::windows::runtime::Result<super::super::Graphics::Gdi::TEXTMETRICW> {
        let mut result__ : < super::super::Graphics::Gdi:: TEXTMETRICW as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).23)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Graphics::Gdi::TEXTMETRICW>(result__)
    }
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn AddRefHfont<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HFONT>,
    >(
        &self,
        hfont: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(
            ::std::mem::transmute_copy(self),
            hfont.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn ReleaseHfont<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HFONT>,
    >(
        &self,
        hfont: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(
            ::std::mem::transmute_copy(self),
            hfont.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn SetHdc<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HDC>,
    >(
        &self,
        hdc: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(
            ::std::mem::transmute_copy(self),
            hdc.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IFont {
    type Vtable = IFont_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3203850242,
        43124,
        4122,
        [139, 186, 0, 170, 0, 48, 12, 171],
    );
}
impl ::std::convert::From<IFont> for ::windows::runtime::IUnknown {
    fn from(value: IFont) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IFont> for ::windows::runtime::IUnknown {
    fn from(value: &IFont) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IFont {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IFont {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IFont_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pname: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        name: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_System_SystemServices")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        psize: *mut super::SystemServices::CY,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_SystemServices"))] usize,
    #[cfg(feature = "Win32_System_SystemServices")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        size: super::SystemServices::CY,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_SystemServices"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbold: *mut super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bold: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pitalic: *mut super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        italic: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        punderline: *mut super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        underline: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstrikethrough: *mut super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        strikethrough: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pweight: *mut i16,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        weight: i16,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pcharset: *mut i16,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        charset: i16,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phfont: *mut super::super::Graphics::Gdi::HFONT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppfont: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pfontother: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        cylogical: i32,
        cyhimetric: i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ptm: *mut super::super::Graphics::Gdi::TEXTMETRICW,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))] usize,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hfont: super::super::Graphics::Gdi::HFONT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))] usize,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hfont: super::super::Graphics::Gdi::HFONT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))] usize,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hdc: super::super::Graphics::Gdi::HDC,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IFontDisp(::windows::runtime::IUnknown);
impl IFontDisp {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::OleAutomation::ITypeInfo> {
        let mut result__: <super::OleAutomation::ITypeInfo as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::OleAutomation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::OleAutomation::DISPPARAMS,
        pvarresult: *mut super::OleAutomation::VARIANT,
        pexcepinfo: *mut super::OleAutomation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IFontDisp {
    type Vtable = IFontDisp_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3203850243,
        43124,
        4122,
        [139, 186, 0, 170, 0, 48, 12, 171],
    );
}
impl ::std::convert::From<IFontDisp> for ::windows::runtime::IUnknown {
    fn from(value: IFontDisp) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IFontDisp> for ::windows::runtime::IUnknown {
    fn from(value: &IFontDisp) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IFontDisp {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IFontDisp {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl ::std::convert::From<IFontDisp> for super::OleAutomation::IDispatch {
    fn from(value: IFontDisp) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl ::std::convert::From<&IFontDisp> for super::OleAutomation::IDispatch {
    fn from(value: &IFontDisp) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::OleAutomation::IDispatch> for IFontDisp {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::OleAutomation::IDispatch> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<super::OleAutomation::IDispatch>::into(self),
        )
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::OleAutomation::IDispatch> for &IFontDisp {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::OleAutomation::IDispatch> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<super::OleAutomation::IDispatch>::into(
                ::std::clone::Clone::clone(self),
            ),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IFontDisp_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_OleAutomation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::OleAutomation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::OleAutomation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IFontEventsDisp(::windows::runtime::IUnknown);
impl IFontEventsDisp {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::OleAutomation::ITypeInfo> {
        let mut result__: <super::OleAutomation::ITypeInfo as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::OleAutomation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::OleAutomation::DISPPARAMS,
        pvarresult: *mut super::OleAutomation::VARIANT,
        pexcepinfo: *mut super::OleAutomation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IFontEventsDisp {
    type Vtable = IFontEventsDisp_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        1324748810,
        44936,
        4560,
        [152, 70, 0, 192, 79, 194, 153, 147],
    );
}
impl ::std::convert::From<IFontEventsDisp> for ::windows::runtime::IUnknown {
    fn from(value: IFontEventsDisp) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IFontEventsDisp> for ::windows::runtime::IUnknown {
    fn from(value: &IFontEventsDisp) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IFontEventsDisp {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IFontEventsDisp {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl ::std::convert::From<IFontEventsDisp> for super::OleAutomation::IDispatch {
    fn from(value: IFontEventsDisp) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl ::std::convert::From<&IFontEventsDisp> for super::OleAutomation::IDispatch {
    fn from(value: &IFontEventsDisp) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::OleAutomation::IDispatch> for IFontEventsDisp {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::OleAutomation::IDispatch> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<super::OleAutomation::IDispatch>::into(self),
        )
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::OleAutomation::IDispatch> for &IFontEventsDisp {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::OleAutomation::IDispatch> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<super::OleAutomation::IDispatch>::into(
                ::std::clone::Clone::clone(self),
            ),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IFontEventsDisp_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_OleAutomation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::OleAutomation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::OleAutomation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IForegroundTransfer(::windows::runtime::IUnknown);
impl IForegroundTransfer {
    pub unsafe fn AllowForegroundTransfer(
        &self,
        lpvreserved: *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(lpvreserved),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IForegroundTransfer {
    type Vtable = IForegroundTransfer_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(325, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IForegroundTransfer> for ::windows::runtime::IUnknown {
    fn from(value: IForegroundTransfer) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IForegroundTransfer> for ::windows::runtime::IUnknown {
    fn from(value: &IForegroundTransfer) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IForegroundTransfer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IForegroundTransfer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IForegroundTransfer_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        lpvreserved: *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
);
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct IGNOREMIME(pub i32);
pub const IGNOREMIME_PROMPT: IGNOREMIME = IGNOREMIME(1i32);
pub const IGNOREMIME_TEXT: IGNOREMIME = IGNOREMIME(2i32);
impl ::std::convert::From<i32> for IGNOREMIME {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for IGNOREMIME {
    type Abi = Self;
    type DefaultType = Self;
}
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IGetBindHandle(::windows::runtime::IUnknown);
impl IGetBindHandle {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetBindHandle(
        &self,
        enumrequestedhandle: BINDHANDLETYPES,
    ) -> ::windows::runtime::Result<super::super::Foundation::HANDLE> {
        let mut result__: <super::super::Foundation::HANDLE as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(enumrequestedhandle),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::HANDLE>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IGetBindHandle {
    type Vtable = IGetBindHandle_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2937058312,
        4765,
        19232,
        [145, 240, 2, 189, 35, 216, 131, 82],
    );
}
impl ::std::convert::From<IGetBindHandle> for ::windows::runtime::IUnknown {
    fn from(value: IGetBindHandle) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IGetBindHandle> for ::windows::runtime::IUnknown {
    fn from(value: &IGetBindHandle) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IGetBindHandle {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IGetBindHandle {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGetBindHandle_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        enumrequestedhandle: BINDHANDLETYPES,
        prethandle: *mut super::super::Foundation::HANDLE,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IGetOleObject(::windows::runtime::IUnknown);
impl IGetOleObject {
    pub unsafe fn GetOleObject(
        &self,
        riid: *const ::windows::runtime::GUID,
        ppvobj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(ppvobj),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IGetOleObject {
    type Vtable = IGetOleObject_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2322603424,
        20459,
        4123,
        [168, 46, 8, 0, 43, 43, 35, 55],
    );
}
impl ::std::convert::From<IGetOleObject> for ::windows::runtime::IUnknown {
    fn from(value: IGetOleObject) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IGetOleObject> for ::windows::runtime::IUnknown {
    fn from(value: &IGetOleObject) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IGetOleObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IGetOleObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGetOleObject_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        ppvobj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IGetVBAObject(::windows::runtime::IUnknown);
impl IGetVBAObject {
    pub unsafe fn GetObject(
        &self,
        riid: *const ::windows::runtime::GUID,
        ppvobj: *mut *mut ::std::ffi::c_void,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(ppvobj),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IGetVBAObject {
    type Vtable = IGetVBAObject_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2440247904,
        16204,
        4123,
        [163, 246, 0, 170, 0, 52, 228, 233],
    );
}
impl ::std::convert::From<IGetVBAObject> for ::windows::runtime::IUnknown {
    fn from(value: IGetVBAObject) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IGetVBAObject> for ::windows::runtime::IUnknown {
    fn from(value: &IGetVBAObject) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IGetVBAObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IGetVBAObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGetVBAObject_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        ppvobj: *mut *mut ::std::ffi::c_void,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IGlobalInterfaceTable(::windows::runtime::IUnknown);
impl IGlobalInterfaceTable {
    pub unsafe fn RegisterInterfaceInGlobal<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    >(
        &self,
        punk: Param0,
        riid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            punk.into_param().abi(),
            ::std::mem::transmute(riid),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn RevokeInterfaceFromGlobal(
        &self,
        dwcookie: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwcookie),
        )
        .ok()
    }
    pub unsafe fn GetInterfaceFromGlobal(
        &self,
        dwcookie: u32,
        riid: *const ::windows::runtime::GUID,
        ppv: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwcookie),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(ppv),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IGlobalInterfaceTable {
    type Vtable = IGlobalInterfaceTable_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(326, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IGlobalInterfaceTable> for ::windows::runtime::IUnknown {
    fn from(value: IGlobalInterfaceTable) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IGlobalInterfaceTable> for ::windows::runtime::IUnknown {
    fn from(value: &IGlobalInterfaceTable) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IGlobalInterfaceTable {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IGlobalInterfaceTable
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGlobalInterfaceTable_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        punk: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        pdwcookie: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwcookie: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwcookie: u32,
        riid: *const ::windows::runtime::GUID,
        ppv: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IGlobalOptions(::windows::runtime::IUnknown);
impl IGlobalOptions {
    pub unsafe fn Set(
        &self,
        dwproperty: GLOBALOPT_PROPERTIES,
        dwvalue: usize,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwproperty),
            ::std::mem::transmute(dwvalue),
        )
        .ok()
    }
    pub unsafe fn Query(
        &self,
        dwproperty: GLOBALOPT_PROPERTIES,
    ) -> ::windows::runtime::Result<usize> {
        let mut result__: <usize as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwproperty),
            &mut result__,
        )
        .from_abi::<usize>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IGlobalOptions {
    type Vtable = IGlobalOptions_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(347, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IGlobalOptions> for ::windows::runtime::IUnknown {
    fn from(value: IGlobalOptions) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IGlobalOptions> for ::windows::runtime::IUnknown {
    fn from(value: &IGlobalOptions) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IGlobalOptions {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IGlobalOptions {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGlobalOptions_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwproperty: GLOBALOPT_PROPERTIES,
        dwvalue: usize,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwproperty: GLOBALOPT_PROPERTIES,
        pdwvalue: *mut usize,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IHttpNegotiate(::windows::runtime::IUnknown);
impl IHttpNegotiate {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn BeginningTransaction<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        szurl: Param0,
        szheaders: Param1,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            szurl.into_param().abi(),
            szheaders.into_param().abi(),
            ::std::mem::transmute(dwreserved),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnResponse<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        dwresponsecode: u32,
        szresponseheaders: Param1,
        szrequestheaders: Param2,
    ) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwresponsecode),
            szresponseheaders.into_param().abi(),
            szrequestheaders.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::PWSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IHttpNegotiate {
    type Vtable = IHttpNegotiate_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430226,
        47865,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<IHttpNegotiate> for ::windows::runtime::IUnknown {
    fn from(value: IHttpNegotiate) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IHttpNegotiate> for ::windows::runtime::IUnknown {
    fn from(value: &IHttpNegotiate) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IHttpNegotiate {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IHttpNegotiate {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IHttpNegotiate_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        szurl: super::super::Foundation::PWSTR,
        szheaders: super::super::Foundation::PWSTR,
        dwreserved: u32,
        pszadditionalheaders: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwresponsecode: u32,
        szresponseheaders: super::super::Foundation::PWSTR,
        szrequestheaders: super::super::Foundation::PWSTR,
        pszadditionalrequestheaders: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IHttpNegotiate2(::windows::runtime::IUnknown);
impl IHttpNegotiate2 {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn BeginningTransaction<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        szurl: Param0,
        szheaders: Param1,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            szurl.into_param().abi(),
            szheaders.into_param().abi(),
            ::std::mem::transmute(dwreserved),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnResponse<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        dwresponsecode: u32,
        szresponseheaders: Param1,
        szrequestheaders: Param2,
    ) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwresponsecode),
            szresponseheaders.into_param().abi(),
            szrequestheaders.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    pub unsafe fn GetRootSecurityId(
        &self,
        pbsecurityid: *mut u8,
        pcbsecurityid: *mut u32,
        dwreserved: usize,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pbsecurityid),
            ::std::mem::transmute(pcbsecurityid),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IHttpNegotiate2 {
    type Vtable = IHttpNegotiate2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        1335861195,
        57588,
        18667,
        [183, 171, 250, 46, 169, 54, 92, 180],
    );
}
impl ::std::convert::From<IHttpNegotiate2> for ::windows::runtime::IUnknown {
    fn from(value: IHttpNegotiate2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IHttpNegotiate2> for ::windows::runtime::IUnknown {
    fn from(value: &IHttpNegotiate2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IHttpNegotiate2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IHttpNegotiate2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IHttpNegotiate2> for IHttpNegotiate {
    fn from(value: IHttpNegotiate2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IHttpNegotiate2> for IHttpNegotiate {
    fn from(value: &IHttpNegotiate2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IHttpNegotiate> for IHttpNegotiate2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IHttpNegotiate> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IHttpNegotiate>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IHttpNegotiate> for &IHttpNegotiate2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IHttpNegotiate> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IHttpNegotiate>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IHttpNegotiate2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        szurl: super::super::Foundation::PWSTR,
        szheaders: super::super::Foundation::PWSTR,
        dwreserved: u32,
        pszadditionalheaders: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwresponsecode: u32,
        szresponseheaders: super::super::Foundation::PWSTR,
        szrequestheaders: super::super::Foundation::PWSTR,
        pszadditionalrequestheaders: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbsecurityid: *mut u8,
        pcbsecurityid: *mut u32,
        dwreserved: usize,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IHttpNegotiate3(::windows::runtime::IUnknown);
impl IHttpNegotiate3 {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn BeginningTransaction<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        szurl: Param0,
        szheaders: Param1,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            szurl.into_param().abi(),
            szheaders.into_param().abi(),
            ::std::mem::transmute(dwreserved),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnResponse<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        dwresponsecode: u32,
        szresponseheaders: Param1,
        szrequestheaders: Param2,
    ) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwresponsecode),
            szresponseheaders.into_param().abi(),
            szrequestheaders.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    pub unsafe fn GetRootSecurityId(
        &self,
        pbsecurityid: *mut u8,
        pcbsecurityid: *mut u32,
        dwreserved: usize,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pbsecurityid),
            ::std::mem::transmute(pcbsecurityid),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    pub unsafe fn GetSerializedClientCertContext(
        &self,
        ppbcert: *mut *mut u8,
        pcbcert: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ppbcert),
            ::std::mem::transmute(pcbcert),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IHttpNegotiate3 {
    type Vtable = IHttpNegotiate3_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        1471596554,
        13506,
        17922,
        [188, 38, 102, 160, 47, 197, 113, 83],
    );
}
impl ::std::convert::From<IHttpNegotiate3> for ::windows::runtime::IUnknown {
    fn from(value: IHttpNegotiate3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IHttpNegotiate3> for ::windows::runtime::IUnknown {
    fn from(value: &IHttpNegotiate3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IHttpNegotiate3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IHttpNegotiate3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IHttpNegotiate3> for IHttpNegotiate2 {
    fn from(value: IHttpNegotiate3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IHttpNegotiate3> for IHttpNegotiate2 {
    fn from(value: &IHttpNegotiate3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IHttpNegotiate2> for IHttpNegotiate3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IHttpNegotiate2> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IHttpNegotiate2>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IHttpNegotiate2> for &IHttpNegotiate3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IHttpNegotiate2> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IHttpNegotiate2>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<IHttpNegotiate3> for IHttpNegotiate {
    fn from(value: IHttpNegotiate3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IHttpNegotiate3> for IHttpNegotiate {
    fn from(value: &IHttpNegotiate3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IHttpNegotiate> for IHttpNegotiate3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IHttpNegotiate> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IHttpNegotiate>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IHttpNegotiate> for &IHttpNegotiate3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IHttpNegotiate> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IHttpNegotiate>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IHttpNegotiate3_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        szurl: super::super::Foundation::PWSTR,
        szheaders: super::super::Foundation::PWSTR,
        dwreserved: u32,
        pszadditionalheaders: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwresponsecode: u32,
        szresponseheaders: super::super::Foundation::PWSTR,
        szrequestheaders: super::super::Foundation::PWSTR,
        pszadditionalrequestheaders: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbsecurityid: *mut u8,
        pcbsecurityid: *mut u32,
        dwreserved: usize,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppbcert: *mut *mut u8,
        pcbcert: *mut u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IHttpSecurity(::windows::runtime::IUnknown);
impl IHttpSecurity {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetWindow(
        &self,
        rguidreason: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<super::super::Foundation::HWND> {
        let mut result__: <super::super::Foundation::HWND as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(rguidreason),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::HWND>(result__)
    }
    pub unsafe fn OnSecurityProblem(&self, dwproblem: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwproblem),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IHttpSecurity {
    type Vtable = IHttpSecurity_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430231,
        47866,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<IHttpSecurity> for ::windows::runtime::IUnknown {
    fn from(value: IHttpSecurity) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IHttpSecurity> for ::windows::runtime::IUnknown {
    fn from(value: &IHttpSecurity) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IHttpSecurity {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IHttpSecurity {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IHttpSecurity> for IWindowForBindingUI {
    fn from(value: IHttpSecurity) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IHttpSecurity> for IWindowForBindingUI {
    fn from(value: &IHttpSecurity) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IWindowForBindingUI> for IHttpSecurity {
    fn into_param(self) -> ::windows::runtime::Param<'a, IWindowForBindingUI> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IWindowForBindingUI>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IWindowForBindingUI> for &IHttpSecurity {
    fn into_param(self) -> ::windows::runtime::Param<'a, IWindowForBindingUI> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IWindowForBindingUI>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IHttpSecurity_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        rguidreason: *const ::windows::runtime::GUID,
        phwnd: *mut super::super::Foundation::HWND,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwproblem: u32,
    ) -> ::windows::runtime::HRESULT,
);
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn IIDFromString<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    lpsz: Param0,
) -> ::windows::runtime::Result<::windows::runtime::GUID> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn IIDFromString(
                lpsz: super::super::Foundation::PWSTR,
                lpiid: *mut ::windows::runtime::GUID,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        IIDFromString(lpsz.into_param().abi(), &mut result__)
            .from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IInitializeSpy(::windows::runtime::IUnknown);
impl IInitializeSpy {
    pub unsafe fn PreInitialize(
        &self,
        dwcoinit: u32,
        dwcurthreadaptrefs: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwcoinit),
            ::std::mem::transmute(dwcurthreadaptrefs),
        )
        .ok()
    }
    pub unsafe fn PostInitialize(
        &self,
        hrcoinit: ::windows::runtime::HRESULT,
        dwcoinit: u32,
        dwnewthreadaptrefs: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(hrcoinit),
            ::std::mem::transmute(dwcoinit),
            ::std::mem::transmute(dwnewthreadaptrefs),
        )
        .ok()
    }
    pub unsafe fn PreUninitialize(
        &self,
        dwcurthreadaptrefs: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwcurthreadaptrefs),
        )
        .ok()
    }
    pub unsafe fn PostUninitialize(
        &self,
        dwnewthreadaptrefs: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwnewthreadaptrefs),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IInitializeSpy {
    type Vtable = IInitializeSpy_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(52, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IInitializeSpy> for ::windows::runtime::IUnknown {
    fn from(value: IInitializeSpy) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInitializeSpy> for ::windows::runtime::IUnknown {
    fn from(value: &IInitializeSpy) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IInitializeSpy {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IInitializeSpy {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInitializeSpy_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwcoinit: u32,
        dwcurthreadaptrefs: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hrcoinit: ::windows::runtime::HRESULT,
        dwcoinit: u32,
        dwnewthreadaptrefs: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwcurthreadaptrefs: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwnewthreadaptrefs: u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IInterfaceRelated(::windows::runtime::IUnknown);
impl IInterfaceRelated {
    pub unsafe fn SetIID(
        &self,
        iid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(iid),
        )
        .ok()
    }
    pub unsafe fn GetIID(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::GUID>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IInterfaceRelated {
    type Vtable = IInterfaceRelated_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3522910841,
        30470,
        4561,
        [173, 186, 0, 192, 79, 194, 173, 192],
    );
}
impl ::std::convert::From<IInterfaceRelated> for ::windows::runtime::IUnknown {
    fn from(value: IInterfaceRelated) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInterfaceRelated> for ::windows::runtime::IUnknown {
    fn from(value: &IInterfaceRelated) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IInterfaceRelated {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IInterfaceRelated {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInterfaceRelated_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        piid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IInternalUnknown(::windows::runtime::IUnknown);
impl IInternalUnknown {
    pub unsafe fn QueryInternalInterface(
        &self,
        riid: *const ::windows::runtime::GUID,
        ppv: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(ppv),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IInternalUnknown {
    type Vtable = IInternalUnknown_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(33, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IInternalUnknown> for ::windows::runtime::IUnknown {
    fn from(value: IInternalUnknown) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternalUnknown> for ::windows::runtime::IUnknown {
    fn from(value: &IInternalUnknown) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IInternalUnknown {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IInternalUnknown {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInternalUnknown_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        ppv: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IInternet(::windows::runtime::IUnknown);
impl IInternet {}
unsafe impl ::windows::runtime::Interface for IInternet {
    type Vtable = IInternet_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430240,
        47865,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<IInternet> for ::windows::runtime::IUnknown {
    fn from(value: IInternet) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternet> for ::windows::runtime::IUnknown {
    fn from(value: &IInternet) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IInternet {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IInternet {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInternet_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IInternetBindInfo(::windows::runtime::IUnknown);
impl IInternetBindInfo {
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Security",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn GetBindInfo(
        &self,
        grfbindf: *mut u32,
        pbindinfo: *mut BINDINFO,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(grfbindf),
            ::std::mem::transmute(pbindinfo),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetBindString(
        &self,
        ulstringtype: u32,
        ppwzstr: *mut super::super::Foundation::PWSTR,
        cel: u32,
        pcelfetched: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ulstringtype),
            ::std::mem::transmute(ppwzstr),
            ::std::mem::transmute(cel),
            ::std::mem::transmute(pcelfetched),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IInternetBindInfo {
    type Vtable = IInternetBindInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430241,
        47865,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<IInternetBindInfo> for ::windows::runtime::IUnknown {
    fn from(value: IInternetBindInfo) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetBindInfo> for ::windows::runtime::IUnknown {
    fn from(value: &IInternetBindInfo) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IInternetBindInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IInternetBindInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInternetBindInfo_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Security",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        grfbindf: *mut u32,
        pbindinfo: *mut ::std::mem::ManuallyDrop<BINDINFO>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Security",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ulstringtype: u32,
        ppwzstr: *mut super::super::Foundation::PWSTR,
        cel: u32,
        pcelfetched: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IInternetBindInfoEx(::windows::runtime::IUnknown);
impl IInternetBindInfoEx {
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Security",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn GetBindInfo(
        &self,
        grfbindf: *mut u32,
        pbindinfo: *mut BINDINFO,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(grfbindf),
            ::std::mem::transmute(pbindinfo),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetBindString(
        &self,
        ulstringtype: u32,
        ppwzstr: *mut super::super::Foundation::PWSTR,
        cel: u32,
        pcelfetched: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ulstringtype),
            ::std::mem::transmute(ppwzstr),
            ::std::mem::transmute(cel),
            ::std::mem::transmute(pcelfetched),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Security",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn GetBindInfoEx(
        &self,
        grfbindf: *mut u32,
        pbindinfo: *mut BINDINFO,
        grfbindf2: *mut u32,
        pdwreserved: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(grfbindf),
            ::std::mem::transmute(pbindinfo),
            ::std::mem::transmute(grfbindf2),
            ::std::mem::transmute(pdwreserved),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IInternetBindInfoEx {
    type Vtable = IInternetBindInfoEx_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2749371831,
        43052,
        19917,
        [161, 80, 86, 154, 238, 237, 54, 171],
    );
}
impl ::std::convert::From<IInternetBindInfoEx> for ::windows::runtime::IUnknown {
    fn from(value: IInternetBindInfoEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetBindInfoEx> for ::windows::runtime::IUnknown {
    fn from(value: &IInternetBindInfoEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IInternetBindInfoEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IInternetBindInfoEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IInternetBindInfoEx> for IInternetBindInfo {
    fn from(value: IInternetBindInfoEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetBindInfoEx> for IInternetBindInfo {
    fn from(value: &IInternetBindInfoEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IInternetBindInfo> for IInternetBindInfoEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IInternetBindInfo> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IInternetBindInfo>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IInternetBindInfo> for &IInternetBindInfoEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IInternetBindInfo> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IInternetBindInfo>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInternetBindInfoEx_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Security",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        grfbindf: *mut u32,
        pbindinfo: *mut ::std::mem::ManuallyDrop<BINDINFO>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Security",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ulstringtype: u32,
        ppwzstr: *mut super::super::Foundation::PWSTR,
        cel: u32,
        pcelfetched: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Security",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        grfbindf: *mut u32,
        pbindinfo: *mut ::std::mem::ManuallyDrop<BINDINFO>,
        grfbindf2: *mut u32,
        pdwreserved: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Security",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IInternetHostSecurityManager(::windows::runtime::IUnknown);
impl IInternetHostSecurityManager {
    pub unsafe fn GetSecurityId(
        &self,
        pbsecurityid: *mut u8,
        pcbsecurityid: *mut u32,
        dwreserved: usize,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pbsecurityid),
            ::std::mem::transmute(pcbsecurityid),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    pub unsafe fn ProcessUrlAction(
        &self,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwflags: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwaction),
            ::std::mem::transmute(ppolicy),
            ::std::mem::transmute(cbpolicy),
            ::std::mem::transmute(pcontext),
            ::std::mem::transmute(cbcontext),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    pub unsafe fn QueryCustomPolicy(
        &self,
        guidkey: *const ::windows::runtime::GUID,
        pppolicy: *mut *mut u8,
        pcbpolicy: *mut u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(guidkey),
            ::std::mem::transmute(pppolicy),
            ::std::mem::transmute(pcbpolicy),
            ::std::mem::transmute(pcontext),
            ::std::mem::transmute(cbcontext),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IInternetHostSecurityManager {
    type Vtable = IInternetHostSecurityManager_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        988971190,
        52031,
        4560,
        [137, 30, 0, 192, 79, 182, 191, 196],
    );
}
impl ::std::convert::From<IInternetHostSecurityManager> for ::windows::runtime::IUnknown {
    fn from(value: IInternetHostSecurityManager) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetHostSecurityManager> for ::windows::runtime::IUnknown {
    fn from(value: &IInternetHostSecurityManager) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IInternetHostSecurityManager
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IInternetHostSecurityManager
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInternetHostSecurityManager_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbsecurityid: *mut u8,
        pcbsecurityid: *mut u32,
        dwreserved: usize,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwflags: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        guidkey: *const ::windows::runtime::GUID,
        pppolicy: *mut *mut u8,
        pcbpolicy: *mut u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IInternetPriority(::windows::runtime::IUnknown);
impl IInternetPriority {
    pub unsafe fn SetPriority(&self, npriority: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(npriority),
        )
        .ok()
    }
    pub unsafe fn GetPriority(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IInternetPriority {
    type Vtable = IInternetPriority_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430251,
        47865,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<IInternetPriority> for ::windows::runtime::IUnknown {
    fn from(value: IInternetPriority) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetPriority> for ::windows::runtime::IUnknown {
    fn from(value: &IInternetPriority) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IInternetPriority {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IInternetPriority {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInternetPriority_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        npriority: i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pnpriority: *mut i32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IInternetProtocol(::windows::runtime::IUnknown);
impl IInternetProtocol {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
    pub unsafe fn Start<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, IInternetProtocolSink>,
        Param2: ::windows::runtime::IntoParam<'a, IInternetBindInfo>,
        Param4: ::windows::runtime::IntoParam<'a, super::SystemServices::HANDLE_PTR>,
    >(
        &self,
        szurl: Param0,
        poiprotsink: Param1,
        poibindinfo: Param2,
        grfpi: u32,
        dwreserved: Param4,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            szurl.into_param().abi(),
            poiprotsink.into_param().abi(),
            poibindinfo.into_param().abi(),
            ::std::mem::transmute(grfpi),
            dwreserved.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Continue(
        &self,
        pprotocoldata: *const PROTOCOLDATA,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pprotocoldata),
        )
        .ok()
    }
    pub unsafe fn Abort(
        &self,
        hrreason: ::windows::runtime::HRESULT,
        dwoptions: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(hrreason),
            ::std::mem::transmute(dwoptions),
        )
        .ok()
    }
    pub unsafe fn Terminate(&self, dwoptions: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwoptions),
        )
        .ok()
    }
    pub unsafe fn Suspend(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Resume(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Read(
        &self,
        pv: *mut ::std::ffi::c_void,
        cb: u32,
        pcbread: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pv),
            ::std::mem::transmute(cb),
            ::std::mem::transmute(pcbread),
        )
        .ok()
    }
    pub unsafe fn Seek(&self, dlibmove: i64, dworigin: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dlibmove),
            ::std::mem::transmute(dworigin),
            &mut result__,
        )
        .from_abi::<u64>(result__)
    }
    pub unsafe fn LockRequest(&self, dwoptions: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwoptions),
        )
        .ok()
    }
    pub unsafe fn UnlockRequest(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IInternetProtocol {
    type Vtable = IInternetProtocol_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430244,
        47865,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<IInternetProtocol> for ::windows::runtime::IUnknown {
    fn from(value: IInternetProtocol) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetProtocol> for ::windows::runtime::IUnknown {
    fn from(value: &IInternetProtocol) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IInternetProtocol {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IInternetProtocol {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IInternetProtocol> for IInternetProtocolRoot {
    fn from(value: IInternetProtocol) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetProtocol> for IInternetProtocolRoot {
    fn from(value: &IInternetProtocol) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IInternetProtocolRoot> for IInternetProtocol {
    fn into_param(self) -> ::windows::runtime::Param<'a, IInternetProtocolRoot> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IInternetProtocolRoot>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IInternetProtocolRoot> for &IInternetProtocol {
    fn into_param(self) -> ::windows::runtime::Param<'a, IInternetProtocolRoot> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IInternetProtocolRoot>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInternetProtocol_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        szurl: super::super::Foundation::PWSTR,
        poiprotsink: ::windows::runtime::RawPtr,
        poibindinfo: ::windows::runtime::RawPtr,
        grfpi: u32,
        dwreserved: super::SystemServices::HANDLE_PTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices")))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pprotocoldata: *const PROTOCOLDATA,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hrreason: ::windows::runtime::HRESULT,
        dwoptions: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwoptions: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pv: *mut ::std::ffi::c_void,
        cb: u32,
        pcbread: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dlibmove: i64,
        dworigin: u32,
        plibnewposition: *mut u64,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwoptions: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IInternetProtocolEx(::windows::runtime::IUnknown);
impl IInternetProtocolEx {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
    pub unsafe fn Start<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, IInternetProtocolSink>,
        Param2: ::windows::runtime::IntoParam<'a, IInternetBindInfo>,
        Param4: ::windows::runtime::IntoParam<'a, super::SystemServices::HANDLE_PTR>,
    >(
        &self,
        szurl: Param0,
        poiprotsink: Param1,
        poibindinfo: Param2,
        grfpi: u32,
        dwreserved: Param4,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            szurl.into_param().abi(),
            poiprotsink.into_param().abi(),
            poibindinfo.into_param().abi(),
            ::std::mem::transmute(grfpi),
            dwreserved.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Continue(
        &self,
        pprotocoldata: *const PROTOCOLDATA,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pprotocoldata),
        )
        .ok()
    }
    pub unsafe fn Abort(
        &self,
        hrreason: ::windows::runtime::HRESULT,
        dwoptions: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(hrreason),
            ::std::mem::transmute(dwoptions),
        )
        .ok()
    }
    pub unsafe fn Terminate(&self, dwoptions: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwoptions),
        )
        .ok()
    }
    pub unsafe fn Suspend(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Resume(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Read(
        &self,
        pv: *mut ::std::ffi::c_void,
        cb: u32,
        pcbread: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pv),
            ::std::mem::transmute(cb),
            ::std::mem::transmute(pcbread),
        )
        .ok()
    }
    pub unsafe fn Seek(&self, dlibmove: i64, dworigin: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dlibmove),
            ::std::mem::transmute(dworigin),
            &mut result__,
        )
        .from_abi::<u64>(result__)
    }
    pub unsafe fn LockRequest(&self, dwoptions: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwoptions),
        )
        .ok()
    }
    pub unsafe fn UnlockRequest(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_System_SystemServices")]
    pub unsafe fn StartEx<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IUri>,
        Param1: ::windows::runtime::IntoParam<'a, IInternetProtocolSink>,
        Param2: ::windows::runtime::IntoParam<'a, IInternetBindInfo>,
        Param4: ::windows::runtime::IntoParam<'a, super::SystemServices::HANDLE_PTR>,
    >(
        &self,
        puri: Param0,
        poiprotsink: Param1,
        poibindinfo: Param2,
        grfpi: u32,
        dwreserved: Param4,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            puri.into_param().abi(),
            poiprotsink.into_param().abi(),
            poibindinfo.into_param().abi(),
            ::std::mem::transmute(grfpi),
            dwreserved.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IInternetProtocolEx {
    type Vtable = IInternetProtocolEx_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3349778022,
        4112,
        18732,
        [161, 200, 200, 9, 225, 247, 89, 5],
    );
}
impl ::std::convert::From<IInternetProtocolEx> for ::windows::runtime::IUnknown {
    fn from(value: IInternetProtocolEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetProtocolEx> for ::windows::runtime::IUnknown {
    fn from(value: &IInternetProtocolEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IInternetProtocolEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IInternetProtocolEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IInternetProtocolEx> for IInternetProtocol {
    fn from(value: IInternetProtocolEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetProtocolEx> for IInternetProtocol {
    fn from(value: &IInternetProtocolEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IInternetProtocol> for IInternetProtocolEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IInternetProtocol> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IInternetProtocol>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IInternetProtocol> for &IInternetProtocolEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IInternetProtocol> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IInternetProtocol>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<IInternetProtocolEx> for IInternetProtocolRoot {
    fn from(value: IInternetProtocolEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetProtocolEx> for IInternetProtocolRoot {
    fn from(value: &IInternetProtocolEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IInternetProtocolRoot> for IInternetProtocolEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IInternetProtocolRoot> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IInternetProtocolRoot>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IInternetProtocolRoot> for &IInternetProtocolEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IInternetProtocolRoot> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IInternetProtocolRoot>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInternetProtocolEx_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        szurl: super::super::Foundation::PWSTR,
        poiprotsink: ::windows::runtime::RawPtr,
        poibindinfo: ::windows::runtime::RawPtr,
        grfpi: u32,
        dwreserved: super::SystemServices::HANDLE_PTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices")))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pprotocoldata: *const PROTOCOLDATA,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hrreason: ::windows::runtime::HRESULT,
        dwoptions: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwoptions: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pv: *mut ::std::ffi::c_void,
        cb: u32,
        pcbread: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dlibmove: i64,
        dworigin: u32,
        plibnewposition: *mut u64,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwoptions: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_SystemServices")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        puri: ::windows::runtime::RawPtr,
        poiprotsink: ::windows::runtime::RawPtr,
        poibindinfo: ::windows::runtime::RawPtr,
        grfpi: u32,
        dwreserved: super::SystemServices::HANDLE_PTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_SystemServices"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IInternetProtocolInfo(::windows::runtime::IUnknown);
impl IInternetProtocolInfo {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ParseUrl<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwzurl: Param0,
        parseaction: PARSEACTION,
        dwparseflags: u32,
        pwzresult: super::super::Foundation::PWSTR,
        cchresult: u32,
        pcchresult: *mut u32,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pwzurl.into_param().abi(),
            ::std::mem::transmute(parseaction),
            ::std::mem::transmute(dwparseflags),
            ::std::mem::transmute(pwzresult),
            ::std::mem::transmute(cchresult),
            ::std::mem::transmute(pcchresult),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CombineUrl<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwzbaseurl: Param0,
        pwzrelativeurl: Param1,
        dwcombineflags: u32,
        pwzresult: Param3,
        cchresult: u32,
        pcchresult: *mut u32,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            pwzbaseurl.into_param().abi(),
            pwzrelativeurl.into_param().abi(),
            ::std::mem::transmute(dwcombineflags),
            pwzresult.into_param().abi(),
            ::std::mem::transmute(cchresult),
            ::std::mem::transmute(pcchresult),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CompareUrl<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwzurl1: Param0,
        pwzurl2: Param1,
        dwcompareflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            pwzurl1.into_param().abi(),
            pwzurl2.into_param().abi(),
            ::std::mem::transmute(dwcompareflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn QueryInfo<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwzurl: Param0,
        oueryoption: QUERYOPTION,
        dwqueryflags: u32,
        pbuffer: *mut ::std::ffi::c_void,
        cbbuffer: u32,
        pcbbuf: *mut u32,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            pwzurl.into_param().abi(),
            ::std::mem::transmute(oueryoption),
            ::std::mem::transmute(dwqueryflags),
            ::std::mem::transmute(pbuffer),
            ::std::mem::transmute(cbbuffer),
            ::std::mem::transmute(pcbbuf),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IInternetProtocolInfo {
    type Vtable = IInternetProtocolInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430252,
        47865,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<IInternetProtocolInfo> for ::windows::runtime::IUnknown {
    fn from(value: IInternetProtocolInfo) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetProtocolInfo> for ::windows::runtime::IUnknown {
    fn from(value: &IInternetProtocolInfo) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IInternetProtocolInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IInternetProtocolInfo
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInternetProtocolInfo_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwzurl: super::super::Foundation::PWSTR,
        parseaction: PARSEACTION,
        dwparseflags: u32,
        pwzresult: super::super::Foundation::PWSTR,
        cchresult: u32,
        pcchresult: *mut u32,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwzbaseurl: super::super::Foundation::PWSTR,
        pwzrelativeurl: super::super::Foundation::PWSTR,
        dwcombineflags: u32,
        pwzresult: super::super::Foundation::PWSTR,
        cchresult: u32,
        pcchresult: *mut u32,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwzurl1: super::super::Foundation::PWSTR,
        pwzurl2: super::super::Foundation::PWSTR,
        dwcompareflags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwzurl: super::super::Foundation::PWSTR,
        oueryoption: QUERYOPTION,
        dwqueryflags: u32,
        pbuffer: *mut ::std::ffi::c_void,
        cbbuffer: u32,
        pcbbuf: *mut u32,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IInternetProtocolRoot(::windows::runtime::IUnknown);
impl IInternetProtocolRoot {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
    pub unsafe fn Start<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, IInternetProtocolSink>,
        Param2: ::windows::runtime::IntoParam<'a, IInternetBindInfo>,
        Param4: ::windows::runtime::IntoParam<'a, super::SystemServices::HANDLE_PTR>,
    >(
        &self,
        szurl: Param0,
        poiprotsink: Param1,
        poibindinfo: Param2,
        grfpi: u32,
        dwreserved: Param4,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            szurl.into_param().abi(),
            poiprotsink.into_param().abi(),
            poibindinfo.into_param().abi(),
            ::std::mem::transmute(grfpi),
            dwreserved.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Continue(
        &self,
        pprotocoldata: *const PROTOCOLDATA,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pprotocoldata),
        )
        .ok()
    }
    pub unsafe fn Abort(
        &self,
        hrreason: ::windows::runtime::HRESULT,
        dwoptions: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(hrreason),
            ::std::mem::transmute(dwoptions),
        )
        .ok()
    }
    pub unsafe fn Terminate(&self, dwoptions: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwoptions),
        )
        .ok()
    }
    pub unsafe fn Suspend(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Resume(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IInternetProtocolRoot {
    type Vtable = IInternetProtocolRoot_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430243,
        47865,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<IInternetProtocolRoot> for ::windows::runtime::IUnknown {
    fn from(value: IInternetProtocolRoot) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetProtocolRoot> for ::windows::runtime::IUnknown {
    fn from(value: &IInternetProtocolRoot) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IInternetProtocolRoot {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IInternetProtocolRoot
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInternetProtocolRoot_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        szurl: super::super::Foundation::PWSTR,
        poiprotsink: ::windows::runtime::RawPtr,
        poibindinfo: ::windows::runtime::RawPtr,
        grfpi: u32,
        dwreserved: super::SystemServices::HANDLE_PTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices")))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pprotocoldata: *const PROTOCOLDATA,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hrreason: ::windows::runtime::HRESULT,
        dwoptions: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwoptions: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IInternetProtocolSink(::windows::runtime::IUnknown);
impl IInternetProtocolSink {
    pub unsafe fn Switch(
        &self,
        pprotocoldata: *const PROTOCOLDATA,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pprotocoldata),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ReportProgress<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        ulstatuscode: u32,
        szstatustext: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ulstatuscode),
            szstatustext.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ReportData(
        &self,
        grfbscf: u32,
        ulprogress: u32,
        ulprogressmax: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(grfbscf),
            ::std::mem::transmute(ulprogress),
            ::std::mem::transmute(ulprogressmax),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ReportResult<
        'a,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        hrresult: ::windows::runtime::HRESULT,
        dwerror: u32,
        szresult: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(hrresult),
            ::std::mem::transmute(dwerror),
            szresult.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IInternetProtocolSink {
    type Vtable = IInternetProtocolSink_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430245,
        47865,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<IInternetProtocolSink> for ::windows::runtime::IUnknown {
    fn from(value: IInternetProtocolSink) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetProtocolSink> for ::windows::runtime::IUnknown {
    fn from(value: &IInternetProtocolSink) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IInternetProtocolSink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IInternetProtocolSink
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInternetProtocolSink_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pprotocoldata: *const PROTOCOLDATA,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ulstatuscode: u32,
        szstatustext: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        grfbscf: u32,
        ulprogress: u32,
        ulprogressmax: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hrresult: ::windows::runtime::HRESULT,
        dwerror: u32,
        szresult: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IInternetProtocolSinkStackable(::windows::runtime::IUnknown);
impl IInternetProtocolSinkStackable {
    pub unsafe fn SwitchSink<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IInternetProtocolSink>,
    >(
        &self,
        poiprotsink: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            poiprotsink.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CommitSwitch(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn RollbackSwitch(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IInternetProtocolSinkStackable {
    type Vtable = IInternetProtocolSinkStackable_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430256,
        47865,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<IInternetProtocolSinkStackable> for ::windows::runtime::IUnknown {
    fn from(value: IInternetProtocolSinkStackable) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetProtocolSinkStackable> for ::windows::runtime::IUnknown {
    fn from(value: &IInternetProtocolSinkStackable) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IInternetProtocolSinkStackable
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IInternetProtocolSinkStackable
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInternetProtocolSinkStackable_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        poiprotsink: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IInternetSecurityManager(::windows::runtime::IUnknown);
impl IInternetSecurityManager {
    pub unsafe fn SetSecuritySite<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IInternetSecurityMgrSite>,
    >(
        &self,
        psite: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            psite.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetSecuritySite(&self) -> ::windows::runtime::Result<IInternetSecurityMgrSite> {
        let mut result__: <IInternetSecurityMgrSite as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IInternetSecurityMgrSite>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn MapUrlToZone<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwszurl: Param0,
        pdwzone: *mut u32,
        dwflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            pwszurl.into_param().abi(),
            ::std::mem::transmute(pdwzone),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetSecurityId<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwszurl: Param0,
        pbsecurityid: *mut u8,
        pcbsecurityid: *mut u32,
        dwreserved: usize,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            pwszurl.into_param().abi(),
            ::std::mem::transmute(pbsecurityid),
            ::std::mem::transmute(pcbsecurityid),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ProcessUrlAction<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwszurl: Param0,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwflags: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            pwszurl.into_param().abi(),
            ::std::mem::transmute(dwaction),
            ::std::mem::transmute(ppolicy),
            ::std::mem::transmute(cbpolicy),
            ::std::mem::transmute(pcontext),
            ::std::mem::transmute(cbcontext),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn QueryCustomPolicy<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwszurl: Param0,
        guidkey: *const ::windows::runtime::GUID,
        pppolicy: *mut *mut u8,
        pcbpolicy: *mut u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            pwszurl.into_param().abi(),
            ::std::mem::transmute(guidkey),
            ::std::mem::transmute(pppolicy),
            ::std::mem::transmute(pcbpolicy),
            ::std::mem::transmute(pcontext),
            ::std::mem::transmute(cbcontext),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetZoneMapping<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        dwzone: u32,
        lpszpattern: Param1,
        dwflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            lpszpattern.into_param().abi(),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    pub unsafe fn GetZoneMappings(
        &self,
        dwzone: u32,
        ppenumstring: *mut ::std::option::Option<IEnumString>,
        dwflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(ppenumstring),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IInternetSecurityManager {
    type Vtable = IInternetSecurityManager_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430254,
        47865,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<IInternetSecurityManager> for ::windows::runtime::IUnknown {
    fn from(value: IInternetSecurityManager) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetSecurityManager> for ::windows::runtime::IUnknown {
    fn from(value: &IInternetSecurityManager) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IInternetSecurityManager
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IInternetSecurityManager
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInternetSecurityManager_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        psite: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppsite: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwszurl: super::super::Foundation::PWSTR,
        pdwzone: *mut u32,
        dwflags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwszurl: super::super::Foundation::PWSTR,
        pbsecurityid: *mut u8,
        pcbsecurityid: *mut u32,
        dwreserved: usize,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwszurl: super::super::Foundation::PWSTR,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwflags: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwszurl: super::super::Foundation::PWSTR,
        guidkey: *const ::windows::runtime::GUID,
        pppolicy: *mut *mut u8,
        pcbpolicy: *mut u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        lpszpattern: super::super::Foundation::PWSTR,
        dwflags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        ppenumstring: *mut ::windows::runtime::RawPtr,
        dwflags: u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IInternetSecurityManagerEx(::windows::runtime::IUnknown);
impl IInternetSecurityManagerEx {
    pub unsafe fn SetSecuritySite<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IInternetSecurityMgrSite>,
    >(
        &self,
        psite: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            psite.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetSecuritySite(&self) -> ::windows::runtime::Result<IInternetSecurityMgrSite> {
        let mut result__: <IInternetSecurityMgrSite as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IInternetSecurityMgrSite>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn MapUrlToZone<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwszurl: Param0,
        pdwzone: *mut u32,
        dwflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            pwszurl.into_param().abi(),
            ::std::mem::transmute(pdwzone),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetSecurityId<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwszurl: Param0,
        pbsecurityid: *mut u8,
        pcbsecurityid: *mut u32,
        dwreserved: usize,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            pwszurl.into_param().abi(),
            ::std::mem::transmute(pbsecurityid),
            ::std::mem::transmute(pcbsecurityid),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ProcessUrlAction<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwszurl: Param0,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwflags: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            pwszurl.into_param().abi(),
            ::std::mem::transmute(dwaction),
            ::std::mem::transmute(ppolicy),
            ::std::mem::transmute(cbpolicy),
            ::std::mem::transmute(pcontext),
            ::std::mem::transmute(cbcontext),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn QueryCustomPolicy<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwszurl: Param0,
        guidkey: *const ::windows::runtime::GUID,
        pppolicy: *mut *mut u8,
        pcbpolicy: *mut u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            pwszurl.into_param().abi(),
            ::std::mem::transmute(guidkey),
            ::std::mem::transmute(pppolicy),
            ::std::mem::transmute(pcbpolicy),
            ::std::mem::transmute(pcontext),
            ::std::mem::transmute(cbcontext),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetZoneMapping<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        dwzone: u32,
        lpszpattern: Param1,
        dwflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            lpszpattern.into_param().abi(),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    pub unsafe fn GetZoneMappings(
        &self,
        dwzone: u32,
        ppenumstring: *mut ::std::option::Option<IEnumString>,
        dwflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(ppenumstring),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ProcessUrlActionEx<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwszurl: Param0,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwflags: u32,
        dwreserved: u32,
        pdwoutflags: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            pwszurl.into_param().abi(),
            ::std::mem::transmute(dwaction),
            ::std::mem::transmute(ppolicy),
            ::std::mem::transmute(cbpolicy),
            ::std::mem::transmute(pcontext),
            ::std::mem::transmute(cbcontext),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(dwreserved),
            ::std::mem::transmute(pdwoutflags),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IInternetSecurityManagerEx {
    type Vtable = IInternetSecurityManagerEx_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4049923569,
        52348,
        20237,
        [154, 148, 52, 34, 38, 37, 195, 147],
    );
}
impl ::std::convert::From<IInternetSecurityManagerEx> for ::windows::runtime::IUnknown {
    fn from(value: IInternetSecurityManagerEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetSecurityManagerEx> for ::windows::runtime::IUnknown {
    fn from(value: &IInternetSecurityManagerEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IInternetSecurityManagerEx
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IInternetSecurityManagerEx
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IInternetSecurityManagerEx> for IInternetSecurityManager {
    fn from(value: IInternetSecurityManagerEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetSecurityManagerEx> for IInternetSecurityManager {
    fn from(value: &IInternetSecurityManagerEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IInternetSecurityManager>
    for IInternetSecurityManagerEx
{
    fn into_param(self) -> ::windows::runtime::Param<'a, IInternetSecurityManager> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IInternetSecurityManager>::into(
            self,
        ))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IInternetSecurityManager>
    for &IInternetSecurityManagerEx
{
    fn into_param(self) -> ::windows::runtime::Param<'a, IInternetSecurityManager> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IInternetSecurityManager>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInternetSecurityManagerEx_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        psite: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppsite: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwszurl: super::super::Foundation::PWSTR,
        pdwzone: *mut u32,
        dwflags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwszurl: super::super::Foundation::PWSTR,
        pbsecurityid: *mut u8,
        pcbsecurityid: *mut u32,
        dwreserved: usize,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwszurl: super::super::Foundation::PWSTR,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwflags: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwszurl: super::super::Foundation::PWSTR,
        guidkey: *const ::windows::runtime::GUID,
        pppolicy: *mut *mut u8,
        pcbpolicy: *mut u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        lpszpattern: super::super::Foundation::PWSTR,
        dwflags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        ppenumstring: *mut ::windows::runtime::RawPtr,
        dwflags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwszurl: super::super::Foundation::PWSTR,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwflags: u32,
        dwreserved: u32,
        pdwoutflags: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IInternetSecurityManagerEx2(::windows::runtime::IUnknown);
impl IInternetSecurityManagerEx2 {
    pub unsafe fn SetSecuritySite<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IInternetSecurityMgrSite>,
    >(
        &self,
        psite: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            psite.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetSecuritySite(&self) -> ::windows::runtime::Result<IInternetSecurityMgrSite> {
        let mut result__: <IInternetSecurityMgrSite as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IInternetSecurityMgrSite>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn MapUrlToZone<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwszurl: Param0,
        pdwzone: *mut u32,
        dwflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            pwszurl.into_param().abi(),
            ::std::mem::transmute(pdwzone),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetSecurityId<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwszurl: Param0,
        pbsecurityid: *mut u8,
        pcbsecurityid: *mut u32,
        dwreserved: usize,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            pwszurl.into_param().abi(),
            ::std::mem::transmute(pbsecurityid),
            ::std::mem::transmute(pcbsecurityid),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ProcessUrlAction<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwszurl: Param0,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwflags: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            pwszurl.into_param().abi(),
            ::std::mem::transmute(dwaction),
            ::std::mem::transmute(ppolicy),
            ::std::mem::transmute(cbpolicy),
            ::std::mem::transmute(pcontext),
            ::std::mem::transmute(cbcontext),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn QueryCustomPolicy<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwszurl: Param0,
        guidkey: *const ::windows::runtime::GUID,
        pppolicy: *mut *mut u8,
        pcbpolicy: *mut u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            pwszurl.into_param().abi(),
            ::std::mem::transmute(guidkey),
            ::std::mem::transmute(pppolicy),
            ::std::mem::transmute(pcbpolicy),
            ::std::mem::transmute(pcontext),
            ::std::mem::transmute(cbcontext),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetZoneMapping<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        dwzone: u32,
        lpszpattern: Param1,
        dwflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            lpszpattern.into_param().abi(),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    pub unsafe fn GetZoneMappings(
        &self,
        dwzone: u32,
        ppenumstring: *mut ::std::option::Option<IEnumString>,
        dwflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(ppenumstring),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ProcessUrlActionEx<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwszurl: Param0,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwflags: u32,
        dwreserved: u32,
        pdwoutflags: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            pwszurl.into_param().abi(),
            ::std::mem::transmute(dwaction),
            ::std::mem::transmute(ppolicy),
            ::std::mem::transmute(cbpolicy),
            ::std::mem::transmute(pcontext),
            ::std::mem::transmute(cbcontext),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(dwreserved),
            ::std::mem::transmute(pdwoutflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn MapUrlToZoneEx2<'a, Param0: ::windows::runtime::IntoParam<'a, IUri>>(
        &self,
        puri: Param0,
        pdwzone: *mut u32,
        dwflags: u32,
        ppwszmappedurl: *mut super::super::Foundation::PWSTR,
        pdwoutflags: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            puri.into_param().abi(),
            ::std::mem::transmute(pdwzone),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(ppwszmappedurl),
            ::std::mem::transmute(pdwoutflags),
        )
        .ok()
    }
    pub unsafe fn ProcessUrlActionEx2<'a, Param0: ::windows::runtime::IntoParam<'a, IUri>>(
        &self,
        puri: Param0,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwflags: u32,
        dwreserved: usize,
        pdwoutflags: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            puri.into_param().abi(),
            ::std::mem::transmute(dwaction),
            ::std::mem::transmute(ppolicy),
            ::std::mem::transmute(cbpolicy),
            ::std::mem::transmute(pcontext),
            ::std::mem::transmute(cbcontext),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(dwreserved),
            ::std::mem::transmute(pdwoutflags),
        )
        .ok()
    }
    pub unsafe fn GetSecurityIdEx2<'a, Param0: ::windows::runtime::IntoParam<'a, IUri>>(
        &self,
        puri: Param0,
        pbsecurityid: *mut u8,
        pcbsecurityid: *mut u32,
        dwreserved: usize,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            puri.into_param().abi(),
            ::std::mem::transmute(pbsecurityid),
            ::std::mem::transmute(pcbsecurityid),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    pub unsafe fn QueryCustomPolicyEx2<'a, Param0: ::windows::runtime::IntoParam<'a, IUri>>(
        &self,
        puri: Param0,
        guidkey: *const ::windows::runtime::GUID,
        pppolicy: *mut *mut u8,
        pcbpolicy: *mut u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwreserved: usize,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            puri.into_param().abi(),
            ::std::mem::transmute(guidkey),
            ::std::mem::transmute(pppolicy),
            ::std::mem::transmute(pcbpolicy),
            ::std::mem::transmute(pcontext),
            ::std::mem::transmute(cbcontext),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IInternetSecurityManagerEx2 {
    type Vtable = IInternetSecurityManagerEx2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4058317458,
        42901,
        16663,
        [142, 9, 43, 86, 10, 114, 172, 96],
    );
}
impl ::std::convert::From<IInternetSecurityManagerEx2> for ::windows::runtime::IUnknown {
    fn from(value: IInternetSecurityManagerEx2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetSecurityManagerEx2> for ::windows::runtime::IUnknown {
    fn from(value: &IInternetSecurityManagerEx2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IInternetSecurityManagerEx2
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IInternetSecurityManagerEx2
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IInternetSecurityManagerEx2> for IInternetSecurityManagerEx {
    fn from(value: IInternetSecurityManagerEx2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetSecurityManagerEx2> for IInternetSecurityManagerEx {
    fn from(value: &IInternetSecurityManagerEx2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IInternetSecurityManagerEx>
    for IInternetSecurityManagerEx2
{
    fn into_param(self) -> ::windows::runtime::Param<'a, IInternetSecurityManagerEx> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IInternetSecurityManagerEx>::into(
            self,
        ))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IInternetSecurityManagerEx>
    for &IInternetSecurityManagerEx2
{
    fn into_param(self) -> ::windows::runtime::Param<'a, IInternetSecurityManagerEx> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IInternetSecurityManagerEx>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<IInternetSecurityManagerEx2> for IInternetSecurityManager {
    fn from(value: IInternetSecurityManagerEx2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetSecurityManagerEx2> for IInternetSecurityManager {
    fn from(value: &IInternetSecurityManagerEx2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IInternetSecurityManager>
    for IInternetSecurityManagerEx2
{
    fn into_param(self) -> ::windows::runtime::Param<'a, IInternetSecurityManager> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IInternetSecurityManager>::into(
            self,
        ))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IInternetSecurityManager>
    for &IInternetSecurityManagerEx2
{
    fn into_param(self) -> ::windows::runtime::Param<'a, IInternetSecurityManager> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IInternetSecurityManager>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInternetSecurityManagerEx2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        psite: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppsite: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwszurl: super::super::Foundation::PWSTR,
        pdwzone: *mut u32,
        dwflags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwszurl: super::super::Foundation::PWSTR,
        pbsecurityid: *mut u8,
        pcbsecurityid: *mut u32,
        dwreserved: usize,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwszurl: super::super::Foundation::PWSTR,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwflags: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwszurl: super::super::Foundation::PWSTR,
        guidkey: *const ::windows::runtime::GUID,
        pppolicy: *mut *mut u8,
        pcbpolicy: *mut u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        lpszpattern: super::super::Foundation::PWSTR,
        dwflags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        ppenumstring: *mut ::windows::runtime::RawPtr,
        dwflags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwszurl: super::super::Foundation::PWSTR,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwflags: u32,
        dwreserved: u32,
        pdwoutflags: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        puri: ::windows::runtime::RawPtr,
        pdwzone: *mut u32,
        dwflags: u32,
        ppwszmappedurl: *mut super::super::Foundation::PWSTR,
        pdwoutflags: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        puri: ::windows::runtime::RawPtr,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwflags: u32,
        dwreserved: usize,
        pdwoutflags: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        puri: ::windows::runtime::RawPtr,
        pbsecurityid: *mut u8,
        pcbsecurityid: *mut u32,
        dwreserved: usize,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        puri: ::windows::runtime::RawPtr,
        guidkey: *const ::windows::runtime::GUID,
        pppolicy: *mut *mut u8,
        pcbpolicy: *mut u32,
        pcontext: *const u8,
        cbcontext: u32,
        dwreserved: usize,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IInternetSecurityMgrSite(::windows::runtime::IUnknown);
impl IInternetSecurityMgrSite {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetWindow(&self) -> ::windows::runtime::Result<super::super::Foundation::HWND> {
        let mut result__: <super::super::Foundation::HWND as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::HWND>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn EnableModeless<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fenable: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            fenable.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IInternetSecurityMgrSite {
    type Vtable = IInternetSecurityMgrSite_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430253,
        47865,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<IInternetSecurityMgrSite> for ::windows::runtime::IUnknown {
    fn from(value: IInternetSecurityMgrSite) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetSecurityMgrSite> for ::windows::runtime::IUnknown {
    fn from(value: &IInternetSecurityMgrSite) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IInternetSecurityMgrSite
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IInternetSecurityMgrSite
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInternetSecurityMgrSite_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phwnd: *mut super::super::Foundation::HWND,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fenable: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IInternetSession(::windows::runtime::IUnknown);
impl IInternetSession {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterNameSpace<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IClassFactory>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pcf: Param0,
        rclsid: *const ::windows::runtime::GUID,
        pwzprotocol: Param2,
        cpatterns: u32,
        ppwzpatterns: *const super::super::Foundation::PWSTR,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pcf.into_param().abi(),
            ::std::mem::transmute(rclsid),
            pwzprotocol.into_param().abi(),
            ::std::mem::transmute(cpatterns),
            ::std::mem::transmute(ppwzpatterns),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn UnregisterNameSpace<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IClassFactory>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pcf: Param0,
        pszprotocol: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            pcf.into_param().abi(),
            pszprotocol.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterMimeFilter<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IClassFactory>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pcf: Param0,
        rclsid: *const ::windows::runtime::GUID,
        pwztype: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            pcf.into_param().abi(),
            ::std::mem::transmute(rclsid),
            pwztype.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn UnregisterMimeFilter<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IClassFactory>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pcf: Param0,
        pwztype: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            pcf.into_param().abi(),
            pwztype.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CreateBinding<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IBindCtx>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    >(
        &self,
        pbc: Param0,
        szurl: Param1,
        punkouter: Param2,
        ppunk: *mut ::std::option::Option<::windows::runtime::IUnknown>,
        ppoinetprot: *mut ::std::option::Option<IInternetProtocol>,
        dwoption: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            pbc.into_param().abi(),
            szurl.into_param().abi(),
            punkouter.into_param().abi(),
            ::std::mem::transmute(ppunk),
            ::std::mem::transmute(ppoinetprot),
            ::std::mem::transmute(dwoption),
        )
        .ok()
    }
    pub unsafe fn SetSessionOption(
        &self,
        dwoption: u32,
        pbuffer: *const ::std::ffi::c_void,
        dwbufferlength: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwoption),
            ::std::mem::transmute(pbuffer),
            ::std::mem::transmute(dwbufferlength),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    pub unsafe fn GetSessionOption(
        &self,
        dwoption: u32,
        pbuffer: *mut ::std::ffi::c_void,
        pdwbufferlength: *mut u32,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwoption),
            ::std::mem::transmute(pbuffer),
            ::std::mem::transmute(pdwbufferlength),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IInternetSession {
    type Vtable = IInternetSession_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430247,
        47865,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<IInternetSession> for ::windows::runtime::IUnknown {
    fn from(value: IInternetSession) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetSession> for ::windows::runtime::IUnknown {
    fn from(value: &IInternetSession) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IInternetSession {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IInternetSession {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInternetSession_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pcf: ::windows::runtime::RawPtr,
        rclsid: *const ::windows::runtime::GUID,
        pwzprotocol: super::super::Foundation::PWSTR,
        cpatterns: u32,
        ppwzpatterns: *const super::super::Foundation::PWSTR,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pcf: ::windows::runtime::RawPtr,
        pszprotocol: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pcf: ::windows::runtime::RawPtr,
        rclsid: *const ::windows::runtime::GUID,
        pwztype: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pcf: ::windows::runtime::RawPtr,
        pwztype: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbc: ::windows::runtime::RawPtr,
        szurl: super::super::Foundation::PWSTR,
        punkouter: ::windows::runtime::RawPtr,
        ppunk: *mut ::windows::runtime::RawPtr,
        ppoinetprot: *mut ::windows::runtime::RawPtr,
        dwoption: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwoption: u32,
        pbuffer: *const ::std::ffi::c_void,
        dwbufferlength: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwoption: u32,
        pbuffer: *mut ::std::ffi::c_void,
        pdwbufferlength: *mut u32,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IInternetThreadSwitch(::windows::runtime::IUnknown);
impl IInternetThreadSwitch {
    pub unsafe fn Prepare(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Continue(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IInternetThreadSwitch {
    type Vtable = IInternetThreadSwitch_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430248,
        47865,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<IInternetThreadSwitch> for ::windows::runtime::IUnknown {
    fn from(value: IInternetThreadSwitch) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetThreadSwitch> for ::windows::runtime::IUnknown {
    fn from(value: &IInternetThreadSwitch) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IInternetThreadSwitch {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IInternetThreadSwitch
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInternetThreadSwitch_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IInternetZoneManager(::windows::runtime::IUnknown);
impl IInternetZoneManager {
    pub unsafe fn GetZoneAttributes(
        &self,
        dwzone: u32,
        pzoneattributes: *mut ZONEATTRIBUTES,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(pzoneattributes),
        )
        .ok()
    }
    pub unsafe fn SetZoneAttributes(
        &self,
        dwzone: u32,
        pzoneattributes: *const ZONEATTRIBUTES,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(pzoneattributes),
        )
        .ok()
    }
    pub unsafe fn GetZoneCustomPolicy(
        &self,
        dwzone: u32,
        guidkey: *const ::windows::runtime::GUID,
        pppolicy: *mut *mut u8,
        pcbpolicy: *mut u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(guidkey),
            ::std::mem::transmute(pppolicy),
            ::std::mem::transmute(pcbpolicy),
            ::std::mem::transmute(urlzonereg),
        )
        .ok()
    }
    pub unsafe fn SetZoneCustomPolicy(
        &self,
        dwzone: u32,
        guidkey: *const ::windows::runtime::GUID,
        ppolicy: *const u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(guidkey),
            ::std::mem::transmute(ppolicy),
            ::std::mem::transmute(cbpolicy),
            ::std::mem::transmute(urlzonereg),
        )
        .ok()
    }
    pub unsafe fn GetZoneActionPolicy(
        &self,
        dwzone: u32,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(dwaction),
            ::std::mem::transmute(ppolicy),
            ::std::mem::transmute(cbpolicy),
            ::std::mem::transmute(urlzonereg),
        )
        .ok()
    }
    pub unsafe fn SetZoneActionPolicy(
        &self,
        dwzone: u32,
        dwaction: u32,
        ppolicy: *const u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(dwaction),
            ::std::mem::transmute(ppolicy),
            ::std::mem::transmute(cbpolicy),
            ::std::mem::transmute(urlzonereg),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PromptAction<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        dwaction: u32,
        hwndparent: Param1,
        pwszurl: Param2,
        pwsztext: Param3,
        dwpromptflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwaction),
            hwndparent.into_param().abi(),
            pwszurl.into_param().abi(),
            pwsztext.into_param().abi(),
            ::std::mem::transmute(dwpromptflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn LogAction<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        dwaction: u32,
        pwszurl: Param1,
        pwsztext: Param2,
        dwlogflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwaction),
            pwszurl.into_param().abi(),
            pwsztext.into_param().abi(),
            ::std::mem::transmute(dwlogflags),
        )
        .ok()
    }
    pub unsafe fn CreateZoneEnumerator(
        &self,
        pdwenum: *mut u32,
        pdwcount: *mut u32,
        dwflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pdwenum),
            ::std::mem::transmute(pdwcount),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    pub unsafe fn GetZoneAt(&self, dwenum: u32, dwindex: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwenum),
            ::std::mem::transmute(dwindex),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn DestroyZoneEnumerator(&self, dwenum: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwenum),
        )
        .ok()
    }
    pub unsafe fn CopyTemplatePoliciesToZone(
        &self,
        dwtemplate: u32,
        dwzone: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwtemplate),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IInternetZoneManager {
    type Vtable = IInternetZoneManager_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430255,
        47865,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<IInternetZoneManager> for ::windows::runtime::IUnknown {
    fn from(value: IInternetZoneManager) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetZoneManager> for ::windows::runtime::IUnknown {
    fn from(value: &IInternetZoneManager) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IInternetZoneManager {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IInternetZoneManager {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInternetZoneManager_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        pzoneattributes: *mut ZONEATTRIBUTES,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        pzoneattributes: *const ZONEATTRIBUTES,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        guidkey: *const ::windows::runtime::GUID,
        pppolicy: *mut *mut u8,
        pcbpolicy: *mut u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        guidkey: *const ::windows::runtime::GUID,
        ppolicy: *const u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        dwaction: u32,
        ppolicy: *const u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwaction: u32,
        hwndparent: super::super::Foundation::HWND,
        pwszurl: super::super::Foundation::PWSTR,
        pwsztext: super::super::Foundation::PWSTR,
        dwpromptflags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwaction: u32,
        pwszurl: super::super::Foundation::PWSTR,
        pwsztext: super::super::Foundation::PWSTR,
        dwlogflags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwenum: *mut u32,
        pdwcount: *mut u32,
        dwflags: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwenum: u32,
        dwindex: u32,
        pdwzone: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwenum: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwtemplate: u32,
        dwzone: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IInternetZoneManagerEx(::windows::runtime::IUnknown);
impl IInternetZoneManagerEx {
    pub unsafe fn GetZoneAttributes(
        &self,
        dwzone: u32,
        pzoneattributes: *mut ZONEATTRIBUTES,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(pzoneattributes),
        )
        .ok()
    }
    pub unsafe fn SetZoneAttributes(
        &self,
        dwzone: u32,
        pzoneattributes: *const ZONEATTRIBUTES,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(pzoneattributes),
        )
        .ok()
    }
    pub unsafe fn GetZoneCustomPolicy(
        &self,
        dwzone: u32,
        guidkey: *const ::windows::runtime::GUID,
        pppolicy: *mut *mut u8,
        pcbpolicy: *mut u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(guidkey),
            ::std::mem::transmute(pppolicy),
            ::std::mem::transmute(pcbpolicy),
            ::std::mem::transmute(urlzonereg),
        )
        .ok()
    }
    pub unsafe fn SetZoneCustomPolicy(
        &self,
        dwzone: u32,
        guidkey: *const ::windows::runtime::GUID,
        ppolicy: *const u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(guidkey),
            ::std::mem::transmute(ppolicy),
            ::std::mem::transmute(cbpolicy),
            ::std::mem::transmute(urlzonereg),
        )
        .ok()
    }
    pub unsafe fn GetZoneActionPolicy(
        &self,
        dwzone: u32,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(dwaction),
            ::std::mem::transmute(ppolicy),
            ::std::mem::transmute(cbpolicy),
            ::std::mem::transmute(urlzonereg),
        )
        .ok()
    }
    pub unsafe fn SetZoneActionPolicy(
        &self,
        dwzone: u32,
        dwaction: u32,
        ppolicy: *const u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(dwaction),
            ::std::mem::transmute(ppolicy),
            ::std::mem::transmute(cbpolicy),
            ::std::mem::transmute(urlzonereg),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PromptAction<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        dwaction: u32,
        hwndparent: Param1,
        pwszurl: Param2,
        pwsztext: Param3,
        dwpromptflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwaction),
            hwndparent.into_param().abi(),
            pwszurl.into_param().abi(),
            pwsztext.into_param().abi(),
            ::std::mem::transmute(dwpromptflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn LogAction<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        dwaction: u32,
        pwszurl: Param1,
        pwsztext: Param2,
        dwlogflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwaction),
            pwszurl.into_param().abi(),
            pwsztext.into_param().abi(),
            ::std::mem::transmute(dwlogflags),
        )
        .ok()
    }
    pub unsafe fn CreateZoneEnumerator(
        &self,
        pdwenum: *mut u32,
        pdwcount: *mut u32,
        dwflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pdwenum),
            ::std::mem::transmute(pdwcount),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    pub unsafe fn GetZoneAt(&self, dwenum: u32, dwindex: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwenum),
            ::std::mem::transmute(dwindex),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn DestroyZoneEnumerator(&self, dwenum: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwenum),
        )
        .ok()
    }
    pub unsafe fn CopyTemplatePoliciesToZone(
        &self,
        dwtemplate: u32,
        dwzone: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwtemplate),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    pub unsafe fn GetZoneActionPolicyEx(
        &self,
        dwzone: u32,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
        dwflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(dwaction),
            ::std::mem::transmute(ppolicy),
            ::std::mem::transmute(cbpolicy),
            ::std::mem::transmute(urlzonereg),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    pub unsafe fn SetZoneActionPolicyEx(
        &self,
        dwzone: u32,
        dwaction: u32,
        ppolicy: *const u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
        dwflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(dwaction),
            ::std::mem::transmute(ppolicy),
            ::std::mem::transmute(cbpolicy),
            ::std::mem::transmute(urlzonereg),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IInternetZoneManagerEx {
    type Vtable = IInternetZoneManagerEx_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2764190521,
        36358,
        17182,
        [155, 244, 126, 113, 28, 8, 86, 72],
    );
}
impl ::std::convert::From<IInternetZoneManagerEx> for ::windows::runtime::IUnknown {
    fn from(value: IInternetZoneManagerEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetZoneManagerEx> for ::windows::runtime::IUnknown {
    fn from(value: &IInternetZoneManagerEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IInternetZoneManagerEx
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IInternetZoneManagerEx
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IInternetZoneManagerEx> for IInternetZoneManager {
    fn from(value: IInternetZoneManagerEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetZoneManagerEx> for IInternetZoneManager {
    fn from(value: &IInternetZoneManagerEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IInternetZoneManager> for IInternetZoneManagerEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IInternetZoneManager> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IInternetZoneManager>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IInternetZoneManager> for &IInternetZoneManagerEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IInternetZoneManager> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IInternetZoneManager>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInternetZoneManagerEx_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        pzoneattributes: *mut ZONEATTRIBUTES,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        pzoneattributes: *const ZONEATTRIBUTES,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        guidkey: *const ::windows::runtime::GUID,
        pppolicy: *mut *mut u8,
        pcbpolicy: *mut u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        guidkey: *const ::windows::runtime::GUID,
        ppolicy: *const u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        dwaction: u32,
        ppolicy: *const u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwaction: u32,
        hwndparent: super::super::Foundation::HWND,
        pwszurl: super::super::Foundation::PWSTR,
        pwsztext: super::super::Foundation::PWSTR,
        dwpromptflags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwaction: u32,
        pwszurl: super::super::Foundation::PWSTR,
        pwsztext: super::super::Foundation::PWSTR,
        dwlogflags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwenum: *mut u32,
        pdwcount: *mut u32,
        dwflags: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwenum: u32,
        dwindex: u32,
        pdwzone: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwenum: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwtemplate: u32,
        dwzone: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
        dwflags: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        dwaction: u32,
        ppolicy: *const u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
        dwflags: u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IInternetZoneManagerEx2(::windows::runtime::IUnknown);
impl IInternetZoneManagerEx2 {
    pub unsafe fn GetZoneAttributes(
        &self,
        dwzone: u32,
        pzoneattributes: *mut ZONEATTRIBUTES,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(pzoneattributes),
        )
        .ok()
    }
    pub unsafe fn SetZoneAttributes(
        &self,
        dwzone: u32,
        pzoneattributes: *const ZONEATTRIBUTES,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(pzoneattributes),
        )
        .ok()
    }
    pub unsafe fn GetZoneCustomPolicy(
        &self,
        dwzone: u32,
        guidkey: *const ::windows::runtime::GUID,
        pppolicy: *mut *mut u8,
        pcbpolicy: *mut u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(guidkey),
            ::std::mem::transmute(pppolicy),
            ::std::mem::transmute(pcbpolicy),
            ::std::mem::transmute(urlzonereg),
        )
        .ok()
    }
    pub unsafe fn SetZoneCustomPolicy(
        &self,
        dwzone: u32,
        guidkey: *const ::windows::runtime::GUID,
        ppolicy: *const u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(guidkey),
            ::std::mem::transmute(ppolicy),
            ::std::mem::transmute(cbpolicy),
            ::std::mem::transmute(urlzonereg),
        )
        .ok()
    }
    pub unsafe fn GetZoneActionPolicy(
        &self,
        dwzone: u32,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(dwaction),
            ::std::mem::transmute(ppolicy),
            ::std::mem::transmute(cbpolicy),
            ::std::mem::transmute(urlzonereg),
        )
        .ok()
    }
    pub unsafe fn SetZoneActionPolicy(
        &self,
        dwzone: u32,
        dwaction: u32,
        ppolicy: *const u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(dwaction),
            ::std::mem::transmute(ppolicy),
            ::std::mem::transmute(cbpolicy),
            ::std::mem::transmute(urlzonereg),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PromptAction<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        dwaction: u32,
        hwndparent: Param1,
        pwszurl: Param2,
        pwsztext: Param3,
        dwpromptflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwaction),
            hwndparent.into_param().abi(),
            pwszurl.into_param().abi(),
            pwsztext.into_param().abi(),
            ::std::mem::transmute(dwpromptflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn LogAction<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        dwaction: u32,
        pwszurl: Param1,
        pwsztext: Param2,
        dwlogflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwaction),
            pwszurl.into_param().abi(),
            pwsztext.into_param().abi(),
            ::std::mem::transmute(dwlogflags),
        )
        .ok()
    }
    pub unsafe fn CreateZoneEnumerator(
        &self,
        pdwenum: *mut u32,
        pdwcount: *mut u32,
        dwflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pdwenum),
            ::std::mem::transmute(pdwcount),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    pub unsafe fn GetZoneAt(&self, dwenum: u32, dwindex: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwenum),
            ::std::mem::transmute(dwindex),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn DestroyZoneEnumerator(&self, dwenum: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwenum),
        )
        .ok()
    }
    pub unsafe fn CopyTemplatePoliciesToZone(
        &self,
        dwtemplate: u32,
        dwzone: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwtemplate),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    pub unsafe fn GetZoneActionPolicyEx(
        &self,
        dwzone: u32,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
        dwflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(dwaction),
            ::std::mem::transmute(ppolicy),
            ::std::mem::transmute(cbpolicy),
            ::std::mem::transmute(urlzonereg),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    pub unsafe fn SetZoneActionPolicyEx(
        &self,
        dwzone: u32,
        dwaction: u32,
        ppolicy: *const u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
        dwflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(dwaction),
            ::std::mem::transmute(ppolicy),
            ::std::mem::transmute(cbpolicy),
            ::std::mem::transmute(urlzonereg),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    pub unsafe fn GetZoneAttributesEx(
        &self,
        dwzone: u32,
        pzoneattributes: *mut ZONEATTRIBUTES,
        dwflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
            ::std::mem::transmute(pzoneattributes),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetZoneSecurityState<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        dwzoneindex: u32,
        frespectpolicy: Param1,
        pdwstate: *mut u32,
        pfpolicyencountered: *mut super::super::Foundation::BOOL,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzoneindex),
            frespectpolicy.into_param().abi(),
            ::std::mem::transmute(pdwstate),
            ::std::mem::transmute(pfpolicyencountered),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIESecurityState<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
        Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        frespectpolicy: Param0,
        pdwstate: *mut u32,
        pfpolicyencountered: *mut super::super::Foundation::BOOL,
        fnocache: Param3,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(
            ::std::mem::transmute_copy(self),
            frespectpolicy.into_param().abi(),
            ::std::mem::transmute(pdwstate),
            ::std::mem::transmute(pfpolicyencountered),
            fnocache.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn FixUnsecureSettings(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IInternetZoneManagerEx2 {
    type Vtable = IInternetZoneManagerEx2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3988878681,
        56669,
        18502,
        [142, 239, 139, 236, 186, 90, 74, 191],
    );
}
impl ::std::convert::From<IInternetZoneManagerEx2> for ::windows::runtime::IUnknown {
    fn from(value: IInternetZoneManagerEx2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetZoneManagerEx2> for ::windows::runtime::IUnknown {
    fn from(value: &IInternetZoneManagerEx2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IInternetZoneManagerEx2
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IInternetZoneManagerEx2
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IInternetZoneManagerEx2> for IInternetZoneManagerEx {
    fn from(value: IInternetZoneManagerEx2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetZoneManagerEx2> for IInternetZoneManagerEx {
    fn from(value: &IInternetZoneManagerEx2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IInternetZoneManagerEx> for IInternetZoneManagerEx2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IInternetZoneManagerEx> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IInternetZoneManagerEx>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IInternetZoneManagerEx> for &IInternetZoneManagerEx2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IInternetZoneManagerEx> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IInternetZoneManagerEx>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<IInternetZoneManagerEx2> for IInternetZoneManager {
    fn from(value: IInternetZoneManagerEx2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IInternetZoneManagerEx2> for IInternetZoneManager {
    fn from(value: &IInternetZoneManagerEx2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IInternetZoneManager> for IInternetZoneManagerEx2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IInternetZoneManager> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IInternetZoneManager>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IInternetZoneManager> for &IInternetZoneManagerEx2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IInternetZoneManager> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IInternetZoneManager>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInternetZoneManagerEx2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        pzoneattributes: *mut ZONEATTRIBUTES,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        pzoneattributes: *const ZONEATTRIBUTES,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        guidkey: *const ::windows::runtime::GUID,
        pppolicy: *mut *mut u8,
        pcbpolicy: *mut u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        guidkey: *const ::windows::runtime::GUID,
        ppolicy: *const u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        dwaction: u32,
        ppolicy: *const u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwaction: u32,
        hwndparent: super::super::Foundation::HWND,
        pwszurl: super::super::Foundation::PWSTR,
        pwsztext: super::super::Foundation::PWSTR,
        dwpromptflags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwaction: u32,
        pwszurl: super::super::Foundation::PWSTR,
        pwsztext: super::super::Foundation::PWSTR,
        dwlogflags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwenum: *mut u32,
        pdwcount: *mut u32,
        dwflags: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwenum: u32,
        dwindex: u32,
        pdwzone: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwenum: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwtemplate: u32,
        dwzone: u32,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        dwaction: u32,
        ppolicy: *mut u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
        dwflags: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        dwaction: u32,
        ppolicy: *const u8,
        cbpolicy: u32,
        urlzonereg: URLZONEREG,
        dwflags: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
        pzoneattributes: *mut ZONEATTRIBUTES,
        dwflags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzoneindex: u32,
        frespectpolicy: super::super::Foundation::BOOL,
        pdwstate: *mut u32,
        pfpolicyencountered: *mut super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        frespectpolicy: super::super::Foundation::BOOL,
        pdwstate: *mut u32,
        pfpolicyencountered: *mut super::super::Foundation::BOOL,
        fnocache: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IMachineGlobalObjectTable(::windows::runtime::IUnknown);
impl IMachineGlobalObjectTable {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterObject<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    >(
        &self,
        clsid: *const ::windows::runtime::GUID,
        identifier: Param1,
        object: Param2,
    ) -> ::windows::runtime::Result<*mut MachineGlobalObjectTableRegistrationToken__> {
        let mut result__ : < * mut MachineGlobalObjectTableRegistrationToken__ as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(clsid),
            identifier.into_param().abi(),
            object.into_param().abi(),
            &mut result__,
        )
        .from_abi::<*mut MachineGlobalObjectTableRegistrationToken__>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetObject<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        T: ::windows::runtime::Interface,
    >(
        &self,
        clsid: *const ::windows::runtime::GUID,
        identifier: Param1,
    ) -> ::windows::runtime::Result<T> {
        let mut result__ = ::std::option::Option::None;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(clsid),
            identifier.into_param().abi(),
            &<T as ::windows::runtime::Interface>::IID,
            &mut result__ as *mut _ as *mut _,
        )
        .and_some(result__)
    }
    pub unsafe fn RevokeObject(
        &self,
        token: *const MachineGlobalObjectTableRegistrationToken__,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(token),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMachineGlobalObjectTable {
    type Vtable = IMachineGlobalObjectTable_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        651626924,
        63243,
        17441,
        [169, 111, 210, 135, 143, 175, 176, 13],
    );
}
impl ::std::convert::From<IMachineGlobalObjectTable> for ::windows::runtime::IUnknown {
    fn from(value: IMachineGlobalObjectTable) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IMachineGlobalObjectTable> for ::windows::runtime::IUnknown {
    fn from(value: &IMachineGlobalObjectTable) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IMachineGlobalObjectTable
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IMachineGlobalObjectTable
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMachineGlobalObjectTable_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        clsid: *const ::windows::runtime::GUID,
        identifier: super::super::Foundation::PWSTR,
        object: ::windows::runtime::RawPtr,
        token: *mut *mut MachineGlobalObjectTableRegistrationToken__,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        clsid: *const ::windows::runtime::GUID,
        identifier: super::super::Foundation::PWSTR,
        riid: *const ::windows::runtime::GUID,
        ppv: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        token: *const MachineGlobalObjectTableRegistrationToken__,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IMalloc(::windows::runtime::IUnknown);
impl IMalloc {
    pub unsafe fn Alloc(&self, cb: usize) -> *mut ::std::ffi::c_void {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(cb),
        ))
    }
    pub unsafe fn Realloc(
        &self,
        pv: *const ::std::ffi::c_void,
        cb: usize,
    ) -> *mut ::std::ffi::c_void {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pv),
            ::std::mem::transmute(cb),
        ))
    }
    pub unsafe fn Free(&self, pv: *const ::std::ffi::c_void) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pv),
        ))
    }
    pub unsafe fn GetSize(&self, pv: *const ::std::ffi::c_void) -> usize {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pv),
        ))
    }
    pub unsafe fn DidAlloc(&self, pv: *const ::std::ffi::c_void) -> i32 {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pv),
        ))
    }
    pub unsafe fn HeapMinimize(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
        ))
    }
}
unsafe impl ::windows::runtime::Interface for IMalloc {
    type Vtable = IMalloc_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(2, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IMalloc> for ::windows::runtime::IUnknown {
    fn from(value: IMalloc) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IMalloc> for ::windows::runtime::IUnknown {
    fn from(value: &IMalloc) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMalloc {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IMalloc {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMalloc_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        cb: usize,
    ) -> *mut ::std::ffi::c_void,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pv: *const ::std::ffi::c_void,
        cb: usize,
    ) -> *mut ::std::ffi::c_void,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pv: *const ::std::ffi::c_void),
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pv: *const ::std::ffi::c_void,
    ) -> usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pv: *const ::std::ffi::c_void,
    ) -> i32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IMallocSpy(::windows::runtime::IUnknown);
impl IMallocSpy {
    pub unsafe fn PreAlloc(&self, cbrequest: usize) -> usize {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(cbrequest),
        ))
    }
    pub unsafe fn PostAlloc(&self, pactual: *const ::std::ffi::c_void) -> *mut ::std::ffi::c_void {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pactual),
        ))
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PreFree<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        prequest: *const ::std::ffi::c_void,
        fspyed: Param1,
    ) -> *mut ::std::ffi::c_void {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(prequest),
            fspyed.into_param().abi(),
        ))
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PostFree<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fspyed: Param0,
    ) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            fspyed.into_param().abi(),
        ))
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PreRealloc<
        'a,
        Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        prequest: *const ::std::ffi::c_void,
        cbrequest: usize,
        ppnewrequest: *mut *mut ::std::ffi::c_void,
        fspyed: Param3,
    ) -> usize {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(prequest),
            ::std::mem::transmute(cbrequest),
            ::std::mem::transmute(ppnewrequest),
            fspyed.into_param().abi(),
        ))
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PostRealloc<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        pactual: *const ::std::ffi::c_void,
        fspyed: Param1,
    ) -> *mut ::std::ffi::c_void {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pactual),
            fspyed.into_param().abi(),
        ))
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PreGetSize<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        prequest: *const ::std::ffi::c_void,
        fspyed: Param1,
    ) -> *mut ::std::ffi::c_void {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(prequest),
            fspyed.into_param().abi(),
        ))
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PostGetSize<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        cbactual: usize,
        fspyed: Param1,
    ) -> usize {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(cbactual),
            fspyed.into_param().abi(),
        ))
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PreDidAlloc<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        prequest: *const ::std::ffi::c_void,
        fspyed: Param1,
    ) -> *mut ::std::ffi::c_void {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(prequest),
            fspyed.into_param().abi(),
        ))
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PostDidAlloc<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        prequest: *const ::std::ffi::c_void,
        fspyed: Param1,
        factual: i32,
    ) -> i32 {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(prequest),
            fspyed.into_param().abi(),
            ::std::mem::transmute(factual),
        ))
    }
    pub unsafe fn PreHeapMinimize(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn PostHeapMinimize(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
        ))
    }
}
unsafe impl ::windows::runtime::Interface for IMallocSpy {
    type Vtable = IMallocSpy_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(29, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IMallocSpy> for ::windows::runtime::IUnknown {
    fn from(value: IMallocSpy) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IMallocSpy> for ::windows::runtime::IUnknown {
    fn from(value: &IMallocSpy) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMallocSpy {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IMallocSpy {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMallocSpy_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, cbrequest: usize) -> usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pactual: *const ::std::ffi::c_void,
    ) -> *mut ::std::ffi::c_void,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        prequest: *const ::std::ffi::c_void,
        fspyed: super::super::Foundation::BOOL,
    ) -> *mut ::std::ffi::c_void,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fspyed: super::super::Foundation::BOOL,
    ),
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        prequest: *const ::std::ffi::c_void,
        cbrequest: usize,
        ppnewrequest: *mut *mut ::std::ffi::c_void,
        fspyed: super::super::Foundation::BOOL,
    ) -> usize,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pactual: *const ::std::ffi::c_void,
        fspyed: super::super::Foundation::BOOL,
    ) -> *mut ::std::ffi::c_void,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        prequest: *const ::std::ffi::c_void,
        fspyed: super::super::Foundation::BOOL,
    ) -> *mut ::std::ffi::c_void,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        cbactual: usize,
        fspyed: super::super::Foundation::BOOL,
    ) -> usize,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        prequest: *const ::std::ffi::c_void,
        fspyed: super::super::Foundation::BOOL,
    ) -> *mut ::std::ffi::c_void,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        prequest: *const ::std::ffi::c_void,
        fspyed: super::super::Foundation::BOOL,
        factual: i32,
    ) -> i32,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IMarshal(::windows::runtime::IUnknown);
impl IMarshal {
    pub unsafe fn GetUnmarshalClass(
        &self,
        riid: *const ::windows::runtime::GUID,
        pv: *const ::std::ffi::c_void,
        dwdestcontext: u32,
        pvdestcontext: *mut ::std::ffi::c_void,
        mshlflags: u32,
        pcid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(pv),
            ::std::mem::transmute(dwdestcontext),
            ::std::mem::transmute(pvdestcontext),
            ::std::mem::transmute(mshlflags),
            ::std::mem::transmute(pcid),
        )
        .ok()
    }
    pub unsafe fn GetMarshalSizeMax(
        &self,
        riid: *const ::windows::runtime::GUID,
        pv: *const ::std::ffi::c_void,
        dwdestcontext: u32,
        pvdestcontext: *mut ::std::ffi::c_void,
        mshlflags: u32,
        psize: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(pv),
            ::std::mem::transmute(dwdestcontext),
            ::std::mem::transmute(pvdestcontext),
            ::std::mem::transmute(mshlflags),
            ::std::mem::transmute(psize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub unsafe fn MarshalInterface<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
    >(
        &self,
        pstm: Param0,
        riid: *const ::windows::runtime::GUID,
        pv: *const ::std::ffi::c_void,
        dwdestcontext: u32,
        pvdestcontext: *mut ::std::ffi::c_void,
        mshlflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            pstm.into_param().abi(),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(pv),
            ::std::mem::transmute(dwdestcontext),
            ::std::mem::transmute(pvdestcontext),
            ::std::mem::transmute(mshlflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub unsafe fn UnmarshalInterface<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
    >(
        &self,
        pstm: Param0,
        riid: *const ::windows::runtime::GUID,
        ppv: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            pstm.into_param().abi(),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(ppv),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub unsafe fn ReleaseMarshalData<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
    >(
        &self,
        pstm: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            pstm.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DisconnectObject(&self, dwreserved: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMarshal {
    type Vtable = IMarshal_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(3, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IMarshal> for ::windows::runtime::IUnknown {
    fn from(value: IMarshal) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IMarshal> for ::windows::runtime::IUnknown {
    fn from(value: &IMarshal) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMarshal {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IMarshal {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMarshal_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        pv: *const ::std::ffi::c_void,
        dwdestcontext: u32,
        pvdestcontext: *mut ::std::ffi::c_void,
        mshlflags: u32,
        pcid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        pv: *const ::std::ffi::c_void,
        dwdestcontext: u32,
        pvdestcontext: *mut ::std::ffi::c_void,
        mshlflags: u32,
        psize: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstm: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        pv: *const ::std::ffi::c_void,
        dwdestcontext: u32,
        pvdestcontext: *mut ::std::ffi::c_void,
        mshlflags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Storage_StructuredStorage"))] usize,
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstm: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        ppv: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Storage_StructuredStorage"))] usize,
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstm: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Storage_StructuredStorage"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IMarshal2(::windows::runtime::IUnknown);
impl IMarshal2 {
    pub unsafe fn GetUnmarshalClass(
        &self,
        riid: *const ::windows::runtime::GUID,
        pv: *const ::std::ffi::c_void,
        dwdestcontext: u32,
        pvdestcontext: *mut ::std::ffi::c_void,
        mshlflags: u32,
        pcid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(pv),
            ::std::mem::transmute(dwdestcontext),
            ::std::mem::transmute(pvdestcontext),
            ::std::mem::transmute(mshlflags),
            ::std::mem::transmute(pcid),
        )
        .ok()
    }
    pub unsafe fn GetMarshalSizeMax(
        &self,
        riid: *const ::windows::runtime::GUID,
        pv: *const ::std::ffi::c_void,
        dwdestcontext: u32,
        pvdestcontext: *mut ::std::ffi::c_void,
        mshlflags: u32,
        psize: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(pv),
            ::std::mem::transmute(dwdestcontext),
            ::std::mem::transmute(pvdestcontext),
            ::std::mem::transmute(mshlflags),
            ::std::mem::transmute(psize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub unsafe fn MarshalInterface<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
    >(
        &self,
        pstm: Param0,
        riid: *const ::windows::runtime::GUID,
        pv: *const ::std::ffi::c_void,
        dwdestcontext: u32,
        pvdestcontext: *mut ::std::ffi::c_void,
        mshlflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            pstm.into_param().abi(),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(pv),
            ::std::mem::transmute(dwdestcontext),
            ::std::mem::transmute(pvdestcontext),
            ::std::mem::transmute(mshlflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub unsafe fn UnmarshalInterface<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
    >(
        &self,
        pstm: Param0,
        riid: *const ::windows::runtime::GUID,
        ppv: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            pstm.into_param().abi(),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(ppv),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub unsafe fn ReleaseMarshalData<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
    >(
        &self,
        pstm: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            pstm.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DisconnectObject(&self, dwreserved: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMarshal2 {
    type Vtable = IMarshal2_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(463, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IMarshal2> for ::windows::runtime::IUnknown {
    fn from(value: IMarshal2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IMarshal2> for ::windows::runtime::IUnknown {
    fn from(value: &IMarshal2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMarshal2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IMarshal2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IMarshal2> for IMarshal {
    fn from(value: IMarshal2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IMarshal2> for IMarshal {
    fn from(value: &IMarshal2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMarshal> for IMarshal2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMarshal> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IMarshal>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IMarshal> for &IMarshal2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IMarshal> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IMarshal>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMarshal2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        pv: *const ::std::ffi::c_void,
        dwdestcontext: u32,
        pvdestcontext: *mut ::std::ffi::c_void,
        mshlflags: u32,
        pcid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        pv: *const ::std::ffi::c_void,
        dwdestcontext: u32,
        pvdestcontext: *mut ::std::ffi::c_void,
        mshlflags: u32,
        psize: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstm: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        pv: *const ::std::ffi::c_void,
        dwdestcontext: u32,
        pvdestcontext: *mut ::std::ffi::c_void,
        mshlflags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Storage_StructuredStorage"))] usize,
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstm: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        ppv: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Storage_StructuredStorage"))] usize,
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstm: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Storage_StructuredStorage"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IMarshalingStream(::windows::runtime::IUnknown);
impl IMarshalingStream {
    pub unsafe fn Read(
        &self,
        pv: *mut ::std::ffi::c_void,
        cb: u32,
        pcbread: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pv),
            ::std::mem::transmute(cb),
            ::std::mem::transmute(pcbread),
        )
        .ok()
    }
    pub unsafe fn Write(
        &self,
        pv: *const ::std::ffi::c_void,
        cb: u32,
    ) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pv),
            ::std::mem::transmute(cb),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub unsafe fn Seek(
        &self,
        dlibmove: i64,
        dworigin: super::super::Storage::StructuredStorage::STREAM_SEEK,
    ) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dlibmove),
            ::std::mem::transmute(dworigin),
            &mut result__,
        )
        .from_abi::<u64>(result__)
    }
    pub unsafe fn SetSize(&self, libnewsize: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(libnewsize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub unsafe fn CopyTo<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
    >(
        &self,
        pstm: Param0,
        cb: u64,
        pcbread: *mut u64,
        pcbwritten: *mut u64,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            pstm.into_param().abi(),
            ::std::mem::transmute(cb),
            ::std::mem::transmute(pcbread),
            ::std::mem::transmute(pcbwritten),
        )
        .ok()
    }
    pub unsafe fn Commit(&self, grfcommitflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(grfcommitflags),
        )
        .ok()
    }
    pub unsafe fn Revert(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn LockRegion(
        &self,
        liboffset: u64,
        cb: u64,
        dwlocktype: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(liboffset),
            ::std::mem::transmute(cb),
            ::std::mem::transmute(dwlocktype),
        )
        .ok()
    }
    pub unsafe fn UnlockRegion(
        &self,
        liboffset: u64,
        cb: u64,
        dwlocktype: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(liboffset),
            ::std::mem::transmute(cb),
            ::std::mem::transmute(dwlocktype),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn Stat(
        &self,
        pstatstg: *mut super::super::Storage::StructuredStorage::STATSTG,
        grfstatflag: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pstatstg),
            ::std::mem::transmute(grfstatflag),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub unsafe fn Clone(
        &self,
    ) -> ::windows::runtime::Result<super::super::Storage::StructuredStorage::IStream> {
        let mut result__ : < super::super::Storage::StructuredStorage:: IStream as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Storage::StructuredStorage::IStream>(result__)
    }
    pub unsafe fn GetMarshalingContextAttribute(
        &self,
        attribute: CO_MARSHALING_CONTEXT_ATTRIBUTES,
    ) -> ::windows::runtime::Result<usize> {
        let mut result__: <usize as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(attribute),
            &mut result__,
        )
        .from_abi::<usize>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMarshalingStream {
    type Vtable = IMarshalingStream_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3639801318,
        24834,
        18531,
        [159, 38, 56, 154, 70, 118, 239, 222],
    );
}
impl ::std::convert::From<IMarshalingStream> for ::windows::runtime::IUnknown {
    fn from(value: IMarshalingStream) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IMarshalingStream> for ::windows::runtime::IUnknown {
    fn from(value: &IMarshalingStream) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMarshalingStream {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IMarshalingStream {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
impl ::std::convert::From<IMarshalingStream> for super::super::Storage::StructuredStorage::IStream {
    fn from(value: IMarshalingStream) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
impl ::std::convert::From<&IMarshalingStream>
    for super::super::Storage::StructuredStorage::IStream
{
    fn from(value: &IMarshalingStream) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>
    for IMarshalingStream
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::Storage::StructuredStorage::IStream> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::Storage::StructuredStorage::IStream,
        >::into(self))
    }
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>
    for &IMarshalingStream
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::Storage::StructuredStorage::IStream> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::Storage::StructuredStorage::IStream,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
impl ::std::convert::From<IMarshalingStream>
    for super::super::Storage::StructuredStorage::ISequentialStream
{
    fn from(value: IMarshalingStream) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
impl ::std::convert::From<&IMarshalingStream>
    for super::super::Storage::StructuredStorage::ISequentialStream
{
    fn from(value: &IMarshalingStream) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
impl<'a>
    ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::ISequentialStream>
    for IMarshalingStream
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::Storage::StructuredStorage::ISequentialStream>
    {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::Storage::StructuredStorage::ISequentialStream,
        >::into(self))
    }
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
impl<'a>
    ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::ISequentialStream>
    for &IMarshalingStream
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::Storage::StructuredStorage::ISequentialStream>
    {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::Storage::StructuredStorage::ISequentialStream,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMarshalingStream_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pv: *mut ::std::ffi::c_void,
        cb: u32,
        pcbread: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pv: *const ::std::ffi::c_void,
        cb: u32,
        pcbwritten: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dlibmove: i64,
        dworigin: super::super::Storage::StructuredStorage::STREAM_SEEK,
        plibnewposition: *mut u64,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Storage_StructuredStorage"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        libnewsize: u64,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstm: ::windows::runtime::RawPtr,
        cb: u64,
        pcbread: *mut u64,
        pcbwritten: *mut u64,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Storage_StructuredStorage"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        grfcommitflags: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        liboffset: u64,
        cb: u64,
        dwlocktype: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        liboffset: u64,
        cb: u64,
        dwlocktype: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstatstg: *mut super::super::Storage::StructuredStorage::STATSTG,
        grfstatflag: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppstm: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Storage_StructuredStorage"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        attribute: CO_MARSHALING_CONTEXT_ATTRIBUTES,
        pattributevalue: *mut usize,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IMessageDispatcher(::windows::runtime::IUnknown);
impl IMessageDispatcher {
    pub unsafe fn PumpMessages(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMessageDispatcher {
    type Vtable = IMessageDispatcher_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4126690447,
        53200,
        19670,
        [182, 107, 197, 210, 111, 241, 104, 157],
    );
}
impl ::std::convert::From<IMessageDispatcher> for ::windows::runtime::IUnknown {
    fn from(value: IMessageDispatcher) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IMessageDispatcher> for ::windows::runtime::IUnknown {
    fn from(value: &IMessageDispatcher) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMessageDispatcher {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IMessageDispatcher {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMessageDispatcher_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        count: *mut u32,
        values: *mut *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        value: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        value: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IMessageFilter(::windows::runtime::IUnknown);
impl IMessageFilter {
    #[cfg(feature = "Win32_Media_Audio_CoreAudio")]
    pub unsafe fn HandleInComingCall<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Media::Audio::CoreAudio::HTASK>,
    >(
        &self,
        dwcalltype: u32,
        htaskcaller: Param1,
        dwtickcount: u32,
        lpinterfaceinfo: *const INTERFACEINFO,
    ) -> u32 {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwcalltype),
            htaskcaller.into_param().abi(),
            ::std::mem::transmute(dwtickcount),
            ::std::mem::transmute(lpinterfaceinfo),
        ))
    }
    #[cfg(feature = "Win32_Media_Audio_CoreAudio")]
    pub unsafe fn RetryRejectedCall<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Media::Audio::CoreAudio::HTASK>,
    >(
        &self,
        htaskcallee: Param0,
        dwtickcount: u32,
        dwrejecttype: u32,
    ) -> u32 {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            htaskcallee.into_param().abi(),
            ::std::mem::transmute(dwtickcount),
            ::std::mem::transmute(dwrejecttype),
        ))
    }
    #[cfg(feature = "Win32_Media_Audio_CoreAudio")]
    pub unsafe fn MessagePending<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Media::Audio::CoreAudio::HTASK>,
    >(
        &self,
        htaskcallee: Param0,
        dwtickcount: u32,
        dwpendingtype: u32,
    ) -> u32 {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            htaskcallee.into_param().abi(),
            ::std::mem::transmute(dwtickcount),
            ::std::mem::transmute(dwpendingtype),
        ))
    }
}
unsafe impl ::windows::runtime::Interface for IMessageFilter {
    type Vtable = IMessageFilter_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(22, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IMessageFilter> for ::windows::runtime::IUnknown {
    fn from(value: IMessageFilter) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IMessageFilter> for ::windows::runtime::IUnknown {
    fn from(value: &IMessageFilter) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMessageFilter {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IMessageFilter {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMessageFilter_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Media_Audio_CoreAudio")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwcalltype: u32,
        htaskcaller: super::super::Media::Audio::CoreAudio::HTASK,
        dwtickcount: u32,
        lpinterfaceinfo: *const ::std::mem::ManuallyDrop<INTERFACEINFO>,
    ) -> u32,
    #[cfg(not(feature = "Win32_Media_Audio_CoreAudio"))] usize,
    #[cfg(feature = "Win32_Media_Audio_CoreAudio")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        htaskcallee: super::super::Media::Audio::CoreAudio::HTASK,
        dwtickcount: u32,
        dwrejecttype: u32,
    ) -> u32,
    #[cfg(not(feature = "Win32_Media_Audio_CoreAudio"))] usize,
    #[cfg(feature = "Win32_Media_Audio_CoreAudio")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        htaskcallee: super::super::Media::Audio::CoreAudio::HTASK,
        dwtickcount: u32,
        dwpendingtype: u32,
    ) -> u32,
    #[cfg(not(feature = "Win32_Media_Audio_CoreAudio"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IMoniker(::windows::runtime::IUnknown);
impl IMoniker {
    pub unsafe fn GetClassID(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::GUID>(result__)
    }
    pub unsafe fn IsDirty(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub unsafe fn Load<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
    >(
        &self,
        pstm: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            pstm.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn Save<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        pstm: Param0,
        fcleardirty: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            pstm.into_param().abi(),
            fcleardirty.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetSizeMax(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u64>(result__)
    }
    pub unsafe fn BindToObject<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IBindCtx>,
        Param1: ::windows::runtime::IntoParam<'a, IMoniker>,
    >(
        &self,
        pbc: Param0,
        pmktoleft: Param1,
        riidresult: *const ::windows::runtime::GUID,
        ppvresult: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            pbc.into_param().abi(),
            pmktoleft.into_param().abi(),
            ::std::mem::transmute(riidresult),
            ::std::mem::transmute(ppvresult),
        )
        .ok()
    }
    pub unsafe fn BindToStorage<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IBindCtx>,
        Param1: ::windows::runtime::IntoParam<'a, IMoniker>,
    >(
        &self,
        pbc: Param0,
        pmktoleft: Param1,
        riid: *const ::windows::runtime::GUID,
        ppvobj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            pbc.into_param().abi(),
            pmktoleft.into_param().abi(),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(ppvobj),
        )
        .ok()
    }
    pub unsafe fn Reduce<'a, Param0: ::windows::runtime::IntoParam<'a, IBindCtx>>(
        &self,
        pbc: Param0,
        dwreducehowfar: u32,
        ppmktoleft: *mut ::std::option::Option<IMoniker>,
        ppmkreduced: *mut ::std::option::Option<IMoniker>,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            pbc.into_param().abi(),
            ::std::mem::transmute(dwreducehowfar),
            ::std::mem::transmute(ppmktoleft),
            ::std::mem::transmute(ppmkreduced),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ComposeWith<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IMoniker>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        pmkright: Param0,
        fonlyifnotgeneric: Param1,
    ) -> ::windows::runtime::Result<IMoniker> {
        let mut result__: <IMoniker as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            pmkright.into_param().abi(),
            fonlyifnotgeneric.into_param().abi(),
            &mut result__,
        )
        .from_abi::<IMoniker>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Enum<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fforward: Param0,
    ) -> ::windows::runtime::Result<IEnumMoniker> {
        let mut result__: <IEnumMoniker as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            fforward.into_param().abi(),
            &mut result__,
        )
        .from_abi::<IEnumMoniker>(result__)
    }
    pub unsafe fn IsEqual<'a, Param0: ::windows::runtime::IntoParam<'a, IMoniker>>(
        &self,
        pmkothermoniker: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            pmkothermoniker.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Hash(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn IsRunning<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IBindCtx>,
        Param1: ::windows::runtime::IntoParam<'a, IMoniker>,
        Param2: ::windows::runtime::IntoParam<'a, IMoniker>,
    >(
        &self,
        pbc: Param0,
        pmktoleft: Param1,
        pmknewlyrunning: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            pbc.into_param().abi(),
            pmktoleft.into_param().abi(),
            pmknewlyrunning.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetTimeOfLastChange<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IBindCtx>,
        Param1: ::windows::runtime::IntoParam<'a, IMoniker>,
    >(
        &self,
        pbc: Param0,
        pmktoleft: Param1,
    ) -> ::windows::runtime::Result<super::super::Foundation::FILETIME> {
        let mut result__: <super::super::Foundation::FILETIME as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            pbc.into_param().abi(),
            pmktoleft.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::FILETIME>(result__)
    }
    pub unsafe fn Inverse(&self) -> ::windows::runtime::Result<IMoniker> {
        let mut result__: <IMoniker as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IMoniker>(result__)
    }
    pub unsafe fn CommonPrefixWith<'a, Param0: ::windows::runtime::IntoParam<'a, IMoniker>>(
        &self,
        pmkother: Param0,
    ) -> ::windows::runtime::Result<IMoniker> {
        let mut result__: <IMoniker as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(
            ::std::mem::transmute_copy(self),
            pmkother.into_param().abi(),
            &mut result__,
        )
        .from_abi::<IMoniker>(result__)
    }
    pub unsafe fn RelativePathTo<'a, Param0: ::windows::runtime::IntoParam<'a, IMoniker>>(
        &self,
        pmkother: Param0,
    ) -> ::windows::runtime::Result<IMoniker> {
        let mut result__: <IMoniker as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(
            ::std::mem::transmute_copy(self),
            pmkother.into_param().abi(),
            &mut result__,
        )
        .from_abi::<IMoniker>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetDisplayName<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IBindCtx>,
        Param1: ::windows::runtime::IntoParam<'a, IMoniker>,
    >(
        &self,
        pbc: Param0,
        pmktoleft: Param1,
    ) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).20)(
            ::std::mem::transmute_copy(self),
            pbc.into_param().abi(),
            pmktoleft.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ParseDisplayName<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IBindCtx>,
        Param1: ::windows::runtime::IntoParam<'a, IMoniker>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pbc: Param0,
        pmktoleft: Param1,
        pszdisplayname: Param2,
        pcheaten: *mut u32,
        ppmkout: *mut ::std::option::Option<IMoniker>,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(
            ::std::mem::transmute_copy(self),
            pbc.into_param().abi(),
            pmktoleft.into_param().abi(),
            pszdisplayname.into_param().abi(),
            ::std::mem::transmute(pcheaten),
            ::std::mem::transmute(ppmkout),
        )
        .ok()
    }
    pub unsafe fn IsSystemMoniker(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).22)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMoniker {
    type Vtable = IMoniker_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(15, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IMoniker> for ::windows::runtime::IUnknown {
    fn from(value: IMoniker) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IMoniker> for ::windows::runtime::IUnknown {
    fn from(value: &IMoniker) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMoniker {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IMoniker {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IMoniker> for IPersistStream {
    fn from(value: IMoniker) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IMoniker> for IPersistStream {
    fn from(value: &IMoniker) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IPersistStream> for IMoniker {
    fn into_param(self) -> ::windows::runtime::Param<'a, IPersistStream> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IPersistStream>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IPersistStream> for &IMoniker {
    fn into_param(self) -> ::windows::runtime::Param<'a, IPersistStream> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IPersistStream>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<IMoniker> for IPersist {
    fn from(value: IMoniker) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IMoniker> for IPersist {
    fn from(value: &IMoniker) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IPersist> for IMoniker {
    fn into_param(self) -> ::windows::runtime::Param<'a, IPersist> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IPersist>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IPersist> for &IMoniker {
    fn into_param(self) -> ::windows::runtime::Param<'a, IPersist> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IPersist>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMoniker_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pclassid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstm: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Storage_StructuredStorage"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstm: ::windows::runtime::RawPtr,
        fcleardirty: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pcbsize: *mut u64,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbc: ::windows::runtime::RawPtr,
        pmktoleft: ::windows::runtime::RawPtr,
        riidresult: *const ::windows::runtime::GUID,
        ppvresult: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbc: ::windows::runtime::RawPtr,
        pmktoleft: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        ppvobj: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbc: ::windows::runtime::RawPtr,
        dwreducehowfar: u32,
        ppmktoleft: *mut ::windows::runtime::RawPtr,
        ppmkreduced: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmkright: ::windows::runtime::RawPtr,
        fonlyifnotgeneric: super::super::Foundation::BOOL,
        ppmkcomposite: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fforward: super::super::Foundation::BOOL,
        ppenummoniker: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmkothermoniker: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwhash: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbc: ::windows::runtime::RawPtr,
        pmktoleft: ::windows::runtime::RawPtr,
        pmknewlyrunning: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbc: ::windows::runtime::RawPtr,
        pmktoleft: ::windows::runtime::RawPtr,
        pfiletime: *mut super::super::Foundation::FILETIME,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppmk: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmkother: ::windows::runtime::RawPtr,
        ppmkprefix: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmkother: ::windows::runtime::RawPtr,
        ppmkrelpath: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbc: ::windows::runtime::RawPtr,
        pmktoleft: ::windows::runtime::RawPtr,
        ppszdisplayname: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbc: ::windows::runtime::RawPtr,
        pmktoleft: ::windows::runtime::RawPtr,
        pszdisplayname: super::super::Foundation::PWSTR,
        pcheaten: *mut u32,
        ppmkout: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwmksys: *mut u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IMonikerProp(::windows::runtime::IUnknown);
impl IMonikerProp {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PutProperty<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        mkp: MONIKERPROPERTY,
        val: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(mkp),
            val.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMonikerProp {
    type Vtable = IMonikerProp_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2781503359,
        6215,
        19847,
        [156, 91, 145, 133, 9, 247, 81, 29],
    );
}
impl ::std::convert::From<IMonikerProp> for ::windows::runtime::IUnknown {
    fn from(value: IMonikerProp) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IMonikerProp> for ::windows::runtime::IUnknown {
    fn from(value: &IMonikerProp) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMonikerProp {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IMonikerProp {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMonikerProp_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        mkp: MONIKERPROPERTY,
        val: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IMultiQI(::windows::runtime::IUnknown);
impl IMultiQI {
    pub unsafe fn QueryMultipleInterfaces(
        &self,
        cmqis: u32,
        pmqis: *mut MULTI_QI,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(cmqis),
            ::std::mem::transmute(pmqis),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMultiQI {
    type Vtable = IMultiQI_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(32, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IMultiQI> for ::windows::runtime::IUnknown {
    fn from(value: IMultiQI) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IMultiQI> for ::windows::runtime::IUnknown {
    fn from(value: &IMultiQI) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IMultiQI {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IMultiQI {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMultiQI_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        cmqis: u32,
        pmqis: *mut ::std::mem::ManuallyDrop<MULTI_QI>,
    ) -> ::windows::runtime::HRESULT,
);
pub const INET_E_AUTHENTICATION_REQUIRED: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697207i32 as _);
pub const INET_E_BLOCKED_ENHANCEDPROTECTEDMODE: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146695930i32 as _);
pub const INET_E_BLOCKED_PLUGGABLE_PROTOCOL: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146695931i32 as _);
pub const INET_E_BLOCKED_REDIRECT_XSECURITYID: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697189i32 as _);
pub const INET_E_CANNOT_CONNECT: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697212i32 as _);
pub const INET_E_CANNOT_INSTANTIATE_OBJECT: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697200i32 as _);
pub const INET_E_CANNOT_LOAD_DATA: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697201i32 as _);
pub const INET_E_CANNOT_LOCK_REQUEST: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697194i32 as _);
pub const INET_E_CANNOT_REPLACE_SFP_FILE: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146696448i32 as _);
pub const INET_E_CODE_DOWNLOAD_DECLINED: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146696960i32 as _);
pub const INET_E_CODE_INSTALL_BLOCKED_ARM: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146695932i32 as _);
pub const INET_E_CODE_INSTALL_BLOCKED_BITNESS: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146695929i32 as _);
pub const INET_E_CODE_INSTALL_BLOCKED_BY_HASH_POLICY: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146695936i32 as _);
pub const INET_E_CODE_INSTALL_BLOCKED_IMMERSIVE: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146695934i32 as _);
pub const INET_E_CODE_INSTALL_SUPPRESSED: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146696192i32 as _);
pub const INET_E_CONNECTION_TIMEOUT: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697205i32 as _);
pub const INET_E_DATA_NOT_AVAILABLE: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697209i32 as _);
pub const INET_E_DEFAULT_ACTION: i32 = -2146697199i32;
pub const INET_E_DOMINJECTIONVALIDATION: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697188i32 as _);
pub const INET_E_DOWNLOAD_BLOCKED_BY_CSP: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146695928i32 as _);
pub const INET_E_DOWNLOAD_BLOCKED_BY_INPRIVATE: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146695935i32 as _);
pub const INET_E_DOWNLOAD_FAILURE: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697208i32 as _);
pub const INET_E_ERROR_FIRST: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697214i32 as _);
pub const INET_E_ERROR_LAST: i32 = -2146695928i32;
pub const INET_E_FORBIDFRAMING: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146695933i32 as _);
pub const INET_E_HSTS_CERTIFICATE_ERROR: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697186i32 as _);
pub const INET_E_INVALID_CERTIFICATE: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697191i32 as _);
pub const INET_E_INVALID_REQUEST: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697204i32 as _);
pub const INET_E_INVALID_URL: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697214i32 as _);
pub const INET_E_NO_SESSION: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697213i32 as _);
pub const INET_E_NO_VALID_MEDIA: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697206i32 as _);
pub const INET_E_OBJECT_NOT_FOUND: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697210i32 as _);
pub const INET_E_QUERYOPTION_UNKNOWN: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697197i32 as _);
pub const INET_E_REDIRECTING: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697196i32 as _);
pub const INET_E_REDIRECT_FAILED: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697196i32 as _);
pub const INET_E_REDIRECT_TO_DIR: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697195i32 as _);
pub const INET_E_RESERVED_1: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697190i32 as _);
pub const INET_E_RESERVED_2: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697185i32 as _);
pub const INET_E_RESERVED_3: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697184i32 as _);
pub const INET_E_RESERVED_4: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697183i32 as _);
pub const INET_E_RESERVED_5: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697182i32 as _);
pub const INET_E_RESOURCE_NOT_FOUND: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697211i32 as _);
pub const INET_E_RESULT_DISPATCHED: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146696704i32 as _);
pub const INET_E_SECURITY_PROBLEM: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697202i32 as _);
pub const INET_E_TERMINATED_BIND: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697192i32 as _);
pub const INET_E_UNKNOWN_PROTOCOL: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697203i32 as _);
pub const INET_E_USE_DEFAULT_PROTOCOLHANDLER: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697199i32 as _);
pub const INET_E_USE_DEFAULT_SETTING: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697198i32 as _);
pub const INET_E_USE_EXTEND_BINDING: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697193i32 as _);
pub const INET_E_VTAB_SWITCH_FORCE_ENGINE: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2146697187i32 as _);
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct INET_ZONE_MANAGER_CONSTANTS(pub i32);
pub const MAX_ZONE_PATH: INET_ZONE_MANAGER_CONSTANTS = INET_ZONE_MANAGER_CONSTANTS(260i32);
pub const MAX_ZONE_DESCRIPTION: INET_ZONE_MANAGER_CONSTANTS = INET_ZONE_MANAGER_CONSTANTS(200i32);
impl ::std::convert::From<i32> for INET_ZONE_MANAGER_CONSTANTS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for INET_ZONE_MANAGER_CONSTANTS {
    type Abi = Self;
    type DefaultType = Self;
}
pub const INSTALL_SCOPE_INVALID: u32 = 0u32;
pub const INSTALL_SCOPE_MACHINE: u32 = 1u32;
pub const INSTALL_SCOPE_USER: u32 = 2u32;
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
pub struct INTERFACEINFO {
    pub pUnk: ::std::option::Option<::windows::runtime::IUnknown>,
    pub iid: ::windows::runtime::GUID,
    pub wMethod: u16,
}
impl INTERFACEINFO {}
impl ::std::default::Default for INTERFACEINFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for INTERFACEINFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("INTERFACEINFO")
            .field("pUnk", &self.pUnk)
            .field("iid", &self.iid)
            .field("wMethod", &self.wMethod)
            .finish()
    }
}
impl ::std::cmp::PartialEq for INTERFACEINFO {
    fn eq(&self, other: &Self) -> bool {
        self.pUnk == other.pUnk && self.iid == other.iid && self.wMethod == other.wMethod
    }
}
impl ::std::cmp::Eq for INTERFACEINFO {}
unsafe impl ::windows::runtime::Abi for INTERFACEINFO {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct INTERNETFEATURELIST(pub i32);
pub const FEATURE_OBJECT_CACHING: INTERNETFEATURELIST = INTERNETFEATURELIST(0i32);
pub const FEATURE_ZONE_ELEVATION: INTERNETFEATURELIST = INTERNETFEATURELIST(1i32);
pub const FEATURE_MIME_HANDLING: INTERNETFEATURELIST = INTERNETFEATURELIST(2i32);
pub const FEATURE_MIME_SNIFFING: INTERNETFEATURELIST = INTERNETFEATURELIST(3i32);
pub const FEATURE_WINDOW_RESTRICTIONS: INTERNETFEATURELIST = INTERNETFEATURELIST(4i32);
pub const FEATURE_WEBOC_POPUPMANAGEMENT: INTERNETFEATURELIST = INTERNETFEATURELIST(5i32);
pub const FEATURE_BEHAVIORS: INTERNETFEATURELIST = INTERNETFEATURELIST(6i32);
pub const FEATURE_DISABLE_MK_PROTOCOL: INTERNETFEATURELIST = INTERNETFEATURELIST(7i32);
pub const FEATURE_LOCALMACHINE_LOCKDOWN: INTERNETFEATURELIST = INTERNETFEATURELIST(8i32);
pub const FEATURE_SECURITYBAND: INTERNETFEATURELIST = INTERNETFEATURELIST(9i32);
pub const FEATURE_RESTRICT_ACTIVEXINSTALL: INTERNETFEATURELIST = INTERNETFEATURELIST(10i32);
pub const FEATURE_VALIDATE_NAVIGATE_URL: INTERNETFEATURELIST = INTERNETFEATURELIST(11i32);
pub const FEATURE_RESTRICT_FILEDOWNLOAD: INTERNETFEATURELIST = INTERNETFEATURELIST(12i32);
pub const FEATURE_ADDON_MANAGEMENT: INTERNETFEATURELIST = INTERNETFEATURELIST(13i32);
pub const FEATURE_PROTOCOL_LOCKDOWN: INTERNETFEATURELIST = INTERNETFEATURELIST(14i32);
pub const FEATURE_HTTP_USERNAME_PASSWORD_DISABLE: INTERNETFEATURELIST = INTERNETFEATURELIST(15i32);
pub const FEATURE_SAFE_BINDTOOBJECT: INTERNETFEATURELIST = INTERNETFEATURELIST(16i32);
pub const FEATURE_UNC_SAVEDFILECHECK: INTERNETFEATURELIST = INTERNETFEATURELIST(17i32);
pub const FEATURE_GET_URL_DOM_FILEPATH_UNENCODED: INTERNETFEATURELIST = INTERNETFEATURELIST(18i32);
pub const FEATURE_TABBED_BROWSING: INTERNETFEATURELIST = INTERNETFEATURELIST(19i32);
pub const FEATURE_SSLUX: INTERNETFEATURELIST = INTERNETFEATURELIST(20i32);
pub const FEATURE_DISABLE_NAVIGATION_SOUNDS: INTERNETFEATURELIST = INTERNETFEATURELIST(21i32);
pub const FEATURE_DISABLE_LEGACY_COMPRESSION: INTERNETFEATURELIST = INTERNETFEATURELIST(22i32);
pub const FEATURE_FORCE_ADDR_AND_STATUS: INTERNETFEATURELIST = INTERNETFEATURELIST(23i32);
pub const FEATURE_XMLHTTP: INTERNETFEATURELIST = INTERNETFEATURELIST(24i32);
pub const FEATURE_DISABLE_TELNET_PROTOCOL: INTERNETFEATURELIST = INTERNETFEATURELIST(25i32);
pub const FEATURE_FEEDS: INTERNETFEATURELIST = INTERNETFEATURELIST(26i32);
pub const FEATURE_BLOCK_INPUT_PROMPTS: INTERNETFEATURELIST = INTERNETFEATURELIST(27i32);
pub const FEATURE_ENTRY_COUNT: INTERNETFEATURELIST = INTERNETFEATURELIST(28i32);
impl ::std::convert::From<i32> for INTERNETFEATURELIST {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for INTERNETFEATURELIST {
    type Abi = Self;
    type DefaultType = Self;
}
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct INoMarshal(::windows::runtime::IUnknown);
impl INoMarshal {}
unsafe impl ::windows::runtime::Interface for INoMarshal {
    type Vtable = INoMarshal_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3972557083,
        49627,
        19904,
        [133, 94, 101, 246, 197, 81, 175, 73],
    );
}
impl ::std::convert::From<INoMarshal> for ::windows::runtime::IUnknown {
    fn from(value: INoMarshal) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&INoMarshal> for ::windows::runtime::IUnknown {
    fn from(value: &INoMarshal) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for INoMarshal {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &INoMarshal {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct INoMarshal_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
);
pub const IOF_CHECKDISPLAYASICON: i32 = 16i32;
pub const IOF_CHECKLINK: i32 = 8i32;
pub const IOF_CREATEFILEOBJECT: i32 = 64i32;
pub const IOF_CREATELINKOBJECT: i32 = 128i32;
pub const IOF_CREATENEWOBJECT: i32 = 32i32;
pub const IOF_DISABLEDISPLAYASICON: i32 = 1024i32;
pub const IOF_DISABLELINK: i32 = 256i32;
pub const IOF_HIDECHANGEICON: i32 = 2048i32;
pub const IOF_SELECTCREATECONTROL: i32 = 8192i32;
pub const IOF_SELECTCREATEFROMFILE: i32 = 4i32;
pub const IOF_SELECTCREATENEW: i32 = 2i32;
pub const IOF_SHOWHELP: i32 = 1i32;
pub const IOF_SHOWINSERTCONTROL: i32 = 4096i32;
pub const IOF_VERIFYSERVERSEXIST: i32 = 512i32;
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IObjectWithSite(::windows::runtime::IUnknown);
impl IObjectWithSite {
    pub unsafe fn SetSite<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    >(
        &self,
        punksite: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            punksite.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetSite<T: ::windows::runtime::Interface>(
        &self,
    ) -> ::windows::runtime::Result<T> {
        let mut result__ = ::std::option::Option::None;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            &<T as ::windows::runtime::Interface>::IID,
            &mut result__ as *mut _ as *mut _,
        )
        .and_some(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IObjectWithSite {
    type Vtable = IObjectWithSite_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4232577443,
        11177,
        4559,
        [162, 41, 0, 170, 0, 61, 115, 82],
    );
}
impl ::std::convert::From<IObjectWithSite> for ::windows::runtime::IUnknown {
    fn from(value: IObjectWithSite) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IObjectWithSite> for ::windows::runtime::IUnknown {
    fn from(value: &IObjectWithSite) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IObjectWithSite {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IObjectWithSite {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IObjectWithSite_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        punksite: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        ppvsite: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleAdviseHolder(::windows::runtime::IUnknown);
impl IOleAdviseHolder {
    pub unsafe fn Advise<'a, Param0: ::windows::runtime::IntoParam<'a, IAdviseSink>>(
        &self,
        padvise: Param0,
    ) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            padvise.into_param().abi(),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn Unadvise(&self, dwconnection: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwconnection),
        )
        .ok()
    }
    pub unsafe fn EnumAdvise(&self) -> ::windows::runtime::Result<IEnumSTATDATA> {
        let mut result__: <IEnumSTATDATA as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumSTATDATA>(result__)
    }
    pub unsafe fn SendOnRename<'a, Param0: ::windows::runtime::IntoParam<'a, IMoniker>>(
        &self,
        pmk: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            pmk.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn SendOnSave(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn SendOnClose(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleAdviseHolder {
    type Vtable = IOleAdviseHolder_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(273, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IOleAdviseHolder> for ::windows::runtime::IUnknown {
    fn from(value: IOleAdviseHolder) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleAdviseHolder> for ::windows::runtime::IUnknown {
    fn from(value: &IOleAdviseHolder) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleAdviseHolder {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleAdviseHolder {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleAdviseHolder_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        padvise: ::windows::runtime::RawPtr,
        pdwconnection: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwconnection: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenumadvise: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmk: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleCache(::windows::runtime::IUnknown);
impl IOleCache {
    pub unsafe fn Cache(
        &self,
        pformatetc: *const FORMATETC,
        advf: u32,
    ) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pformatetc),
            ::std::mem::transmute(advf),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn Uncache(&self, dwconnection: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwconnection),
        )
        .ok()
    }
    pub unsafe fn EnumCache(&self) -> ::windows::runtime::Result<IEnumSTATDATA> {
        let mut result__: <IEnumSTATDATA as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumSTATDATA>(result__)
    }
    pub unsafe fn InitCache<'a, Param0: ::windows::runtime::IntoParam<'a, IDataObject>>(
        &self,
        pdataobject: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            pdataobject.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn SetData<
        'a,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        pformatetc: *const FORMATETC,
        pmedium: *const STGMEDIUM,
        frelease: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pformatetc),
            ::std::mem::transmute(pmedium),
            frelease.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleCache {
    type Vtable = IOleCache_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(286, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IOleCache> for ::windows::runtime::IUnknown {
    fn from(value: IOleCache) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleCache> for ::windows::runtime::IUnknown {
    fn from(value: &IOleCache) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleCache {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleCache {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleCache_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pformatetc: *const FORMATETC,
        advf: u32,
        pdwconnection: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwconnection: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenumstatdata: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdataobject: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pformatetc: *const FORMATETC,
        pmedium: *const ::std::mem::ManuallyDrop<STGMEDIUM>,
        frelease: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleCache2(::windows::runtime::IUnknown);
impl IOleCache2 {
    pub unsafe fn Cache(
        &self,
        pformatetc: *const FORMATETC,
        advf: u32,
    ) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pformatetc),
            ::std::mem::transmute(advf),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn Uncache(&self, dwconnection: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwconnection),
        )
        .ok()
    }
    pub unsafe fn EnumCache(&self) -> ::windows::runtime::Result<IEnumSTATDATA> {
        let mut result__: <IEnumSTATDATA as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumSTATDATA>(result__)
    }
    pub unsafe fn InitCache<'a, Param0: ::windows::runtime::IntoParam<'a, IDataObject>>(
        &self,
        pdataobject: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            pdataobject.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn SetData<
        'a,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        pformatetc: *const FORMATETC,
        pmedium: *const STGMEDIUM,
        frelease: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pformatetc),
            ::std::mem::transmute(pmedium),
            frelease.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn UpdateCache<'a, Param0: ::windows::runtime::IntoParam<'a, IDataObject>>(
        &self,
        pdataobject: Param0,
        grfupdf: UPDFCACHE_FLAGS,
        preserved: *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            pdataobject.into_param().abi(),
            ::std::mem::transmute(grfupdf),
            ::std::mem::transmute(preserved),
        )
        .ok()
    }
    pub unsafe fn DiscardCache(&self, dwdiscardoptions: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwdiscardoptions),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleCache2 {
    type Vtable = IOleCache2_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(296, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IOleCache2> for ::windows::runtime::IUnknown {
    fn from(value: IOleCache2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleCache2> for ::windows::runtime::IUnknown {
    fn from(value: &IOleCache2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleCache2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleCache2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IOleCache2> for IOleCache {
    fn from(value: IOleCache2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleCache2> for IOleCache {
    fn from(value: &IOleCache2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleCache> for IOleCache2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleCache> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleCache>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleCache> for &IOleCache2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleCache> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleCache>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleCache2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pformatetc: *const FORMATETC,
        advf: u32,
        pdwconnection: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwconnection: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenumstatdata: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdataobject: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pformatetc: *const FORMATETC,
        pmedium: *const ::std::mem::ManuallyDrop<STGMEDIUM>,
        frelease: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdataobject: ::windows::runtime::RawPtr,
        grfupdf: UPDFCACHE_FLAGS,
        preserved: *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwdiscardoptions: u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleCacheControl(::windows::runtime::IUnknown);
impl IOleCacheControl {
    pub unsafe fn OnRun<'a, Param0: ::windows::runtime::IntoParam<'a, IDataObject>>(
        &self,
        pdataobject: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pdataobject.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn OnStop(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleCacheControl {
    type Vtable = IOleCacheControl_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(297, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IOleCacheControl> for ::windows::runtime::IUnknown {
    fn from(value: IOleCacheControl) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleCacheControl> for ::windows::runtime::IUnknown {
    fn from(value: &IOleCacheControl) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleCacheControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleCacheControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleCacheControl_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdataobject: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleClientSite(::windows::runtime::IUnknown);
impl IOleClientSite {
    pub unsafe fn SaveObject(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn GetMoniker(
        &self,
        dwassign: u32,
        dwwhichmoniker: u32,
    ) -> ::windows::runtime::Result<IMoniker> {
        let mut result__: <IMoniker as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwassign),
            ::std::mem::transmute(dwwhichmoniker),
            &mut result__,
        )
        .from_abi::<IMoniker>(result__)
    }
    pub unsafe fn GetContainer(&self) -> ::windows::runtime::Result<IOleContainer> {
        let mut result__: <IOleContainer as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IOleContainer>(result__)
    }
    pub unsafe fn ShowObject(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnShowWindow<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fshow: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            fshow.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn RequestNewObjectLayout(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleClientSite {
    type Vtable = IOleClientSite_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(280, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IOleClientSite> for ::windows::runtime::IUnknown {
    fn from(value: IOleClientSite) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleClientSite> for ::windows::runtime::IUnknown {
    fn from(value: &IOleClientSite) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleClientSite {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleClientSite {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleClientSite_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwassign: u32,
        dwwhichmoniker: u32,
        ppmk: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppcontainer: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fshow: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleCommandTarget(::windows::runtime::IUnknown);
impl IOleCommandTarget {
    pub unsafe fn QueryStatus(
        &self,
        pguidcmdgroup: *const ::windows::runtime::GUID,
        ccmds: u32,
        prgcmds: *mut OLECMD,
        pcmdtext: *mut OLECMDTEXT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pguidcmdgroup),
            ::std::mem::transmute(ccmds),
            ::std::mem::transmute(prgcmds),
            ::std::mem::transmute(pcmdtext),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn Exec(
        &self,
        pguidcmdgroup: *const ::windows::runtime::GUID,
        ncmdid: u32,
        ncmdexecopt: u32,
        pvain: *const super::OleAutomation::VARIANT,
        pvaout: *mut super::OleAutomation::VARIANT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pguidcmdgroup),
            ::std::mem::transmute(ncmdid),
            ::std::mem::transmute(ncmdexecopt),
            ::std::mem::transmute(pvain),
            ::std::mem::transmute(pvaout),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleCommandTarget {
    type Vtable = IOleCommandTarget_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3072507083,
        20072,
        4123,
        [162, 188, 0, 170, 0, 64, 71, 112],
    );
}
impl ::std::convert::From<IOleCommandTarget> for ::windows::runtime::IUnknown {
    fn from(value: IOleCommandTarget) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleCommandTarget> for ::windows::runtime::IUnknown {
    fn from(value: &IOleCommandTarget) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleCommandTarget {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleCommandTarget {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleCommandTarget_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pguidcmdgroup: *const ::windows::runtime::GUID,
        ccmds: u32,
        prgcmds: *mut OLECMD,
        pcmdtext: *mut OLECMDTEXT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pguidcmdgroup: *const ::windows::runtime::GUID,
        ncmdid: u32,
        ncmdexecopt: u32,
        pvain: *const ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
        pvaout: *mut ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleContainer(::windows::runtime::IUnknown);
impl IOleContainer {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ParseDisplayName<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IBindCtx>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pbc: Param0,
        pszdisplayname: Param1,
        pcheaten: *mut u32,
        ppmkout: *mut ::std::option::Option<IMoniker>,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pbc.into_param().abi(),
            pszdisplayname.into_param().abi(),
            ::std::mem::transmute(pcheaten),
            ::std::mem::transmute(ppmkout),
        )
        .ok()
    }
    pub unsafe fn EnumObjects(&self, grfflags: u32) -> ::windows::runtime::Result<IEnumUnknown> {
        let mut result__: <IEnumUnknown as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(grfflags),
            &mut result__,
        )
        .from_abi::<IEnumUnknown>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn LockContainer<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        flock: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            flock.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleContainer {
    type Vtable = IOleContainer_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(283, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IOleContainer> for ::windows::runtime::IUnknown {
    fn from(value: IOleContainer) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleContainer> for ::windows::runtime::IUnknown {
    fn from(value: &IOleContainer) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleContainer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleContainer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IOleContainer> for IParseDisplayName {
    fn from(value: IOleContainer) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleContainer> for IParseDisplayName {
    fn from(value: &IOleContainer) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IParseDisplayName> for IOleContainer {
    fn into_param(self) -> ::windows::runtime::Param<'a, IParseDisplayName> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IParseDisplayName>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IParseDisplayName> for &IOleContainer {
    fn into_param(self) -> ::windows::runtime::Param<'a, IParseDisplayName> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IParseDisplayName>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleContainer_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbc: ::windows::runtime::RawPtr,
        pszdisplayname: super::super::Foundation::PWSTR,
        pcheaten: *mut u32,
        ppmkout: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        grfflags: u32,
        ppenum: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        flock: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleControl(::windows::runtime::IUnknown);
impl IOleControl {
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub unsafe fn GetControlInfo(&self, pci: *mut CONTROLINFO) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pci),
        )
        .ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn OnMnemonic(
        &self,
        pmsg: *const super::super::UI::WindowsAndMessaging::MSG,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmsg),
        )
        .ok()
    }
    pub unsafe fn OnAmbientPropertyChange(&self, dispid: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispid),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn FreezeEvents<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        bfreeze: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            bfreeze.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleControl {
    type Vtable = IOleControl_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2979443336,
        47796,
        4122,
        [182, 156, 0, 170, 0, 52, 29, 7],
    );
}
impl ::std::convert::From<IOleControl> for ::windows::runtime::IUnknown {
    fn from(value: IOleControl) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleControl> for ::windows::runtime::IUnknown {
    fn from(value: &IOleControl) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleControl_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pci: *mut CONTROLINFO,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_UI_WindowsAndMessaging"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmsg: *const super::super::UI::WindowsAndMessaging::MSG,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispid: i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bfreeze: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleControlSite(::windows::runtime::IUnknown);
impl IOleControlSite {
    pub unsafe fn OnControlInfoChanged(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn LockInPlaceActive<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        flock: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            flock.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub unsafe fn GetExtendedControl(
        &self,
    ) -> ::windows::runtime::Result<super::OleAutomation::IDispatch> {
        let mut result__: <super::OleAutomation::IDispatch as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::OleAutomation::IDispatch>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn TransformCoords(
        &self,
        pptlhimetric: *mut super::super::Foundation::POINTL,
        pptfcontainer: *mut POINTF,
        dwflags: XFORMCOORDS,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pptlhimetric),
            ::std::mem::transmute(pptfcontainer),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn TranslateAccelerator(
        &self,
        pmsg: *const super::super::UI::WindowsAndMessaging::MSG,
        grfmodifiers: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmsg),
            ::std::mem::transmute(grfmodifiers),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnFocus<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fgotfocus: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            fgotfocus.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ShowPropertyFrame(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleControlSite {
    type Vtable = IOleControlSite_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2979443337,
        47796,
        4122,
        [182, 156, 0, 170, 0, 52, 29, 7],
    );
}
impl ::std::convert::From<IOleControlSite> for ::windows::runtime::IUnknown {
    fn from(value: IOleControlSite) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleControlSite> for ::windows::runtime::IUnknown {
    fn from(value: &IOleControlSite) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleControlSite {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleControlSite {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleControlSite_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        flock: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppdisp: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_OleAutomation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pptlhimetric: *mut super::super::Foundation::POINTL,
        pptfcontainer: *mut POINTF,
        dwflags: XFORMCOORDS,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmsg: *const super::super::UI::WindowsAndMessaging::MSG,
        grfmodifiers: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fgotfocus: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleDocument(::windows::runtime::IUnknown);
impl IOleDocument {
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub unsafe fn CreateView<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IOleInPlaceSite>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
    >(
        &self,
        pipsite: Param0,
        pstm: Param1,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<IOleDocumentView> {
        let mut result__: <IOleDocumentView as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pipsite.into_param().abi(),
            pstm.into_param().abi(),
            ::std::mem::transmute(dwreserved),
            &mut result__,
        )
        .from_abi::<IOleDocumentView>(result__)
    }
    pub unsafe fn GetDocMiscStatus(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn EnumViews(
        &self,
        ppenum: *mut ::std::option::Option<IEnumOleDocumentViews>,
        ppview: *mut ::std::option::Option<IOleDocumentView>,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ppenum),
            ::std::mem::transmute(ppview),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleDocument {
    type Vtable = IOleDocument_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3072507077,
        20072,
        4123,
        [162, 188, 0, 170, 0, 64, 71, 112],
    );
}
impl ::std::convert::From<IOleDocument> for ::windows::runtime::IUnknown {
    fn from(value: IOleDocument) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleDocument> for ::windows::runtime::IUnknown {
    fn from(value: &IOleDocument) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleDocument {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleDocument {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleDocument_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pipsite: ::windows::runtime::RawPtr,
        pstm: ::windows::runtime::RawPtr,
        dwreserved: u32,
        ppview: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Storage_StructuredStorage"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwstatus: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenum: *mut ::windows::runtime::RawPtr,
        ppview: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleDocumentSite(::windows::runtime::IUnknown);
impl IOleDocumentSite {
    pub unsafe fn ActivateMe<'a, Param0: ::windows::runtime::IntoParam<'a, IOleDocumentView>>(
        &self,
        pviewtoactivate: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pviewtoactivate.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleDocumentSite {
    type Vtable = IOleDocumentSite_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3072507079,
        20072,
        4123,
        [162, 188, 0, 170, 0, 64, 71, 112],
    );
}
impl ::std::convert::From<IOleDocumentSite> for ::windows::runtime::IUnknown {
    fn from(value: IOleDocumentSite) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleDocumentSite> for ::windows::runtime::IUnknown {
    fn from(value: &IOleDocumentSite) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleDocumentSite {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleDocumentSite {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleDocumentSite_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pviewtoactivate: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleDocumentView(::windows::runtime::IUnknown);
impl IOleDocumentView {
    pub unsafe fn SetInPlaceSite<'a, Param0: ::windows::runtime::IntoParam<'a, IOleInPlaceSite>>(
        &self,
        pipsite: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pipsite.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetInPlaceSite(&self) -> ::windows::runtime::Result<IOleInPlaceSite> {
        let mut result__: <IOleInPlaceSite as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IOleInPlaceSite>(result__)
    }
    pub unsafe fn GetDocument(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetRect(
        &self,
        prcview: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(prcview),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetRect(&self) -> ::windows::runtime::Result<super::super::Foundation::RECT> {
        let mut result__: <super::super::Foundation::RECT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::RECT>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetRectComplex(
        &self,
        prcview: *const super::super::Foundation::RECT,
        prchscroll: *const super::super::Foundation::RECT,
        prcvscroll: *const super::super::Foundation::RECT,
        prcsizebox: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(prcview),
            ::std::mem::transmute(prchscroll),
            ::std::mem::transmute(prcvscroll),
            ::std::mem::transmute(prcsizebox),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Show<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fshow: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            fshow.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn UIActivate<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fuiactivate: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            fuiactivate.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Open(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn CloseView(&self, dwreserved: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub unsafe fn SaveViewState<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
    >(
        &self,
        pstm: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            pstm.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub unsafe fn ApplyViewState<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
    >(
        &self,
        pstm: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            pstm.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Clone<'a, Param0: ::windows::runtime::IntoParam<'a, IOleInPlaceSite>>(
        &self,
        pipsitenew: Param0,
    ) -> ::windows::runtime::Result<IOleDocumentView> {
        let mut result__: <IOleDocumentView as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            pipsitenew.into_param().abi(),
            &mut result__,
        )
        .from_abi::<IOleDocumentView>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IOleDocumentView {
    type Vtable = IOleDocumentView_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3072507078,
        20072,
        4123,
        [162, 188, 0, 170, 0, 64, 71, 112],
    );
}
impl ::std::convert::From<IOleDocumentView> for ::windows::runtime::IUnknown {
    fn from(value: IOleDocumentView) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleDocumentView> for ::windows::runtime::IUnknown {
    fn from(value: &IOleDocumentView) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleDocumentView {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleDocumentView {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleDocumentView_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pipsite: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppipsite: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppunk: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        prcview: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        prcview: *mut super::super::Foundation::RECT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        prcview: *const super::super::Foundation::RECT,
        prchscroll: *const super::super::Foundation::RECT,
        prcvscroll: *const super::super::Foundation::RECT,
        prcsizebox: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fshow: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fuiactivate: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstm: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Storage_StructuredStorage"))] usize,
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstm: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Storage_StructuredStorage"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pipsitenew: ::windows::runtime::RawPtr,
        ppviewnew: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleInPlaceActiveObject(::windows::runtime::IUnknown);
impl IOleInPlaceActiveObject {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetWindow(&self) -> ::windows::runtime::Result<super::super::Foundation::HWND> {
        let mut result__: <super::super::Foundation::HWND as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::HWND>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ContextSensitiveHelp<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fentermode: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            fentermode.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn TranslateAccelerator(
        &self,
        lpmsg: *const super::super::UI::WindowsAndMessaging::MSG,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(lpmsg),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnFrameWindowActivate<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        factivate: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            factivate.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnDocWindowActivate<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        factivate: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            factivate.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ResizeBorder<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, IOleInPlaceUIWindow>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        prcborder: *const super::super::Foundation::RECT,
        puiwindow: Param1,
        fframewindow: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(prcborder),
            puiwindow.into_param().abi(),
            fframewindow.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn EnableModeless<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fenable: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            fenable.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleInPlaceActiveObject {
    type Vtable = IOleInPlaceActiveObject_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(279, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IOleInPlaceActiveObject> for ::windows::runtime::IUnknown {
    fn from(value: IOleInPlaceActiveObject) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleInPlaceActiveObject> for ::windows::runtime::IUnknown {
    fn from(value: &IOleInPlaceActiveObject) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IOleInPlaceActiveObject
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IOleInPlaceActiveObject
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IOleInPlaceActiveObject> for IOleWindow {
    fn from(value: IOleInPlaceActiveObject) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleInPlaceActiveObject> for IOleWindow {
    fn from(value: &IOleInPlaceActiveObject) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleWindow> for IOleInPlaceActiveObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleWindow> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleWindow>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleWindow> for &IOleInPlaceActiveObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleWindow> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleWindow>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleInPlaceActiveObject_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phwnd: *mut super::super::Foundation::HWND,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fentermode: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        lpmsg: *const super::super::UI::WindowsAndMessaging::MSG,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        factivate: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        factivate: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        prcborder: *const super::super::Foundation::RECT,
        puiwindow: ::windows::runtime::RawPtr,
        fframewindow: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fenable: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleInPlaceFrame(::windows::runtime::IUnknown);
impl IOleInPlaceFrame {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetWindow(&self) -> ::windows::runtime::Result<super::super::Foundation::HWND> {
        let mut result__: <super::super::Foundation::HWND as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::HWND>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ContextSensitiveHelp<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fentermode: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            fentermode.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetBorder(&self) -> ::windows::runtime::Result<super::super::Foundation::RECT> {
        let mut result__: <super::super::Foundation::RECT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::RECT>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RequestBorderSpace(
        &self,
        pborderwidths: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pborderwidths),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetBorderSpace(
        &self,
        pborderwidths: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pborderwidths),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetActiveObject<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IOleInPlaceActiveObject>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pactiveobject: Param0,
        pszobjname: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            pactiveobject.into_param().abi(),
            pszobjname.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub unsafe fn InsertMenus<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::UI::WindowsAndMessaging::HMENU>,
    >(
        &self,
        hmenushared: Param0,
        lpmenuwidths: *mut OleMenuGroupWidths,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            hmenushared.into_param().abi(),
            ::std::mem::transmute(lpmenuwidths),
        )
        .ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn SetMenu<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::UI::WindowsAndMessaging::HMENU>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>,
    >(
        &self,
        hmenushared: Param0,
        holemenu: isize,
        hwndactiveobject: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            hmenushared.into_param().abi(),
            ::std::mem::transmute(holemenu),
            hwndactiveobject.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub unsafe fn RemoveMenus<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::UI::WindowsAndMessaging::HMENU>,
    >(
        &self,
        hmenushared: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            hmenushared.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetStatusText<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pszstatustext: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            pszstatustext.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn EnableModeless<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fenable: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            fenable.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn TranslateAccelerator(
        &self,
        lpmsg: *const super::super::UI::WindowsAndMessaging::MSG,
        wid: u16,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(lpmsg),
            ::std::mem::transmute(wid),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleInPlaceFrame {
    type Vtable = IOleInPlaceFrame_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(278, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IOleInPlaceFrame> for ::windows::runtime::IUnknown {
    fn from(value: IOleInPlaceFrame) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleInPlaceFrame> for ::windows::runtime::IUnknown {
    fn from(value: &IOleInPlaceFrame) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleInPlaceFrame {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleInPlaceFrame {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IOleInPlaceFrame> for IOleInPlaceUIWindow {
    fn from(value: IOleInPlaceFrame) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleInPlaceFrame> for IOleInPlaceUIWindow {
    fn from(value: &IOleInPlaceFrame) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleInPlaceUIWindow> for IOleInPlaceFrame {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleInPlaceUIWindow> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleInPlaceUIWindow>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleInPlaceUIWindow> for &IOleInPlaceFrame {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleInPlaceUIWindow> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleInPlaceUIWindow>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<IOleInPlaceFrame> for IOleWindow {
    fn from(value: IOleInPlaceFrame) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleInPlaceFrame> for IOleWindow {
    fn from(value: &IOleInPlaceFrame) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleWindow> for IOleInPlaceFrame {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleWindow> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleWindow>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleWindow> for &IOleInPlaceFrame {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleWindow> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleWindow>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleInPlaceFrame_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phwnd: *mut super::super::Foundation::HWND,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fentermode: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        lprectborder: *mut super::super::Foundation::RECT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pborderwidths: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pborderwidths: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pactiveobject: ::windows::runtime::RawPtr,
        pszobjname: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hmenushared: super::super::UI::WindowsAndMessaging::HMENU,
        lpmenuwidths: *mut OleMenuGroupWidths,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_UI_WindowsAndMessaging"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hmenushared: super::super::UI::WindowsAndMessaging::HMENU,
        holemenu: isize,
        hwndactiveobject: super::super::Foundation::HWND,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))] usize,
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hmenushared: super::super::UI::WindowsAndMessaging::HMENU,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_UI_WindowsAndMessaging"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pszstatustext: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fenable: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        lpmsg: *const super::super::UI::WindowsAndMessaging::MSG,
        wid: u16,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleInPlaceObject(::windows::runtime::IUnknown);
impl IOleInPlaceObject {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetWindow(&self) -> ::windows::runtime::Result<super::super::Foundation::HWND> {
        let mut result__: <super::super::Foundation::HWND as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::HWND>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ContextSensitiveHelp<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fentermode: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            fentermode.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn InPlaceDeactivate(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn UIDeactivate(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetObjectRects(
        &self,
        lprcposrect: *const super::super::Foundation::RECT,
        lprccliprect: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(lprcposrect),
            ::std::mem::transmute(lprccliprect),
        )
        .ok()
    }
    pub unsafe fn ReactivateAndUndo(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleInPlaceObject {
    type Vtable = IOleInPlaceObject_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(275, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IOleInPlaceObject> for ::windows::runtime::IUnknown {
    fn from(value: IOleInPlaceObject) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleInPlaceObject> for ::windows::runtime::IUnknown {
    fn from(value: &IOleInPlaceObject) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleInPlaceObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleInPlaceObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IOleInPlaceObject> for IOleWindow {
    fn from(value: IOleInPlaceObject) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleInPlaceObject> for IOleWindow {
    fn from(value: &IOleInPlaceObject) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleWindow> for IOleInPlaceObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleWindow> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleWindow>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleWindow> for &IOleInPlaceObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleWindow> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleWindow>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleInPlaceObject_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phwnd: *mut super::super::Foundation::HWND,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fentermode: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        lprcposrect: *const super::super::Foundation::RECT,
        lprccliprect: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleInPlaceObjectWindowless(::windows::runtime::IUnknown);
impl IOleInPlaceObjectWindowless {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetWindow(&self) -> ::windows::runtime::Result<super::super::Foundation::HWND> {
        let mut result__: <super::super::Foundation::HWND as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::HWND>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ContextSensitiveHelp<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fentermode: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            fentermode.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn InPlaceDeactivate(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn UIDeactivate(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetObjectRects(
        &self,
        lprcposrect: *const super::super::Foundation::RECT,
        lprccliprect: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(lprcposrect),
            ::std::mem::transmute(lprccliprect),
        )
        .ok()
    }
    pub unsafe fn ReactivateAndUndo(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnWindowMessage<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::WPARAM>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::LPARAM>,
    >(
        &self,
        msg: u32,
        wparam: Param1,
        lparam: Param2,
    ) -> ::windows::runtime::Result<super::super::Foundation::LRESULT> {
        let mut result__: <super::super::Foundation::LRESULT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(msg),
            wparam.into_param().abi(),
            lparam.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::LRESULT>(result__)
    }
    pub unsafe fn GetDropTarget(&self) -> ::windows::runtime::Result<IDropTarget> {
        let mut result__: <IDropTarget as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IDropTarget>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IOleInPlaceObjectWindowless {
    type Vtable = IOleInPlaceObjectWindowless_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        471881420,
        24308,
        4123,
        [139, 200, 0, 170, 0, 62, 59, 41],
    );
}
impl ::std::convert::From<IOleInPlaceObjectWindowless> for ::windows::runtime::IUnknown {
    fn from(value: IOleInPlaceObjectWindowless) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleInPlaceObjectWindowless> for ::windows::runtime::IUnknown {
    fn from(value: &IOleInPlaceObjectWindowless) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IOleInPlaceObjectWindowless
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IOleInPlaceObjectWindowless
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IOleInPlaceObjectWindowless> for IOleInPlaceObject {
    fn from(value: IOleInPlaceObjectWindowless) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleInPlaceObjectWindowless> for IOleInPlaceObject {
    fn from(value: &IOleInPlaceObjectWindowless) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleInPlaceObject> for IOleInPlaceObjectWindowless {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleInPlaceObject> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleInPlaceObject>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleInPlaceObject> for &IOleInPlaceObjectWindowless {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleInPlaceObject> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleInPlaceObject>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<IOleInPlaceObjectWindowless> for IOleWindow {
    fn from(value: IOleInPlaceObjectWindowless) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleInPlaceObjectWindowless> for IOleWindow {
    fn from(value: &IOleInPlaceObjectWindowless) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleWindow> for IOleInPlaceObjectWindowless {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleWindow> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleWindow>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleWindow> for &IOleInPlaceObjectWindowless {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleWindow> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleWindow>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleInPlaceObjectWindowless_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phwnd: *mut super::super::Foundation::HWND,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fentermode: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        lprcposrect: *const super::super::Foundation::RECT,
        lprccliprect: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        msg: u32,
        wparam: super::super::Foundation::WPARAM,
        lparam: super::super::Foundation::LPARAM,
        plresult: *mut super::super::Foundation::LRESULT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppdroptarget: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleInPlaceSite(::windows::runtime::IUnknown);
impl IOleInPlaceSite {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetWindow(&self) -> ::windows::runtime::Result<super::super::Foundation::HWND> {
        let mut result__: <super::super::Foundation::HWND as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::HWND>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ContextSensitiveHelp<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fentermode: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            fentermode.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CanInPlaceActivate(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn OnInPlaceActivate(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn OnUIActivate(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn GetWindowContext(
        &self,
        ppframe: *mut ::std::option::Option<IOleInPlaceFrame>,
        ppdoc: *mut ::std::option::Option<IOleInPlaceUIWindow>,
        lprcposrect: *mut super::super::Foundation::RECT,
        lprccliprect: *mut super::super::Foundation::RECT,
        lpframeinfo: *mut OIFI,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ppframe),
            ::std::mem::transmute(ppdoc),
            ::std::mem::transmute(lprcposrect),
            ::std::mem::transmute(lprccliprect),
            ::std::mem::transmute(lpframeinfo),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Scroll<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::SIZE>,
    >(
        &self,
        scrollextant: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            scrollextant.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnUIDeactivate<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fundoable: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            fundoable.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn OnInPlaceDeactivate(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn DiscardUndoState(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn DeactivateAndUndo(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnPosRectChange(
        &self,
        lprcposrect: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(lprcposrect),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleInPlaceSite {
    type Vtable = IOleInPlaceSite_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(281, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IOleInPlaceSite> for ::windows::runtime::IUnknown {
    fn from(value: IOleInPlaceSite) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleInPlaceSite> for ::windows::runtime::IUnknown {
    fn from(value: &IOleInPlaceSite) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleInPlaceSite {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleInPlaceSite {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IOleInPlaceSite> for IOleWindow {
    fn from(value: IOleInPlaceSite) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleInPlaceSite> for IOleWindow {
    fn from(value: &IOleInPlaceSite) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleWindow> for IOleInPlaceSite {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleWindow> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleWindow>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleWindow> for &IOleInPlaceSite {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleWindow> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleWindow>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleInPlaceSite_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phwnd: *mut super::super::Foundation::HWND,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fentermode: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppframe: *mut ::windows::runtime::RawPtr,
        ppdoc: *mut ::windows::runtime::RawPtr,
        lprcposrect: *mut super::super::Foundation::RECT,
        lprccliprect: *mut super::super::Foundation::RECT,
        lpframeinfo: *mut OIFI,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        scrollextant: super::super::Foundation::SIZE,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fundoable: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        lprcposrect: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleInPlaceSiteEx(::windows::runtime::IUnknown);
impl IOleInPlaceSiteEx {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetWindow(&self) -> ::windows::runtime::Result<super::super::Foundation::HWND> {
        let mut result__: <super::super::Foundation::HWND as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::HWND>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ContextSensitiveHelp<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fentermode: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            fentermode.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CanInPlaceActivate(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn OnInPlaceActivate(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn OnUIActivate(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn GetWindowContext(
        &self,
        ppframe: *mut ::std::option::Option<IOleInPlaceFrame>,
        ppdoc: *mut ::std::option::Option<IOleInPlaceUIWindow>,
        lprcposrect: *mut super::super::Foundation::RECT,
        lprccliprect: *mut super::super::Foundation::RECT,
        lpframeinfo: *mut OIFI,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ppframe),
            ::std::mem::transmute(ppdoc),
            ::std::mem::transmute(lprcposrect),
            ::std::mem::transmute(lprccliprect),
            ::std::mem::transmute(lpframeinfo),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Scroll<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::SIZE>,
    >(
        &self,
        scrollextant: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            scrollextant.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnUIDeactivate<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fundoable: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            fundoable.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn OnInPlaceDeactivate(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn DiscardUndoState(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn DeactivateAndUndo(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnPosRectChange(
        &self,
        lprcposrect: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(lprcposrect),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnInPlaceActivateEx(
        &self,
        pfnoredraw: *mut super::super::Foundation::BOOL,
        dwflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pfnoredraw),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnInPlaceDeactivateEx<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fnoredraw: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            fnoredraw.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn RequestUIActivate(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleInPlaceSiteEx {
    type Vtable = IOleInPlaceSiteEx_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2620173696,
        13348,
        4559,
        [182, 112, 0, 170, 0, 76, 214, 216],
    );
}
impl ::std::convert::From<IOleInPlaceSiteEx> for ::windows::runtime::IUnknown {
    fn from(value: IOleInPlaceSiteEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleInPlaceSiteEx> for ::windows::runtime::IUnknown {
    fn from(value: &IOleInPlaceSiteEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleInPlaceSiteEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleInPlaceSiteEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IOleInPlaceSiteEx> for IOleInPlaceSite {
    fn from(value: IOleInPlaceSiteEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleInPlaceSiteEx> for IOleInPlaceSite {
    fn from(value: &IOleInPlaceSiteEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleInPlaceSite> for IOleInPlaceSiteEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleInPlaceSite> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleInPlaceSite>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleInPlaceSite> for &IOleInPlaceSiteEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleInPlaceSite> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleInPlaceSite>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<IOleInPlaceSiteEx> for IOleWindow {
    fn from(value: IOleInPlaceSiteEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleInPlaceSiteEx> for IOleWindow {
    fn from(value: &IOleInPlaceSiteEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleWindow> for IOleInPlaceSiteEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleWindow> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleWindow>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleWindow> for &IOleInPlaceSiteEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleWindow> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleWindow>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleInPlaceSiteEx_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phwnd: *mut super::super::Foundation::HWND,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fentermode: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppframe: *mut ::windows::runtime::RawPtr,
        ppdoc: *mut ::windows::runtime::RawPtr,
        lprcposrect: *mut super::super::Foundation::RECT,
        lprccliprect: *mut super::super::Foundation::RECT,
        lpframeinfo: *mut OIFI,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        scrollextant: super::super::Foundation::SIZE,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fundoable: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        lprcposrect: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pfnoredraw: *mut super::super::Foundation::BOOL,
        dwflags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fnoredraw: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleInPlaceSiteWindowless(::windows::runtime::IUnknown);
impl IOleInPlaceSiteWindowless {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetWindow(&self) -> ::windows::runtime::Result<super::super::Foundation::HWND> {
        let mut result__: <super::super::Foundation::HWND as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::HWND>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ContextSensitiveHelp<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fentermode: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            fentermode.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CanInPlaceActivate(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn OnInPlaceActivate(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn OnUIActivate(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn GetWindowContext(
        &self,
        ppframe: *mut ::std::option::Option<IOleInPlaceFrame>,
        ppdoc: *mut ::std::option::Option<IOleInPlaceUIWindow>,
        lprcposrect: *mut super::super::Foundation::RECT,
        lprccliprect: *mut super::super::Foundation::RECT,
        lpframeinfo: *mut OIFI,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ppframe),
            ::std::mem::transmute(ppdoc),
            ::std::mem::transmute(lprcposrect),
            ::std::mem::transmute(lprccliprect),
            ::std::mem::transmute(lpframeinfo),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Scroll<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::SIZE>,
    >(
        &self,
        scrollextant: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            scrollextant.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnUIDeactivate<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fundoable: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            fundoable.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn OnInPlaceDeactivate(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn DiscardUndoState(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn DeactivateAndUndo(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnPosRectChange(
        &self,
        lprcposrect: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(lprcposrect),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnInPlaceActivateEx(
        &self,
        pfnoredraw: *mut super::super::Foundation::BOOL,
        dwflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pfnoredraw),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnInPlaceDeactivateEx<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fnoredraw: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            fnoredraw.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn RequestUIActivate(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn CanWindowlessActivate(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn GetCapture(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetCapture<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fcapture: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(
            ::std::mem::transmute_copy(self),
            fcapture.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetFocus(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetFocus<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        ffocus: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(
            ::std::mem::transmute_copy(self),
            ffocus.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub unsafe fn GetDC(
        &self,
        prect: *const super::super::Foundation::RECT,
        grfflags: u32,
    ) -> ::windows::runtime::Result<super::super::Graphics::Gdi::HDC> {
        let mut result__: <super::super::Graphics::Gdi::HDC as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(prect),
            ::std::mem::transmute(grfflags),
            &mut result__,
        )
        .from_abi::<super::super::Graphics::Gdi::HDC>(result__)
    }
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn ReleaseDC<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HDC>,
    >(
        &self,
        hdc: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(
            ::std::mem::transmute_copy(self),
            hdc.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn InvalidateRect<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        prect: *const super::super::Foundation::RECT,
        ferase: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(prect),
            ferase.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub unsafe fn InvalidateRgn<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HRGN>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        hrgn: Param0,
        ferase: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(
            ::std::mem::transmute_copy(self),
            hrgn.into_param().abi(),
            ferase.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ScrollRect(
        &self,
        dx: i32,
        dy: i32,
        prectscroll: *const super::super::Foundation::RECT,
        prectclip: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dx),
            ::std::mem::transmute(dy),
            ::std::mem::transmute(prectscroll),
            ::std::mem::transmute(prectclip),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn AdjustRect(
        &self,
        prc: *mut super::super::Foundation::RECT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(prc),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnDefWindowMessage<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::WPARAM>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::LPARAM>,
    >(
        &self,
        msg: u32,
        wparam: Param1,
        lparam: Param2,
    ) -> ::windows::runtime::Result<super::super::Foundation::LRESULT> {
        let mut result__: <super::super::Foundation::LRESULT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).29)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(msg),
            wparam.into_param().abi(),
            lparam.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::LRESULT>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IOleInPlaceSiteWindowless {
    type Vtable = IOleInPlaceSiteWindowless_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2452532640,
        13348,
        4559,
        [182, 112, 0, 170, 0, 76, 214, 216],
    );
}
impl ::std::convert::From<IOleInPlaceSiteWindowless> for ::windows::runtime::IUnknown {
    fn from(value: IOleInPlaceSiteWindowless) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleInPlaceSiteWindowless> for ::windows::runtime::IUnknown {
    fn from(value: &IOleInPlaceSiteWindowless) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IOleInPlaceSiteWindowless
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IOleInPlaceSiteWindowless
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IOleInPlaceSiteWindowless> for IOleInPlaceSiteEx {
    fn from(value: IOleInPlaceSiteWindowless) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleInPlaceSiteWindowless> for IOleInPlaceSiteEx {
    fn from(value: &IOleInPlaceSiteWindowless) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleInPlaceSiteEx> for IOleInPlaceSiteWindowless {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleInPlaceSiteEx> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleInPlaceSiteEx>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleInPlaceSiteEx> for &IOleInPlaceSiteWindowless {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleInPlaceSiteEx> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleInPlaceSiteEx>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<IOleInPlaceSiteWindowless> for IOleInPlaceSite {
    fn from(value: IOleInPlaceSiteWindowless) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleInPlaceSiteWindowless> for IOleInPlaceSite {
    fn from(value: &IOleInPlaceSiteWindowless) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleInPlaceSite> for IOleInPlaceSiteWindowless {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleInPlaceSite> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleInPlaceSite>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleInPlaceSite> for &IOleInPlaceSiteWindowless {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleInPlaceSite> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleInPlaceSite>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<IOleInPlaceSiteWindowless> for IOleWindow {
    fn from(value: IOleInPlaceSiteWindowless) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleInPlaceSiteWindowless> for IOleWindow {
    fn from(value: &IOleInPlaceSiteWindowless) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleWindow> for IOleInPlaceSiteWindowless {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleWindow> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleWindow>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleWindow> for &IOleInPlaceSiteWindowless {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleWindow> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleWindow>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleInPlaceSiteWindowless_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phwnd: *mut super::super::Foundation::HWND,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fentermode: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppframe: *mut ::windows::runtime::RawPtr,
        ppdoc: *mut ::windows::runtime::RawPtr,
        lprcposrect: *mut super::super::Foundation::RECT,
        lprccliprect: *mut super::super::Foundation::RECT,
        lpframeinfo: *mut OIFI,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        scrollextant: super::super::Foundation::SIZE,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fundoable: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        lprcposrect: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pfnoredraw: *mut super::super::Foundation::BOOL,
        dwflags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fnoredraw: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fcapture: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ffocus: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        prect: *const super::super::Foundation::RECT,
        grfflags: u32,
        phdc: *mut super::super::Graphics::Gdi::HDC,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi")))] usize,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hdc: super::super::Graphics::Gdi::HDC,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        prect: *const super::super::Foundation::RECT,
        ferase: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hrgn: super::super::Graphics::Gdi::HRGN,
        ferase: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi")))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dx: i32,
        dy: i32,
        prectscroll: *const super::super::Foundation::RECT,
        prectclip: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        prc: *mut super::super::Foundation::RECT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        msg: u32,
        wparam: super::super::Foundation::WPARAM,
        lparam: super::super::Foundation::LPARAM,
        plresult: *mut super::super::Foundation::LRESULT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleInPlaceUIWindow(::windows::runtime::IUnknown);
impl IOleInPlaceUIWindow {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetWindow(&self) -> ::windows::runtime::Result<super::super::Foundation::HWND> {
        let mut result__: <super::super::Foundation::HWND as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::HWND>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ContextSensitiveHelp<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fentermode: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            fentermode.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetBorder(&self) -> ::windows::runtime::Result<super::super::Foundation::RECT> {
        let mut result__: <super::super::Foundation::RECT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::RECT>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RequestBorderSpace(
        &self,
        pborderwidths: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pborderwidths),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetBorderSpace(
        &self,
        pborderwidths: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pborderwidths),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetActiveObject<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IOleInPlaceActiveObject>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pactiveobject: Param0,
        pszobjname: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            pactiveobject.into_param().abi(),
            pszobjname.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleInPlaceUIWindow {
    type Vtable = IOleInPlaceUIWindow_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(277, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IOleInPlaceUIWindow> for ::windows::runtime::IUnknown {
    fn from(value: IOleInPlaceUIWindow) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleInPlaceUIWindow> for ::windows::runtime::IUnknown {
    fn from(value: &IOleInPlaceUIWindow) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleInPlaceUIWindow {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleInPlaceUIWindow {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IOleInPlaceUIWindow> for IOleWindow {
    fn from(value: IOleInPlaceUIWindow) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleInPlaceUIWindow> for IOleWindow {
    fn from(value: &IOleInPlaceUIWindow) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleWindow> for IOleInPlaceUIWindow {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleWindow> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleWindow>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleWindow> for &IOleInPlaceUIWindow {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleWindow> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleWindow>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleInPlaceUIWindow_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phwnd: *mut super::super::Foundation::HWND,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fentermode: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        lprectborder: *mut super::super::Foundation::RECT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pborderwidths: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pborderwidths: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pactiveobject: ::windows::runtime::RawPtr,
        pszobjname: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleItemContainer(::windows::runtime::IUnknown);
impl IOleItemContainer {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ParseDisplayName<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IBindCtx>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pbc: Param0,
        pszdisplayname: Param1,
        pcheaten: *mut u32,
        ppmkout: *mut ::std::option::Option<IMoniker>,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pbc.into_param().abi(),
            pszdisplayname.into_param().abi(),
            ::std::mem::transmute(pcheaten),
            ::std::mem::transmute(ppmkout),
        )
        .ok()
    }
    pub unsafe fn EnumObjects(&self, grfflags: u32) -> ::windows::runtime::Result<IEnumUnknown> {
        let mut result__: <IEnumUnknown as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(grfflags),
            &mut result__,
        )
        .from_abi::<IEnumUnknown>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn LockContainer<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        flock: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            flock.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetObject<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param2: ::windows::runtime::IntoParam<'a, IBindCtx>,
        T: ::windows::runtime::Interface,
    >(
        &self,
        pszitem: Param0,
        dwspeedneeded: u32,
        pbc: Param2,
    ) -> ::windows::runtime::Result<T> {
        let mut result__ = ::std::option::Option::None;
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            pszitem.into_param().abi(),
            ::std::mem::transmute(dwspeedneeded),
            pbc.into_param().abi(),
            &<T as ::windows::runtime::Interface>::IID,
            &mut result__ as *mut _ as *mut _,
        )
        .and_some(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetObjectStorage<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, IBindCtx>,
        T: ::windows::runtime::Interface,
    >(
        &self,
        pszitem: Param0,
        pbc: Param1,
    ) -> ::windows::runtime::Result<T> {
        let mut result__ = ::std::option::Option::None;
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            pszitem.into_param().abi(),
            pbc.into_param().abi(),
            &<T as ::windows::runtime::Interface>::IID,
            &mut result__ as *mut _ as *mut _,
        )
        .and_some(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsRunning<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pszitem: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            pszitem.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleItemContainer {
    type Vtable = IOleItemContainer_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(284, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IOleItemContainer> for ::windows::runtime::IUnknown {
    fn from(value: IOleItemContainer) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleItemContainer> for ::windows::runtime::IUnknown {
    fn from(value: &IOleItemContainer) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleItemContainer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleItemContainer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IOleItemContainer> for IOleContainer {
    fn from(value: IOleItemContainer) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleItemContainer> for IOleContainer {
    fn from(value: &IOleItemContainer) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleContainer> for IOleItemContainer {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleContainer> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleContainer>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleContainer> for &IOleItemContainer {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleContainer> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleContainer>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<IOleItemContainer> for IParseDisplayName {
    fn from(value: IOleItemContainer) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleItemContainer> for IParseDisplayName {
    fn from(value: &IOleItemContainer) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IParseDisplayName> for IOleItemContainer {
    fn into_param(self) -> ::windows::runtime::Param<'a, IParseDisplayName> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IParseDisplayName>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IParseDisplayName> for &IOleItemContainer {
    fn into_param(self) -> ::windows::runtime::Param<'a, IParseDisplayName> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IParseDisplayName>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleItemContainer_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbc: ::windows::runtime::RawPtr,
        pszdisplayname: super::super::Foundation::PWSTR,
        pcheaten: *mut u32,
        ppmkout: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        grfflags: u32,
        ppenum: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        flock: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pszitem: super::super::Foundation::PWSTR,
        dwspeedneeded: u32,
        pbc: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        ppvobject: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pszitem: super::super::Foundation::PWSTR,
        pbc: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        ppvstorage: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pszitem: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleLink(::windows::runtime::IUnknown);
impl IOleLink {
    pub unsafe fn SetUpdateOptions(&self, dwupdateopt: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwupdateopt),
        )
        .ok()
    }
    pub unsafe fn GetUpdateOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn SetSourceMoniker<'a, Param0: ::windows::runtime::IntoParam<'a, IMoniker>>(
        &self,
        pmk: Param0,
        rclsid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            pmk.into_param().abi(),
            ::std::mem::transmute(rclsid),
        )
        .ok()
    }
    pub unsafe fn GetSourceMoniker(&self) -> ::windows::runtime::Result<IMoniker> {
        let mut result__: <IMoniker as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IMoniker>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetSourceDisplayName<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pszstatustext: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            pszstatustext.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetSourceDisplayName(
        &self,
    ) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    pub unsafe fn BindToSource<'a, Param1: ::windows::runtime::IntoParam<'a, IBindCtx>>(
        &self,
        bindflags: u32,
        pbc: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(bindflags),
            pbc.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn BindIfRunning(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn GetBoundSource(
        &self,
    ) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    pub unsafe fn UnbindSource(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Update<'a, Param0: ::windows::runtime::IntoParam<'a, IBindCtx>>(
        &self,
        pbc: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            pbc.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleLink {
    type Vtable = IOleLink_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(285, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IOleLink> for ::windows::runtime::IUnknown {
    fn from(value: IOleLink) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleLink> for ::windows::runtime::IUnknown {
    fn from(value: &IOleLink) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleLink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleLink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleLink_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwupdateopt: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwupdateopt: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmk: ::windows::runtime::RawPtr,
        rclsid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppmk: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pszstatustext: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppszdisplayname: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bindflags: u32,
        pbc: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppunk: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbc: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleObject(::windows::runtime::IUnknown);
impl IOleObject {
    pub unsafe fn SetClientSite<'a, Param0: ::windows::runtime::IntoParam<'a, IOleClientSite>>(
        &self,
        pclientsite: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pclientsite.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetClientSite(&self) -> ::windows::runtime::Result<IOleClientSite> {
        let mut result__: <IOleClientSite as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IOleClientSite>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetHostNames<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        szcontainerapp: Param0,
        szcontainerobj: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            szcontainerapp.into_param().abi(),
            szcontainerobj.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Close(&self, dwsaveoption: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwsaveoption),
        )
        .ok()
    }
    pub unsafe fn SetMoniker<'a, Param1: ::windows::runtime::IntoParam<'a, IMoniker>>(
        &self,
        dwwhichmoniker: u32,
        pmk: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwwhichmoniker),
            pmk.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetMoniker(
        &self,
        dwassign: u32,
        dwwhichmoniker: u32,
    ) -> ::windows::runtime::Result<IMoniker> {
        let mut result__: <IMoniker as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwassign),
            ::std::mem::transmute(dwwhichmoniker),
            &mut result__,
        )
        .from_abi::<IMoniker>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn InitFromData<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IDataObject>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        pdataobject: Param0,
        fcreation: Param1,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            pdataobject.into_param().abi(),
            fcreation.into_param().abi(),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    pub unsafe fn GetClipboardData(
        &self,
        dwreserved: u32,
    ) -> ::windows::runtime::Result<IDataObject> {
        let mut result__: <IDataObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwreserved),
            &mut result__,
        )
        .from_abi::<IDataObject>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn DoVerb<
        'a,
        Param2: ::windows::runtime::IntoParam<'a, IOleClientSite>,
        Param4: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>,
    >(
        &self,
        iverb: i32,
        lpmsg: *const super::super::UI::WindowsAndMessaging::MSG,
        pactivesite: Param2,
        lindex: i32,
        hwndparent: Param4,
        lprcposrect: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(iverb),
            ::std::mem::transmute(lpmsg),
            pactivesite.into_param().abi(),
            ::std::mem::transmute(lindex),
            hwndparent.into_param().abi(),
            ::std::mem::transmute(lprcposrect),
        )
        .ok()
    }
    pub unsafe fn EnumVerbs(&self) -> ::windows::runtime::Result<IEnumOLEVERB> {
        let mut result__: <IEnumOLEVERB as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumOLEVERB>(result__)
    }
    pub unsafe fn Update(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn IsUpToDate(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn GetUserClassID(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetUserType(
        &self,
        dwformoftype: u32,
    ) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwformoftype),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetExtent(
        &self,
        dwdrawaspect: u32,
        psizel: *const super::super::Foundation::SIZE,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwdrawaspect),
            ::std::mem::transmute(psizel),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetExtent(
        &self,
        dwdrawaspect: u32,
    ) -> ::windows::runtime::Result<super::super::Foundation::SIZE> {
        let mut result__: <super::super::Foundation::SIZE as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwdrawaspect),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::SIZE>(result__)
    }
    pub unsafe fn Advise<'a, Param0: ::windows::runtime::IntoParam<'a, IAdviseSink>>(
        &self,
        padvsink: Param0,
    ) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(
            ::std::mem::transmute_copy(self),
            padvsink.into_param().abi(),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn Unadvise(&self, dwconnection: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwconnection),
        )
        .ok()
    }
    pub unsafe fn EnumAdvise(&self) -> ::windows::runtime::Result<IEnumSTATDATA> {
        let mut result__: <IEnumSTATDATA as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).21)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumSTATDATA>(result__)
    }
    pub unsafe fn GetMiscStatus(&self, dwaspect: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).22)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwaspect),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn SetColorScheme(
        &self,
        plogpal: *const super::super::Graphics::Gdi::LOGPALETTE,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(plogpal),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleObject {
    type Vtable = IOleObject_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(274, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IOleObject> for ::windows::runtime::IUnknown {
    fn from(value: IOleObject) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleObject> for ::windows::runtime::IUnknown {
    fn from(value: &IOleObject) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleObject_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pclientsite: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppclientsite: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        szcontainerapp: super::super::Foundation::PWSTR,
        szcontainerobj: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwsaveoption: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwwhichmoniker: u32,
        pmk: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwassign: u32,
        dwwhichmoniker: u32,
        ppmk: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdataobject: ::windows::runtime::RawPtr,
        fcreation: super::super::Foundation::BOOL,
        dwreserved: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwreserved: u32,
        ppdataobject: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iverb: i32,
        lpmsg: *const super::super::UI::WindowsAndMessaging::MSG,
        pactivesite: ::windows::runtime::RawPtr,
        lindex: i32,
        hwndparent: super::super::Foundation::HWND,
        lprcposrect: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenumoleverb: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pclsid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwformoftype: u32,
        pszusertype: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwdrawaspect: u32,
        psizel: *const super::super::Foundation::SIZE,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwdrawaspect: u32,
        psizel: *mut super::super::Foundation::SIZE,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        padvsink: ::windows::runtime::RawPtr,
        pdwconnection: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwconnection: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenumadvise: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwaspect: u32,
        pdwstatus: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plogpal: *const super::super::Graphics::Gdi::LOGPALETTE,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleParentUndoUnit(::windows::runtime::IUnknown);
impl IOleParentUndoUnit {
    pub unsafe fn Do<'a, Param0: ::windows::runtime::IntoParam<'a, IOleUndoManager>>(
        &self,
        pundomanager: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pundomanager.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetDescription(
        &self,
    ) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    pub unsafe fn GetUnitType(
        &self,
        pclsid: *mut ::windows::runtime::GUID,
        plid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pclsid),
            ::std::mem::transmute(plid),
        )
        .ok()
    }
    pub unsafe fn OnNextAdd(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Open<'a, Param0: ::windows::runtime::IntoParam<'a, IOleParentUndoUnit>>(
        &self,
        ppuu: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ppuu.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Close<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IOleParentUndoUnit>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        ppuu: Param0,
        fcommit: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ppuu.into_param().abi(),
            fcommit.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Add<'a, Param0: ::windows::runtime::IntoParam<'a, IOleUndoUnit>>(
        &self,
        puu: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            puu.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn FindUnit<'a, Param0: ::windows::runtime::IntoParam<'a, IOleUndoUnit>>(
        &self,
        puu: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            puu.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetParentState(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IOleParentUndoUnit {
    type Vtable = IOleParentUndoUnit_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2717578032,
        61335,
        4558,
        [155, 201, 0, 170, 0, 96, 142, 1],
    );
}
impl ::std::convert::From<IOleParentUndoUnit> for ::windows::runtime::IUnknown {
    fn from(value: IOleParentUndoUnit) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleParentUndoUnit> for ::windows::runtime::IUnknown {
    fn from(value: &IOleParentUndoUnit) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleParentUndoUnit {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleParentUndoUnit {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IOleParentUndoUnit> for IOleUndoUnit {
    fn from(value: IOleParentUndoUnit) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleParentUndoUnit> for IOleUndoUnit {
    fn from(value: &IOleParentUndoUnit) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleUndoUnit> for IOleParentUndoUnit {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleUndoUnit> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleUndoUnit>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleUndoUnit> for &IOleParentUndoUnit {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleUndoUnit> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleUndoUnit>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleParentUndoUnit_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pundomanager: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstr: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pclsid: *mut ::windows::runtime::GUID,
        plid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppuu: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppuu: ::windows::runtime::RawPtr,
        fcommit: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        puu: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        puu: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwstate: *mut u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleUILinkContainerA(::windows::runtime::IUnknown);
impl IOleUILinkContainerA {
    pub unsafe fn GetNextLink(&self, dwlink: u32) -> u32 {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
        ))
    }
    pub unsafe fn SetLinkUpdateOptions(
        &self,
        dwlink: u32,
        dwupdateopt: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
            ::std::mem::transmute(dwupdateopt),
        )
        .ok()
    }
    pub unsafe fn GetLinkUpdateOptions(&self, dwlink: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetLinkSource<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PSTR>,
        Param4: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        dwlink: u32,
        lpszdisplayname: Param1,
        lenfilename: u32,
        pcheaten: *mut u32,
        fvalidatesource: Param4,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
            lpszdisplayname.into_param().abi(),
            ::std::mem::transmute(lenfilename),
            ::std::mem::transmute(pcheaten),
            fvalidatesource.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetLinkSource(
        &self,
        dwlink: u32,
        lplpszdisplayname: *mut super::super::Foundation::PSTR,
        lplenfilename: *mut u32,
        lplpszfulllinktype: *mut super::super::Foundation::PSTR,
        lplpszshortlinktype: *mut super::super::Foundation::PSTR,
        lpfsourceavailable: *mut super::super::Foundation::BOOL,
        lpfisselected: *mut super::super::Foundation::BOOL,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
            ::std::mem::transmute(lplpszdisplayname),
            ::std::mem::transmute(lplenfilename),
            ::std::mem::transmute(lplpszfulllinktype),
            ::std::mem::transmute(lplpszshortlinktype),
            ::std::mem::transmute(lpfsourceavailable),
            ::std::mem::transmute(lpfisselected),
        )
        .ok()
    }
    pub unsafe fn OpenLinkSource(&self, dwlink: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn UpdateLink<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        dwlink: u32,
        ferrormessage: Param1,
        freserved: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
            ferrormessage.into_param().abi(),
            freserved.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CancelLink(&self, dwlink: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleUILinkContainerA {
    type Vtable = IOleUILinkContainerA_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::zeroed();
}
impl ::std::convert::From<IOleUILinkContainerA> for ::windows::runtime::IUnknown {
    fn from(value: IOleUILinkContainerA) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleUILinkContainerA> for ::windows::runtime::IUnknown {
    fn from(value: &IOleUILinkContainerA) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleUILinkContainerA {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleUILinkContainerA {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleUILinkContainerA_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwlink: u32) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
        dwupdateopt: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
        lpdwupdateopt: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
        lpszdisplayname: super::super::Foundation::PSTR,
        lenfilename: u32,
        pcheaten: *mut u32,
        fvalidatesource: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
        lplpszdisplayname: *mut super::super::Foundation::PSTR,
        lplenfilename: *mut u32,
        lplpszfulllinktype: *mut super::super::Foundation::PSTR,
        lplpszshortlinktype: *mut super::super::Foundation::PSTR,
        lpfsourceavailable: *mut super::super::Foundation::BOOL,
        lpfisselected: *mut super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
        ferrormessage: super::super::Foundation::BOOL,
        freserved: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleUILinkContainerW(::windows::runtime::IUnknown);
impl IOleUILinkContainerW {
    pub unsafe fn GetNextLink(&self, dwlink: u32) -> u32 {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
        ))
    }
    pub unsafe fn SetLinkUpdateOptions(
        &self,
        dwlink: u32,
        dwupdateopt: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
            ::std::mem::transmute(dwupdateopt),
        )
        .ok()
    }
    pub unsafe fn GetLinkUpdateOptions(&self, dwlink: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetLinkSource<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param4: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        dwlink: u32,
        lpszdisplayname: Param1,
        lenfilename: u32,
        pcheaten: *mut u32,
        fvalidatesource: Param4,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
            lpszdisplayname.into_param().abi(),
            ::std::mem::transmute(lenfilename),
            ::std::mem::transmute(pcheaten),
            fvalidatesource.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetLinkSource(
        &self,
        dwlink: u32,
        lplpszdisplayname: *mut super::super::Foundation::PWSTR,
        lplenfilename: *mut u32,
        lplpszfulllinktype: *mut super::super::Foundation::PWSTR,
        lplpszshortlinktype: *mut super::super::Foundation::PWSTR,
        lpfsourceavailable: *mut super::super::Foundation::BOOL,
        lpfisselected: *mut super::super::Foundation::BOOL,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
            ::std::mem::transmute(lplpszdisplayname),
            ::std::mem::transmute(lplenfilename),
            ::std::mem::transmute(lplpszfulllinktype),
            ::std::mem::transmute(lplpszshortlinktype),
            ::std::mem::transmute(lpfsourceavailable),
            ::std::mem::transmute(lpfisselected),
        )
        .ok()
    }
    pub unsafe fn OpenLinkSource(&self, dwlink: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn UpdateLink<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        dwlink: u32,
        ferrormessage: Param1,
        freserved: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
            ferrormessage.into_param().abi(),
            freserved.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CancelLink(&self, dwlink: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleUILinkContainerW {
    type Vtable = IOleUILinkContainerW_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::zeroed();
}
impl ::std::convert::From<IOleUILinkContainerW> for ::windows::runtime::IUnknown {
    fn from(value: IOleUILinkContainerW) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleUILinkContainerW> for ::windows::runtime::IUnknown {
    fn from(value: &IOleUILinkContainerW) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleUILinkContainerW {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleUILinkContainerW {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleUILinkContainerW_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwlink: u32) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
        dwupdateopt: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
        lpdwupdateopt: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
        lpszdisplayname: super::super::Foundation::PWSTR,
        lenfilename: u32,
        pcheaten: *mut u32,
        fvalidatesource: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
        lplpszdisplayname: *mut super::super::Foundation::PWSTR,
        lplenfilename: *mut u32,
        lplpszfulllinktype: *mut super::super::Foundation::PWSTR,
        lplpszshortlinktype: *mut super::super::Foundation::PWSTR,
        lpfsourceavailable: *mut super::super::Foundation::BOOL,
        lpfisselected: *mut super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
        ferrormessage: super::super::Foundation::BOOL,
        freserved: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleUILinkInfoA(::windows::runtime::IUnknown);
impl IOleUILinkInfoA {
    pub unsafe fn GetNextLink(&self, dwlink: u32) -> u32 {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
        ))
    }
    pub unsafe fn SetLinkUpdateOptions(
        &self,
        dwlink: u32,
        dwupdateopt: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
            ::std::mem::transmute(dwupdateopt),
        )
        .ok()
    }
    pub unsafe fn GetLinkUpdateOptions(&self, dwlink: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetLinkSource<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PSTR>,
        Param4: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        dwlink: u32,
        lpszdisplayname: Param1,
        lenfilename: u32,
        pcheaten: *mut u32,
        fvalidatesource: Param4,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
            lpszdisplayname.into_param().abi(),
            ::std::mem::transmute(lenfilename),
            ::std::mem::transmute(pcheaten),
            fvalidatesource.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetLinkSource(
        &self,
        dwlink: u32,
        lplpszdisplayname: *mut super::super::Foundation::PSTR,
        lplenfilename: *mut u32,
        lplpszfulllinktype: *mut super::super::Foundation::PSTR,
        lplpszshortlinktype: *mut super::super::Foundation::PSTR,
        lpfsourceavailable: *mut super::super::Foundation::BOOL,
        lpfisselected: *mut super::super::Foundation::BOOL,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
            ::std::mem::transmute(lplpszdisplayname),
            ::std::mem::transmute(lplenfilename),
            ::std::mem::transmute(lplpszfulllinktype),
            ::std::mem::transmute(lplpszshortlinktype),
            ::std::mem::transmute(lpfsourceavailable),
            ::std::mem::transmute(lpfisselected),
        )
        .ok()
    }
    pub unsafe fn OpenLinkSource(&self, dwlink: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn UpdateLink<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        dwlink: u32,
        ferrormessage: Param1,
        freserved: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
            ferrormessage.into_param().abi(),
            freserved.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CancelLink(&self, dwlink: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetLastUpdate(
        &self,
        dwlink: u32,
    ) -> ::windows::runtime::Result<super::super::Foundation::FILETIME> {
        let mut result__: <super::super::Foundation::FILETIME as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::FILETIME>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IOleUILinkInfoA {
    type Vtable = IOleUILinkInfoA_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::zeroed();
}
impl ::std::convert::From<IOleUILinkInfoA> for ::windows::runtime::IUnknown {
    fn from(value: IOleUILinkInfoA) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleUILinkInfoA> for ::windows::runtime::IUnknown {
    fn from(value: &IOleUILinkInfoA) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleUILinkInfoA {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleUILinkInfoA {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IOleUILinkInfoA> for IOleUILinkContainerA {
    fn from(value: IOleUILinkInfoA) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleUILinkInfoA> for IOleUILinkContainerA {
    fn from(value: &IOleUILinkInfoA) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleUILinkContainerA> for IOleUILinkInfoA {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleUILinkContainerA> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleUILinkContainerA>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleUILinkContainerA> for &IOleUILinkInfoA {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleUILinkContainerA> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleUILinkContainerA>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleUILinkInfoA_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwlink: u32) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
        dwupdateopt: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
        lpdwupdateopt: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
        lpszdisplayname: super::super::Foundation::PSTR,
        lenfilename: u32,
        pcheaten: *mut u32,
        fvalidatesource: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
        lplpszdisplayname: *mut super::super::Foundation::PSTR,
        lplenfilename: *mut u32,
        lplpszfulllinktype: *mut super::super::Foundation::PSTR,
        lplpszshortlinktype: *mut super::super::Foundation::PSTR,
        lpfsourceavailable: *mut super::super::Foundation::BOOL,
        lpfisselected: *mut super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
        ferrormessage: super::super::Foundation::BOOL,
        freserved: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
        lplastupdate: *mut super::super::Foundation::FILETIME,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleUILinkInfoW(::windows::runtime::IUnknown);
impl IOleUILinkInfoW {
    pub unsafe fn GetNextLink(&self, dwlink: u32) -> u32 {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
        ))
    }
    pub unsafe fn SetLinkUpdateOptions(
        &self,
        dwlink: u32,
        dwupdateopt: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
            ::std::mem::transmute(dwupdateopt),
        )
        .ok()
    }
    pub unsafe fn GetLinkUpdateOptions(&self, dwlink: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetLinkSource<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param4: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        dwlink: u32,
        lpszdisplayname: Param1,
        lenfilename: u32,
        pcheaten: *mut u32,
        fvalidatesource: Param4,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
            lpszdisplayname.into_param().abi(),
            ::std::mem::transmute(lenfilename),
            ::std::mem::transmute(pcheaten),
            fvalidatesource.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetLinkSource(
        &self,
        dwlink: u32,
        lplpszdisplayname: *mut super::super::Foundation::PWSTR,
        lplenfilename: *mut u32,
        lplpszfulllinktype: *mut super::super::Foundation::PWSTR,
        lplpszshortlinktype: *mut super::super::Foundation::PWSTR,
        lpfsourceavailable: *mut super::super::Foundation::BOOL,
        lpfisselected: *mut super::super::Foundation::BOOL,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
            ::std::mem::transmute(lplpszdisplayname),
            ::std::mem::transmute(lplenfilename),
            ::std::mem::transmute(lplpszfulllinktype),
            ::std::mem::transmute(lplpszshortlinktype),
            ::std::mem::transmute(lpfsourceavailable),
            ::std::mem::transmute(lpfisselected),
        )
        .ok()
    }
    pub unsafe fn OpenLinkSource(&self, dwlink: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn UpdateLink<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        dwlink: u32,
        ferrormessage: Param1,
        freserved: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
            ferrormessage.into_param().abi(),
            freserved.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CancelLink(&self, dwlink: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetLastUpdate(
        &self,
        dwlink: u32,
    ) -> ::windows::runtime::Result<super::super::Foundation::FILETIME> {
        let mut result__: <super::super::Foundation::FILETIME as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwlink),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::FILETIME>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IOleUILinkInfoW {
    type Vtable = IOleUILinkInfoW_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::zeroed();
}
impl ::std::convert::From<IOleUILinkInfoW> for ::windows::runtime::IUnknown {
    fn from(value: IOleUILinkInfoW) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleUILinkInfoW> for ::windows::runtime::IUnknown {
    fn from(value: &IOleUILinkInfoW) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleUILinkInfoW {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleUILinkInfoW {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IOleUILinkInfoW> for IOleUILinkContainerW {
    fn from(value: IOleUILinkInfoW) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleUILinkInfoW> for IOleUILinkContainerW {
    fn from(value: &IOleUILinkInfoW) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleUILinkContainerW> for IOleUILinkInfoW {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleUILinkContainerW> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleUILinkContainerW>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IOleUILinkContainerW> for &IOleUILinkInfoW {
    fn into_param(self) -> ::windows::runtime::Param<'a, IOleUILinkContainerW> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IOleUILinkContainerW>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleUILinkInfoW_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwlink: u32) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
        dwupdateopt: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
        lpdwupdateopt: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
        lpszdisplayname: super::super::Foundation::PWSTR,
        lenfilename: u32,
        pcheaten: *mut u32,
        fvalidatesource: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
        lplpszdisplayname: *mut super::super::Foundation::PWSTR,
        lplenfilename: *mut u32,
        lplpszfulllinktype: *mut super::super::Foundation::PWSTR,
        lplpszshortlinktype: *mut super::super::Foundation::PWSTR,
        lpfsourceavailable: *mut super::super::Foundation::BOOL,
        lpfisselected: *mut super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
        ferrormessage: super::super::Foundation::BOOL,
        freserved: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwlink: u32,
        lplastupdate: *mut super::super::Foundation::FILETIME,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleUIObjInfoA(::windows::runtime::IUnknown);
impl IOleUIObjInfoA {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetObjectInfo(
        &self,
        dwobject: u32,
        lpdwobjsize: *mut u32,
        lplpszlabel: *mut super::super::Foundation::PSTR,
        lplpsztype: *mut super::super::Foundation::PSTR,
        lplpszshorttype: *mut super::super::Foundation::PSTR,
        lplpszlocation: *mut super::super::Foundation::PSTR,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwobject),
            ::std::mem::transmute(lpdwobjsize),
            ::std::mem::transmute(lplpszlabel),
            ::std::mem::transmute(lplpsztype),
            ::std::mem::transmute(lplpszshorttype),
            ::std::mem::transmute(lplpszlocation),
        )
        .ok()
    }
    pub unsafe fn GetConvertInfo(
        &self,
        dwobject: u32,
        lpclassid: *mut ::windows::runtime::GUID,
        lpwformat: *mut u16,
        lpconvertdefaultclassid: *mut ::windows::runtime::GUID,
        lplpclsidexclude: *mut *mut ::windows::runtime::GUID,
        lpcclsidexclude: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwobject),
            ::std::mem::transmute(lpclassid),
            ::std::mem::transmute(lpwformat),
            ::std::mem::transmute(lpconvertdefaultclassid),
            ::std::mem::transmute(lplpclsidexclude),
            ::std::mem::transmute(lpcclsidexclude),
        )
        .ok()
    }
    pub unsafe fn ConvertObject(
        &self,
        dwobject: u32,
        clsidnew: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwobject),
            ::std::mem::transmute(clsidnew),
        )
        .ok()
    }
    pub unsafe fn GetViewInfo(
        &self,
        dwobject: u32,
        phmetapict: *const isize,
        pdvaspect: *const u32,
        pncurrentscale: *const i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwobject),
            ::std::mem::transmute(phmetapict),
            ::std::mem::transmute(pdvaspect),
            ::std::mem::transmute(pncurrentscale),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetViewInfo<
        'a,
        Param4: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        dwobject: u32,
        hmetapict: isize,
        dvaspect: u32,
        ncurrentscale: i32,
        brelativetoorig: Param4,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwobject),
            ::std::mem::transmute(hmetapict),
            ::std::mem::transmute(dvaspect),
            ::std::mem::transmute(ncurrentscale),
            brelativetoorig.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleUIObjInfoA {
    type Vtable = IOleUIObjInfoA_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::zeroed();
}
impl ::std::convert::From<IOleUIObjInfoA> for ::windows::runtime::IUnknown {
    fn from(value: IOleUIObjInfoA) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleUIObjInfoA> for ::windows::runtime::IUnknown {
    fn from(value: &IOleUIObjInfoA) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleUIObjInfoA {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleUIObjInfoA {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleUIObjInfoA_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwobject: u32,
        lpdwobjsize: *mut u32,
        lplpszlabel: *mut super::super::Foundation::PSTR,
        lplpsztype: *mut super::super::Foundation::PSTR,
        lplpszshorttype: *mut super::super::Foundation::PSTR,
        lplpszlocation: *mut super::super::Foundation::PSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwobject: u32,
        lpclassid: *mut ::windows::runtime::GUID,
        lpwformat: *mut u16,
        lpconvertdefaultclassid: *mut ::windows::runtime::GUID,
        lplpclsidexclude: *mut *mut ::windows::runtime::GUID,
        lpcclsidexclude: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwobject: u32,
        clsidnew: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwobject: u32,
        phmetapict: *const isize,
        pdvaspect: *const u32,
        pncurrentscale: *const i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwobject: u32,
        hmetapict: isize,
        dvaspect: u32,
        ncurrentscale: i32,
        brelativetoorig: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleUIObjInfoW(::windows::runtime::IUnknown);
impl IOleUIObjInfoW {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetObjectInfo(
        &self,
        dwobject: u32,
        lpdwobjsize: *mut u32,
        lplpszlabel: *mut super::super::Foundation::PWSTR,
        lplpsztype: *mut super::super::Foundation::PWSTR,
        lplpszshorttype: *mut super::super::Foundation::PWSTR,
        lplpszlocation: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwobject),
            ::std::mem::transmute(lpdwobjsize),
            ::std::mem::transmute(lplpszlabel),
            ::std::mem::transmute(lplpsztype),
            ::std::mem::transmute(lplpszshorttype),
            ::std::mem::transmute(lplpszlocation),
        )
        .ok()
    }
    pub unsafe fn GetConvertInfo(
        &self,
        dwobject: u32,
        lpclassid: *mut ::windows::runtime::GUID,
        lpwformat: *mut u16,
        lpconvertdefaultclassid: *mut ::windows::runtime::GUID,
        lplpclsidexclude: *mut *mut ::windows::runtime::GUID,
        lpcclsidexclude: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwobject),
            ::std::mem::transmute(lpclassid),
            ::std::mem::transmute(lpwformat),
            ::std::mem::transmute(lpconvertdefaultclassid),
            ::std::mem::transmute(lplpclsidexclude),
            ::std::mem::transmute(lpcclsidexclude),
        )
        .ok()
    }
    pub unsafe fn ConvertObject(
        &self,
        dwobject: u32,
        clsidnew: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwobject),
            ::std::mem::transmute(clsidnew),
        )
        .ok()
    }
    pub unsafe fn GetViewInfo(
        &self,
        dwobject: u32,
        phmetapict: *const isize,
        pdvaspect: *const u32,
        pncurrentscale: *const i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwobject),
            ::std::mem::transmute(phmetapict),
            ::std::mem::transmute(pdvaspect),
            ::std::mem::transmute(pncurrentscale),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetViewInfo<
        'a,
        Param4: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        dwobject: u32,
        hmetapict: isize,
        dvaspect: u32,
        ncurrentscale: i32,
        brelativetoorig: Param4,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwobject),
            ::std::mem::transmute(hmetapict),
            ::std::mem::transmute(dvaspect),
            ::std::mem::transmute(ncurrentscale),
            brelativetoorig.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleUIObjInfoW {
    type Vtable = IOleUIObjInfoW_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::zeroed();
}
impl ::std::convert::From<IOleUIObjInfoW> for ::windows::runtime::IUnknown {
    fn from(value: IOleUIObjInfoW) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleUIObjInfoW> for ::windows::runtime::IUnknown {
    fn from(value: &IOleUIObjInfoW) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleUIObjInfoW {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleUIObjInfoW {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleUIObjInfoW_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwobject: u32,
        lpdwobjsize: *mut u32,
        lplpszlabel: *mut super::super::Foundation::PWSTR,
        lplpsztype: *mut super::super::Foundation::PWSTR,
        lplpszshorttype: *mut super::super::Foundation::PWSTR,
        lplpszlocation: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwobject: u32,
        lpclassid: *mut ::windows::runtime::GUID,
        lpwformat: *mut u16,
        lpconvertdefaultclassid: *mut ::windows::runtime::GUID,
        lplpclsidexclude: *mut *mut ::windows::runtime::GUID,
        lpcclsidexclude: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwobject: u32,
        clsidnew: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwobject: u32,
        phmetapict: *const isize,
        pdvaspect: *const u32,
        pncurrentscale: *const i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwobject: u32,
        hmetapict: isize,
        dvaspect: u32,
        ncurrentscale: i32,
        brelativetoorig: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleUndoManager(::windows::runtime::IUnknown);
impl IOleUndoManager {
    pub unsafe fn Open<'a, Param0: ::windows::runtime::IntoParam<'a, IOleParentUndoUnit>>(
        &self,
        ppuu: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ppuu.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Close<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IOleParentUndoUnit>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        ppuu: Param0,
        fcommit: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ppuu.into_param().abi(),
            fcommit.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Add<'a, Param0: ::windows::runtime::IntoParam<'a, IOleUndoUnit>>(
        &self,
        puu: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            puu.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetOpenParentState(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn DiscardFrom<'a, Param0: ::windows::runtime::IntoParam<'a, IOleUndoUnit>>(
        &self,
        puu: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            puu.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn UndoTo<'a, Param0: ::windows::runtime::IntoParam<'a, IOleUndoUnit>>(
        &self,
        puu: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            puu.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn RedoTo<'a, Param0: ::windows::runtime::IntoParam<'a, IOleUndoUnit>>(
        &self,
        puu: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            puu.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn EnumUndoable(&self) -> ::windows::runtime::Result<IEnumOleUndoUnits> {
        let mut result__: <IEnumOleUndoUnits as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumOleUndoUnits>(result__)
    }
    pub unsafe fn EnumRedoable(&self) -> ::windows::runtime::Result<IEnumOleUndoUnits> {
        let mut result__: <IEnumOleUndoUnits as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumOleUndoUnits>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetLastUndoDescription(
        &self,
    ) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetLastRedoDescription(
        &self,
    ) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Enable<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fenable: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            fenable.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleUndoManager {
    type Vtable = IOleUndoManager_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3489788416,
        61335,
        4558,
        [155, 201, 0, 170, 0, 96, 142, 1],
    );
}
impl ::std::convert::From<IOleUndoManager> for ::windows::runtime::IUnknown {
    fn from(value: IOleUndoManager) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleUndoManager> for ::windows::runtime::IUnknown {
    fn from(value: &IOleUndoManager) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleUndoManager {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleUndoManager {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleUndoManager_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppuu: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppuu: ::windows::runtime::RawPtr,
        fcommit: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        puu: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwstate: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        puu: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        puu: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        puu: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenum: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenum: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstr: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstr: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fenable: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleUndoUnit(::windows::runtime::IUnknown);
impl IOleUndoUnit {
    pub unsafe fn Do<'a, Param0: ::windows::runtime::IntoParam<'a, IOleUndoManager>>(
        &self,
        pundomanager: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pundomanager.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetDescription(
        &self,
    ) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    pub unsafe fn GetUnitType(
        &self,
        pclsid: *mut ::windows::runtime::GUID,
        plid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pclsid),
            ::std::mem::transmute(plid),
        )
        .ok()
    }
    pub unsafe fn OnNextAdd(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleUndoUnit {
    type Vtable = IOleUndoUnit_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2303382448,
        61335,
        4558,
        [155, 201, 0, 170, 0, 96, 142, 1],
    );
}
impl ::std::convert::From<IOleUndoUnit> for ::windows::runtime::IUnknown {
    fn from(value: IOleUndoUnit) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleUndoUnit> for ::windows::runtime::IUnknown {
    fn from(value: &IOleUndoUnit) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleUndoUnit {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleUndoUnit {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleUndoUnit_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pundomanager: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstr: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pclsid: *mut ::windows::runtime::GUID,
        plid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOleWindow(::windows::runtime::IUnknown);
impl IOleWindow {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetWindow(&self) -> ::windows::runtime::Result<super::super::Foundation::HWND> {
        let mut result__: <super::super::Foundation::HWND as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::HWND>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ContextSensitiveHelp<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fentermode: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            fentermode.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IOleWindow {
    type Vtable = IOleWindow_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(276, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IOleWindow> for ::windows::runtime::IUnknown {
    fn from(value: IOleWindow) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOleWindow> for ::windows::runtime::IUnknown {
    fn from(value: &IOleWindow) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOleWindow {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOleWindow {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOleWindow_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phwnd: *mut super::super::Foundation::HWND,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fentermode: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IOplockStorage(::windows::runtime::IUnknown);
impl IOplockStorage {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CreateStorageEx<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        T: ::windows::runtime::Interface,
    >(
        &self,
        pwcsname: Param0,
        grfmode: u32,
        stgfmt: u32,
        grfattrs: u32,
    ) -> ::windows::runtime::Result<T> {
        let mut result__ = ::std::option::Option::None;
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pwcsname.into_param().abi(),
            ::std::mem::transmute(grfmode),
            ::std::mem::transmute(stgfmt),
            ::std::mem::transmute(grfattrs),
            &<T as ::windows::runtime::Interface>::IID,
            &mut result__ as *mut _ as *mut _,
        )
        .and_some(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OpenStorageEx<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        T: ::windows::runtime::Interface,
    >(
        &self,
        pwcsname: Param0,
        grfmode: u32,
        stgfmt: u32,
        grfattrs: u32,
    ) -> ::windows::runtime::Result<T> {
        let mut result__ = ::std::option::Option::None;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            pwcsname.into_param().abi(),
            ::std::mem::transmute(grfmode),
            ::std::mem::transmute(stgfmt),
            ::std::mem::transmute(grfattrs),
            &<T as ::windows::runtime::Interface>::IID,
            &mut result__ as *mut _ as *mut _,
        )
        .and_some(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IOplockStorage {
    type Vtable = IOplockStorage_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2367277108,
        34937,
        4561,
        [131, 233, 0, 192, 79, 194, 198, 212],
    );
}
impl ::std::convert::From<IOplockStorage> for ::windows::runtime::IUnknown {
    fn from(value: IOplockStorage) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IOplockStorage> for ::windows::runtime::IUnknown {
    fn from(value: &IOplockStorage) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IOplockStorage {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IOplockStorage {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOplockStorage_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwcsname: super::super::Foundation::PWSTR,
        grfmode: u32,
        stgfmt: u32,
        grfattrs: u32,
        riid: *const ::windows::runtime::GUID,
        ppstgopen: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwcsname: super::super::Foundation::PWSTR,
        grfmode: u32,
        stgfmt: u32,
        grfattrs: u32,
        riid: *const ::windows::runtime::GUID,
        ppstgopen: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPSFactoryBuffer(::windows::runtime::IUnknown);
impl IPSFactoryBuffer {
    pub unsafe fn CreateProxy<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    >(
        &self,
        punkouter: Param0,
        riid: *const ::windows::runtime::GUID,
        ppproxy: *mut ::std::option::Option<IRpcProxyBuffer>,
        ppv: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            punkouter.into_param().abi(),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(ppproxy),
            ::std::mem::transmute(ppv),
        )
        .ok()
    }
    pub unsafe fn CreateStub<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    >(
        &self,
        riid: *const ::windows::runtime::GUID,
        punkserver: Param1,
    ) -> ::windows::runtime::Result<IRpcStubBuffer> {
        let mut result__: <IRpcStubBuffer as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            punkserver.into_param().abi(),
            &mut result__,
        )
        .from_abi::<IRpcStubBuffer>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IPSFactoryBuffer {
    type Vtable = IPSFactoryBuffer_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3589630416,
        22843,
        4122,
        [181, 105, 8, 0, 43, 45, 191, 122],
    );
}
impl ::std::convert::From<IPSFactoryBuffer> for ::windows::runtime::IUnknown {
    fn from(value: IPSFactoryBuffer) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPSFactoryBuffer> for ::windows::runtime::IUnknown {
    fn from(value: &IPSFactoryBuffer) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPSFactoryBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPSFactoryBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPSFactoryBuffer_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        punkouter: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        ppproxy: *mut ::windows::runtime::RawPtr,
        ppv: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        punkserver: ::windows::runtime::RawPtr,
        ppstub: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPackageUtil(::windows::runtime::IUnknown);
impl IPackageUtil {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::OleAutomation::ITypeInfo> {
        let mut result__: <super::OleAutomation::ITypeInfo as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::OleAutomation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::OleAutomation::DISPPARAMS,
        pvarresult: *mut super::OleAutomation::VARIANT,
        pexcepinfo: *mut super::OleAutomation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn InstallPackage<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrpackagefile: Param0,
        bstrinstallpath: Param1,
        loptions: i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            bstrpackagefile.into_param().abi(),
            bstrinstallpath.into_param().abi(),
            ::std::mem::transmute(loptions),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ExportPackage<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrpackageid: Param0,
        bstrpackagefile: Param1,
        loptions: i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            bstrpackageid.into_param().abi(),
            bstrpackagefile.into_param().abi(),
            ::std::mem::transmute(loptions),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ShutdownPackage<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrpackageid: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            bstrpackageid.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IPackageUtil {
    type Vtable = IPackageUtil_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        1857169524,
        35353,
        4560,
        [129, 182, 0, 160, 201, 35, 28, 41],
    );
}
impl ::std::convert::From<IPackageUtil> for ::windows::runtime::IUnknown {
    fn from(value: IPackageUtil) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPackageUtil> for ::windows::runtime::IUnknown {
    fn from(value: &IPackageUtil) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPackageUtil {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPackageUtil {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl ::std::convert::From<IPackageUtil> for super::OleAutomation::IDispatch {
    fn from(value: IPackageUtil) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl ::std::convert::From<&IPackageUtil> for super::OleAutomation::IDispatch {
    fn from(value: &IPackageUtil) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::OleAutomation::IDispatch> for IPackageUtil {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::OleAutomation::IDispatch> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<super::OleAutomation::IDispatch>::into(self),
        )
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::OleAutomation::IDispatch> for &IPackageUtil {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::OleAutomation::IDispatch> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<super::OleAutomation::IDispatch>::into(
                ::std::clone::Clone::clone(self),
            ),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPackageUtil_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_OleAutomation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::OleAutomation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::OleAutomation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrpackagefile: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        bstrinstallpath: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        loptions: i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrpackageid: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        bstrpackagefile: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        loptions: i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrpackageid: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IParseDisplayName(::windows::runtime::IUnknown);
impl IParseDisplayName {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ParseDisplayName<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IBindCtx>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pbc: Param0,
        pszdisplayname: Param1,
        pcheaten: *mut u32,
        ppmkout: *mut ::std::option::Option<IMoniker>,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pbc.into_param().abi(),
            pszdisplayname.into_param().abi(),
            ::std::mem::transmute(pcheaten),
            ::std::mem::transmute(ppmkout),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IParseDisplayName {
    type Vtable = IParseDisplayName_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(282, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IParseDisplayName> for ::windows::runtime::IUnknown {
    fn from(value: IParseDisplayName) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IParseDisplayName> for ::windows::runtime::IUnknown {
    fn from(value: &IParseDisplayName) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IParseDisplayName {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IParseDisplayName {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IParseDisplayName_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbc: ::windows::runtime::RawPtr,
        pszdisplayname: super::super::Foundation::PWSTR,
        pcheaten: *mut u32,
        ppmkout: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPerPropertyBrowsing(::windows::runtime::IUnknown);
impl IPerPropertyBrowsing {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetDisplayString(
        &self,
        dispid: i32,
    ) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispid),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    pub unsafe fn MapPropertyToPage(
        &self,
        dispid: i32,
    ) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispid),
            &mut result__,
        )
        .from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetPredefinedStrings(
        &self,
        dispid: i32,
        pcastringsout: *mut CALPOLESTR,
        pcacookiesout: *mut CADWORD,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispid),
            ::std::mem::transmute(pcastringsout),
            ::std::mem::transmute(pcacookiesout),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn GetPredefinedValue(
        &self,
        dispid: i32,
        dwcookie: u32,
    ) -> ::windows::runtime::Result<super::OleAutomation::VARIANT> {
        let mut result__: <super::OleAutomation::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispid),
            ::std::mem::transmute(dwcookie),
            &mut result__,
        )
        .from_abi::<super::OleAutomation::VARIANT>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IPerPropertyBrowsing {
    type Vtable = IPerPropertyBrowsing_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        929813418,
        14405,
        4123,
        [132, 237, 8, 0, 43, 46, 199, 19],
    );
}
impl ::std::convert::From<IPerPropertyBrowsing> for ::windows::runtime::IUnknown {
    fn from(value: IPerPropertyBrowsing) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPerPropertyBrowsing> for ::windows::runtime::IUnknown {
    fn from(value: &IPerPropertyBrowsing) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPerPropertyBrowsing {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPerPropertyBrowsing {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPerPropertyBrowsing_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispid: i32,
        pbstr: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispid: i32,
        pclsid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispid: i32,
        pcastringsout: *mut CALPOLESTR,
        pcacookiesout: *mut CADWORD,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispid: i32,
        dwcookie: u32,
        pvarout: *mut ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPersist(::windows::runtime::IUnknown);
impl IPersist {
    pub unsafe fn GetClassID(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::GUID>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IPersist {
    type Vtable = IPersist_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(268, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IPersist> for ::windows::runtime::IUnknown {
    fn from(value: IPersist) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPersist> for ::windows::runtime::IUnknown {
    fn from(value: &IPersist) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPersist {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPersist {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPersist_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pclassid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPersistFile(::windows::runtime::IUnknown);
impl IPersistFile {
    pub unsafe fn GetClassID(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::GUID>(result__)
    }
    pub unsafe fn IsDirty(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Load<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pszfilename: Param0,
        dwmode: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            pszfilename.into_param().abi(),
            ::std::mem::transmute(dwmode),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Save<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        pszfilename: Param0,
        fremember: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            pszfilename.into_param().abi(),
            fremember.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SaveCompleted<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pszfilename: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            pszfilename.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetCurFile(&self) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::PWSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IPersistFile {
    type Vtable = IPersistFile_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(267, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IPersistFile> for ::windows::runtime::IUnknown {
    fn from(value: IPersistFile) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPersistFile> for ::windows::runtime::IUnknown {
    fn from(value: &IPersistFile) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPersistFile {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPersistFile {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IPersistFile> for IPersist {
    fn from(value: IPersistFile) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPersistFile> for IPersist {
    fn from(value: &IPersistFile) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IPersist> for IPersistFile {
    fn into_param(self) -> ::windows::runtime::Param<'a, IPersist> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IPersist>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IPersist> for &IPersistFile {
    fn into_param(self) -> ::windows::runtime::Param<'a, IPersist> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IPersist>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPersistFile_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pclassid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pszfilename: super::super::Foundation::PWSTR,
        dwmode: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pszfilename: super::super::Foundation::PWSTR,
        fremember: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pszfilename: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppszfilename: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPersistMemory(::windows::runtime::IUnknown);
impl IPersistMemory {
    pub unsafe fn GetClassID(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::GUID>(result__)
    }
    pub unsafe fn IsDirty(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Load(
        &self,
        pmem: *const ::std::ffi::c_void,
        cbsize: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmem),
            ::std::mem::transmute(cbsize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Save<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        pmem: *mut ::std::ffi::c_void,
        fcleardirty: Param1,
        cbsize: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmem),
            fcleardirty.into_param().abi(),
            ::std::mem::transmute(cbsize),
        )
        .ok()
    }
    pub unsafe fn GetSizeMax(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn InitNew(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IPersistMemory {
    type Vtable = IPersistMemory_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3172656608,
        42670,
        4558,
        [189, 55, 80, 66, 0, 193, 0, 0],
    );
}
impl ::std::convert::From<IPersistMemory> for ::windows::runtime::IUnknown {
    fn from(value: IPersistMemory) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPersistMemory> for ::windows::runtime::IUnknown {
    fn from(value: &IPersistMemory) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPersistMemory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPersistMemory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IPersistMemory> for IPersist {
    fn from(value: IPersistMemory) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPersistMemory> for IPersist {
    fn from(value: &IPersistMemory) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IPersist> for IPersistMemory {
    fn into_param(self) -> ::windows::runtime::Param<'a, IPersist> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IPersist>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IPersist> for &IPersistMemory {
    fn into_param(self) -> ::windows::runtime::Param<'a, IPersist> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IPersist>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPersistMemory_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pclassid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmem: *const ::std::ffi::c_void,
        cbsize: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmem: *mut ::std::ffi::c_void,
        fcleardirty: super::super::Foundation::BOOL,
        cbsize: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pcbsize: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPersistMoniker(::windows::runtime::IUnknown);
impl IPersistMoniker {
    pub unsafe fn GetClassID(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::GUID>(result__)
    }
    pub unsafe fn IsDirty(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Load<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
        Param1: ::windows::runtime::IntoParam<'a, IMoniker>,
        Param2: ::windows::runtime::IntoParam<'a, IBindCtx>,
    >(
        &self,
        ffullyavailable: Param0,
        pimkname: Param1,
        pibc: Param2,
        grfmode: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ffullyavailable.into_param().abi(),
            pimkname.into_param().abi(),
            pibc.into_param().abi(),
            ::std::mem::transmute(grfmode),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Save<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IMoniker>,
        Param1: ::windows::runtime::IntoParam<'a, IBindCtx>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        pimkname: Param0,
        pbc: Param1,
        fremember: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            pimkname.into_param().abi(),
            pbc.into_param().abi(),
            fremember.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn SaveCompleted<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IMoniker>,
        Param1: ::windows::runtime::IntoParam<'a, IBindCtx>,
    >(
        &self,
        pimkname: Param0,
        pibc: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            pimkname.into_param().abi(),
            pibc.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetCurMoniker(&self) -> ::windows::runtime::Result<IMoniker> {
        let mut result__: <IMoniker as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IMoniker>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IPersistMoniker {
    type Vtable = IPersistMoniker_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430217,
        47865,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<IPersistMoniker> for ::windows::runtime::IUnknown {
    fn from(value: IPersistMoniker) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPersistMoniker> for ::windows::runtime::IUnknown {
    fn from(value: &IPersistMoniker) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPersistMoniker {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPersistMoniker {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPersistMoniker_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pclassid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ffullyavailable: super::super::Foundation::BOOL,
        pimkname: ::windows::runtime::RawPtr,
        pibc: ::windows::runtime::RawPtr,
        grfmode: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pimkname: ::windows::runtime::RawPtr,
        pbc: ::windows::runtime::RawPtr,
        fremember: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pimkname: ::windows::runtime::RawPtr,
        pibc: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppimkname: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPersistPropertyBag(::windows::runtime::IUnknown);
impl IPersistPropertyBag {
    pub unsafe fn GetClassID(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::GUID>(result__)
    }
    pub unsafe fn InitNew(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub unsafe fn Load<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::OleAutomation::IPropertyBag>,
        Param1: ::windows::runtime::IntoParam<'a, super::OleAutomation::IErrorLog>,
    >(
        &self,
        ppropbag: Param0,
        perrorlog: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ppropbag.into_param().abi(),
            perrorlog.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_OleAutomation"))]
    pub unsafe fn Save<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::OleAutomation::IPropertyBag>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        ppropbag: Param0,
        fcleardirty: Param1,
        fsaveallproperties: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ppropbag.into_param().abi(),
            fcleardirty.into_param().abi(),
            fsaveallproperties.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IPersistPropertyBag {
    type Vtable = IPersistPropertyBag_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        936922976,
        17099,
        4558,
        [129, 53, 0, 170, 0, 75, 184, 81],
    );
}
impl ::std::convert::From<IPersistPropertyBag> for ::windows::runtime::IUnknown {
    fn from(value: IPersistPropertyBag) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPersistPropertyBag> for ::windows::runtime::IUnknown {
    fn from(value: &IPersistPropertyBag) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPersistPropertyBag {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPersistPropertyBag {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IPersistPropertyBag> for IPersist {
    fn from(value: IPersistPropertyBag) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPersistPropertyBag> for IPersist {
    fn from(value: &IPersistPropertyBag) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IPersist> for IPersistPropertyBag {
    fn into_param(self) -> ::windows::runtime::Param<'a, IPersist> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IPersist>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IPersist> for &IPersistPropertyBag {
    fn into_param(self) -> ::windows::runtime::Param<'a, IPersist> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IPersist>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPersistPropertyBag_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pclassid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppropbag: ::windows::runtime::RawPtr,
        perrorlog: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_OleAutomation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_OleAutomation"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppropbag: ::windows::runtime::RawPtr,
        fcleardirty: super::super::Foundation::BOOL,
        fsaveallproperties: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_OleAutomation")))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPersistPropertyBag2(::windows::runtime::IUnknown);
impl IPersistPropertyBag2 {
    pub unsafe fn GetClassID(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::GUID>(result__)
    }
    pub unsafe fn InitNew(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub unsafe fn Load<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IPropertyBag2>,
        Param1: ::windows::runtime::IntoParam<'a, super::OleAutomation::IErrorLog>,
    >(
        &self,
        ppropbag: Param0,
        perrlog: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ppropbag.into_param().abi(),
            perrlog.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Save<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IPropertyBag2>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        ppropbag: Param0,
        fcleardirty: Param1,
        fsaveallproperties: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ppropbag.into_param().abi(),
            fcleardirty.into_param().abi(),
            fsaveallproperties.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsDirty(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IPersistPropertyBag2 {
    type Vtable = IPersistPropertyBag2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        586504321,
        10251,
        4560,
        [168, 169, 0, 160, 201, 12, 32, 4],
    );
}
impl ::std::convert::From<IPersistPropertyBag2> for ::windows::runtime::IUnknown {
    fn from(value: IPersistPropertyBag2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPersistPropertyBag2> for ::windows::runtime::IUnknown {
    fn from(value: &IPersistPropertyBag2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPersistPropertyBag2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPersistPropertyBag2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IPersistPropertyBag2> for IPersist {
    fn from(value: IPersistPropertyBag2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPersistPropertyBag2> for IPersist {
    fn from(value: &IPersistPropertyBag2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IPersist> for IPersistPropertyBag2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IPersist> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IPersist>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IPersist> for &IPersistPropertyBag2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IPersist> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IPersist>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPersistPropertyBag2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pclassid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppropbag: ::windows::runtime::RawPtr,
        perrlog: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_OleAutomation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppropbag: ::windows::runtime::RawPtr,
        fcleardirty: super::super::Foundation::BOOL,
        fsaveallproperties: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPersistStorage(::windows::runtime::IUnknown);
impl IPersistStorage {
    pub unsafe fn GetClassID(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::GUID>(result__)
    }
    pub unsafe fn IsDirty(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub unsafe fn InitNew<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStorage>,
    >(
        &self,
        pstg: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            pstg.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub unsafe fn Load<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStorage>,
    >(
        &self,
        pstg: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            pstg.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn Save<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStorage>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        pstgsave: Param0,
        fsameasload: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            pstgsave.into_param().abi(),
            fsameasload.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub unsafe fn SaveCompleted<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStorage>,
    >(
        &self,
        pstgnew: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            pstgnew.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn HandsOffStorage(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IPersistStorage {
    type Vtable = IPersistStorage_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(266, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IPersistStorage> for ::windows::runtime::IUnknown {
    fn from(value: IPersistStorage) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPersistStorage> for ::windows::runtime::IUnknown {
    fn from(value: &IPersistStorage) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPersistStorage {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPersistStorage {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IPersistStorage> for IPersist {
    fn from(value: IPersistStorage) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPersistStorage> for IPersist {
    fn from(value: &IPersistStorage) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IPersist> for IPersistStorage {
    fn into_param(self) -> ::windows::runtime::Param<'a, IPersist> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IPersist>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IPersist> for &IPersistStorage {
    fn into_param(self) -> ::windows::runtime::Param<'a, IPersist> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IPersist>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPersistStorage_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pclassid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstg: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Storage_StructuredStorage"))] usize,
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstg: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Storage_StructuredStorage"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstgsave: ::windows::runtime::RawPtr,
        fsameasload: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstgnew: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Storage_StructuredStorage"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPersistStream(::windows::runtime::IUnknown);
impl IPersistStream {
    pub unsafe fn GetClassID(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::GUID>(result__)
    }
    pub unsafe fn IsDirty(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub unsafe fn Load<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
    >(
        &self,
        pstm: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            pstm.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn Save<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        pstm: Param0,
        fcleardirty: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            pstm.into_param().abi(),
            fcleardirty.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetSizeMax(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u64>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IPersistStream {
    type Vtable = IPersistStream_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(265, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IPersistStream> for ::windows::runtime::IUnknown {
    fn from(value: IPersistStream) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPersistStream> for ::windows::runtime::IUnknown {
    fn from(value: &IPersistStream) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPersistStream {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPersistStream {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IPersistStream> for IPersist {
    fn from(value: IPersistStream) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPersistStream> for IPersist {
    fn from(value: &IPersistStream) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IPersist> for IPersistStream {
    fn into_param(self) -> ::windows::runtime::Param<'a, IPersist> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IPersist>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IPersist> for &IPersistStream {
    fn into_param(self) -> ::windows::runtime::Param<'a, IPersist> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IPersist>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPersistStream_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pclassid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstm: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Storage_StructuredStorage"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstm: ::windows::runtime::RawPtr,
        fcleardirty: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pcbsize: *mut u64,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPersistStreamInit(::windows::runtime::IUnknown);
impl IPersistStreamInit {
    pub unsafe fn GetClassID(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::GUID>(result__)
    }
    pub unsafe fn IsDirty(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub unsafe fn Load<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
    >(
        &self,
        pstm: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            pstm.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn Save<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        pstm: Param0,
        fcleardirty: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            pstm.into_param().abi(),
            fcleardirty.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetSizeMax(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u64>(result__)
    }
    pub unsafe fn InitNew(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IPersistStreamInit {
    type Vtable = IPersistStreamInit_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2144674688,
        19975,
        4123,
        [174, 45, 8, 0, 43, 46, 199, 19],
    );
}
impl ::std::convert::From<IPersistStreamInit> for ::windows::runtime::IUnknown {
    fn from(value: IPersistStreamInit) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPersistStreamInit> for ::windows::runtime::IUnknown {
    fn from(value: &IPersistStreamInit) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPersistStreamInit {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPersistStreamInit {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IPersistStreamInit> for IPersist {
    fn from(value: IPersistStreamInit) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPersistStreamInit> for IPersist {
    fn from(value: &IPersistStreamInit) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IPersist> for IPersistStreamInit {
    fn into_param(self) -> ::windows::runtime::Param<'a, IPersist> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IPersist>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IPersist> for &IPersistStreamInit {
    fn into_param(self) -> ::windows::runtime::Param<'a, IPersist> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IPersist>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPersistStreamInit_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pclassid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstm: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Storage_StructuredStorage"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstm: ::windows::runtime::RawPtr,
        fcleardirty: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pcbsize: *mut u64,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPicture(::windows::runtime::IUnknown);
impl IPicture {
    pub unsafe fn Handle(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn hPal(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn Type(&self) -> ::windows::runtime::Result<i16> {
        let mut result__: <i16 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i16>(result__)
    }
    pub unsafe fn Width(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn Height(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub unsafe fn Render<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HDC>,
    >(
        &self,
        hdc: Param0,
        x: i32,
        y: i32,
        cx: i32,
        cy: i32,
        xsrc: i32,
        ysrc: i32,
        cxsrc: i32,
        cysrc: i32,
        prcwbounds: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            hdc.into_param().abi(),
            ::std::mem::transmute(x),
            ::std::mem::transmute(y),
            ::std::mem::transmute(cx),
            ::std::mem::transmute(cy),
            ::std::mem::transmute(xsrc),
            ::std::mem::transmute(ysrc),
            ::std::mem::transmute(cxsrc),
            ::std::mem::transmute(cysrc),
            ::std::mem::transmute(prcwbounds),
        )
        .ok()
    }
    pub unsafe fn set_hPal(&self, hpal: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(hpal),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn CurDC(&self) -> ::windows::runtime::Result<super::super::Graphics::Gdi::HDC> {
        let mut result__: <super::super::Graphics::Gdi::HDC as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Graphics::Gdi::HDC>(result__)
    }
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn SelectPicture<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HDC>,
    >(
        &self,
        hdcin: Param0,
        phdcout: *mut super::super::Graphics::Gdi::HDC,
        phbmpout: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            hdcin.into_param().abi(),
            ::std::mem::transmute(phdcout),
            ::std::mem::transmute(phbmpout),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn KeepOriginalFormat(
        &self,
    ) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetKeepOriginalFormat<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        keep: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            keep.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn PictureChanged(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn SaveAsFile<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        pstream: Param0,
        fsavememcopy: Param1,
    ) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            pstream.into_param().abi(),
            fsavememcopy.into_param().abi(),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn Attributes(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IPicture {
    type Vtable = IPicture_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2079852928,
        48946,
        4122,
        [139, 187, 0, 170, 0, 48, 12, 171],
    );
}
impl ::std::convert::From<IPicture> for ::windows::runtime::IUnknown {
    fn from(value: IPicture) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPicture> for ::windows::runtime::IUnknown {
    fn from(value: &IPicture) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPicture {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPicture {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPicture_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phandle: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phpal: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ptype: *mut i16,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwidth: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pheight: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hdc: super::super::Graphics::Gdi::HDC,
        x: i32,
        y: i32,
        cx: i32,
        cy: i32,
        xsrc: i32,
        ysrc: i32,
        cxsrc: i32,
        cysrc: i32,
        prcwbounds: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi")))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hpal: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phdc: *mut super::super::Graphics::Gdi::HDC,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))] usize,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hdcin: super::super::Graphics::Gdi::HDC,
        phdcout: *mut super::super::Graphics::Gdi::HDC,
        phbmpout: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pkeep: *mut super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        keep: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstream: ::windows::runtime::RawPtr,
        fsavememcopy: super::super::Foundation::BOOL,
        pcbsize: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwattr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPicture2(::windows::runtime::IUnknown);
impl IPicture2 {
    pub unsafe fn Handle(&self) -> ::windows::runtime::Result<usize> {
        let mut result__: <usize as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<usize>(result__)
    }
    pub unsafe fn hPal(&self) -> ::windows::runtime::Result<usize> {
        let mut result__: <usize as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<usize>(result__)
    }
    pub unsafe fn Type(&self) -> ::windows::runtime::Result<i16> {
        let mut result__: <i16 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i16>(result__)
    }
    pub unsafe fn Width(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn Height(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub unsafe fn Render<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HDC>,
    >(
        &self,
        hdc: Param0,
        x: i32,
        y: i32,
        cx: i32,
        cy: i32,
        xsrc: i32,
        ysrc: i32,
        cxsrc: i32,
        cysrc: i32,
        prcwbounds: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            hdc.into_param().abi(),
            ::std::mem::transmute(x),
            ::std::mem::transmute(y),
            ::std::mem::transmute(cx),
            ::std::mem::transmute(cy),
            ::std::mem::transmute(xsrc),
            ::std::mem::transmute(ysrc),
            ::std::mem::transmute(cxsrc),
            ::std::mem::transmute(cysrc),
            ::std::mem::transmute(prcwbounds),
        )
        .ok()
    }
    pub unsafe fn set_hPal(&self, hpal: usize) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(hpal),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn CurDC(&self) -> ::windows::runtime::Result<super::super::Graphics::Gdi::HDC> {
        let mut result__: <super::super::Graphics::Gdi::HDC as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Graphics::Gdi::HDC>(result__)
    }
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn SelectPicture<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HDC>,
    >(
        &self,
        hdcin: Param0,
        phdcout: *mut super::super::Graphics::Gdi::HDC,
        phbmpout: *mut usize,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            hdcin.into_param().abi(),
            ::std::mem::transmute(phdcout),
            ::std::mem::transmute(phbmpout),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn KeepOriginalFormat(
        &self,
    ) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetKeepOriginalFormat<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        keep: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            keep.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn PictureChanged(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn SaveAsFile<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        pstream: Param0,
        fsavememcopy: Param1,
    ) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            pstream.into_param().abi(),
            fsavememcopy.into_param().abi(),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn Attributes(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IPicture2 {
    type Vtable = IPicture2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4112014808,
        8210,
        19211,
        [170, 217, 240, 82, 198, 189, 72, 43],
    );
}
impl ::std::convert::From<IPicture2> for ::windows::runtime::IUnknown {
    fn from(value: IPicture2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPicture2> for ::windows::runtime::IUnknown {
    fn from(value: &IPicture2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPicture2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPicture2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPicture2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phandle: *mut usize,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phpal: *mut usize,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ptype: *mut i16,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwidth: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pheight: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hdc: super::super::Graphics::Gdi::HDC,
        x: i32,
        y: i32,
        cx: i32,
        cy: i32,
        xsrc: i32,
        ysrc: i32,
        cxsrc: i32,
        cysrc: i32,
        prcwbounds: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi")))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hpal: usize,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phdc: *mut super::super::Graphics::Gdi::HDC,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))] usize,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hdcin: super::super::Graphics::Gdi::HDC,
        phdcout: *mut super::super::Graphics::Gdi::HDC,
        phbmpout: *mut usize,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pkeep: *mut super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        keep: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstream: ::windows::runtime::RawPtr,
        fsavememcopy: super::super::Foundation::BOOL,
        pcbsize: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwattr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPictureDisp(::windows::runtime::IUnknown);
impl IPictureDisp {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::OleAutomation::ITypeInfo> {
        let mut result__: <super::OleAutomation::ITypeInfo as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::OleAutomation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::OleAutomation::DISPPARAMS,
        pvarresult: *mut super::OleAutomation::VARIANT,
        pexcepinfo: *mut super::OleAutomation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IPictureDisp {
    type Vtable = IPictureDisp_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2079852929,
        48946,
        4122,
        [139, 187, 0, 170, 0, 48, 12, 171],
    );
}
impl ::std::convert::From<IPictureDisp> for ::windows::runtime::IUnknown {
    fn from(value: IPictureDisp) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPictureDisp> for ::windows::runtime::IUnknown {
    fn from(value: &IPictureDisp) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPictureDisp {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPictureDisp {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl ::std::convert::From<IPictureDisp> for super::OleAutomation::IDispatch {
    fn from(value: IPictureDisp) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl ::std::convert::From<&IPictureDisp> for super::OleAutomation::IDispatch {
    fn from(value: &IPictureDisp) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::OleAutomation::IDispatch> for IPictureDisp {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::OleAutomation::IDispatch> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<super::OleAutomation::IDispatch>::into(self),
        )
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::OleAutomation::IDispatch> for &IPictureDisp {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::OleAutomation::IDispatch> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<super::OleAutomation::IDispatch>::into(
                ::std::clone::Clone::clone(self),
            ),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPictureDisp_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_OleAutomation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::OleAutomation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::OleAutomation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPipeByte(::windows::runtime::IUnknown);
impl IPipeByte {
    pub unsafe fn Pull(
        &self,
        buf: *mut u8,
        crequest: u32,
        pcreturned: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(buf),
            ::std::mem::transmute(crequest),
            ::std::mem::transmute(pcreturned),
        )
        .ok()
    }
    pub unsafe fn Push(&self, buf: *const u8, csent: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(buf),
            ::std::mem::transmute(csent),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IPipeByte {
    type Vtable = IPipeByte_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3677305546,
        12166,
        4561,
        [142, 4, 0, 192, 79, 185, 152, 154],
    );
}
impl ::std::convert::From<IPipeByte> for ::windows::runtime::IUnknown {
    fn from(value: IPipeByte) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPipeByte> for ::windows::runtime::IUnknown {
    fn from(value: &IPipeByte) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPipeByte {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPipeByte {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPipeByte_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        buf: *mut u8,
        crequest: u32,
        pcreturned: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        buf: *const u8,
        csent: u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPipeDouble(::windows::runtime::IUnknown);
impl IPipeDouble {
    pub unsafe fn Pull(
        &self,
        buf: *mut f64,
        crequest: u32,
        pcreturned: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(buf),
            ::std::mem::transmute(crequest),
            ::std::mem::transmute(pcreturned),
        )
        .ok()
    }
    pub unsafe fn Push(&self, buf: *const f64, csent: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(buf),
            ::std::mem::transmute(csent),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IPipeDouble {
    type Vtable = IPipeDouble_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3677305550,
        12166,
        4561,
        [142, 4, 0, 192, 79, 185, 152, 154],
    );
}
impl ::std::convert::From<IPipeDouble> for ::windows::runtime::IUnknown {
    fn from(value: IPipeDouble) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPipeDouble> for ::windows::runtime::IUnknown {
    fn from(value: &IPipeDouble) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPipeDouble {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPipeDouble {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPipeDouble_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        buf: *mut f64,
        crequest: u32,
        pcreturned: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        buf: *const f64,
        csent: u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPipeLong(::windows::runtime::IUnknown);
impl IPipeLong {
    pub unsafe fn Pull(
        &self,
        buf: *mut i32,
        crequest: u32,
        pcreturned: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(buf),
            ::std::mem::transmute(crequest),
            ::std::mem::transmute(pcreturned),
        )
        .ok()
    }
    pub unsafe fn Push(&self, buf: *const i32, csent: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(buf),
            ::std::mem::transmute(csent),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IPipeLong {
    type Vtable = IPipeLong_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3677305548,
        12166,
        4561,
        [142, 4, 0, 192, 79, 185, 152, 154],
    );
}
impl ::std::convert::From<IPipeLong> for ::windows::runtime::IUnknown {
    fn from(value: IPipeLong) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPipeLong> for ::windows::runtime::IUnknown {
    fn from(value: &IPipeLong) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPipeLong {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPipeLong {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPipeLong_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        buf: *mut i32,
        crequest: u32,
        pcreturned: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        buf: *const i32,
        csent: u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPointerInactive(::windows::runtime::IUnknown);
impl IPointerInactive {
    pub unsafe fn GetActivationPolicy(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnInactiveMouseMove(
        &self,
        prectbounds: *const super::super::Foundation::RECT,
        x: i32,
        y: i32,
        grfkeystate: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(prectbounds),
            ::std::mem::transmute(x),
            ::std::mem::transmute(y),
            ::std::mem::transmute(grfkeystate),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnInactiveSetCursor<
        'a,
        Param4: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        prectbounds: *const super::super::Foundation::RECT,
        x: i32,
        y: i32,
        dwmousemsg: u32,
        fsetalways: Param4,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(prectbounds),
            ::std::mem::transmute(x),
            ::std::mem::transmute(y),
            ::std::mem::transmute(dwmousemsg),
            fsetalways.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IPointerInactive {
    type Vtable = IPointerInactive_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        1436027808,
        13738,
        4559,
        [182, 113, 0, 170, 0, 76, 214, 216],
    );
}
impl ::std::convert::From<IPointerInactive> for ::windows::runtime::IUnknown {
    fn from(value: IPointerInactive) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPointerInactive> for ::windows::runtime::IUnknown {
    fn from(value: &IPointerInactive) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPointerInactive {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPointerInactive {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointerInactive_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwpolicy: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        prectbounds: *const super::super::Foundation::RECT,
        x: i32,
        y: i32,
        grfkeystate: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        prectbounds: *const super::super::Foundation::RECT,
        x: i32,
        y: i32,
        dwmousemsg: u32,
        fsetalways: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPrint(::windows::runtime::IUnknown);
impl IPrint {
    pub unsafe fn SetInitialPageNum(&self, nfirstpage: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(nfirstpage),
        )
        .ok()
    }
    pub unsafe fn GetPageInfo(
        &self,
        pnfirstpage: *mut i32,
        pcpages: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pnfirstpage),
            ::std::mem::transmute(pcpages),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn Print<'a, Param4: ::windows::runtime::IntoParam<'a, IContinueCallback>>(
        &self,
        grfflags: u32,
        pptd: *mut *mut DVTARGETDEVICE,
        pppageset: *mut *mut PAGESET,
        pstgmoptions: *mut STGMEDIUM,
        pcallback: Param4,
        nfirstpage: i32,
        pcpagesprinted: *mut i32,
        pnlastpage: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(grfflags),
            ::std::mem::transmute(pptd),
            ::std::mem::transmute(pppageset),
            ::std::mem::transmute(pstgmoptions),
            pcallback.into_param().abi(),
            ::std::mem::transmute(nfirstpage),
            ::std::mem::transmute(pcpagesprinted),
            ::std::mem::transmute(pnlastpage),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IPrint {
    type Vtable = IPrint_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3072507081,
        20072,
        4123,
        [162, 188, 0, 170, 0, 64, 71, 112],
    );
}
impl ::std::convert::From<IPrint> for ::windows::runtime::IUnknown {
    fn from(value: IPrint) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPrint> for ::windows::runtime::IUnknown {
    fn from(value: &IPrint) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPrint {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPrint {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPrint_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        nfirstpage: i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pnfirstpage: *mut i32,
        pcpages: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        grfflags: u32,
        pptd: *mut *mut DVTARGETDEVICE,
        pppageset: *mut *mut PAGESET,
        pstgmoptions: *mut ::std::mem::ManuallyDrop<STGMEDIUM>,
        pcallback: ::windows::runtime::RawPtr,
        nfirstpage: i32,
        pcpagesprinted: *mut i32,
        pnlastpage: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IProcessInitControl(::windows::runtime::IUnknown);
impl IProcessInitControl {
    pub unsafe fn ResetInitializerTimeout(
        &self,
        dwsecondsremaining: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwsecondsremaining),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IProcessInitControl {
    type Vtable = IProcessInitControl_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        1916276053,
        36139,
        17315,
        [133, 19, 43, 110, 243, 20, 52, 233],
    );
}
impl ::std::convert::From<IProcessInitControl> for ::windows::runtime::IUnknown {
    fn from(value: IProcessInitControl) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IProcessInitControl> for ::windows::runtime::IUnknown {
    fn from(value: &IProcessInitControl) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IProcessInitControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IProcessInitControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IProcessInitControl_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwsecondsremaining: u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IProcessLock(::windows::runtime::IUnknown);
impl IProcessLock {
    pub unsafe fn AddRefOnProcess(&self) -> u32 {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn ReleaseRefOnProcess(&self) -> u32 {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
        ))
    }
}
unsafe impl ::windows::runtime::Interface for IProcessLock {
    type Vtable = IProcessLock_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(469, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IProcessLock> for ::windows::runtime::IUnknown {
    fn from(value: IProcessLock) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IProcessLock> for ::windows::runtime::IUnknown {
    fn from(value: &IProcessLock) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IProcessLock {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IProcessLock {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IProcessLock_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IProgressNotify(::windows::runtime::IUnknown);
impl IProgressNotify {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnProgress<
        'a,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
        Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        dwprogresscurrent: u32,
        dwprogressmaximum: u32,
        faccurate: Param2,
        fowner: Param3,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwprogresscurrent),
            ::std::mem::transmute(dwprogressmaximum),
            faccurate.into_param().abi(),
            fowner.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IProgressNotify {
    type Vtable = IProgressNotify_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2849462432,
        17943,
        4559,
        [149, 252, 0, 170, 0, 104, 13, 180],
    );
}
impl ::std::convert::From<IProgressNotify> for ::windows::runtime::IUnknown {
    fn from(value: IProgressNotify) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IProgressNotify> for ::windows::runtime::IUnknown {
    fn from(value: &IProgressNotify) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IProgressNotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IProgressNotify {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IProgressNotify_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwprogresscurrent: u32,
        dwprogressmaximum: u32,
        faccurate: super::super::Foundation::BOOL,
        fowner: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPropertyBag2(::windows::runtime::IUnknown);
impl IPropertyBag2 {
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn Read<
        'a,
        Param2: ::windows::runtime::IntoParam<'a, super::OleAutomation::IErrorLog>,
    >(
        &self,
        cproperties: u32,
        ppropbag: *const PROPBAG2,
        perrlog: Param2,
        pvarvalue: *mut super::OleAutomation::VARIANT,
        phrerror: *mut ::windows::runtime::HRESULT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(cproperties),
            ::std::mem::transmute(ppropbag),
            perrlog.into_param().abi(),
            ::std::mem::transmute(pvarvalue),
            ::std::mem::transmute(phrerror),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn Write(
        &self,
        cproperties: u32,
        ppropbag: *const PROPBAG2,
        pvarvalue: *const super::OleAutomation::VARIANT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(cproperties),
            ::std::mem::transmute(ppropbag),
            ::std::mem::transmute(pvarvalue),
        )
        .ok()
    }
    pub unsafe fn CountProperties(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetPropertyInfo(
        &self,
        iproperty: u32,
        cproperties: u32,
        ppropbag: *mut PROPBAG2,
        pcproperties: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(iproperty),
            ::std::mem::transmute(cproperties),
            ::std::mem::transmute(ppropbag),
            ::std::mem::transmute(pcproperties),
        )
        .ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_OleAutomation"))]
    pub unsafe fn LoadObject<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
        Param3: ::windows::runtime::IntoParam<'a, super::OleAutomation::IErrorLog>,
    >(
        &self,
        pstrname: Param0,
        dwhint: u32,
        punkobject: Param2,
        perrlog: Param3,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            pstrname.into_param().abi(),
            ::std::mem::transmute(dwhint),
            punkobject.into_param().abi(),
            perrlog.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IPropertyBag2 {
    type Vtable = IPropertyBag2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        586504322,
        10251,
        4560,
        [168, 169, 0, 160, 201, 12, 32, 4],
    );
}
impl ::std::convert::From<IPropertyBag2> for ::windows::runtime::IUnknown {
    fn from(value: IPropertyBag2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPropertyBag2> for ::windows::runtime::IUnknown {
    fn from(value: &IPropertyBag2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPropertyBag2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPropertyBag2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPropertyBag2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        cproperties: u32,
        ppropbag: *const PROPBAG2,
        perrlog: ::windows::runtime::RawPtr,
        pvarvalue: *mut ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
        phrerror: *mut ::windows::runtime::HRESULT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        cproperties: u32,
        ppropbag: *const PROPBAG2,
        pvarvalue: *const ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pcproperties: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iproperty: u32,
        cproperties: u32,
        ppropbag: *mut PROPBAG2,
        pcproperties: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_OleAutomation"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstrname: super::super::Foundation::PWSTR,
        dwhint: u32,
        punkobject: ::windows::runtime::RawPtr,
        perrlog: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_OleAutomation")))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPropertyNotifySink(::windows::runtime::IUnknown);
impl IPropertyNotifySink {
    pub unsafe fn OnChanged(&self, dispid: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispid),
        )
        .ok()
    }
    pub unsafe fn OnRequestEdit(&self, dispid: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispid),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IPropertyNotifySink {
    type Vtable = IPropertyNotifySink_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2616966146,
        61425,
        4122,
        [132, 237, 0, 170, 0, 52, 29, 7],
    );
}
impl ::std::convert::From<IPropertyNotifySink> for ::windows::runtime::IUnknown {
    fn from(value: IPropertyNotifySink) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPropertyNotifySink> for ::windows::runtime::IUnknown {
    fn from(value: &IPropertyNotifySink) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPropertyNotifySink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPropertyNotifySink {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPropertyNotifySink_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispid: i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispid: i32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPropertyPage(::windows::runtime::IUnknown);
impl IPropertyPage {
    pub unsafe fn SetPageSite<'a, Param0: ::windows::runtime::IntoParam<'a, IPropertyPageSite>>(
        &self,
        ppagesite: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ppagesite.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Activate<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        hwndparent: Param0,
        prect: *const super::super::Foundation::RECT,
        bmodal: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            hwndparent.into_param().abi(),
            ::std::mem::transmute(prect),
            bmodal.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Deactivate(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetPageInfo(&self) -> ::windows::runtime::Result<PROPPAGEINFO> {
        let mut result__: <PROPPAGEINFO as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<PROPPAGEINFO>(result__)
    }
    pub unsafe fn SetObjects(
        &self,
        cobjects: u32,
        ppunk: *const ::std::option::Option<::windows::runtime::IUnknown>,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(cobjects),
            ::std::mem::transmute(ppunk),
        )
        .ok()
    }
    pub unsafe fn Show(&self, ncmdshow: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ncmdshow),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Move(
        &self,
        prect: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(prect),
        )
        .ok()
    }
    pub unsafe fn IsPageDirty(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Apply(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Help<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pszhelpdir: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            pszhelpdir.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn TranslateAccelerator(
        &self,
        pmsg: *const super::super::UI::WindowsAndMessaging::MSG,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmsg),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IPropertyPage {
    type Vtable = IPropertyPage_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2979443341,
        47796,
        4122,
        [182, 156, 0, 170, 0, 52, 29, 7],
    );
}
impl ::std::convert::From<IPropertyPage> for ::windows::runtime::IUnknown {
    fn from(value: IPropertyPage) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPropertyPage> for ::windows::runtime::IUnknown {
    fn from(value: &IPropertyPage) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPropertyPage {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPropertyPage {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPropertyPage_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppagesite: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hwndparent: super::super::Foundation::HWND,
        prect: *const super::super::Foundation::RECT,
        bmodal: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppageinfo: *mut PROPPAGEINFO,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        cobjects: u32,
        ppunk: *const ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ncmdshow: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        prect: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pszhelpdir: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmsg: *const super::super::UI::WindowsAndMessaging::MSG,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPropertyPage2(::windows::runtime::IUnknown);
impl IPropertyPage2 {
    pub unsafe fn SetPageSite<'a, Param0: ::windows::runtime::IntoParam<'a, IPropertyPageSite>>(
        &self,
        ppagesite: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ppagesite.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Activate<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        hwndparent: Param0,
        prect: *const super::super::Foundation::RECT,
        bmodal: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            hwndparent.into_param().abi(),
            ::std::mem::transmute(prect),
            bmodal.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Deactivate(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetPageInfo(&self) -> ::windows::runtime::Result<PROPPAGEINFO> {
        let mut result__: <PROPPAGEINFO as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<PROPPAGEINFO>(result__)
    }
    pub unsafe fn SetObjects(
        &self,
        cobjects: u32,
        ppunk: *const ::std::option::Option<::windows::runtime::IUnknown>,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(cobjects),
            ::std::mem::transmute(ppunk),
        )
        .ok()
    }
    pub unsafe fn Show(&self, ncmdshow: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ncmdshow),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Move(
        &self,
        prect: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(prect),
        )
        .ok()
    }
    pub unsafe fn IsPageDirty(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Apply(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Help<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pszhelpdir: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            pszhelpdir.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn TranslateAccelerator(
        &self,
        pmsg: *const super::super::UI::WindowsAndMessaging::MSG,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmsg),
        )
        .ok()
    }
    pub unsafe fn EditProperty(&self, dispid: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispid),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IPropertyPage2 {
    type Vtable = IPropertyPage2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        31737445,
        9388,
        4123,
        [132, 237, 8, 0, 43, 46, 199, 19],
    );
}
impl ::std::convert::From<IPropertyPage2> for ::windows::runtime::IUnknown {
    fn from(value: IPropertyPage2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPropertyPage2> for ::windows::runtime::IUnknown {
    fn from(value: &IPropertyPage2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPropertyPage2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPropertyPage2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IPropertyPage2> for IPropertyPage {
    fn from(value: IPropertyPage2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPropertyPage2> for IPropertyPage {
    fn from(value: &IPropertyPage2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IPropertyPage> for IPropertyPage2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IPropertyPage> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IPropertyPage>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IPropertyPage> for &IPropertyPage2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IPropertyPage> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IPropertyPage>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPropertyPage2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppagesite: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hwndparent: super::super::Foundation::HWND,
        prect: *const super::super::Foundation::RECT,
        bmodal: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppageinfo: *mut PROPPAGEINFO,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        cobjects: u32,
        ppunk: *const ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ncmdshow: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        prect: *const super::super::Foundation::RECT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pszhelpdir: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmsg: *const super::super::UI::WindowsAndMessaging::MSG,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispid: i32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IPropertyPageSite(::windows::runtime::IUnknown);
impl IPropertyPageSite {
    pub unsafe fn OnStatusChange(&self, dwflags: PROPPAGESTATUS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    pub unsafe fn GetLocaleID(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn GetPageContainer(
        &self,
    ) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn TranslateAccelerator(
        &self,
        pmsg: *const super::super::UI::WindowsAndMessaging::MSG,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmsg),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IPropertyPageSite {
    type Vtable = IPropertyPageSite_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2979443340,
        47796,
        4122,
        [182, 156, 0, 170, 0, 52, 29, 7],
    );
}
impl ::std::convert::From<IPropertyPageSite> for ::windows::runtime::IUnknown {
    fn from(value: IPropertyPageSite) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IPropertyPageSite> for ::windows::runtime::IUnknown {
    fn from(value: &IPropertyPageSite) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IPropertyPageSite {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IPropertyPageSite {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPropertyPageSite_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwflags: PROPPAGESTATUS,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plocaleid: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppunk: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmsg: *const super::super::UI::WindowsAndMessaging::MSG,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IProtectFocus(::windows::runtime::IUnknown);
impl IProtectFocus {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn AllowFocusChange(
        &self,
    ) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BOOL>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IProtectFocus {
    type Vtable = IProtectFocus_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3625947299,
        33110,
        17655,
        [173, 40, 90, 187, 135, 0, 50, 116],
    );
}
impl ::std::convert::From<IProtectFocus> for ::windows::runtime::IUnknown {
    fn from(value: IProtectFocus) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IProtectFocus> for ::windows::runtime::IUnknown {
    fn from(value: &IProtectFocus) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IProtectFocus {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IProtectFocus {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IProtectFocus_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pfallow: *mut super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IProtectedModeMenuServices(::windows::runtime::IUnknown);
impl IProtectedModeMenuServices {
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub unsafe fn CreateMenu(
        &self,
    ) -> ::windows::runtime::Result<super::super::UI::WindowsAndMessaging::HMENU> {
        let mut result__ : < super::super::UI::WindowsAndMessaging:: HMENU as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::UI::WindowsAndMessaging::HMENU>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn LoadMenu<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pszmodulename: Param0,
        pszmenuname: Param1,
    ) -> ::windows::runtime::Result<super::super::UI::WindowsAndMessaging::HMENU> {
        let mut result__ : < super::super::UI::WindowsAndMessaging:: HMENU as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            pszmodulename.into_param().abi(),
            pszmenuname.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::super::UI::WindowsAndMessaging::HMENU>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn LoadMenuID<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pszmodulename: Param0,
        wresourceid: u16,
    ) -> ::windows::runtime::Result<super::super::UI::WindowsAndMessaging::HMENU> {
        let mut result__ : < super::super::UI::WindowsAndMessaging:: HMENU as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            pszmodulename.into_param().abi(),
            ::std::mem::transmute(wresourceid),
            &mut result__,
        )
        .from_abi::<super::super::UI::WindowsAndMessaging::HMENU>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IProtectedModeMenuServices {
    type Vtable = IProtectedModeMenuServices_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        1942029806,
        40447,
        18951,
        [184, 60, 126, 255, 41, 12, 38, 110],
    );
}
impl ::std::convert::From<IProtectedModeMenuServices> for ::windows::runtime::IUnknown {
    fn from(value: IProtectedModeMenuServices) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IProtectedModeMenuServices> for ::windows::runtime::IUnknown {
    fn from(value: &IProtectedModeMenuServices) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IProtectedModeMenuServices
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IProtectedModeMenuServices
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IProtectedModeMenuServices_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phmenu: *mut super::super::UI::WindowsAndMessaging::HMENU,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_UI_WindowsAndMessaging"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pszmodulename: super::super::Foundation::PWSTR,
        pszmenuname: super::super::Foundation::PWSTR,
        phmenu: *mut super::super::UI::WindowsAndMessaging::HMENU,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pszmodulename: super::super::Foundation::PWSTR,
        wresourceid: u16,
        phmenu: *mut super::super::UI::WindowsAndMessaging::HMENU,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IProvideClassInfo(::windows::runtime::IUnknown);
impl IProvideClassInfo {
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub unsafe fn GetClassInfo(
        &self,
    ) -> ::windows::runtime::Result<super::OleAutomation::ITypeInfo> {
        let mut result__: <super::OleAutomation::ITypeInfo as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::OleAutomation::ITypeInfo>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IProvideClassInfo {
    type Vtable = IProvideClassInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2979443331,
        47796,
        4122,
        [182, 156, 0, 170, 0, 52, 29, 7],
    );
}
impl ::std::convert::From<IProvideClassInfo> for ::windows::runtime::IUnknown {
    fn from(value: IProvideClassInfo) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IProvideClassInfo> for ::windows::runtime::IUnknown {
    fn from(value: &IProvideClassInfo) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IProvideClassInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IProvideClassInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IProvideClassInfo_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppti: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_OleAutomation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IProvideClassInfo2(::windows::runtime::IUnknown);
impl IProvideClassInfo2 {
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub unsafe fn GetClassInfo(
        &self,
    ) -> ::windows::runtime::Result<super::OleAutomation::ITypeInfo> {
        let mut result__: <super::OleAutomation::ITypeInfo as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::OleAutomation::ITypeInfo>(result__)
    }
    pub unsafe fn GetGUID(
        &self,
        dwguidkind: u32,
    ) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwguidkind),
            &mut result__,
        )
        .from_abi::<::windows::runtime::GUID>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IProvideClassInfo2 {
    type Vtable = IProvideClassInfo2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2797353664,
        56234,
        4558,
        [157, 227, 0, 170, 0, 75, 184, 81],
    );
}
impl ::std::convert::From<IProvideClassInfo2> for ::windows::runtime::IUnknown {
    fn from(value: IProvideClassInfo2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IProvideClassInfo2> for ::windows::runtime::IUnknown {
    fn from(value: &IProvideClassInfo2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IProvideClassInfo2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IProvideClassInfo2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IProvideClassInfo2> for IProvideClassInfo {
    fn from(value: IProvideClassInfo2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IProvideClassInfo2> for IProvideClassInfo {
    fn from(value: &IProvideClassInfo2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IProvideClassInfo> for IProvideClassInfo2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IProvideClassInfo> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IProvideClassInfo>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IProvideClassInfo> for &IProvideClassInfo2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IProvideClassInfo> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IProvideClassInfo>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IProvideClassInfo2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppti: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_OleAutomation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwguidkind: u32,
        pguid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IProvideMultipleClassInfo(::windows::runtime::IUnknown);
impl IProvideMultipleClassInfo {
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub unsafe fn GetClassInfo(
        &self,
    ) -> ::windows::runtime::Result<super::OleAutomation::ITypeInfo> {
        let mut result__: <super::OleAutomation::ITypeInfo as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::OleAutomation::ITypeInfo>(result__)
    }
    pub unsafe fn GetGUID(
        &self,
        dwguidkind: u32,
    ) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwguidkind),
            &mut result__,
        )
        .from_abi::<::windows::runtime::GUID>(result__)
    }
    pub unsafe fn GetMultiTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub unsafe fn GetInfoOfIndex(
        &self,
        iti: u32,
        dwflags: MULTICLASSINFO_FLAGS,
        ppticoclass: *mut ::std::option::Option<super::OleAutomation::ITypeInfo>,
        pdwtiflags: *mut u32,
        pcdispidreserved: *mut u32,
        piidprimary: *mut ::windows::runtime::GUID,
        piidsource: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(iti),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(ppticoclass),
            ::std::mem::transmute(pdwtiflags),
            ::std::mem::transmute(pcdispidreserved),
            ::std::mem::transmute(piidprimary),
            ::std::mem::transmute(piidsource),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IProvideMultipleClassInfo {
    type Vtable = IProvideMultipleClassInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2813045185,
        35203,
        4559,
        [143, 32, 0, 128, 95, 44, 208, 100],
    );
}
impl ::std::convert::From<IProvideMultipleClassInfo> for ::windows::runtime::IUnknown {
    fn from(value: IProvideMultipleClassInfo) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IProvideMultipleClassInfo> for ::windows::runtime::IUnknown {
    fn from(value: &IProvideMultipleClassInfo) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IProvideMultipleClassInfo
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IProvideMultipleClassInfo
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IProvideMultipleClassInfo> for IProvideClassInfo2 {
    fn from(value: IProvideMultipleClassInfo) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IProvideMultipleClassInfo> for IProvideClassInfo2 {
    fn from(value: &IProvideMultipleClassInfo) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IProvideClassInfo2> for IProvideMultipleClassInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, IProvideClassInfo2> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IProvideClassInfo2>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IProvideClassInfo2> for &IProvideMultipleClassInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, IProvideClassInfo2> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IProvideClassInfo2>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<IProvideMultipleClassInfo> for IProvideClassInfo {
    fn from(value: IProvideMultipleClassInfo) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IProvideMultipleClassInfo> for IProvideClassInfo {
    fn from(value: &IProvideMultipleClassInfo) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IProvideClassInfo> for IProvideMultipleClassInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, IProvideClassInfo> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IProvideClassInfo>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IProvideClassInfo> for &IProvideMultipleClassInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, IProvideClassInfo> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IProvideClassInfo>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IProvideMultipleClassInfo_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppti: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_OleAutomation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwguidkind: u32,
        pguid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pcti: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iti: u32,
        dwflags: MULTICLASSINFO_FLAGS,
        ppticoclass: *mut ::windows::runtime::RawPtr,
        pdwtiflags: *mut u32,
        pcdispidreserved: *mut u32,
        piidprimary: *mut ::windows::runtime::GUID,
        piidsource: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_OleAutomation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IQuickActivate(::windows::runtime::IUnknown);
impl IQuickActivate {
    #[cfg(all(
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn QuickActivate(
        &self,
        pqacontainer: *const QACONTAINER,
        pqacontrol: *mut QACONTROL,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pqacontainer),
            ::std::mem::transmute(pqacontrol),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetContentExtent(
        &self,
        psizel: *const super::super::Foundation::SIZE,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(psizel),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetContentExtent(
        &self,
    ) -> ::windows::runtime::Result<super::super::Foundation::SIZE> {
        let mut result__: <super::super::Foundation::SIZE as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::SIZE>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IQuickActivate {
    type Vtable = IQuickActivate_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3478252816,
        25342,
        4559,
        [191, 134, 0, 160, 201, 3, 72, 54],
    );
}
impl ::std::convert::From<IQuickActivate> for ::windows::runtime::IUnknown {
    fn from(value: IQuickActivate) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IQuickActivate> for ::windows::runtime::IUnknown {
    fn from(value: &IQuickActivate) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IQuickActivate {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IQuickActivate {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IQuickActivate_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pqacontainer: *const ::std::mem::ManuallyDrop<QACONTAINER>,
        pqacontrol: *mut QACONTROL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        psizel: *const super::super::Foundation::SIZE,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        psizel: *mut super::super::Foundation::SIZE,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IROTData(::windows::runtime::IUnknown);
impl IROTData {
    pub unsafe fn GetComparisonData(
        &self,
        pbdata: *mut u8,
        cbmax: u32,
        pcbdata: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pbdata),
            ::std::mem::transmute(cbmax),
            ::std::mem::transmute(pcbdata),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IROTData {
    type Vtable = IROTData_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4070534080,
        20513,
        4558,
        [170, 21, 0, 0, 105, 1, 41, 63],
    );
}
impl ::std::convert::From<IROTData> for ::windows::runtime::IUnknown {
    fn from(value: IROTData) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IROTData> for ::windows::runtime::IUnknown {
    fn from(value: &IROTData) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IROTData {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IROTData {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IROTData_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbdata: *mut u8,
        cbmax: u32,
        pcbdata: *mut u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IReleaseMarshalBuffers(::windows::runtime::IUnknown);
impl IReleaseMarshalBuffers {
    pub unsafe fn ReleaseMarshalBuffer<
        'a,
        Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    >(
        &self,
        pmsg: *mut RPCOLEMESSAGE,
        dwflags: u32,
        pchnl: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmsg),
            ::std::mem::transmute(dwflags),
            pchnl.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IReleaseMarshalBuffers {
    type Vtable = IReleaseMarshalBuffers_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3943479784,
        31126,
        4562,
        [135, 46, 0, 0, 248, 8, 8, 89],
    );
}
impl ::std::convert::From<IReleaseMarshalBuffers> for ::windows::runtime::IUnknown {
    fn from(value: IReleaseMarshalBuffers) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IReleaseMarshalBuffers> for ::windows::runtime::IUnknown {
    fn from(value: &IReleaseMarshalBuffers) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IReleaseMarshalBuffers
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IReleaseMarshalBuffers
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IReleaseMarshalBuffers_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmsg: *mut RPCOLEMESSAGE,
        dwflags: u32,
        pchnl: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IRemoteComponentUtil(::windows::runtime::IUnknown);
impl IRemoteComponentUtil {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::OleAutomation::ITypeInfo> {
        let mut result__: <super::OleAutomation::ITypeInfo as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::OleAutomation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::OleAutomation::DISPPARAMS,
        pvarresult: *mut super::OleAutomation::VARIANT,
        pexcepinfo: *mut super::OleAutomation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn InstallRemoteComponent<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrserver: Param0,
        bstrpackageid: Param1,
        bstrclsid: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            bstrserver.into_param().abi(),
            bstrpackageid.into_param().abi(),
            bstrclsid.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn InstallRemoteComponentByName<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrserver: Param0,
        bstrpackagename: Param1,
        bstrprogid: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            bstrserver.into_param().abi(),
            bstrpackagename.into_param().abi(),
            bstrprogid.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IRemoteComponentUtil {
    type Vtable = IRemoteComponentUtil_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        1857169525,
        35353,
        4560,
        [129, 182, 0, 160, 201, 35, 28, 41],
    );
}
impl ::std::convert::From<IRemoteComponentUtil> for ::windows::runtime::IUnknown {
    fn from(value: IRemoteComponentUtil) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IRemoteComponentUtil> for ::windows::runtime::IUnknown {
    fn from(value: &IRemoteComponentUtil) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IRemoteComponentUtil {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IRemoteComponentUtil {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl ::std::convert::From<IRemoteComponentUtil> for super::OleAutomation::IDispatch {
    fn from(value: IRemoteComponentUtil) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl ::std::convert::From<&IRemoteComponentUtil> for super::OleAutomation::IDispatch {
    fn from(value: &IRemoteComponentUtil) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::OleAutomation::IDispatch>
    for IRemoteComponentUtil
{
    fn into_param(self) -> ::windows::runtime::Param<'a, super::OleAutomation::IDispatch> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<super::OleAutomation::IDispatch>::into(self),
        )
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::OleAutomation::IDispatch>
    for &IRemoteComponentUtil
{
    fn into_param(self) -> ::windows::runtime::Param<'a, super::OleAutomation::IDispatch> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<super::OleAutomation::IDispatch>::into(
                ::std::clone::Clone::clone(self),
            ),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRemoteComponentUtil_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_OleAutomation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::OleAutomation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::OleAutomation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrserver: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        bstrpackageid: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        bstrclsid: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrserver: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        bstrpackagename: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        bstrprogid: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IRoleAssociationUtil(::windows::runtime::IUnknown);
impl IRoleAssociationUtil {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::OleAutomation::ITypeInfo> {
        let mut result__: <super::OleAutomation::ITypeInfo as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::OleAutomation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::OleAutomation::DISPPARAMS,
        pvarresult: *mut super::OleAutomation::VARIANT,
        pexcepinfo: *mut super::OleAutomation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn AssociateRole<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrroleid: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            bstrroleid.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn AssociateRoleByName<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrrolename: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            bstrrolename.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IRoleAssociationUtil {
    type Vtable = IRoleAssociationUtil_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        1857169526,
        35353,
        4560,
        [129, 182, 0, 160, 201, 35, 28, 41],
    );
}
impl ::std::convert::From<IRoleAssociationUtil> for ::windows::runtime::IUnknown {
    fn from(value: IRoleAssociationUtil) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IRoleAssociationUtil> for ::windows::runtime::IUnknown {
    fn from(value: &IRoleAssociationUtil) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IRoleAssociationUtil {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IRoleAssociationUtil {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl ::std::convert::From<IRoleAssociationUtil> for super::OleAutomation::IDispatch {
    fn from(value: IRoleAssociationUtil) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl ::std::convert::From<&IRoleAssociationUtil> for super::OleAutomation::IDispatch {
    fn from(value: &IRoleAssociationUtil) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::OleAutomation::IDispatch>
    for IRoleAssociationUtil
{
    fn into_param(self) -> ::windows::runtime::Param<'a, super::OleAutomation::IDispatch> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<super::OleAutomation::IDispatch>::into(self),
        )
    }
}
#[cfg(feature = "Win32_System_OleAutomation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::OleAutomation::IDispatch>
    for &IRoleAssociationUtil
{
    fn into_param(self) -> ::windows::runtime::Param<'a, super::OleAutomation::IDispatch> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<super::OleAutomation::IDispatch>::into(
                ::std::clone::Clone::clone(self),
            ),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRoleAssociationUtil_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_OleAutomation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_OleAutomation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::OleAutomation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::OleAutomation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrroleid: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrrolename: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IRpcChannelBuffer(::windows::runtime::IUnknown);
impl IRpcChannelBuffer {
    pub unsafe fn GetBuffer(
        &self,
        pmessage: *mut RPCOLEMESSAGE,
        riid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmessage),
            ::std::mem::transmute(riid),
        )
        .ok()
    }
    pub unsafe fn SendReceive(
        &self,
        pmessage: *mut RPCOLEMESSAGE,
        pstatus: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmessage),
            ::std::mem::transmute(pstatus),
        )
        .ok()
    }
    pub unsafe fn FreeBuffer(
        &self,
        pmessage: *mut RPCOLEMESSAGE,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmessage),
        )
        .ok()
    }
    pub unsafe fn GetDestCtx(
        &self,
        pdwdestcontext: *mut u32,
        ppvdestcontext: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pdwdestcontext),
            ::std::mem::transmute(ppvdestcontext),
        )
        .ok()
    }
    pub unsafe fn IsConnected(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IRpcChannelBuffer {
    type Vtable = IRpcChannelBuffer_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3589630816,
        22843,
        4122,
        [181, 105, 8, 0, 43, 45, 191, 122],
    );
}
impl ::std::convert::From<IRpcChannelBuffer> for ::windows::runtime::IUnknown {
    fn from(value: IRpcChannelBuffer) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IRpcChannelBuffer> for ::windows::runtime::IUnknown {
    fn from(value: &IRpcChannelBuffer) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IRpcChannelBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IRpcChannelBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRpcChannelBuffer_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmessage: *mut RPCOLEMESSAGE,
        riid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmessage: *mut RPCOLEMESSAGE,
        pstatus: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmessage: *mut RPCOLEMESSAGE,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwdestcontext: *mut u32,
        ppvdestcontext: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IRpcChannelBuffer2(::windows::runtime::IUnknown);
impl IRpcChannelBuffer2 {
    pub unsafe fn GetBuffer(
        &self,
        pmessage: *mut RPCOLEMESSAGE,
        riid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmessage),
            ::std::mem::transmute(riid),
        )
        .ok()
    }
    pub unsafe fn SendReceive(
        &self,
        pmessage: *mut RPCOLEMESSAGE,
        pstatus: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmessage),
            ::std::mem::transmute(pstatus),
        )
        .ok()
    }
    pub unsafe fn FreeBuffer(
        &self,
        pmessage: *mut RPCOLEMESSAGE,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmessage),
        )
        .ok()
    }
    pub unsafe fn GetDestCtx(
        &self,
        pdwdestcontext: *mut u32,
        ppvdestcontext: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pdwdestcontext),
            ::std::mem::transmute(ppvdestcontext),
        )
        .ok()
    }
    pub unsafe fn IsConnected(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn GetProtocolVersion(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IRpcChannelBuffer2 {
    type Vtable = IRpcChannelBuffer2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        1498362320,
        32537,
        4560,
        [177, 148, 0, 160, 201, 13, 200, 191],
    );
}
impl ::std::convert::From<IRpcChannelBuffer2> for ::windows::runtime::IUnknown {
    fn from(value: IRpcChannelBuffer2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IRpcChannelBuffer2> for ::windows::runtime::IUnknown {
    fn from(value: &IRpcChannelBuffer2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IRpcChannelBuffer2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IRpcChannelBuffer2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IRpcChannelBuffer2> for IRpcChannelBuffer {
    fn from(value: IRpcChannelBuffer2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IRpcChannelBuffer2> for IRpcChannelBuffer {
    fn from(value: &IRpcChannelBuffer2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IRpcChannelBuffer> for IRpcChannelBuffer2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IRpcChannelBuffer> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IRpcChannelBuffer>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IRpcChannelBuffer> for &IRpcChannelBuffer2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IRpcChannelBuffer> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IRpcChannelBuffer>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRpcChannelBuffer2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmessage: *mut RPCOLEMESSAGE,
        riid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmessage: *mut RPCOLEMESSAGE,
        pstatus: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmessage: *mut RPCOLEMESSAGE,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwdestcontext: *mut u32,
        ppvdestcontext: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwversion: *mut u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IRpcChannelBuffer3(::windows::runtime::IUnknown);
impl IRpcChannelBuffer3 {
    pub unsafe fn GetBuffer(
        &self,
        pmessage: *mut RPCOLEMESSAGE,
        riid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmessage),
            ::std::mem::transmute(riid),
        )
        .ok()
    }
    pub unsafe fn SendReceive(
        &self,
        pmessage: *mut RPCOLEMESSAGE,
        pstatus: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmessage),
            ::std::mem::transmute(pstatus),
        )
        .ok()
    }
    pub unsafe fn FreeBuffer(
        &self,
        pmessage: *mut RPCOLEMESSAGE,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmessage),
        )
        .ok()
    }
    pub unsafe fn GetDestCtx(
        &self,
        pdwdestcontext: *mut u32,
        ppvdestcontext: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pdwdestcontext),
            ::std::mem::transmute(ppvdestcontext),
        )
        .ok()
    }
    pub unsafe fn IsConnected(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn GetProtocolVersion(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn Send(
        &self,
        pmsg: *mut RPCOLEMESSAGE,
        pulstatus: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmsg),
            ::std::mem::transmute(pulstatus),
        )
        .ok()
    }
    pub unsafe fn Receive(
        &self,
        pmsg: *mut RPCOLEMESSAGE,
        ulsize: u32,
        pulstatus: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmsg),
            ::std::mem::transmute(ulsize),
            ::std::mem::transmute(pulstatus),
        )
        .ok()
    }
    pub unsafe fn Cancel(&self, pmsg: *mut RPCOLEMESSAGE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmsg),
        )
        .ok()
    }
    pub unsafe fn GetCallContext(
        &self,
        pmsg: *const RPCOLEMESSAGE,
        riid: *const ::windows::runtime::GUID,
        pinterface: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmsg),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(pinterface),
        )
        .ok()
    }
    pub unsafe fn GetDestCtxEx(
        &self,
        pmsg: *const RPCOLEMESSAGE,
        pdwdestcontext: *mut u32,
        ppvdestcontext: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmsg),
            ::std::mem::transmute(pdwdestcontext),
            ::std::mem::transmute(ppvdestcontext),
        )
        .ok()
    }
    pub unsafe fn GetState(&self, pmsg: *const RPCOLEMESSAGE) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmsg),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn RegisterAsync<'a, Param1: ::windows::runtime::IntoParam<'a, IAsyncManager>>(
        &self,
        pmsg: *mut RPCOLEMESSAGE,
        pasyncmgr: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmsg),
            pasyncmgr.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IRpcChannelBuffer3 {
    type Vtable = IRpcChannelBuffer3_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        632378880,
        277,
        4560,
        [191, 13, 0, 170, 0, 184, 223, 210],
    );
}
impl ::std::convert::From<IRpcChannelBuffer3> for ::windows::runtime::IUnknown {
    fn from(value: IRpcChannelBuffer3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IRpcChannelBuffer3> for ::windows::runtime::IUnknown {
    fn from(value: &IRpcChannelBuffer3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IRpcChannelBuffer3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IRpcChannelBuffer3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IRpcChannelBuffer3> for IRpcChannelBuffer2 {
    fn from(value: IRpcChannelBuffer3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IRpcChannelBuffer3> for IRpcChannelBuffer2 {
    fn from(value: &IRpcChannelBuffer3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IRpcChannelBuffer2> for IRpcChannelBuffer3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IRpcChannelBuffer2> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IRpcChannelBuffer2>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IRpcChannelBuffer2> for &IRpcChannelBuffer3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IRpcChannelBuffer2> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IRpcChannelBuffer2>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<IRpcChannelBuffer3> for IRpcChannelBuffer {
    fn from(value: IRpcChannelBuffer3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IRpcChannelBuffer3> for IRpcChannelBuffer {
    fn from(value: &IRpcChannelBuffer3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IRpcChannelBuffer> for IRpcChannelBuffer3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IRpcChannelBuffer> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IRpcChannelBuffer>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IRpcChannelBuffer> for &IRpcChannelBuffer3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IRpcChannelBuffer> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IRpcChannelBuffer>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRpcChannelBuffer3_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmessage: *mut RPCOLEMESSAGE,
        riid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmessage: *mut RPCOLEMESSAGE,
        pstatus: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmessage: *mut RPCOLEMESSAGE,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwdestcontext: *mut u32,
        ppvdestcontext: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwversion: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmsg: *mut RPCOLEMESSAGE,
        pulstatus: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmsg: *mut RPCOLEMESSAGE,
        ulsize: u32,
        pulstatus: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmsg: *mut RPCOLEMESSAGE,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmsg: *const RPCOLEMESSAGE,
        riid: *const ::windows::runtime::GUID,
        pinterface: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmsg: *const RPCOLEMESSAGE,
        pdwdestcontext: *mut u32,
        ppvdestcontext: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmsg: *const RPCOLEMESSAGE,
        pstate: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmsg: *mut RPCOLEMESSAGE,
        pasyncmgr: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IRpcHelper(::windows::runtime::IUnknown);
impl IRpcHelper {
    pub unsafe fn GetDCOMProtocolVersion(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn GetIIDFromOBJREF(
        &self,
        pobjref: *const ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<*mut ::windows::runtime::GUID> {
        let mut result__: <*mut ::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pobjref),
            &mut result__,
        )
        .from_abi::<*mut ::windows::runtime::GUID>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IRpcHelper {
    type Vtable = IRpcHelper_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(329, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IRpcHelper> for ::windows::runtime::IUnknown {
    fn from(value: IRpcHelper) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IRpcHelper> for ::windows::runtime::IUnknown {
    fn from(value: &IRpcHelper) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IRpcHelper {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IRpcHelper {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRpcHelper_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pcomversion: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pobjref: *const ::std::ffi::c_void,
        piid: *mut *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IRpcOptions(::windows::runtime::IUnknown);
impl IRpcOptions {
    pub unsafe fn Set<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    >(
        &self,
        pprx: Param0,
        dwproperty: RPCOPT_PROPERTIES,
        dwvalue: usize,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pprx.into_param().abi(),
            ::std::mem::transmute(dwproperty),
            ::std::mem::transmute(dwvalue),
        )
        .ok()
    }
    pub unsafe fn Query<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    >(
        &self,
        pprx: Param0,
        dwproperty: RPCOPT_PROPERTIES,
    ) -> ::windows::runtime::Result<usize> {
        let mut result__: <usize as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            pprx.into_param().abi(),
            ::std::mem::transmute(dwproperty),
            &mut result__,
        )
        .from_abi::<usize>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IRpcOptions {
    type Vtable = IRpcOptions_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(324, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IRpcOptions> for ::windows::runtime::IUnknown {
    fn from(value: IRpcOptions) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IRpcOptions> for ::windows::runtime::IUnknown {
    fn from(value: &IRpcOptions) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IRpcOptions {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IRpcOptions {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRpcOptions_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pprx: ::windows::runtime::RawPtr,
        dwproperty: RPCOPT_PROPERTIES,
        dwvalue: usize,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pprx: ::windows::runtime::RawPtr,
        dwproperty: RPCOPT_PROPERTIES,
        pdwvalue: *mut usize,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IRpcProxyBuffer(::windows::runtime::IUnknown);
impl IRpcProxyBuffer {
    pub unsafe fn Connect<'a, Param0: ::windows::runtime::IntoParam<'a, IRpcChannelBuffer>>(
        &self,
        prpcchannelbuffer: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            prpcchannelbuffer.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Disconnect(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
        ))
    }
}
unsafe impl ::windows::runtime::Interface for IRpcProxyBuffer {
    type Vtable = IRpcProxyBuffer_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3589630516,
        22843,
        4122,
        [181, 105, 8, 0, 43, 45, 191, 122],
    );
}
impl ::std::convert::From<IRpcProxyBuffer> for ::windows::runtime::IUnknown {
    fn from(value: IRpcProxyBuffer) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IRpcProxyBuffer> for ::windows::runtime::IUnknown {
    fn from(value: &IRpcProxyBuffer) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IRpcProxyBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IRpcProxyBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRpcProxyBuffer_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        prpcchannelbuffer: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IRpcStubBuffer(::windows::runtime::IUnknown);
impl IRpcStubBuffer {
    pub unsafe fn Connect<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    >(
        &self,
        punkserver: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            punkserver.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Disconnect(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn Invoke<'a, Param1: ::windows::runtime::IntoParam<'a, IRpcChannelBuffer>>(
        &self,
        _prpcmsg: *mut RPCOLEMESSAGE,
        _prpcchannelbuffer: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(_prpcmsg),
            _prpcchannelbuffer.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsIIDSupported(
        &self,
        riid: *const ::windows::runtime::GUID,
    ) -> ::std::option::Option<IRpcStubBuffer> {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
        ))
    }
    pub unsafe fn CountRefs(&self) -> u32 {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn DebugServerQueryInterface(
        &self,
        ppv: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ppv),
        )
        .ok()
    }
    pub unsafe fn DebugServerRelease(&self, pv: *const ::std::ffi::c_void) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pv),
        ))
    }
}
unsafe impl ::windows::runtime::Interface for IRpcStubBuffer {
    type Vtable = IRpcStubBuffer_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3589630716,
        22843,
        4122,
        [181, 105, 8, 0, 43, 45, 191, 122],
    );
}
impl ::std::convert::From<IRpcStubBuffer> for ::windows::runtime::IUnknown {
    fn from(value: IRpcStubBuffer) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IRpcStubBuffer> for ::windows::runtime::IUnknown {
    fn from(value: &IRpcStubBuffer) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IRpcStubBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IRpcStubBuffer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRpcStubBuffer_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        punkserver: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        _prpcmsg: *mut RPCOLEMESSAGE,
        _prpcchannelbuffer: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::RawPtr,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppv: *mut *mut ::std::ffi::c_void,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pv: *const ::std::ffi::c_void),
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IRpcSyntaxNegotiate(::windows::runtime::IUnknown);
impl IRpcSyntaxNegotiate {
    pub unsafe fn NegotiateSyntax(
        &self,
        pmsg: *mut RPCOLEMESSAGE,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pmsg),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IRpcSyntaxNegotiate {
    type Vtable = IRpcSyntaxNegotiate_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        1486914841,
        9416,
        18741,
        [180, 130, 63, 216, 35, 51, 58, 79],
    );
}
impl ::std::convert::From<IRpcSyntaxNegotiate> for ::windows::runtime::IUnknown {
    fn from(value: IRpcSyntaxNegotiate) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IRpcSyntaxNegotiate> for ::windows::runtime::IUnknown {
    fn from(value: &IRpcSyntaxNegotiate) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IRpcSyntaxNegotiate {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IRpcSyntaxNegotiate {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRpcSyntaxNegotiate_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmsg: *mut RPCOLEMESSAGE,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IRunnableObject(::windows::runtime::IUnknown);
impl IRunnableObject {
    pub unsafe fn GetRunningClass(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::GUID>(result__)
    }
    pub unsafe fn Run<'a, Param0: ::windows::runtime::IntoParam<'a, IBindCtx>>(
        &self,
        pbc: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            pbc.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsRunning(&self) -> super::super::Foundation::BOOL {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
        ))
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn LockRunning<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        flock: Param0,
        flastunlockcloses: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            flock.into_param().abi(),
            flastunlockcloses.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetContainedObject<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fcontained: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            fcontained.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IRunnableObject {
    type Vtable = IRunnableObject_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(294, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IRunnableObject> for ::windows::runtime::IUnknown {
    fn from(value: IRunnableObject) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IRunnableObject> for ::windows::runtime::IUnknown {
    fn from(value: &IRunnableObject) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IRunnableObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IRunnableObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRunnableObject_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        lpclsid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbc: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
    ) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        flock: super::super::Foundation::BOOL,
        flastunlockcloses: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fcontained: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IRunningObjectTable(::windows::runtime::IUnknown);
impl IRunningObjectTable {
    pub unsafe fn Register<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
        Param2: ::windows::runtime::IntoParam<'a, IMoniker>,
    >(
        &self,
        grfflags: u32,
        punkobject: Param1,
        pmkobjectname: Param2,
    ) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(grfflags),
            punkobject.into_param().abi(),
            pmkobjectname.into_param().abi(),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn Revoke(&self, dwregister: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwregister),
        )
        .ok()
    }
    pub unsafe fn IsRunning<'a, Param0: ::windows::runtime::IntoParam<'a, IMoniker>>(
        &self,
        pmkobjectname: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            pmkobjectname.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetObject<'a, Param0: ::windows::runtime::IntoParam<'a, IMoniker>>(
        &self,
        pmkobjectname: Param0,
    ) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            pmkobjectname.into_param().abi(),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn NoteChangeTime(
        &self,
        dwregister: u32,
        pfiletime: *const super::super::Foundation::FILETIME,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwregister),
            ::std::mem::transmute(pfiletime),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetTimeOfLastChange<'a, Param0: ::windows::runtime::IntoParam<'a, IMoniker>>(
        &self,
        pmkobjectname: Param0,
    ) -> ::windows::runtime::Result<super::super::Foundation::FILETIME> {
        let mut result__: <super::super::Foundation::FILETIME as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            pmkobjectname.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::FILETIME>(result__)
    }
    pub unsafe fn EnumRunning(&self) -> ::windows::runtime::Result<IEnumMoniker> {
        let mut result__: <IEnumMoniker as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IEnumMoniker>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IRunningObjectTable {
    type Vtable = IRunningObjectTable_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(16, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IRunningObjectTable> for ::windows::runtime::IUnknown {
    fn from(value: IRunningObjectTable) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IRunningObjectTable> for ::windows::runtime::IUnknown {
    fn from(value: &IRunningObjectTable) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IRunningObjectTable {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IRunningObjectTable {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRunningObjectTable_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        grfflags: u32,
        punkobject: ::windows::runtime::RawPtr,
        pmkobjectname: ::windows::runtime::RawPtr,
        pdwregister: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwregister: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmkobjectname: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmkobjectname: ::windows::runtime::RawPtr,
        ppunkobject: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwregister: u32,
        pfiletime: *const super::super::Foundation::FILETIME,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pmkobjectname: ::windows::runtime::RawPtr,
        pfiletime: *mut super::super::Foundation::FILETIME,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppenummoniker: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IServerSecurity(::windows::runtime::IUnknown);
impl IServerSecurity {
    pub unsafe fn QueryBlanket(
        &self,
        pauthnsvc: *mut u32,
        pauthzsvc: *mut u32,
        pserverprincname: *mut *mut u16,
        pauthnlevel: *mut u32,
        pimplevel: *mut u32,
        pprivs: *mut *mut ::std::ffi::c_void,
        pcapabilities: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pauthnsvc),
            ::std::mem::transmute(pauthzsvc),
            ::std::mem::transmute(pserverprincname),
            ::std::mem::transmute(pauthnlevel),
            ::std::mem::transmute(pimplevel),
            ::std::mem::transmute(pprivs),
            ::std::mem::transmute(pcapabilities),
        )
        .ok()
    }
    pub unsafe fn ImpersonateClient(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn RevertToSelf(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsImpersonating(&self) -> super::super::Foundation::BOOL {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
        ))
    }
}
unsafe impl ::windows::runtime::Interface for IServerSecurity {
    type Vtable = IServerSecurity_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(318, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IServerSecurity> for ::windows::runtime::IUnknown {
    fn from(value: IServerSecurity) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IServerSecurity> for ::windows::runtime::IUnknown {
    fn from(value: &IServerSecurity) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IServerSecurity {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IServerSecurity {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IServerSecurity_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pauthnsvc: *mut u32,
        pauthzsvc: *mut u32,
        pserverprincname: *mut *mut u16,
        pauthnlevel: *mut u32,
        pimplevel: *mut u32,
        pprivs: *mut *mut ::std::ffi::c_void,
        pcapabilities: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
    ) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISimpleFrameSite(::windows::runtime::IUnknown);
impl ISimpleFrameSite {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PreMessageFilter<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::WPARAM>,
        Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::LPARAM>,
    >(
        &self,
        hwnd: Param0,
        msg: u32,
        wp: Param2,
        lp: Param3,
        plresult: *mut super::super::Foundation::LRESULT,
        pdwcookie: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            hwnd.into_param().abi(),
            ::std::mem::transmute(msg),
            wp.into_param().abi(),
            lp.into_param().abi(),
            ::std::mem::transmute(plresult),
            ::std::mem::transmute(pdwcookie),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PostMessageFilter<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::WPARAM>,
        Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::LPARAM>,
    >(
        &self,
        hwnd: Param0,
        msg: u32,
        wp: Param2,
        lp: Param3,
        plresult: *mut super::super::Foundation::LRESULT,
        dwcookie: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            hwnd.into_param().abi(),
            ::std::mem::transmute(msg),
            wp.into_param().abi(),
            lp.into_param().abi(),
            ::std::mem::transmute(plresult),
            ::std::mem::transmute(dwcookie),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ISimpleFrameSite {
    type Vtable = ISimpleFrameSite_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        1948978689,
        5350,
        4123,
        [145, 78, 0, 170, 0, 48, 12, 171],
    );
}
impl ::std::convert::From<ISimpleFrameSite> for ::windows::runtime::IUnknown {
    fn from(value: ISimpleFrameSite) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISimpleFrameSite> for ::windows::runtime::IUnknown {
    fn from(value: &ISimpleFrameSite) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISimpleFrameSite {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISimpleFrameSite {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISimpleFrameSite_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hwnd: super::super::Foundation::HWND,
        msg: u32,
        wp: super::super::Foundation::WPARAM,
        lp: super::super::Foundation::LPARAM,
        plresult: *mut super::super::Foundation::LRESULT,
        pdwcookie: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hwnd: super::super::Foundation::HWND,
        msg: u32,
        wp: super::super::Foundation::WPARAM,
        lp: super::super::Foundation::LPARAM,
        plresult: *mut super::super::Foundation::LRESULT,
        dwcookie: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISoftDistExt(::windows::runtime::IUnknown);
impl ISoftDistExt {
    #[cfg(all(
        feature = "Win32_Data_Xml_MsXml",
        feature = "Win32_Foundation",
        feature = "Win32_UI_Shell"
    ))]
    pub unsafe fn ProcessSoftDist<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Data::Xml::MsXml::IXMLElement>,
    >(
        &self,
        szcdfurl: Param0,
        psoftdistelement: Param1,
        lpsdi: *mut super::super::UI::Shell::SOFTDISTINFO,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            szcdfurl.into_param().abi(),
            psoftdistelement.into_param().abi(),
            ::std::mem::transmute(lpsdi),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetFirstCodeBase(
        &self,
        szcodebase: *const super::super::Foundation::PWSTR,
        dwmaxsize: *const u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(szcodebase),
            ::std::mem::transmute(dwmaxsize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetNextCodeBase(
        &self,
        szcodebase: *const super::super::Foundation::PWSTR,
        dwmaxsize: *const u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(szcodebase),
            ::std::mem::transmute(dwmaxsize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn AsyncInstallDistributionUnit<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, IBindCtx>,
    >(
        &self,
        pbc: Param0,
        pvreserved: *const ::std::ffi::c_void,
        flags: u32,
        lpcbh: *const CODEBASEHOLD,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            pbc.into_param().abi(),
            ::std::mem::transmute(pvreserved),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(lpcbh),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ISoftDistExt {
    type Vtable = ISoftDistExt_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2975567297,
        51169,
        4560,
        [134, 128, 0, 170, 0, 189, 203, 113],
    );
}
impl ::std::convert::From<ISoftDistExt> for ::windows::runtime::IUnknown {
    fn from(value: ISoftDistExt) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISoftDistExt> for ::windows::runtime::IUnknown {
    fn from(value: &ISoftDistExt) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISoftDistExt {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISoftDistExt {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISoftDistExt_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(
        feature = "Win32_Data_Xml_MsXml",
        feature = "Win32_Foundation",
        feature = "Win32_UI_Shell"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        szcdfurl: super::super::Foundation::PWSTR,
        psoftdistelement: ::windows::runtime::RawPtr,
        lpsdi: *mut super::super::UI::Shell::SOFTDISTINFO,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Data_Xml_MsXml",
        feature = "Win32_Foundation",
        feature = "Win32_UI_Shell"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        szcodebase: *const super::super::Foundation::PWSTR,
        dwmaxsize: *const u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        szcodebase: *const super::super::Foundation::PWSTR,
        dwmaxsize: *const u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbc: ::windows::runtime::RawPtr,
        pvreserved: *const ::std::ffi::c_void,
        flags: u32,
        lpcbh: *const CODEBASEHOLD,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISpecifyPropertyPages(::windows::runtime::IUnknown);
impl ISpecifyPropertyPages {
    pub unsafe fn GetPages(&self) -> ::windows::runtime::Result<CAUUID> {
        let mut result__: <CAUUID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<CAUUID>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISpecifyPropertyPages {
    type Vtable = ISpecifyPropertyPages_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2979443339,
        47796,
        4122,
        [182, 156, 0, 170, 0, 52, 29, 7],
    );
}
impl ::std::convert::From<ISpecifyPropertyPages> for ::windows::runtime::IUnknown {
    fn from(value: ISpecifyPropertyPages) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISpecifyPropertyPages> for ::windows::runtime::IUnknown {
    fn from(value: &ISpecifyPropertyPages) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISpecifyPropertyPages {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &ISpecifyPropertyPages
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpecifyPropertyPages_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppages: *mut CAUUID,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IStdMarshalInfo(::windows::runtime::IUnknown);
impl IStdMarshalInfo {
    pub unsafe fn GetClassForHandler(
        &self,
        dwdestcontext: u32,
        pvdestcontext: *mut ::std::ffi::c_void,
        pclsid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwdestcontext),
            ::std::mem::transmute(pvdestcontext),
            ::std::mem::transmute(pclsid),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IStdMarshalInfo {
    type Vtable = IStdMarshalInfo_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(24, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IStdMarshalInfo> for ::windows::runtime::IUnknown {
    fn from(value: IStdMarshalInfo) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IStdMarshalInfo> for ::windows::runtime::IUnknown {
    fn from(value: &IStdMarshalInfo) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IStdMarshalInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IStdMarshalInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IStdMarshalInfo_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwdestcontext: u32,
        pvdestcontext: *mut ::std::ffi::c_void,
        pclsid: *mut ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISurrogate(::windows::runtime::IUnknown);
impl ISurrogate {
    pub unsafe fn LoadDllServer(
        &self,
        clsid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(clsid),
        )
        .ok()
    }
    pub unsafe fn FreeSurrogate(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for ISurrogate {
    type Vtable = ISurrogate_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(34, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<ISurrogate> for ::windows::runtime::IUnknown {
    fn from(value: ISurrogate) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISurrogate> for ::windows::runtime::IUnknown {
    fn from(value: &ISurrogate) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISurrogate {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISurrogate {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISurrogate_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        clsid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISurrogateService(::windows::runtime::IUnknown);
impl ISurrogateService {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Init<'a, Param1: ::windows::runtime::IntoParam<'a, IProcessLock>>(
        &self,
        rguidprocessid: *const ::windows::runtime::GUID,
        pprocesslock: Param1,
    ) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(rguidprocessid),
            pprocesslock.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BOOL>(result__)
    }
    pub unsafe fn ApplicationLaunch(
        &self,
        rguidapplid: *const ::windows::runtime::GUID,
        apptype: ApplicationType,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(rguidapplid),
            ::std::mem::transmute(apptype),
        )
        .ok()
    }
    pub unsafe fn ApplicationFree(
        &self,
        rguidapplid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(rguidapplid),
        )
        .ok()
    }
    pub unsafe fn CatalogRefresh(&self, ulreserved: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ulreserved),
        )
        .ok()
    }
    pub unsafe fn ProcessShutdown(
        &self,
        shutdowntype: ShutdownType,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(shutdowntype),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ISurrogateService {
    type Vtable = ISurrogateService_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(468, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<ISurrogateService> for ::windows::runtime::IUnknown {
    fn from(value: ISurrogateService) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISurrogateService> for ::windows::runtime::IUnknown {
    fn from(value: &ISurrogateService) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISurrogateService {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISurrogateService {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISurrogateService_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        rguidprocessid: *const ::windows::runtime::GUID,
        pprocesslock: ::windows::runtime::RawPtr,
        pfapplicationaware: *mut super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        rguidapplid: *const ::windows::runtime::GUID,
        apptype: ApplicationType,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        rguidapplid: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ulreserved: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        shutdowntype: ShutdownType,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISynchronize(::windows::runtime::IUnknown);
impl ISynchronize {
    pub unsafe fn Wait(&self, dwflags: u32, dwmilliseconds: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(dwmilliseconds),
        )
        .ok()
    }
    pub unsafe fn Signal(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for ISynchronize {
    type Vtable = ISynchronize_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(48, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<ISynchronize> for ::windows::runtime::IUnknown {
    fn from(value: ISynchronize) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISynchronize> for ::windows::runtime::IUnknown {
    fn from(value: &ISynchronize) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISynchronize {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISynchronize {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISynchronize_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwflags: u32,
        dwmilliseconds: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISynchronizeContainer(::windows::runtime::IUnknown);
impl ISynchronizeContainer {
    pub unsafe fn AddSynchronize<'a, Param0: ::windows::runtime::IntoParam<'a, ISynchronize>>(
        &self,
        psync: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            psync.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn WaitMultiple(
        &self,
        dwflags: u32,
        dwtimeout: u32,
    ) -> ::windows::runtime::Result<ISynchronize> {
        let mut result__: <ISynchronize as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(dwtimeout),
            &mut result__,
        )
        .from_abi::<ISynchronize>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISynchronizeContainer {
    type Vtable = ISynchronizeContainer_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(51, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<ISynchronizeContainer> for ::windows::runtime::IUnknown {
    fn from(value: ISynchronizeContainer) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISynchronizeContainer> for ::windows::runtime::IUnknown {
    fn from(value: &ISynchronizeContainer) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISynchronizeContainer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &ISynchronizeContainer
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISynchronizeContainer_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        psync: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwflags: u32,
        dwtimeout: u32,
        ppsync: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISynchronizeEvent(::windows::runtime::IUnknown);
impl ISynchronizeEvent {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetHandle(&self) -> ::windows::runtime::Result<super::super::Foundation::HANDLE> {
        let mut result__: <super::super::Foundation::HANDLE as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::HANDLE>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetEventHandle(
        &self,
        ph: *const super::super::Foundation::HANDLE,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ph),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ISynchronizeEvent {
    type Vtable = ISynchronizeEvent_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(50, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<ISynchronizeEvent> for ::windows::runtime::IUnknown {
    fn from(value: ISynchronizeEvent) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISynchronizeEvent> for ::windows::runtime::IUnknown {
    fn from(value: &ISynchronizeEvent) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISynchronizeEvent {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISynchronizeEvent {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<ISynchronizeEvent> for ISynchronizeHandle {
    fn from(value: ISynchronizeEvent) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISynchronizeEvent> for ISynchronizeHandle {
    fn from(value: &ISynchronizeEvent) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ISynchronizeHandle> for ISynchronizeEvent {
    fn into_param(self) -> ::windows::runtime::Param<'a, ISynchronizeHandle> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<ISynchronizeHandle>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ISynchronizeHandle> for &ISynchronizeEvent {
    fn into_param(self) -> ::windows::runtime::Param<'a, ISynchronizeHandle> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<ISynchronizeHandle>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISynchronizeEvent_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ph: *mut super::super::Foundation::HANDLE,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ph: *const super::super::Foundation::HANDLE,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISynchronizeHandle(::windows::runtime::IUnknown);
impl ISynchronizeHandle {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetHandle(&self) -> ::windows::runtime::Result<super::super::Foundation::HANDLE> {
        let mut result__: <super::super::Foundation::HANDLE as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::HANDLE>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISynchronizeHandle {
    type Vtable = ISynchronizeHandle_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(49, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<ISynchronizeHandle> for ::windows::runtime::IUnknown {
    fn from(value: ISynchronizeHandle) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISynchronizeHandle> for ::windows::runtime::IUnknown {
    fn from(value: &ISynchronizeHandle) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISynchronizeHandle {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISynchronizeHandle {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISynchronizeHandle_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ph: *mut super::super::Foundation::HANDLE,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISynchronizeMutex(::windows::runtime::IUnknown);
impl ISynchronizeMutex {
    pub unsafe fn Wait(&self, dwflags: u32, dwmilliseconds: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(dwmilliseconds),
        )
        .ok()
    }
    pub unsafe fn Signal(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn ReleaseMutex(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for ISynchronizeMutex {
    type Vtable = ISynchronizeMutex_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(37, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<ISynchronizeMutex> for ::windows::runtime::IUnknown {
    fn from(value: ISynchronizeMutex) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISynchronizeMutex> for ::windows::runtime::IUnknown {
    fn from(value: &ISynchronizeMutex) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISynchronizeMutex {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISynchronizeMutex {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<ISynchronizeMutex> for ISynchronize {
    fn from(value: ISynchronizeMutex) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISynchronizeMutex> for ISynchronize {
    fn from(value: &ISynchronizeMutex) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ISynchronize> for ISynchronizeMutex {
    fn into_param(self) -> ::windows::runtime::Param<'a, ISynchronize> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<ISynchronize>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ISynchronize> for &ISynchronizeMutex {
    fn into_param(self) -> ::windows::runtime::Param<'a, ISynchronize> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<ISynchronize>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISynchronizeMutex_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwflags: u32,
        dwmilliseconds: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IThumbnailExtractor(::windows::runtime::IUnknown);
impl IThumbnailExtractor {
    #[cfg(all(
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub unsafe fn ExtractThumbnail<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStorage>,
    >(
        &self,
        pstg: Param0,
        ullength: u32,
        ulheight: u32,
        puloutputlength: *mut u32,
        puloutputheight: *mut u32,
        phoutputbitmap: *mut super::super::Graphics::Gdi::HBITMAP,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pstg.into_param().abi(),
            ::std::mem::transmute(ullength),
            ::std::mem::transmute(ulheight),
            ::std::mem::transmute(puloutputlength),
            ::std::mem::transmute(puloutputheight),
            ::std::mem::transmute(phoutputbitmap),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub unsafe fn OnFileUpdated<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStorage>,
    >(
        &self,
        pstg: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            pstg.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IThumbnailExtractor {
    type Vtable = IThumbnailExtractor_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2526922504,
        23670,
        4561,
        [141, 134, 0, 0, 248, 4, 176, 87],
    );
}
impl ::std::convert::From<IThumbnailExtractor> for ::windows::runtime::IUnknown {
    fn from(value: IThumbnailExtractor) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IThumbnailExtractor> for ::windows::runtime::IUnknown {
    fn from(value: &IThumbnailExtractor) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IThumbnailExtractor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IThumbnailExtractor {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IThumbnailExtractor_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstg: ::windows::runtime::RawPtr,
        ullength: u32,
        ulheight: u32,
        puloutputlength: *mut u32,
        puloutputheight: *mut u32,
        phoutputbitmap: *mut super::super::Graphics::Gdi::HBITMAP,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Graphics_Gdi",
        feature = "Win32_Storage_StructuredStorage"
    )))]
    usize,
    #[cfg(feature = "Win32_Storage_StructuredStorage")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstg: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Storage_StructuredStorage"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ITimeAndNoticeControl(::windows::runtime::IUnknown);
impl ITimeAndNoticeControl {
    pub unsafe fn SuppressChanges(&self, res1: u32, res2: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(res1),
            ::std::mem::transmute(res2),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ITimeAndNoticeControl {
    type Vtable = ITimeAndNoticeControl_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3154900654,
        34936,
        4561,
        [131, 233, 0, 192, 79, 194, 198, 212],
    );
}
impl ::std::convert::From<ITimeAndNoticeControl> for ::windows::runtime::IUnknown {
    fn from(value: ITimeAndNoticeControl) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ITimeAndNoticeControl> for ::windows::runtime::IUnknown {
    fn from(value: &ITimeAndNoticeControl) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ITimeAndNoticeControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &ITimeAndNoticeControl
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITimeAndNoticeControl_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        res1: u32,
        res2: u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IUri(::windows::runtime::IUnknown);
impl IUri {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetPropertyBSTR(
        &self,
        uriprop: Uri_PROPERTY,
        pbstrproperty: *mut super::super::Foundation::BSTR,
        dwflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(uriprop),
            ::std::mem::transmute(pbstrproperty),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    pub unsafe fn GetPropertyLength(
        &self,
        uriprop: Uri_PROPERTY,
        pcchproperty: *mut u32,
        dwflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(uriprop),
            ::std::mem::transmute(pcchproperty),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    pub unsafe fn GetPropertyDWORD(
        &self,
        uriprop: Uri_PROPERTY,
        pdwproperty: *mut u32,
        dwflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(uriprop),
            ::std::mem::transmute(pdwproperty),
            ::std::mem::transmute(dwflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn HasProperty(
        &self,
        uriprop: Uri_PROPERTY,
    ) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(uriprop),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetAbsoluteUri(
        &self,
    ) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetAuthority(
        &self,
    ) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetDisplayUri(
        &self,
    ) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetDomain(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetExtension(
        &self,
    ) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetFragment(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetHost(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetPassword(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetPath(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetPathAndQuery(
        &self,
    ) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetQuery(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetRawUri(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetSchemeName(
        &self,
    ) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetUserInfo(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).20)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetUserName(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).21)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    pub unsafe fn GetHostType(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).22)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn GetPort(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn GetScheme(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).24)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn GetZone(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).25)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn GetProperties(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).26)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsEqual<'a, Param0: ::windows::runtime::IntoParam<'a, IUri>>(
        &self,
        puri: Param0,
    ) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(
            ::std::mem::transmute_copy(self),
            puri.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BOOL>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IUri {
    type Vtable = IUri_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2745100104,
        27175,
        18455,
        [166, 242, 19, 145, 75, 239, 88, 144],
    );
}
impl ::std::convert::From<IUri> for ::windows::runtime::IUnknown {
    fn from(value: IUri) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IUri> for ::windows::runtime::IUnknown {
    fn from(value: &IUri) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IUri {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IUri {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IUri_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        uriprop: Uri_PROPERTY,
        pbstrproperty: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        dwflags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        uriprop: Uri_PROPERTY,
        pcchproperty: *mut u32,
        dwflags: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        uriprop: Uri_PROPERTY,
        pdwproperty: *mut u32,
        dwflags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        uriprop: Uri_PROPERTY,
        pfhasproperty: *mut super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrabsoluteuri: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrauthority: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrdisplaystring: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrdomain: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrextension: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrfragment: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrhost: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrpassword: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrpath: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrpathandquery: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrquery: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrrawuri: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrschemename: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstruserinfo: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrusername: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwhosttype: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwport: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwscheme: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwzone: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwflags: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        puri: ::windows::runtime::RawPtr,
        pfequal: *mut super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IUriBuilder(::windows::runtime::IUnknown);
impl IUriBuilder {
    pub unsafe fn CreateUriSimple(
        &self,
        dwallowencodingpropertymask: u32,
        dwreserved: usize,
    ) -> ::windows::runtime::Result<IUri> {
        let mut result__: <IUri as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwallowencodingpropertymask),
            ::std::mem::transmute(dwreserved),
            &mut result__,
        )
        .from_abi::<IUri>(result__)
    }
    pub unsafe fn CreateUri(
        &self,
        dwcreateflags: u32,
        dwallowencodingpropertymask: u32,
        dwreserved: usize,
    ) -> ::windows::runtime::Result<IUri> {
        let mut result__: <IUri as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwcreateflags),
            ::std::mem::transmute(dwallowencodingpropertymask),
            ::std::mem::transmute(dwreserved),
            &mut result__,
        )
        .from_abi::<IUri>(result__)
    }
    pub unsafe fn CreateUriWithFlags(
        &self,
        dwcreateflags: u32,
        dwuribuilderflags: u32,
        dwallowencodingpropertymask: u32,
        dwreserved: usize,
    ) -> ::windows::runtime::Result<IUri> {
        let mut result__: <IUri as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwcreateflags),
            ::std::mem::transmute(dwuribuilderflags),
            ::std::mem::transmute(dwallowencodingpropertymask),
            ::std::mem::transmute(dwreserved),
            &mut result__,
        )
        .from_abi::<IUri>(result__)
    }
    pub unsafe fn GetIUri(&self) -> ::windows::runtime::Result<IUri> {
        let mut result__: <IUri as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IUri>(result__)
    }
    pub unsafe fn SetIUri<'a, Param0: ::windows::runtime::IntoParam<'a, IUri>>(
        &self,
        piuri: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            piuri.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetFragment(
        &self,
        pcchfragment: *mut u32,
        ppwzfragment: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pcchfragment),
            ::std::mem::transmute(ppwzfragment),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetHost(
        &self,
        pcchhost: *mut u32,
        ppwzhost: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pcchhost),
            ::std::mem::transmute(ppwzhost),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetPassword(
        &self,
        pcchpassword: *mut u32,
        ppwzpassword: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pcchpassword),
            ::std::mem::transmute(ppwzpassword),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetPath(
        &self,
        pcchpath: *mut u32,
        ppwzpath: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pcchpath),
            ::std::mem::transmute(ppwzpath),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetPort(
        &self,
        pfhasport: *mut super::super::Foundation::BOOL,
        pdwport: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pfhasport),
            ::std::mem::transmute(pdwport),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetQuery(
        &self,
        pcchquery: *mut u32,
        ppwzquery: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pcchquery),
            ::std::mem::transmute(ppwzquery),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetSchemeName(
        &self,
        pcchschemename: *mut u32,
        ppwzschemename: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pcchschemename),
            ::std::mem::transmute(ppwzschemename),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetUserName(
        &self,
        pcchusername: *mut u32,
        ppwzusername: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pcchusername),
            ::std::mem::transmute(ppwzusername),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetFragment<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwznewvalue: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            pwznewvalue.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetHost<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwznewvalue: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(
            ::std::mem::transmute_copy(self),
            pwznewvalue.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPassword<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwznewvalue: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(
            ::std::mem::transmute_copy(self),
            pwznewvalue.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPath<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwznewvalue: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(
            ::std::mem::transmute_copy(self),
            pwznewvalue.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPort<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        fhasport: Param0,
        dwnewvalue: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(
            ::std::mem::transmute_copy(self),
            fhasport.into_param().abi(),
            ::std::mem::transmute(dwnewvalue),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetQuery<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwznewvalue: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(
            ::std::mem::transmute_copy(self),
            pwznewvalue.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetSchemeName<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwznewvalue: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(
            ::std::mem::transmute_copy(self),
            pwznewvalue.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetUserName<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwznewvalue: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(
            ::std::mem::transmute_copy(self),
            pwznewvalue.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn RemoveProperties(&self, dwpropertymask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwpropertymask),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn HasBeenModified(
        &self,
    ) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).25)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BOOL>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IUriBuilder {
    type Vtable = IUriBuilder_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        1109504737,
        35157,
        18112,
        [189, 91, 222, 152, 151, 86, 93, 231],
    );
}
impl ::std::convert::From<IUriBuilder> for ::windows::runtime::IUnknown {
    fn from(value: IUriBuilder) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IUriBuilder> for ::windows::runtime::IUnknown {
    fn from(value: &IUriBuilder) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IUriBuilder {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IUriBuilder {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IUriBuilder_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwallowencodingpropertymask: u32,
        dwreserved: usize,
        ppiuri: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwcreateflags: u32,
        dwallowencodingpropertymask: u32,
        dwreserved: usize,
        ppiuri: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwcreateflags: u32,
        dwuribuilderflags: u32,
        dwallowencodingpropertymask: u32,
        dwreserved: usize,
        ppiuri: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppiuri: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        piuri: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pcchfragment: *mut u32,
        ppwzfragment: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pcchhost: *mut u32,
        ppwzhost: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pcchpassword: *mut u32,
        ppwzpassword: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pcchpath: *mut u32,
        ppwzpath: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pfhasport: *mut super::super::Foundation::BOOL,
        pdwport: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pcchquery: *mut u32,
        ppwzquery: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pcchschemename: *mut u32,
        ppwzschemename: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pcchusername: *mut u32,
        ppwzusername: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwznewvalue: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwznewvalue: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwznewvalue: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwznewvalue: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        fhasport: super::super::Foundation::BOOL,
        dwnewvalue: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwznewvalue: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwznewvalue: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwznewvalue: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwpropertymask: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pfmodified: *mut super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IUriBuilderFactory(::windows::runtime::IUnknown);
impl IUriBuilderFactory {
    pub unsafe fn CreateIUriBuilder(
        &self,
        dwflags: u32,
        dwreserved: usize,
    ) -> ::windows::runtime::Result<IUriBuilder> {
        let mut result__: <IUriBuilder as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(dwreserved),
            &mut result__,
        )
        .from_abi::<IUriBuilder>(result__)
    }
    pub unsafe fn CreateInitializedIUriBuilder(
        &self,
        dwflags: u32,
        dwreserved: usize,
    ) -> ::windows::runtime::Result<IUriBuilder> {
        let mut result__: <IUriBuilder as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(dwreserved),
            &mut result__,
        )
        .from_abi::<IUriBuilder>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IUriBuilderFactory {
    type Vtable = IUriBuilderFactory_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3917663816,
        2966,
        17420,
        [188, 55, 12, 134, 155, 39, 162, 158],
    );
}
impl ::std::convert::From<IUriBuilderFactory> for ::windows::runtime::IUnknown {
    fn from(value: IUriBuilderFactory) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IUriBuilderFactory> for ::windows::runtime::IUnknown {
    fn from(value: &IUriBuilderFactory) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IUriBuilderFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IUriBuilderFactory {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IUriBuilderFactory_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwflags: u32,
        dwreserved: usize,
        ppiuribuilder: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwflags: u32,
        dwreserved: usize,
        ppiuribuilder: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IUriContainer(::windows::runtime::IUnknown);
impl IUriContainer {
    pub unsafe fn GetIUri(&self) -> ::windows::runtime::Result<IUri> {
        let mut result__: <IUri as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<IUri>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IUriContainer {
    type Vtable = IUriContainer_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2706941488,
        60783,
        17915,
        [185, 135, 246, 134, 118, 245, 119, 82],
    );
}
impl ::std::convert::From<IUriContainer> for ::windows::runtime::IUnknown {
    fn from(value: IUriContainer) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IUriContainer> for ::windows::runtime::IUnknown {
    fn from(value: &IUriContainer) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IUriContainer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IUriContainer {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IUriContainer_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppiuri: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IUrlMon(::windows::runtime::IUnknown);
impl IUrlMon {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn AsyncGetClassBits<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param5: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
        Param6: ::windows::runtime::IntoParam<'a, IBindCtx>,
    >(
        &self,
        rclsid: *const ::windows::runtime::GUID,
        psztype: Param1,
        pszext: Param2,
        dwfileversionms: u32,
        dwfileversionls: u32,
        pszcodebase: Param5,
        pbc: Param6,
        dwclasscontext: u32,
        riid: *const ::windows::runtime::GUID,
        flags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(rclsid),
            psztype.into_param().abi(),
            pszext.into_param().abi(),
            ::std::mem::transmute(dwfileversionms),
            ::std::mem::transmute(dwfileversionls),
            pszcodebase.into_param().abi(),
            pbc.into_param().abi(),
            ::std::mem::transmute(dwclasscontext),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(flags),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IUrlMon {
    type Vtable = IUrlMon_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(38, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IUrlMon> for ::windows::runtime::IUnknown {
    fn from(value: IUrlMon) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IUrlMon> for ::windows::runtime::IUnknown {
    fn from(value: &IUrlMon) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IUrlMon {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IUrlMon {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IUrlMon_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        rclsid: *const ::windows::runtime::GUID,
        psztype: super::super::Foundation::PWSTR,
        pszext: super::super::Foundation::PWSTR,
        dwfileversionms: u32,
        dwfileversionls: u32,
        pszcodebase: super::super::Foundation::PWSTR,
        pbc: ::windows::runtime::RawPtr,
        dwclasscontext: u32,
        riid: *const ::windows::runtime::GUID,
        flags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IVBFormat(::windows::runtime::IUnknown);
impl IVBFormat {
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub unsafe fn Format<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        vdata: *mut super::OleAutomation::VARIANT,
        bstrformat: Param1,
        lpbuffer: *mut ::std::ffi::c_void,
        cb: u16,
        lcid: i32,
        sfirstdayofweek: i16,
        sfirstweekofyear: u16,
        rcb: *mut u16,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(vdata),
            bstrformat.into_param().abi(),
            ::std::mem::transmute(lpbuffer),
            ::std::mem::transmute(cb),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(sfirstdayofweek),
            ::std::mem::transmute(sfirstweekofyear),
            ::std::mem::transmute(rcb),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IVBFormat {
    type Vtable = IVBFormat_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2554985824,
        14184,
        4123,
        [141, 114, 174, 97, 100, 255, 227, 207],
    );
}
impl ::std::convert::From<IVBFormat> for ::windows::runtime::IUnknown {
    fn from(value: IVBFormat) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IVBFormat> for ::windows::runtime::IUnknown {
    fn from(value: &IVBFormat) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IVBFormat {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IVBFormat {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVBFormat_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        vdata: *mut ::std::mem::ManuallyDrop<super::OleAutomation::VARIANT>,
        bstrformat: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        lpbuffer: *mut ::std::ffi::c_void,
        cb: u16,
        lcid: i32,
        sfirstdayofweek: i16,
        sfirstweekofyear: u16,
        rcb: *mut u16,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_OleAutomation",
        feature = "Win32_System_SystemServices"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IVBGetControl(::windows::runtime::IUnknown);
impl IVBGetControl {
    pub unsafe fn EnumControls(
        &self,
        dwolecontf: OLECONTF,
        dwwhich: ENUM_CONTROLS_WHICH_FLAGS,
    ) -> ::windows::runtime::Result<IEnumUnknown> {
        let mut result__: <IEnumUnknown as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwolecontf),
            ::std::mem::transmute(dwwhich),
            &mut result__,
        )
        .from_abi::<IEnumUnknown>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IVBGetControl {
    type Vtable = IVBGetControl_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        1084248224,
        15409,
        4123,
        [168, 46, 8, 0, 43, 43, 35, 55],
    );
}
impl ::std::convert::From<IVBGetControl> for ::windows::runtime::IUnknown {
    fn from(value: IVBGetControl) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IVBGetControl> for ::windows::runtime::IUnknown {
    fn from(value: &IVBGetControl) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IVBGetControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IVBGetControl {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVBGetControl_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwolecontf: OLECONTF,
        dwwhich: ENUM_CONTROLS_WHICH_FLAGS,
        ppenumunk: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IViewObject(::windows::runtime::IUnknown);
impl IViewObject {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub unsafe fn Draw<
        'a,
        Param4: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HDC>,
        Param5: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HDC>,
    >(
        &self,
        dwdrawaspect: u32,
        lindex: i32,
        pvaspect: *mut ::std::ffi::c_void,
        ptd: *const DVTARGETDEVICE,
        hdctargetdev: Param4,
        hdcdraw: Param5,
        lprcbounds: *const super::super::Foundation::RECTL,
        lprcwbounds: *const super::super::Foundation::RECTL,
        pfncontinue: isize,
        dwcontinue: usize,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwdrawaspect),
            ::std::mem::transmute(lindex),
            ::std::mem::transmute(pvaspect),
            ::std::mem::transmute(ptd),
            hdctargetdev.into_param().abi(),
            hdcdraw.into_param().abi(),
            ::std::mem::transmute(lprcbounds),
            ::std::mem::transmute(lprcwbounds),
            ::std::mem::transmute(pfncontinue),
            ::std::mem::transmute(dwcontinue),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn GetColorSet<
        'a,
        Param4: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HDC>,
    >(
        &self,
        dwdrawaspect: u32,
        lindex: i32,
        pvaspect: *mut ::std::ffi::c_void,
        ptd: *const DVTARGETDEVICE,
        hictargetdev: Param4,
        ppcolorset: *mut *mut super::super::Graphics::Gdi::LOGPALETTE,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwdrawaspect),
            ::std::mem::transmute(lindex),
            ::std::mem::transmute(pvaspect),
            ::std::mem::transmute(ptd),
            hictargetdev.into_param().abi(),
            ::std::mem::transmute(ppcolorset),
        )
        .ok()
    }
    pub unsafe fn Freeze(
        &self,
        dwdrawaspect: u32,
        lindex: i32,
        pvaspect: *mut ::std::ffi::c_void,
        pdwfreeze: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwdrawaspect),
            ::std::mem::transmute(lindex),
            ::std::mem::transmute(pvaspect),
            ::std::mem::transmute(pdwfreeze),
        )
        .ok()
    }
    pub unsafe fn Unfreeze(&self, dwfreeze: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwfreeze),
        )
        .ok()
    }
    pub unsafe fn SetAdvise<'a, Param2: ::windows::runtime::IntoParam<'a, IAdviseSink>>(
        &self,
        aspects: u32,
        advf: u32,
        padvsink: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(aspects),
            ::std::mem::transmute(advf),
            padvsink.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetAdvise(
        &self,
        paspects: *mut u32,
        padvf: *mut u32,
        ppadvsink: *mut ::std::option::Option<IAdviseSink>,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(paspects),
            ::std::mem::transmute(padvf),
            ::std::mem::transmute(ppadvsink),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IViewObject {
    type Vtable = IViewObject_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(269, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IViewObject> for ::windows::runtime::IUnknown {
    fn from(value: IViewObject) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IViewObject> for ::windows::runtime::IUnknown {
    fn from(value: &IViewObject) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IViewObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IViewObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IViewObject_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwdrawaspect: u32,
        lindex: i32,
        pvaspect: *mut ::std::ffi::c_void,
        ptd: *const DVTARGETDEVICE,
        hdctargetdev: super::super::Graphics::Gdi::HDC,
        hdcdraw: super::super::Graphics::Gdi::HDC,
        lprcbounds: *const super::super::Foundation::RECTL,
        lprcwbounds: *const super::super::Foundation::RECTL,
        pfncontinue: isize,
        dwcontinue: usize,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi")))] usize,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwdrawaspect: u32,
        lindex: i32,
        pvaspect: *mut ::std::ffi::c_void,
        ptd: *const DVTARGETDEVICE,
        hictargetdev: super::super::Graphics::Gdi::HDC,
        ppcolorset: *mut *mut super::super::Graphics::Gdi::LOGPALETTE,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwdrawaspect: u32,
        lindex: i32,
        pvaspect: *mut ::std::ffi::c_void,
        pdwfreeze: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwfreeze: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        aspects: u32,
        advf: u32,
        padvsink: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        paspects: *mut u32,
        padvf: *mut u32,
        ppadvsink: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IViewObject2(::windows::runtime::IUnknown);
impl IViewObject2 {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub unsafe fn Draw<
        'a,
        Param4: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HDC>,
        Param5: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HDC>,
    >(
        &self,
        dwdrawaspect: u32,
        lindex: i32,
        pvaspect: *mut ::std::ffi::c_void,
        ptd: *const DVTARGETDEVICE,
        hdctargetdev: Param4,
        hdcdraw: Param5,
        lprcbounds: *const super::super::Foundation::RECTL,
        lprcwbounds: *const super::super::Foundation::RECTL,
        pfncontinue: isize,
        dwcontinue: usize,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwdrawaspect),
            ::std::mem::transmute(lindex),
            ::std::mem::transmute(pvaspect),
            ::std::mem::transmute(ptd),
            hdctargetdev.into_param().abi(),
            hdcdraw.into_param().abi(),
            ::std::mem::transmute(lprcbounds),
            ::std::mem::transmute(lprcwbounds),
            ::std::mem::transmute(pfncontinue),
            ::std::mem::transmute(dwcontinue),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn GetColorSet<
        'a,
        Param4: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HDC>,
    >(
        &self,
        dwdrawaspect: u32,
        lindex: i32,
        pvaspect: *mut ::std::ffi::c_void,
        ptd: *const DVTARGETDEVICE,
        hictargetdev: Param4,
        ppcolorset: *mut *mut super::super::Graphics::Gdi::LOGPALETTE,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwdrawaspect),
            ::std::mem::transmute(lindex),
            ::std::mem::transmute(pvaspect),
            ::std::mem::transmute(ptd),
            hictargetdev.into_param().abi(),
            ::std::mem::transmute(ppcolorset),
        )
        .ok()
    }
    pub unsafe fn Freeze(
        &self,
        dwdrawaspect: u32,
        lindex: i32,
        pvaspect: *mut ::std::ffi::c_void,
        pdwfreeze: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwdrawaspect),
            ::std::mem::transmute(lindex),
            ::std::mem::transmute(pvaspect),
            ::std::mem::transmute(pdwfreeze),
        )
        .ok()
    }
    pub unsafe fn Unfreeze(&self, dwfreeze: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwfreeze),
        )
        .ok()
    }
    pub unsafe fn SetAdvise<'a, Param2: ::windows::runtime::IntoParam<'a, IAdviseSink>>(
        &self,
        aspects: u32,
        advf: u32,
        padvsink: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(aspects),
            ::std::mem::transmute(advf),
            padvsink.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetAdvise(
        &self,
        paspects: *mut u32,
        padvf: *mut u32,
        ppadvsink: *mut ::std::option::Option<IAdviseSink>,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(paspects),
            ::std::mem::transmute(padvf),
            ::std::mem::transmute(ppadvsink),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetExtent(
        &self,
        dwdrawaspect: u32,
        lindex: i32,
        ptd: *const DVTARGETDEVICE,
    ) -> ::windows::runtime::Result<super::super::Foundation::SIZE> {
        let mut result__: <super::super::Foundation::SIZE as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwdrawaspect),
            ::std::mem::transmute(lindex),
            ::std::mem::transmute(ptd),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::SIZE>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IViewObject2 {
    type Vtable = IViewObject2_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(295, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IViewObject2> for ::windows::runtime::IUnknown {
    fn from(value: IViewObject2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IViewObject2> for ::windows::runtime::IUnknown {
    fn from(value: &IViewObject2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IViewObject2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IViewObject2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IViewObject2> for IViewObject {
    fn from(value: IViewObject2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IViewObject2> for IViewObject {
    fn from(value: &IViewObject2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IViewObject> for IViewObject2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IViewObject> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IViewObject>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IViewObject> for &IViewObject2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IViewObject> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IViewObject>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IViewObject2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwdrawaspect: u32,
        lindex: i32,
        pvaspect: *mut ::std::ffi::c_void,
        ptd: *const DVTARGETDEVICE,
        hdctargetdev: super::super::Graphics::Gdi::HDC,
        hdcdraw: super::super::Graphics::Gdi::HDC,
        lprcbounds: *const super::super::Foundation::RECTL,
        lprcwbounds: *const super::super::Foundation::RECTL,
        pfncontinue: isize,
        dwcontinue: usize,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi")))] usize,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwdrawaspect: u32,
        lindex: i32,
        pvaspect: *mut ::std::ffi::c_void,
        ptd: *const DVTARGETDEVICE,
        hictargetdev: super::super::Graphics::Gdi::HDC,
        ppcolorset: *mut *mut super::super::Graphics::Gdi::LOGPALETTE,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwdrawaspect: u32,
        lindex: i32,
        pvaspect: *mut ::std::ffi::c_void,
        pdwfreeze: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwfreeze: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        aspects: u32,
        advf: u32,
        padvsink: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        paspects: *mut u32,
        padvf: *mut u32,
        ppadvsink: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwdrawaspect: u32,
        lindex: i32,
        ptd: *const DVTARGETDEVICE,
        lpsizel: *mut super::super::Foundation::SIZE,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IViewObjectEx(::windows::runtime::IUnknown);
impl IViewObjectEx {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub unsafe fn Draw<
        'a,
        Param4: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HDC>,
        Param5: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HDC>,
    >(
        &self,
        dwdrawaspect: u32,
        lindex: i32,
        pvaspect: *mut ::std::ffi::c_void,
        ptd: *const DVTARGETDEVICE,
        hdctargetdev: Param4,
        hdcdraw: Param5,
        lprcbounds: *const super::super::Foundation::RECTL,
        lprcwbounds: *const super::super::Foundation::RECTL,
        pfncontinue: isize,
        dwcontinue: usize,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwdrawaspect),
            ::std::mem::transmute(lindex),
            ::std::mem::transmute(pvaspect),
            ::std::mem::transmute(ptd),
            hdctargetdev.into_param().abi(),
            hdcdraw.into_param().abi(),
            ::std::mem::transmute(lprcbounds),
            ::std::mem::transmute(lprcwbounds),
            ::std::mem::transmute(pfncontinue),
            ::std::mem::transmute(dwcontinue),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn GetColorSet<
        'a,
        Param4: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HDC>,
    >(
        &self,
        dwdrawaspect: u32,
        lindex: i32,
        pvaspect: *mut ::std::ffi::c_void,
        ptd: *const DVTARGETDEVICE,
        hictargetdev: Param4,
        ppcolorset: *mut *mut super::super::Graphics::Gdi::LOGPALETTE,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwdrawaspect),
            ::std::mem::transmute(lindex),
            ::std::mem::transmute(pvaspect),
            ::std::mem::transmute(ptd),
            hictargetdev.into_param().abi(),
            ::std::mem::transmute(ppcolorset),
        )
        .ok()
    }
    pub unsafe fn Freeze(
        &self,
        dwdrawaspect: u32,
        lindex: i32,
        pvaspect: *mut ::std::ffi::c_void,
        pdwfreeze: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwdrawaspect),
            ::std::mem::transmute(lindex),
            ::std::mem::transmute(pvaspect),
            ::std::mem::transmute(pdwfreeze),
        )
        .ok()
    }
    pub unsafe fn Unfreeze(&self, dwfreeze: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwfreeze),
        )
        .ok()
    }
    pub unsafe fn SetAdvise<'a, Param2: ::windows::runtime::IntoParam<'a, IAdviseSink>>(
        &self,
        aspects: u32,
        advf: u32,
        padvsink: Param2,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(aspects),
            ::std::mem::transmute(advf),
            padvsink.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetAdvise(
        &self,
        paspects: *mut u32,
        padvf: *mut u32,
        ppadvsink: *mut ::std::option::Option<IAdviseSink>,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(paspects),
            ::std::mem::transmute(padvf),
            ::std::mem::transmute(ppadvsink),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetExtent(
        &self,
        dwdrawaspect: u32,
        lindex: i32,
        ptd: *const DVTARGETDEVICE,
    ) -> ::windows::runtime::Result<super::super::Foundation::SIZE> {
        let mut result__: <super::super::Foundation::SIZE as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwdrawaspect),
            ::std::mem::transmute(lindex),
            ::std::mem::transmute(ptd),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::SIZE>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetRect(
        &self,
        dwaspect: u32,
    ) -> ::windows::runtime::Result<super::super::Foundation::RECTL> {
        let mut result__: <super::super::Foundation::RECTL as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwaspect),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::RECTL>(result__)
    }
    pub unsafe fn GetViewStatus(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn QueryHitPoint<
        'a,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::POINT>,
    >(
        &self,
        dwaspect: u32,
        prectbounds: *const super::super::Foundation::RECT,
        ptlloc: Param2,
        lclosehint: i32,
    ) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwaspect),
            ::std::mem::transmute(prectbounds),
            ptlloc.into_param().abi(),
            ::std::mem::transmute(lclosehint),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn QueryHitRect(
        &self,
        dwaspect: u32,
        prectbounds: *const super::super::Foundation::RECT,
        prectloc: *const super::super::Foundation::RECT,
        lclosehint: i32,
    ) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwaspect),
            ::std::mem::transmute(prectbounds),
            ::std::mem::transmute(prectloc),
            ::std::mem::transmute(lclosehint),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub unsafe fn GetNaturalExtent<
        'a,
        Param3: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HDC>,
    >(
        &self,
        dwaspect: DVASPECT,
        lindex: i32,
        ptd: *const DVTARGETDEVICE,
        hictargetdev: Param3,
        pextentinfo: *const ExtentInfo,
    ) -> ::windows::runtime::Result<super::super::Foundation::SIZE> {
        let mut result__: <super::super::Foundation::SIZE as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwaspect),
            ::std::mem::transmute(lindex),
            ::std::mem::transmute(ptd),
            hictargetdev.into_param().abi(),
            ::std::mem::transmute(pextentinfo),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::SIZE>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IViewObjectEx {
    type Vtable = IViewObjectEx_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        988955282,
        3222,
        4558,
        [160, 207, 0, 170, 0, 96, 10, 184],
    );
}
impl ::std::convert::From<IViewObjectEx> for ::windows::runtime::IUnknown {
    fn from(value: IViewObjectEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IViewObjectEx> for ::windows::runtime::IUnknown {
    fn from(value: &IViewObjectEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IViewObjectEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IViewObjectEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IViewObjectEx> for IViewObject2 {
    fn from(value: IViewObjectEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IViewObjectEx> for IViewObject2 {
    fn from(value: &IViewObjectEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IViewObject2> for IViewObjectEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IViewObject2> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IViewObject2>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IViewObject2> for &IViewObjectEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IViewObject2> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IViewObject2>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
impl ::std::convert::From<IViewObjectEx> for IViewObject {
    fn from(value: IViewObjectEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IViewObjectEx> for IViewObject {
    fn from(value: &IViewObjectEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IViewObject> for IViewObjectEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IViewObject> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IViewObject>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IViewObject> for &IViewObjectEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, IViewObject> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IViewObject>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IViewObjectEx_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwdrawaspect: u32,
        lindex: i32,
        pvaspect: *mut ::std::ffi::c_void,
        ptd: *const DVTARGETDEVICE,
        hdctargetdev: super::super::Graphics::Gdi::HDC,
        hdcdraw: super::super::Graphics::Gdi::HDC,
        lprcbounds: *const super::super::Foundation::RECTL,
        lprcwbounds: *const super::super::Foundation::RECTL,
        pfncontinue: isize,
        dwcontinue: usize,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi")))] usize,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwdrawaspect: u32,
        lindex: i32,
        pvaspect: *mut ::std::ffi::c_void,
        ptd: *const DVTARGETDEVICE,
        hictargetdev: super::super::Graphics::Gdi::HDC,
        ppcolorset: *mut *mut super::super::Graphics::Gdi::LOGPALETTE,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwdrawaspect: u32,
        lindex: i32,
        pvaspect: *mut ::std::ffi::c_void,
        pdwfreeze: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwfreeze: u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        aspects: u32,
        advf: u32,
        padvsink: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        paspects: *mut u32,
        padvf: *mut u32,
        ppadvsink: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwdrawaspect: u32,
        lindex: i32,
        ptd: *const DVTARGETDEVICE,
        lpsizel: *mut super::super::Foundation::SIZE,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwaspect: u32,
        prect: *mut super::super::Foundation::RECTL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwstatus: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwaspect: u32,
        prectbounds: *const super::super::Foundation::RECT,
        ptlloc: super::super::Foundation::POINT,
        lclosehint: i32,
        phitresult: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwaspect: u32,
        prectbounds: *const super::super::Foundation::RECT,
        prectloc: *const super::super::Foundation::RECT,
        lclosehint: i32,
        phitresult: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwaspect: DVASPECT,
        lindex: i32,
        ptd: *const DVTARGETDEVICE,
        hictargetdev: super::super::Graphics::Gdi::HDC,
        pextentinfo: *const ExtentInfo,
        psizel: *mut super::super::Foundation::SIZE,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi")))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IWaitMultiple(::windows::runtime::IUnknown);
impl IWaitMultiple {
    pub unsafe fn WaitMultiple(&self, timeout: u32) -> ::windows::runtime::Result<ISynchronize> {
        let mut result__: <ISynchronize as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(timeout),
            &mut result__,
        )
        .from_abi::<ISynchronize>(result__)
    }
    pub unsafe fn AddSynchronize<'a, Param0: ::windows::runtime::IntoParam<'a, ISynchronize>>(
        &self,
        psync: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            psync.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWaitMultiple {
    type Vtable = IWaitMultiple_abi;
    const IID: ::windows::runtime::GUID =
        ::windows::runtime::GUID::from_values(43, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
}
impl ::std::convert::From<IWaitMultiple> for ::windows::runtime::IUnknown {
    fn from(value: IWaitMultiple) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IWaitMultiple> for ::windows::runtime::IUnknown {
    fn from(value: &IWaitMultiple) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWaitMultiple {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IWaitMultiple {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWaitMultiple_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        timeout: u32,
        psync: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        psync: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IWinInetCacheHints(::windows::runtime::IUnknown);
impl IWinInetCacheHints {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetCacheExtension<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwzext: Param0,
        pszcachefile: *mut ::std::ffi::c_void,
        pcbcachefile: *mut u32,
        pdwwinineterror: *mut u32,
        pdwreserved: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pwzext.into_param().abi(),
            ::std::mem::transmute(pszcachefile),
            ::std::mem::transmute(pcbcachefile),
            ::std::mem::transmute(pdwwinineterror),
            ::std::mem::transmute(pdwreserved),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWinInetCacheHints {
    type Vtable = IWinInetCacheHints_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3709780915,
        33681,
        20443,
        [169, 230, 52, 124, 60, 170, 167, 221],
    );
}
impl ::std::convert::From<IWinInetCacheHints> for ::windows::runtime::IUnknown {
    fn from(value: IWinInetCacheHints) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IWinInetCacheHints> for ::windows::runtime::IUnknown {
    fn from(value: &IWinInetCacheHints) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWinInetCacheHints {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IWinInetCacheHints {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWinInetCacheHints_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwzext: super::super::Foundation::PWSTR,
        pszcachefile: *mut ::std::ffi::c_void,
        pcbcachefile: *mut u32,
        pdwwinineterror: *mut u32,
        pdwreserved: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IWinInetCacheHints2(::windows::runtime::IUnknown);
impl IWinInetCacheHints2 {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetCacheExtension<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwzext: Param0,
        pszcachefile: *mut ::std::ffi::c_void,
        pcbcachefile: *mut u32,
        pdwwinineterror: *mut u32,
        pdwreserved: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pwzext.into_param().abi(),
            ::std::mem::transmute(pszcachefile),
            ::std::mem::transmute(pcbcachefile),
            ::std::mem::transmute(pdwwinineterror),
            ::std::mem::transmute(pdwreserved),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetCacheExtension2<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        pwzext: Param0,
        pwzcachefile: super::super::Foundation::PWSTR,
        pcchcachefile: *mut u32,
        pdwwinineterror: *mut u32,
        pdwreserved: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            pwzext.into_param().abi(),
            ::std::mem::transmute(pwzcachefile),
            ::std::mem::transmute(pcchcachefile),
            ::std::mem::transmute(pdwwinineterror),
            ::std::mem::transmute(pdwreserved),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWinInetCacheHints2 {
    type Vtable = IWinInetCacheHints2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2019012268,
        54047,
        18879,
        [136, 78, 221, 70, 223, 54, 120, 10],
    );
}
impl ::std::convert::From<IWinInetCacheHints2> for ::windows::runtime::IUnknown {
    fn from(value: IWinInetCacheHints2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IWinInetCacheHints2> for ::windows::runtime::IUnknown {
    fn from(value: &IWinInetCacheHints2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWinInetCacheHints2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IWinInetCacheHints2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IWinInetCacheHints2> for IWinInetCacheHints {
    fn from(value: IWinInetCacheHints2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IWinInetCacheHints2> for IWinInetCacheHints {
    fn from(value: &IWinInetCacheHints2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IWinInetCacheHints> for IWinInetCacheHints2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IWinInetCacheHints> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IWinInetCacheHints>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IWinInetCacheHints> for &IWinInetCacheHints2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IWinInetCacheHints> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IWinInetCacheHints>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWinInetCacheHints2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwzext: super::super::Foundation::PWSTR,
        pszcachefile: *mut ::std::ffi::c_void,
        pcbcachefile: *mut u32,
        pdwwinineterror: *mut u32,
        pdwreserved: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pwzext: super::super::Foundation::PWSTR,
        pwzcachefile: super::super::Foundation::PWSTR,
        pcchcachefile: *mut u32,
        pdwwinineterror: *mut u32,
        pdwreserved: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IWinInetFileStream(::windows::runtime::IUnknown);
impl IWinInetFileStream {
    pub unsafe fn SetHandleForUnlock(
        &self,
        hwininetlockhandle: usize,
        dwreserved: usize,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(hwininetlockhandle),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    pub unsafe fn SetDeleteFile(&self, dwreserved: usize) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWinInetFileStream {
    type Vtable = IWinInetFileStream_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4046767287,
        45560,
        20085,
        [184, 134, 116, 185, 9, 67, 190, 203],
    );
}
impl ::std::convert::From<IWinInetFileStream> for ::windows::runtime::IUnknown {
    fn from(value: IWinInetFileStream) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IWinInetFileStream> for ::windows::runtime::IUnknown {
    fn from(value: &IWinInetFileStream) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWinInetFileStream {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IWinInetFileStream {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWinInetFileStream_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hwininetlockhandle: usize,
        dwreserved: usize,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwreserved: usize,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IWinInetHttpInfo(::windows::runtime::IUnknown);
impl IWinInetHttpInfo {
    pub unsafe fn QueryOption(
        &self,
        dwoption: u32,
        pbuffer: *mut ::std::ffi::c_void,
        pcbbuf: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwoption),
            ::std::mem::transmute(pbuffer),
            ::std::mem::transmute(pcbbuf),
        )
        .ok()
    }
    pub unsafe fn QueryInfo(
        &self,
        dwoption: u32,
        pbuffer: *mut ::std::ffi::c_void,
        pcbbuf: *mut u32,
        pdwflags: *mut u32,
        pdwreserved: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwoption),
            ::std::mem::transmute(pbuffer),
            ::std::mem::transmute(pcbbuf),
            ::std::mem::transmute(pdwflags),
            ::std::mem::transmute(pdwreserved),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWinInetHttpInfo {
    type Vtable = IWinInetHttpInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430232,
        47866,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<IWinInetHttpInfo> for ::windows::runtime::IUnknown {
    fn from(value: IWinInetHttpInfo) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IWinInetHttpInfo> for ::windows::runtime::IUnknown {
    fn from(value: &IWinInetHttpInfo) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWinInetHttpInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IWinInetHttpInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IWinInetHttpInfo> for IWinInetInfo {
    fn from(value: IWinInetHttpInfo) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IWinInetHttpInfo> for IWinInetInfo {
    fn from(value: &IWinInetHttpInfo) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IWinInetInfo> for IWinInetHttpInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, IWinInetInfo> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IWinInetInfo>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IWinInetInfo> for &IWinInetHttpInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, IWinInetInfo> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IWinInetInfo>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWinInetHttpInfo_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwoption: u32,
        pbuffer: *mut ::std::ffi::c_void,
        pcbbuf: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwoption: u32,
        pbuffer: *mut ::std::ffi::c_void,
        pcbbuf: *mut u32,
        pdwflags: *mut u32,
        pdwreserved: *mut u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IWinInetHttpTimeouts(::windows::runtime::IUnknown);
impl IWinInetHttpTimeouts {
    pub unsafe fn GetRequestTimeouts(
        &self,
        pdwconnecttimeout: *mut u32,
        pdwsendtimeout: *mut u32,
        pdwreceivetimeout: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pdwconnecttimeout),
            ::std::mem::transmute(pdwsendtimeout),
            ::std::mem::transmute(pdwreceivetimeout),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWinInetHttpTimeouts {
    type Vtable = IWinInetHttpTimeouts_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4068932182,
        49661,
        17008,
        [142, 103, 179, 235, 121, 10, 129, 232],
    );
}
impl ::std::convert::From<IWinInetHttpTimeouts> for ::windows::runtime::IUnknown {
    fn from(value: IWinInetHttpTimeouts) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IWinInetHttpTimeouts> for ::windows::runtime::IUnknown {
    fn from(value: &IWinInetHttpTimeouts) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWinInetHttpTimeouts {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IWinInetHttpTimeouts {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWinInetHttpTimeouts_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwconnecttimeout: *mut u32,
        pdwsendtimeout: *mut u32,
        pdwreceivetimeout: *mut u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IWinInetInfo(::windows::runtime::IUnknown);
impl IWinInetInfo {
    pub unsafe fn QueryOption(
        &self,
        dwoption: u32,
        pbuffer: *mut ::std::ffi::c_void,
        pcbbuf: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwoption),
            ::std::mem::transmute(pbuffer),
            ::std::mem::transmute(pcbbuf),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWinInetInfo {
    type Vtable = IWinInetInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430230,
        47866,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<IWinInetInfo> for ::windows::runtime::IUnknown {
    fn from(value: IWinInetInfo) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IWinInetInfo> for ::windows::runtime::IUnknown {
    fn from(value: &IWinInetInfo) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWinInetInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IWinInetInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWinInetInfo_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwoption: u32,
        pbuffer: *mut ::std::ffi::c_void,
        pcbbuf: *mut u32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IWindowForBindingUI(::windows::runtime::IUnknown);
impl IWindowForBindingUI {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetWindow(
        &self,
        rguidreason: *const ::windows::runtime::GUID,
    ) -> ::windows::runtime::Result<super::super::Foundation::HWND> {
        let mut result__: <super::super::Foundation::HWND as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(rguidreason),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::HWND>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IWindowForBindingUI {
    type Vtable = IWindowForBindingUI_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2045430229,
        47866,
        4558,
        [140, 130, 0, 170, 0, 75, 169, 11],
    );
}
impl ::std::convert::From<IWindowForBindingUI> for ::windows::runtime::IUnknown {
    fn from(value: IWindowForBindingUI) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IWindowForBindingUI> for ::windows::runtime::IUnknown {
    fn from(value: &IWindowForBindingUI) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWindowForBindingUI {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IWindowForBindingUI {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWindowForBindingUI_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        rguidreason: *const ::windows::runtime::GUID,
        phwnd: *mut super::super::Foundation::HWND,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IWrappedProtocol(::windows::runtime::IUnknown);
impl IWrappedProtocol {
    pub unsafe fn GetWrapperCode(
        &self,
        pncode: *mut i32,
        dwreserved: usize,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(pncode),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWrappedProtocol {
    type Vtable = IWrappedProtocol_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        1405634437,
        33829,
        19909,
        [151, 27, 229, 141, 156, 25, 249, 182],
    );
}
impl ::std::convert::From<IWrappedProtocol> for ::windows::runtime::IUnknown {
    fn from(value: IWrappedProtocol) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IWrappedProtocol> for ::windows::runtime::IUnknown {
    fn from(value: &IWrappedProtocol) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWrappedProtocol {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IWrappedProtocol {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWrappedProtocol_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pncode: *mut i32,
        dwreserved: usize,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IZoneIdentifier(::windows::runtime::IUnknown);
impl IZoneIdentifier {
    pub unsafe fn GetId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn SetId(&self, dwzone: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
        )
        .ok()
    }
    pub unsafe fn Remove(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IZoneIdentifier {
    type Vtable = IZoneIdentifier_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3443913093,
        6945,
        18658,
        [150, 123, 234, 215, 67, 168, 145, 78],
    );
}
impl ::std::convert::From<IZoneIdentifier> for ::windows::runtime::IUnknown {
    fn from(value: IZoneIdentifier) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IZoneIdentifier> for ::windows::runtime::IUnknown {
    fn from(value: &IZoneIdentifier) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IZoneIdentifier {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IZoneIdentifier {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IZoneIdentifier_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwzone: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IZoneIdentifier2(::windows::runtime::IUnknown);
impl IZoneIdentifier2 {
    pub unsafe fn GetId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn SetId(&self, dwzone: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dwzone),
        )
        .ok()
    }
    pub unsafe fn Remove(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetLastWriterPackageFamilyName(
        &self,
    ) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetLastWriterPackageFamilyName<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    >(
        &self,
        packagefamilyname: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            packagefamilyname.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn RemoveLastWriterPackageFamilyName(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn GetAppZoneId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    pub unsafe fn SetAppZoneId(&self, zone: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(zone),
        )
        .ok()
    }
    pub unsafe fn RemoveAppZoneId(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IZoneIdentifier2 {
    type Vtable = IZoneIdentifier2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        3948836364,
        2543,
        17856,
        [181, 16, 112, 131, 12, 227, 30, 106],
    );
}
impl ::std::convert::From<IZoneIdentifier2> for ::windows::runtime::IUnknown {
    fn from(value: IZoneIdentifier2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IZoneIdentifier2> for ::windows::runtime::IUnknown {
    fn from(value: &IZoneIdentifier2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IZoneIdentifier2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IZoneIdentifier2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<IZoneIdentifier2> for IZoneIdentifier {
    fn from(value: IZoneIdentifier2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IZoneIdentifier2> for IZoneIdentifier {
    fn from(value: &IZoneIdentifier2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IZoneIdentifier> for IZoneIdentifier2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IZoneIdentifier> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IZoneIdentifier>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IZoneIdentifier> for &IZoneIdentifier2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IZoneIdentifier> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IZoneIdentifier>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IZoneIdentifier2_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pdwzone: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwzone: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        packagefamilyname: *mut super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        packagefamilyname: super::super::Foundation::PWSTR,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        zone: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        zone: u32,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IZoomEvents(::windows::runtime::IUnknown);
impl IZoomEvents {
    pub unsafe fn OnZoomPercentChanged(
        &self,
        ulzoompercent: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ulzoompercent),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IZoomEvents {
    type Vtable = IZoomEvents_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        1102479696,
        36940,
        19991,
        [160, 186, 164, 56, 24, 46, 53, 157],
    );
}
impl ::std::convert::From<IZoomEvents> for ::windows::runtime::IUnknown {
    fn from(value: IZoomEvents) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IZoomEvents> for ::windows::runtime::IUnknown {
    fn from(value: &IZoomEvents) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IZoomEvents {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IZoomEvents {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IZoomEvents_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ulzoompercent: u32,
    ) -> ::windows::runtime::HRESULT,
);
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
pub unsafe fn IsAccelerator<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::UI::WindowsAndMessaging::HACCEL>,
>(
    haccel: Param0,
    caccelentries: i32,
    lpmsg: *mut super::super::UI::WindowsAndMessaging::MSG,
    lpwcmd: *mut u16,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn IsAccelerator(
                haccel: super::super::UI::WindowsAndMessaging::HACCEL,
                caccelentries: i32,
                lpmsg: *mut super::super::UI::WindowsAndMessaging::MSG,
                lpwcmd: *mut u16,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(IsAccelerator(
            haccel.into_param().abi(),
            ::std::mem::transmute(caccelentries),
            ::std::mem::transmute(lpmsg),
            ::std::mem::transmute(lpwcmd),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn IsAsyncMoniker<'a, Param0: ::windows::runtime::IntoParam<'a, IMoniker>>(
    pmk: Param0,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn IsAsyncMoniker(pmk: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        IsAsyncMoniker(pmk.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn IsLoggingEnabledA<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PSTR>,
>(
    pszurl: Param0,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn IsLoggingEnabledA(
                pszurl: super::super::Foundation::PSTR,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(IsLoggingEnabledA(pszurl.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn IsLoggingEnabledW<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pwszurl: Param0,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn IsLoggingEnabledW(
                pwszurl: super::super::Foundation::PWSTR,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(IsLoggingEnabledW(pwszurl.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn IsValidURL<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IBindCtx>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pbc: Param0,
    szurl: Param1,
    dwreserved: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn IsValidURL(
                pbc: ::windows::runtime::RawPtr,
                szurl: super::super::Foundation::PWSTR,
                dwreserved: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        IsValidURL(
            pbc.into_param().abi(),
            szurl.into_param().abi(),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct LICINFO {
    pub cbLicInfo: i32,
    pub fRuntimeKeyAvail: super::super::Foundation::BOOL,
    pub fLicVerified: super::super::Foundation::BOOL,
}
#[cfg(feature = "Win32_Foundation")]
impl LICINFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for LICINFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for LICINFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("LICINFO")
            .field("cbLicInfo", &self.cbLicInfo)
            .field("fRuntimeKeyAvail", &self.fRuntimeKeyAvail)
            .field("fLicVerified", &self.fLicVerified)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for LICINFO {
    fn eq(&self, other: &Self) -> bool {
        self.cbLicInfo == other.cbLicInfo
            && self.fRuntimeKeyAvail == other.fRuntimeKeyAvail
            && self.fLicVerified == other.fLicVerified
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for LICINFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for LICINFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct LONG_SIZEDARR {
    pub clSize: u32,
    pub pData: *mut u32,
}
impl LONG_SIZEDARR {}
impl ::std::default::Default for LONG_SIZEDARR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for LONG_SIZEDARR {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("LONG_SIZEDARR")
            .field("clSize", &self.clSize)
            .field("pData", &self.pData)
            .finish()
    }
}
impl ::std::cmp::PartialEq for LONG_SIZEDARR {
    fn eq(&self, other: &Self) -> bool {
        self.clSize == other.clSize && self.pData == other.pData
    }
}
impl ::std::cmp::Eq for LONG_SIZEDARR {}
unsafe impl ::windows::runtime::Abi for LONG_SIZEDARR {
    type Abi = Self;
    type DefaultType = Self;
}
pub type LPFNCANUNLOADNOW = unsafe extern "system" fn() -> ::windows::runtime::HRESULT;
pub type LPFNGETCLASSOBJECT = unsafe extern "system" fn(
    param0: *const ::windows::runtime::GUID,
    param1: *const ::windows::runtime::GUID,
    param2: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::HRESULT;
#[cfg(feature = "Win32_Foundation")]
pub type LPFNOLEUIHOOK = unsafe extern "system" fn(
    param0: super::super::Foundation::HWND,
    param1: u32,
    param2: super::super::Foundation::WPARAM,
    param3: super::super::Foundation::LPARAM,
) -> u32;
pub const LP_COLOR: u32 = 4u32;
pub const LP_DEFAULT: u32 = 0u32;
pub const LP_MONOCHROME: u32 = 1u32;
pub const LP_VGACOLOR: u32 = 2u32;
pub const MAXLSN: u64 = 9223372036854775807u64;
pub const MAX_SIZE_SECURITY_ID: u32 = 512u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct MEDIAPLAYBACK_STATE(pub i32);
pub const MEDIAPLAYBACK_RESUME: MEDIAPLAYBACK_STATE = MEDIAPLAYBACK_STATE(0i32);
pub const MEDIAPLAYBACK_PAUSE: MEDIAPLAYBACK_STATE = MEDIAPLAYBACK_STATE(1i32);
pub const MEDIAPLAYBACK_PAUSE_AND_SUSPEND: MEDIAPLAYBACK_STATE = MEDIAPLAYBACK_STATE(2i32);
pub const MEDIAPLAYBACK_RESUME_FROM_SUSPEND: MEDIAPLAYBACK_STATE = MEDIAPLAYBACK_STATE(3i32);
impl ::std::convert::From<i32> for MEDIAPLAYBACK_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MEDIAPLAYBACK_STATE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct MEMCTX(pub i32);
pub const MEMCTX_TASK: MEMCTX = MEMCTX(1i32);
pub const MEMCTX_SHARED: MEMCTX = MEMCTX(2i32);
pub const MEMCTX_MACSYSTEM: MEMCTX = MEMCTX(3i32);
pub const MEMCTX_UNKNOWN: MEMCTX = MEMCTX(-1i32);
pub const MEMCTX_SAME: MEMCTX = MEMCTX(-2i32);
impl ::std::convert::From<i32> for MEMCTX {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MEMCTX {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct MKREDUCE(pub i32);
pub const MKRREDUCE_ONE: MKREDUCE = MKREDUCE(196608i32);
pub const MKRREDUCE_TOUSER: MKREDUCE = MKREDUCE(131072i32);
pub const MKRREDUCE_THROUGHUSER: MKREDUCE = MKREDUCE(65536i32);
pub const MKRREDUCE_ALL: MKREDUCE = MKREDUCE(0i32);
impl ::std::convert::From<i32> for MKREDUCE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MKREDUCE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct MKSYS(pub i32);
pub const MKSYS_NONE: MKSYS = MKSYS(0i32);
pub const MKSYS_GENERICCOMPOSITE: MKSYS = MKSYS(1i32);
pub const MKSYS_FILEMONIKER: MKSYS = MKSYS(2i32);
pub const MKSYS_ANTIMONIKER: MKSYS = MKSYS(3i32);
pub const MKSYS_ITEMMONIKER: MKSYS = MKSYS(4i32);
pub const MKSYS_POINTERMONIKER: MKSYS = MKSYS(5i32);
pub const MKSYS_CLASSMONIKER: MKSYS = MKSYS(7i32);
pub const MKSYS_OBJREFMONIKER: MKSYS = MKSYS(8i32);
pub const MKSYS_SESSIONMONIKER: MKSYS = MKSYS(9i32);
pub const MKSYS_LUAMONIKER: MKSYS = MKSYS(10i32);
impl ::std::convert::From<i32> for MKSYS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MKSYS {
    type Abi = Self;
    type DefaultType = Self;
}
pub const MKSYS_URLMONIKER: u32 = 6u32;
pub const MK_ALT: u32 = 32u32;
pub const MK_S_ASYNCHRONOUS: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(262632i32 as _);
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct MONIKERPROPERTY(pub i32);
pub const MIMETYPEPROP: MONIKERPROPERTY = MONIKERPROPERTY(0i32);
pub const USE_SRC_URL: MONIKERPROPERTY = MONIKERPROPERTY(1i32);
pub const CLASSIDPROP: MONIKERPROPERTY = MONIKERPROPERTY(2i32);
pub const TRUSTEDDOWNLOADPROP: MONIKERPROPERTY = MONIKERPROPERTY(3i32);
pub const POPUPLEVELPROP: MONIKERPROPERTY = MONIKERPROPERTY(4i32);
impl ::std::convert::From<i32> for MONIKERPROPERTY {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MONIKERPROPERTY {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct MSHCTX(pub i32);
pub const MSHCTX_LOCAL: MSHCTX = MSHCTX(0i32);
pub const MSHCTX_NOSHAREDMEM: MSHCTX = MSHCTX(1i32);
pub const MSHCTX_DIFFERENTMACHINE: MSHCTX = MSHCTX(2i32);
pub const MSHCTX_INPROC: MSHCTX = MSHCTX(3i32);
pub const MSHCTX_CROSSCTX: MSHCTX = MSHCTX(4i32);
pub const MSHCTX_CONTAINER: MSHCTX = MSHCTX(5i32);
impl ::std::convert::From<i32> for MSHCTX {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MSHCTX {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct MSHLFLAGS(pub i32);
pub const MSHLFLAGS_NORMAL: MSHLFLAGS = MSHLFLAGS(0i32);
pub const MSHLFLAGS_TABLESTRONG: MSHLFLAGS = MSHLFLAGS(1i32);
pub const MSHLFLAGS_TABLEWEAK: MSHLFLAGS = MSHLFLAGS(2i32);
pub const MSHLFLAGS_NOPING: MSHLFLAGS = MSHLFLAGS(4i32);
pub const MSHLFLAGS_RESERVED1: MSHLFLAGS = MSHLFLAGS(8i32);
pub const MSHLFLAGS_RESERVED2: MSHLFLAGS = MSHLFLAGS(16i32);
pub const MSHLFLAGS_RESERVED3: MSHLFLAGS = MSHLFLAGS(32i32);
pub const MSHLFLAGS_RESERVED4: MSHLFLAGS = MSHLFLAGS(64i32);
impl ::std::convert::From<i32> for MSHLFLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MSHLFLAGS {
    type Abi = Self;
    type DefaultType = Self;
}
pub const MSOCMDERR_E_CANCELED: i32 = -2147221245i32;
pub const MSOCMDERR_E_DISABLED: i32 = -2147221247i32;
pub const MSOCMDERR_E_FIRST: i32 = -2147221248i32;
pub const MSOCMDERR_E_NOHELP: i32 = -2147221246i32;
pub const MSOCMDERR_E_NOTSUPPORTED: i32 = -2147221248i32;
pub const MSOCMDERR_E_UNKNOWNGROUP: i32 = -2147221244i32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct MULTICLASSINFO_FLAGS(pub u32);
pub const MULTICLASSINFO_GETTYPEINFO: MULTICLASSINFO_FLAGS = MULTICLASSINFO_FLAGS(1u32);
pub const MULTICLASSINFO_GETNUMRESERVEDDISPIDS: MULTICLASSINFO_FLAGS = MULTICLASSINFO_FLAGS(2u32);
pub const MULTICLASSINFO_GETIIDPRIMARY: MULTICLASSINFO_FLAGS = MULTICLASSINFO_FLAGS(4u32);
pub const MULTICLASSINFO_GETIIDSOURCE: MULTICLASSINFO_FLAGS = MULTICLASSINFO_FLAGS(8u32);
impl ::std::convert::From<u32> for MULTICLASSINFO_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MULTICLASSINFO_FLAGS {
    type Abi = Self;
    type DefaultType = Self;
}
impl ::std::ops::BitOr for MULTICLASSINFO_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for MULTICLASSINFO_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for MULTICLASSINFO_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for MULTICLASSINFO_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for MULTICLASSINFO_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
pub struct MULTI_QI {
    pub pIID: *mut ::windows::runtime::GUID,
    pub pItf: ::std::option::Option<::windows::runtime::IUnknown>,
    pub hr: ::windows::runtime::HRESULT,
}
impl MULTI_QI {}
impl ::std::default::Default for MULTI_QI {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for MULTI_QI {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("MULTI_QI")
            .field("pIID", &self.pIID)
            .field("pItf", &self.pItf)
            .field("hr", &self.hr)
            .finish()
    }
}
impl ::std::cmp::PartialEq for MULTI_QI {
    fn eq(&self, other: &Self) -> bool {
        self.pIID == other.pIID && self.pItf == other.pItf && self.hr == other.hr
    }
}
impl ::std::cmp::Eq for MULTI_QI {}
unsafe impl ::windows::runtime::Abi for MULTI_QI {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
pub const MUTZ_ACCEPT_WILDCARD_SCHEME: u32 = 128u32;
pub const MUTZ_DONT_UNESCAPE: u32 = 2048u32;
pub const MUTZ_DONT_USE_CACHE: u32 = 4096u32;
pub const MUTZ_ENFORCERESTRICTED: u32 = 256u32;
pub const MUTZ_FORCE_INTRANET_FLAGS: u32 = 8192u32;
pub const MUTZ_IGNORE_ZONE_MAPPINGS: u32 = 16384u32;
pub const MUTZ_ISFILE: u32 = 2u32;
pub const MUTZ_NOSAVEDFILECHECK: u32 = 1u32;
pub const MUTZ_REQUIRESAVEDFILECHECK: u32 = 1024u32;
pub const MUTZ_RESERVED: u32 = 512u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct MachineGlobalObjectTableRegistrationToken__ {
    pub unused: i32,
}
impl MachineGlobalObjectTableRegistrationToken__ {}
impl ::std::default::Default for MachineGlobalObjectTableRegistrationToken__ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for MachineGlobalObjectTableRegistrationToken__ {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("MachineGlobalObjectTableRegistrationToken__")
            .field("unused", &self.unused)
            .finish()
    }
}
impl ::std::cmp::PartialEq for MachineGlobalObjectTableRegistrationToken__ {
    fn eq(&self, other: &Self) -> bool {
        self.unused == other.unused
    }
}
impl ::std::cmp::Eq for MachineGlobalObjectTableRegistrationToken__ {}
unsafe impl ::windows::runtime::Abi for MachineGlobalObjectTableRegistrationToken__ {
    type Abi = Self;
    type DefaultType = Self;
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn MkParseDisplayName<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IBindCtx>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pbc: Param0,
    szusername: Param1,
    pcheaten: *mut u32,
    ppmk: *mut ::std::option::Option<IMoniker>,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn MkParseDisplayName(
                pbc: ::windows::runtime::RawPtr,
                szusername: super::super::Foundation::PWSTR,
                pcheaten: *mut u32,
                ppmk: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        MkParseDisplayName(
            pbc.into_param().abi(),
            szusername.into_param().abi(),
            ::std::mem::transmute(pcheaten),
            ::std::mem::transmute(ppmk),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn MkParseDisplayNameEx<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IBindCtx>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pbc: Param0,
    szdisplayname: Param1,
    pcheaten: *mut u32,
    ppmk: *mut ::std::option::Option<IMoniker>,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn MkParseDisplayNameEx(
                pbc: ::windows::runtime::RawPtr,
                szdisplayname: super::super::Foundation::PWSTR,
                pcheaten: *mut u32,
                ppmk: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        MkParseDisplayNameEx(
            pbc.into_param().abi(),
            szdisplayname.into_param().abi(),
            ::std::mem::transmute(pcheaten),
            ::std::mem::transmute(ppmk),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn MonikerCommonPrefixWith<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IMoniker>,
    Param1: ::windows::runtime::IntoParam<'a, IMoniker>,
>(
    pmkthis: Param0,
    pmkother: Param1,
) -> ::windows::runtime::Result<IMoniker> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn MonikerCommonPrefixWith(
                pmkthis: ::windows::runtime::RawPtr,
                pmkother: ::windows::runtime::RawPtr,
                ppmkcommon: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IMoniker as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        MonikerCommonPrefixWith(
            pmkthis.into_param().abi(),
            pmkother.into_param().abi(),
            &mut result__,
        )
        .from_abi::<IMoniker>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn MonikerRelativePathTo<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IMoniker>,
    Param1: ::windows::runtime::IntoParam<'a, IMoniker>,
    Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    pmksrc: Param0,
    pmkdest: Param1,
    ppmkrelpath: *mut ::std::option::Option<IMoniker>,
    dwreserved: Param3,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn MonikerRelativePathTo(
                pmksrc: ::windows::runtime::RawPtr,
                pmkdest: ::windows::runtime::RawPtr,
                ppmkrelpath: *mut ::windows::runtime::RawPtr,
                dwreserved: super::super::Foundation::BOOL,
            ) -> ::windows::runtime::HRESULT;
        }
        MonikerRelativePathTo(
            pmksrc.into_param().abi(),
            pmkdest.into_param().abi(),
            ::std::mem::transmute(ppmkrelpath),
            dwreserved.into_param().abi(),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct OBJECTDESCRIPTOR {
    pub cbSize: u32,
    pub clsid: ::windows::runtime::GUID,
    pub dwDrawAspect: u32,
    pub sizel: super::super::Foundation::SIZE,
    pub pointl: super::super::Foundation::POINTL,
    pub dwStatus: u32,
    pub dwFullUserTypeName: u32,
    pub dwSrcOfCopy: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl OBJECTDESCRIPTOR {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for OBJECTDESCRIPTOR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for OBJECTDESCRIPTOR {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OBJECTDESCRIPTOR")
            .field("cbSize", &self.cbSize)
            .field("clsid", &self.clsid)
            .field("dwDrawAspect", &self.dwDrawAspect)
            .field("sizel", &self.sizel)
            .field("pointl", &self.pointl)
            .field("dwStatus", &self.dwStatus)
            .field("dwFullUserTypeName", &self.dwFullUserTypeName)
            .field("dwSrcOfCopy", &self.dwSrcOfCopy)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for OBJECTDESCRIPTOR {
    fn eq(&self, other: &Self) -> bool {
        self.cbSize == other.cbSize
            && self.clsid == other.clsid
            && self.dwDrawAspect == other.dwDrawAspect
            && self.sizel == other.sizel
            && self.pointl == other.pointl
            && self.dwStatus == other.dwStatus
            && self.dwFullUserTypeName == other.dwFullUserTypeName
            && self.dwSrcOfCopy == other.dwSrcOfCopy
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for OBJECTDESCRIPTOR {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for OBJECTDESCRIPTOR {
    type Abi = Self;
    type DefaultType = Self;
}
pub const OCM__BASE: u32 = 8192u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct OCPFIPARAMS {
    pub cbStructSize: u32,
    pub hWndOwner: super::super::Foundation::HWND,
    pub x: i32,
    pub y: i32,
    pub lpszCaption: super::super::Foundation::PWSTR,
    pub cObjects: u32,
    pub lplpUnk: *mut ::std::option::Option<::windows::runtime::IUnknown>,
    pub cPages: u32,
    pub lpPages: *mut ::windows::runtime::GUID,
    pub lcid: u32,
    pub dispidInitialProperty: i32,
}
#[cfg(feature = "Win32_Foundation")]
impl OCPFIPARAMS {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for OCPFIPARAMS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for OCPFIPARAMS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OCPFIPARAMS")
            .field("cbStructSize", &self.cbStructSize)
            .field("hWndOwner", &self.hWndOwner)
            .field("x", &self.x)
            .field("y", &self.y)
            .field("lpszCaption", &self.lpszCaption)
            .field("cObjects", &self.cObjects)
            .field("lplpUnk", &self.lplpUnk)
            .field("cPages", &self.cPages)
            .field("lpPages", &self.lpPages)
            .field("lcid", &self.lcid)
            .field("dispidInitialProperty", &self.dispidInitialProperty)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for OCPFIPARAMS {
    fn eq(&self, other: &Self) -> bool {
        self.cbStructSize == other.cbStructSize
            && self.hWndOwner == other.hWndOwner
            && self.x == other.x
            && self.y == other.y
            && self.lpszCaption == other.lpszCaption
            && self.cObjects == other.cObjects
            && self.lplpUnk == other.lplpUnk
            && self.cPages == other.cPages
            && self.lpPages == other.lpPages
            && self.lcid == other.lcid
            && self.dispidInitialProperty == other.dispidInitialProperty
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for OCPFIPARAMS {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for OCPFIPARAMS {
    type Abi = Self;
    type DefaultType = Self;
}
pub const OF_GET: u32 = 2u32;
pub const OF_HANDLER: u32 = 4u32;
pub const OF_SET: u32 = 1u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct OIBDG_FLAGS(pub i32);
pub const OIBDG_APARTMENTTHREADED: OIBDG_FLAGS = OIBDG_FLAGS(256i32);
pub const OIBDG_DATAONLY: OIBDG_FLAGS = OIBDG_FLAGS(4096i32);
impl ::std::convert::From<i32> for OIBDG_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OIBDG_FLAGS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
pub struct OIFI {
    pub cb: u32,
    pub fMDIApp: super::super::Foundation::BOOL,
    pub hwndFrame: super::super::Foundation::HWND,
    pub haccel: super::super::UI::WindowsAndMessaging::HACCEL,
    pub cAccelEntries: u32,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl OIFI {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::std::default::Default for OIFI {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::std::fmt::Debug for OIFI {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OIFI")
            .field("cb", &self.cb)
            .field("fMDIApp", &self.fMDIApp)
            .field("hwndFrame", &self.hwndFrame)
            .field("haccel", &self.haccel)
            .field("cAccelEntries", &self.cAccelEntries)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::std::cmp::PartialEq for OIFI {
    fn eq(&self, other: &Self) -> bool {
        self.cb == other.cb
            && self.fMDIApp == other.fMDIApp
            && self.hwndFrame == other.hwndFrame
            && self.haccel == other.haccel
            && self.cAccelEntries == other.cAccelEntries
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::std::cmp::Eq for OIFI {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
unsafe impl ::windows::runtime::Abi for OIFI {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct OLECLOSE(pub i32);
pub const OLECLOSE_SAVEIFDIRTY: OLECLOSE = OLECLOSE(0i32);
pub const OLECLOSE_NOSAVE: OLECLOSE = OLECLOSE(1i32);
pub const OLECLOSE_PROMPTSAVE: OLECLOSE = OLECLOSE(2i32);
impl ::std::convert::From<i32> for OLECLOSE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OLECLOSE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct OLECMD {
    pub cmdID: u32,
    pub cmdf: u32,
}
impl OLECMD {}
impl ::std::default::Default for OLECMD {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for OLECMD {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLECMD")
            .field("cmdID", &self.cmdID)
            .field("cmdf", &self.cmdf)
            .finish()
    }
}
impl ::std::cmp::PartialEq for OLECMD {
    fn eq(&self, other: &Self) -> bool {
        self.cmdID == other.cmdID && self.cmdf == other.cmdf
    }
}
impl ::std::cmp::Eq for OLECMD {}
unsafe impl ::windows::runtime::Abi for OLECMD {
    type Abi = Self;
    type DefaultType = Self;
}
pub const OLECMDARGINDEX_ACTIVEXINSTALL_CLSID: u32 = 2u32;
pub const OLECMDARGINDEX_ACTIVEXINSTALL_DISPLAYNAME: u32 = 1u32;
pub const OLECMDARGINDEX_ACTIVEXINSTALL_INSTALLSCOPE: u32 = 3u32;
pub const OLECMDARGINDEX_ACTIVEXINSTALL_PUBLISHER: u32 = 0u32;
pub const OLECMDARGINDEX_ACTIVEXINSTALL_SOURCEURL: u32 = 4u32;
pub const OLECMDARGINDEX_SHOWPAGEACTIONMENU_HWND: u32 = 0u32;
pub const OLECMDARGINDEX_SHOWPAGEACTIONMENU_X: u32 = 1u32;
pub const OLECMDARGINDEX_SHOWPAGEACTIONMENU_Y: u32 = 2u32;
pub const OLECMDERR_E_CANCELED: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2147221245i32 as _);
pub const OLECMDERR_E_DISABLED: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2147221247i32 as _);
pub const OLECMDERR_E_FIRST: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2147221248i32 as _);
pub const OLECMDERR_E_NOHELP: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2147221246i32 as _);
pub const OLECMDERR_E_NOTSUPPORTED: i32 = -2147221248i32;
pub const OLECMDERR_E_UNKNOWNGROUP: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2147221244i32 as _);
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct OLECMDEXECOPT(pub i32);
pub const OLECMDEXECOPT_DODEFAULT: OLECMDEXECOPT = OLECMDEXECOPT(0i32);
pub const OLECMDEXECOPT_PROMPTUSER: OLECMDEXECOPT = OLECMDEXECOPT(1i32);
pub const OLECMDEXECOPT_DONTPROMPTUSER: OLECMDEXECOPT = OLECMDEXECOPT(2i32);
pub const OLECMDEXECOPT_SHOWHELP: OLECMDEXECOPT = OLECMDEXECOPT(3i32);
impl ::std::convert::From<i32> for OLECMDEXECOPT {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OLECMDEXECOPT {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct OLECMDF(pub i32);
pub const OLECMDF_SUPPORTED: OLECMDF = OLECMDF(1i32);
pub const OLECMDF_ENABLED: OLECMDF = OLECMDF(2i32);
pub const OLECMDF_LATCHED: OLECMDF = OLECMDF(4i32);
pub const OLECMDF_NINCHED: OLECMDF = OLECMDF(8i32);
pub const OLECMDF_INVISIBLE: OLECMDF = OLECMDF(16i32);
pub const OLECMDF_DEFHIDEONCTXTMENU: OLECMDF = OLECMDF(32i32);
impl ::std::convert::From<i32> for OLECMDF {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OLECMDF {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct OLECMDID(pub i32);
pub const OLECMDID_OPEN: OLECMDID = OLECMDID(1i32);
pub const OLECMDID_NEW: OLECMDID = OLECMDID(2i32);
pub const OLECMDID_SAVE: OLECMDID = OLECMDID(3i32);
pub const OLECMDID_SAVEAS: OLECMDID = OLECMDID(4i32);
pub const OLECMDID_SAVECOPYAS: OLECMDID = OLECMDID(5i32);
pub const OLECMDID_PRINT: OLECMDID = OLECMDID(6i32);
pub const OLECMDID_PRINTPREVIEW: OLECMDID = OLECMDID(7i32);
pub const OLECMDID_PAGESETUP: OLECMDID = OLECMDID(8i32);
pub const OLECMDID_SPELL: OLECMDID = OLECMDID(9i32);
pub const OLECMDID_PROPERTIES: OLECMDID = OLECMDID(10i32);
pub const OLECMDID_CUT: OLECMDID = OLECMDID(11i32);
pub const OLECMDID_COPY: OLECMDID = OLECMDID(12i32);
pub const OLECMDID_PASTE: OLECMDID = OLECMDID(13i32);
pub const OLECMDID_PASTESPECIAL: OLECMDID = OLECMDID(14i32);
pub const OLECMDID_UNDO: OLECMDID = OLECMDID(15i32);
pub const OLECMDID_REDO: OLECMDID = OLECMDID(16i32);
pub const OLECMDID_SELECTALL: OLECMDID = OLECMDID(17i32);
pub const OLECMDID_CLEARSELECTION: OLECMDID = OLECMDID(18i32);
pub const OLECMDID_ZOOM: OLECMDID = OLECMDID(19i32);
pub const OLECMDID_GETZOOMRANGE: OLECMDID = OLECMDID(20i32);
pub const OLECMDID_UPDATECOMMANDS: OLECMDID = OLECMDID(21i32);
pub const OLECMDID_REFRESH: OLECMDID = OLECMDID(22i32);
pub const OLECMDID_STOP: OLECMDID = OLECMDID(23i32);
pub const OLECMDID_HIDETOOLBARS: OLECMDID = OLECMDID(24i32);
pub const OLECMDID_SETPROGRESSMAX: OLECMDID = OLECMDID(25i32);
pub const OLECMDID_SETPROGRESSPOS: OLECMDID = OLECMDID(26i32);
pub const OLECMDID_SETPROGRESSTEXT: OLECMDID = OLECMDID(27i32);
pub const OLECMDID_SETTITLE: OLECMDID = OLECMDID(28i32);
pub const OLECMDID_SETDOWNLOADSTATE: OLECMDID = OLECMDID(29i32);
pub const OLECMDID_STOPDOWNLOAD: OLECMDID = OLECMDID(30i32);
pub const OLECMDID_ONTOOLBARACTIVATED: OLECMDID = OLECMDID(31i32);
pub const OLECMDID_FIND: OLECMDID = OLECMDID(32i32);
pub const OLECMDID_DELETE: OLECMDID = OLECMDID(33i32);
pub const OLECMDID_HTTPEQUIV: OLECMDID = OLECMDID(34i32);
pub const OLECMDID_HTTPEQUIV_DONE: OLECMDID = OLECMDID(35i32);
pub const OLECMDID_ENABLE_INTERACTION: OLECMDID = OLECMDID(36i32);
pub const OLECMDID_ONUNLOAD: OLECMDID = OLECMDID(37i32);
pub const OLECMDID_PROPERTYBAG2: OLECMDID = OLECMDID(38i32);
pub const OLECMDID_PREREFRESH: OLECMDID = OLECMDID(39i32);
pub const OLECMDID_SHOWSCRIPTERROR: OLECMDID = OLECMDID(40i32);
pub const OLECMDID_SHOWMESSAGE: OLECMDID = OLECMDID(41i32);
pub const OLECMDID_SHOWFIND: OLECMDID = OLECMDID(42i32);
pub const OLECMDID_SHOWPAGESETUP: OLECMDID = OLECMDID(43i32);
pub const OLECMDID_SHOWPRINT: OLECMDID = OLECMDID(44i32);
pub const OLECMDID_CLOSE: OLECMDID = OLECMDID(45i32);
pub const OLECMDID_ALLOWUILESSSAVEAS: OLECMDID = OLECMDID(46i32);
pub const OLECMDID_DONTDOWNLOADCSS: OLECMDID = OLECMDID(47i32);
pub const OLECMDID_UPDATEPAGESTATUS: OLECMDID = OLECMDID(48i32);
pub const OLECMDID_PRINT2: OLECMDID = OLECMDID(49i32);
pub const OLECMDID_PRINTPREVIEW2: OLECMDID = OLECMDID(50i32);
pub const OLECMDID_SETPRINTTEMPLATE: OLECMDID = OLECMDID(51i32);
pub const OLECMDID_GETPRINTTEMPLATE: OLECMDID = OLECMDID(52i32);
pub const OLECMDID_PAGEACTIONBLOCKED: OLECMDID = OLECMDID(55i32);
pub const OLECMDID_PAGEACTIONUIQUERY: OLECMDID = OLECMDID(56i32);
pub const OLECMDID_FOCUSVIEWCONTROLS: OLECMDID = OLECMDID(57i32);
pub const OLECMDID_FOCUSVIEWCONTROLSQUERY: OLECMDID = OLECMDID(58i32);
pub const OLECMDID_SHOWPAGEACTIONMENU: OLECMDID = OLECMDID(59i32);
pub const OLECMDID_ADDTRAVELENTRY: OLECMDID = OLECMDID(60i32);
pub const OLECMDID_UPDATETRAVELENTRY: OLECMDID = OLECMDID(61i32);
pub const OLECMDID_UPDATEBACKFORWARDSTATE: OLECMDID = OLECMDID(62i32);
pub const OLECMDID_OPTICAL_ZOOM: OLECMDID = OLECMDID(63i32);
pub const OLECMDID_OPTICAL_GETZOOMRANGE: OLECMDID = OLECMDID(64i32);
pub const OLECMDID_WINDOWSTATECHANGED: OLECMDID = OLECMDID(65i32);
pub const OLECMDID_ACTIVEXINSTALLSCOPE: OLECMDID = OLECMDID(66i32);
pub const OLECMDID_UPDATETRAVELENTRY_DATARECOVERY: OLECMDID = OLECMDID(67i32);
pub const OLECMDID_SHOWTASKDLG: OLECMDID = OLECMDID(68i32);
pub const OLECMDID_POPSTATEEVENT: OLECMDID = OLECMDID(69i32);
pub const OLECMDID_VIEWPORT_MODE: OLECMDID = OLECMDID(70i32);
pub const OLECMDID_LAYOUT_VIEWPORT_WIDTH: OLECMDID = OLECMDID(71i32);
pub const OLECMDID_VISUAL_VIEWPORT_EXCLUDE_BOTTOM: OLECMDID = OLECMDID(72i32);
pub const OLECMDID_USER_OPTICAL_ZOOM: OLECMDID = OLECMDID(73i32);
pub const OLECMDID_PAGEAVAILABLE: OLECMDID = OLECMDID(74i32);
pub const OLECMDID_GETUSERSCALABLE: OLECMDID = OLECMDID(75i32);
pub const OLECMDID_UPDATE_CARET: OLECMDID = OLECMDID(76i32);
pub const OLECMDID_ENABLE_VISIBILITY: OLECMDID = OLECMDID(77i32);
pub const OLECMDID_MEDIA_PLAYBACK: OLECMDID = OLECMDID(78i32);
pub const OLECMDID_SETFAVICON: OLECMDID = OLECMDID(79i32);
pub const OLECMDID_SET_HOST_FULLSCREENMODE: OLECMDID = OLECMDID(80i32);
pub const OLECMDID_EXITFULLSCREEN: OLECMDID = OLECMDID(81i32);
pub const OLECMDID_SCROLLCOMPLETE: OLECMDID = OLECMDID(82i32);
pub const OLECMDID_ONBEFOREUNLOAD: OLECMDID = OLECMDID(83i32);
pub const OLECMDID_SHOWMESSAGE_BLOCKABLE: OLECMDID = OLECMDID(84i32);
pub const OLECMDID_SHOWTASKDLG_BLOCKABLE: OLECMDID = OLECMDID(85i32);
impl ::std::convert::From<i32> for OLECMDID {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OLECMDID {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct OLECMDID_BROWSERSTATEFLAG(pub i32);
pub const OLECMDIDF_BROWSERSTATE_EXTENSIONSOFF: OLECMDID_BROWSERSTATEFLAG =
    OLECMDID_BROWSERSTATEFLAG(1i32);
pub const OLECMDIDF_BROWSERSTATE_IESECURITY: OLECMDID_BROWSERSTATEFLAG =
    OLECMDID_BROWSERSTATEFLAG(2i32);
pub const OLECMDIDF_BROWSERSTATE_PROTECTEDMODE_OFF: OLECMDID_BROWSERSTATEFLAG =
    OLECMDID_BROWSERSTATEFLAG(4i32);
pub const OLECMDIDF_BROWSERSTATE_RESET: OLECMDID_BROWSERSTATEFLAG = OLECMDID_BROWSERSTATEFLAG(8i32);
pub const OLECMDIDF_BROWSERSTATE_REQUIRESACTIVEX: OLECMDID_BROWSERSTATEFLAG =
    OLECMDID_BROWSERSTATEFLAG(16i32);
pub const OLECMDIDF_BROWSERSTATE_DESKTOPHTMLDIALOG: OLECMDID_BROWSERSTATEFLAG =
    OLECMDID_BROWSERSTATEFLAG(32i32);
pub const OLECMDIDF_BROWSERSTATE_BLOCKEDVERSION: OLECMDID_BROWSERSTATEFLAG =
    OLECMDID_BROWSERSTATEFLAG(64i32);
impl ::std::convert::From<i32> for OLECMDID_BROWSERSTATEFLAG {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OLECMDID_BROWSERSTATEFLAG {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct OLECMDID_OPTICAL_ZOOMFLAG(pub i32);
pub const OLECMDIDF_OPTICAL_ZOOM_NOPERSIST: OLECMDID_OPTICAL_ZOOMFLAG =
    OLECMDID_OPTICAL_ZOOMFLAG(1i32);
pub const OLECMDIDF_OPTICAL_ZOOM_NOLAYOUT: OLECMDID_OPTICAL_ZOOMFLAG =
    OLECMDID_OPTICAL_ZOOMFLAG(16i32);
pub const OLECMDIDF_OPTICAL_ZOOM_NOTRANSIENT: OLECMDID_OPTICAL_ZOOMFLAG =
    OLECMDID_OPTICAL_ZOOMFLAG(32i32);
pub const OLECMDIDF_OPTICAL_ZOOM_RELOADFORNEWTAB: OLECMDID_OPTICAL_ZOOMFLAG =
    OLECMDID_OPTICAL_ZOOMFLAG(64i32);
impl ::std::convert::From<i32> for OLECMDID_OPTICAL_ZOOMFLAG {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OLECMDID_OPTICAL_ZOOMFLAG {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct OLECMDID_PAGEACTIONFLAG(pub i32);
pub const OLECMDIDF_PAGEACTION_FILEDOWNLOAD: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(1i32);
pub const OLECMDIDF_PAGEACTION_ACTIVEXINSTALL: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(2i32);
pub const OLECMDIDF_PAGEACTION_ACTIVEXTRUSTFAIL: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(4i32);
pub const OLECMDIDF_PAGEACTION_ACTIVEXUSERDISABLE: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(8i32);
pub const OLECMDIDF_PAGEACTION_ACTIVEXDISALLOW: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(16i32);
pub const OLECMDIDF_PAGEACTION_ACTIVEXUNSAFE: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(32i32);
pub const OLECMDIDF_PAGEACTION_POPUPWINDOW: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(64i32);
pub const OLECMDIDF_PAGEACTION_LOCALMACHINE: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(128i32);
pub const OLECMDIDF_PAGEACTION_MIMETEXTPLAIN: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(256i32);
pub const OLECMDIDF_PAGEACTION_SCRIPTNAVIGATE: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(512i32);
pub const OLECMDIDF_PAGEACTION_SCRIPTNAVIGATE_ACTIVEXINSTALL: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(512i32);
pub const OLECMDIDF_PAGEACTION_PROTLOCKDOWNLOCALMACHINE: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(1024i32);
pub const OLECMDIDF_PAGEACTION_PROTLOCKDOWNTRUSTED: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(2048i32);
pub const OLECMDIDF_PAGEACTION_PROTLOCKDOWNINTRANET: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(4096i32);
pub const OLECMDIDF_PAGEACTION_PROTLOCKDOWNINTERNET: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(8192i32);
pub const OLECMDIDF_PAGEACTION_PROTLOCKDOWNRESTRICTED: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(16384i32);
pub const OLECMDIDF_PAGEACTION_PROTLOCKDOWNDENY: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(32768i32);
pub const OLECMDIDF_PAGEACTION_POPUPALLOWED: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(65536i32);
pub const OLECMDIDF_PAGEACTION_SCRIPTPROMPT: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(131072i32);
pub const OLECMDIDF_PAGEACTION_ACTIVEXUSERAPPROVAL: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(262144i32);
pub const OLECMDIDF_PAGEACTION_MIXEDCONTENT: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(524288i32);
pub const OLECMDIDF_PAGEACTION_INVALID_CERT: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(1048576i32);
pub const OLECMDIDF_PAGEACTION_INTRANETZONEREQUEST: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(2097152i32);
pub const OLECMDIDF_PAGEACTION_XSSFILTERED: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(4194304i32);
pub const OLECMDIDF_PAGEACTION_SPOOFABLEIDNHOST: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(8388608i32);
pub const OLECMDIDF_PAGEACTION_ACTIVEX_EPM_INCOMPATIBLE: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(16777216i32);
pub const OLECMDIDF_PAGEACTION_SCRIPTNAVIGATE_ACTIVEXUSERAPPROVAL: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(33554432i32);
pub const OLECMDIDF_PAGEACTION_WPCBLOCKED: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(67108864i32);
pub const OLECMDIDF_PAGEACTION_WPCBLOCKED_ACTIVEX: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(134217728i32);
pub const OLECMDIDF_PAGEACTION_EXTENSION_COMPAT_BLOCKED: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(268435456i32);
pub const OLECMDIDF_PAGEACTION_NORESETACTIVEX: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(536870912i32);
pub const OLECMDIDF_PAGEACTION_GENERIC_STATE: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(1073741824i32);
pub const OLECMDIDF_PAGEACTION_RESET: OLECMDID_PAGEACTIONFLAG =
    OLECMDID_PAGEACTIONFLAG(-2147483648i32);
impl ::std::convert::From<i32> for OLECMDID_PAGEACTIONFLAG {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OLECMDID_PAGEACTIONFLAG {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct OLECMDID_REFRESHFLAG(pub i32);
pub const OLECMDIDF_REFRESH_NORMAL: OLECMDID_REFRESHFLAG = OLECMDID_REFRESHFLAG(0i32);
pub const OLECMDIDF_REFRESH_IFEXPIRED: OLECMDID_REFRESHFLAG = OLECMDID_REFRESHFLAG(1i32);
pub const OLECMDIDF_REFRESH_CONTINUE: OLECMDID_REFRESHFLAG = OLECMDID_REFRESHFLAG(2i32);
pub const OLECMDIDF_REFRESH_COMPLETELY: OLECMDID_REFRESHFLAG = OLECMDID_REFRESHFLAG(3i32);
pub const OLECMDIDF_REFRESH_NO_CACHE: OLECMDID_REFRESHFLAG = OLECMDID_REFRESHFLAG(4i32);
pub const OLECMDIDF_REFRESH_RELOAD: OLECMDID_REFRESHFLAG = OLECMDID_REFRESHFLAG(5i32);
pub const OLECMDIDF_REFRESH_LEVELMASK: OLECMDID_REFRESHFLAG = OLECMDID_REFRESHFLAG(255i32);
pub const OLECMDIDF_REFRESH_CLEARUSERINPUT: OLECMDID_REFRESHFLAG = OLECMDID_REFRESHFLAG(4096i32);
pub const OLECMDIDF_REFRESH_PROMPTIFOFFLINE: OLECMDID_REFRESHFLAG = OLECMDID_REFRESHFLAG(8192i32);
pub const OLECMDIDF_REFRESH_THROUGHSCRIPT: OLECMDID_REFRESHFLAG = OLECMDID_REFRESHFLAG(16384i32);
pub const OLECMDIDF_REFRESH_SKIPBEFOREUNLOADEVENT: OLECMDID_REFRESHFLAG =
    OLECMDID_REFRESHFLAG(32768i32);
pub const OLECMDIDF_REFRESH_PAGEACTION_ACTIVEXINSTALL: OLECMDID_REFRESHFLAG =
    OLECMDID_REFRESHFLAG(65536i32);
pub const OLECMDIDF_REFRESH_PAGEACTION_FILEDOWNLOAD: OLECMDID_REFRESHFLAG =
    OLECMDID_REFRESHFLAG(131072i32);
pub const OLECMDIDF_REFRESH_PAGEACTION_LOCALMACHINE: OLECMDID_REFRESHFLAG =
    OLECMDID_REFRESHFLAG(262144i32);
pub const OLECMDIDF_REFRESH_PAGEACTION_POPUPWINDOW: OLECMDID_REFRESHFLAG =
    OLECMDID_REFRESHFLAG(524288i32);
pub const OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNLOCALMACHINE: OLECMDID_REFRESHFLAG =
    OLECMDID_REFRESHFLAG(1048576i32);
pub const OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNTRUSTED: OLECMDID_REFRESHFLAG =
    OLECMDID_REFRESHFLAG(2097152i32);
pub const OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNINTRANET: OLECMDID_REFRESHFLAG =
    OLECMDID_REFRESHFLAG(4194304i32);
pub const OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNINTERNET: OLECMDID_REFRESHFLAG =
    OLECMDID_REFRESHFLAG(8388608i32);
pub const OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNRESTRICTED: OLECMDID_REFRESHFLAG =
    OLECMDID_REFRESHFLAG(16777216i32);
pub const OLECMDIDF_REFRESH_PAGEACTION_MIXEDCONTENT: OLECMDID_REFRESHFLAG =
    OLECMDID_REFRESHFLAG(33554432i32);
pub const OLECMDIDF_REFRESH_PAGEACTION_INVALID_CERT: OLECMDID_REFRESHFLAG =
    OLECMDID_REFRESHFLAG(67108864i32);
pub const OLECMDIDF_REFRESH_PAGEACTION_ALLOW_VERSION: OLECMDID_REFRESHFLAG =
    OLECMDID_REFRESHFLAG(134217728i32);
impl ::std::convert::From<i32> for OLECMDID_REFRESHFLAG {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OLECMDID_REFRESHFLAG {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct OLECMDID_VIEWPORT_MODE_FLAG(pub i32);
pub const OLECMDIDF_VIEWPORTMODE_FIXED_LAYOUT_WIDTH: OLECMDID_VIEWPORT_MODE_FLAG =
    OLECMDID_VIEWPORT_MODE_FLAG(1i32);
pub const OLECMDIDF_VIEWPORTMODE_EXCLUDE_VISUAL_BOTTOM: OLECMDID_VIEWPORT_MODE_FLAG =
    OLECMDID_VIEWPORT_MODE_FLAG(2i32);
pub const OLECMDIDF_VIEWPORTMODE_FIXED_LAYOUT_WIDTH_VALID: OLECMDID_VIEWPORT_MODE_FLAG =
    OLECMDID_VIEWPORT_MODE_FLAG(65536i32);
pub const OLECMDIDF_VIEWPORTMODE_EXCLUDE_VISUAL_BOTTOM_VALID: OLECMDID_VIEWPORT_MODE_FLAG =
    OLECMDID_VIEWPORT_MODE_FLAG(131072i32);
impl ::std::convert::From<i32> for OLECMDID_VIEWPORT_MODE_FLAG {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OLECMDID_VIEWPORT_MODE_FLAG {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct OLECMDID_WINDOWSTATE_FLAG(pub i32);
pub const OLECMDIDF_WINDOWSTATE_USERVISIBLE: OLECMDID_WINDOWSTATE_FLAG =
    OLECMDID_WINDOWSTATE_FLAG(1i32);
pub const OLECMDIDF_WINDOWSTATE_ENABLED: OLECMDID_WINDOWSTATE_FLAG =
    OLECMDID_WINDOWSTATE_FLAG(2i32);
pub const OLECMDIDF_WINDOWSTATE_USERVISIBLE_VALID: OLECMDID_WINDOWSTATE_FLAG =
    OLECMDID_WINDOWSTATE_FLAG(65536i32);
pub const OLECMDIDF_WINDOWSTATE_ENABLED_VALID: OLECMDID_WINDOWSTATE_FLAG =
    OLECMDID_WINDOWSTATE_FLAG(131072i32);
impl ::std::convert::From<i32> for OLECMDID_WINDOWSTATE_FLAG {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OLECMDID_WINDOWSTATE_FLAG {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct OLECMDTEXT {
    pub cmdtextf: u32,
    pub cwActual: u32,
    pub cwBuf: u32,
    pub rgwz: [u16; 1],
}
impl OLECMDTEXT {}
impl ::std::default::Default for OLECMDTEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for OLECMDTEXT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLECMDTEXT")
            .field("cmdtextf", &self.cmdtextf)
            .field("cwActual", &self.cwActual)
            .field("cwBuf", &self.cwBuf)
            .field("rgwz", &self.rgwz)
            .finish()
    }
}
impl ::std::cmp::PartialEq for OLECMDTEXT {
    fn eq(&self, other: &Self) -> bool {
        self.cmdtextf == other.cmdtextf
            && self.cwActual == other.cwActual
            && self.cwBuf == other.cwBuf
            && self.rgwz == other.rgwz
    }
}
impl ::std::cmp::Eq for OLECMDTEXT {}
unsafe impl ::windows::runtime::Abi for OLECMDTEXT {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct OLECMDTEXTF(pub i32);
pub const OLECMDTEXTF_NONE: OLECMDTEXTF = OLECMDTEXTF(0i32);
pub const OLECMDTEXTF_NAME: OLECMDTEXTF = OLECMDTEXTF(1i32);
pub const OLECMDTEXTF_STATUS: OLECMDTEXTF = OLECMDTEXTF(2i32);
impl ::std::convert::From<i32> for OLECMDTEXTF {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OLECMDTEXTF {
    type Abi = Self;
    type DefaultType = Self;
}
pub const OLECMD_TASKDLGID_ONBEFOREUNLOAD: u32 = 1u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct OLECONTF(pub i32);
pub const OLECONTF_EMBEDDINGS: OLECONTF = OLECONTF(1i32);
pub const OLECONTF_LINKS: OLECONTF = OLECONTF(2i32);
pub const OLECONTF_OTHERS: OLECONTF = OLECONTF(4i32);
pub const OLECONTF_ONLYUSER: OLECONTF = OLECONTF(8i32);
pub const OLECONTF_ONLYIFRUNNING: OLECONTF = OLECONTF(16i32);
impl ::std::convert::From<i32> for OLECONTF {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OLECONTF {
    type Abi = Self;
    type DefaultType = Self;
}
pub const OLECREATE_LEAVERUNNING: u32 = 1u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct OLEDCFLAGS(pub i32);
pub const OLEDC_NODRAW: OLEDCFLAGS = OLEDCFLAGS(1i32);
pub const OLEDC_PAINTBKGND: OLEDCFLAGS = OLEDCFLAGS(2i32);
pub const OLEDC_OFFSCREEN: OLEDCFLAGS = OLEDCFLAGS(4i32);
impl ::std::convert::From<i32> for OLEDCFLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OLEDCFLAGS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct OLEGETMONIKER(pub i32);
pub const OLEGETMONIKER_ONLYIFTHERE: OLEGETMONIKER = OLEGETMONIKER(1i32);
pub const OLEGETMONIKER_FORCEASSIGN: OLEGETMONIKER = OLEGETMONIKER(2i32);
pub const OLEGETMONIKER_UNASSIGN: OLEGETMONIKER = OLEGETMONIKER(3i32);
pub const OLEGETMONIKER_TEMPFORUSER: OLEGETMONIKER = OLEGETMONIKER(4i32);
impl ::std::convert::From<i32> for OLEGETMONIKER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OLEGETMONIKER {
    type Abi = Self;
    type DefaultType = Self;
}
pub const OLEIVERB_DISCARDUNDOSTATE: i32 = -6i32;
pub const OLEIVERB_HIDE: i32 = -3i32;
pub const OLEIVERB_INPLACEACTIVATE: i32 = -5i32;
pub const OLEIVERB_OPEN: i32 = -2i32;
pub const OLEIVERB_PRIMARY: i32 = 0i32;
pub const OLEIVERB_PROPERTIES: i32 = -7i32;
pub const OLEIVERB_SHOW: i32 = -1i32;
pub const OLEIVERB_UIACTIVATE: i32 = -4i32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct OLELINKBIND(pub i32);
pub const OLELINKBIND_EVENIFCLASSDIFF: OLELINKBIND = OLELINKBIND(1i32);
impl ::std::convert::From<i32> for OLELINKBIND {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OLELINKBIND {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct OLEMISC(pub i32);
pub const OLEMISC_RECOMPOSEONRESIZE: OLEMISC = OLEMISC(1i32);
pub const OLEMISC_ONLYICONIC: OLEMISC = OLEMISC(2i32);
pub const OLEMISC_INSERTNOTREPLACE: OLEMISC = OLEMISC(4i32);
pub const OLEMISC_STATIC: OLEMISC = OLEMISC(8i32);
pub const OLEMISC_CANTLINKINSIDE: OLEMISC = OLEMISC(16i32);
pub const OLEMISC_CANLINKBYOLE1: OLEMISC = OLEMISC(32i32);
pub const OLEMISC_ISLINKOBJECT: OLEMISC = OLEMISC(64i32);
pub const OLEMISC_INSIDEOUT: OLEMISC = OLEMISC(128i32);
pub const OLEMISC_ACTIVATEWHENVISIBLE: OLEMISC = OLEMISC(256i32);
pub const OLEMISC_RENDERINGISDEVICEINDEPENDENT: OLEMISC = OLEMISC(512i32);
pub const OLEMISC_INVISIBLEATRUNTIME: OLEMISC = OLEMISC(1024i32);
pub const OLEMISC_ALWAYSRUN: OLEMISC = OLEMISC(2048i32);
pub const OLEMISC_ACTSLIKEBUTTON: OLEMISC = OLEMISC(4096i32);
pub const OLEMISC_ACTSLIKELABEL: OLEMISC = OLEMISC(8192i32);
pub const OLEMISC_NOUIACTIVATE: OLEMISC = OLEMISC(16384i32);
pub const OLEMISC_ALIGNABLE: OLEMISC = OLEMISC(32768i32);
pub const OLEMISC_SIMPLEFRAME: OLEMISC = OLEMISC(65536i32);
pub const OLEMISC_SETCLIENTSITEFIRST: OLEMISC = OLEMISC(131072i32);
pub const OLEMISC_IMEMODE: OLEMISC = OLEMISC(262144i32);
pub const OLEMISC_IGNOREACTIVATEWHENVISIBLE: OLEMISC = OLEMISC(524288i32);
pub const OLEMISC_WANTSTOMENUMERGE: OLEMISC = OLEMISC(1048576i32);
pub const OLEMISC_SUPPORTSMULTILEVELUNDO: OLEMISC = OLEMISC(2097152i32);
impl ::std::convert::From<i32> for OLEMISC {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OLEMISC {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct OLERENDER(pub i32);
pub const OLERENDER_NONE: OLERENDER = OLERENDER(0i32);
pub const OLERENDER_DRAW: OLERENDER = OLERENDER(1i32);
pub const OLERENDER_FORMAT: OLERENDER = OLERENDER(2i32);
pub const OLERENDER_ASIS: OLERENDER = OLERENDER(3i32);
impl ::std::convert::From<i32> for OLERENDER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OLERENDER {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct OLESTREAM {
    pub lpstbl: *mut OLESTREAMVTBL,
}
impl OLESTREAM {}
impl ::std::default::Default for OLESTREAM {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for OLESTREAM {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLESTREAM")
            .field("lpstbl", &self.lpstbl)
            .finish()
    }
}
impl ::std::cmp::PartialEq for OLESTREAM {
    fn eq(&self, other: &Self) -> bool {
        self.lpstbl == other.lpstbl
    }
}
impl ::std::cmp::Eq for OLESTREAM {}
unsafe impl ::windows::runtime::Abi for OLESTREAM {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct OLESTREAMVTBL {
    pub Get: isize,
    pub Put: isize,
}
impl OLESTREAMVTBL {}
impl ::std::default::Default for OLESTREAMVTBL {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for OLESTREAMVTBL {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLESTREAMVTBL")
            .field("Get", &self.Get)
            .field("Put", &self.Put)
            .finish()
    }
}
impl ::std::cmp::PartialEq for OLESTREAMVTBL {
    fn eq(&self, other: &Self) -> bool {
        self.Get == other.Get && self.Put == other.Put
    }
}
impl ::std::cmp::Eq for OLESTREAMVTBL {}
unsafe impl ::windows::runtime::Abi for OLESTREAMVTBL {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Media_Audio_CoreAudio",
    feature = "Win32_System_LibraryLoader"
))]
pub struct OLEUIBUSYA {
    pub cbStruct: u32,
    pub dwFlags: u32,
    pub hWndOwner: super::super::Foundation::HWND,
    pub lpszCaption: super::super::Foundation::PSTR,
    pub lpfnHook: ::std::option::Option<LPFNOLEUIHOOK>,
    pub lCustData: super::super::Foundation::LPARAM,
    pub hInstance: super::super::Foundation::HINSTANCE,
    pub lpszTemplate: super::super::Foundation::PSTR,
    pub hResource: super::LibraryLoader::HRSRC,
    pub hTask: super::super::Media::Audio::CoreAudio::HTASK,
    pub lphWndDialog: *mut super::super::Foundation::HWND,
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Media_Audio_CoreAudio",
    feature = "Win32_System_LibraryLoader"
))]
impl OLEUIBUSYA {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Media_Audio_CoreAudio",
    feature = "Win32_System_LibraryLoader"
))]
impl ::std::default::Default for OLEUIBUSYA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Media_Audio_CoreAudio",
    feature = "Win32_System_LibraryLoader"
))]
impl ::std::fmt::Debug for OLEUIBUSYA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUIBUSYA")
            .field("cbStruct", &self.cbStruct)
            .field("dwFlags", &self.dwFlags)
            .field("hWndOwner", &self.hWndOwner)
            .field("lpszCaption", &self.lpszCaption)
            .field("lCustData", &self.lCustData)
            .field("hInstance", &self.hInstance)
            .field("lpszTemplate", &self.lpszTemplate)
            .field("hResource", &self.hResource)
            .field("hTask", &self.hTask)
            .field("lphWndDialog", &self.lphWndDialog)
            .finish()
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Media_Audio_CoreAudio",
    feature = "Win32_System_LibraryLoader"
))]
impl ::std::cmp::PartialEq for OLEUIBUSYA {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.dwFlags == other.dwFlags
            && self.hWndOwner == other.hWndOwner
            && self.lpszCaption == other.lpszCaption
            && self.lpfnHook.map(|f| f as usize) == other.lpfnHook.map(|f| f as usize)
            && self.lCustData == other.lCustData
            && self.hInstance == other.hInstance
            && self.lpszTemplate == other.lpszTemplate
            && self.hResource == other.hResource
            && self.hTask == other.hTask
            && self.lphWndDialog == other.lphWndDialog
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Media_Audio_CoreAudio",
    feature = "Win32_System_LibraryLoader"
))]
impl ::std::cmp::Eq for OLEUIBUSYA {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Media_Audio_CoreAudio",
    feature = "Win32_System_LibraryLoader"
))]
unsafe impl ::windows::runtime::Abi for OLEUIBUSYA {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Media_Audio_CoreAudio",
    feature = "Win32_System_LibraryLoader"
))]
pub struct OLEUIBUSYW {
    pub cbStruct: u32,
    pub dwFlags: u32,
    pub hWndOwner: super::super::Foundation::HWND,
    pub lpszCaption: super::super::Foundation::PWSTR,
    pub lpfnHook: ::std::option::Option<LPFNOLEUIHOOK>,
    pub lCustData: super::super::Foundation::LPARAM,
    pub hInstance: super::super::Foundation::HINSTANCE,
    pub lpszTemplate: super::super::Foundation::PWSTR,
    pub hResource: super::LibraryLoader::HRSRC,
    pub hTask: super::super::Media::Audio::CoreAudio::HTASK,
    pub lphWndDialog: *mut super::super::Foundation::HWND,
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Media_Audio_CoreAudio",
    feature = "Win32_System_LibraryLoader"
))]
impl OLEUIBUSYW {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Media_Audio_CoreAudio",
    feature = "Win32_System_LibraryLoader"
))]
impl ::std::default::Default for OLEUIBUSYW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Media_Audio_CoreAudio",
    feature = "Win32_System_LibraryLoader"
))]
impl ::std::fmt::Debug for OLEUIBUSYW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUIBUSYW")
            .field("cbStruct", &self.cbStruct)
            .field("dwFlags", &self.dwFlags)
            .field("hWndOwner", &self.hWndOwner)
            .field("lpszCaption", &self.lpszCaption)
            .field("lCustData", &self.lCustData)
            .field("hInstance", &self.hInstance)
            .field("lpszTemplate", &self.lpszTemplate)
            .field("hResource", &self.hResource)
            .field("hTask", &self.hTask)
            .field("lphWndDialog", &self.lphWndDialog)
            .finish()
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Media_Audio_CoreAudio",
    feature = "Win32_System_LibraryLoader"
))]
impl ::std::cmp::PartialEq for OLEUIBUSYW {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.dwFlags == other.dwFlags
            && self.hWndOwner == other.hWndOwner
            && self.lpszCaption == other.lpszCaption
            && self.lpfnHook.map(|f| f as usize) == other.lpfnHook.map(|f| f as usize)
            && self.lCustData == other.lCustData
            && self.hInstance == other.hInstance
            && self.lpszTemplate == other.lpszTemplate
            && self.hResource == other.hResource
            && self.hTask == other.hTask
            && self.lphWndDialog == other.lphWndDialog
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Media_Audio_CoreAudio",
    feature = "Win32_System_LibraryLoader"
))]
impl ::std::cmp::Eq for OLEUIBUSYW {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Media_Audio_CoreAudio",
    feature = "Win32_System_LibraryLoader"
))]
unsafe impl ::windows::runtime::Abi for OLEUIBUSYW {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_System_SystemServices"
))]
pub struct OLEUICHANGEICONA {
    pub cbStruct: u32,
    pub dwFlags: u32,
    pub hWndOwner: super::super::Foundation::HWND,
    pub lpszCaption: super::super::Foundation::PSTR,
    pub lpfnHook: ::std::option::Option<LPFNOLEUIHOOK>,
    pub lCustData: super::super::Foundation::LPARAM,
    pub hInstance: super::super::Foundation::HINSTANCE,
    pub lpszTemplate: super::super::Foundation::PSTR,
    pub hResource: super::LibraryLoader::HRSRC,
    pub hMetaPict: isize,
    pub clsid: ::windows::runtime::GUID,
    pub szIconExe: [super::SystemServices::CHAR; 260],
    pub cchIconExe: i32,
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_System_SystemServices"
))]
impl OLEUICHANGEICONA {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_System_SystemServices"
))]
impl ::std::default::Default for OLEUICHANGEICONA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_System_SystemServices"
))]
impl ::std::fmt::Debug for OLEUICHANGEICONA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUICHANGEICONA")
            .field("cbStruct", &self.cbStruct)
            .field("dwFlags", &self.dwFlags)
            .field("hWndOwner", &self.hWndOwner)
            .field("lpszCaption", &self.lpszCaption)
            .field("lCustData", &self.lCustData)
            .field("hInstance", &self.hInstance)
            .field("lpszTemplate", &self.lpszTemplate)
            .field("hResource", &self.hResource)
            .field("hMetaPict", &self.hMetaPict)
            .field("clsid", &self.clsid)
            .field("szIconExe", &self.szIconExe)
            .field("cchIconExe", &self.cchIconExe)
            .finish()
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_System_SystemServices"
))]
impl ::std::cmp::PartialEq for OLEUICHANGEICONA {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.dwFlags == other.dwFlags
            && self.hWndOwner == other.hWndOwner
            && self.lpszCaption == other.lpszCaption
            && self.lpfnHook.map(|f| f as usize) == other.lpfnHook.map(|f| f as usize)
            && self.lCustData == other.lCustData
            && self.hInstance == other.hInstance
            && self.lpszTemplate == other.lpszTemplate
            && self.hResource == other.hResource
            && self.hMetaPict == other.hMetaPict
            && self.clsid == other.clsid
            && self.szIconExe == other.szIconExe
            && self.cchIconExe == other.cchIconExe
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_System_SystemServices"
))]
impl ::std::cmp::Eq for OLEUICHANGEICONA {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_System_SystemServices"
))]
unsafe impl ::windows::runtime::Abi for OLEUICHANGEICONA {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
pub struct OLEUICHANGEICONW {
    pub cbStruct: u32,
    pub dwFlags: u32,
    pub hWndOwner: super::super::Foundation::HWND,
    pub lpszCaption: super::super::Foundation::PWSTR,
    pub lpfnHook: ::std::option::Option<LPFNOLEUIHOOK>,
    pub lCustData: super::super::Foundation::LPARAM,
    pub hInstance: super::super::Foundation::HINSTANCE,
    pub lpszTemplate: super::super::Foundation::PWSTR,
    pub hResource: super::LibraryLoader::HRSRC,
    pub hMetaPict: isize,
    pub clsid: ::windows::runtime::GUID,
    pub szIconExe: [u16; 260],
    pub cchIconExe: i32,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl OLEUICHANGEICONW {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::default::Default for OLEUICHANGEICONW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::fmt::Debug for OLEUICHANGEICONW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUICHANGEICONW")
            .field("cbStruct", &self.cbStruct)
            .field("dwFlags", &self.dwFlags)
            .field("hWndOwner", &self.hWndOwner)
            .field("lpszCaption", &self.lpszCaption)
            .field("lCustData", &self.lCustData)
            .field("hInstance", &self.hInstance)
            .field("lpszTemplate", &self.lpszTemplate)
            .field("hResource", &self.hResource)
            .field("hMetaPict", &self.hMetaPict)
            .field("clsid", &self.clsid)
            .field("szIconExe", &self.szIconExe)
            .field("cchIconExe", &self.cchIconExe)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::cmp::PartialEq for OLEUICHANGEICONW {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.dwFlags == other.dwFlags
            && self.hWndOwner == other.hWndOwner
            && self.lpszCaption == other.lpszCaption
            && self.lpfnHook.map(|f| f as usize) == other.lpfnHook.map(|f| f as usize)
            && self.lCustData == other.lCustData
            && self.hInstance == other.hInstance
            && self.lpszTemplate == other.lpszTemplate
            && self.hResource == other.hResource
            && self.hMetaPict == other.hMetaPict
            && self.clsid == other.clsid
            && self.szIconExe == other.szIconExe
            && self.cchIconExe == other.cchIconExe
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::cmp::Eq for OLEUICHANGEICONW {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
unsafe impl ::windows::runtime::Abi for OLEUICHANGEICONW {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_UI_WindowsAndMessaging"
))]
pub struct OLEUICHANGESOURCEA {
    pub cbStruct: u32,
    pub dwFlags: u32,
    pub hWndOwner: super::super::Foundation::HWND,
    pub lpszCaption: super::super::Foundation::PSTR,
    pub lpfnHook: ::std::option::Option<LPFNOLEUIHOOK>,
    pub lCustData: super::super::Foundation::LPARAM,
    pub hInstance: super::super::Foundation::HINSTANCE,
    pub lpszTemplate: super::super::Foundation::PSTR,
    pub hResource: super::LibraryLoader::HRSRC,
    pub lpOFN: *mut super::super::UI::WindowsAndMessaging::OPENFILENAMEA,
    pub dwReserved1: [u32; 4],
    pub lpOleUILinkContainer: ::std::option::Option<IOleUILinkContainerA>,
    pub dwLink: u32,
    pub lpszDisplayName: super::super::Foundation::PSTR,
    pub nFileLength: u32,
    pub lpszFrom: super::super::Foundation::PSTR,
    pub lpszTo: super::super::Foundation::PSTR,
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl OLEUICHANGESOURCEA {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::default::Default for OLEUICHANGESOURCEA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::fmt::Debug for OLEUICHANGESOURCEA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUICHANGESOURCEA")
            .field("cbStruct", &self.cbStruct)
            .field("dwFlags", &self.dwFlags)
            .field("hWndOwner", &self.hWndOwner)
            .field("lpszCaption", &self.lpszCaption)
            .field("lCustData", &self.lCustData)
            .field("hInstance", &self.hInstance)
            .field("lpszTemplate", &self.lpszTemplate)
            .field("hResource", &self.hResource)
            .field("lpOFN", &self.lpOFN)
            .field("dwReserved1", &self.dwReserved1)
            .field("lpOleUILinkContainer", &self.lpOleUILinkContainer)
            .field("dwLink", &self.dwLink)
            .field("lpszDisplayName", &self.lpszDisplayName)
            .field("nFileLength", &self.nFileLength)
            .field("lpszFrom", &self.lpszFrom)
            .field("lpszTo", &self.lpszTo)
            .finish()
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::PartialEq for OLEUICHANGESOURCEA {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.dwFlags == other.dwFlags
            && self.hWndOwner == other.hWndOwner
            && self.lpszCaption == other.lpszCaption
            && self.lpfnHook.map(|f| f as usize) == other.lpfnHook.map(|f| f as usize)
            && self.lCustData == other.lCustData
            && self.hInstance == other.hInstance
            && self.lpszTemplate == other.lpszTemplate
            && self.hResource == other.hResource
            && self.lpOFN == other.lpOFN
            && self.dwReserved1 == other.dwReserved1
            && self.lpOleUILinkContainer == other.lpOleUILinkContainer
            && self.dwLink == other.dwLink
            && self.lpszDisplayName == other.lpszDisplayName
            && self.nFileLength == other.nFileLength
            && self.lpszFrom == other.lpszFrom
            && self.lpszTo == other.lpszTo
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::Eq for OLEUICHANGESOURCEA {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_UI_WindowsAndMessaging"
))]
unsafe impl ::windows::runtime::Abi for OLEUICHANGESOURCEA {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_UI_WindowsAndMessaging"
))]
pub struct OLEUICHANGESOURCEW {
    pub cbStruct: u32,
    pub dwFlags: u32,
    pub hWndOwner: super::super::Foundation::HWND,
    pub lpszCaption: super::super::Foundation::PWSTR,
    pub lpfnHook: ::std::option::Option<LPFNOLEUIHOOK>,
    pub lCustData: super::super::Foundation::LPARAM,
    pub hInstance: super::super::Foundation::HINSTANCE,
    pub lpszTemplate: super::super::Foundation::PWSTR,
    pub hResource: super::LibraryLoader::HRSRC,
    pub lpOFN: *mut super::super::UI::WindowsAndMessaging::OPENFILENAMEW,
    pub dwReserved1: [u32; 4],
    pub lpOleUILinkContainer: ::std::option::Option<IOleUILinkContainerW>,
    pub dwLink: u32,
    pub lpszDisplayName: super::super::Foundation::PWSTR,
    pub nFileLength: u32,
    pub lpszFrom: super::super::Foundation::PWSTR,
    pub lpszTo: super::super::Foundation::PWSTR,
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl OLEUICHANGESOURCEW {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::default::Default for OLEUICHANGESOURCEW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::fmt::Debug for OLEUICHANGESOURCEW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUICHANGESOURCEW")
            .field("cbStruct", &self.cbStruct)
            .field("dwFlags", &self.dwFlags)
            .field("hWndOwner", &self.hWndOwner)
            .field("lpszCaption", &self.lpszCaption)
            .field("lCustData", &self.lCustData)
            .field("hInstance", &self.hInstance)
            .field("lpszTemplate", &self.lpszTemplate)
            .field("hResource", &self.hResource)
            .field("lpOFN", &self.lpOFN)
            .field("dwReserved1", &self.dwReserved1)
            .field("lpOleUILinkContainer", &self.lpOleUILinkContainer)
            .field("dwLink", &self.dwLink)
            .field("lpszDisplayName", &self.lpszDisplayName)
            .field("nFileLength", &self.nFileLength)
            .field("lpszFrom", &self.lpszFrom)
            .field("lpszTo", &self.lpszTo)
            .finish()
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::PartialEq for OLEUICHANGESOURCEW {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.dwFlags == other.dwFlags
            && self.hWndOwner == other.hWndOwner
            && self.lpszCaption == other.lpszCaption
            && self.lpfnHook.map(|f| f as usize) == other.lpfnHook.map(|f| f as usize)
            && self.lCustData == other.lCustData
            && self.hInstance == other.hInstance
            && self.lpszTemplate == other.lpszTemplate
            && self.hResource == other.hResource
            && self.lpOFN == other.lpOFN
            && self.dwReserved1 == other.dwReserved1
            && self.lpOleUILinkContainer == other.lpOleUILinkContainer
            && self.dwLink == other.dwLink
            && self.lpszDisplayName == other.lpszDisplayName
            && self.nFileLength == other.nFileLength
            && self.lpszFrom == other.lpszFrom
            && self.lpszTo == other.lpszTo
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::Eq for OLEUICHANGESOURCEW {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_UI_WindowsAndMessaging"
))]
unsafe impl ::windows::runtime::Abi for OLEUICHANGESOURCEW {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
pub struct OLEUICONVERTA {
    pub cbStruct: u32,
    pub dwFlags: u32,
    pub hWndOwner: super::super::Foundation::HWND,
    pub lpszCaption: super::super::Foundation::PSTR,
    pub lpfnHook: ::std::option::Option<LPFNOLEUIHOOK>,
    pub lCustData: super::super::Foundation::LPARAM,
    pub hInstance: super::super::Foundation::HINSTANCE,
    pub lpszTemplate: super::super::Foundation::PSTR,
    pub hResource: super::LibraryLoader::HRSRC,
    pub clsid: ::windows::runtime::GUID,
    pub clsidConvertDefault: ::windows::runtime::GUID,
    pub clsidActivateDefault: ::windows::runtime::GUID,
    pub clsidNew: ::windows::runtime::GUID,
    pub dvAspect: u32,
    pub wFormat: u16,
    pub fIsLinkedObject: super::super::Foundation::BOOL,
    pub hMetaPict: isize,
    pub lpszUserType: super::super::Foundation::PSTR,
    pub fObjectsIconChanged: super::super::Foundation::BOOL,
    pub lpszDefLabel: super::super::Foundation::PSTR,
    pub cClsidExclude: u32,
    pub lpClsidExclude: *mut ::windows::runtime::GUID,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl OLEUICONVERTA {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::default::Default for OLEUICONVERTA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::fmt::Debug for OLEUICONVERTA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUICONVERTA")
            .field("cbStruct", &self.cbStruct)
            .field("dwFlags", &self.dwFlags)
            .field("hWndOwner", &self.hWndOwner)
            .field("lpszCaption", &self.lpszCaption)
            .field("lCustData", &self.lCustData)
            .field("hInstance", &self.hInstance)
            .field("lpszTemplate", &self.lpszTemplate)
            .field("hResource", &self.hResource)
            .field("clsid", &self.clsid)
            .field("clsidConvertDefault", &self.clsidConvertDefault)
            .field("clsidActivateDefault", &self.clsidActivateDefault)
            .field("clsidNew", &self.clsidNew)
            .field("dvAspect", &self.dvAspect)
            .field("wFormat", &self.wFormat)
            .field("fIsLinkedObject", &self.fIsLinkedObject)
            .field("hMetaPict", &self.hMetaPict)
            .field("lpszUserType", &self.lpszUserType)
            .field("fObjectsIconChanged", &self.fObjectsIconChanged)
            .field("lpszDefLabel", &self.lpszDefLabel)
            .field("cClsidExclude", &self.cClsidExclude)
            .field("lpClsidExclude", &self.lpClsidExclude)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::cmp::PartialEq for OLEUICONVERTA {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.dwFlags == other.dwFlags
            && self.hWndOwner == other.hWndOwner
            && self.lpszCaption == other.lpszCaption
            && self.lpfnHook.map(|f| f as usize) == other.lpfnHook.map(|f| f as usize)
            && self.lCustData == other.lCustData
            && self.hInstance == other.hInstance
            && self.lpszTemplate == other.lpszTemplate
            && self.hResource == other.hResource
            && self.clsid == other.clsid
            && self.clsidConvertDefault == other.clsidConvertDefault
            && self.clsidActivateDefault == other.clsidActivateDefault
            && self.clsidNew == other.clsidNew
            && self.dvAspect == other.dvAspect
            && self.wFormat == other.wFormat
            && self.fIsLinkedObject == other.fIsLinkedObject
            && self.hMetaPict == other.hMetaPict
            && self.lpszUserType == other.lpszUserType
            && self.fObjectsIconChanged == other.fObjectsIconChanged
            && self.lpszDefLabel == other.lpszDefLabel
            && self.cClsidExclude == other.cClsidExclude
            && self.lpClsidExclude == other.lpClsidExclude
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::cmp::Eq for OLEUICONVERTA {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
unsafe impl ::windows::runtime::Abi for OLEUICONVERTA {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
pub struct OLEUICONVERTW {
    pub cbStruct: u32,
    pub dwFlags: u32,
    pub hWndOwner: super::super::Foundation::HWND,
    pub lpszCaption: super::super::Foundation::PWSTR,
    pub lpfnHook: ::std::option::Option<LPFNOLEUIHOOK>,
    pub lCustData: super::super::Foundation::LPARAM,
    pub hInstance: super::super::Foundation::HINSTANCE,
    pub lpszTemplate: super::super::Foundation::PWSTR,
    pub hResource: super::LibraryLoader::HRSRC,
    pub clsid: ::windows::runtime::GUID,
    pub clsidConvertDefault: ::windows::runtime::GUID,
    pub clsidActivateDefault: ::windows::runtime::GUID,
    pub clsidNew: ::windows::runtime::GUID,
    pub dvAspect: u32,
    pub wFormat: u16,
    pub fIsLinkedObject: super::super::Foundation::BOOL,
    pub hMetaPict: isize,
    pub lpszUserType: super::super::Foundation::PWSTR,
    pub fObjectsIconChanged: super::super::Foundation::BOOL,
    pub lpszDefLabel: super::super::Foundation::PWSTR,
    pub cClsidExclude: u32,
    pub lpClsidExclude: *mut ::windows::runtime::GUID,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl OLEUICONVERTW {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::default::Default for OLEUICONVERTW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::fmt::Debug for OLEUICONVERTW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUICONVERTW")
            .field("cbStruct", &self.cbStruct)
            .field("dwFlags", &self.dwFlags)
            .field("hWndOwner", &self.hWndOwner)
            .field("lpszCaption", &self.lpszCaption)
            .field("lCustData", &self.lCustData)
            .field("hInstance", &self.hInstance)
            .field("lpszTemplate", &self.lpszTemplate)
            .field("hResource", &self.hResource)
            .field("clsid", &self.clsid)
            .field("clsidConvertDefault", &self.clsidConvertDefault)
            .field("clsidActivateDefault", &self.clsidActivateDefault)
            .field("clsidNew", &self.clsidNew)
            .field("dvAspect", &self.dvAspect)
            .field("wFormat", &self.wFormat)
            .field("fIsLinkedObject", &self.fIsLinkedObject)
            .field("hMetaPict", &self.hMetaPict)
            .field("lpszUserType", &self.lpszUserType)
            .field("fObjectsIconChanged", &self.fObjectsIconChanged)
            .field("lpszDefLabel", &self.lpszDefLabel)
            .field("cClsidExclude", &self.cClsidExclude)
            .field("lpClsidExclude", &self.lpClsidExclude)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::cmp::PartialEq for OLEUICONVERTW {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.dwFlags == other.dwFlags
            && self.hWndOwner == other.hWndOwner
            && self.lpszCaption == other.lpszCaption
            && self.lpfnHook.map(|f| f as usize) == other.lpfnHook.map(|f| f as usize)
            && self.lCustData == other.lCustData
            && self.hInstance == other.hInstance
            && self.lpszTemplate == other.lpszTemplate
            && self.hResource == other.hResource
            && self.clsid == other.clsid
            && self.clsidConvertDefault == other.clsidConvertDefault
            && self.clsidActivateDefault == other.clsidActivateDefault
            && self.clsidNew == other.clsidNew
            && self.dvAspect == other.dvAspect
            && self.wFormat == other.wFormat
            && self.fIsLinkedObject == other.fIsLinkedObject
            && self.hMetaPict == other.hMetaPict
            && self.lpszUserType == other.lpszUserType
            && self.fObjectsIconChanged == other.fObjectsIconChanged
            && self.lpszDefLabel == other.lpszDefLabel
            && self.cClsidExclude == other.cClsidExclude
            && self.lpClsidExclude == other.lpClsidExclude
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::cmp::Eq for OLEUICONVERTW {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
unsafe impl ::windows::runtime::Abi for OLEUICONVERTW {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
pub struct OLEUIEDITLINKSA {
    pub cbStruct: u32,
    pub dwFlags: u32,
    pub hWndOwner: super::super::Foundation::HWND,
    pub lpszCaption: super::super::Foundation::PSTR,
    pub lpfnHook: ::std::option::Option<LPFNOLEUIHOOK>,
    pub lCustData: super::super::Foundation::LPARAM,
    pub hInstance: super::super::Foundation::HINSTANCE,
    pub lpszTemplate: super::super::Foundation::PSTR,
    pub hResource: super::LibraryLoader::HRSRC,
    pub lpOleUILinkContainer: ::std::option::Option<IOleUILinkContainerA>,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl OLEUIEDITLINKSA {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::default::Default for OLEUIEDITLINKSA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::fmt::Debug for OLEUIEDITLINKSA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUIEDITLINKSA")
            .field("cbStruct", &self.cbStruct)
            .field("dwFlags", &self.dwFlags)
            .field("hWndOwner", &self.hWndOwner)
            .field("lpszCaption", &self.lpszCaption)
            .field("lCustData", &self.lCustData)
            .field("hInstance", &self.hInstance)
            .field("lpszTemplate", &self.lpszTemplate)
            .field("hResource", &self.hResource)
            .field("lpOleUILinkContainer", &self.lpOleUILinkContainer)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::cmp::PartialEq for OLEUIEDITLINKSA {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.dwFlags == other.dwFlags
            && self.hWndOwner == other.hWndOwner
            && self.lpszCaption == other.lpszCaption
            && self.lpfnHook.map(|f| f as usize) == other.lpfnHook.map(|f| f as usize)
            && self.lCustData == other.lCustData
            && self.hInstance == other.hInstance
            && self.lpszTemplate == other.lpszTemplate
            && self.hResource == other.hResource
            && self.lpOleUILinkContainer == other.lpOleUILinkContainer
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::cmp::Eq for OLEUIEDITLINKSA {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
unsafe impl ::windows::runtime::Abi for OLEUIEDITLINKSA {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
pub struct OLEUIEDITLINKSW {
    pub cbStruct: u32,
    pub dwFlags: u32,
    pub hWndOwner: super::super::Foundation::HWND,
    pub lpszCaption: super::super::Foundation::PWSTR,
    pub lpfnHook: ::std::option::Option<LPFNOLEUIHOOK>,
    pub lCustData: super::super::Foundation::LPARAM,
    pub hInstance: super::super::Foundation::HINSTANCE,
    pub lpszTemplate: super::super::Foundation::PWSTR,
    pub hResource: super::LibraryLoader::HRSRC,
    pub lpOleUILinkContainer: ::std::option::Option<IOleUILinkContainerW>,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl OLEUIEDITLINKSW {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::default::Default for OLEUIEDITLINKSW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::fmt::Debug for OLEUIEDITLINKSW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUIEDITLINKSW")
            .field("cbStruct", &self.cbStruct)
            .field("dwFlags", &self.dwFlags)
            .field("hWndOwner", &self.hWndOwner)
            .field("lpszCaption", &self.lpszCaption)
            .field("lCustData", &self.lCustData)
            .field("hInstance", &self.hInstance)
            .field("lpszTemplate", &self.lpszTemplate)
            .field("hResource", &self.hResource)
            .field("lpOleUILinkContainer", &self.lpOleUILinkContainer)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::cmp::PartialEq for OLEUIEDITLINKSW {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.dwFlags == other.dwFlags
            && self.hWndOwner == other.hWndOwner
            && self.lpszCaption == other.lpszCaption
            && self.lpfnHook.map(|f| f as usize) == other.lpfnHook.map(|f| f as usize)
            && self.lCustData == other.lCustData
            && self.hInstance == other.hInstance
            && self.lpszTemplate == other.lpszTemplate
            && self.hResource == other.hResource
            && self.lpOleUILinkContainer == other.lpOleUILinkContainer
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::cmp::Eq for OLEUIEDITLINKSW {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
unsafe impl ::windows::runtime::Abi for OLEUIEDITLINKSW {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
pub struct OLEUIGNRLPROPSA {
    pub cbStruct: u32,
    pub dwFlags: u32,
    pub dwReserved1: [u32; 2],
    pub lpfnHook: ::std::option::Option<LPFNOLEUIHOOK>,
    pub lCustData: super::super::Foundation::LPARAM,
    pub dwReserved2: [u32; 3],
    pub lpOP: *mut OLEUIOBJECTPROPSA,
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl OLEUIGNRLPROPSA {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::default::Default for OLEUIGNRLPROPSA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::fmt::Debug for OLEUIGNRLPROPSA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUIGNRLPROPSA")
            .field("cbStruct", &self.cbStruct)
            .field("dwFlags", &self.dwFlags)
            .field("dwReserved1", &self.dwReserved1)
            .field("lCustData", &self.lCustData)
            .field("dwReserved2", &self.dwReserved2)
            .field("lpOP", &self.lpOP)
            .finish()
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::PartialEq for OLEUIGNRLPROPSA {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.dwFlags == other.dwFlags
            && self.dwReserved1 == other.dwReserved1
            && self.lpfnHook.map(|f| f as usize) == other.lpfnHook.map(|f| f as usize)
            && self.lCustData == other.lCustData
            && self.dwReserved2 == other.dwReserved2
            && self.lpOP == other.lpOP
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::Eq for OLEUIGNRLPROPSA {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
unsafe impl ::windows::runtime::Abi for OLEUIGNRLPROPSA {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
pub struct OLEUIGNRLPROPSW {
    pub cbStruct: u32,
    pub dwFlags: u32,
    pub dwReserved1: [u32; 2],
    pub lpfnHook: ::std::option::Option<LPFNOLEUIHOOK>,
    pub lCustData: super::super::Foundation::LPARAM,
    pub dwReserved2: [u32; 3],
    pub lpOP: *mut OLEUIOBJECTPROPSW,
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl OLEUIGNRLPROPSW {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::default::Default for OLEUIGNRLPROPSW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::fmt::Debug for OLEUIGNRLPROPSW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUIGNRLPROPSW")
            .field("cbStruct", &self.cbStruct)
            .field("dwFlags", &self.dwFlags)
            .field("dwReserved1", &self.dwReserved1)
            .field("lCustData", &self.lCustData)
            .field("dwReserved2", &self.dwReserved2)
            .field("lpOP", &self.lpOP)
            .finish()
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::PartialEq for OLEUIGNRLPROPSW {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.dwFlags == other.dwFlags
            && self.dwReserved1 == other.dwReserved1
            && self.lpfnHook.map(|f| f as usize) == other.lpfnHook.map(|f| f as usize)
            && self.lCustData == other.lCustData
            && self.dwReserved2 == other.dwReserved2
            && self.lpOP == other.lpOP
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::Eq for OLEUIGNRLPROPSW {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
unsafe impl ::windows::runtime::Abi for OLEUIGNRLPROPSW {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage",
    feature = "Win32_System_LibraryLoader"
))]
pub struct OLEUIINSERTOBJECTA {
    pub cbStruct: u32,
    pub dwFlags: u32,
    pub hWndOwner: super::super::Foundation::HWND,
    pub lpszCaption: super::super::Foundation::PSTR,
    pub lpfnHook: ::std::option::Option<LPFNOLEUIHOOK>,
    pub lCustData: super::super::Foundation::LPARAM,
    pub hInstance: super::super::Foundation::HINSTANCE,
    pub lpszTemplate: super::super::Foundation::PSTR,
    pub hResource: super::LibraryLoader::HRSRC,
    pub clsid: ::windows::runtime::GUID,
    pub lpszFile: super::super::Foundation::PSTR,
    pub cchFile: u32,
    pub cClsidExclude: u32,
    pub lpClsidExclude: *mut ::windows::runtime::GUID,
    pub iid: ::windows::runtime::GUID,
    pub oleRender: u32,
    pub lpFormatEtc: *mut FORMATETC,
    pub lpIOleClientSite: ::std::option::Option<IOleClientSite>,
    pub lpIStorage: ::std::option::Option<super::super::Storage::StructuredStorage::IStorage>,
    pub ppvObj: *mut *mut ::std::ffi::c_void,
    pub sc: i32,
    pub hMetaPict: isize,
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage",
    feature = "Win32_System_LibraryLoader"
))]
impl OLEUIINSERTOBJECTA {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage",
    feature = "Win32_System_LibraryLoader"
))]
impl ::std::default::Default for OLEUIINSERTOBJECTA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage",
    feature = "Win32_System_LibraryLoader"
))]
impl ::std::fmt::Debug for OLEUIINSERTOBJECTA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUIINSERTOBJECTA")
            .field("cbStruct", &self.cbStruct)
            .field("dwFlags", &self.dwFlags)
            .field("hWndOwner", &self.hWndOwner)
            .field("lpszCaption", &self.lpszCaption)
            .field("lCustData", &self.lCustData)
            .field("hInstance", &self.hInstance)
            .field("lpszTemplate", &self.lpszTemplate)
            .field("hResource", &self.hResource)
            .field("clsid", &self.clsid)
            .field("lpszFile", &self.lpszFile)
            .field("cchFile", &self.cchFile)
            .field("cClsidExclude", &self.cClsidExclude)
            .field("lpClsidExclude", &self.lpClsidExclude)
            .field("iid", &self.iid)
            .field("oleRender", &self.oleRender)
            .field("lpFormatEtc", &self.lpFormatEtc)
            .field("lpIOleClientSite", &self.lpIOleClientSite)
            .field("lpIStorage", &self.lpIStorage)
            .field("ppvObj", &self.ppvObj)
            .field("sc", &self.sc)
            .field("hMetaPict", &self.hMetaPict)
            .finish()
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage",
    feature = "Win32_System_LibraryLoader"
))]
impl ::std::cmp::PartialEq for OLEUIINSERTOBJECTA {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.dwFlags == other.dwFlags
            && self.hWndOwner == other.hWndOwner
            && self.lpszCaption == other.lpszCaption
            && self.lpfnHook.map(|f| f as usize) == other.lpfnHook.map(|f| f as usize)
            && self.lCustData == other.lCustData
            && self.hInstance == other.hInstance
            && self.lpszTemplate == other.lpszTemplate
            && self.hResource == other.hResource
            && self.clsid == other.clsid
            && self.lpszFile == other.lpszFile
            && self.cchFile == other.cchFile
            && self.cClsidExclude == other.cClsidExclude
            && self.lpClsidExclude == other.lpClsidExclude
            && self.iid == other.iid
            && self.oleRender == other.oleRender
            && self.lpFormatEtc == other.lpFormatEtc
            && self.lpIOleClientSite == other.lpIOleClientSite
            && self.lpIStorage == other.lpIStorage
            && self.ppvObj == other.ppvObj
            && self.sc == other.sc
            && self.hMetaPict == other.hMetaPict
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage",
    feature = "Win32_System_LibraryLoader"
))]
impl ::std::cmp::Eq for OLEUIINSERTOBJECTA {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage",
    feature = "Win32_System_LibraryLoader"
))]
unsafe impl ::windows::runtime::Abi for OLEUIINSERTOBJECTA {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage",
    feature = "Win32_System_LibraryLoader"
))]
pub struct OLEUIINSERTOBJECTW {
    pub cbStruct: u32,
    pub dwFlags: u32,
    pub hWndOwner: super::super::Foundation::HWND,
    pub lpszCaption: super::super::Foundation::PWSTR,
    pub lpfnHook: ::std::option::Option<LPFNOLEUIHOOK>,
    pub lCustData: super::super::Foundation::LPARAM,
    pub hInstance: super::super::Foundation::HINSTANCE,
    pub lpszTemplate: super::super::Foundation::PWSTR,
    pub hResource: super::LibraryLoader::HRSRC,
    pub clsid: ::windows::runtime::GUID,
    pub lpszFile: super::super::Foundation::PWSTR,
    pub cchFile: u32,
    pub cClsidExclude: u32,
    pub lpClsidExclude: *mut ::windows::runtime::GUID,
    pub iid: ::windows::runtime::GUID,
    pub oleRender: u32,
    pub lpFormatEtc: *mut FORMATETC,
    pub lpIOleClientSite: ::std::option::Option<IOleClientSite>,
    pub lpIStorage: ::std::option::Option<super::super::Storage::StructuredStorage::IStorage>,
    pub ppvObj: *mut *mut ::std::ffi::c_void,
    pub sc: i32,
    pub hMetaPict: isize,
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage",
    feature = "Win32_System_LibraryLoader"
))]
impl OLEUIINSERTOBJECTW {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage",
    feature = "Win32_System_LibraryLoader"
))]
impl ::std::default::Default for OLEUIINSERTOBJECTW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage",
    feature = "Win32_System_LibraryLoader"
))]
impl ::std::fmt::Debug for OLEUIINSERTOBJECTW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUIINSERTOBJECTW")
            .field("cbStruct", &self.cbStruct)
            .field("dwFlags", &self.dwFlags)
            .field("hWndOwner", &self.hWndOwner)
            .field("lpszCaption", &self.lpszCaption)
            .field("lCustData", &self.lCustData)
            .field("hInstance", &self.hInstance)
            .field("lpszTemplate", &self.lpszTemplate)
            .field("hResource", &self.hResource)
            .field("clsid", &self.clsid)
            .field("lpszFile", &self.lpszFile)
            .field("cchFile", &self.cchFile)
            .field("cClsidExclude", &self.cClsidExclude)
            .field("lpClsidExclude", &self.lpClsidExclude)
            .field("iid", &self.iid)
            .field("oleRender", &self.oleRender)
            .field("lpFormatEtc", &self.lpFormatEtc)
            .field("lpIOleClientSite", &self.lpIOleClientSite)
            .field("lpIStorage", &self.lpIStorage)
            .field("ppvObj", &self.ppvObj)
            .field("sc", &self.sc)
            .field("hMetaPict", &self.hMetaPict)
            .finish()
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage",
    feature = "Win32_System_LibraryLoader"
))]
impl ::std::cmp::PartialEq for OLEUIINSERTOBJECTW {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.dwFlags == other.dwFlags
            && self.hWndOwner == other.hWndOwner
            && self.lpszCaption == other.lpszCaption
            && self.lpfnHook.map(|f| f as usize) == other.lpfnHook.map(|f| f as usize)
            && self.lCustData == other.lCustData
            && self.hInstance == other.hInstance
            && self.lpszTemplate == other.lpszTemplate
            && self.hResource == other.hResource
            && self.clsid == other.clsid
            && self.lpszFile == other.lpszFile
            && self.cchFile == other.cchFile
            && self.cClsidExclude == other.cClsidExclude
            && self.lpClsidExclude == other.lpClsidExclude
            && self.iid == other.iid
            && self.oleRender == other.oleRender
            && self.lpFormatEtc == other.lpFormatEtc
            && self.lpIOleClientSite == other.lpIOleClientSite
            && self.lpIStorage == other.lpIStorage
            && self.ppvObj == other.ppvObj
            && self.sc == other.sc
            && self.hMetaPict == other.hMetaPict
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage",
    feature = "Win32_System_LibraryLoader"
))]
impl ::std::cmp::Eq for OLEUIINSERTOBJECTW {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage",
    feature = "Win32_System_LibraryLoader"
))]
unsafe impl ::windows::runtime::Abi for OLEUIINSERTOBJECTW {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
pub struct OLEUILINKPROPSA {
    pub cbStruct: u32,
    pub dwFlags: u32,
    pub dwReserved1: [u32; 2],
    pub lpfnHook: ::std::option::Option<LPFNOLEUIHOOK>,
    pub lCustData: super::super::Foundation::LPARAM,
    pub dwReserved2: [u32; 3],
    pub lpOP: *mut OLEUIOBJECTPROPSA,
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl OLEUILINKPROPSA {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::default::Default for OLEUILINKPROPSA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::fmt::Debug for OLEUILINKPROPSA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUILINKPROPSA")
            .field("cbStruct", &self.cbStruct)
            .field("dwFlags", &self.dwFlags)
            .field("dwReserved1", &self.dwReserved1)
            .field("lCustData", &self.lCustData)
            .field("dwReserved2", &self.dwReserved2)
            .field("lpOP", &self.lpOP)
            .finish()
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::PartialEq for OLEUILINKPROPSA {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.dwFlags == other.dwFlags
            && self.dwReserved1 == other.dwReserved1
            && self.lpfnHook.map(|f| f as usize) == other.lpfnHook.map(|f| f as usize)
            && self.lCustData == other.lCustData
            && self.dwReserved2 == other.dwReserved2
            && self.lpOP == other.lpOP
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::Eq for OLEUILINKPROPSA {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
unsafe impl ::windows::runtime::Abi for OLEUILINKPROPSA {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
pub struct OLEUILINKPROPSW {
    pub cbStruct: u32,
    pub dwFlags: u32,
    pub dwReserved1: [u32; 2],
    pub lpfnHook: ::std::option::Option<LPFNOLEUIHOOK>,
    pub lCustData: super::super::Foundation::LPARAM,
    pub dwReserved2: [u32; 3],
    pub lpOP: *mut OLEUIOBJECTPROPSW,
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl OLEUILINKPROPSW {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::default::Default for OLEUILINKPROPSW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::fmt::Debug for OLEUILINKPROPSW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUILINKPROPSW")
            .field("cbStruct", &self.cbStruct)
            .field("dwFlags", &self.dwFlags)
            .field("dwReserved1", &self.dwReserved1)
            .field("lCustData", &self.lCustData)
            .field("dwReserved2", &self.dwReserved2)
            .field("lpOP", &self.lpOP)
            .finish()
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::PartialEq for OLEUILINKPROPSW {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.dwFlags == other.dwFlags
            && self.dwReserved1 == other.dwReserved1
            && self.lpfnHook.map(|f| f as usize) == other.lpfnHook.map(|f| f as usize)
            && self.lCustData == other.lCustData
            && self.dwReserved2 == other.dwReserved2
            && self.lpOP == other.lpOP
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::Eq for OLEUILINKPROPSW {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
unsafe impl ::windows::runtime::Abi for OLEUILINKPROPSW {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
pub struct OLEUIOBJECTPROPSA {
    pub cbStruct: u32,
    pub dwFlags: u32,
    pub lpPS: *mut super::super::UI::Controls::PROPSHEETHEADERA_V2,
    pub dwObject: u32,
    pub lpObjInfo: ::std::option::Option<IOleUIObjInfoA>,
    pub dwLink: u32,
    pub lpLinkInfo: ::std::option::Option<IOleUILinkInfoA>,
    pub lpGP: *mut OLEUIGNRLPROPSA,
    pub lpVP: *mut OLEUIVIEWPROPSA,
    pub lpLP: *mut OLEUILINKPROPSA,
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl OLEUIOBJECTPROPSA {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::default::Default for OLEUIOBJECTPROPSA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::fmt::Debug for OLEUIOBJECTPROPSA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUIOBJECTPROPSA")
            .field("cbStruct", &self.cbStruct)
            .field("dwFlags", &self.dwFlags)
            .field("lpPS", &self.lpPS)
            .field("dwObject", &self.dwObject)
            .field("lpObjInfo", &self.lpObjInfo)
            .field("dwLink", &self.dwLink)
            .field("lpLinkInfo", &self.lpLinkInfo)
            .field("lpGP", &self.lpGP)
            .field("lpVP", &self.lpVP)
            .field("lpLP", &self.lpLP)
            .finish()
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::PartialEq for OLEUIOBJECTPROPSA {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.dwFlags == other.dwFlags
            && self.lpPS == other.lpPS
            && self.dwObject == other.dwObject
            && self.lpObjInfo == other.lpObjInfo
            && self.dwLink == other.dwLink
            && self.lpLinkInfo == other.lpLinkInfo
            && self.lpGP == other.lpGP
            && self.lpVP == other.lpVP
            && self.lpLP == other.lpLP
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::Eq for OLEUIOBJECTPROPSA {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
unsafe impl ::windows::runtime::Abi for OLEUIOBJECTPROPSA {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
pub struct OLEUIOBJECTPROPSW {
    pub cbStruct: u32,
    pub dwFlags: u32,
    pub lpPS: *mut super::super::UI::Controls::PROPSHEETHEADERW_V2,
    pub dwObject: u32,
    pub lpObjInfo: ::std::option::Option<IOleUIObjInfoW>,
    pub dwLink: u32,
    pub lpLinkInfo: ::std::option::Option<IOleUILinkInfoW>,
    pub lpGP: *mut OLEUIGNRLPROPSW,
    pub lpVP: *mut OLEUIVIEWPROPSW,
    pub lpLP: *mut OLEUILINKPROPSW,
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl OLEUIOBJECTPROPSW {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::default::Default for OLEUIOBJECTPROPSW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::fmt::Debug for OLEUIOBJECTPROPSW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUIOBJECTPROPSW")
            .field("cbStruct", &self.cbStruct)
            .field("dwFlags", &self.dwFlags)
            .field("lpPS", &self.lpPS)
            .field("dwObject", &self.dwObject)
            .field("lpObjInfo", &self.lpObjInfo)
            .field("dwLink", &self.dwLink)
            .field("lpLinkInfo", &self.lpLinkInfo)
            .field("lpGP", &self.lpGP)
            .field("lpVP", &self.lpVP)
            .field("lpLP", &self.lpLP)
            .finish()
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::PartialEq for OLEUIOBJECTPROPSW {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.dwFlags == other.dwFlags
            && self.lpPS == other.lpPS
            && self.dwObject == other.dwObject
            && self.lpObjInfo == other.lpObjInfo
            && self.dwLink == other.dwLink
            && self.lpLinkInfo == other.lpLinkInfo
            && self.lpGP == other.lpGP
            && self.lpVP == other.lpVP
            && self.lpLP == other.lpLP
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::Eq for OLEUIOBJECTPROPSW {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
unsafe impl ::windows::runtime::Abi for OLEUIOBJECTPROPSW {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct OLEUIPASTEENTRYA {
    pub fmtetc: FORMATETC,
    pub lpstrFormatName: super::super::Foundation::PSTR,
    pub lpstrResultText: super::super::Foundation::PSTR,
    pub dwFlags: u32,
    pub dwScratchSpace: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl OLEUIPASTEENTRYA {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for OLEUIPASTEENTRYA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for OLEUIPASTEENTRYA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUIPASTEENTRYA")
            .field("fmtetc", &self.fmtetc)
            .field("lpstrFormatName", &self.lpstrFormatName)
            .field("lpstrResultText", &self.lpstrResultText)
            .field("dwFlags", &self.dwFlags)
            .field("dwScratchSpace", &self.dwScratchSpace)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for OLEUIPASTEENTRYA {
    fn eq(&self, other: &Self) -> bool {
        self.fmtetc == other.fmtetc
            && self.lpstrFormatName == other.lpstrFormatName
            && self.lpstrResultText == other.lpstrResultText
            && self.dwFlags == other.dwFlags
            && self.dwScratchSpace == other.dwScratchSpace
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for OLEUIPASTEENTRYA {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for OLEUIPASTEENTRYA {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct OLEUIPASTEENTRYW {
    pub fmtetc: FORMATETC,
    pub lpstrFormatName: super::super::Foundation::PWSTR,
    pub lpstrResultText: super::super::Foundation::PWSTR,
    pub dwFlags: u32,
    pub dwScratchSpace: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl OLEUIPASTEENTRYW {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for OLEUIPASTEENTRYW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for OLEUIPASTEENTRYW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUIPASTEENTRYW")
            .field("fmtetc", &self.fmtetc)
            .field("lpstrFormatName", &self.lpstrFormatName)
            .field("lpstrResultText", &self.lpstrResultText)
            .field("dwFlags", &self.dwFlags)
            .field("dwScratchSpace", &self.dwScratchSpace)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for OLEUIPASTEENTRYW {
    fn eq(&self, other: &Self) -> bool {
        self.fmtetc == other.fmtetc
            && self.lpstrFormatName == other.lpstrFormatName
            && self.lpstrResultText == other.lpstrResultText
            && self.dwFlags == other.dwFlags
            && self.dwScratchSpace == other.dwScratchSpace
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for OLEUIPASTEENTRYW {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for OLEUIPASTEENTRYW {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct OLEUIPASTEFLAG(pub i32);
pub const OLEUIPASTE_ENABLEICON: OLEUIPASTEFLAG = OLEUIPASTEFLAG(2048i32);
pub const OLEUIPASTE_PASTEONLY: OLEUIPASTEFLAG = OLEUIPASTEFLAG(0i32);
pub const OLEUIPASTE_PASTE: OLEUIPASTEFLAG = OLEUIPASTEFLAG(512i32);
pub const OLEUIPASTE_LINKANYTYPE: OLEUIPASTEFLAG = OLEUIPASTEFLAG(1024i32);
pub const OLEUIPASTE_LINKTYPE1: OLEUIPASTEFLAG = OLEUIPASTEFLAG(1i32);
pub const OLEUIPASTE_LINKTYPE2: OLEUIPASTEFLAG = OLEUIPASTEFLAG(2i32);
pub const OLEUIPASTE_LINKTYPE3: OLEUIPASTEFLAG = OLEUIPASTEFLAG(4i32);
pub const OLEUIPASTE_LINKTYPE4: OLEUIPASTEFLAG = OLEUIPASTEFLAG(8i32);
pub const OLEUIPASTE_LINKTYPE5: OLEUIPASTEFLAG = OLEUIPASTEFLAG(16i32);
pub const OLEUIPASTE_LINKTYPE6: OLEUIPASTEFLAG = OLEUIPASTEFLAG(32i32);
pub const OLEUIPASTE_LINKTYPE7: OLEUIPASTEFLAG = OLEUIPASTEFLAG(64i32);
pub const OLEUIPASTE_LINKTYPE8: OLEUIPASTEFLAG = OLEUIPASTEFLAG(128i32);
impl ::std::convert::From<i32> for OLEUIPASTEFLAG {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OLEUIPASTEFLAG {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
pub struct OLEUIPASTESPECIALA {
    pub cbStruct: u32,
    pub dwFlags: u32,
    pub hWndOwner: super::super::Foundation::HWND,
    pub lpszCaption: super::super::Foundation::PSTR,
    pub lpfnHook: ::std::option::Option<LPFNOLEUIHOOK>,
    pub lCustData: super::super::Foundation::LPARAM,
    pub hInstance: super::super::Foundation::HINSTANCE,
    pub lpszTemplate: super::super::Foundation::PSTR,
    pub hResource: super::LibraryLoader::HRSRC,
    pub lpSrcDataObj: ::std::option::Option<IDataObject>,
    pub arrPasteEntries: *mut OLEUIPASTEENTRYA,
    pub cPasteEntries: i32,
    pub arrLinkTypes: *mut u32,
    pub cLinkTypes: i32,
    pub cClsidExclude: u32,
    pub lpClsidExclude: *mut ::windows::runtime::GUID,
    pub nSelectedIndex: i32,
    pub fLink: super::super::Foundation::BOOL,
    pub hMetaPict: isize,
    pub sizel: super::super::Foundation::SIZE,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl OLEUIPASTESPECIALA {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::default::Default for OLEUIPASTESPECIALA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::fmt::Debug for OLEUIPASTESPECIALA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUIPASTESPECIALA")
            .field("cbStruct", &self.cbStruct)
            .field("dwFlags", &self.dwFlags)
            .field("hWndOwner", &self.hWndOwner)
            .field("lpszCaption", &self.lpszCaption)
            .field("lCustData", &self.lCustData)
            .field("hInstance", &self.hInstance)
            .field("lpszTemplate", &self.lpszTemplate)
            .field("hResource", &self.hResource)
            .field("lpSrcDataObj", &self.lpSrcDataObj)
            .field("arrPasteEntries", &self.arrPasteEntries)
            .field("cPasteEntries", &self.cPasteEntries)
            .field("arrLinkTypes", &self.arrLinkTypes)
            .field("cLinkTypes", &self.cLinkTypes)
            .field("cClsidExclude", &self.cClsidExclude)
            .field("lpClsidExclude", &self.lpClsidExclude)
            .field("nSelectedIndex", &self.nSelectedIndex)
            .field("fLink", &self.fLink)
            .field("hMetaPict", &self.hMetaPict)
            .field("sizel", &self.sizel)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::cmp::PartialEq for OLEUIPASTESPECIALA {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.dwFlags == other.dwFlags
            && self.hWndOwner == other.hWndOwner
            && self.lpszCaption == other.lpszCaption
            && self.lpfnHook.map(|f| f as usize) == other.lpfnHook.map(|f| f as usize)
            && self.lCustData == other.lCustData
            && self.hInstance == other.hInstance
            && self.lpszTemplate == other.lpszTemplate
            && self.hResource == other.hResource
            && self.lpSrcDataObj == other.lpSrcDataObj
            && self.arrPasteEntries == other.arrPasteEntries
            && self.cPasteEntries == other.cPasteEntries
            && self.arrLinkTypes == other.arrLinkTypes
            && self.cLinkTypes == other.cLinkTypes
            && self.cClsidExclude == other.cClsidExclude
            && self.lpClsidExclude == other.lpClsidExclude
            && self.nSelectedIndex == other.nSelectedIndex
            && self.fLink == other.fLink
            && self.hMetaPict == other.hMetaPict
            && self.sizel == other.sizel
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::cmp::Eq for OLEUIPASTESPECIALA {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
unsafe impl ::windows::runtime::Abi for OLEUIPASTESPECIALA {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
pub struct OLEUIPASTESPECIALW {
    pub cbStruct: u32,
    pub dwFlags: u32,
    pub hWndOwner: super::super::Foundation::HWND,
    pub lpszCaption: super::super::Foundation::PWSTR,
    pub lpfnHook: ::std::option::Option<LPFNOLEUIHOOK>,
    pub lCustData: super::super::Foundation::LPARAM,
    pub hInstance: super::super::Foundation::HINSTANCE,
    pub lpszTemplate: super::super::Foundation::PWSTR,
    pub hResource: super::LibraryLoader::HRSRC,
    pub lpSrcDataObj: ::std::option::Option<IDataObject>,
    pub arrPasteEntries: *mut OLEUIPASTEENTRYW,
    pub cPasteEntries: i32,
    pub arrLinkTypes: *mut u32,
    pub cLinkTypes: i32,
    pub cClsidExclude: u32,
    pub lpClsidExclude: *mut ::windows::runtime::GUID,
    pub nSelectedIndex: i32,
    pub fLink: super::super::Foundation::BOOL,
    pub hMetaPict: isize,
    pub sizel: super::super::Foundation::SIZE,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl OLEUIPASTESPECIALW {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::default::Default for OLEUIPASTESPECIALW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::fmt::Debug for OLEUIPASTESPECIALW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUIPASTESPECIALW")
            .field("cbStruct", &self.cbStruct)
            .field("dwFlags", &self.dwFlags)
            .field("hWndOwner", &self.hWndOwner)
            .field("lpszCaption", &self.lpszCaption)
            .field("lCustData", &self.lCustData)
            .field("hInstance", &self.hInstance)
            .field("lpszTemplate", &self.lpszTemplate)
            .field("hResource", &self.hResource)
            .field("lpSrcDataObj", &self.lpSrcDataObj)
            .field("arrPasteEntries", &self.arrPasteEntries)
            .field("cPasteEntries", &self.cPasteEntries)
            .field("arrLinkTypes", &self.arrLinkTypes)
            .field("cLinkTypes", &self.cLinkTypes)
            .field("cClsidExclude", &self.cClsidExclude)
            .field("lpClsidExclude", &self.lpClsidExclude)
            .field("nSelectedIndex", &self.nSelectedIndex)
            .field("fLink", &self.fLink)
            .field("hMetaPict", &self.hMetaPict)
            .field("sizel", &self.sizel)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::cmp::PartialEq for OLEUIPASTESPECIALW {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.dwFlags == other.dwFlags
            && self.hWndOwner == other.hWndOwner
            && self.lpszCaption == other.lpszCaption
            && self.lpfnHook.map(|f| f as usize) == other.lpfnHook.map(|f| f as usize)
            && self.lCustData == other.lCustData
            && self.hInstance == other.hInstance
            && self.lpszTemplate == other.lpszTemplate
            && self.hResource == other.hResource
            && self.lpSrcDataObj == other.lpSrcDataObj
            && self.arrPasteEntries == other.arrPasteEntries
            && self.cPasteEntries == other.cPasteEntries
            && self.arrLinkTypes == other.arrLinkTypes
            && self.cLinkTypes == other.cLinkTypes
            && self.cClsidExclude == other.cClsidExclude
            && self.lpClsidExclude == other.lpClsidExclude
            && self.nSelectedIndex == other.nSelectedIndex
            && self.fLink == other.fLink
            && self.hMetaPict == other.hMetaPict
            && self.sizel == other.sizel
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
impl ::std::cmp::Eq for OLEUIPASTESPECIALW {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
unsafe impl ::windows::runtime::Abi for OLEUIPASTESPECIALW {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
pub struct OLEUIVIEWPROPSA {
    pub cbStruct: u32,
    pub dwFlags: u32,
    pub dwReserved1: [u32; 2],
    pub lpfnHook: ::std::option::Option<LPFNOLEUIHOOK>,
    pub lCustData: super::super::Foundation::LPARAM,
    pub dwReserved2: [u32; 3],
    pub lpOP: *mut OLEUIOBJECTPROPSA,
    pub nScaleMin: i32,
    pub nScaleMax: i32,
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl OLEUIVIEWPROPSA {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::default::Default for OLEUIVIEWPROPSA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::fmt::Debug for OLEUIVIEWPROPSA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUIVIEWPROPSA")
            .field("cbStruct", &self.cbStruct)
            .field("dwFlags", &self.dwFlags)
            .field("dwReserved1", &self.dwReserved1)
            .field("lCustData", &self.lCustData)
            .field("dwReserved2", &self.dwReserved2)
            .field("lpOP", &self.lpOP)
            .field("nScaleMin", &self.nScaleMin)
            .field("nScaleMax", &self.nScaleMax)
            .finish()
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::PartialEq for OLEUIVIEWPROPSA {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.dwFlags == other.dwFlags
            && self.dwReserved1 == other.dwReserved1
            && self.lpfnHook.map(|f| f as usize) == other.lpfnHook.map(|f| f as usize)
            && self.lCustData == other.lCustData
            && self.dwReserved2 == other.dwReserved2
            && self.lpOP == other.lpOP
            && self.nScaleMin == other.nScaleMin
            && self.nScaleMax == other.nScaleMax
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::Eq for OLEUIVIEWPROPSA {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
unsafe impl ::windows::runtime::Abi for OLEUIVIEWPROPSA {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
pub struct OLEUIVIEWPROPSW {
    pub cbStruct: u32,
    pub dwFlags: u32,
    pub dwReserved1: [u32; 2],
    pub lpfnHook: ::std::option::Option<LPFNOLEUIHOOK>,
    pub lCustData: super::super::Foundation::LPARAM,
    pub dwReserved2: [u32; 3],
    pub lpOP: *mut OLEUIOBJECTPROPSW,
    pub nScaleMin: i32,
    pub nScaleMax: i32,
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl OLEUIVIEWPROPSW {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::default::Default for OLEUIVIEWPROPSW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::fmt::Debug for OLEUIVIEWPROPSW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEUIVIEWPROPSW")
            .field("cbStruct", &self.cbStruct)
            .field("dwFlags", &self.dwFlags)
            .field("dwReserved1", &self.dwReserved1)
            .field("lCustData", &self.lCustData)
            .field("dwReserved2", &self.dwReserved2)
            .field("lpOP", &self.lpOP)
            .field("nScaleMin", &self.nScaleMin)
            .field("nScaleMax", &self.nScaleMax)
            .finish()
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::PartialEq for OLEUIVIEWPROPSW {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.dwFlags == other.dwFlags
            && self.dwReserved1 == other.dwReserved1
            && self.lpfnHook.map(|f| f as usize) == other.lpfnHook.map(|f| f as usize)
            && self.lCustData == other.lCustData
            && self.dwReserved2 == other.dwReserved2
            && self.lpOP == other.lpOP
            && self.nScaleMin == other.nScaleMin
            && self.nScaleMax == other.nScaleMax
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::Eq for OLEUIVIEWPROPSW {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
unsafe impl ::windows::runtime::Abi for OLEUIVIEWPROPSW {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
pub const OLEUI_BZERR_HTASKINVALID: u32 = 116u32;
pub const OLEUI_BZ_CALLUNBLOCKED: u32 = 119u32;
pub const OLEUI_BZ_RETRYSELECTED: u32 = 118u32;
pub const OLEUI_BZ_SWITCHTOSELECTED: u32 = 117u32;
pub const OLEUI_CANCEL: u32 = 2u32;
pub const OLEUI_CIERR_MUSTHAVECLSID: u32 = 116u32;
pub const OLEUI_CIERR_MUSTHAVECURRENTMETAFILE: u32 = 117u32;
pub const OLEUI_CIERR_SZICONEXEINVALID: u32 = 118u32;
pub const OLEUI_CSERR_FROMNOTNULL: u32 = 118u32;
pub const OLEUI_CSERR_LINKCNTRINVALID: u32 = 117u32;
pub const OLEUI_CSERR_LINKCNTRNULL: u32 = 116u32;
pub const OLEUI_CSERR_SOURCEINVALID: u32 = 121u32;
pub const OLEUI_CSERR_SOURCENULL: u32 = 120u32;
pub const OLEUI_CSERR_SOURCEPARSEERROR: u32 = 122u32;
pub const OLEUI_CSERR_SOURCEPARSERROR: u32 = 122u32;
pub const OLEUI_CSERR_TONOTNULL: u32 = 119u32;
pub const OLEUI_CTERR_CBFORMATINVALID: u32 = 119u32;
pub const OLEUI_CTERR_CLASSIDINVALID: u32 = 117u32;
pub const OLEUI_CTERR_DVASPECTINVALID: u32 = 118u32;
pub const OLEUI_CTERR_HMETAPICTINVALID: u32 = 120u32;
pub const OLEUI_CTERR_STRINGINVALID: u32 = 121u32;
pub const OLEUI_ELERR_LINKCNTRINVALID: u32 = 117u32;
pub const OLEUI_ELERR_LINKCNTRNULL: u32 = 116u32;
pub const OLEUI_ERR_CBSTRUCTINCORRECT: u32 = 103u32;
pub const OLEUI_ERR_DIALOGFAILURE: u32 = 112u32;
pub const OLEUI_ERR_FINDTEMPLATEFAILURE: u32 = 110u32;
pub const OLEUI_ERR_GLOBALMEMALLOC: u32 = 114u32;
pub const OLEUI_ERR_HINSTANCEINVALID: u32 = 107u32;
pub const OLEUI_ERR_HRESOURCEINVALID: u32 = 109u32;
pub const OLEUI_ERR_HWNDOWNERINVALID: u32 = 104u32;
pub const OLEUI_ERR_LOADSTRING: u32 = 115u32;
pub const OLEUI_ERR_LOADTEMPLATEFAILURE: u32 = 111u32;
pub const OLEUI_ERR_LOCALMEMALLOC: u32 = 113u32;
pub const OLEUI_ERR_LPFNHOOKINVALID: u32 = 106u32;
pub const OLEUI_ERR_LPSZCAPTIONINVALID: u32 = 105u32;
pub const OLEUI_ERR_LPSZTEMPLATEINVALID: u32 = 108u32;
pub const OLEUI_ERR_OLEMEMALLOC: u32 = 100u32;
pub const OLEUI_ERR_STANDARDMAX: u32 = 116u32;
pub const OLEUI_ERR_STANDARDMIN: u32 = 100u32;
pub const OLEUI_ERR_STRUCTUREINVALID: u32 = 102u32;
pub const OLEUI_ERR_STRUCTURENULL: u32 = 101u32;
pub const OLEUI_FALSE: u32 = 0u32;
pub const OLEUI_GPERR_CBFORMATINVALID: u32 = 130u32;
pub const OLEUI_GPERR_CLASSIDINVALID: u32 = 128u32;
pub const OLEUI_GPERR_LPCLSIDEXCLUDEINVALID: u32 = 129u32;
pub const OLEUI_GPERR_STRINGINVALID: u32 = 127u32;
pub const OLEUI_IOERR_ARRLINKTYPESINVALID: u32 = 118u32;
pub const OLEUI_IOERR_ARRPASTEENTRIESINVALID: u32 = 117u32;
pub const OLEUI_IOERR_CCHFILEINVALID: u32 = 125u32;
pub const OLEUI_IOERR_HICONINVALID: u32 = 118u32;
pub const OLEUI_IOERR_LPCLSIDEXCLUDEINVALID: u32 = 124u32;
pub const OLEUI_IOERR_LPFORMATETCINVALID: u32 = 119u32;
pub const OLEUI_IOERR_LPIOLECLIENTSITEINVALID: u32 = 121u32;
pub const OLEUI_IOERR_LPISTORAGEINVALID: u32 = 122u32;
pub const OLEUI_IOERR_LPSZFILEINVALID: u32 = 116u32;
pub const OLEUI_IOERR_LPSZLABELINVALID: u32 = 117u32;
pub const OLEUI_IOERR_PPVOBJINVALID: u32 = 120u32;
pub const OLEUI_IOERR_SCODEHASERROR: u32 = 123u32;
pub const OLEUI_IOERR_SRCDATAOBJECTINVALID: u32 = 116u32;
pub const OLEUI_LPERR_LINKCNTRINVALID: u32 = 134u32;
pub const OLEUI_LPERR_LINKCNTRNULL: u32 = 133u32;
pub const OLEUI_OK: u32 = 1u32;
pub const OLEUI_OPERR_DLGPROCNOTNULL: u32 = 125u32;
pub const OLEUI_OPERR_INVALIDPAGES: u32 = 123u32;
pub const OLEUI_OPERR_LINKINFOINVALID: u32 = 137u32;
pub const OLEUI_OPERR_LPARAMNOTZERO: u32 = 126u32;
pub const OLEUI_OPERR_NOTSUPPORTED: u32 = 124u32;
pub const OLEUI_OPERR_OBJINFOINVALID: u32 = 136u32;
pub const OLEUI_OPERR_PAGESINCORRECT: u32 = 122u32;
pub const OLEUI_OPERR_PROPERTYSHEET: u32 = 135u32;
pub const OLEUI_OPERR_PROPSHEETINVALID: u32 = 119u32;
pub const OLEUI_OPERR_PROPSHEETNULL: u32 = 118u32;
pub const OLEUI_OPERR_PROPSINVALID: u32 = 121u32;
pub const OLEUI_OPERR_SUBPROPINVALID: u32 = 117u32;
pub const OLEUI_OPERR_SUBPROPNULL: u32 = 116u32;
pub const OLEUI_OPERR_SUPPROP: u32 = 120u32;
pub const OLEUI_PSERR_CLIPBOARDCHANGED: u32 = 119u32;
pub const OLEUI_PSERR_GETCLIPBOARDFAILED: u32 = 120u32;
pub const OLEUI_QUERY_GETCLASSID: u32 = 65280u32;
pub const OLEUI_QUERY_LINKBROKEN: u32 = 65281u32;
pub const OLEUI_SUCCESS: u32 = 1u32;
pub const OLEUI_VPERR_DVASPECTINVALID: u32 = 132u32;
pub const OLEUI_VPERR_METAPICTINVALID: u32 = 131u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct OLEUPDATE(pub i32);
pub const OLEUPDATE_ALWAYS: OLEUPDATE = OLEUPDATE(1i32);
pub const OLEUPDATE_ONCALL: OLEUPDATE = OLEUPDATE(3i32);
impl ::std::convert::From<i32> for OLEUPDATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OLEUPDATE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct OLEVERB {
    pub lVerb: i32,
    pub lpszVerbName: super::super::Foundation::PWSTR,
    pub fuFlags: u32,
    pub grfAttribs: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl OLEVERB {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for OLEVERB {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for OLEVERB {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OLEVERB")
            .field("lVerb", &self.lVerb)
            .field("lpszVerbName", &self.lpszVerbName)
            .field("fuFlags", &self.fuFlags)
            .field("grfAttribs", &self.grfAttribs)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for OLEVERB {
    fn eq(&self, other: &Self) -> bool {
        self.lVerb == other.lVerb
            && self.lpszVerbName == other.lpszVerbName
            && self.fuFlags == other.fuFlags
            && self.grfAttribs == other.grfAttribs
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for OLEVERB {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for OLEVERB {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct OLEVERBATTRIB(pub i32);
pub const OLEVERBATTRIB_NEVERDIRTIES: OLEVERBATTRIB = OLEVERBATTRIB(1i32);
pub const OLEVERBATTRIB_ONCONTAINERMENU: OLEVERBATTRIB = OLEVERBATTRIB(2i32);
impl ::std::convert::From<i32> for OLEVERBATTRIB {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OLEVERBATTRIB {
    type Abi = Self;
    type DefaultType = Self;
}
pub const OLEVERB_PRIMARY: u32 = 0u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct OLEWHICHMK(pub i32);
pub const OLEWHICHMK_CONTAINER: OLEWHICHMK = OLEWHICHMK(1i32);
pub const OLEWHICHMK_OBJREL: OLEWHICHMK = OLEWHICHMK(2i32);
pub const OLEWHICHMK_OBJFULL: OLEWHICHMK = OLEWHICHMK(3i32);
impl ::std::convert::From<i32> for OLEWHICHMK {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OLEWHICHMK {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct OLE_TRISTATE(pub i32);
pub const triUnchecked: OLE_TRISTATE = OLE_TRISTATE(0i32);
pub const triChecked: OLE_TRISTATE = OLE_TRISTATE(1i32);
pub const triGray: OLE_TRISTATE = OLE_TRISTATE(2i32);
impl ::std::convert::From<i32> for OLE_TRISTATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OLE_TRISTATE {
    type Abi = Self;
    type DefaultType = Self;
}
pub const OPF_DISABLECONVERT: i32 = 8i32;
pub const OPF_NOFILLDEFAULT: i32 = 2i32;
pub const OPF_OBJECTISLINK: i32 = 1i32;
pub const OPF_SHOWHELP: i32 = 4i32;
pub const OT_EMBEDDED: i32 = 2i32;
pub const OT_LINK: i32 = 1i32;
pub const OT_STATIC: i32 = 3i32;
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn ObtainUserAgentString(
    dwoption: u32,
    pszuaout: super::super::Foundation::PSTR,
    cbsize: *mut u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn ObtainUserAgentString(
                dwoption: u32,
                pszuaout: super::super::Foundation::PSTR,
                cbsize: *mut u32,
            ) -> ::windows::runtime::HRESULT;
        }
        ObtainUserAgentString(
            ::std::mem::transmute(dwoption),
            ::std::mem::transmute(pszuaout),
            ::std::mem::transmute(cbsize),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn OleBuildVersion() -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleBuildVersion() -> u32;
        }
        ::std::mem::transmute(OleBuildVersion())
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
pub unsafe fn OleCreate<
    'a,
    Param4: ::windows::runtime::IntoParam<'a, IOleClientSite>,
    Param5: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStorage>,
>(
    rclsid: *const ::windows::runtime::GUID,
    riid: *const ::windows::runtime::GUID,
    renderopt: u32,
    pformatetc: *mut FORMATETC,
    pclientsite: Param4,
    pstg: Param5,
    ppvobj: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleCreate(
                rclsid: *const ::windows::runtime::GUID,
                riid: *const ::windows::runtime::GUID,
                renderopt: u32,
                pformatetc: *mut FORMATETC,
                pclientsite: ::windows::runtime::RawPtr,
                pstg: ::windows::runtime::RawPtr,
                ppvobj: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        OleCreate(
            ::std::mem::transmute(rclsid),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(renderopt),
            ::std::mem::transmute(pformatetc),
            pclientsite.into_param().abi(),
            pstg.into_param().abi(),
            ::std::mem::transmute(ppvobj),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn OleCreateDefaultHandler<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    clsid: *const ::windows::runtime::GUID,
    punkouter: Param1,
    riid: *const ::windows::runtime::GUID,
    lplpobj: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleCreateDefaultHandler(
                clsid: *const ::windows::runtime::GUID,
                punkouter: ::windows::runtime::RawPtr,
                riid: *const ::windows::runtime::GUID,
                lplpobj: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        OleCreateDefaultHandler(
            ::std::mem::transmute(clsid),
            punkouter.into_param().abi(),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lplpobj),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn OleCreateEmbeddingHelper<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param3: ::windows::runtime::IntoParam<'a, IClassFactory>,
>(
    clsid: *const ::windows::runtime::GUID,
    punkouter: Param1,
    flags: u32,
    pcf: Param3,
    riid: *const ::windows::runtime::GUID,
    lplpobj: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleCreateEmbeddingHelper(
                clsid: *const ::windows::runtime::GUID,
                punkouter: ::windows::runtime::RawPtr,
                flags: u32,
                pcf: ::windows::runtime::RawPtr,
                riid: *const ::windows::runtime::GUID,
                lplpobj: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        OleCreateEmbeddingHelper(
            ::std::mem::transmute(clsid),
            punkouter.into_param().abi(),
            ::std::mem::transmute(flags),
            pcf.into_param().abi(),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lplpobj),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
pub unsafe fn OleCreateEx<
    'a,
    Param7: ::windows::runtime::IntoParam<'a, IAdviseSink>,
    Param9: ::windows::runtime::IntoParam<'a, IOleClientSite>,
    Param10: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStorage>,
>(
    rclsid: *const ::windows::runtime::GUID,
    riid: *const ::windows::runtime::GUID,
    dwflags: u32,
    renderopt: u32,
    cformats: u32,
    rgadvf: *mut u32,
    rgformatetc: *mut FORMATETC,
    lpadvisesink: Param7,
    rgdwconnection: *mut u32,
    pclientsite: Param9,
    pstg: Param10,
    ppvobj: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleCreateEx(
                rclsid: *const ::windows::runtime::GUID,
                riid: *const ::windows::runtime::GUID,
                dwflags: u32,
                renderopt: u32,
                cformats: u32,
                rgadvf: *mut u32,
                rgformatetc: *mut FORMATETC,
                lpadvisesink: ::windows::runtime::RawPtr,
                rgdwconnection: *mut u32,
                pclientsite: ::windows::runtime::RawPtr,
                pstg: ::windows::runtime::RawPtr,
                ppvobj: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        OleCreateEx(
            ::std::mem::transmute(rclsid),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(renderopt),
            ::std::mem::transmute(cformats),
            ::std::mem::transmute(rgadvf),
            ::std::mem::transmute(rgformatetc),
            lpadvisesink.into_param().abi(),
            ::std::mem::transmute(rgdwconnection),
            pclientsite.into_param().abi(),
            pstg.into_param().abi(),
            ::std::mem::transmute(ppvobj),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
pub unsafe fn OleCreateFontIndirect(
    lpfontdesc: *mut FONTDESC,
    riid: *const ::windows::runtime::GUID,
    lplpvobj: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "oleaut32")]
        extern "system" {
            fn OleCreateFontIndirect(
                lpfontdesc: *mut FONTDESC,
                riid: *const ::windows::runtime::GUID,
                lplpvobj: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        OleCreateFontIndirect(
            ::std::mem::transmute(lpfontdesc),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lplpvobj),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
pub unsafe fn OleCreateFromData<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IDataObject>,
    Param4: ::windows::runtime::IntoParam<'a, IOleClientSite>,
    Param5: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStorage>,
>(
    psrcdataobj: Param0,
    riid: *const ::windows::runtime::GUID,
    renderopt: u32,
    pformatetc: *mut FORMATETC,
    pclientsite: Param4,
    pstg: Param5,
    ppvobj: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleCreateFromData(
                psrcdataobj: ::windows::runtime::RawPtr,
                riid: *const ::windows::runtime::GUID,
                renderopt: u32,
                pformatetc: *mut FORMATETC,
                pclientsite: ::windows::runtime::RawPtr,
                pstg: ::windows::runtime::RawPtr,
                ppvobj: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        OleCreateFromData(
            psrcdataobj.into_param().abi(),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(renderopt),
            ::std::mem::transmute(pformatetc),
            pclientsite.into_param().abi(),
            pstg.into_param().abi(),
            ::std::mem::transmute(ppvobj),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
pub unsafe fn OleCreateFromDataEx<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IDataObject>,
    Param7: ::windows::runtime::IntoParam<'a, IAdviseSink>,
    Param9: ::windows::runtime::IntoParam<'a, IOleClientSite>,
    Param10: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStorage>,
>(
    psrcdataobj: Param0,
    riid: *const ::windows::runtime::GUID,
    dwflags: u32,
    renderopt: u32,
    cformats: u32,
    rgadvf: *mut u32,
    rgformatetc: *mut FORMATETC,
    lpadvisesink: Param7,
    rgdwconnection: *mut u32,
    pclientsite: Param9,
    pstg: Param10,
    ppvobj: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleCreateFromDataEx(
                psrcdataobj: ::windows::runtime::RawPtr,
                riid: *const ::windows::runtime::GUID,
                dwflags: u32,
                renderopt: u32,
                cformats: u32,
                rgadvf: *mut u32,
                rgformatetc: *mut FORMATETC,
                lpadvisesink: ::windows::runtime::RawPtr,
                rgdwconnection: *mut u32,
                pclientsite: ::windows::runtime::RawPtr,
                pstg: ::windows::runtime::RawPtr,
                ppvobj: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        OleCreateFromDataEx(
            psrcdataobj.into_param().abi(),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(renderopt),
            ::std::mem::transmute(cformats),
            ::std::mem::transmute(rgadvf),
            ::std::mem::transmute(rgformatetc),
            lpadvisesink.into_param().abi(),
            ::std::mem::transmute(rgdwconnection),
            pclientsite.into_param().abi(),
            pstg.into_param().abi(),
            ::std::mem::transmute(ppvobj),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage"
))]
pub unsafe fn OleCreateFromFile<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param5: ::windows::runtime::IntoParam<'a, IOleClientSite>,
    Param6: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStorage>,
>(
    rclsid: *const ::windows::runtime::GUID,
    lpszfilename: Param1,
    riid: *const ::windows::runtime::GUID,
    renderopt: u32,
    lpformatetc: *mut FORMATETC,
    pclientsite: Param5,
    pstg: Param6,
    ppvobj: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleCreateFromFile(
                rclsid: *const ::windows::runtime::GUID,
                lpszfilename: super::super::Foundation::PWSTR,
                riid: *const ::windows::runtime::GUID,
                renderopt: u32,
                lpformatetc: *mut FORMATETC,
                pclientsite: ::windows::runtime::RawPtr,
                pstg: ::windows::runtime::RawPtr,
                ppvobj: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        OleCreateFromFile(
            ::std::mem::transmute(rclsid),
            lpszfilename.into_param().abi(),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(renderopt),
            ::std::mem::transmute(lpformatetc),
            pclientsite.into_param().abi(),
            pstg.into_param().abi(),
            ::std::mem::transmute(ppvobj),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage"
))]
pub unsafe fn OleCreateFromFileEx<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param8: ::windows::runtime::IntoParam<'a, IAdviseSink>,
    Param10: ::windows::runtime::IntoParam<'a, IOleClientSite>,
    Param11: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStorage>,
>(
    rclsid: *const ::windows::runtime::GUID,
    lpszfilename: Param1,
    riid: *const ::windows::runtime::GUID,
    dwflags: u32,
    renderopt: u32,
    cformats: u32,
    rgadvf: *mut u32,
    rgformatetc: *mut FORMATETC,
    lpadvisesink: Param8,
    rgdwconnection: *mut u32,
    pclientsite: Param10,
    pstg: Param11,
    ppvobj: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleCreateFromFileEx(
                rclsid: *const ::windows::runtime::GUID,
                lpszfilename: super::super::Foundation::PWSTR,
                riid: *const ::windows::runtime::GUID,
                dwflags: u32,
                renderopt: u32,
                cformats: u32,
                rgadvf: *mut u32,
                rgformatetc: *mut FORMATETC,
                lpadvisesink: ::windows::runtime::RawPtr,
                rgdwconnection: *mut u32,
                pclientsite: ::windows::runtime::RawPtr,
                pstg: ::windows::runtime::RawPtr,
                ppvobj: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        OleCreateFromFileEx(
            ::std::mem::transmute(rclsid),
            lpszfilename.into_param().abi(),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(renderopt),
            ::std::mem::transmute(cformats),
            ::std::mem::transmute(rgadvf),
            ::std::mem::transmute(rgformatetc),
            lpadvisesink.into_param().abi(),
            ::std::mem::transmute(rgdwconnection),
            pclientsite.into_param().abi(),
            pstg.into_param().abi(),
            ::std::mem::transmute(ppvobj),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
pub unsafe fn OleCreateLink<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IMoniker>,
    Param4: ::windows::runtime::IntoParam<'a, IOleClientSite>,
    Param5: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStorage>,
>(
    pmklinksrc: Param0,
    riid: *const ::windows::runtime::GUID,
    renderopt: u32,
    lpformatetc: *mut FORMATETC,
    pclientsite: Param4,
    pstg: Param5,
    ppvobj: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleCreateLink(
                pmklinksrc: ::windows::runtime::RawPtr,
                riid: *const ::windows::runtime::GUID,
                renderopt: u32,
                lpformatetc: *mut FORMATETC,
                pclientsite: ::windows::runtime::RawPtr,
                pstg: ::windows::runtime::RawPtr,
                ppvobj: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        OleCreateLink(
            pmklinksrc.into_param().abi(),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(renderopt),
            ::std::mem::transmute(lpformatetc),
            pclientsite.into_param().abi(),
            pstg.into_param().abi(),
            ::std::mem::transmute(ppvobj),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
pub unsafe fn OleCreateLinkEx<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IMoniker>,
    Param7: ::windows::runtime::IntoParam<'a, IAdviseSink>,
    Param9: ::windows::runtime::IntoParam<'a, IOleClientSite>,
    Param10: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStorage>,
>(
    pmklinksrc: Param0,
    riid: *const ::windows::runtime::GUID,
    dwflags: u32,
    renderopt: u32,
    cformats: u32,
    rgadvf: *mut u32,
    rgformatetc: *mut FORMATETC,
    lpadvisesink: Param7,
    rgdwconnection: *mut u32,
    pclientsite: Param9,
    pstg: Param10,
    ppvobj: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleCreateLinkEx(
                pmklinksrc: ::windows::runtime::RawPtr,
                riid: *const ::windows::runtime::GUID,
                dwflags: u32,
                renderopt: u32,
                cformats: u32,
                rgadvf: *mut u32,
                rgformatetc: *mut FORMATETC,
                lpadvisesink: ::windows::runtime::RawPtr,
                rgdwconnection: *mut u32,
                pclientsite: ::windows::runtime::RawPtr,
                pstg: ::windows::runtime::RawPtr,
                ppvobj: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        OleCreateLinkEx(
            pmklinksrc.into_param().abi(),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(renderopt),
            ::std::mem::transmute(cformats),
            ::std::mem::transmute(rgadvf),
            ::std::mem::transmute(rgformatetc),
            lpadvisesink.into_param().abi(),
            ::std::mem::transmute(rgdwconnection),
            pclientsite.into_param().abi(),
            pstg.into_param().abi(),
            ::std::mem::transmute(ppvobj),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
pub unsafe fn OleCreateLinkFromData<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IDataObject>,
    Param4: ::windows::runtime::IntoParam<'a, IOleClientSite>,
    Param5: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStorage>,
>(
    psrcdataobj: Param0,
    riid: *const ::windows::runtime::GUID,
    renderopt: u32,
    pformatetc: *mut FORMATETC,
    pclientsite: Param4,
    pstg: Param5,
    ppvobj: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleCreateLinkFromData(
                psrcdataobj: ::windows::runtime::RawPtr,
                riid: *const ::windows::runtime::GUID,
                renderopt: u32,
                pformatetc: *mut FORMATETC,
                pclientsite: ::windows::runtime::RawPtr,
                pstg: ::windows::runtime::RawPtr,
                ppvobj: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        OleCreateLinkFromData(
            psrcdataobj.into_param().abi(),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(renderopt),
            ::std::mem::transmute(pformatetc),
            pclientsite.into_param().abi(),
            pstg.into_param().abi(),
            ::std::mem::transmute(ppvobj),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
pub unsafe fn OleCreateLinkFromDataEx<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IDataObject>,
    Param7: ::windows::runtime::IntoParam<'a, IAdviseSink>,
    Param9: ::windows::runtime::IntoParam<'a, IOleClientSite>,
    Param10: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStorage>,
>(
    psrcdataobj: Param0,
    riid: *const ::windows::runtime::GUID,
    dwflags: u32,
    renderopt: u32,
    cformats: u32,
    rgadvf: *mut u32,
    rgformatetc: *mut FORMATETC,
    lpadvisesink: Param7,
    rgdwconnection: *mut u32,
    pclientsite: Param9,
    pstg: Param10,
    ppvobj: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleCreateLinkFromDataEx(
                psrcdataobj: ::windows::runtime::RawPtr,
                riid: *const ::windows::runtime::GUID,
                dwflags: u32,
                renderopt: u32,
                cformats: u32,
                rgadvf: *mut u32,
                rgformatetc: *mut FORMATETC,
                lpadvisesink: ::windows::runtime::RawPtr,
                rgdwconnection: *mut u32,
                pclientsite: ::windows::runtime::RawPtr,
                pstg: ::windows::runtime::RawPtr,
                ppvobj: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        OleCreateLinkFromDataEx(
            psrcdataobj.into_param().abi(),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(renderopt),
            ::std::mem::transmute(cformats),
            ::std::mem::transmute(rgadvf),
            ::std::mem::transmute(rgformatetc),
            lpadvisesink.into_param().abi(),
            ::std::mem::transmute(rgdwconnection),
            pclientsite.into_param().abi(),
            pstg.into_param().abi(),
            ::std::mem::transmute(ppvobj),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage"
))]
pub unsafe fn OleCreateLinkToFile<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param4: ::windows::runtime::IntoParam<'a, IOleClientSite>,
    Param5: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStorage>,
>(
    lpszfilename: Param0,
    riid: *const ::windows::runtime::GUID,
    renderopt: u32,
    lpformatetc: *mut FORMATETC,
    pclientsite: Param4,
    pstg: Param5,
    ppvobj: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleCreateLinkToFile(
                lpszfilename: super::super::Foundation::PWSTR,
                riid: *const ::windows::runtime::GUID,
                renderopt: u32,
                lpformatetc: *mut FORMATETC,
                pclientsite: ::windows::runtime::RawPtr,
                pstg: ::windows::runtime::RawPtr,
                ppvobj: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        OleCreateLinkToFile(
            lpszfilename.into_param().abi(),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(renderopt),
            ::std::mem::transmute(lpformatetc),
            pclientsite.into_param().abi(),
            pstg.into_param().abi(),
            ::std::mem::transmute(ppvobj),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage"
))]
pub unsafe fn OleCreateLinkToFileEx<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param7: ::windows::runtime::IntoParam<'a, IAdviseSink>,
    Param9: ::windows::runtime::IntoParam<'a, IOleClientSite>,
    Param10: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStorage>,
>(
    lpszfilename: Param0,
    riid: *const ::windows::runtime::GUID,
    dwflags: u32,
    renderopt: u32,
    cformats: u32,
    rgadvf: *mut u32,
    rgformatetc: *mut FORMATETC,
    lpadvisesink: Param7,
    rgdwconnection: *mut u32,
    pclientsite: Param9,
    pstg: Param10,
    ppvobj: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleCreateLinkToFileEx(
                lpszfilename: super::super::Foundation::PWSTR,
                riid: *const ::windows::runtime::GUID,
                dwflags: u32,
                renderopt: u32,
                cformats: u32,
                rgadvf: *mut u32,
                rgformatetc: *mut FORMATETC,
                lpadvisesink: ::windows::runtime::RawPtr,
                rgdwconnection: *mut u32,
                pclientsite: ::windows::runtime::RawPtr,
                pstg: ::windows::runtime::RawPtr,
                ppvobj: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        OleCreateLinkToFileEx(
            lpszfilename.into_param().abi(),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(renderopt),
            ::std::mem::transmute(cformats),
            ::std::mem::transmute(rgadvf),
            ::std::mem::transmute(rgformatetc),
            lpadvisesink.into_param().abi(),
            ::std::mem::transmute(rgdwconnection),
            pclientsite.into_param().abi(),
            pstg.into_param().abi(),
            ::std::mem::transmute(ppvobj),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub unsafe fn OleCreateMenuDescriptor<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::UI::WindowsAndMessaging::HMENU>,
>(
    hmenucombined: Param0,
    lpmenuwidths: *mut OleMenuGroupWidths,
) -> isize {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleCreateMenuDescriptor(
                hmenucombined: super::super::UI::WindowsAndMessaging::HMENU,
                lpmenuwidths: *mut OleMenuGroupWidths,
            ) -> isize;
        }
        ::std::mem::transmute(OleCreateMenuDescriptor(
            hmenucombined.into_param().abi(),
            ::std::mem::transmute(lpmenuwidths),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_WindowsAndMessaging"
))]
pub unsafe fn OleCreatePictureIndirect<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    lppictdesc: *mut PICTDESC,
    riid: *const ::windows::runtime::GUID,
    fown: Param2,
    lplpvobj: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "oleaut32")]
        extern "system" {
            fn OleCreatePictureIndirect(
                lppictdesc: *mut PICTDESC,
                riid: *const ::windows::runtime::GUID,
                fown: super::super::Foundation::BOOL,
                lplpvobj: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        OleCreatePictureIndirect(
            ::std::mem::transmute(lppictdesc),
            ::std::mem::transmute(riid),
            fown.into_param().abi(),
            ::std::mem::transmute(lplpvobj),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn OleCreatePropertyFrame<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>,
    Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hwndowner: Param0,
    x: u32,
    y: u32,
    lpszcaption: Param3,
    cobjects: u32,
    ppunk: *mut ::std::option::Option<::windows::runtime::IUnknown>,
    cpages: u32,
    ppageclsid: *mut ::windows::runtime::GUID,
    lcid: u32,
    dwreserved: u32,
    pvreserved: *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "oleaut32")]
        extern "system" {
            fn OleCreatePropertyFrame(
                hwndowner: super::super::Foundation::HWND,
                x: u32,
                y: u32,
                lpszcaption: super::super::Foundation::PWSTR,
                cobjects: u32,
                ppunk: *mut ::windows::runtime::RawPtr,
                cpages: u32,
                ppageclsid: *mut ::windows::runtime::GUID,
                lcid: u32,
                dwreserved: u32,
                pvreserved: *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        OleCreatePropertyFrame(
            hwndowner.into_param().abi(),
            ::std::mem::transmute(x),
            ::std::mem::transmute(y),
            lpszcaption.into_param().abi(),
            ::std::mem::transmute(cobjects),
            ::std::mem::transmute(ppunk),
            ::std::mem::transmute(cpages),
            ::std::mem::transmute(ppageclsid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(dwreserved),
            ::std::mem::transmute(pvreserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn OleCreatePropertyFrameIndirect(
    lpparams: *mut OCPFIPARAMS,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "oleaut32")]
        extern "system" {
            fn OleCreatePropertyFrameIndirect(
                lpparams: *mut OCPFIPARAMS,
            ) -> ::windows::runtime::HRESULT;
        }
        OleCreatePropertyFrameIndirect(::std::mem::transmute(lpparams)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
pub unsafe fn OleCreateStaticFromData<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IDataObject>,
    Param4: ::windows::runtime::IntoParam<'a, IOleClientSite>,
    Param5: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStorage>,
>(
    psrcdataobj: Param0,
    iid: *const ::windows::runtime::GUID,
    renderopt: u32,
    pformatetc: *mut FORMATETC,
    pclientsite: Param4,
    pstg: Param5,
    ppvobj: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleCreateStaticFromData(
                psrcdataobj: ::windows::runtime::RawPtr,
                iid: *const ::windows::runtime::GUID,
                renderopt: u32,
                pformatetc: *mut FORMATETC,
                pclientsite: ::windows::runtime::RawPtr,
                pstg: ::windows::runtime::RawPtr,
                ppvobj: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        OleCreateStaticFromData(
            psrcdataobj.into_param().abi(),
            ::std::mem::transmute(iid),
            ::std::mem::transmute(renderopt),
            ::std::mem::transmute(pformatetc),
            pclientsite.into_param().abi(),
            pstg.into_param().abi(),
            ::std::mem::transmute(ppvobj),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn OleDestroyMenuDescriptor(holemenu: isize) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleDestroyMenuDescriptor(holemenu: isize) -> ::windows::runtime::HRESULT;
        }
        OleDestroyMenuDescriptor(::std::mem::transmute(holemenu)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
pub unsafe fn OleDoAutoConvert<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStorage>,
>(
    pstg: Param0,
    pclsidnew: *mut ::windows::runtime::GUID,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleDoAutoConvert(
                pstg: ::windows::runtime::RawPtr,
                pclsidnew: *mut ::windows::runtime::GUID,
            ) -> ::windows::runtime::HRESULT;
        }
        OleDoAutoConvert(pstg.into_param().abi(), ::std::mem::transmute(pclsidnew)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub unsafe fn OleDraw<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HDC>,
>(
    punknown: Param0,
    dwaspect: u32,
    hdcdraw: Param2,
    lprcbounds: *mut super::super::Foundation::RECT,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleDraw(
                punknown: ::windows::runtime::RawPtr,
                dwaspect: u32,
                hdcdraw: super::super::Graphics::Gdi::HDC,
                lprcbounds: *mut super::super::Foundation::RECT,
            ) -> ::windows::runtime::HRESULT;
        }
        OleDraw(
            punknown.into_param().abi(),
            ::std::mem::transmute(dwaspect),
            hdcdraw.into_param().abi(),
            ::std::mem::transmute(lprcbounds),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn OleDuplicateData<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>,
>(
    hsrc: Param0,
    cfformat: u16,
    uiflags: u32,
) -> super::super::Foundation::HANDLE {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleDuplicateData(
                hsrc: super::super::Foundation::HANDLE,
                cfformat: u16,
                uiflags: u32,
            ) -> super::super::Foundation::HANDLE;
        }
        ::std::mem::transmute(OleDuplicateData(
            hsrc.into_param().abi(),
            ::std::mem::transmute(cfformat),
            ::std::mem::transmute(uiflags),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn OleFlushClipboard() -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleFlushClipboard() -> ::windows::runtime::HRESULT;
        }
        OleFlushClipboard().ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn OleGetAutoConvert(
    clsidold: *const ::windows::runtime::GUID,
    pclsidnew: *mut ::windows::runtime::GUID,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleGetAutoConvert(
                clsidold: *const ::windows::runtime::GUID,
                pclsidnew: *mut ::windows::runtime::GUID,
            ) -> ::windows::runtime::HRESULT;
        }
        OleGetAutoConvert(
            ::std::mem::transmute(clsidold),
            ::std::mem::transmute(pclsidnew),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn OleGetClipboard() -> ::windows::runtime::Result<IDataObject> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleGetClipboard(
                ppdataobj: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IDataObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        OleGetClipboard(&mut result__).from_abi::<IDataObject>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn OleGetClipboardWithEnterpriseInfo(
    dataobject: *mut ::std::option::Option<IDataObject>,
    dataenterpriseid: *mut super::super::Foundation::PWSTR,
    sourcedescription: *mut super::super::Foundation::PWSTR,
    targetdescription: *mut super::super::Foundation::PWSTR,
    datadescription: *mut super::super::Foundation::PWSTR,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleGetClipboardWithEnterpriseInfo(
                dataobject: *mut ::windows::runtime::RawPtr,
                dataenterpriseid: *mut super::super::Foundation::PWSTR,
                sourcedescription: *mut super::super::Foundation::PWSTR,
                targetdescription: *mut super::super::Foundation::PWSTR,
                datadescription: *mut super::super::Foundation::PWSTR,
            ) -> ::windows::runtime::HRESULT;
        }
        OleGetClipboardWithEnterpriseInfo(
            ::std::mem::transmute(dataobject),
            ::std::mem::transmute(dataenterpriseid),
            ::std::mem::transmute(sourcedescription),
            ::std::mem::transmute(targetdescription),
            ::std::mem::transmute(datadescription),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn OleGetIconOfClass<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    rclsid: *const ::windows::runtime::GUID,
    lpszlabel: Param1,
    fusetypeaslabel: Param2,
) -> isize {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleGetIconOfClass(
                rclsid: *const ::windows::runtime::GUID,
                lpszlabel: super::super::Foundation::PWSTR,
                fusetypeaslabel: super::super::Foundation::BOOL,
            ) -> isize;
        }
        ::std::mem::transmute(OleGetIconOfClass(
            ::std::mem::transmute(rclsid),
            lpszlabel.into_param().abi(),
            fusetypeaslabel.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn OleGetIconOfFile<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    lpszpath: Param0,
    fusefileaslabel: Param1,
) -> isize {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleGetIconOfFile(
                lpszpath: super::super::Foundation::PWSTR,
                fusefileaslabel: super::super::Foundation::BOOL,
            ) -> isize;
        }
        ::std::mem::transmute(OleGetIconOfFile(
            lpszpath.into_param().abi(),
            fusefileaslabel.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
pub unsafe fn OleIconToCursor<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HINSTANCE>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::UI::WindowsAndMessaging::HICON>,
>(
    hinstexe: Param0,
    hicon: Param1,
) -> super::super::UI::WindowsAndMessaging::HCURSOR {
    #[cfg(windows)]
    {
        #[link(name = "oleaut32")]
        extern "system" {
            fn OleIconToCursor(
                hinstexe: super::super::Foundation::HINSTANCE,
                hicon: super::super::UI::WindowsAndMessaging::HICON,
            ) -> super::super::UI::WindowsAndMessaging::HCURSOR;
        }
        ::std::mem::transmute(OleIconToCursor(
            hinstexe.into_param().abi(),
            hicon.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn OleInitialize(pvreserved: *mut ::std::ffi::c_void) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleInitialize(pvreserved: *mut ::std::ffi::c_void) -> ::windows::runtime::HRESULT;
        }
        OleInitialize(::std::mem::transmute(pvreserved)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn OleIsCurrentClipboard<'a, Param0: ::windows::runtime::IntoParam<'a, IDataObject>>(
    pdataobj: Param0,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleIsCurrentClipboard(
                pdataobj: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        OleIsCurrentClipboard(pdataobj.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn OleIsRunning<'a, Param0: ::windows::runtime::IntoParam<'a, IOleObject>>(
    pobject: Param0,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleIsRunning(pobject: ::windows::runtime::RawPtr) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(OleIsRunning(pobject.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
pub unsafe fn OleLoad<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStorage>,
    Param2: ::windows::runtime::IntoParam<'a, IOleClientSite>,
>(
    pstg: Param0,
    riid: *const ::windows::runtime::GUID,
    pclientsite: Param2,
    ppvobj: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleLoad(
                pstg: ::windows::runtime::RawPtr,
                riid: *const ::windows::runtime::GUID,
                pclientsite: ::windows::runtime::RawPtr,
                ppvobj: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        OleLoad(
            pstg.into_param().abi(),
            ::std::mem::transmute(riid),
            pclientsite.into_param().abi(),
            ::std::mem::transmute(ppvobj),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
pub unsafe fn OleLoadFromStream<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
>(
    pstm: Param0,
    iidinterface: *const ::windows::runtime::GUID,
    ppvobj: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleLoadFromStream(
                pstm: ::windows::runtime::RawPtr,
                iidinterface: *const ::windows::runtime::GUID,
                ppvobj: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        OleLoadFromStream(
            pstm.into_param().abi(),
            ::std::mem::transmute(iidinterface),
            ::std::mem::transmute(ppvobj),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage"
))]
pub unsafe fn OleLoadPicture<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    lpstream: Param0,
    lsize: i32,
    frunmode: Param2,
    riid: *const ::windows::runtime::GUID,
    lplpvobj: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "oleaut32")]
        extern "system" {
            fn OleLoadPicture(
                lpstream: ::windows::runtime::RawPtr,
                lsize: i32,
                frunmode: super::super::Foundation::BOOL,
                riid: *const ::windows::runtime::GUID,
                lplpvobj: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        OleLoadPicture(
            lpstream.into_param().abi(),
            ::std::mem::transmute(lsize),
            frunmode.into_param().abi(),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lplpvobj),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage"
))]
pub unsafe fn OleLoadPictureEx<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    lpstream: Param0,
    lsize: i32,
    frunmode: Param2,
    riid: *const ::windows::runtime::GUID,
    xsizedesired: u32,
    ysizedesired: u32,
    dwflags: u32,
    lplpvobj: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "oleaut32")]
        extern "system" {
            fn OleLoadPictureEx(
                lpstream: ::windows::runtime::RawPtr,
                lsize: i32,
                frunmode: super::super::Foundation::BOOL,
                riid: *const ::windows::runtime::GUID,
                xsizedesired: u32,
                ysizedesired: u32,
                dwflags: u32,
                lplpvobj: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        OleLoadPictureEx(
            lpstream.into_param().abi(),
            ::std::mem::transmute(lsize),
            frunmode.into_param().abi(),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(xsizedesired),
            ::std::mem::transmute(ysizedesired),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(lplpvobj),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn OleLoadPicturePath<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    szurlorpath: Param0,
    punkcaller: Param1,
    dwreserved: u32,
    clrreserved: u32,
    riid: *const ::windows::runtime::GUID,
    ppvret: *mut *mut ::std::ffi::c_void,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "oleaut32")]
        extern "system" {
            fn OleLoadPicturePath(
                szurlorpath: super::super::Foundation::PWSTR,
                punkcaller: ::windows::runtime::RawPtr,
                dwreserved: u32,
                clrreserved: u32,
                riid: *const ::windows::runtime::GUID,
                ppvret: *mut *mut ::std::ffi::c_void,
            ) -> ::windows::runtime::HRESULT;
        }
        OleLoadPicturePath(
            szurlorpath.into_param().abi(),
            punkcaller.into_param().abi(),
            ::std::mem::transmute(dwreserved),
            ::std::mem::transmute(clrreserved),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(ppvret),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn OleLockRunning<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    punknown: Param0,
    flock: Param1,
    flastunlockcloses: Param2,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleLockRunning(
                punknown: ::windows::runtime::RawPtr,
                flock: super::super::Foundation::BOOL,
                flastunlockcloses: super::super::Foundation::BOOL,
            ) -> ::windows::runtime::HRESULT;
        }
        OleLockRunning(
            punknown.into_param().abi(),
            flock.into_param().abi(),
            flastunlockcloses.into_param().abi(),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct OleMenuGroupWidths {
    pub width: [i32; 6],
}
impl OleMenuGroupWidths {}
impl ::std::default::Default for OleMenuGroupWidths {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for OleMenuGroupWidths {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OleMenuGroupWidths")
            .field("width", &self.width)
            .finish()
    }
}
impl ::std::cmp::PartialEq for OleMenuGroupWidths {
    fn eq(&self, other: &Self) -> bool {
        self.width == other.width
    }
}
impl ::std::cmp::Eq for OleMenuGroupWidths {}
unsafe impl ::windows::runtime::Abi for OleMenuGroupWidths {
    type Abi = Self;
    type DefaultType = Self;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
pub unsafe fn OleMetafilePictFromIconAndLabel<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::UI::WindowsAndMessaging::HICON>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hicon: Param0,
    lpszlabel: Param1,
    lpszsourcefile: Param2,
    iiconindex: u32,
) -> isize {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleMetafilePictFromIconAndLabel(
                hicon: super::super::UI::WindowsAndMessaging::HICON,
                lpszlabel: super::super::Foundation::PWSTR,
                lpszsourcefile: super::super::Foundation::PWSTR,
                iiconindex: u32,
            ) -> isize;
        }
        ::std::mem::transmute(OleMetafilePictFromIconAndLabel(
            hicon.into_param().abi(),
            lpszlabel.into_param().abi(),
            lpszsourcefile.into_param().abi(),
            ::std::mem::transmute(iiconindex),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn OleNoteObjectVisible<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    punknown: Param0,
    fvisible: Param1,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleNoteObjectVisible(
                punknown: ::windows::runtime::RawPtr,
                fvisible: super::super::Foundation::BOOL,
            ) -> ::windows::runtime::HRESULT;
        }
        OleNoteObjectVisible(punknown.into_param().abi(), fvisible.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn OleQueryCreateFromData<'a, Param0: ::windows::runtime::IntoParam<'a, IDataObject>>(
    psrcdataobject: Param0,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleQueryCreateFromData(
                psrcdataobject: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        OleQueryCreateFromData(psrcdataobject.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn OleQueryLinkFromData<'a, Param0: ::windows::runtime::IntoParam<'a, IDataObject>>(
    psrcdataobject: Param0,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleQueryLinkFromData(
                psrcdataobject: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        OleQueryLinkFromData(psrcdataobject.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn OleRegEnumFormatEtc(
    clsid: *const ::windows::runtime::GUID,
    dwdirection: u32,
) -> ::windows::runtime::Result<IEnumFORMATETC> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleRegEnumFormatEtc(
                clsid: *const ::windows::runtime::GUID,
                dwdirection: u32,
                ppenum: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IEnumFORMATETC as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        OleRegEnumFormatEtc(
            ::std::mem::transmute(clsid),
            ::std::mem::transmute(dwdirection),
            &mut result__,
        )
        .from_abi::<IEnumFORMATETC>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn OleRegEnumVerbs(
    clsid: *const ::windows::runtime::GUID,
) -> ::windows::runtime::Result<IEnumOLEVERB> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleRegEnumVerbs(
                clsid: *const ::windows::runtime::GUID,
                ppenum: *mut ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IEnumOLEVERB as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        OleRegEnumVerbs(::std::mem::transmute(clsid), &mut result__)
            .from_abi::<IEnumOLEVERB>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn OleRegGetMiscStatus(
    clsid: *const ::windows::runtime::GUID,
    dwaspect: u32,
    pdwstatus: *mut u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleRegGetMiscStatus(
                clsid: *const ::windows::runtime::GUID,
                dwaspect: u32,
                pdwstatus: *mut u32,
            ) -> ::windows::runtime::HRESULT;
        }
        OleRegGetMiscStatus(
            ::std::mem::transmute(clsid),
            ::std::mem::transmute(dwaspect),
            ::std::mem::transmute(pdwstatus),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn OleRegGetUserType(
    clsid: *const ::windows::runtime::GUID,
    dwformoftype: u32,
) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleRegGetUserType(
                clsid: *const ::windows::runtime::GUID,
                dwformoftype: u32,
                pszusertype: *mut super::super::Foundation::PWSTR,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        OleRegGetUserType(
            ::std::mem::transmute(clsid),
            ::std::mem::transmute(dwformoftype),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn OleRun<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
>(
    punknown: Param0,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleRun(punknown: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        OleRun(punknown.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage"
))]
pub unsafe fn OleSave<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IPersistStorage>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStorage>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    pps: Param0,
    pstg: Param1,
    fsameasload: Param2,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleSave(
                pps: ::windows::runtime::RawPtr,
                pstg: ::windows::runtime::RawPtr,
                fsameasload: super::super::Foundation::BOOL,
            ) -> ::windows::runtime::HRESULT;
        }
        OleSave(
            pps.into_param().abi(),
            pstg.into_param().abi(),
            fsameasload.into_param().abi(),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Storage_StructuredStorage")]
pub unsafe fn OleSaveToStream<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IPersistStream>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Storage::StructuredStorage::IStream>,
>(
    ppstm: Param0,
    pstm: Param1,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleSaveToStream(
                ppstm: ::windows::runtime::RawPtr,
                pstm: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        OleSaveToStream(ppstm.into_param().abi(), pstm.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn OleSetAutoConvert(
    clsidold: *const ::windows::runtime::GUID,
    clsidnew: *const ::windows::runtime::GUID,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleSetAutoConvert(
                clsidold: *const ::windows::runtime::GUID,
                clsidnew: *const ::windows::runtime::GUID,
            ) -> ::windows::runtime::HRESULT;
        }
        OleSetAutoConvert(
            ::std::mem::transmute(clsidold),
            ::std::mem::transmute(clsidnew),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn OleSetClipboard<'a, Param0: ::windows::runtime::IntoParam<'a, IDataObject>>(
    pdataobj: Param0,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleSetClipboard(pdataobj: ::windows::runtime::RawPtr)
                -> ::windows::runtime::HRESULT;
        }
        OleSetClipboard(pdataobj.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn OleSetContainedObject<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    punknown: Param0,
    fcontained: Param1,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleSetContainedObject(
                punknown: ::windows::runtime::RawPtr,
                fcontained: super::super::Foundation::BOOL,
            ) -> ::windows::runtime::HRESULT;
        }
        OleSetContainedObject(punknown.into_param().abi(), fcontained.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn OleSetMenuDescriptor<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>,
    Param3: ::windows::runtime::IntoParam<'a, IOleInPlaceFrame>,
    Param4: ::windows::runtime::IntoParam<'a, IOleInPlaceActiveObject>,
>(
    holemenu: isize,
    hwndframe: Param1,
    hwndactiveobject: Param2,
    lpframe: Param3,
    lpactiveobj: Param4,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleSetMenuDescriptor(
                holemenu: isize,
                hwndframe: super::super::Foundation::HWND,
                hwndactiveobject: super::super::Foundation::HWND,
                lpframe: ::windows::runtime::RawPtr,
                lpactiveobj: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        OleSetMenuDescriptor(
            ::std::mem::transmute(holemenu),
            hwndframe.into_param().abi(),
            hwndactiveobject.into_param().abi(),
            lpframe.into_param().abi(),
            lpactiveobj.into_param().abi(),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
pub unsafe fn OleTranslateAccelerator<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IOleInPlaceFrame>,
>(
    lpframe: Param0,
    lpframeinfo: *mut OIFI,
    lpmsg: *mut super::super::UI::WindowsAndMessaging::MSG,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleTranslateAccelerator(
                lpframe: ::windows::runtime::RawPtr,
                lpframeinfo: *mut OIFI,
                lpmsg: *mut super::super::UI::WindowsAndMessaging::MSG,
            ) -> ::windows::runtime::HRESULT;
        }
        OleTranslateAccelerator(
            lpframe.into_param().abi(),
            ::std::mem::transmute(lpframeinfo),
            ::std::mem::transmute(lpmsg),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Graphics_Gdi")]
pub unsafe fn OleTranslateColor<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Graphics::Gdi::HPALETTE>,
>(
    clr: u32,
    hpal: Param1,
    lpcolorref: *mut u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "oleaut32")]
        extern "system" {
            fn OleTranslateColor(
                clr: u32,
                hpal: super::super::Graphics::Gdi::HPALETTE,
                lpcolorref: *mut u32,
            ) -> ::windows::runtime::HRESULT;
        }
        OleTranslateColor(
            ::std::mem::transmute(clr),
            hpal.into_param().abi(),
            ::std::mem::transmute(lpcolorref),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
pub unsafe fn OleUIAddVerbMenuA<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IOleObject>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PSTR>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::UI::WindowsAndMessaging::HMENU>,
    Param6: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    lpoleobj: Param0,
    lpszshorttype: Param1,
    hmenu: Param2,
    upos: u32,
    uidverbmin: u32,
    uidverbmax: u32,
    baddconvert: Param6,
    idconvert: u32,
    lphmenu: *mut super::super::UI::WindowsAndMessaging::HMENU,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "oledlg")]
        extern "system" {
            fn OleUIAddVerbMenuA(
                lpoleobj: ::windows::runtime::RawPtr,
                lpszshorttype: super::super::Foundation::PSTR,
                hmenu: super::super::UI::WindowsAndMessaging::HMENU,
                upos: u32,
                uidverbmin: u32,
                uidverbmax: u32,
                baddconvert: super::super::Foundation::BOOL,
                idconvert: u32,
                lphmenu: *mut super::super::UI::WindowsAndMessaging::HMENU,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(OleUIAddVerbMenuA(
            lpoleobj.into_param().abi(),
            lpszshorttype.into_param().abi(),
            hmenu.into_param().abi(),
            ::std::mem::transmute(upos),
            ::std::mem::transmute(uidverbmin),
            ::std::mem::transmute(uidverbmax),
            baddconvert.into_param().abi(),
            ::std::mem::transmute(idconvert),
            ::std::mem::transmute(lphmenu),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
pub unsafe fn OleUIAddVerbMenuW<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IOleObject>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::UI::WindowsAndMessaging::HMENU>,
    Param6: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    lpoleobj: Param0,
    lpszshorttype: Param1,
    hmenu: Param2,
    upos: u32,
    uidverbmin: u32,
    uidverbmax: u32,
    baddconvert: Param6,
    idconvert: u32,
    lphmenu: *mut super::super::UI::WindowsAndMessaging::HMENU,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "oledlg")]
        extern "system" {
            fn OleUIAddVerbMenuW(
                lpoleobj: ::windows::runtime::RawPtr,
                lpszshorttype: super::super::Foundation::PWSTR,
                hmenu: super::super::UI::WindowsAndMessaging::HMENU,
                upos: u32,
                uidverbmin: u32,
                uidverbmax: u32,
                baddconvert: super::super::Foundation::BOOL,
                idconvert: u32,
                lphmenu: *mut super::super::UI::WindowsAndMessaging::HMENU,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(OleUIAddVerbMenuW(
            lpoleobj.into_param().abi(),
            lpszshorttype.into_param().abi(),
            hmenu.into_param().abi(),
            ::std::mem::transmute(upos),
            ::std::mem::transmute(uidverbmin),
            ::std::mem::transmute(uidverbmax),
            baddconvert.into_param().abi(),
            ::std::mem::transmute(idconvert),
            ::std::mem::transmute(lphmenu),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Media_Audio_CoreAudio",
    feature = "Win32_System_LibraryLoader"
))]
pub unsafe fn OleUIBusyA(param0: *const OLEUIBUSYA) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "oledlg")]
        extern "system" {
            fn OleUIBusyA(param0: *const ::std::mem::ManuallyDrop<OLEUIBUSYA>) -> u32;
        }
        ::std::mem::transmute(OleUIBusyA(::std::mem::transmute(param0)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Media_Audio_CoreAudio",
    feature = "Win32_System_LibraryLoader"
))]
pub unsafe fn OleUIBusyW(param0: *const OLEUIBUSYW) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "oledlg")]
        extern "system" {
            fn OleUIBusyW(param0: *const ::std::mem::ManuallyDrop<OLEUIBUSYW>) -> u32;
        }
        ::std::mem::transmute(OleUIBusyW(::std::mem::transmute(param0)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn OleUICanConvertOrActivateAs<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    rclsid: *const ::windows::runtime::GUID,
    fislinkedobject: Param1,
    wformat: u16,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "oledlg")]
        extern "system" {
            fn OleUICanConvertOrActivateAs(
                rclsid: *const ::windows::runtime::GUID,
                fislinkedobject: super::super::Foundation::BOOL,
                wformat: u16,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(OleUICanConvertOrActivateAs(
            ::std::mem::transmute(rclsid),
            fislinkedobject.into_param().abi(),
            ::std::mem::transmute(wformat),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_System_SystemServices"
))]
pub unsafe fn OleUIChangeIconA(param0: *const OLEUICHANGEICONA) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "oledlg")]
        extern "system" {
            fn OleUIChangeIconA(param0: *const ::std::mem::ManuallyDrop<OLEUICHANGEICONA>) -> u32;
        }
        ::std::mem::transmute(OleUIChangeIconA(::std::mem::transmute(param0)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
pub unsafe fn OleUIChangeIconW(param0: *const OLEUICHANGEICONW) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "oledlg")]
        extern "system" {
            fn OleUIChangeIconW(param0: *const ::std::mem::ManuallyDrop<OLEUICHANGEICONW>) -> u32;
        }
        ::std::mem::transmute(OleUIChangeIconW(::std::mem::transmute(param0)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_UI_WindowsAndMessaging"
))]
pub unsafe fn OleUIChangeSourceA(param0: *const OLEUICHANGESOURCEA) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "oledlg")]
        extern "system" {
            fn OleUIChangeSourceA(
                param0: *const ::std::mem::ManuallyDrop<OLEUICHANGESOURCEA>,
            ) -> u32;
        }
        ::std::mem::transmute(OleUIChangeSourceA(::std::mem::transmute(param0)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_System_LibraryLoader",
    feature = "Win32_UI_WindowsAndMessaging"
))]
pub unsafe fn OleUIChangeSourceW(param0: *const OLEUICHANGESOURCEW) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "oledlg")]
        extern "system" {
            fn OleUIChangeSourceW(
                param0: *const ::std::mem::ManuallyDrop<OLEUICHANGESOURCEW>,
            ) -> u32;
        }
        ::std::mem::transmute(OleUIChangeSourceW(::std::mem::transmute(param0)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
pub unsafe fn OleUIConvertA(param0: *const OLEUICONVERTA) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "oledlg")]
        extern "system" {
            fn OleUIConvertA(param0: *const ::std::mem::ManuallyDrop<OLEUICONVERTA>) -> u32;
        }
        ::std::mem::transmute(OleUIConvertA(::std::mem::transmute(param0)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
pub unsafe fn OleUIConvertW(param0: *const OLEUICONVERTW) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "oledlg")]
        extern "system" {
            fn OleUIConvertW(param0: *const ::std::mem::ManuallyDrop<OLEUICONVERTW>) -> u32;
        }
        ::std::mem::transmute(OleUIConvertW(::std::mem::transmute(param0)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
pub unsafe fn OleUIEditLinksA(param0: *const OLEUIEDITLINKSA) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "oledlg")]
        extern "system" {
            fn OleUIEditLinksA(param0: *const ::std::mem::ManuallyDrop<OLEUIEDITLINKSA>) -> u32;
        }
        ::std::mem::transmute(OleUIEditLinksA(::std::mem::transmute(param0)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
pub unsafe fn OleUIEditLinksW(param0: *const OLEUIEDITLINKSW) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "oledlg")]
        extern "system" {
            fn OleUIEditLinksW(param0: *const ::std::mem::ManuallyDrop<OLEUIEDITLINKSW>) -> u32;
        }
        ::std::mem::transmute(OleUIEditLinksW(::std::mem::transmute(param0)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage",
    feature = "Win32_System_LibraryLoader"
))]
pub unsafe fn OleUIInsertObjectA(param0: *const OLEUIINSERTOBJECTA) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "oledlg")]
        extern "system" {
            fn OleUIInsertObjectA(
                param0: *const ::std::mem::ManuallyDrop<OLEUIINSERTOBJECTA>,
            ) -> u32;
        }
        ::std::mem::transmute(OleUIInsertObjectA(::std::mem::transmute(param0)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage",
    feature = "Win32_System_LibraryLoader"
))]
pub unsafe fn OleUIInsertObjectW(param0: *const OLEUIINSERTOBJECTW) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "oledlg")]
        extern "system" {
            fn OleUIInsertObjectW(
                param0: *const ::std::mem::ManuallyDrop<OLEUIINSERTOBJECTW>,
            ) -> u32;
        }
        ::std::mem::transmute(OleUIInsertObjectW(::std::mem::transmute(param0)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
pub unsafe fn OleUIObjectPropertiesA(param0: *const OLEUIOBJECTPROPSA) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "oledlg")]
        extern "system" {
            fn OleUIObjectPropertiesA(
                param0: *const ::std::mem::ManuallyDrop<OLEUIOBJECTPROPSA>,
            ) -> u32;
        }
        ::std::mem::transmute(OleUIObjectPropertiesA(::std::mem::transmute(param0)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_Controls",
    feature = "Win32_UI_WindowsAndMessaging"
))]
pub unsafe fn OleUIObjectPropertiesW(param0: *const OLEUIOBJECTPROPSW) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "oledlg")]
        extern "system" {
            fn OleUIObjectPropertiesW(
                param0: *const ::std::mem::ManuallyDrop<OLEUIOBJECTPROPSW>,
            ) -> u32;
        }
        ::std::mem::transmute(OleUIObjectPropertiesW(::std::mem::transmute(param0)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
pub unsafe fn OleUIPasteSpecialA(param0: *const OLEUIPASTESPECIALA) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "oledlg")]
        extern "system" {
            fn OleUIPasteSpecialA(
                param0: *const ::std::mem::ManuallyDrop<OLEUIPASTESPECIALA>,
            ) -> u32;
        }
        ::std::mem::transmute(OleUIPasteSpecialA(::std::mem::transmute(param0)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_LibraryLoader"))]
pub unsafe fn OleUIPasteSpecialW(param0: *const OLEUIPASTESPECIALW) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "oledlg")]
        extern "system" {
            fn OleUIPasteSpecialW(
                param0: *const ::std::mem::ManuallyDrop<OLEUIPASTESPECIALW>,
            ) -> u32;
        }
        ::std::mem::transmute(OleUIPasteSpecialW(::std::mem::transmute(param0)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn OleUIPromptUserA<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>,
>(
    ntemplate: i32,
    hwndparent: Param1,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "oledlg")]
        extern "system" {
            fn OleUIPromptUserA(ntemplate: i32, hwndparent: super::super::Foundation::HWND) -> i32;
        }
        ::std::mem::transmute(OleUIPromptUserA(
            ::std::mem::transmute(ntemplate),
            hwndparent.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn OleUIPromptUserW<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>,
>(
    ntemplate: i32,
    hwndparent: Param1,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "oledlg")]
        extern "system" {
            fn OleUIPromptUserW(ntemplate: i32, hwndparent: super::super::Foundation::HWND) -> i32;
        }
        ::std::mem::transmute(OleUIPromptUserW(
            ::std::mem::transmute(ntemplate),
            hwndparent.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn OleUIUpdateLinksA<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IOleUILinkContainerA>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PSTR>,
>(
    lpoleuilinkcntr: Param0,
    hwndparent: Param1,
    lpsztitle: Param2,
    clinks: i32,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "oledlg")]
        extern "system" {
            fn OleUIUpdateLinksA(
                lpoleuilinkcntr: ::windows::runtime::RawPtr,
                hwndparent: super::super::Foundation::HWND,
                lpsztitle: super::super::Foundation::PSTR,
                clinks: i32,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(OleUIUpdateLinksA(
            lpoleuilinkcntr.into_param().abi(),
            hwndparent.into_param().abi(),
            lpsztitle.into_param().abi(),
            ::std::mem::transmute(clinks),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn OleUIUpdateLinksW<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IOleUILinkContainerW>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    lpoleuilinkcntr: Param0,
    hwndparent: Param1,
    lpsztitle: Param2,
    clinks: i32,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "oledlg")]
        extern "system" {
            fn OleUIUpdateLinksW(
                lpoleuilinkcntr: ::windows::runtime::RawPtr,
                hwndparent: super::super::Foundation::HWND,
                lpsztitle: super::super::Foundation::PWSTR,
                clinks: i32,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(OleUIUpdateLinksW(
            lpoleuilinkcntr.into_param().abi(),
            hwndparent.into_param().abi(),
            lpsztitle.into_param().abi(),
            ::std::mem::transmute(clinks),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn OleUninitialize() {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn OleUninitialize();
        }
        ::std::mem::transmute(OleUninitialize())
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct PAGEACTION_UI(pub i32);
pub const PAGEACTION_UI_DEFAULT: PAGEACTION_UI = PAGEACTION_UI(0i32);
pub const PAGEACTION_UI_MODAL: PAGEACTION_UI = PAGEACTION_UI(1i32);
pub const PAGEACTION_UI_MODELESS: PAGEACTION_UI = PAGEACTION_UI(2i32);
pub const PAGEACTION_UI_SILENT: PAGEACTION_UI = PAGEACTION_UI(3i32);
impl ::std::convert::From<i32> for PAGEACTION_UI {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PAGEACTION_UI {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct PAGERANGE {
    pub nFromPage: i32,
    pub nToPage: i32,
}
impl PAGERANGE {}
impl ::std::default::Default for PAGERANGE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for PAGERANGE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("PAGERANGE")
            .field("nFromPage", &self.nFromPage)
            .field("nToPage", &self.nToPage)
            .finish()
    }
}
impl ::std::cmp::PartialEq for PAGERANGE {
    fn eq(&self, other: &Self) -> bool {
        self.nFromPage == other.nFromPage && self.nToPage == other.nToPage
    }
}
impl ::std::cmp::Eq for PAGERANGE {}
unsafe impl ::windows::runtime::Abi for PAGERANGE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct PAGESET {
    pub cbStruct: u32,
    pub fOddPages: super::super::Foundation::BOOL,
    pub fEvenPages: super::super::Foundation::BOOL,
    pub cPageRange: u32,
    pub rgPages: [PAGERANGE; 1],
}
#[cfg(feature = "Win32_Foundation")]
impl PAGESET {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for PAGESET {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for PAGESET {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("PAGESET")
            .field("cbStruct", &self.cbStruct)
            .field("fOddPages", &self.fOddPages)
            .field("fEvenPages", &self.fEvenPages)
            .field("cPageRange", &self.cPageRange)
            .field("rgPages", &self.rgPages)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for PAGESET {
    fn eq(&self, other: &Self) -> bool {
        self.cbStruct == other.cbStruct
            && self.fOddPages == other.fOddPages
            && self.fEvenPages == other.fEvenPages
            && self.cPageRange == other.cPageRange
            && self.rgPages == other.rgPages
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for PAGESET {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for PAGESET {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct PARSEACTION(pub i32);
pub const PARSE_CANONICALIZE: PARSEACTION = PARSEACTION(1i32);
pub const PARSE_FRIENDLY: PARSEACTION = PARSEACTION(2i32);
pub const PARSE_SECURITY_URL: PARSEACTION = PARSEACTION(3i32);
pub const PARSE_ROOTDOCUMENT: PARSEACTION = PARSEACTION(4i32);
pub const PARSE_DOCUMENT: PARSEACTION = PARSEACTION(5i32);
pub const PARSE_ANCHOR: PARSEACTION = PARSEACTION(6i32);
pub const PARSE_ENCODE_IS_UNESCAPE: PARSEACTION = PARSEACTION(7i32);
pub const PARSE_DECODE_IS_ESCAPE: PARSEACTION = PARSEACTION(8i32);
pub const PARSE_PATH_FROM_URL: PARSEACTION = PARSEACTION(9i32);
pub const PARSE_URL_FROM_PATH: PARSEACTION = PARSEACTION(10i32);
pub const PARSE_MIME: PARSEACTION = PARSEACTION(11i32);
pub const PARSE_SERVER: PARSEACTION = PARSEACTION(12i32);
pub const PARSE_SCHEMA: PARSEACTION = PARSEACTION(13i32);
pub const PARSE_SITE: PARSEACTION = PARSEACTION(14i32);
pub const PARSE_DOMAIN: PARSEACTION = PARSEACTION(15i32);
pub const PARSE_LOCATION: PARSEACTION = PARSEACTION(16i32);
pub const PARSE_SECURITY_DOMAIN: PARSEACTION = PARSEACTION(17i32);
pub const PARSE_ESCAPE: PARSEACTION = PARSEACTION(18i32);
pub const PARSE_UNESCAPE: PARSEACTION = PARSEACTION(19i32);
impl ::std::convert::From<i32> for PARSEACTION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PARSEACTION {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct PENDINGMSG(pub i32);
pub const PENDINGMSG_CANCELCALL: PENDINGMSG = PENDINGMSG(0i32);
pub const PENDINGMSG_WAITNOPROCESS: PENDINGMSG = PENDINGMSG(1i32);
pub const PENDINGMSG_WAITDEFPROCESS: PENDINGMSG = PENDINGMSG(2i32);
impl ::std::convert::From<i32> for PENDINGMSG {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PENDINGMSG {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct PENDINGTYPE(pub i32);
pub const PENDINGTYPE_TOPLEVEL: PENDINGTYPE = PENDINGTYPE(1i32);
pub const PENDINGTYPE_NESTED: PENDINGTYPE = PENDINGTYPE(2i32);
impl ::std::convert::From<i32> for PENDINGTYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PENDINGTYPE {
    type Abi = Self;
    type DefaultType = Self;
}
pub const PERPROP_E_FIRST: i32 = -2147220992i32;
pub const PERPROP_E_LAST: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2147220977i32 as _);
pub const PERPROP_E_NOPAGEAVAILABLE: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2147220992i32 as _);
pub const PERPROP_S_FIRST: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(262656i32 as _);
pub const PERPROP_S_LAST: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(262671i32 as _);
pub type PFNCONTEXTCALL =
    unsafe extern "system" fn(pparam: *mut ComCallData) -> ::windows::runtime::HRESULT;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_WindowsAndMessaging"
))]
pub struct PICTDESC {
    pub cbSizeofstruct: u32,
    pub picType: u32,
    pub Anonymous: PICTDESC_0,
}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl PICTDESC {}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::default::Default for PICTDESC {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::PartialEq for PICTDESC {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::Eq for PICTDESC {}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_WindowsAndMessaging"
))]
unsafe impl ::windows::runtime::Abi for PICTDESC {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_WindowsAndMessaging"
))]
pub union PICTDESC_0 {
    pub bmp: PICTDESC_0_0,
    pub wmf: PICTDESC_0_3,
    pub icon: PICTDESC_0_2,
    pub emf: PICTDESC_0_1,
}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl PICTDESC_0 {}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::default::Default for PICTDESC_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::PartialEq for PICTDESC_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_WindowsAndMessaging"
))]
impl ::std::cmp::Eq for PICTDESC_0 {}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_UI_WindowsAndMessaging"
))]
unsafe impl ::windows::runtime::Abi for PICTDESC_0 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Gdi")]
pub struct PICTDESC_0_0 {
    pub hbitmap: super::super::Graphics::Gdi::HBITMAP,
    pub hpal: super::super::Graphics::Gdi::HPALETTE,
}
#[cfg(feature = "Win32_Graphics_Gdi")]
impl PICTDESC_0_0 {}
#[cfg(feature = "Win32_Graphics_Gdi")]
impl ::std::default::Default for PICTDESC_0_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Gdi")]
impl ::std::fmt::Debug for PICTDESC_0_0 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_bmp_e__Struct")
            .field("hbitmap", &self.hbitmap)
            .field("hpal", &self.hpal)
            .finish()
    }
}
#[cfg(feature = "Win32_Graphics_Gdi")]
impl ::std::cmp::PartialEq for PICTDESC_0_0 {
    fn eq(&self, other: &Self) -> bool {
        self.hbitmap == other.hbitmap && self.hpal == other.hpal
    }
}
#[cfg(feature = "Win32_Graphics_Gdi")]
impl ::std::cmp::Eq for PICTDESC_0_0 {}
#[cfg(feature = "Win32_Graphics_Gdi")]
unsafe impl ::windows::runtime::Abi for PICTDESC_0_0 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Gdi")]
pub struct PICTDESC_0_1 {
    pub hemf: super::super::Graphics::Gdi::HENHMETAFILE,
}
#[cfg(feature = "Win32_Graphics_Gdi")]
impl PICTDESC_0_1 {}
#[cfg(feature = "Win32_Graphics_Gdi")]
impl ::std::default::Default for PICTDESC_0_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Gdi")]
impl ::std::fmt::Debug for PICTDESC_0_1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_emf_e__Struct")
            .field("hemf", &self.hemf)
            .finish()
    }
}
#[cfg(feature = "Win32_Graphics_Gdi")]
impl ::std::cmp::PartialEq for PICTDESC_0_1 {
    fn eq(&self, other: &Self) -> bool {
        self.hemf == other.hemf
    }
}
#[cfg(feature = "Win32_Graphics_Gdi")]
impl ::std::cmp::Eq for PICTDESC_0_1 {}
#[cfg(feature = "Win32_Graphics_Gdi")]
unsafe impl ::windows::runtime::Abi for PICTDESC_0_1 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub struct PICTDESC_0_2 {
    pub hicon: super::super::UI::WindowsAndMessaging::HICON,
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
impl PICTDESC_0_2 {}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
impl ::std::default::Default for PICTDESC_0_2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
impl ::std::fmt::Debug for PICTDESC_0_2 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_icon_e__Struct")
            .field("hicon", &self.hicon)
            .finish()
    }
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
impl ::std::cmp::PartialEq for PICTDESC_0_2 {
    fn eq(&self, other: &Self) -> bool {
        self.hicon == other.hicon
    }
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
impl ::std::cmp::Eq for PICTDESC_0_2 {}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
unsafe impl ::windows::runtime::Abi for PICTDESC_0_2 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Graphics_Gdi")]
pub struct PICTDESC_0_3 {
    pub hmeta: super::super::Graphics::Gdi::HMETAFILE,
    pub xExt: i32,
    pub yExt: i32,
}
#[cfg(feature = "Win32_Graphics_Gdi")]
impl PICTDESC_0_3 {}
#[cfg(feature = "Win32_Graphics_Gdi")]
impl ::std::default::Default for PICTDESC_0_3 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Graphics_Gdi")]
impl ::std::fmt::Debug for PICTDESC_0_3 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_wmf_e__Struct")
            .field("hmeta", &self.hmeta)
            .field("xExt", &self.xExt)
            .field("yExt", &self.yExt)
            .finish()
    }
}
#[cfg(feature = "Win32_Graphics_Gdi")]
impl ::std::cmp::PartialEq for PICTDESC_0_3 {
    fn eq(&self, other: &Self) -> bool {
        self.hmeta == other.hmeta && self.xExt == other.xExt && self.yExt == other.yExt
    }
}
#[cfg(feature = "Win32_Graphics_Gdi")]
impl ::std::cmp::Eq for PICTDESC_0_3 {}
#[cfg(feature = "Win32_Graphics_Gdi")]
unsafe impl ::windows::runtime::Abi for PICTDESC_0_3 {
    type Abi = Self;
    type DefaultType = Self;
}
pub const PICTYPE_BITMAP: u32 = 1u32;
pub const PICTYPE_ENHMETAFILE: u32 = 4u32;
pub const PICTYPE_ICON: u32 = 3u32;
pub const PICTYPE_METAFILE: u32 = 2u32;
pub const PICTYPE_NONE: u32 = 0u32;
pub const PICTYPE_UNINITIALIZED: i32 = -1i32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct PI_FLAGS(pub i32);
pub const PI_PARSE_URL: PI_FLAGS = PI_FLAGS(1i32);
pub const PI_FILTER_MODE: PI_FLAGS = PI_FLAGS(2i32);
pub const PI_FORCE_ASYNC: PI_FLAGS = PI_FLAGS(4i32);
pub const PI_USE_WORKERTHREAD: PI_FLAGS = PI_FLAGS(8i32);
pub const PI_MIMEVERIFICATION: PI_FLAGS = PI_FLAGS(16i32);
pub const PI_CLSIDLOOKUP: PI_FLAGS = PI_FLAGS(32i32);
pub const PI_DATAPROGRESS: PI_FLAGS = PI_FLAGS(64i32);
pub const PI_SYNCHRONOUS: PI_FLAGS = PI_FLAGS(128i32);
pub const PI_APARTMENTTHREADED: PI_FLAGS = PI_FLAGS(256i32);
pub const PI_CLASSINSTALL: PI_FLAGS = PI_FLAGS(512i32);
pub const PI_PASSONBINDCTX: PI_FLAGS = PI_FLAGS(8192i32);
pub const PI_NOMIMEHANDLER: PI_FLAGS = PI_FLAGS(32768i32);
pub const PI_LOADAPPDIRECT: PI_FLAGS = PI_FLAGS(16384i32);
pub const PD_FORCE_SWITCH: PI_FLAGS = PI_FLAGS(65536i32);
pub const PI_PREFERDEFAULTHANDLER: PI_FLAGS = PI_FLAGS(131072i32);
impl ::std::convert::From<i32> for PI_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PI_FLAGS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct POINTERINACTIVE(pub i32);
pub const POINTERINACTIVE_ACTIVATEONENTRY: POINTERINACTIVE = POINTERINACTIVE(1i32);
pub const POINTERINACTIVE_DEACTIVATEONLEAVE: POINTERINACTIVE = POINTERINACTIVE(2i32);
pub const POINTERINACTIVE_ACTIVATEONDRAG: POINTERINACTIVE = POINTERINACTIVE(4i32);
impl ::std::convert::From<i32> for POINTERINACTIVE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for POINTERINACTIVE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct POINTF {
    pub x: f32,
    pub y: f32,
}
impl POINTF {}
impl ::std::default::Default for POINTF {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for POINTF {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("POINTF")
            .field("x", &self.x)
            .field("y", &self.y)
            .finish()
    }
}
impl ::std::cmp::PartialEq for POINTF {
    fn eq(&self, other: &Self) -> bool {
        self.x == other.x && self.y == other.y
    }
}
impl ::std::cmp::Eq for POINTF {}
unsafe impl ::windows::runtime::Abi for POINTF {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct PRINTFLAG(pub u32);
pub const PRINTFLAG_MAYBOTHERUSER: PRINTFLAG = PRINTFLAG(1u32);
pub const PRINTFLAG_PROMPTUSER: PRINTFLAG = PRINTFLAG(2u32);
pub const PRINTFLAG_USERMAYCHANGEPRINTER: PRINTFLAG = PRINTFLAG(4u32);
pub const PRINTFLAG_RECOMPOSETODEVICE: PRINTFLAG = PRINTFLAG(8u32);
pub const PRINTFLAG_DONTACTUALLYPRINT: PRINTFLAG = PRINTFLAG(16u32);
pub const PRINTFLAG_FORCEPROPERTIES: PRINTFLAG = PRINTFLAG(32u32);
pub const PRINTFLAG_PRINTTOFILE: PRINTFLAG = PRINTFLAG(64u32);
impl ::std::convert::From<u32> for PRINTFLAG {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PRINTFLAG {
    type Abi = Self;
    type DefaultType = Self;
}
impl ::std::ops::BitOr for PRINTFLAG {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for PRINTFLAG {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for PRINTFLAG {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for PRINTFLAG {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for PRINTFLAG {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct PROPBAG2 {
    pub dwType: u32,
    pub vt: u16,
    pub cfType: u16,
    pub dwHint: u32,
    pub pstrName: super::super::Foundation::PWSTR,
    pub clsid: ::windows::runtime::GUID,
}
#[cfg(feature = "Win32_Foundation")]
impl PROPBAG2 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for PROPBAG2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for PROPBAG2 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("PROPBAG2")
            .field("dwType", &self.dwType)
            .field("vt", &self.vt)
            .field("cfType", &self.cfType)
            .field("dwHint", &self.dwHint)
            .field("pstrName", &self.pstrName)
            .field("clsid", &self.clsid)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for PROPBAG2 {
    fn eq(&self, other: &Self) -> bool {
        self.dwType == other.dwType
            && self.vt == other.vt
            && self.cfType == other.cfType
            && self.dwHint == other.dwHint
            && self.pstrName == other.pstrName
            && self.clsid == other.clsid
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for PROPBAG2 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for PROPBAG2 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct PROPBAG2_TYPE(pub i32);
pub const PROPBAG2_TYPE_UNDEFINED: PROPBAG2_TYPE = PROPBAG2_TYPE(0i32);
pub const PROPBAG2_TYPE_DATA: PROPBAG2_TYPE = PROPBAG2_TYPE(1i32);
pub const PROPBAG2_TYPE_URL: PROPBAG2_TYPE = PROPBAG2_TYPE(2i32);
pub const PROPBAG2_TYPE_OBJECT: PROPBAG2_TYPE = PROPBAG2_TYPE(3i32);
pub const PROPBAG2_TYPE_STREAM: PROPBAG2_TYPE = PROPBAG2_TYPE(4i32);
pub const PROPBAG2_TYPE_STORAGE: PROPBAG2_TYPE = PROPBAG2_TYPE(5i32);
pub const PROPBAG2_TYPE_MONIKER: PROPBAG2_TYPE = PROPBAG2_TYPE(6i32);
impl ::std::convert::From<i32> for PROPBAG2_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PROPBAG2_TYPE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct PROPPAGEINFO {
    pub cb: u32,
    pub pszTitle: super::super::Foundation::PWSTR,
    pub size: super::super::Foundation::SIZE,
    pub pszDocString: super::super::Foundation::PWSTR,
    pub pszHelpFile: super::super::Foundation::PWSTR,
    pub dwHelpContext: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl PROPPAGEINFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for PROPPAGEINFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for PROPPAGEINFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("PROPPAGEINFO")
            .field("cb", &self.cb)
            .field("pszTitle", &self.pszTitle)
            .field("size", &self.size)
            .field("pszDocString", &self.pszDocString)
            .field("pszHelpFile", &self.pszHelpFile)
            .field("dwHelpContext", &self.dwHelpContext)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for PROPPAGEINFO {
    fn eq(&self, other: &Self) -> bool {
        self.cb == other.cb
            && self.pszTitle == other.pszTitle
            && self.size == other.size
            && self.pszDocString == other.pszDocString
            && self.pszHelpFile == other.pszHelpFile
            && self.dwHelpContext == other.dwHelpContext
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for PROPPAGEINFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for PROPPAGEINFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct PROPPAGESTATUS(pub i32);
pub const PROPPAGESTATUS_DIRTY: PROPPAGESTATUS = PROPPAGESTATUS(1i32);
pub const PROPPAGESTATUS_VALIDATE: PROPPAGESTATUS = PROPPAGESTATUS(2i32);
pub const PROPPAGESTATUS_CLEAN: PROPPAGESTATUS = PROPPAGESTATUS(4i32);
impl ::std::convert::From<i32> for PROPPAGESTATUS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PROPPAGESTATUS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct PROTOCOLDATA {
    pub grfFlags: u32,
    pub dwState: u32,
    pub pData: *mut ::std::ffi::c_void,
    pub cbData: u32,
}
impl PROTOCOLDATA {}
impl ::std::default::Default for PROTOCOLDATA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for PROTOCOLDATA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("PROTOCOLDATA")
            .field("grfFlags", &self.grfFlags)
            .field("dwState", &self.dwState)
            .field("pData", &self.pData)
            .field("cbData", &self.cbData)
            .finish()
    }
}
impl ::std::cmp::PartialEq for PROTOCOLDATA {
    fn eq(&self, other: &Self) -> bool {
        self.grfFlags == other.grfFlags
            && self.dwState == other.dwState
            && self.pData == other.pData
            && self.cbData == other.cbData
    }
}
impl ::std::cmp::Eq for PROTOCOLDATA {}
unsafe impl ::windows::runtime::Abi for PROTOCOLDATA {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
pub struct PROTOCOLFILTERDATA {
    pub cbSize: u32,
    pub pProtocolSink: ::std::option::Option<IInternetProtocolSink>,
    pub pProtocol: ::std::option::Option<IInternetProtocol>,
    pub pUnk: ::std::option::Option<::windows::runtime::IUnknown>,
    pub dwFilterFlags: u32,
}
impl PROTOCOLFILTERDATA {}
impl ::std::default::Default for PROTOCOLFILTERDATA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for PROTOCOLFILTERDATA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("PROTOCOLFILTERDATA")
            .field("cbSize", &self.cbSize)
            .field("pProtocolSink", &self.pProtocolSink)
            .field("pProtocol", &self.pProtocol)
            .field("pUnk", &self.pUnk)
            .field("dwFilterFlags", &self.dwFilterFlags)
            .finish()
    }
}
impl ::std::cmp::PartialEq for PROTOCOLFILTERDATA {
    fn eq(&self, other: &Self) -> bool {
        self.cbSize == other.cbSize
            && self.pProtocolSink == other.pProtocolSink
            && self.pProtocol == other.pProtocol
            && self.pUnk == other.pUnk
            && self.dwFilterFlags == other.dwFilterFlags
    }
}
impl ::std::cmp::Eq for PROTOCOLFILTERDATA {}
unsafe impl ::windows::runtime::Abi for PROTOCOLFILTERDATA {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
pub const PROTOCOLFLAG_NO_PICS_CHECK: u32 = 1u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct PROTOCOL_ARGUMENT {
    pub szMethod: super::super::Foundation::PWSTR,
    pub szTargetUrl: super::super::Foundation::PWSTR,
}
#[cfg(feature = "Win32_Foundation")]
impl PROTOCOL_ARGUMENT {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for PROTOCOL_ARGUMENT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for PROTOCOL_ARGUMENT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("PROTOCOL_ARGUMENT")
            .field("szMethod", &self.szMethod)
            .field("szTargetUrl", &self.szTargetUrl)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for PROTOCOL_ARGUMENT {
    fn eq(&self, other: &Self) -> bool {
        self.szMethod == other.szMethod && self.szTargetUrl == other.szTargetUrl
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for PROTOCOL_ARGUMENT {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for PROTOCOL_ARGUMENT {
    type Abi = Self;
    type DefaultType = Self;
}
pub const PSF_CHECKDISPLAYASICON: i32 = 8i32;
pub const PSF_DISABLEDISPLAYASICON: i32 = 16i32;
pub const PSF_HIDECHANGEICON: i32 = 32i32;
pub const PSF_NOREFRESHDATAOBJECT: i32 = 128i32;
pub const PSF_SELECTPASTE: i32 = 2i32;
pub const PSF_SELECTPASTELINK: i32 = 4i32;
pub const PSF_SHOWHELP: i32 = 1i32;
pub const PSF_STAYONCLIPBOARDCHANGE: i32 = 64i32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct PSUACTION(pub i32);
pub const PSU_DEFAULT: PSUACTION = PSUACTION(1i32);
pub const PSU_SECURITY_URL_ONLY: PSUACTION = PSUACTION(2i32);
impl ::std::convert::From<i32> for PSUACTION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PSUACTION {
    type Abi = Self;
    type DefaultType = Self;
}
pub const PS_MAXLINKTYPES: u32 = 8u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct PUAF(pub i32);
pub const PUAF_DEFAULT: PUAF = PUAF(0i32);
pub const PUAF_NOUI: PUAF = PUAF(1i32);
pub const PUAF_ISFILE: PUAF = PUAF(2i32);
pub const PUAF_WARN_IF_DENIED: PUAF = PUAF(4i32);
pub const PUAF_FORCEUI_FOREGROUND: PUAF = PUAF(8i32);
pub const PUAF_CHECK_TIFS: PUAF = PUAF(16i32);
pub const PUAF_DONTCHECKBOXINDIALOG: PUAF = PUAF(32i32);
pub const PUAF_TRUSTED: PUAF = PUAF(64i32);
pub const PUAF_ACCEPT_WILDCARD_SCHEME: PUAF = PUAF(128i32);
pub const PUAF_ENFORCERESTRICTED: PUAF = PUAF(256i32);
pub const PUAF_NOSAVEDFILECHECK: PUAF = PUAF(512i32);
pub const PUAF_REQUIRESAVEDFILECHECK: PUAF = PUAF(1024i32);
pub const PUAF_DONT_USE_CACHE: PUAF = PUAF(4096i32);
pub const PUAF_RESERVED1: PUAF = PUAF(8192i32);
pub const PUAF_RESERVED2: PUAF = PUAF(16384i32);
pub const PUAF_LMZ_UNLOCKED: PUAF = PUAF(65536i32);
pub const PUAF_LMZ_LOCKED: PUAF = PUAF(131072i32);
pub const PUAF_DEFAULTZONEPOL: PUAF = PUAF(262144i32);
pub const PUAF_NPL_USE_LOCKED_IF_RESTRICTED: PUAF = PUAF(524288i32);
pub const PUAF_NOUIIFLOCKED: PUAF = PUAF(1048576i32);
pub const PUAF_DRAGPROTOCOLCHECK: PUAF = PUAF(2097152i32);
impl ::std::convert::From<i32> for PUAF {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PUAF {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct PUAFOUT(pub i32);
pub const PUAFOUT_DEFAULT: PUAFOUT = PUAFOUT(0i32);
pub const PUAFOUT_ISLOCKZONEPOLICY: PUAFOUT = PUAFOUT(1i32);
impl ::std::convert::From<i32> for PUAFOUT {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PUAFOUT {
    type Abi = Self;
    type DefaultType = Self;
}
pub const PackageUtil: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1857169541,
    35353,
    4560,
    [129, 182, 0, 160, 201, 35, 28, 41],
);
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct PictureAttributes(pub i32);
pub const PICTURE_SCALABLE: PictureAttributes = PictureAttributes(1i32);
pub const PICTURE_TRANSPARENT: PictureAttributes = PictureAttributes(2i32);
impl ::std::convert::From<i32> for PictureAttributes {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PictureAttributes {
    type Abi = Self;
    type DefaultType = Self;
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn ProgIDFromCLSID(
    clsid: *const ::windows::runtime::GUID,
) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn ProgIDFromCLSID(
                clsid: *const ::windows::runtime::GUID,
                lplpszprogid: *mut super::super::Foundation::PWSTR,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        ProgIDFromCLSID(::std::mem::transmute(clsid), &mut result__)
            .from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
pub struct QACONTAINER {
    pub cbSize: u32,
    pub pClientSite: ::std::option::Option<IOleClientSite>,
    pub pAdviseSink: ::std::option::Option<IAdviseSinkEx>,
    pub pPropertyNotifySink: ::std::option::Option<IPropertyNotifySink>,
    pub pUnkEventSink: ::std::option::Option<::windows::runtime::IUnknown>,
    pub dwAmbientFlags: u32,
    pub colorFore: u32,
    pub colorBack: u32,
    pub pFont: ::std::option::Option<IFont>,
    pub pUndoMgr: ::std::option::Option<IOleUndoManager>,
    pub dwAppearance: u32,
    pub lcid: i32,
    pub hpal: super::super::Graphics::Gdi::HPALETTE,
    pub pBindHost: ::std::option::Option<IBindHost>,
    pub pOleControlSite: ::std::option::Option<IOleControlSite>,
    pub pServiceProvider: ::std::option::Option<super::SystemServices::IServiceProvider>,
}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
impl QACONTAINER {}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
impl ::std::default::Default for QACONTAINER {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
impl ::std::fmt::Debug for QACONTAINER {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("QACONTAINER")
            .field("cbSize", &self.cbSize)
            .field("pClientSite", &self.pClientSite)
            .field("pAdviseSink", &self.pAdviseSink)
            .field("pPropertyNotifySink", &self.pPropertyNotifySink)
            .field("pUnkEventSink", &self.pUnkEventSink)
            .field("dwAmbientFlags", &self.dwAmbientFlags)
            .field("colorFore", &self.colorFore)
            .field("colorBack", &self.colorBack)
            .field("pFont", &self.pFont)
            .field("pUndoMgr", &self.pUndoMgr)
            .field("dwAppearance", &self.dwAppearance)
            .field("lcid", &self.lcid)
            .field("hpal", &self.hpal)
            .field("pBindHost", &self.pBindHost)
            .field("pOleControlSite", &self.pOleControlSite)
            .field("pServiceProvider", &self.pServiceProvider)
            .finish()
    }
}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
impl ::std::cmp::PartialEq for QACONTAINER {
    fn eq(&self, other: &Self) -> bool {
        self.cbSize == other.cbSize
            && self.pClientSite == other.pClientSite
            && self.pAdviseSink == other.pAdviseSink
            && self.pPropertyNotifySink == other.pPropertyNotifySink
            && self.pUnkEventSink == other.pUnkEventSink
            && self.dwAmbientFlags == other.dwAmbientFlags
            && self.colorFore == other.colorFore
            && self.colorBack == other.colorBack
            && self.pFont == other.pFont
            && self.pUndoMgr == other.pUndoMgr
            && self.dwAppearance == other.dwAppearance
            && self.lcid == other.lcid
            && self.hpal == other.hpal
            && self.pBindHost == other.pBindHost
            && self.pOleControlSite == other.pOleControlSite
            && self.pServiceProvider == other.pServiceProvider
    }
}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
impl ::std::cmp::Eq for QACONTAINER {}
#[cfg(all(
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
unsafe impl ::windows::runtime::Abi for QACONTAINER {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct QACONTAINERFLAGS(pub i32);
pub const QACONTAINER_SHOWHATCHING: QACONTAINERFLAGS = QACONTAINERFLAGS(1i32);
pub const QACONTAINER_SHOWGRABHANDLES: QACONTAINERFLAGS = QACONTAINERFLAGS(2i32);
pub const QACONTAINER_USERMODE: QACONTAINERFLAGS = QACONTAINERFLAGS(4i32);
pub const QACONTAINER_DISPLAYASDEFAULT: QACONTAINERFLAGS = QACONTAINERFLAGS(8i32);
pub const QACONTAINER_UIDEAD: QACONTAINERFLAGS = QACONTAINERFLAGS(16i32);
pub const QACONTAINER_AUTOCLIP: QACONTAINERFLAGS = QACONTAINERFLAGS(32i32);
pub const QACONTAINER_MESSAGEREFLECT: QACONTAINERFLAGS = QACONTAINERFLAGS(64i32);
pub const QACONTAINER_SUPPORTSMNEMONICS: QACONTAINERFLAGS = QACONTAINERFLAGS(128i32);
impl ::std::convert::From<i32> for QACONTAINERFLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for QACONTAINERFLAGS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct QACONTROL {
    pub cbSize: u32,
    pub dwMiscStatus: u32,
    pub dwViewStatus: u32,
    pub dwEventCookie: u32,
    pub dwPropNotifyCookie: u32,
    pub dwPointerActivationPolicy: u32,
}
impl QACONTROL {}
impl ::std::default::Default for QACONTROL {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for QACONTROL {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("QACONTROL")
            .field("cbSize", &self.cbSize)
            .field("dwMiscStatus", &self.dwMiscStatus)
            .field("dwViewStatus", &self.dwViewStatus)
            .field("dwEventCookie", &self.dwEventCookie)
            .field("dwPropNotifyCookie", &self.dwPropNotifyCookie)
            .field("dwPointerActivationPolicy", &self.dwPointerActivationPolicy)
            .finish()
    }
}
impl ::std::cmp::PartialEq for QACONTROL {
    fn eq(&self, other: &Self) -> bool {
        self.cbSize == other.cbSize
            && self.dwMiscStatus == other.dwMiscStatus
            && self.dwViewStatus == other.dwViewStatus
            && self.dwEventCookie == other.dwEventCookie
            && self.dwPropNotifyCookie == other.dwPropNotifyCookie
            && self.dwPointerActivationPolicy == other.dwPointerActivationPolicy
    }
}
impl ::std::cmp::Eq for QACONTROL {}
unsafe impl ::windows::runtime::Abi for QACONTROL {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct QUERYCONTEXT {
    pub dwContext: u32,
    pub Platform: CSPLATFORM,
    pub Locale: u32,
    pub dwVersionHi: u32,
    pub dwVersionLo: u32,
}
impl QUERYCONTEXT {}
impl ::std::default::Default for QUERYCONTEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for QUERYCONTEXT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("QUERYCONTEXT")
            .field("dwContext", &self.dwContext)
            .field("Platform", &self.Platform)
            .field("Locale", &self.Locale)
            .field("dwVersionHi", &self.dwVersionHi)
            .field("dwVersionLo", &self.dwVersionLo)
            .finish()
    }
}
impl ::std::cmp::PartialEq for QUERYCONTEXT {
    fn eq(&self, other: &Self) -> bool {
        self.dwContext == other.dwContext
            && self.Platform == other.Platform
            && self.Locale == other.Locale
            && self.dwVersionHi == other.dwVersionHi
            && self.dwVersionLo == other.dwVersionLo
    }
}
impl ::std::cmp::Eq for QUERYCONTEXT {}
unsafe impl ::windows::runtime::Abi for QUERYCONTEXT {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct QUERYOPTION(pub i32);
pub const QUERY_EXPIRATION_DATE: QUERYOPTION = QUERYOPTION(1i32);
pub const QUERY_TIME_OF_LAST_CHANGE: QUERYOPTION = QUERYOPTION(2i32);
pub const QUERY_CONTENT_ENCODING: QUERYOPTION = QUERYOPTION(3i32);
pub const QUERY_CONTENT_TYPE: QUERYOPTION = QUERYOPTION(4i32);
pub const QUERY_REFRESH: QUERYOPTION = QUERYOPTION(5i32);
pub const QUERY_RECOMBINE: QUERYOPTION = QUERYOPTION(6i32);
pub const QUERY_CAN_NAVIGATE: QUERYOPTION = QUERYOPTION(7i32);
pub const QUERY_USES_NETWORK: QUERYOPTION = QUERYOPTION(8i32);
pub const QUERY_IS_CACHED: QUERYOPTION = QUERYOPTION(9i32);
pub const QUERY_IS_INSTALLEDENTRY: QUERYOPTION = QUERYOPTION(10i32);
pub const QUERY_IS_CACHED_OR_MAPPED: QUERYOPTION = QUERYOPTION(11i32);
pub const QUERY_USES_CACHE: QUERYOPTION = QUERYOPTION(12i32);
pub const QUERY_IS_SECURE: QUERYOPTION = QUERYOPTION(13i32);
pub const QUERY_IS_SAFE: QUERYOPTION = QUERYOPTION(14i32);
pub const QUERY_USES_HISTORYFOLDER: QUERYOPTION = QUERYOPTION(15i32);
pub const QUERY_IS_CACHED_AND_USABLE_OFFLINE: QUERYOPTION = QUERYOPTION(16i32);
impl ::std::convert::From<i32> for QUERYOPTION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for QUERYOPTION {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct READYSTATE(pub i32);
pub const READYSTATE_UNINITIALIZED: READYSTATE = READYSTATE(0i32);
pub const READYSTATE_LOADING: READYSTATE = READYSTATE(1i32);
pub const READYSTATE_LOADED: READYSTATE = READYSTATE(2i32);
pub const READYSTATE_INTERACTIVE: READYSTATE = READYSTATE(3i32);
pub const READYSTATE_COMPLETE: READYSTATE = READYSTATE(4i32);
impl ::std::convert::From<i32> for READYSTATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for READYSTATE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct REGCLS(pub i32);
pub const REGCLS_SINGLEUSE: REGCLS = REGCLS(0i32);
pub const REGCLS_MULTIPLEUSE: REGCLS = REGCLS(1i32);
pub const REGCLS_MULTI_SEPARATE: REGCLS = REGCLS(2i32);
pub const REGCLS_SUSPENDED: REGCLS = REGCLS(4i32);
pub const REGCLS_SURROGATE: REGCLS = REGCLS(8i32);
pub const REGCLS_AGILE: REGCLS = REGCLS(16i32);
impl ::std::convert::From<i32> for REGCLS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for REGCLS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct REMSECURITY_ATTRIBUTES {
    pub nLength: u32,
    pub lpSecurityDescriptor: u32,
    pub bInheritHandle: super::super::Foundation::BOOL,
}
#[cfg(feature = "Win32_Foundation")]
impl REMSECURITY_ATTRIBUTES {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for REMSECURITY_ATTRIBUTES {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for REMSECURITY_ATTRIBUTES {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("REMSECURITY_ATTRIBUTES")
            .field("nLength", &self.nLength)
            .field("lpSecurityDescriptor", &self.lpSecurityDescriptor)
            .field("bInheritHandle", &self.bInheritHandle)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for REMSECURITY_ATTRIBUTES {
    fn eq(&self, other: &Self) -> bool {
        self.nLength == other.nLength
            && self.lpSecurityDescriptor == other.lpSecurityDescriptor
            && self.bInheritHandle == other.bInheritHandle
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for REMSECURITY_ATTRIBUTES {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for REMSECURITY_ATTRIBUTES {
    type Abi = Self;
    type DefaultType = Self;
}
pub const ROTREGFLAGS_ALLOWANYCLIENT: u32 = 1u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct RPCOLEMESSAGE {
    pub reserved1: *mut ::std::ffi::c_void,
    pub dataRepresentation: u32,
    pub Buffer: *mut ::std::ffi::c_void,
    pub cbBuffer: u32,
    pub iMethod: u32,
    pub reserved2: [*mut ::std::ffi::c_void; 5],
    pub rpcFlags: u32,
}
impl RPCOLEMESSAGE {}
impl ::std::default::Default for RPCOLEMESSAGE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for RPCOLEMESSAGE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("RPCOLEMESSAGE")
            .field("reserved1", &self.reserved1)
            .field("dataRepresentation", &self.dataRepresentation)
            .field("Buffer", &self.Buffer)
            .field("cbBuffer", &self.cbBuffer)
            .field("iMethod", &self.iMethod)
            .field("reserved2", &self.reserved2)
            .field("rpcFlags", &self.rpcFlags)
            .finish()
    }
}
impl ::std::cmp::PartialEq for RPCOLEMESSAGE {
    fn eq(&self, other: &Self) -> bool {
        self.reserved1 == other.reserved1
            && self.dataRepresentation == other.dataRepresentation
            && self.Buffer == other.Buffer
            && self.cbBuffer == other.cbBuffer
            && self.iMethod == other.iMethod
            && self.reserved2 == other.reserved2
            && self.rpcFlags == other.rpcFlags
    }
}
impl ::std::cmp::Eq for RPCOLEMESSAGE {}
unsafe impl ::windows::runtime::Abi for RPCOLEMESSAGE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct RPCOPT_PROPERTIES(pub i32);
pub const COMBND_RPCTIMEOUT: RPCOPT_PROPERTIES = RPCOPT_PROPERTIES(1i32);
pub const COMBND_SERVER_LOCALITY: RPCOPT_PROPERTIES = RPCOPT_PROPERTIES(2i32);
pub const COMBND_RESERVED1: RPCOPT_PROPERTIES = RPCOPT_PROPERTIES(4i32);
pub const COMBND_RESERVED2: RPCOPT_PROPERTIES = RPCOPT_PROPERTIES(5i32);
pub const COMBND_RESERVED3: RPCOPT_PROPERTIES = RPCOPT_PROPERTIES(8i32);
pub const COMBND_RESERVED4: RPCOPT_PROPERTIES = RPCOPT_PROPERTIES(16i32);
impl ::std::convert::From<i32> for RPCOPT_PROPERTIES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for RPCOPT_PROPERTIES {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct RPCOPT_SERVER_LOCALITY_VALUES(pub i32);
pub const SERVER_LOCALITY_PROCESS_LOCAL: RPCOPT_SERVER_LOCALITY_VALUES =
    RPCOPT_SERVER_LOCALITY_VALUES(0i32);
pub const SERVER_LOCALITY_MACHINE_LOCAL: RPCOPT_SERVER_LOCALITY_VALUES =
    RPCOPT_SERVER_LOCALITY_VALUES(1i32);
pub const SERVER_LOCALITY_REMOTE: RPCOPT_SERVER_LOCALITY_VALUES =
    RPCOPT_SERVER_LOCALITY_VALUES(2i32);
impl ::std::convert::From<i32> for RPCOPT_SERVER_LOCALITY_VALUES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for RPCOPT_SERVER_LOCALITY_VALUES {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct RPC_C_AUTHN_LEVEL(pub u32);
pub const RPC_C_AUTHN_LEVEL_DEFAULT: RPC_C_AUTHN_LEVEL = RPC_C_AUTHN_LEVEL(0u32);
pub const RPC_C_AUTHN_LEVEL_NONE: RPC_C_AUTHN_LEVEL = RPC_C_AUTHN_LEVEL(1u32);
pub const RPC_C_AUTHN_LEVEL_CONNECT: RPC_C_AUTHN_LEVEL = RPC_C_AUTHN_LEVEL(2u32);
pub const RPC_C_AUTHN_LEVEL_CALL: RPC_C_AUTHN_LEVEL = RPC_C_AUTHN_LEVEL(3u32);
pub const RPC_C_AUTHN_LEVEL_PKT: RPC_C_AUTHN_LEVEL = RPC_C_AUTHN_LEVEL(4u32);
pub const RPC_C_AUTHN_LEVEL_PKT_INTEGRITY: RPC_C_AUTHN_LEVEL = RPC_C_AUTHN_LEVEL(5u32);
pub const RPC_C_AUTHN_LEVEL_PKT_PRIVACY: RPC_C_AUTHN_LEVEL = RPC_C_AUTHN_LEVEL(6u32);
impl ::std::convert::From<u32> for RPC_C_AUTHN_LEVEL {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for RPC_C_AUTHN_LEVEL {
    type Abi = Self;
    type DefaultType = Self;
}
impl ::std::ops::BitOr for RPC_C_AUTHN_LEVEL {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for RPC_C_AUTHN_LEVEL {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for RPC_C_AUTHN_LEVEL {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for RPC_C_AUTHN_LEVEL {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for RPC_C_AUTHN_LEVEL {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct RPC_C_IMP_LEVEL(pub u32);
pub const RPC_C_IMP_LEVEL_DEFAULT: RPC_C_IMP_LEVEL = RPC_C_IMP_LEVEL(0u32);
pub const RPC_C_IMP_LEVEL_ANONYMOUS: RPC_C_IMP_LEVEL = RPC_C_IMP_LEVEL(1u32);
pub const RPC_C_IMP_LEVEL_IDENTIFY: RPC_C_IMP_LEVEL = RPC_C_IMP_LEVEL(2u32);
pub const RPC_C_IMP_LEVEL_IMPERSONATE: RPC_C_IMP_LEVEL = RPC_C_IMP_LEVEL(3u32);
pub const RPC_C_IMP_LEVEL_DELEGATE: RPC_C_IMP_LEVEL = RPC_C_IMP_LEVEL(4u32);
impl ::std::convert::From<u32> for RPC_C_IMP_LEVEL {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for RPC_C_IMP_LEVEL {
    type Abi = Self;
    type DefaultType = Self;
}
impl ::std::ops::BitOr for RPC_C_IMP_LEVEL {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for RPC_C_IMP_LEVEL {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for RPC_C_IMP_LEVEL {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for RPC_C_IMP_LEVEL {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for RPC_C_IMP_LEVEL {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
pub unsafe fn RegisterBindStatusCallback<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IBindCtx>,
    Param1: ::windows::runtime::IntoParam<'a, IBindStatusCallback>,
>(
    pbc: Param0,
    pbscb: Param1,
    ppbscbprev: *mut ::std::option::Option<IBindStatusCallback>,
    dwreserved: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn RegisterBindStatusCallback(
                pbc: ::windows::runtime::RawPtr,
                pbscb: ::windows::runtime::RawPtr,
                ppbscbprev: *mut ::windows::runtime::RawPtr,
                dwreserved: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        RegisterBindStatusCallback(
            pbc.into_param().abi(),
            pbscb.into_param().abi(),
            ::std::mem::transmute(ppbscbprev),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn RegisterDragDrop<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>,
    Param1: ::windows::runtime::IntoParam<'a, IDropTarget>,
>(
    hwnd: Param0,
    pdroptarget: Param1,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn RegisterDragDrop(
                hwnd: super::super::Foundation::HWND,
                pdroptarget: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        RegisterDragDrop(hwnd.into_param().abi(), pdroptarget.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn RegisterFormatEnumerator<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IBindCtx>,
    Param1: ::windows::runtime::IntoParam<'a, IEnumFORMATETC>,
>(
    pbc: Param0,
    pefetc: Param1,
    reserved: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn RegisterFormatEnumerator(
                pbc: ::windows::runtime::RawPtr,
                pefetc: ::windows::runtime::RawPtr,
                reserved: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        RegisterFormatEnumerator(
            pbc.into_param().abi(),
            pefetc.into_param().abi(),
            ::std::mem::transmute(reserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn RegisterMediaTypeClass<'a, Param0: ::windows::runtime::IntoParam<'a, IBindCtx>>(
    pbc: Param0,
    ctypes: u32,
    rgsztypes: *const super::super::Foundation::PSTR,
    rgclsid: *const ::windows::runtime::GUID,
    reserved: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn RegisterMediaTypeClass(
                pbc: ::windows::runtime::RawPtr,
                ctypes: u32,
                rgsztypes: *const super::super::Foundation::PSTR,
                rgclsid: *const ::windows::runtime::GUID,
                reserved: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        RegisterMediaTypeClass(
            pbc.into_param().abi(),
            ::std::mem::transmute(ctypes),
            ::std::mem::transmute(rgsztypes),
            ::std::mem::transmute(rgclsid),
            ::std::mem::transmute(reserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn RegisterMediaTypes(
    ctypes: u32,
    rgsztypes: *const super::super::Foundation::PSTR,
    rgcftypes: *mut u16,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn RegisterMediaTypes(
                ctypes: u32,
                rgsztypes: *const super::super::Foundation::PSTR,
                rgcftypes: *mut u16,
            ) -> ::windows::runtime::HRESULT;
        }
        RegisterMediaTypes(
            ::std::mem::transmute(ctypes),
            ::std::mem::transmute(rgsztypes),
            ::std::mem::transmute(rgcftypes),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Security",
    feature = "Win32_Storage_StructuredStorage"
))]
pub unsafe fn ReleaseBindInfo(pbindinfo: *mut BINDINFO) {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn ReleaseBindInfo(pbindinfo: *mut ::std::mem::ManuallyDrop<BINDINFO>);
        }
        ::std::mem::transmute(ReleaseBindInfo(::std::mem::transmute(pbindinfo)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Storage_StructuredStorage"
))]
pub unsafe fn ReleaseStgMedium(param0: *mut STGMEDIUM) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn ReleaseStgMedium(param0: *mut ::std::mem::ManuallyDrop<STGMEDIUM>);
        }
        ::std::mem::transmute(ReleaseStgMedium(::std::mem::transmute(param0)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct RemBINDINFO {
    pub cbSize: u32,
    pub szExtraInfo: super::super::Foundation::PWSTR,
    pub grfBindInfoF: u32,
    pub dwBindVerb: u32,
    pub szCustomVerb: super::super::Foundation::PWSTR,
    pub cbstgmedData: u32,
    pub dwOptions: u32,
    pub dwOptionsFlags: u32,
    pub dwCodePage: u32,
    pub securityAttributes: REMSECURITY_ATTRIBUTES,
    pub iid: ::windows::runtime::GUID,
    pub pUnk: ::std::option::Option<::windows::runtime::IUnknown>,
    pub dwReserved: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl RemBINDINFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for RemBINDINFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for RemBINDINFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("RemBINDINFO")
            .field("cbSize", &self.cbSize)
            .field("szExtraInfo", &self.szExtraInfo)
            .field("grfBindInfoF", &self.grfBindInfoF)
            .field("dwBindVerb", &self.dwBindVerb)
            .field("szCustomVerb", &self.szCustomVerb)
            .field("cbstgmedData", &self.cbstgmedData)
            .field("dwOptions", &self.dwOptions)
            .field("dwOptionsFlags", &self.dwOptionsFlags)
            .field("dwCodePage", &self.dwCodePage)
            .field("securityAttributes", &self.securityAttributes)
            .field("iid", &self.iid)
            .field("pUnk", &self.pUnk)
            .field("dwReserved", &self.dwReserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for RemBINDINFO {
    fn eq(&self, other: &Self) -> bool {
        self.cbSize == other.cbSize
            && self.szExtraInfo == other.szExtraInfo
            && self.grfBindInfoF == other.grfBindInfoF
            && self.dwBindVerb == other.dwBindVerb
            && self.szCustomVerb == other.szCustomVerb
            && self.cbstgmedData == other.cbstgmedData
            && self.dwOptions == other.dwOptions
            && self.dwOptionsFlags == other.dwOptionsFlags
            && self.dwCodePage == other.dwCodePage
            && self.securityAttributes == other.securityAttributes
            && self.iid == other.iid
            && self.pUnk == other.pUnk
            && self.dwReserved == other.dwReserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for RemBINDINFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for RemBINDINFO {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct RemFORMATETC {
    pub cfFormat: u32,
    pub ptd: u32,
    pub dwAspect: u32,
    pub lindex: i32,
    pub tymed: u32,
}
impl RemFORMATETC {}
impl ::std::default::Default for RemFORMATETC {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for RemFORMATETC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("RemFORMATETC")
            .field("cfFormat", &self.cfFormat)
            .field("ptd", &self.ptd)
            .field("dwAspect", &self.dwAspect)
            .field("lindex", &self.lindex)
            .field("tymed", &self.tymed)
            .finish()
    }
}
impl ::std::cmp::PartialEq for RemFORMATETC {
    fn eq(&self, other: &Self) -> bool {
        self.cfFormat == other.cfFormat
            && self.ptd == other.ptd
            && self.dwAspect == other.dwAspect
            && self.lindex == other.lindex
            && self.tymed == other.tymed
    }
}
impl ::std::cmp::Eq for RemFORMATETC {}
unsafe impl ::windows::runtime::Abi for RemFORMATETC {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct RemSTGMEDIUM {
    pub tymed: u32,
    pub dwHandleType: u32,
    pub pData: u32,
    pub pUnkForRelease: u32,
    pub cbData: u32,
    pub data: [u8; 1],
}
impl RemSTGMEDIUM {}
impl ::std::default::Default for RemSTGMEDIUM {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for RemSTGMEDIUM {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("RemSTGMEDIUM")
            .field("tymed", &self.tymed)
            .field("dwHandleType", &self.dwHandleType)
            .field("pData", &self.pData)
            .field("pUnkForRelease", &self.pUnkForRelease)
            .field("cbData", &self.cbData)
            .field("data", &self.data)
            .finish()
    }
}
impl ::std::cmp::PartialEq for RemSTGMEDIUM {
    fn eq(&self, other: &Self) -> bool {
        self.tymed == other.tymed
            && self.dwHandleType == other.dwHandleType
            && self.pData == other.pData
            && self.pUnkForRelease == other.pUnkForRelease
            && self.cbData == other.cbData
            && self.data == other.data
    }
}
impl ::std::cmp::Eq for RemSTGMEDIUM {}
unsafe impl ::windows::runtime::Abi for RemSTGMEDIUM {
    type Abi = Self;
    type DefaultType = Self;
}
pub const RemoteComponentUtil: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1857169542,
    35353,
    4560,
    [129, 182, 0, 160, 201, 35, 28, 41],
);
pub unsafe fn RevokeBindStatusCallback<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IBindCtx>,
    Param1: ::windows::runtime::IntoParam<'a, IBindStatusCallback>,
>(
    pbc: Param0,
    pbscb: Param1,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn RevokeBindStatusCallback(
                pbc: ::windows::runtime::RawPtr,
                pbscb: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        RevokeBindStatusCallback(pbc.into_param().abi(), pbscb.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn RevokeDragDrop<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HWND>,
>(
    hwnd: Param0,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn RevokeDragDrop(hwnd: super::super::Foundation::HWND) -> ::windows::runtime::HRESULT;
        }
        RevokeDragDrop(hwnd.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn RevokeFormatEnumerator<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, IBindCtx>,
    Param1: ::windows::runtime::IntoParam<'a, IEnumFORMATETC>,
>(
    pbc: Param0,
    pefetc: Param1,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn RevokeFormatEnumerator(
                pbc: ::windows::runtime::RawPtr,
                pefetc: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        RevokeFormatEnumerator(pbc.into_param().abi(), pefetc.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const RoleAssociationUtil: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1857169543,
    35353,
    4560,
    [129, 182, 0, 160, 201, 35, 28, 41],
);
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct SChannelHookCallInfo {
    pub iid: ::windows::runtime::GUID,
    pub cbSize: u32,
    pub uCausality: ::windows::runtime::GUID,
    pub dwServerPid: u32,
    pub iMethod: u32,
    pub pObject: *mut ::std::ffi::c_void,
}
impl SChannelHookCallInfo {}
impl ::std::default::Default for SChannelHookCallInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for SChannelHookCallInfo {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SChannelHookCallInfo")
            .field("iid", &self.iid)
            .field("cbSize", &self.cbSize)
            .field("uCausality", &self.uCausality)
            .field("dwServerPid", &self.dwServerPid)
            .field("iMethod", &self.iMethod)
            .field("pObject", &self.pObject)
            .finish()
    }
}
impl ::std::cmp::PartialEq for SChannelHookCallInfo {
    fn eq(&self, other: &Self) -> bool {
        self.iid == other.iid
            && self.cbSize == other.cbSize
            && self.uCausality == other.uCausality
            && self.dwServerPid == other.dwServerPid
            && self.iMethod == other.iMethod
            && self.pObject == other.pObject
    }
}
impl ::std::cmp::Eq for SChannelHookCallInfo {}
unsafe impl ::windows::runtime::Abi for SChannelHookCallInfo {
    type Abi = Self;
    type DefaultType = Self;
}
pub const SECURITY_IE_STATE_GREEN: u32 = 0u32;
pub const SECURITY_IE_STATE_RED: u32 = 1u32;
pub const SELFREG_E_CLASS: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2147220991i32 as _);
pub const SELFREG_E_FIRST: i32 = -2147220992i32;
pub const SELFREG_E_LAST: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2147220977i32 as _);
pub const SELFREG_E_TYPELIB: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(-2147220992i32 as _);
pub const SELFREG_S_FIRST: ::windows::runtime::HRESULT =
    ::windows::runtime::HRESULT(262656i32 as _);
pub const SELFREG_S_LAST: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(262671i32 as _);
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct SERVERCALL(pub i32);
pub const SERVERCALL_ISHANDLED: SERVERCALL = SERVERCALL(0i32);
pub const SERVERCALL_REJECTED: SERVERCALL = SERVERCALL(1i32);
pub const SERVERCALL_RETRYLATER: SERVERCALL = SERVERCALL(2i32);
impl ::std::convert::From<i32> for SERVERCALL {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SERVERCALL {
    type Abi = Self;
    type DefaultType = Self;
}
pub const SET_FEATURE_IN_REGISTRY: u32 = 4u32;
pub const SET_FEATURE_ON_PROCESS: u32 = 2u32;
pub const SET_FEATURE_ON_THREAD: u32 = 1u32;
pub const SET_FEATURE_ON_THREAD_INTERNET: u32 = 64u32;
pub const SET_FEATURE_ON_THREAD_INTRANET: u32 = 16u32;
pub const SET_FEATURE_ON_THREAD_LOCALMACHINE: u32 = 8u32;
pub const SET_FEATURE_ON_THREAD_RESTRICTED: u32 = 128u32;
pub const SET_FEATURE_ON_THREAD_TRUSTED: u32 = 32u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct SHORT_SIZEDARR {
    pub clSize: u32,
    pub pData: *mut u16,
}
impl SHORT_SIZEDARR {}
impl ::std::default::Default for SHORT_SIZEDARR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for SHORT_SIZEDARR {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SHORT_SIZEDARR")
            .field("clSize", &self.clSize)
            .field("pData", &self.pData)
            .finish()
    }
}
impl ::std::cmp::PartialEq for SHORT_SIZEDARR {
    fn eq(&self, other: &Self) -> bool {
        self.clSize == other.clSize && self.pData == other.pData
    }
}
impl ::std::cmp::Eq for SHORT_SIZEDARR {}
unsafe impl ::windows::runtime::Abi for SHORT_SIZEDARR {
    type Abi = Self;
    type DefaultType = Self;
}
pub unsafe fn SNB_UserFree(param0: *const u32, param1: *const *const *const u16) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn SNB_UserFree(param0: *const u32, param1: *const *const *const u16);
        }
        ::std::mem::transmute(SNB_UserFree(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn SNB_UserFree64(param0: *const u32, param1: *const *const *const u16) {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn SNB_UserFree64(param0: *const u32, param1: *const *const *const u16);
        }
        ::std::mem::transmute(SNB_UserFree64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn SNB_UserMarshal(
    param0: *const u32,
    param1: *mut u8,
    param2: *const *const *const u16,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn SNB_UserMarshal(
                param0: *const u32,
                param1: *mut u8,
                param2: *const *const *const u16,
            ) -> *mut u8;
        }
        ::std::mem::transmute(SNB_UserMarshal(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn SNB_UserMarshal64(
    param0: *const u32,
    param1: *mut u8,
    param2: *const *const *const u16,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn SNB_UserMarshal64(
                param0: *const u32,
                param1: *mut u8,
                param2: *const *const *const u16,
            ) -> *mut u8;
        }
        ::std::mem::transmute(SNB_UserMarshal64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn SNB_UserSize(
    param0: *const u32,
    param1: u32,
    param2: *const *const *const u16,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn SNB_UserSize(
                param0: *const u32,
                param1: u32,
                param2: *const *const *const u16,
            ) -> u32;
        }
        ::std::mem::transmute(SNB_UserSize(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn SNB_UserSize64(
    param0: *const u32,
    param1: u32,
    param2: *const *const *const u16,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn SNB_UserSize64(
                param0: *const u32,
                param1: u32,
                param2: *const *const *const u16,
            ) -> u32;
        }
        ::std::mem::transmute(SNB_UserSize64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn SNB_UserUnmarshal(
    param0: *const u32,
    param1: *const u8,
    param2: *mut *mut *mut u16,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn SNB_UserUnmarshal(
                param0: *const u32,
                param1: *const u8,
                param2: *mut *mut *mut u16,
            ) -> *mut u8;
        }
        ::std::mem::transmute(SNB_UserUnmarshal(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn SNB_UserUnmarshal64(
    param0: *const u32,
    param1: *const u8,
    param2: *mut *mut *mut u16,
) -> *mut u8 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn SNB_UserUnmarshal64(
                param0: *const u32,
                param1: *const u8,
                param2: *mut *mut *mut u16,
            ) -> *mut u8;
        }
        ::std::mem::transmute(SNB_UserUnmarshal64(
            ::std::mem::transmute(param0),
            ::std::mem::transmute(param1),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const SOFTDIST_ADSTATE_AVAILABLE: u32 = 1u32;
pub const SOFTDIST_ADSTATE_DOWNLOADED: u32 = 2u32;
pub const SOFTDIST_ADSTATE_INSTALLED: u32 = 3u32;
pub const SOFTDIST_ADSTATE_NONE: u32 = 0u32;
pub const SOFTDIST_FLAG_DELETE_SUBSCRIPTION: u32 = 8u32;
pub const SOFTDIST_FLAG_USAGE_AUTOINSTALL: u32 = 4u32;
pub const SOFTDIST_FLAG_USAGE_EMAIL: u32 = 1u32;
pub const SOFTDIST_FLAG_USAGE_PRECACHE: u32 = 2u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct SOLE_AUTHENTICATION_INFO {
    pub dwAuthnSvc: u32,
    pub dwAuthzSvc: u32,
    pub pAuthInfo: *mut ::std::ffi::c_void,
}
impl SOLE_AUTHENTICATION_INFO {}
impl ::std::default::Default for SOLE_AUTHENTICATION_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for SOLE_AUTHENTICATION_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SOLE_AUTHENTICATION_INFO")
            .field("dwAuthnSvc", &self.dwAuthnSvc)
            .field("dwAuthzSvc", &self.dwAuthzSvc)
            .field("pAuthInfo", &self.pAuthInfo)
            .finish()
    }
}
impl ::std::cmp::PartialEq for SOLE_AUTHENTICATION_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.dwAuthnSvc == other.dwAuthnSvc
            && self.dwAuthzSvc == other.dwAuthzSvc
            && self.pAuthInfo == other.pAuthInfo
    }
}
impl ::std::cmp::Eq for SOLE_AUTHENTICATION_INFO {}
unsafe impl ::windows::runtime::Abi for SOLE_AUTHENTICATION_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct SOLE_AUTHENTICATION_LIST {
    pub cAuthInfo: u32,
    pub aAuthInfo: *mut SOLE_AUTHENTICATION_INFO,
}
impl SOLE_AUTHENTICATION_LIST {}
impl ::std::default::Default for SOLE_AUTHENTICATION_LIST {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for SOLE_AUTHENTICATION_LIST {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SOLE_AUTHENTICATION_LIST")
            .field("cAuthInfo", &self.cAuthInfo)
            .field("aAuthInfo", &self.aAuthInfo)
            .finish()
    }
}
impl ::std::cmp::PartialEq for SOLE_AUTHENTICATION_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.cAuthInfo == other.cAuthInfo && self.aAuthInfo == other.aAuthInfo
    }
}
impl ::std::cmp::Eq for SOLE_AUTHENTICATION_LIST {}
unsafe impl ::windows::runtime::Abi for SOLE_AUTHENTICATION_LIST {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct SOLE_AUTHENTICATION_SERVICE {
    pub dwAuthnSvc: u32,
    pub dwAuthzSvc: u32,
    pub pPrincipalName: super::super::Foundation::PWSTR,
    pub hr: ::windows::runtime::HRESULT,
}
#[cfg(feature = "Win32_Foundation")]
impl SOLE_AUTHENTICATION_SERVICE {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for SOLE_AUTHENTICATION_SERVICE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for SOLE_AUTHENTICATION_SERVICE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SOLE_AUTHENTICATION_SERVICE")
            .field("dwAuthnSvc", &self.dwAuthnSvc)
            .field("dwAuthzSvc", &self.dwAuthzSvc)
            .field("pPrincipalName", &self.pPrincipalName)
            .field("hr", &self.hr)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for SOLE_AUTHENTICATION_SERVICE {
    fn eq(&self, other: &Self) -> bool {
        self.dwAuthnSvc == other.dwAuthnSvc
            && self.dwAuthzSvc == other.dwAuthzSvc
            && self.pPrincipalName == other.pPrincipalName
            && self.hr == other.hr
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for SOLE_AUTHENTICATION_SERVICE {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for SOLE_AUTHENTICATION_SERVICE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
pub struct STATDATA {
    pub formatetc: FORMATETC,
    pub advf: u32,
    pub pAdvSink: ::std::option::Option<IAdviseSink>,
    pub dwConnection: u32,
}
impl STATDATA {}
impl ::std::default::Default for STATDATA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for STATDATA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("STATDATA")
            .field("formatetc", &self.formatetc)
            .field("advf", &self.advf)
            .field("pAdvSink", &self.pAdvSink)
            .field("dwConnection", &self.dwConnection)
            .finish()
    }
}
impl ::std::cmp::PartialEq for STATDATA {
    fn eq(&self, other: &Self) -> bool {
        self.formatetc == other.formatetc
            && self.advf == other.advf
            && self.pAdvSink == other.pAdvSink
            && self.dwConnection == other.dwConnection
    }
}
impl ::std::cmp::Eq for STATDATA {}
unsafe impl ::windows::runtime::Abi for STATDATA {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct STDMSHLFLAGS(pub i32);
pub const SMEXF_SERVER: STDMSHLFLAGS = STDMSHLFLAGS(1i32);
pub const SMEXF_HANDLER: STDMSHLFLAGS = STDMSHLFLAGS(2i32);
impl ::std::convert::From<i32> for STDMSHLFLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for STDMSHLFLAGS {
    type Abi = Self;
    type DefaultType = Self;
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Storage_StructuredStorage"
))]
impl ::std::clone::Clone for STGMEDIUM {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C)]
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Storage_StructuredStorage"
))]
pub struct STGMEDIUM {
    pub tymed: u32,
    pub Anonymous: STGMEDIUM_0,
    pub pUnkForRelease: ::std::option::Option<::windows::runtime::IUnknown>,
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Storage_StructuredStorage"
))]
impl STGMEDIUM {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Storage_StructuredStorage"
))]
impl ::std::default::Default for STGMEDIUM {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Storage_StructuredStorage"
))]
impl ::std::cmp::PartialEq for STGMEDIUM {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Storage_StructuredStorage"
))]
impl ::std::cmp::Eq for STGMEDIUM {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Storage_StructuredStorage"
))]
unsafe impl ::windows::runtime::Abi for STGMEDIUM {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Storage_StructuredStorage"
))]
impl ::std::clone::Clone for STGMEDIUM_0 {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C)]
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Storage_StructuredStorage"
))]
pub union STGMEDIUM_0 {
    pub hBitmap: super::super::Graphics::Gdi::HBITMAP,
    pub hMetaFilePict: *mut ::std::ffi::c_void,
    pub hEnhMetaFile: super::super::Graphics::Gdi::HENHMETAFILE,
    pub hGlobal: isize,
    pub lpszFileName: super::super::Foundation::PWSTR,
    pub pstm: ::windows::runtime::RawPtr,
    pub pstg: ::windows::runtime::RawPtr,
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Storage_StructuredStorage"
))]
impl STGMEDIUM_0 {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Storage_StructuredStorage"
))]
impl ::std::default::Default for STGMEDIUM_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Storage_StructuredStorage"
))]
impl ::std::cmp::PartialEq for STGMEDIUM_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Storage_StructuredStorage"
))]
impl ::std::cmp::Eq for STGMEDIUM_0 {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_Storage_StructuredStorage"
))]
unsafe impl ::windows::runtime::Abi for STGMEDIUM_0 {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct SZM_FLAGS(pub i32);
pub const SZM_CREATE: SZM_FLAGS = SZM_FLAGS(0i32);
pub const SZM_DELETE: SZM_FLAGS = SZM_FLAGS(1i32);
impl ::std::convert::From<i32> for SZM_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SZM_FLAGS {
    type Abi = Self;
    type DefaultType = Self;
}
pub const S_ASYNCHRONOUS: i32 = 262632i32;
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn SetAccessForIEAppContainer<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>,
>(
    hobject: Param0,
    ieobjecttype: IEObjectType,
    dwaccessmask: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn SetAccessForIEAppContainer(
                hobject: super::super::Foundation::HANDLE,
                ieobjecttype: IEObjectType,
                dwaccessmask: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        SetAccessForIEAppContainer(
            hobject.into_param().abi(),
            ::std::mem::transmute(ieobjecttype),
            ::std::mem::transmute(dwaccessmask),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn SetSoftwareUpdateAdvertisementState<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    szdistunit: Param0,
    dwadstate: u32,
    dwadvertisedversionms: u32,
    dwadvertisedversionls: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn SetSoftwareUpdateAdvertisementState(
                szdistunit: super::super::Foundation::PWSTR,
                dwadstate: u32,
                dwadvertisedversionms: u32,
                dwadvertisedversionls: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        SetSoftwareUpdateAdvertisementState(
            szdistunit.into_param().abi(),
            ::std::mem::transmute(dwadstate),
            ::std::mem::transmute(dwadvertisedversionms),
            ::std::mem::transmute(dwadvertisedversionls),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct ShutdownType(pub i32);
pub const IdleShutdown: ShutdownType = ShutdownType(0i32);
pub const ForcedShutdown: ShutdownType = ShutdownType(1i32);
impl ::std::convert::From<i32> for ShutdownType {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for ShutdownType {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
pub struct StartParam {
    pub iid: ::windows::runtime::GUID,
    pub pIBindCtx: ::std::option::Option<IBindCtx>,
    pub pItf: ::std::option::Option<::windows::runtime::IUnknown>,
}
impl StartParam {}
impl ::std::default::Default for StartParam {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for StartParam {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("StartParam")
            .field("iid", &self.iid)
            .field("pIBindCtx", &self.pIBindCtx)
            .field("pItf", &self.pItf)
            .finish()
    }
}
impl ::std::cmp::PartialEq for StartParam {
    fn eq(&self, other: &Self) -> bool {
        self.iid == other.iid && self.pIBindCtx == other.pIBindCtx && self.pItf == other.pItf
    }
}
impl ::std::cmp::Eq for StartParam {}
unsafe impl ::windows::runtime::Abi for StartParam {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn StringFromCLSID(
    rclsid: *const ::windows::runtime::GUID,
) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn StringFromCLSID(
                rclsid: *const ::windows::runtime::GUID,
                lplpsz: *mut super::super::Foundation::PWSTR,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        StringFromCLSID(::std::mem::transmute(rclsid), &mut result__)
            .from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn StringFromGUID2(
    rguid: *const ::windows::runtime::GUID,
    lpsz: super::super::Foundation::PWSTR,
    cchmax: i32,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn StringFromGUID2(
                rguid: *const ::windows::runtime::GUID,
                lpsz: super::super::Foundation::PWSTR,
                cchmax: i32,
            ) -> i32;
        }
        ::std::mem::transmute(StringFromGUID2(
            ::std::mem::transmute(rguid),
            ::std::mem::transmute(lpsz),
            ::std::mem::transmute(cchmax),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn StringFromIID(
    rclsid: *const ::windows::runtime::GUID,
) -> ::windows::runtime::Result<super::super::Foundation::PWSTR> {
    #[cfg(windows)]
    {
        #[link(name = "ole32")]
        extern "system" {
            fn StringFromIID(
                rclsid: *const ::windows::runtime::GUID,
                lplpsz: *mut super::super::Foundation::PWSTR,
            ) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <super::super::Foundation::PWSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        StringFromIID(::std::mem::transmute(rclsid), &mut result__)
            .from_abi::<super::super::Foundation::PWSTR>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct THDTYPE(pub i32);
pub const THDTYPE_BLOCKMESSAGES: THDTYPE = THDTYPE(0i32);
pub const THDTYPE_PROCESSMESSAGES: THDTYPE = THDTYPE(1i32);
impl ::std::convert::From<i32> for THDTYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for THDTYPE {
    type Abi = Self;
    type DefaultType = Self;
}
pub const TIFLAGS_EXTENDDISPATCHONLY: u32 = 1u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct TYMED(pub i32);
pub const TYMED_HGLOBAL: TYMED = TYMED(1i32);
pub const TYMED_FILE: TYMED = TYMED(2i32);
pub const TYMED_ISTREAM: TYMED = TYMED(4i32);
pub const TYMED_ISTORAGE: TYMED = TYMED(8i32);
pub const TYMED_GDI: TYMED = TYMED(16i32);
pub const TYMED_MFPICT: TYMED = TYMED(32i32);
pub const TYMED_ENHMF: TYMED = TYMED(64i32);
pub const TYMED_NULL: TYMED = TYMED(0i32);
impl ::std::convert::From<i32> for TYMED {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for TYMED {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct TYSPEC(pub i32);
pub const TYSPEC_CLSID: TYSPEC = TYSPEC(0i32);
pub const TYSPEC_FILEEXT: TYSPEC = TYSPEC(1i32);
pub const TYSPEC_MIMETYPE: TYSPEC = TYSPEC(2i32);
pub const TYSPEC_FILENAME: TYSPEC = TYSPEC(3i32);
pub const TYSPEC_PROGID: TYSPEC = TYSPEC(4i32);
pub const TYSPEC_PACKAGENAME: TYSPEC = TYSPEC(5i32);
pub const TYSPEC_OBJECTID: TYSPEC = TYSPEC(6i32);
impl ::std::convert::From<i32> for TYSPEC {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for TYSPEC {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct UASFLAGS(pub i32);
pub const UAS_NORMAL: UASFLAGS = UASFLAGS(0i32);
pub const UAS_BLOCKED: UASFLAGS = UASFLAGS(1i32);
pub const UAS_NOPARENTENABLE: UASFLAGS = UASFLAGS(2i32);
pub const UAS_MASK: UASFLAGS = UASFLAGS(3i32);
impl ::std::convert::From<i32> for UASFLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for UASFLAGS {
    type Abi = Self;
    type DefaultType = Self;
}
pub const UAS_EXACTLEGACY: u32 = 4096u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct UPDFCACHE_FLAGS(pub u32);
pub const UPDFCACHE_ALL: UPDFCACHE_FLAGS = UPDFCACHE_FLAGS(2147483647u32);
pub const UPDFCACHE_ALLBUTNODATACACHE: UPDFCACHE_FLAGS = UPDFCACHE_FLAGS(2147483646u32);
pub const UPDFCACHE_NORMALCACHE: UPDFCACHE_FLAGS = UPDFCACHE_FLAGS(8u32);
pub const UPDFCACHE_IFBLANK: UPDFCACHE_FLAGS = UPDFCACHE_FLAGS(16u32);
pub const UPDFCACHE_ONLYIFBLANK: UPDFCACHE_FLAGS = UPDFCACHE_FLAGS(2147483648u32);
pub const UPDFCACHE_NODATACACHE: UPDFCACHE_FLAGS = UPDFCACHE_FLAGS(1u32);
pub const UPDFCACHE_ONSAVECACHE: UPDFCACHE_FLAGS = UPDFCACHE_FLAGS(2u32);
pub const UPDFCACHE_ONSTOPCACHE: UPDFCACHE_FLAGS = UPDFCACHE_FLAGS(4u32);
pub const UPDFCACHE_IFBLANKORONSAVECACHE: UPDFCACHE_FLAGS = UPDFCACHE_FLAGS(18u32);
impl ::std::convert::From<u32> for UPDFCACHE_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for UPDFCACHE_FLAGS {
    type Abi = Self;
    type DefaultType = Self;
}
impl ::std::ops::BitOr for UPDFCACHE_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for UPDFCACHE_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for UPDFCACHE_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for UPDFCACHE_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for UPDFCACHE_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct URI_CREATE_FLAGS(pub u32);
pub const Uri_CREATE_ALLOW_RELATIVE: URI_CREATE_FLAGS = URI_CREATE_FLAGS(1u32);
pub const Uri_CREATE_ALLOW_IMPLICIT_WILDCARD_SCHEME: URI_CREATE_FLAGS = URI_CREATE_FLAGS(2u32);
pub const Uri_CREATE_ALLOW_IMPLICIT_FILE_SCHEME: URI_CREATE_FLAGS = URI_CREATE_FLAGS(4u32);
pub const Uri_CREATE_NOFRAG: URI_CREATE_FLAGS = URI_CREATE_FLAGS(8u32);
pub const Uri_CREATE_NO_CANONICALIZE: URI_CREATE_FLAGS = URI_CREATE_FLAGS(16u32);
pub const Uri_CREATE_CANONICALIZE: URI_CREATE_FLAGS = URI_CREATE_FLAGS(256u32);
pub const Uri_CREATE_FILE_USE_DOS_PATH: URI_CREATE_FLAGS = URI_CREATE_FLAGS(32u32);
pub const Uri_CREATE_DECODE_EXTRA_INFO: URI_CREATE_FLAGS = URI_CREATE_FLAGS(64u32);
pub const Uri_CREATE_NO_DECODE_EXTRA_INFO: URI_CREATE_FLAGS = URI_CREATE_FLAGS(128u32);
pub const Uri_CREATE_CRACK_UNKNOWN_SCHEMES: URI_CREATE_FLAGS = URI_CREATE_FLAGS(512u32);
pub const Uri_CREATE_NO_CRACK_UNKNOWN_SCHEMES: URI_CREATE_FLAGS = URI_CREATE_FLAGS(1024u32);
pub const Uri_CREATE_PRE_PROCESS_HTML_URI: URI_CREATE_FLAGS = URI_CREATE_FLAGS(2048u32);
pub const Uri_CREATE_NO_PRE_PROCESS_HTML_URI: URI_CREATE_FLAGS = URI_CREATE_FLAGS(4096u32);
pub const Uri_CREATE_IE_SETTINGS: URI_CREATE_FLAGS = URI_CREATE_FLAGS(8192u32);
pub const Uri_CREATE_NO_IE_SETTINGS: URI_CREATE_FLAGS = URI_CREATE_FLAGS(16384u32);
pub const Uri_CREATE_NO_ENCODE_FORBIDDEN_CHARACTERS: URI_CREATE_FLAGS = URI_CREATE_FLAGS(32768u32);
pub const Uri_CREATE_NORMALIZE_INTL_CHARACTERS: URI_CREATE_FLAGS = URI_CREATE_FLAGS(65536u32);
pub const Uri_CREATE_CANONICALIZE_ABSOLUTE: URI_CREATE_FLAGS = URI_CREATE_FLAGS(131072u32);
impl ::std::convert::From<u32> for URI_CREATE_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for URI_CREATE_FLAGS {
    type Abi = Self;
    type DefaultType = Self;
}
impl ::std::ops::BitOr for URI_CREATE_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for URI_CREATE_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for URI_CREATE_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for URI_CREATE_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for URI_CREATE_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
pub const URLACTION_ACTIVEX_ALLOW_TDC: u32 = 4620u32;
pub const URLACTION_ACTIVEX_CONFIRM_NOOBJECTSAFETY: u32 = 4612u32;
pub const URLACTION_ACTIVEX_CURR_MAX: u32 = 4620u32;
pub const URLACTION_ACTIVEX_DYNSRC_VIDEO_AND_ANIMATION: u32 = 4618u32;
pub const URLACTION_ACTIVEX_MAX: u32 = 5119u32;
pub const URLACTION_ACTIVEX_MIN: u32 = 4608u32;
pub const URLACTION_ACTIVEX_NO_WEBOC_SCRIPT: u32 = 4614u32;
pub const URLACTION_ACTIVEX_OVERRIDE_DATA_SAFETY: u32 = 4610u32;
pub const URLACTION_ACTIVEX_OVERRIDE_DOMAINLIST: u32 = 4619u32;
pub const URLACTION_ACTIVEX_OVERRIDE_OBJECT_SAFETY: u32 = 4609u32;
pub const URLACTION_ACTIVEX_OVERRIDE_OPTIN: u32 = 4616u32;
pub const URLACTION_ACTIVEX_OVERRIDE_REPURPOSEDETECTION: u32 = 4615u32;
pub const URLACTION_ACTIVEX_OVERRIDE_SCRIPT_SAFETY: u32 = 4611u32;
pub const URLACTION_ACTIVEX_RUN: u32 = 4608u32;
pub const URLACTION_ACTIVEX_SCRIPTLET_RUN: u32 = 4617u32;
pub const URLACTION_ACTIVEX_TREATASUNTRUSTED: u32 = 4613u32;
pub const URLACTION_ALLOW_ACTIVEX_FILTERING: u32 = 9986u32;
pub const URLACTION_ALLOW_ANTIMALWARE_SCANNING_OF_ACTIVEX: u32 = 9996u32;
pub const URLACTION_ALLOW_APEVALUATION: u32 = 8961u32;
pub const URLACTION_ALLOW_AUDIO_VIDEO: u32 = 9985u32;
pub const URLACTION_ALLOW_AUDIO_VIDEO_PLUGINS: u32 = 9988u32;
pub const URLACTION_ALLOW_CROSSDOMAIN_APPCACHE_MANIFEST: u32 = 9994u32;
pub const URLACTION_ALLOW_CROSSDOMAIN_DROP_ACROSS_WINDOWS: u32 = 9993u32;
pub const URLACTION_ALLOW_CROSSDOMAIN_DROP_WITHIN_WINDOW: u32 = 9992u32;
pub const URLACTION_ALLOW_CSS_EXPRESSIONS: u32 = 9997u32;
pub const URLACTION_ALLOW_JSCRIPT_IE: u32 = 5133u32;
pub const URLACTION_ALLOW_RENDER_LEGACY_DXTFILTERS: u32 = 9995u32;
pub const URLACTION_ALLOW_RESTRICTEDPROTOCOLS: u32 = 8960u32;
pub const URLACTION_ALLOW_STRUCTURED_STORAGE_SNIFFING: u32 = 9987u32;
pub const URLACTION_ALLOW_VBSCRIPT_IE: u32 = 5132u32;
pub const URLACTION_ALLOW_XDOMAIN_SUBFRAME_RESIZE: u32 = 5128u32;
pub const URLACTION_ALLOW_XHR_EVALUATION: u32 = 8962u32;
pub const URLACTION_ALLOW_ZONE_ELEVATION_OPT_OUT_ADDITION: u32 = 9990u32;
pub const URLACTION_ALLOW_ZONE_ELEVATION_VIA_OPT_OUT: u32 = 9989u32;
pub const URLACTION_AUTHENTICATE_CLIENT: u32 = 6657u32;
pub const URLACTION_AUTOMATIC_ACTIVEX_UI: u32 = 8705u32;
pub const URLACTION_AUTOMATIC_DOWNLOAD_UI: u32 = 8704u32;
pub const URLACTION_AUTOMATIC_DOWNLOAD_UI_MIN: u32 = 8704u32;
pub const URLACTION_BEHAVIOR_MIN: u32 = 8192u32;
pub const URLACTION_BEHAVIOR_RUN: u32 = 8192u32;
pub const URLACTION_CHANNEL_SOFTDIST_MAX: u32 = 7935u32;
pub const URLACTION_CHANNEL_SOFTDIST_MIN: u32 = 7680u32;
pub const URLACTION_CHANNEL_SOFTDIST_PERMISSIONS: u32 = 7685u32;
pub const URLACTION_CLIENT_CERT_PROMPT: u32 = 6660u32;
pub const URLACTION_COOKIES: u32 = 6658u32;
pub const URLACTION_COOKIES_ENABLED: u32 = 6672u32;
pub const URLACTION_COOKIES_SESSION: u32 = 6659u32;
pub const URLACTION_COOKIES_SESSION_THIRD_PARTY: u32 = 6662u32;
pub const URLACTION_COOKIES_THIRD_PARTY: u32 = 6661u32;
pub const URLACTION_CREDENTIALS_USE: u32 = 6656u32;
pub const URLACTION_CROSS_DOMAIN_DATA: u32 = 5126u32;
pub const URLACTION_DOTNET_USERCONTROLS: u32 = 8197u32;
pub const URLACTION_DOWNLOAD_CURR_MAX: u32 = 4100u32;
pub const URLACTION_DOWNLOAD_MAX: u32 = 4607u32;
pub const URLACTION_DOWNLOAD_MIN: u32 = 4096u32;
pub const URLACTION_DOWNLOAD_SIGNED_ACTIVEX: u32 = 4097u32;
pub const URLACTION_DOWNLOAD_UNSIGNED_ACTIVEX: u32 = 4100u32;
pub const URLACTION_FEATURE_BLOCK_INPUT_PROMPTS: u32 = 8453u32;
pub const URLACTION_FEATURE_CROSSDOMAIN_FOCUS_CHANGE: u32 = 8455u32;
pub const URLACTION_FEATURE_DATA_BINDING: u32 = 8454u32;
pub const URLACTION_FEATURE_FORCE_ADDR_AND_STATUS: u32 = 8452u32;
pub const URLACTION_FEATURE_MIME_SNIFFING: u32 = 8448u32;
pub const URLACTION_FEATURE_MIN: u32 = 8448u32;
pub const URLACTION_FEATURE_SCRIPT_STATUS_BAR: u32 = 8451u32;
pub const URLACTION_FEATURE_WINDOW_RESTRICTIONS: u32 = 8450u32;
pub const URLACTION_FEATURE_ZONE_ELEVATION: u32 = 8449u32;
pub const URLACTION_HTML_ALLOW_CROSS_DOMAIN_CANVAS: u32 = 5645u32;
pub const URLACTION_HTML_ALLOW_CROSS_DOMAIN_TEXTTRACK: u32 = 5648u32;
pub const URLACTION_HTML_ALLOW_CROSS_DOMAIN_WEBWORKER: u32 = 5647u32;
pub const URLACTION_HTML_ALLOW_INDEXEDDB: u32 = 5649u32;
pub const URLACTION_HTML_ALLOW_INJECTED_DYNAMIC_HTML: u32 = 5643u32;
pub const URLACTION_HTML_ALLOW_WINDOW_CLOSE: u32 = 5646u32;
pub const URLACTION_HTML_FONT_DOWNLOAD: u32 = 5636u32;
pub const URLACTION_HTML_INCLUDE_FILE_PATH: u32 = 5642u32;
pub const URLACTION_HTML_JAVA_RUN: u32 = 5637u32;
pub const URLACTION_HTML_MAX: u32 = 6143u32;
pub const URLACTION_HTML_META_REFRESH: u32 = 5640u32;
pub const URLACTION_HTML_MIN: u32 = 5632u32;
pub const URLACTION_HTML_MIXED_CONTENT: u32 = 5641u32;
pub const URLACTION_HTML_REQUIRE_UTF8_DOCUMENT_CODEPAGE: u32 = 5644u32;
pub const URLACTION_HTML_SUBFRAME_NAVIGATE: u32 = 5639u32;
pub const URLACTION_HTML_SUBMIT_FORMS: u32 = 5633u32;
pub const URLACTION_HTML_SUBMIT_FORMS_FROM: u32 = 5634u32;
pub const URLACTION_HTML_SUBMIT_FORMS_TO: u32 = 5635u32;
pub const URLACTION_HTML_USERDATA_SAVE: u32 = 5638u32;
pub const URLACTION_INFODELIVERY_CURR_MAX: u32 = 7430u32;
pub const URLACTION_INFODELIVERY_MAX: u32 = 7679u32;
pub const URLACTION_INFODELIVERY_MIN: u32 = 7424u32;
pub const URLACTION_INFODELIVERY_NO_ADDING_CHANNELS: u32 = 7424u32;
pub const URLACTION_INFODELIVERY_NO_ADDING_SUBSCRIPTIONS: u32 = 7427u32;
pub const URLACTION_INFODELIVERY_NO_CHANNEL_LOGGING: u32 = 7430u32;
pub const URLACTION_INFODELIVERY_NO_EDITING_CHANNELS: u32 = 7425u32;
pub const URLACTION_INFODELIVERY_NO_EDITING_SUBSCRIPTIONS: u32 = 7428u32;
pub const URLACTION_INFODELIVERY_NO_REMOVING_CHANNELS: u32 = 7426u32;
pub const URLACTION_INFODELIVERY_NO_REMOVING_SUBSCRIPTIONS: u32 = 7429u32;
pub const URLACTION_INPRIVATE_BLOCKING: u32 = 9984u32;
pub const URLACTION_JAVA_CURR_MAX: u32 = 7168u32;
pub const URLACTION_JAVA_MAX: u32 = 7423u32;
pub const URLACTION_JAVA_MIN: u32 = 7168u32;
pub const URLACTION_JAVA_PERMISSIONS: u32 = 7168u32;
pub const URLACTION_LOOSE_XAML: u32 = 9218u32;
pub const URLACTION_LOWRIGHTS: u32 = 9472u32;
pub const URLACTION_MIN: u32 = 4096u32;
pub const URLACTION_NETWORK_CURR_MAX: u32 = 6672u32;
pub const URLACTION_NETWORK_MAX: u32 = 7167u32;
pub const URLACTION_NETWORK_MIN: u32 = 6656u32;
pub const URLACTION_PLUGGABLE_PROTOCOL_XHR: u32 = 5131u32;
pub const URLACTION_SCRIPT_CURR_MAX: u32 = 5133u32;
pub const URLACTION_SCRIPT_JAVA_USE: u32 = 5122u32;
pub const URLACTION_SCRIPT_MAX: u32 = 5631u32;
pub const URLACTION_SCRIPT_MIN: u32 = 5120u32;
pub const URLACTION_SCRIPT_NAVIGATE: u32 = 5130u32;
pub const URLACTION_SCRIPT_OVERRIDE_SAFETY: u32 = 5121u32;
pub const URLACTION_SCRIPT_PASTE: u32 = 5127u32;
pub const URLACTION_SCRIPT_RUN: u32 = 5120u32;
pub const URLACTION_SCRIPT_SAFE_ACTIVEX: u32 = 5125u32;
pub const URLACTION_SCRIPT_XSSFILTER: u32 = 5129u32;
pub const URLACTION_SHELL_ALLOW_CROSS_SITE_SHARE: u32 = 6161u32;
pub const URLACTION_SHELL_CURR_MAX: u32 = 6162u32;
pub const URLACTION_SHELL_ENHANCED_DRAGDROP_SECURITY: u32 = 6155u32;
pub const URLACTION_SHELL_EXECUTE_HIGHRISK: u32 = 6150u32;
pub const URLACTION_SHELL_EXECUTE_LOWRISK: u32 = 6152u32;
pub const URLACTION_SHELL_EXECUTE_MODRISK: u32 = 6151u32;
pub const URLACTION_SHELL_EXTENSIONSECURITY: u32 = 6156u32;
pub const URLACTION_SHELL_FILE_DOWNLOAD: u32 = 6147u32;
pub const URLACTION_SHELL_INSTALL_DTITEMS: u32 = 6144u32;
pub const URLACTION_SHELL_MAX: u32 = 6655u32;
pub const URLACTION_SHELL_MIN: u32 = 6144u32;
pub const URLACTION_SHELL_MOVE_OR_COPY: u32 = 6146u32;
pub const URLACTION_SHELL_POPUPMGR: u32 = 6153u32;
pub const URLACTION_SHELL_PREVIEW: u32 = 6159u32;
pub const URLACTION_SHELL_REMOTEQUERY: u32 = 6158u32;
pub const URLACTION_SHELL_RTF_OBJECTS_LOAD: u32 = 6154u32;
pub const URLACTION_SHELL_SECURE_DRAGSOURCE: u32 = 6157u32;
pub const URLACTION_SHELL_SHARE: u32 = 6160u32;
pub const URLACTION_SHELL_SHELLEXECUTE: u32 = 6150u32;
pub const URLACTION_SHELL_TOCTOU_RISK: u32 = 6162u32;
pub const URLACTION_SHELL_VERB: u32 = 6148u32;
pub const URLACTION_SHELL_WEBVIEW_VERB: u32 = 6149u32;
pub const URLACTION_WINDOWS_BROWSER_APPLICATIONS: u32 = 9216u32;
pub const URLACTION_WINFX_SETUP: u32 = 9728u32;
pub const URLACTION_XPS_DOCUMENTS: u32 = 9217u32;
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn URLDownloadToCacheFileA<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PSTR>,
    Param5: ::windows::runtime::IntoParam<'a, IBindStatusCallback>,
>(
    param0: Param0,
    param1: Param1,
    param2: super::super::Foundation::PSTR,
    cchfilename: u32,
    param4: u32,
    param5: Param5,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn URLDownloadToCacheFileA(
                param0: ::windows::runtime::RawPtr,
                param1: super::super::Foundation::PSTR,
                param2: super::super::Foundation::PSTR,
                cchfilename: u32,
                param4: u32,
                param5: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        URLDownloadToCacheFileA(
            param0.into_param().abi(),
            param1.into_param().abi(),
            ::std::mem::transmute(param2),
            ::std::mem::transmute(cchfilename),
            ::std::mem::transmute(param4),
            param5.into_param().abi(),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn URLDownloadToCacheFileW<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param5: ::windows::runtime::IntoParam<'a, IBindStatusCallback>,
>(
    param0: Param0,
    param1: Param1,
    param2: super::super::Foundation::PWSTR,
    cchfilename: u32,
    param4: u32,
    param5: Param5,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn URLDownloadToCacheFileW(
                param0: ::windows::runtime::RawPtr,
                param1: super::super::Foundation::PWSTR,
                param2: super::super::Foundation::PWSTR,
                cchfilename: u32,
                param4: u32,
                param5: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        URLDownloadToCacheFileW(
            param0.into_param().abi(),
            param1.into_param().abi(),
            ::std::mem::transmute(param2),
            ::std::mem::transmute(cchfilename),
            ::std::mem::transmute(param4),
            param5.into_param().abi(),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn URLDownloadToFileA<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PSTR>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PSTR>,
    Param4: ::windows::runtime::IntoParam<'a, IBindStatusCallback>,
>(
    param0: Param0,
    param1: Param1,
    param2: Param2,
    param3: u32,
    param4: Param4,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn URLDownloadToFileA(
                param0: ::windows::runtime::RawPtr,
                param1: super::super::Foundation::PSTR,
                param2: super::super::Foundation::PSTR,
                param3: u32,
                param4: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        URLDownloadToFileA(
            param0.into_param().abi(),
            param1.into_param().abi(),
            param2.into_param().abi(),
            ::std::mem::transmute(param3),
            param4.into_param().abi(),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn URLDownloadToFileW<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param4: ::windows::runtime::IntoParam<'a, IBindStatusCallback>,
>(
    param0: Param0,
    param1: Param1,
    param2: Param2,
    param3: u32,
    param4: Param4,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn URLDownloadToFileW(
                param0: ::windows::runtime::RawPtr,
                param1: super::super::Foundation::PWSTR,
                param2: super::super::Foundation::PWSTR,
                param3: u32,
                param4: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        URLDownloadToFileW(
            param0.into_param().abi(),
            param1.into_param().abi(),
            param2.into_param().abi(),
            ::std::mem::transmute(param3),
            param4.into_param().abi(),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const URLMON_OPTION_URL_ENCODING: u32 = 268435460u32;
pub const URLMON_OPTION_USERAGENT: u32 = 268435457u32;
pub const URLMON_OPTION_USERAGENT_REFRESH: u32 = 268435458u32;
pub const URLMON_OPTION_USE_BINDSTRINGCREDS: u32 = 268435464u32;
pub const URLMON_OPTION_USE_BROWSERAPPSDOCUMENTS: u32 = 268435472u32;
pub const URLOSTRM_GETNEWESTVERSION: u32 = 3u32;
pub const URLOSTRM_USECACHEDCOPY: u32 = 2u32;
pub const URLOSTRM_USECACHEDCOPY_ONLY: u32 = 1u32;
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage"
))]
pub unsafe fn URLOpenBlockingStreamA<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PSTR>,
    Param4: ::windows::runtime::IntoParam<'a, IBindStatusCallback>,
>(
    param0: Param0,
    param1: Param1,
    param2: *mut ::std::option::Option<super::super::Storage::StructuredStorage::IStream>,
    param3: u32,
    param4: Param4,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn URLOpenBlockingStreamA(
                param0: ::windows::runtime::RawPtr,
                param1: super::super::Foundation::PSTR,
                param2: *mut ::windows::runtime::RawPtr,
                param3: u32,
                param4: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        URLOpenBlockingStreamA(
            param0.into_param().abi(),
            param1.into_param().abi(),
            ::std::mem::transmute(param2),
            ::std::mem::transmute(param3),
            param4.into_param().abi(),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Storage_StructuredStorage"
))]
pub unsafe fn URLOpenBlockingStreamW<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param4: ::windows::runtime::IntoParam<'a, IBindStatusCallback>,
>(
    param0: Param0,
    param1: Param1,
    param2: *mut ::std::option::Option<super::super::Storage::StructuredStorage::IStream>,
    param3: u32,
    param4: Param4,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn URLOpenBlockingStreamW(
                param0: ::windows::runtime::RawPtr,
                param1: super::super::Foundation::PWSTR,
                param2: *mut ::windows::runtime::RawPtr,
                param3: u32,
                param4: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        URLOpenBlockingStreamW(
            param0.into_param().abi(),
            param1.into_param().abi(),
            ::std::mem::transmute(param2),
            ::std::mem::transmute(param3),
            param4.into_param().abi(),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn URLOpenPullStreamA<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PSTR>,
    Param3: ::windows::runtime::IntoParam<'a, IBindStatusCallback>,
>(
    param0: Param0,
    param1: Param1,
    param2: u32,
    param3: Param3,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn URLOpenPullStreamA(
                param0: ::windows::runtime::RawPtr,
                param1: super::super::Foundation::PSTR,
                param2: u32,
                param3: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        URLOpenPullStreamA(
            param0.into_param().abi(),
            param1.into_param().abi(),
            ::std::mem::transmute(param2),
            param3.into_param().abi(),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn URLOpenPullStreamW<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param3: ::windows::runtime::IntoParam<'a, IBindStatusCallback>,
>(
    param0: Param0,
    param1: Param1,
    param2: u32,
    param3: Param3,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn URLOpenPullStreamW(
                param0: ::windows::runtime::RawPtr,
                param1: super::super::Foundation::PWSTR,
                param2: u32,
                param3: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        URLOpenPullStreamW(
            param0.into_param().abi(),
            param1.into_param().abi(),
            ::std::mem::transmute(param2),
            param3.into_param().abi(),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn URLOpenStreamA<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PSTR>,
    Param3: ::windows::runtime::IntoParam<'a, IBindStatusCallback>,
>(
    param0: Param0,
    param1: Param1,
    param2: u32,
    param3: Param3,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn URLOpenStreamA(
                param0: ::windows::runtime::RawPtr,
                param1: super::super::Foundation::PSTR,
                param2: u32,
                param3: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        URLOpenStreamA(
            param0.into_param().abi(),
            param1.into_param().abi(),
            ::std::mem::transmute(param2),
            param3.into_param().abi(),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn URLOpenStreamW<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param3: ::windows::runtime::IntoParam<'a, IBindStatusCallback>,
>(
    param0: Param0,
    param1: Param1,
    param2: u32,
    param3: Param3,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn URLOpenStreamW(
                param0: ::windows::runtime::RawPtr,
                param1: super::super::Foundation::PWSTR,
                param2: u32,
                param3: ::windows::runtime::RawPtr,
            ) -> ::windows::runtime::HRESULT;
        }
        URLOpenStreamW(
            param0.into_param().abi(),
            param1.into_param().abi(),
            ::std::mem::transmute(param2),
            param3.into_param().abi(),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const URLPOLICY_ACTIVEX_CHECK_LIST: u32 = 65536u32;
pub const URLPOLICY_ALLOW: u32 = 0u32;
pub const URLPOLICY_AUTHENTICATE_CHALLENGE_RESPONSE: u32 = 65536u32;
pub const URLPOLICY_AUTHENTICATE_CLEARTEXT_OK: u32 = 0u32;
pub const URLPOLICY_AUTHENTICATE_MUTUAL_ONLY: u32 = 196608u32;
pub const URLPOLICY_BEHAVIOR_CHECK_LIST: u32 = 65536u32;
pub const URLPOLICY_CHANNEL_SOFTDIST_AUTOINSTALL: u32 = 196608u32;
pub const URLPOLICY_CHANNEL_SOFTDIST_PRECACHE: u32 = 131072u32;
pub const URLPOLICY_CHANNEL_SOFTDIST_PROHIBIT: u32 = 65536u32;
pub const URLPOLICY_CREDENTIALS_ANONYMOUS_ONLY: u32 = 196608u32;
pub const URLPOLICY_CREDENTIALS_CONDITIONAL_PROMPT: u32 = 131072u32;
pub const URLPOLICY_CREDENTIALS_MUST_PROMPT_USER: u32 = 65536u32;
pub const URLPOLICY_CREDENTIALS_SILENT_LOGON_OK: u32 = 0u32;
pub const URLPOLICY_DISALLOW: u32 = 3u32;
pub const URLPOLICY_DONTCHECKDLGBOX: u32 = 256u32;
pub const URLPOLICY_JAVA_CUSTOM: u32 = 8388608u32;
pub const URLPOLICY_JAVA_HIGH: u32 = 65536u32;
pub const URLPOLICY_JAVA_LOW: u32 = 196608u32;
pub const URLPOLICY_JAVA_MEDIUM: u32 = 131072u32;
pub const URLPOLICY_JAVA_PROHIBIT: u32 = 0u32;
pub const URLPOLICY_LOG_ON_ALLOW: u32 = 64u32;
pub const URLPOLICY_LOG_ON_DISALLOW: u32 = 128u32;
pub const URLPOLICY_MASK_PERMISSIONS: u32 = 15u32;
pub const URLPOLICY_NOTIFY_ON_ALLOW: u32 = 16u32;
pub const URLPOLICY_NOTIFY_ON_DISALLOW: u32 = 32u32;
pub const URLPOLICY_QUERY: u32 = 1u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct URLTEMPLATE(pub i32);
pub const URLTEMPLATE_CUSTOM: URLTEMPLATE = URLTEMPLATE(0i32);
pub const URLTEMPLATE_PREDEFINED_MIN: URLTEMPLATE = URLTEMPLATE(65536i32);
pub const URLTEMPLATE_LOW: URLTEMPLATE = URLTEMPLATE(65536i32);
pub const URLTEMPLATE_MEDLOW: URLTEMPLATE = URLTEMPLATE(66816i32);
pub const URLTEMPLATE_MEDIUM: URLTEMPLATE = URLTEMPLATE(69632i32);
pub const URLTEMPLATE_MEDHIGH: URLTEMPLATE = URLTEMPLATE(70912i32);
pub const URLTEMPLATE_HIGH: URLTEMPLATE = URLTEMPLATE(73728i32);
pub const URLTEMPLATE_PREDEFINED_MAX: URLTEMPLATE = URLTEMPLATE(131072i32);
impl ::std::convert::From<i32> for URLTEMPLATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for URLTEMPLATE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct URLZONE(pub i32);
pub const URLZONE_INVALID: URLZONE = URLZONE(-1i32);
pub const URLZONE_PREDEFINED_MIN: URLZONE = URLZONE(0i32);
pub const URLZONE_LOCAL_MACHINE: URLZONE = URLZONE(0i32);
pub const URLZONE_INTRANET: URLZONE = URLZONE(1i32);
pub const URLZONE_TRUSTED: URLZONE = URLZONE(2i32);
pub const URLZONE_INTERNET: URLZONE = URLZONE(3i32);
pub const URLZONE_UNTRUSTED: URLZONE = URLZONE(4i32);
pub const URLZONE_PREDEFINED_MAX: URLZONE = URLZONE(999i32);
pub const URLZONE_USER_MIN: URLZONE = URLZONE(1000i32);
pub const URLZONE_USER_MAX: URLZONE = URLZONE(10000i32);
impl ::std::convert::From<i32> for URLZONE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for URLZONE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct URLZONEREG(pub i32);
pub const URLZONEREG_DEFAULT: URLZONEREG = URLZONEREG(0i32);
pub const URLZONEREG_HKLM: URLZONEREG = URLZONEREG(1i32);
pub const URLZONEREG_HKCU: URLZONEREG = URLZONEREG(2i32);
impl ::std::convert::From<i32> for URLZONEREG {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for URLZONEREG {
    type Abi = Self;
    type DefaultType = Self;
}
pub const URLZONE_ESC_FLAG: u32 = 256u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct URL_ENCODING(pub i32);
pub const URL_ENCODING_NONE: URL_ENCODING = URL_ENCODING(0i32);
pub const URL_ENCODING_ENABLE_UTF8: URL_ENCODING = URL_ENCODING(268435456i32);
pub const URL_ENCODING_DISABLE_UTF8: URL_ENCODING = URL_ENCODING(536870912i32);
impl ::std::convert::From<i32> for URL_ENCODING {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for URL_ENCODING {
    type Abi = Self;
    type DefaultType = Self;
}
pub const URL_MK_LEGACY: u32 = 0u32;
pub const URL_MK_NO_CANONICALIZE: u32 = 2u32;
pub const URL_MK_UNIFORM: u32 = 1u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct USERCLASSTYPE(pub i32);
pub const USERCLASSTYPE_FULL: USERCLASSTYPE = USERCLASSTYPE(1i32);
pub const USERCLASSTYPE_SHORT: USERCLASSTYPE = USERCLASSTYPE(2i32);
pub const USERCLASSTYPE_APPNAME: USERCLASSTYPE = USERCLASSTYPE(3i32);
impl ::std::convert::From<i32> for USERCLASSTYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for USERCLASSTYPE {
    type Abi = Self;
    type DefaultType = Self;
}
pub const UriBuilder_USE_ORIGINAL_FLAGS: u32 = 1u32;
pub const Uri_DISPLAY_IDN_HOST: u32 = 4u32;
pub const Uri_DISPLAY_NO_FRAGMENT: u32 = 1u32;
pub const Uri_DISPLAY_NO_PUNYCODE: u32 = 8u32;
pub const Uri_ENCODING_HOST_IS_IDN: u32 = 4u32;
pub const Uri_ENCODING_HOST_IS_PERCENT_ENCODED_CP: u32 = 16u32;
pub const Uri_ENCODING_HOST_IS_PERCENT_ENCODED_UTF8: u32 = 8u32;
pub const Uri_ENCODING_QUERY_AND_FRAGMENT_IS_CP: u32 = 64u32;
pub const Uri_ENCODING_QUERY_AND_FRAGMENT_IS_PERCENT_ENCODED_UTF8: u32 = 32u32;
pub const Uri_ENCODING_USER_INFO_AND_PATH_IS_CP: u32 = 2u32;
pub const Uri_ENCODING_USER_INFO_AND_PATH_IS_PERCENT_ENCODED_UTF8: u32 = 1u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct Uri_HOST_TYPE(pub i32);
pub const Uri_HOST_UNKNOWN: Uri_HOST_TYPE = Uri_HOST_TYPE(0i32);
pub const Uri_HOST_DNS: Uri_HOST_TYPE = Uri_HOST_TYPE(1i32);
pub const Uri_HOST_IPV4: Uri_HOST_TYPE = Uri_HOST_TYPE(2i32);
pub const Uri_HOST_IPV6: Uri_HOST_TYPE = Uri_HOST_TYPE(3i32);
pub const Uri_HOST_IDN: Uri_HOST_TYPE = Uri_HOST_TYPE(4i32);
impl ::std::convert::From<i32> for Uri_HOST_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for Uri_HOST_TYPE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct Uri_PROPERTY(pub i32);
pub const Uri_PROPERTY_ABSOLUTE_URI: Uri_PROPERTY = Uri_PROPERTY(0i32);
pub const Uri_PROPERTY_STRING_START: Uri_PROPERTY = Uri_PROPERTY(0i32);
pub const Uri_PROPERTY_AUTHORITY: Uri_PROPERTY = Uri_PROPERTY(1i32);
pub const Uri_PROPERTY_DISPLAY_URI: Uri_PROPERTY = Uri_PROPERTY(2i32);
pub const Uri_PROPERTY_DOMAIN: Uri_PROPERTY = Uri_PROPERTY(3i32);
pub const Uri_PROPERTY_EXTENSION: Uri_PROPERTY = Uri_PROPERTY(4i32);
pub const Uri_PROPERTY_FRAGMENT: Uri_PROPERTY = Uri_PROPERTY(5i32);
pub const Uri_PROPERTY_HOST: Uri_PROPERTY = Uri_PROPERTY(6i32);
pub const Uri_PROPERTY_PASSWORD: Uri_PROPERTY = Uri_PROPERTY(7i32);
pub const Uri_PROPERTY_PATH: Uri_PROPERTY = Uri_PROPERTY(8i32);
pub const Uri_PROPERTY_PATH_AND_QUERY: Uri_PROPERTY = Uri_PROPERTY(9i32);
pub const Uri_PROPERTY_QUERY: Uri_PROPERTY = Uri_PROPERTY(10i32);
pub const Uri_PROPERTY_RAW_URI: Uri_PROPERTY = Uri_PROPERTY(11i32);
pub const Uri_PROPERTY_SCHEME_NAME: Uri_PROPERTY = Uri_PROPERTY(12i32);
pub const Uri_PROPERTY_USER_INFO: Uri_PROPERTY = Uri_PROPERTY(13i32);
pub const Uri_PROPERTY_USER_NAME: Uri_PROPERTY = Uri_PROPERTY(14i32);
pub const Uri_PROPERTY_STRING_LAST: Uri_PROPERTY = Uri_PROPERTY(14i32);
pub const Uri_PROPERTY_HOST_TYPE: Uri_PROPERTY = Uri_PROPERTY(15i32);
pub const Uri_PROPERTY_DWORD_START: Uri_PROPERTY = Uri_PROPERTY(15i32);
pub const Uri_PROPERTY_PORT: Uri_PROPERTY = Uri_PROPERTY(16i32);
pub const Uri_PROPERTY_SCHEME: Uri_PROPERTY = Uri_PROPERTY(17i32);
pub const Uri_PROPERTY_ZONE: Uri_PROPERTY = Uri_PROPERTY(18i32);
pub const Uri_PROPERTY_DWORD_LAST: Uri_PROPERTY = Uri_PROPERTY(18i32);
impl ::std::convert::From<i32> for Uri_PROPERTY {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for Uri_PROPERTY {
    type Abi = Self;
    type DefaultType = Self;
}
pub const Uri_PUNYCODE_IDN_HOST: u32 = 2u32;
pub unsafe fn UrlMkGetSessionOption(
    dwoption: u32,
    pbuffer: *mut ::std::ffi::c_void,
    dwbufferlength: u32,
    pdwbufferlengthout: *mut u32,
    dwreserved: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn UrlMkGetSessionOption(
                dwoption: u32,
                pbuffer: *mut ::std::ffi::c_void,
                dwbufferlength: u32,
                pdwbufferlengthout: *mut u32,
                dwreserved: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        UrlMkGetSessionOption(
            ::std::mem::transmute(dwoption),
            ::std::mem::transmute(pbuffer),
            ::std::mem::transmute(dwbufferlength),
            ::std::mem::transmute(pdwbufferlengthout),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub unsafe fn UrlMkSetSessionOption(
    dwoption: u32,
    pbuffer: *const ::std::ffi::c_void,
    dwbufferlength: u32,
    dwreserved: u32,
) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn UrlMkSetSessionOption(
                dwoption: u32,
                pbuffer: *const ::std::ffi::c_void,
                dwbufferlength: u32,
                dwreserved: u32,
            ) -> ::windows::runtime::HRESULT;
        }
        UrlMkSetSessionOption(
            ::std::mem::transmute(dwoption),
            ::std::mem::transmute(pbuffer),
            ::std::mem::transmute(dwbufferlength),
            ::std::mem::transmute(dwreserved),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct VIEWSTATUS(pub i32);
pub const VIEWSTATUS_OPAQUE: VIEWSTATUS = VIEWSTATUS(1i32);
pub const VIEWSTATUS_SOLIDBKGND: VIEWSTATUS = VIEWSTATUS(2i32);
pub const VIEWSTATUS_DVASPECTOPAQUE: VIEWSTATUS = VIEWSTATUS(4i32);
pub const VIEWSTATUS_DVASPECTTRANSPARENT: VIEWSTATUS = VIEWSTATUS(8i32);
pub const VIEWSTATUS_SURFACE: VIEWSTATUS = VIEWSTATUS(16i32);
pub const VIEWSTATUS_3DSURFACE: VIEWSTATUS = VIEWSTATUS(32i32);
impl ::std::convert::From<i32> for VIEWSTATUS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for VIEWSTATUS {
    type Abi = Self;
    type DefaultType = Self;
}
pub const VPF_DISABLERELATIVE: i32 = 2i32;
pub const VPF_DISABLESCALE: i32 = 4i32;
pub const VPF_SELECTRELATIVE: i32 = 1i32;
pub const VT_BLOB_PROPSET: u32 = 75u32;
pub const VT_STORED_PROPSET: u32 = 74u32;
pub const VT_STREAMED_PROPSET: u32 = 73u32;
pub const VT_VERBOSE_ENUM: u32 = 76u32;
pub const WIN32: u32 = 100u32;
pub const WININETINFO_OPTION_LOCK_HANDLE: u32 = 65534u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct WORD_BLOB {
    pub clSize: u32,
    pub asData: [u16; 1],
}
impl WORD_BLOB {}
impl ::std::default::Default for WORD_BLOB {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for WORD_BLOB {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("WORD_BLOB")
            .field("clSize", &self.clSize)
            .field("asData", &self.asData)
            .finish()
    }
}
impl ::std::cmp::PartialEq for WORD_BLOB {
    fn eq(&self, other: &Self) -> bool {
        self.clSize == other.clSize && self.asData == other.asData
    }
}
impl ::std::cmp::Eq for WORD_BLOB {}
unsafe impl ::windows::runtime::Abi for WORD_BLOB {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct WPCSETTING(pub i32);
pub const WPCSETTING_LOGGING_ENABLED: WPCSETTING = WPCSETTING(1i32);
pub const WPCSETTING_FILEDOWNLOAD_BLOCKED: WPCSETTING = WPCSETTING(2i32);
impl ::std::convert::From<i32> for WPCSETTING {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for WPCSETTING {
    type Abi = Self;
    type DefaultType = Self;
}
#[cfg(feature = "Win32_Foundation")]
pub unsafe fn WriteHitLogging(
    lplogginginfo: *const HIT_LOGGING_INFO,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "urlmon")]
        extern "system" {
            fn WriteHitLogging(
                lplogginginfo: *const HIT_LOGGING_INFO,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(WriteHitLogging(::std::mem::transmute(lplogginginfo)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct XFORMCOORDS(pub i32);
pub const XFORMCOORDS_POSITION: XFORMCOORDS = XFORMCOORDS(1i32);
pub const XFORMCOORDS_SIZE: XFORMCOORDS = XFORMCOORDS(2i32);
pub const XFORMCOORDS_HIMETRICTOCONTAINER: XFORMCOORDS = XFORMCOORDS(4i32);
pub const XFORMCOORDS_CONTAINERTOHIMETRIC: XFORMCOORDS = XFORMCOORDS(8i32);
pub const XFORMCOORDS_EVENTCOMPAT: XFORMCOORDS = XFORMCOORDS(16i32);
impl ::std::convert::From<i32> for XFORMCOORDS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for XFORMCOORDS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct ZAFLAGS(pub i32);
pub const ZAFLAGS_CUSTOM_EDIT: ZAFLAGS = ZAFLAGS(1i32);
pub const ZAFLAGS_ADD_SITES: ZAFLAGS = ZAFLAGS(2i32);
pub const ZAFLAGS_REQUIRE_VERIFICATION: ZAFLAGS = ZAFLAGS(4i32);
pub const ZAFLAGS_INCLUDE_PROXY_OVERRIDE: ZAFLAGS = ZAFLAGS(8i32);
pub const ZAFLAGS_INCLUDE_INTRANET_SITES: ZAFLAGS = ZAFLAGS(16i32);
pub const ZAFLAGS_NO_UI: ZAFLAGS = ZAFLAGS(32i32);
pub const ZAFLAGS_SUPPORTS_VERIFICATION: ZAFLAGS = ZAFLAGS(64i32);
pub const ZAFLAGS_UNC_AS_INTRANET: ZAFLAGS = ZAFLAGS(128i32);
pub const ZAFLAGS_DETECT_INTRANET: ZAFLAGS = ZAFLAGS(256i32);
pub const ZAFLAGS_USE_LOCKED_ZONES: ZAFLAGS = ZAFLAGS(65536i32);
pub const ZAFLAGS_VERIFY_TEMPLATE_SETTINGS: ZAFLAGS = ZAFLAGS(131072i32);
pub const ZAFLAGS_NO_CACHE: ZAFLAGS = ZAFLAGS(262144i32);
impl ::std::convert::From<i32> for ZAFLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for ZAFLAGS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct ZONEATTRIBUTES {
    pub cbSize: u32,
    pub szDisplayName: [u16; 260],
    pub szDescription: [u16; 200],
    pub szIconPath: [u16; 260],
    pub dwTemplateMinLevel: u32,
    pub dwTemplateRecommended: u32,
    pub dwTemplateCurrentLevel: u32,
    pub dwFlags: u32,
}
impl ZONEATTRIBUTES {}
impl ::std::default::Default for ZONEATTRIBUTES {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for ZONEATTRIBUTES {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("ZONEATTRIBUTES")
            .field("cbSize", &self.cbSize)
            .field("szDisplayName", &self.szDisplayName)
            .field("szDescription", &self.szDescription)
            .field("szIconPath", &self.szIconPath)
            .field("dwTemplateMinLevel", &self.dwTemplateMinLevel)
            .field("dwTemplateRecommended", &self.dwTemplateRecommended)
            .field("dwTemplateCurrentLevel", &self.dwTemplateCurrentLevel)
            .field("dwFlags", &self.dwFlags)
            .finish()
    }
}
impl ::std::cmp::PartialEq for ZONEATTRIBUTES {
    fn eq(&self, other: &Self) -> bool {
        self.cbSize == other.cbSize
            && self.szDisplayName == other.szDisplayName
            && self.szDescription == other.szDescription
            && self.szIconPath == other.szIconPath
            && self.dwTemplateMinLevel == other.dwTemplateMinLevel
            && self.dwTemplateRecommended == other.dwTemplateRecommended
            && self.dwTemplateCurrentLevel == other.dwTemplateCurrentLevel
            && self.dwFlags == other.dwFlags
    }
}
impl ::std::cmp::Eq for ZONEATTRIBUTES {}
unsafe impl ::windows::runtime::Abi for ZONEATTRIBUTES {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct __MIDL___MIDL_itf_mtxadmin_0107_0001(pub i32);
pub const mtsInstallUsers: __MIDL___MIDL_itf_mtxadmin_0107_0001 =
    __MIDL___MIDL_itf_mtxadmin_0107_0001(1i32);
impl ::std::convert::From<i32> for __MIDL___MIDL_itf_mtxadmin_0107_0001 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for __MIDL___MIDL_itf_mtxadmin_0107_0001 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct __MIDL___MIDL_itf_mtxadmin_0107_0002(pub i32);
pub const mtsExportUsers: __MIDL___MIDL_itf_mtxadmin_0107_0002 =
    __MIDL___MIDL_itf_mtxadmin_0107_0002(1i32);
impl ::std::convert::From<i32> for __MIDL___MIDL_itf_mtxadmin_0107_0002 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for __MIDL___MIDL_itf_mtxadmin_0107_0002 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct __MIDL___MIDL_itf_mtxadmin_0107_0003(pub i32);
pub const mtsErrObjectErrors: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368511i32);
pub const mtsErrObjectInvalid: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368510i32);
pub const mtsErrKeyMissing: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368509i32);
pub const mtsErrAlreadyInstalled: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368508i32);
pub const mtsErrDownloadFailed: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368507i32);
pub const mtsErrPDFWriteFail: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368505i32);
pub const mtsErrPDFReadFail: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368504i32);
pub const mtsErrPDFVersion: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368503i32);
pub const mtsErrCoReqCompInstalled: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368496i32);
pub const mtsErrBadPath: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368502i32);
pub const mtsErrPackageExists: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368501i32);
pub const mtsErrRoleExists: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368500i32);
pub const mtsErrCantCopyFile: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368499i32);
pub const mtsErrNoTypeLib: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368498i32);
pub const mtsErrNoUser: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368497i32);
pub const mtsErrInvalidUserids: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368496i32);
pub const mtsErrNoRegistryCLSID: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368495i32);
pub const mtsErrBadRegistryProgID: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368494i32);
pub const mtsErrAuthenticationLevel: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368493i32);
pub const mtsErrUserPasswdNotValid: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368492i32);
pub const mtsErrNoRegistryRead: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368491i32);
pub const mtsErrNoRegistryWrite: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368490i32);
pub const mtsErrNoRegistryRepair: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368489i32);
pub const mtsErrCLSIDOrIIDMismatch: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368488i32);
pub const mtsErrRemoteInterface: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368487i32);
pub const mtsErrDllRegisterServer: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368486i32);
pub const mtsErrNoServerShare: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368485i32);
pub const mtsErrNoAccessToUNC: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368484i32);
pub const mtsErrDllLoadFailed: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368483i32);
pub const mtsErrBadRegistryLibID: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368482i32);
pub const mtsErrPackDirNotFound: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368481i32);
pub const mtsErrTreatAs: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368480i32);
pub const mtsErrBadForward: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368479i32);
pub const mtsErrBadIID: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368478i32);
pub const mtsErrRegistrarFailed: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368477i32);
pub const mtsErrCompFileDoesNotExist: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368476i32);
pub const mtsErrCompFileLoadDLLFail: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368475i32);
pub const mtsErrCompFileGetClassObj: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368474i32);
pub const mtsErrCompFileClassNotAvail: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368473i32);
pub const mtsErrCompFileBadTLB: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368472i32);
pub const mtsErrCompFileNotInstallable: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368471i32);
pub const mtsErrNotChangeable: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368470i32);
pub const mtsErrNotDeletable: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368469i32);
pub const mtsErrSession: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368468i32);
pub const mtsErrCompFileNoRegistrar: __MIDL___MIDL_itf_mtxadmin_0107_0003 =
    __MIDL___MIDL_itf_mtxadmin_0107_0003(-2146368460i32);
impl ::std::convert::From<i32> for __MIDL___MIDL_itf_mtxadmin_0107_0003 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for __MIDL___MIDL_itf_mtxadmin_0107_0003 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
pub struct userFLAG_STGMEDIUM {
    pub ContextFlags: i32,
    pub fPassOwnership: i32,
    pub Stgmed: userSTGMEDIUM,
}
impl userFLAG_STGMEDIUM {}
impl ::std::default::Default for userFLAG_STGMEDIUM {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for userFLAG_STGMEDIUM {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("userFLAG_STGMEDIUM")
            .field("ContextFlags", &self.ContextFlags)
            .field("fPassOwnership", &self.fPassOwnership)
            .field("Stgmed", &self.Stgmed)
            .finish()
    }
}
impl ::std::cmp::PartialEq for userFLAG_STGMEDIUM {
    fn eq(&self, other: &Self) -> bool {
        self.ContextFlags == other.ContextFlags
            && self.fPassOwnership == other.fPassOwnership
            && self.Stgmed == other.Stgmed
    }
}
impl ::std::cmp::Eq for userFLAG_STGMEDIUM {}
unsafe impl ::windows::runtime::Abi for userFLAG_STGMEDIUM {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
pub struct userSTGMEDIUM {
    pub pUnkForRelease: ::std::option::Option<::windows::runtime::IUnknown>,
}
impl userSTGMEDIUM {}
impl ::std::default::Default for userSTGMEDIUM {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for userSTGMEDIUM {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("userSTGMEDIUM")
            .field("pUnkForRelease", &self.pUnkForRelease)
            .finish()
    }
}
impl ::std::cmp::PartialEq for userSTGMEDIUM {
    fn eq(&self, other: &Self) -> bool {
        self.pUnkForRelease == other.pUnkForRelease
    }
}
impl ::std::cmp::Eq for userSTGMEDIUM {}
unsafe impl ::windows::runtime::Abi for userSTGMEDIUM {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
pub struct userSTGMEDIUM_0 {
    pub tymed: u32,
    pub u: userSTGMEDIUM_0_0,
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
impl userSTGMEDIUM_0 {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
impl ::std::default::Default for userSTGMEDIUM_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
impl ::std::cmp::PartialEq for userSTGMEDIUM_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
impl ::std::cmp::Eq for userSTGMEDIUM_0 {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
unsafe impl ::windows::runtime::Abi for userSTGMEDIUM_0 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
pub union userSTGMEDIUM_0_0 {
    pub hMetaFilePict: *mut super::SystemServices::userHMETAFILEPICT,
    pub hHEnhMetaFile: *mut super::SystemServices::userHENHMETAFILE,
    pub hGdiHandle: *mut GDI_OBJECT,
    pub hGlobal: *mut super::SystemServices::userHGLOBAL,
    pub lpszFileName: super::super::Foundation::PWSTR,
    pub pstm: *mut BYTE_BLOB,
    pub pstg: *mut BYTE_BLOB,
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
impl userSTGMEDIUM_0_0 {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
impl ::std::default::Default for userSTGMEDIUM_0_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
impl ::std::cmp::PartialEq for userSTGMEDIUM_0_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
impl ::std::cmp::Eq for userSTGMEDIUM_0_0 {}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Graphics_Gdi",
    feature = "Win32_System_SystemServices"
))]
unsafe impl ::windows::runtime::Abi for userSTGMEDIUM_0_0 {
    type Abi = Self;
    type DefaultType = Self;
}
