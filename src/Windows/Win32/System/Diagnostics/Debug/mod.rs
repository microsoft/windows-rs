#![allow(unused_variables, non_upper_case_globals, non_snake_case, unused_unsafe, non_camel_case_types, dead_code, clippy::all)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const ACTIVPROF_E_PROFILER_ABSENT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-2147220991i32 as _);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const ACTIVPROF_E_PROFILER_PRESENT: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-2147220992i32 as _);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const ACTIVPROF_E_UNABLE_TO_APPLY_ACTION: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-2147220990i32 as _);
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct ADDRESS {
    pub Offset: u32,
    pub Segment: u16,
    pub Mode: ADDRESS_MODE,
}
impl ADDRESS {}
impl ::std::default::Default for ADDRESS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for ADDRESS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("ADDRESS").field("Offset", &self.Offset).field("Segment", &self.Segment).field("Mode", &self.Mode).finish()
    }
}
impl ::std::cmp::PartialEq for ADDRESS {
    fn eq(&self, other: &Self) -> bool {
        self.Offset == other.Offset && self.Segment == other.Segment && self.Mode == other.Mode
    }
}
impl ::std::cmp::Eq for ADDRESS {}
unsafe impl ::windows::runtime::Abi for ADDRESS {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct ADDRESS64 {
    pub Offset: u64,
    pub Segment: u16,
    pub Mode: ADDRESS_MODE,
}
impl ADDRESS64 {}
impl ::std::default::Default for ADDRESS64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for ADDRESS64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("ADDRESS64").field("Offset", &self.Offset).field("Segment", &self.Segment).field("Mode", &self.Mode).finish()
    }
}
impl ::std::cmp::PartialEq for ADDRESS64 {
    fn eq(&self, other: &Self) -> bool {
        self.Offset == other.Offset && self.Segment == other.Segment && self.Mode == other.Mode
    }
}
impl ::std::cmp::Eq for ADDRESS64 {}
unsafe impl ::windows::runtime::Abi for ADDRESS64 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct ADDRESS_MODE(pub i32);
pub const AddrMode1616: ADDRESS_MODE = ADDRESS_MODE(0i32);
pub const AddrMode1632: ADDRESS_MODE = ADDRESS_MODE(1i32);
pub const AddrModeReal: ADDRESS_MODE = ADDRESS_MODE(2i32);
pub const AddrModeFlat: ADDRESS_MODE = ADDRESS_MODE(3i32);
impl ::std::convert::From<i32> for ADDRESS_MODE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for ADDRESS_MODE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const ADDRESS_TYPE_INDEX_NOT_FOUND: u32 = 11u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union AER_BRIDGE_DESCRIPTOR_FLAGS {
    pub Anonymous: AER_BRIDGE_DESCRIPTOR_FLAGS_0,
    pub AsUSHORT: u16,
}
impl AER_BRIDGE_DESCRIPTOR_FLAGS {}
impl ::std::default::Default for AER_BRIDGE_DESCRIPTOR_FLAGS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for AER_BRIDGE_DESCRIPTOR_FLAGS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for AER_BRIDGE_DESCRIPTOR_FLAGS {}
unsafe impl ::windows::runtime::Abi for AER_BRIDGE_DESCRIPTOR_FLAGS {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct AER_BRIDGE_DESCRIPTOR_FLAGS_0 {
    pub _bitfield: u16,
}
impl AER_BRIDGE_DESCRIPTOR_FLAGS_0 {}
impl ::std::default::Default for AER_BRIDGE_DESCRIPTOR_FLAGS_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for AER_BRIDGE_DESCRIPTOR_FLAGS_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for AER_BRIDGE_DESCRIPTOR_FLAGS_0 {}
unsafe impl ::windows::runtime::Abi for AER_BRIDGE_DESCRIPTOR_FLAGS_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union AER_ENDPOINT_DESCRIPTOR_FLAGS {
    pub Anonymous: AER_ENDPOINT_DESCRIPTOR_FLAGS_0,
    pub AsUSHORT: u16,
}
impl AER_ENDPOINT_DESCRIPTOR_FLAGS {}
impl ::std::default::Default for AER_ENDPOINT_DESCRIPTOR_FLAGS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for AER_ENDPOINT_DESCRIPTOR_FLAGS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for AER_ENDPOINT_DESCRIPTOR_FLAGS {}
unsafe impl ::windows::runtime::Abi for AER_ENDPOINT_DESCRIPTOR_FLAGS {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct AER_ENDPOINT_DESCRIPTOR_FLAGS_0 {
    pub _bitfield: u16,
}
impl AER_ENDPOINT_DESCRIPTOR_FLAGS_0 {}
impl ::std::default::Default for AER_ENDPOINT_DESCRIPTOR_FLAGS_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for AER_ENDPOINT_DESCRIPTOR_FLAGS_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for AER_ENDPOINT_DESCRIPTOR_FLAGS_0 {}
unsafe impl ::windows::runtime::Abi for AER_ENDPOINT_DESCRIPTOR_FLAGS_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union AER_ROOTPORT_DESCRIPTOR_FLAGS {
    pub Anonymous: AER_ROOTPORT_DESCRIPTOR_FLAGS_0,
    pub AsUSHORT: u16,
}
impl AER_ROOTPORT_DESCRIPTOR_FLAGS {}
impl ::std::default::Default for AER_ROOTPORT_DESCRIPTOR_FLAGS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for AER_ROOTPORT_DESCRIPTOR_FLAGS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for AER_ROOTPORT_DESCRIPTOR_FLAGS {}
unsafe impl ::windows::runtime::Abi for AER_ROOTPORT_DESCRIPTOR_FLAGS {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct AER_ROOTPORT_DESCRIPTOR_FLAGS_0 {
    pub _bitfield: u16,
}
impl AER_ROOTPORT_DESCRIPTOR_FLAGS_0 {}
impl ::std::default::Default for AER_ROOTPORT_DESCRIPTOR_FLAGS_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for AER_ROOTPORT_DESCRIPTOR_FLAGS_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for AER_ROOTPORT_DESCRIPTOR_FLAGS_0 {}
unsafe impl ::windows::runtime::Abi for AER_ROOTPORT_DESCRIPTOR_FLAGS_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct API_VERSION {
    pub MajorVersion: u16,
    pub MinorVersion: u16,
    pub Revision: u16,
    pub Reserved: u16,
}
impl API_VERSION {}
impl ::std::default::Default for API_VERSION {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for API_VERSION {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("API_VERSION").field("MajorVersion", &self.MajorVersion).field("MinorVersion", &self.MinorVersion).field("Revision", &self.Revision).field("Reserved", &self.Reserved).finish()
    }
}
impl ::std::cmp::PartialEq for API_VERSION {
    fn eq(&self, other: &Self) -> bool {
        self.MajorVersion == other.MajorVersion && self.MinorVersion == other.MinorVersion && self.Revision == other.Revision && self.Reserved == other.Reserved
    }
}
impl ::std::cmp::Eq for API_VERSION {}
unsafe impl ::windows::runtime::Abi for API_VERSION {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const API_VERSION_NUMBER: u32 = 12u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const APPBREAKFLAG_DEBUGGER_BLOCK: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const APPBREAKFLAG_DEBUGGER_HALT: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const APPBREAKFLAG_IN_BREAKPOINT: u32 = 2147483648u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const APPBREAKFLAG_NESTED: u32 = 131072u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const APPBREAKFLAG_STEP: u32 = 65536u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const APPBREAKFLAG_STEPTYPE_BYTECODE: u32 = 1048576u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const APPBREAKFLAG_STEPTYPE_MACHINE: u32 = 2097152u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const APPBREAKFLAG_STEPTYPE_MASK: u32 = 15728640u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const APPBREAKFLAG_STEPTYPE_SOURCE: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct APPLICATION_NODE_EVENT_FILTER(pub i32);
pub const FILTER_EXCLUDE_NOTHING: APPLICATION_NODE_EVENT_FILTER = APPLICATION_NODE_EVENT_FILTER(0i32);
pub const FILTER_EXCLUDE_ANONYMOUS_CODE: APPLICATION_NODE_EVENT_FILTER = APPLICATION_NODE_EVENT_FILTER(1i32);
pub const FILTER_EXCLUDE_EVAL_CODE: APPLICATION_NODE_EVENT_FILTER = APPLICATION_NODE_EVENT_FILTER(2i32);
impl ::std::convert::From<i32> for APPLICATION_NODE_EVENT_FILTER {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for APPLICATION_NODE_EVENT_FILTER {
    type Abi = Self;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn AddVectoredContinueHandler(first: u32, handler: ::std::option::Option<PVECTORED_EXCEPTION_HANDLER>) -> *mut ::std::ffi::c_void {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn AddVectoredContinueHandler(first: u32, handler: ::windows::runtime::RawPtr) -> *mut ::std::ffi::c_void;
        }
        ::std::mem::transmute(AddVectoredContinueHandler(::std::mem::transmute(first), ::std::mem::transmute(handler)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn AddVectoredExceptionHandler(first: u32, handler: ::std::option::Option<PVECTORED_EXCEPTION_HANDLER>) -> *mut ::std::ffi::c_void {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn AddVectoredExceptionHandler(first: u32, handler: ::windows::runtime::RawPtr) -> *mut ::std::ffi::c_void;
        }
        ::std::mem::transmute(AddVectoredExceptionHandler(::std::mem::transmute(first), ::std::mem::transmute(handler)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct ArrayDimension {
    pub LowerBound: i64,
    pub Length: u64,
    pub Stride: u64,
}
impl ArrayDimension {}
impl ::std::default::Default for ArrayDimension {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for ArrayDimension {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("ArrayDimension").field("LowerBound", &self.LowerBound).field("Length", &self.Length).field("Stride", &self.Stride).finish()
    }
}
impl ::std::cmp::PartialEq for ArrayDimension {
    fn eq(&self, other: &Self) -> bool {
        self.LowerBound == other.LowerBound && self.Length == other.Length && self.Stride == other.Stride
    }
}
impl ::std::cmp::Eq for ArrayDimension {}
unsafe impl ::windows::runtime::Abi for ArrayDimension {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct AsyncIDebugApplicationNodeEvents(::windows::runtime::IUnknown);
impl AsyncIDebugApplicationNodeEvents {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Begin_onAddChild<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugApplicationNode>>(&self, prddpchild: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), prddpchild.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Finish_onAddChild(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Begin_onRemoveChild<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugApplicationNode>>(&self, prddpchild: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), prddpchild.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Finish_onRemoveChild(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Begin_onDetach(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Finish_onDetach(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Begin_onAttach<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugApplicationNode>>(&self, prddpparent: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), prddpparent.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Finish_onAttach(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for AsyncIDebugApplicationNodeEvents {
    type Vtable = AsyncIDebugApplicationNodeEvents_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2732829243, 43661, 20159, [132, 205, 100, 139, 115, 123, 140, 19]);
}
#[repr(C)]
#[doc(hidden)]
pub struct AsyncIDebugApplicationNodeEvents_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prddpchild: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prddpchild: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prddpparent: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const BIND_ALL_IMAGES: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const BIND_CACHE_IMPORT_DLLS: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const BIND_NO_BOUND_IMPORTS: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const BIND_NO_UPDATE: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const BIND_REPORT_64BIT_VA: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct BREAKPOINT_STATE(pub i32);
pub const BREAKPOINT_DELETED: BREAKPOINT_STATE = BREAKPOINT_STATE(0i32);
pub const BREAKPOINT_DISABLED: BREAKPOINT_STATE = BREAKPOINT_STATE(1i32);
pub const BREAKPOINT_ENABLED: BREAKPOINT_STATE = BREAKPOINT_STATE(2i32);
impl ::std::convert::From<i32> for BREAKPOINT_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for BREAKPOINT_STATE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct BREAKREASON(pub i32);
pub const BREAKREASON_STEP: BREAKREASON = BREAKREASON(0i32);
pub const BREAKREASON_BREAKPOINT: BREAKREASON = BREAKREASON(1i32);
pub const BREAKREASON_DEBUGGER_BLOCK: BREAKREASON = BREAKREASON(2i32);
pub const BREAKREASON_HOST_INITIATED: BREAKREASON = BREAKREASON(3i32);
pub const BREAKREASON_LANGUAGE_INITIATED: BREAKREASON = BREAKREASON(4i32);
pub const BREAKREASON_DEBUGGER_HALT: BREAKREASON = BREAKREASON(5i32);
pub const BREAKREASON_ERROR: BREAKREASON = BREAKREASON(6i32);
pub const BREAKREASON_JIT: BREAKREASON = BREAKREASON(7i32);
pub const BREAKREASON_MUTATION_BREAKPOINT: BREAKREASON = BREAKREASON(8i32);
impl ::std::convert::From<i32> for BREAKREASON {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for BREAKREASON {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct BREAKRESUME_ACTION(pub i32);
pub const BREAKRESUMEACTION_ABORT: BREAKRESUME_ACTION = BREAKRESUME_ACTION(0i32);
pub const BREAKRESUMEACTION_CONTINUE: BREAKRESUME_ACTION = BREAKRESUME_ACTION(1i32);
pub const BREAKRESUMEACTION_STEP_INTO: BREAKRESUME_ACTION = BREAKRESUME_ACTION(2i32);
pub const BREAKRESUMEACTION_STEP_OVER: BREAKRESUME_ACTION = BREAKRESUME_ACTION(3i32);
pub const BREAKRESUMEACTION_STEP_OUT: BREAKRESUME_ACTION = BREAKRESUME_ACTION(4i32);
pub const BREAKRESUMEACTION_IGNORE: BREAKRESUME_ACTION = BREAKRESUME_ACTION(5i32);
pub const BREAKRESUMEACTION_STEP_DOCUMENT: BREAKRESUME_ACTION = BREAKRESUME_ACTION(6i32);
impl ::std::convert::From<i32> for BREAKRESUME_ACTION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for BREAKRESUME_ACTION {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct BUGCHECK_ERROR(pub u32);
pub const HARDWARE_PROFILE_UNDOCKED_STRING: BUGCHECK_ERROR = BUGCHECK_ERROR(1073807361u32);
pub const HARDWARE_PROFILE_DOCKED_STRING: BUGCHECK_ERROR = BUGCHECK_ERROR(1073807362u32);
pub const HARDWARE_PROFILE_UNKNOWN_STRING: BUGCHECK_ERROR = BUGCHECK_ERROR(1073807363u32);
pub const WINDOWS_NT_BANNER: BUGCHECK_ERROR = BUGCHECK_ERROR(1073741950u32);
pub const WINDOWS_NT_CSD_STRING: BUGCHECK_ERROR = BUGCHECK_ERROR(1073741959u32);
pub const WINDOWS_NT_INFO_STRING: BUGCHECK_ERROR = BUGCHECK_ERROR(1073741960u32);
pub const WINDOWS_NT_MP_STRING: BUGCHECK_ERROR = BUGCHECK_ERROR(1073741961u32);
pub const THREAD_TERMINATE_HELD_MUTEX: BUGCHECK_ERROR = BUGCHECK_ERROR(1073741962u32);
pub const WINDOWS_NT_INFO_STRING_PLURAL: BUGCHECK_ERROR = BUGCHECK_ERROR(1073741981u32);
pub const WINDOWS_NT_RC_STRING: BUGCHECK_ERROR = BUGCHECK_ERROR(1073741982u32);
pub const APC_INDEX_MISMATCH: BUGCHECK_ERROR = BUGCHECK_ERROR(1u32);
pub const DEVICE_QUEUE_NOT_BUSY: BUGCHECK_ERROR = BUGCHECK_ERROR(2u32);
pub const INVALID_AFFINITY_SET: BUGCHECK_ERROR = BUGCHECK_ERROR(3u32);
pub const INVALID_DATA_ACCESS_TRAP: BUGCHECK_ERROR = BUGCHECK_ERROR(4u32);
pub const INVALID_PROCESS_ATTACH_ATTEMPT: BUGCHECK_ERROR = BUGCHECK_ERROR(5u32);
pub const INVALID_PROCESS_DETACH_ATTEMPT: BUGCHECK_ERROR = BUGCHECK_ERROR(6u32);
pub const INVALID_SOFTWARE_INTERRUPT: BUGCHECK_ERROR = BUGCHECK_ERROR(7u32);
pub const IRQL_NOT_DISPATCH_LEVEL: BUGCHECK_ERROR = BUGCHECK_ERROR(8u32);
pub const IRQL_NOT_GREATER_OR_EQUAL: BUGCHECK_ERROR = BUGCHECK_ERROR(9u32);
pub const IRQL_NOT_LESS_OR_EQUAL: BUGCHECK_ERROR = BUGCHECK_ERROR(10u32);
pub const NO_EXCEPTION_HANDLING_SUPPORT: BUGCHECK_ERROR = BUGCHECK_ERROR(11u32);
pub const MAXIMUM_WAIT_OBJECTS_EXCEEDED: BUGCHECK_ERROR = BUGCHECK_ERROR(12u32);
pub const MUTEX_LEVEL_NUMBER_VIOLATION: BUGCHECK_ERROR = BUGCHECK_ERROR(13u32);
pub const NO_USER_MODE_CONTEXT: BUGCHECK_ERROR = BUGCHECK_ERROR(14u32);
pub const SPIN_LOCK_ALREADY_OWNED: BUGCHECK_ERROR = BUGCHECK_ERROR(15u32);
pub const SPIN_LOCK_NOT_OWNED: BUGCHECK_ERROR = BUGCHECK_ERROR(16u32);
pub const THREAD_NOT_MUTEX_OWNER: BUGCHECK_ERROR = BUGCHECK_ERROR(17u32);
pub const TRAP_CAUSE_UNKNOWN: BUGCHECK_ERROR = BUGCHECK_ERROR(18u32);
pub const EMPTY_THREAD_REAPER_LIST: BUGCHECK_ERROR = BUGCHECK_ERROR(19u32);
pub const CREATE_DELETE_LOCK_NOT_LOCKED: BUGCHECK_ERROR = BUGCHECK_ERROR(20u32);
pub const LAST_CHANCE_CALLED_FROM_KMODE: BUGCHECK_ERROR = BUGCHECK_ERROR(21u32);
pub const CID_HANDLE_CREATION: BUGCHECK_ERROR = BUGCHECK_ERROR(22u32);
pub const CID_HANDLE_DELETION: BUGCHECK_ERROR = BUGCHECK_ERROR(23u32);
pub const REFERENCE_BY_POINTER: BUGCHECK_ERROR = BUGCHECK_ERROR(24u32);
pub const BAD_POOL_HEADER: BUGCHECK_ERROR = BUGCHECK_ERROR(25u32);
pub const MEMORY_MANAGEMENT: BUGCHECK_ERROR = BUGCHECK_ERROR(26u32);
pub const PFN_SHARE_COUNT: BUGCHECK_ERROR = BUGCHECK_ERROR(27u32);
pub const PFN_REFERENCE_COUNT: BUGCHECK_ERROR = BUGCHECK_ERROR(28u32);
pub const NO_SPIN_LOCK_AVAILABLE: BUGCHECK_ERROR = BUGCHECK_ERROR(29u32);
pub const KMODE_EXCEPTION_NOT_HANDLED: BUGCHECK_ERROR = BUGCHECK_ERROR(30u32);
pub const SHARED_RESOURCE_CONV_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(31u32);
pub const KERNEL_APC_PENDING_DURING_EXIT: BUGCHECK_ERROR = BUGCHECK_ERROR(32u32);
pub const QUOTA_UNDERFLOW: BUGCHECK_ERROR = BUGCHECK_ERROR(33u32);
pub const FILE_SYSTEM: BUGCHECK_ERROR = BUGCHECK_ERROR(34u32);
pub const FAT_FILE_SYSTEM: BUGCHECK_ERROR = BUGCHECK_ERROR(35u32);
pub const NTFS_FILE_SYSTEM: BUGCHECK_ERROR = BUGCHECK_ERROR(36u32);
pub const NPFS_FILE_SYSTEM: BUGCHECK_ERROR = BUGCHECK_ERROR(37u32);
pub const CDFS_FILE_SYSTEM: BUGCHECK_ERROR = BUGCHECK_ERROR(38u32);
pub const RDR_FILE_SYSTEM: BUGCHECK_ERROR = BUGCHECK_ERROR(39u32);
pub const CORRUPT_ACCESS_TOKEN: BUGCHECK_ERROR = BUGCHECK_ERROR(40u32);
pub const SECURITY_SYSTEM: BUGCHECK_ERROR = BUGCHECK_ERROR(41u32);
pub const INCONSISTENT_IRP: BUGCHECK_ERROR = BUGCHECK_ERROR(42u32);
pub const PANIC_STACK_SWITCH: BUGCHECK_ERROR = BUGCHECK_ERROR(43u32);
pub const PORT_DRIVER_INTERNAL: BUGCHECK_ERROR = BUGCHECK_ERROR(44u32);
pub const SCSI_DISK_DRIVER_INTERNAL: BUGCHECK_ERROR = BUGCHECK_ERROR(45u32);
pub const DATA_BUS_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(46u32);
pub const INSTRUCTION_BUS_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(47u32);
pub const SET_OF_INVALID_CONTEXT: BUGCHECK_ERROR = BUGCHECK_ERROR(48u32);
pub const PHASE0_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(49u32);
pub const PHASE1_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(50u32);
pub const UNEXPECTED_INITIALIZATION_CALL: BUGCHECK_ERROR = BUGCHECK_ERROR(51u32);
pub const CACHE_MANAGER: BUGCHECK_ERROR = BUGCHECK_ERROR(52u32);
pub const NO_MORE_IRP_STACK_LOCATIONS: BUGCHECK_ERROR = BUGCHECK_ERROR(53u32);
pub const DEVICE_REFERENCE_COUNT_NOT_ZERO: BUGCHECK_ERROR = BUGCHECK_ERROR(54u32);
pub const FLOPPY_INTERNAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(55u32);
pub const SERIAL_DRIVER_INTERNAL: BUGCHECK_ERROR = BUGCHECK_ERROR(56u32);
pub const SYSTEM_EXIT_OWNED_MUTEX: BUGCHECK_ERROR = BUGCHECK_ERROR(57u32);
pub const SYSTEM_UNWIND_PREVIOUS_USER: BUGCHECK_ERROR = BUGCHECK_ERROR(58u32);
pub const SYSTEM_SERVICE_EXCEPTION: BUGCHECK_ERROR = BUGCHECK_ERROR(59u32);
pub const INTERRUPT_UNWIND_ATTEMPTED: BUGCHECK_ERROR = BUGCHECK_ERROR(60u32);
pub const INTERRUPT_EXCEPTION_NOT_HANDLED: BUGCHECK_ERROR = BUGCHECK_ERROR(61u32);
pub const MULTIPROCESSOR_CONFIGURATION_NOT_SUPPORTED: BUGCHECK_ERROR = BUGCHECK_ERROR(62u32);
pub const NO_MORE_SYSTEM_PTES: BUGCHECK_ERROR = BUGCHECK_ERROR(63u32);
pub const TARGET_MDL_TOO_SMALL: BUGCHECK_ERROR = BUGCHECK_ERROR(64u32);
pub const MUST_SUCCEED_POOL_EMPTY: BUGCHECK_ERROR = BUGCHECK_ERROR(65u32);
pub const ATDISK_DRIVER_INTERNAL: BUGCHECK_ERROR = BUGCHECK_ERROR(66u32);
pub const NO_SUCH_PARTITION: BUGCHECK_ERROR = BUGCHECK_ERROR(67u32);
pub const MULTIPLE_IRP_COMPLETE_REQUESTS: BUGCHECK_ERROR = BUGCHECK_ERROR(68u32);
pub const INSUFFICIENT_SYSTEM_MAP_REGS: BUGCHECK_ERROR = BUGCHECK_ERROR(69u32);
pub const DEREF_UNKNOWN_LOGON_SESSION: BUGCHECK_ERROR = BUGCHECK_ERROR(70u32);
pub const REF_UNKNOWN_LOGON_SESSION: BUGCHECK_ERROR = BUGCHECK_ERROR(71u32);
pub const CANCEL_STATE_IN_COMPLETED_IRP: BUGCHECK_ERROR = BUGCHECK_ERROR(72u32);
pub const PAGE_FAULT_WITH_INTERRUPTS_OFF: BUGCHECK_ERROR = BUGCHECK_ERROR(73u32);
pub const IRQL_GT_ZERO_AT_SYSTEM_SERVICE: BUGCHECK_ERROR = BUGCHECK_ERROR(74u32);
pub const STREAMS_INTERNAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(75u32);
pub const FATAL_UNHANDLED_HARD_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(76u32);
pub const NO_PAGES_AVAILABLE: BUGCHECK_ERROR = BUGCHECK_ERROR(77u32);
pub const PFN_LIST_CORRUPT: BUGCHECK_ERROR = BUGCHECK_ERROR(78u32);
pub const NDIS_INTERNAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(79u32);
pub const PAGE_FAULT_IN_NONPAGED_AREA: BUGCHECK_ERROR = BUGCHECK_ERROR(80u32);
pub const PAGE_FAULT_IN_NONPAGED_AREA_M: BUGCHECK_ERROR = BUGCHECK_ERROR(268435536u32);
pub const REGISTRY_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(81u32);
pub const MAILSLOT_FILE_SYSTEM: BUGCHECK_ERROR = BUGCHECK_ERROR(82u32);
pub const NO_BOOT_DEVICE: BUGCHECK_ERROR = BUGCHECK_ERROR(83u32);
pub const LM_SERVER_INTERNAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(84u32);
pub const DATA_COHERENCY_EXCEPTION: BUGCHECK_ERROR = BUGCHECK_ERROR(85u32);
pub const INSTRUCTION_COHERENCY_EXCEPTION: BUGCHECK_ERROR = BUGCHECK_ERROR(86u32);
pub const XNS_INTERNAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(87u32);
pub const VOLMGRX_INTERNAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(88u32);
pub const PINBALL_FILE_SYSTEM: BUGCHECK_ERROR = BUGCHECK_ERROR(89u32);
pub const CRITICAL_SERVICE_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(90u32);
pub const SET_ENV_VAR_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(91u32);
pub const HAL_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(92u32);
pub const UNSUPPORTED_PROCESSOR: BUGCHECK_ERROR = BUGCHECK_ERROR(93u32);
pub const OBJECT_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(94u32);
pub const SECURITY_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(95u32);
pub const PROCESS_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(96u32);
pub const HAL1_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(97u32);
pub const OBJECT1_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(98u32);
pub const SECURITY1_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(99u32);
pub const SYMBOLIC_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(100u32);
pub const MEMORY1_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(101u32);
pub const CACHE_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(102u32);
pub const CONFIG_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(103u32);
pub const FILE_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(104u32);
pub const IO1_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(105u32);
pub const LPC_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(106u32);
pub const PROCESS1_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(107u32);
pub const REFMON_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(108u32);
pub const SESSION1_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(109u32);
pub const BOOTPROC_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(110u32);
pub const VSL_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(111u32);
pub const SOFT_RESTART_FATAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(112u32);
pub const ASSIGN_DRIVE_LETTERS_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(114u32);
pub const CONFIG_LIST_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(115u32);
pub const BAD_SYSTEM_CONFIG_INFO: BUGCHECK_ERROR = BUGCHECK_ERROR(116u32);
pub const CANNOT_WRITE_CONFIGURATION: BUGCHECK_ERROR = BUGCHECK_ERROR(117u32);
pub const PROCESS_HAS_LOCKED_PAGES: BUGCHECK_ERROR = BUGCHECK_ERROR(118u32);
pub const KERNEL_STACK_INPAGE_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(119u32);
pub const PHASE0_EXCEPTION: BUGCHECK_ERROR = BUGCHECK_ERROR(120u32);
pub const MISMATCHED_HAL: BUGCHECK_ERROR = BUGCHECK_ERROR(121u32);
pub const KERNEL_DATA_INPAGE_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(122u32);
pub const INACCESSIBLE_BOOT_DEVICE: BUGCHECK_ERROR = BUGCHECK_ERROR(123u32);
pub const BUGCODE_NDIS_DRIVER: BUGCHECK_ERROR = BUGCHECK_ERROR(124u32);
pub const INSTALL_MORE_MEMORY: BUGCHECK_ERROR = BUGCHECK_ERROR(125u32);
pub const SYSTEM_THREAD_EXCEPTION_NOT_HANDLED: BUGCHECK_ERROR = BUGCHECK_ERROR(126u32);
pub const SYSTEM_THREAD_EXCEPTION_NOT_HANDLED_M: BUGCHECK_ERROR = BUGCHECK_ERROR(268435582u32);
pub const UNEXPECTED_KERNEL_MODE_TRAP: BUGCHECK_ERROR = BUGCHECK_ERROR(127u32);
pub const UNEXPECTED_KERNEL_MODE_TRAP_M: BUGCHECK_ERROR = BUGCHECK_ERROR(268435583u32);
pub const NMI_HARDWARE_FAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(128u32);
pub const SPIN_LOCK_INIT_FAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(129u32);
pub const DFS_FILE_SYSTEM: BUGCHECK_ERROR = BUGCHECK_ERROR(130u32);
pub const OFS_FILE_SYSTEM: BUGCHECK_ERROR = BUGCHECK_ERROR(131u32);
pub const RECOM_DRIVER: BUGCHECK_ERROR = BUGCHECK_ERROR(132u32);
pub const SETUP_FAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(133u32);
pub const AUDIT_FAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(134u32);
pub const MBR_CHECKSUM_MISMATCH: BUGCHECK_ERROR = BUGCHECK_ERROR(139u32);
pub const KERNEL_MODE_EXCEPTION_NOT_HANDLED: BUGCHECK_ERROR = BUGCHECK_ERROR(142u32);
pub const KERNEL_MODE_EXCEPTION_NOT_HANDLED_M: BUGCHECK_ERROR = BUGCHECK_ERROR(268435598u32);
pub const PP0_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(143u32);
pub const PP1_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(144u32);
pub const WIN32K_INIT_OR_RIT_FAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(145u32);
pub const UP_DRIVER_ON_MP_SYSTEM: BUGCHECK_ERROR = BUGCHECK_ERROR(146u32);
pub const INVALID_KERNEL_HANDLE: BUGCHECK_ERROR = BUGCHECK_ERROR(147u32);
pub const KERNEL_STACK_LOCKED_AT_EXIT: BUGCHECK_ERROR = BUGCHECK_ERROR(148u32);
pub const PNP_INTERNAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(149u32);
pub const INVALID_WORK_QUEUE_ITEM: BUGCHECK_ERROR = BUGCHECK_ERROR(150u32);
pub const BOUND_IMAGE_UNSUPPORTED: BUGCHECK_ERROR = BUGCHECK_ERROR(151u32);
pub const END_OF_NT_EVALUATION_PERIOD: BUGCHECK_ERROR = BUGCHECK_ERROR(152u32);
pub const INVALID_REGION_OR_SEGMENT: BUGCHECK_ERROR = BUGCHECK_ERROR(153u32);
pub const SYSTEM_LICENSE_VIOLATION: BUGCHECK_ERROR = BUGCHECK_ERROR(154u32);
pub const UDFS_FILE_SYSTEM: BUGCHECK_ERROR = BUGCHECK_ERROR(155u32);
pub const MACHINE_CHECK_EXCEPTION: BUGCHECK_ERROR = BUGCHECK_ERROR(156u32);
pub const USER_MODE_HEALTH_MONITOR: BUGCHECK_ERROR = BUGCHECK_ERROR(158u32);
pub const DRIVER_POWER_STATE_FAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(159u32);
pub const INTERNAL_POWER_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(160u32);
pub const PCI_BUS_DRIVER_INTERNAL: BUGCHECK_ERROR = BUGCHECK_ERROR(161u32);
pub const MEMORY_IMAGE_CORRUPT: BUGCHECK_ERROR = BUGCHECK_ERROR(162u32);
pub const ACPI_DRIVER_INTERNAL: BUGCHECK_ERROR = BUGCHECK_ERROR(163u32);
pub const CNSS_FILE_SYSTEM_FILTER: BUGCHECK_ERROR = BUGCHECK_ERROR(164u32);
pub const ACPI_BIOS_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(165u32);
pub const FP_EMULATION_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(166u32);
pub const BAD_EXHANDLE: BUGCHECK_ERROR = BUGCHECK_ERROR(167u32);
pub const BOOTING_IN_SAFEMODE_MINIMAL: BUGCHECK_ERROR = BUGCHECK_ERROR(168u32);
pub const BOOTING_IN_SAFEMODE_NETWORK: BUGCHECK_ERROR = BUGCHECK_ERROR(169u32);
pub const BOOTING_IN_SAFEMODE_DSREPAIR: BUGCHECK_ERROR = BUGCHECK_ERROR(170u32);
pub const SESSION_HAS_VALID_POOL_ON_EXIT: BUGCHECK_ERROR = BUGCHECK_ERROR(171u32);
pub const HAL_MEMORY_ALLOCATION: BUGCHECK_ERROR = BUGCHECK_ERROR(172u32);
pub const VIDEO_DRIVER_DEBUG_REPORT_REQUEST: BUGCHECK_ERROR = BUGCHECK_ERROR(1073741997u32);
pub const BGI_DETECTED_VIOLATION: BUGCHECK_ERROR = BUGCHECK_ERROR(177u32);
pub const VIDEO_DRIVER_INIT_FAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(180u32);
pub const BOOTLOG_LOADED: BUGCHECK_ERROR = BUGCHECK_ERROR(181u32);
pub const BOOTLOG_NOT_LOADED: BUGCHECK_ERROR = BUGCHECK_ERROR(182u32);
pub const BOOTLOG_ENABLED: BUGCHECK_ERROR = BUGCHECK_ERROR(183u32);
pub const ATTEMPTED_SWITCH_FROM_DPC: BUGCHECK_ERROR = BUGCHECK_ERROR(184u32);
pub const CHIPSET_DETECTED_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(185u32);
pub const SESSION_HAS_VALID_VIEWS_ON_EXIT: BUGCHECK_ERROR = BUGCHECK_ERROR(186u32);
pub const NETWORK_BOOT_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(187u32);
pub const NETWORK_BOOT_DUPLICATE_ADDRESS: BUGCHECK_ERROR = BUGCHECK_ERROR(188u32);
pub const INVALID_HIBERNATED_STATE: BUGCHECK_ERROR = BUGCHECK_ERROR(189u32);
pub const ATTEMPTED_WRITE_TO_READONLY_MEMORY: BUGCHECK_ERROR = BUGCHECK_ERROR(190u32);
pub const MUTEX_ALREADY_OWNED: BUGCHECK_ERROR = BUGCHECK_ERROR(191u32);
pub const PCI_CONFIG_SPACE_ACCESS_FAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(192u32);
pub const SPECIAL_POOL_DETECTED_MEMORY_CORRUPTION: BUGCHECK_ERROR = BUGCHECK_ERROR(193u32);
pub const BAD_POOL_CALLER: BUGCHECK_ERROR = BUGCHECK_ERROR(194u32);
pub const SYSTEM_IMAGE_BAD_SIGNATURE: BUGCHECK_ERROR = BUGCHECK_ERROR(195u32);
pub const DRIVER_VERIFIER_DETECTED_VIOLATION: BUGCHECK_ERROR = BUGCHECK_ERROR(196u32);
pub const DRIVER_CORRUPTED_EXPOOL: BUGCHECK_ERROR = BUGCHECK_ERROR(197u32);
pub const DRIVER_CAUGHT_MODIFYING_FREED_POOL: BUGCHECK_ERROR = BUGCHECK_ERROR(198u32);
pub const TIMER_OR_DPC_INVALID: BUGCHECK_ERROR = BUGCHECK_ERROR(199u32);
pub const IRQL_UNEXPECTED_VALUE: BUGCHECK_ERROR = BUGCHECK_ERROR(200u32);
pub const DRIVER_VERIFIER_IOMANAGER_VIOLATION: BUGCHECK_ERROR = BUGCHECK_ERROR(201u32);
pub const PNP_DETECTED_FATAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(202u32);
pub const DRIVER_LEFT_LOCKED_PAGES_IN_PROCESS: BUGCHECK_ERROR = BUGCHECK_ERROR(203u32);
pub const PAGE_FAULT_IN_FREED_SPECIAL_POOL: BUGCHECK_ERROR = BUGCHECK_ERROR(204u32);
pub const PAGE_FAULT_BEYOND_END_OF_ALLOCATION: BUGCHECK_ERROR = BUGCHECK_ERROR(205u32);
pub const DRIVER_UNLOADED_WITHOUT_CANCELLING_PENDING_OPERATIONS: BUGCHECK_ERROR = BUGCHECK_ERROR(206u32);
pub const TERMINAL_SERVER_DRIVER_MADE_INCORRECT_MEMORY_REFERENCE: BUGCHECK_ERROR = BUGCHECK_ERROR(207u32);
pub const DRIVER_CORRUPTED_MMPOOL: BUGCHECK_ERROR = BUGCHECK_ERROR(208u32);
pub const DRIVER_IRQL_NOT_LESS_OR_EQUAL: BUGCHECK_ERROR = BUGCHECK_ERROR(209u32);
pub const BUGCODE_ID_DRIVER: BUGCHECK_ERROR = BUGCHECK_ERROR(210u32);
pub const DRIVER_PORTION_MUST_BE_NONPAGED: BUGCHECK_ERROR = BUGCHECK_ERROR(211u32);
pub const SYSTEM_SCAN_AT_RAISED_IRQL_CAUGHT_IMPROPER_DRIVER_UNLOAD: BUGCHECK_ERROR = BUGCHECK_ERROR(212u32);
pub const DRIVER_PAGE_FAULT_IN_FREED_SPECIAL_POOL: BUGCHECK_ERROR = BUGCHECK_ERROR(213u32);
pub const DRIVER_PAGE_FAULT_BEYOND_END_OF_ALLOCATION: BUGCHECK_ERROR = BUGCHECK_ERROR(214u32);
pub const DRIVER_PAGE_FAULT_BEYOND_END_OF_ALLOCATION_M: BUGCHECK_ERROR = BUGCHECK_ERROR(268435670u32);
pub const DRIVER_UNMAPPING_INVALID_VIEW: BUGCHECK_ERROR = BUGCHECK_ERROR(215u32);
pub const DRIVER_USED_EXCESSIVE_PTES: BUGCHECK_ERROR = BUGCHECK_ERROR(216u32);
pub const LOCKED_PAGES_TRACKER_CORRUPTION: BUGCHECK_ERROR = BUGCHECK_ERROR(217u32);
pub const SYSTEM_PTE_MISUSE: BUGCHECK_ERROR = BUGCHECK_ERROR(218u32);
pub const DRIVER_CORRUPTED_SYSPTES: BUGCHECK_ERROR = BUGCHECK_ERROR(219u32);
pub const DRIVER_INVALID_STACK_ACCESS: BUGCHECK_ERROR = BUGCHECK_ERROR(220u32);
pub const POOL_CORRUPTION_IN_FILE_AREA: BUGCHECK_ERROR = BUGCHECK_ERROR(222u32);
pub const IMPERSONATING_WORKER_THREAD: BUGCHECK_ERROR = BUGCHECK_ERROR(223u32);
pub const ACPI_BIOS_FATAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(224u32);
pub const WORKER_THREAD_RETURNED_AT_BAD_IRQL: BUGCHECK_ERROR = BUGCHECK_ERROR(225u32);
pub const MANUALLY_INITIATED_CRASH: BUGCHECK_ERROR = BUGCHECK_ERROR(226u32);
pub const RESOURCE_NOT_OWNED: BUGCHECK_ERROR = BUGCHECK_ERROR(227u32);
pub const WORKER_INVALID: BUGCHECK_ERROR = BUGCHECK_ERROR(228u32);
pub const POWER_FAILURE_SIMULATE: BUGCHECK_ERROR = BUGCHECK_ERROR(229u32);
pub const DRIVER_VERIFIER_DMA_VIOLATION: BUGCHECK_ERROR = BUGCHECK_ERROR(230u32);
pub const INVALID_FLOATING_POINT_STATE: BUGCHECK_ERROR = BUGCHECK_ERROR(231u32);
pub const INVALID_CANCEL_OF_FILE_OPEN: BUGCHECK_ERROR = BUGCHECK_ERROR(232u32);
pub const ACTIVE_EX_WORKER_THREAD_TERMINATION: BUGCHECK_ERROR = BUGCHECK_ERROR(233u32);
pub const SAVER_UNSPECIFIED: BUGCHECK_ERROR = BUGCHECK_ERROR(61440u32);
pub const SAVER_BLANKSCREEN: BUGCHECK_ERROR = BUGCHECK_ERROR(61442u32);
pub const SAVER_INPUT: BUGCHECK_ERROR = BUGCHECK_ERROR(61443u32);
pub const SAVER_WATCHDOG: BUGCHECK_ERROR = BUGCHECK_ERROR(61444u32);
pub const SAVER_STARTNOTVISIBLE: BUGCHECK_ERROR = BUGCHECK_ERROR(61445u32);
pub const SAVER_NAVIGATIONMODEL: BUGCHECK_ERROR = BUGCHECK_ERROR(61446u32);
pub const SAVER_OUTOFMEMORY: BUGCHECK_ERROR = BUGCHECK_ERROR(61447u32);
pub const SAVER_GRAPHICS: BUGCHECK_ERROR = BUGCHECK_ERROR(61448u32);
pub const SAVER_NAVSERVERTIMEOUT: BUGCHECK_ERROR = BUGCHECK_ERROR(61449u32);
pub const SAVER_CHROMEPROCESSCRASH: BUGCHECK_ERROR = BUGCHECK_ERROR(61450u32);
pub const SAVER_NOTIFICATIONDISMISSAL: BUGCHECK_ERROR = BUGCHECK_ERROR(61451u32);
pub const SAVER_SPEECHDISMISSAL: BUGCHECK_ERROR = BUGCHECK_ERROR(61452u32);
pub const SAVER_CALLDISMISSAL: BUGCHECK_ERROR = BUGCHECK_ERROR(61453u32);
pub const SAVER_APPBARDISMISSAL: BUGCHECK_ERROR = BUGCHECK_ERROR(61454u32);
pub const SAVER_RILADAPTATIONCRASH: BUGCHECK_ERROR = BUGCHECK_ERROR(61455u32);
pub const SAVER_APPLISTUNREACHABLE: BUGCHECK_ERROR = BUGCHECK_ERROR(61456u32);
pub const SAVER_REPORTNOTIFICATIONFAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(61457u32);
pub const SAVER_UNEXPECTEDSHUTDOWN: BUGCHECK_ERROR = BUGCHECK_ERROR(61458u32);
pub const SAVER_RPCFAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(61459u32);
pub const SAVER_AUXILIARYFULLDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(61460u32);
pub const SAVER_ACCOUNTPROVSVCINITFAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(61461u32);
pub const SAVER_MTBFCOMMANDTIMEOUT: BUGCHECK_ERROR = BUGCHECK_ERROR(789u32);
pub const SAVER_MTBFCOMMANDHANG: BUGCHECK_ERROR = BUGCHECK_ERROR(61697u32);
pub const SAVER_MTBFPASSBUGCHECK: BUGCHECK_ERROR = BUGCHECK_ERROR(61698u32);
pub const SAVER_MTBFIOERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(61699u32);
pub const SAVER_RENDERTHREADHANG: BUGCHECK_ERROR = BUGCHECK_ERROR(61952u32);
pub const SAVER_RENDERMOBILEUIOOM: BUGCHECK_ERROR = BUGCHECK_ERROR(61953u32);
pub const SAVER_DEVICEUPDATEUNSPECIFIED: BUGCHECK_ERROR = BUGCHECK_ERROR(62208u32);
pub const SAVER_AUDIODRIVERHANG: BUGCHECK_ERROR = BUGCHECK_ERROR(62464u32);
pub const SAVER_BATTERYPULLOUT: BUGCHECK_ERROR = BUGCHECK_ERROR(62720u32);
pub const SAVER_MEDIACORETESTHANG: BUGCHECK_ERROR = BUGCHECK_ERROR(62976u32);
pub const SAVER_RESOURCEMANAGEMENT: BUGCHECK_ERROR = BUGCHECK_ERROR(63232u32);
pub const SAVER_CAPTURESERVICE: BUGCHECK_ERROR = BUGCHECK_ERROR(63488u32);
pub const SAVER_WAITFORSHELLREADY: BUGCHECK_ERROR = BUGCHECK_ERROR(63744u32);
pub const SAVER_NONRESPONSIVEPROCESS: BUGCHECK_ERROR = BUGCHECK_ERROR(404u32);
pub const SAVER_SICKAPPLICATION: BUGCHECK_ERROR = BUGCHECK_ERROR(34918u32);
pub const THREAD_STUCK_IN_DEVICE_DRIVER: BUGCHECK_ERROR = BUGCHECK_ERROR(234u32);
pub const THREAD_STUCK_IN_DEVICE_DRIVER_M: BUGCHECK_ERROR = BUGCHECK_ERROR(268435690u32);
pub const DIRTY_MAPPED_PAGES_CONGESTION: BUGCHECK_ERROR = BUGCHECK_ERROR(235u32);
pub const SESSION_HAS_VALID_SPECIAL_POOL_ON_EXIT: BUGCHECK_ERROR = BUGCHECK_ERROR(236u32);
pub const UNMOUNTABLE_BOOT_VOLUME: BUGCHECK_ERROR = BUGCHECK_ERROR(237u32);
pub const CRITICAL_PROCESS_DIED: BUGCHECK_ERROR = BUGCHECK_ERROR(239u32);
pub const STORAGE_MINIPORT_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(240u32);
pub const SCSI_VERIFIER_DETECTED_VIOLATION: BUGCHECK_ERROR = BUGCHECK_ERROR(241u32);
pub const HARDWARE_INTERRUPT_STORM: BUGCHECK_ERROR = BUGCHECK_ERROR(242u32);
pub const DISORDERLY_SHUTDOWN: BUGCHECK_ERROR = BUGCHECK_ERROR(243u32);
pub const CRITICAL_OBJECT_TERMINATION: BUGCHECK_ERROR = BUGCHECK_ERROR(244u32);
pub const FLTMGR_FILE_SYSTEM: BUGCHECK_ERROR = BUGCHECK_ERROR(245u32);
pub const PCI_VERIFIER_DETECTED_VIOLATION: BUGCHECK_ERROR = BUGCHECK_ERROR(246u32);
pub const DRIVER_OVERRAN_STACK_BUFFER: BUGCHECK_ERROR = BUGCHECK_ERROR(247u32);
pub const RAMDISK_BOOT_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(248u32);
pub const DRIVER_RETURNED_STATUS_REPARSE_FOR_VOLUME_OPEN: BUGCHECK_ERROR = BUGCHECK_ERROR(249u32);
pub const HTTP_DRIVER_CORRUPTED: BUGCHECK_ERROR = BUGCHECK_ERROR(250u32);
pub const RECURSIVE_MACHINE_CHECK: BUGCHECK_ERROR = BUGCHECK_ERROR(251u32);
pub const ATTEMPTED_EXECUTE_OF_NOEXECUTE_MEMORY: BUGCHECK_ERROR = BUGCHECK_ERROR(252u32);
pub const DIRTY_NOWRITE_PAGES_CONGESTION: BUGCHECK_ERROR = BUGCHECK_ERROR(253u32);
pub const BUGCODE_USB_DRIVER: BUGCHECK_ERROR = BUGCHECK_ERROR(254u32);
pub const BC_BLUETOOTH_VERIFIER_FAULT: BUGCHECK_ERROR = BUGCHECK_ERROR(3070u32);
pub const BC_BTHMINI_VERIFIER_FAULT: BUGCHECK_ERROR = BUGCHECK_ERROR(3071u32);
pub const RESERVE_QUEUE_OVERFLOW: BUGCHECK_ERROR = BUGCHECK_ERROR(255u32);
pub const LOADER_BLOCK_MISMATCH: BUGCHECK_ERROR = BUGCHECK_ERROR(256u32);
pub const CLOCK_WATCHDOG_TIMEOUT: BUGCHECK_ERROR = BUGCHECK_ERROR(257u32);
pub const DPC_WATCHDOG_TIMEOUT: BUGCHECK_ERROR = BUGCHECK_ERROR(258u32);
pub const MUP_FILE_SYSTEM: BUGCHECK_ERROR = BUGCHECK_ERROR(259u32);
pub const AGP_INVALID_ACCESS: BUGCHECK_ERROR = BUGCHECK_ERROR(260u32);
pub const AGP_GART_CORRUPTION: BUGCHECK_ERROR = BUGCHECK_ERROR(261u32);
pub const AGP_ILLEGALLY_REPROGRAMMED: BUGCHECK_ERROR = BUGCHECK_ERROR(262u32);
pub const KERNEL_EXPAND_STACK_ACTIVE: BUGCHECK_ERROR = BUGCHECK_ERROR(263u32);
pub const THIRD_PARTY_FILE_SYSTEM_FAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(264u32);
pub const CRITICAL_STRUCTURE_CORRUPTION: BUGCHECK_ERROR = BUGCHECK_ERROR(265u32);
pub const APP_TAGGING_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(266u32);
pub const DFSC_FILE_SYSTEM: BUGCHECK_ERROR = BUGCHECK_ERROR(267u32);
pub const FSRTL_EXTRA_CREATE_PARAMETER_VIOLATION: BUGCHECK_ERROR = BUGCHECK_ERROR(268u32);
pub const WDF_VIOLATION: BUGCHECK_ERROR = BUGCHECK_ERROR(269u32);
pub const VIDEO_MEMORY_MANAGEMENT_INTERNAL: BUGCHECK_ERROR = BUGCHECK_ERROR(270u32);
pub const DRIVER_INVALID_CRUNTIME_PARAMETER: BUGCHECK_ERROR = BUGCHECK_ERROR(272u32);
pub const RECURSIVE_NMI: BUGCHECK_ERROR = BUGCHECK_ERROR(273u32);
pub const MSRPC_STATE_VIOLATION: BUGCHECK_ERROR = BUGCHECK_ERROR(274u32);
pub const VIDEO_DXGKRNL_FATAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(275u32);
pub const VIDEO_SHADOW_DRIVER_FATAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(276u32);
pub const AGP_INTERNAL: BUGCHECK_ERROR = BUGCHECK_ERROR(277u32);
pub const VIDEO_TDR_FAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(278u32);
pub const VIDEO_TDR_TIMEOUT_DETECTED: BUGCHECK_ERROR = BUGCHECK_ERROR(279u32);
pub const NTHV_GUEST_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(280u32);
pub const VIDEO_SCHEDULER_INTERNAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(281u32);
pub const EM_INITIALIZATION_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(282u32);
pub const DRIVER_RETURNED_HOLDING_CANCEL_LOCK: BUGCHECK_ERROR = BUGCHECK_ERROR(283u32);
pub const ATTEMPTED_WRITE_TO_CM_PROTECTED_STORAGE: BUGCHECK_ERROR = BUGCHECK_ERROR(284u32);
pub const EVENT_TRACING_FATAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(285u32);
pub const TOO_MANY_RECURSIVE_FAULTS: BUGCHECK_ERROR = BUGCHECK_ERROR(286u32);
pub const INVALID_DRIVER_HANDLE: BUGCHECK_ERROR = BUGCHECK_ERROR(287u32);
pub const BITLOCKER_FATAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(288u32);
pub const DRIVER_VIOLATION: BUGCHECK_ERROR = BUGCHECK_ERROR(289u32);
pub const WHEA_INTERNAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(290u32);
pub const CRYPTO_SELF_TEST_FAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(291u32);
pub const WHEA_UNCORRECTABLE_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(292u32);
pub const NMR_INVALID_STATE: BUGCHECK_ERROR = BUGCHECK_ERROR(293u32);
pub const NETIO_INVALID_POOL_CALLER: BUGCHECK_ERROR = BUGCHECK_ERROR(294u32);
pub const PAGE_NOT_ZERO: BUGCHECK_ERROR = BUGCHECK_ERROR(295u32);
pub const WORKER_THREAD_RETURNED_WITH_BAD_IO_PRIORITY: BUGCHECK_ERROR = BUGCHECK_ERROR(296u32);
pub const WORKER_THREAD_RETURNED_WITH_BAD_PAGING_IO_PRIORITY: BUGCHECK_ERROR = BUGCHECK_ERROR(297u32);
pub const MUI_NO_VALID_SYSTEM_LANGUAGE: BUGCHECK_ERROR = BUGCHECK_ERROR(298u32);
pub const FAULTY_HARDWARE_CORRUPTED_PAGE: BUGCHECK_ERROR = BUGCHECK_ERROR(299u32);
pub const EXFAT_FILE_SYSTEM: BUGCHECK_ERROR = BUGCHECK_ERROR(300u32);
pub const VOLSNAP_OVERLAPPED_TABLE_ACCESS: BUGCHECK_ERROR = BUGCHECK_ERROR(301u32);
pub const INVALID_MDL_RANGE: BUGCHECK_ERROR = BUGCHECK_ERROR(302u32);
pub const VHD_BOOT_INITIALIZATION_FAILED: BUGCHECK_ERROR = BUGCHECK_ERROR(303u32);
pub const DYNAMIC_ADD_PROCESSOR_MISMATCH: BUGCHECK_ERROR = BUGCHECK_ERROR(304u32);
pub const INVALID_EXTENDED_PROCESSOR_STATE: BUGCHECK_ERROR = BUGCHECK_ERROR(305u32);
pub const RESOURCE_OWNER_POINTER_INVALID: BUGCHECK_ERROR = BUGCHECK_ERROR(306u32);
pub const DPC_WATCHDOG_VIOLATION: BUGCHECK_ERROR = BUGCHECK_ERROR(307u32);
pub const DRIVE_EXTENDER: BUGCHECK_ERROR = BUGCHECK_ERROR(308u32);
pub const REGISTRY_FILTER_DRIVER_EXCEPTION: BUGCHECK_ERROR = BUGCHECK_ERROR(309u32);
pub const VHD_BOOT_HOST_VOLUME_NOT_ENOUGH_SPACE: BUGCHECK_ERROR = BUGCHECK_ERROR(310u32);
pub const WIN32K_HANDLE_MANAGER: BUGCHECK_ERROR = BUGCHECK_ERROR(311u32);
pub const GPIO_CONTROLLER_DRIVER_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(312u32);
pub const KERNEL_SECURITY_CHECK_FAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(313u32);
pub const KERNEL_MODE_HEAP_CORRUPTION: BUGCHECK_ERROR = BUGCHECK_ERROR(314u32);
pub const PASSIVE_INTERRUPT_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(315u32);
pub const INVALID_IO_BOOST_STATE: BUGCHECK_ERROR = BUGCHECK_ERROR(316u32);
pub const CRITICAL_INITIALIZATION_FAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(317u32);
pub const ERRATA_WORKAROUND_UNSUCCESSFUL: BUGCHECK_ERROR = BUGCHECK_ERROR(318u32);
pub const REGISTRY_CALLBACK_DRIVER_EXCEPTION: BUGCHECK_ERROR = BUGCHECK_ERROR(319u32);
pub const STORAGE_DEVICE_ABNORMALITY_DETECTED: BUGCHECK_ERROR = BUGCHECK_ERROR(320u32);
pub const VIDEO_ENGINE_TIMEOUT_DETECTED: BUGCHECK_ERROR = BUGCHECK_ERROR(321u32);
pub const VIDEO_TDR_APPLICATION_BLOCKED: BUGCHECK_ERROR = BUGCHECK_ERROR(322u32);
pub const PROCESSOR_DRIVER_INTERNAL: BUGCHECK_ERROR = BUGCHECK_ERROR(323u32);
pub const BUGCODE_USB3_DRIVER: BUGCHECK_ERROR = BUGCHECK_ERROR(324u32);
pub const SECURE_BOOT_VIOLATION: BUGCHECK_ERROR = BUGCHECK_ERROR(325u32);
pub const NDIS_NET_BUFFER_LIST_INFO_ILLEGALLY_TRANSFERRED: BUGCHECK_ERROR = BUGCHECK_ERROR(326u32);
pub const ABNORMAL_RESET_DETECTED: BUGCHECK_ERROR = BUGCHECK_ERROR(327u32);
pub const IO_OBJECT_INVALID: BUGCHECK_ERROR = BUGCHECK_ERROR(328u32);
pub const REFS_FILE_SYSTEM: BUGCHECK_ERROR = BUGCHECK_ERROR(329u32);
pub const KERNEL_WMI_INTERNAL: BUGCHECK_ERROR = BUGCHECK_ERROR(330u32);
pub const SOC_SUBSYSTEM_FAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(331u32);
pub const FATAL_ABNORMAL_RESET_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(332u32);
pub const EXCEPTION_SCOPE_INVALID: BUGCHECK_ERROR = BUGCHECK_ERROR(333u32);
pub const SOC_CRITICAL_DEVICE_REMOVED: BUGCHECK_ERROR = BUGCHECK_ERROR(334u32);
pub const PDC_WATCHDOG_TIMEOUT: BUGCHECK_ERROR = BUGCHECK_ERROR(335u32);
pub const TCPIP_AOAC_NIC_ACTIVE_REFERENCE_LEAK: BUGCHECK_ERROR = BUGCHECK_ERROR(336u32);
pub const UNSUPPORTED_INSTRUCTION_MODE: BUGCHECK_ERROR = BUGCHECK_ERROR(337u32);
pub const INVALID_PUSH_LOCK_FLAGS: BUGCHECK_ERROR = BUGCHECK_ERROR(338u32);
pub const KERNEL_LOCK_ENTRY_LEAKED_ON_THREAD_TERMINATION: BUGCHECK_ERROR = BUGCHECK_ERROR(339u32);
pub const UNEXPECTED_STORE_EXCEPTION: BUGCHECK_ERROR = BUGCHECK_ERROR(340u32);
pub const OS_DATA_TAMPERING: BUGCHECK_ERROR = BUGCHECK_ERROR(341u32);
pub const WINSOCK_DETECTED_HUNG_CLOSESOCKET_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(342u32);
pub const KERNEL_THREAD_PRIORITY_FLOOR_VIOLATION: BUGCHECK_ERROR = BUGCHECK_ERROR(343u32);
pub const ILLEGAL_IOMMU_PAGE_FAULT: BUGCHECK_ERROR = BUGCHECK_ERROR(344u32);
pub const HAL_ILLEGAL_IOMMU_PAGE_FAULT: BUGCHECK_ERROR = BUGCHECK_ERROR(345u32);
pub const SDBUS_INTERNAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(346u32);
pub const WORKER_THREAD_RETURNED_WITH_SYSTEM_PAGE_PRIORITY_ACTIVE: BUGCHECK_ERROR = BUGCHECK_ERROR(347u32);
pub const PDC_WATCHDOG_TIMEOUT_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(348u32);
pub const SOC_SUBSYSTEM_FAILURE_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(349u32);
pub const BUGCODE_NDIS_DRIVER_LIVE_DUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(350u32);
pub const CONNECTED_STANDBY_WATCHDOG_TIMEOUT_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(351u32);
pub const WIN32K_ATOMIC_CHECK_FAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(352u32);
pub const LIVE_SYSTEM_DUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(353u32);
pub const KERNEL_AUTO_BOOST_INVALID_LOCK_RELEASE: BUGCHECK_ERROR = BUGCHECK_ERROR(354u32);
pub const WORKER_THREAD_TEST_CONDITION: BUGCHECK_ERROR = BUGCHECK_ERROR(355u32);
pub const WIN32K_CRITICAL_FAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(356u32);
pub const CLUSTER_CSV_STATUS_IO_TIMEOUT_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(357u32);
pub const CLUSTER_RESOURCE_CALL_TIMEOUT_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(358u32);
pub const CLUSTER_CSV_SNAPSHOT_DEVICE_INFO_TIMEOUT_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(359u32);
pub const CLUSTER_CSV_STATE_TRANSITION_TIMEOUT_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(360u32);
pub const CLUSTER_CSV_VOLUME_ARRIVAL_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(361u32);
pub const CLUSTER_CSV_VOLUME_REMOVAL_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(362u32);
pub const CLUSTER_CSV_CLUSTER_WATCHDOG_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(363u32);
pub const INVALID_RUNDOWN_PROTECTION_FLAGS: BUGCHECK_ERROR = BUGCHECK_ERROR(364u32);
pub const INVALID_SLOT_ALLOCATOR_FLAGS: BUGCHECK_ERROR = BUGCHECK_ERROR(365u32);
pub const ERESOURCE_INVALID_RELEASE: BUGCHECK_ERROR = BUGCHECK_ERROR(366u32);
pub const CLUSTER_CSV_STATE_TRANSITION_INTERVAL_TIMEOUT_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(367u32);
pub const CLUSTER_CSV_CLUSSVC_DISCONNECT_WATCHDOG: BUGCHECK_ERROR = BUGCHECK_ERROR(368u32);
pub const CRYPTO_LIBRARY_INTERNAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(369u32);
pub const COREMSGCALL_INTERNAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(371u32);
pub const COREMSG_INTERNAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(372u32);
pub const PREVIOUS_FATAL_ABNORMAL_RESET_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(373u32);
pub const ELAM_DRIVER_DETECTED_FATAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(376u32);
pub const CLUSTER_CLUSPORT_STATUS_IO_TIMEOUT_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(377u32);
pub const PROFILER_CONFIGURATION_ILLEGAL: BUGCHECK_ERROR = BUGCHECK_ERROR(379u32);
pub const PDC_LOCK_WATCHDOG_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(380u32);
pub const PDC_UNEXPECTED_REVOCATION_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(381u32);
pub const MICROCODE_REVISION_MISMATCH: BUGCHECK_ERROR = BUGCHECK_ERROR(382u32);
pub const HYPERGUARD_INITIALIZATION_FAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(383u32);
pub const WVR_LIVEDUMP_REPLICATION_IOCONTEXT_TIMEOUT: BUGCHECK_ERROR = BUGCHECK_ERROR(384u32);
pub const WVR_LIVEDUMP_STATE_TRANSITION_TIMEOUT: BUGCHECK_ERROR = BUGCHECK_ERROR(385u32);
pub const WVR_LIVEDUMP_RECOVERY_IOCONTEXT_TIMEOUT: BUGCHECK_ERROR = BUGCHECK_ERROR(386u32);
pub const WVR_LIVEDUMP_APP_IO_TIMEOUT: BUGCHECK_ERROR = BUGCHECK_ERROR(387u32);
pub const WVR_LIVEDUMP_MANUALLY_INITIATED: BUGCHECK_ERROR = BUGCHECK_ERROR(388u32);
pub const WVR_LIVEDUMP_STATE_FAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(389u32);
pub const WVR_LIVEDUMP_CRITICAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(390u32);
pub const VIDEO_DWMINIT_TIMEOUT_FALLBACK_BDD: BUGCHECK_ERROR = BUGCHECK_ERROR(391u32);
pub const CLUSTER_CSVFS_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(392u32);
pub const BAD_OBJECT_HEADER: BUGCHECK_ERROR = BUGCHECK_ERROR(393u32);
pub const SILO_CORRUPT: BUGCHECK_ERROR = BUGCHECK_ERROR(394u32);
pub const SECURE_KERNEL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(395u32);
pub const HYPERGUARD_VIOLATION: BUGCHECK_ERROR = BUGCHECK_ERROR(396u32);
pub const SECURE_FAULT_UNHANDLED: BUGCHECK_ERROR = BUGCHECK_ERROR(397u32);
pub const KERNEL_PARTITION_REFERENCE_VIOLATION: BUGCHECK_ERROR = BUGCHECK_ERROR(398u32);
pub const SYNTHETIC_EXCEPTION_UNHANDLED: BUGCHECK_ERROR = BUGCHECK_ERROR(399u32);
pub const WIN32K_CRITICAL_FAILURE_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(400u32);
pub const PF_DETECTED_CORRUPTION: BUGCHECK_ERROR = BUGCHECK_ERROR(401u32);
pub const KERNEL_AUTO_BOOST_LOCK_ACQUISITION_WITH_RAISED_IRQL: BUGCHECK_ERROR = BUGCHECK_ERROR(402u32);
pub const VIDEO_DXGKRNL_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(403u32);
pub const KERNEL_STORAGE_SLOT_IN_USE: BUGCHECK_ERROR = BUGCHECK_ERROR(409u32);
pub const SMB_SERVER_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(405u32);
pub const LOADER_ROLLBACK_DETECTED: BUGCHECK_ERROR = BUGCHECK_ERROR(406u32);
pub const WIN32K_SECURITY_FAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(407u32);
pub const UFX_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(408u32);
pub const WORKER_THREAD_RETURNED_WHILE_ATTACHED_TO_SILO: BUGCHECK_ERROR = BUGCHECK_ERROR(410u32);
pub const TTM_FATAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(411u32);
pub const WIN32K_POWER_WATCHDOG_TIMEOUT: BUGCHECK_ERROR = BUGCHECK_ERROR(412u32);
pub const CLUSTER_SVHDX_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(413u32);
pub const BUGCODE_NETADAPTER_DRIVER: BUGCHECK_ERROR = BUGCHECK_ERROR(414u32);
pub const PDC_PRIVILEGE_CHECK_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(415u32);
pub const TTM_WATCHDOG_TIMEOUT: BUGCHECK_ERROR = BUGCHECK_ERROR(416u32);
pub const WIN32K_CALLOUT_WATCHDOG_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(417u32);
pub const WIN32K_CALLOUT_WATCHDOG_BUGCHECK: BUGCHECK_ERROR = BUGCHECK_ERROR(418u32);
pub const CALL_HAS_NOT_RETURNED_WATCHDOG_TIMEOUT_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(419u32);
pub const DRIPS_SW_HW_DIVERGENCE_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(420u32);
pub const USB_DRIPS_BLOCKER_SURPRISE_REMOVAL_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(421u32);
pub const BLUETOOTH_ERROR_RECOVERY_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(422u32);
pub const SMB_REDIRECTOR_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(423u32);
pub const VIDEO_DXGKRNL_BLACK_SCREEN_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(424u32);
pub const DIRECTED_FX_TRANSITION_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(425u32);
pub const EXCEPTION_ON_INVALID_STACK: BUGCHECK_ERROR = BUGCHECK_ERROR(426u32);
pub const UNWIND_ON_INVALID_STACK: BUGCHECK_ERROR = BUGCHECK_ERROR(427u32);
pub const VIDEO_MINIPORT_FAILED_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(432u32);
pub const VIDEO_MINIPORT_BLACK_SCREEN_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(440u32);
pub const DRIVER_VERIFIER_DETECTED_VIOLATION_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(452u32);
pub const IO_THREADPOOL_DEADLOCK_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(453u32);
pub const FAST_ERESOURCE_PRECONDITION_VIOLATION: BUGCHECK_ERROR = BUGCHECK_ERROR(454u32);
pub const STORE_DATA_STRUCTURE_CORRUPTION: BUGCHECK_ERROR = BUGCHECK_ERROR(455u32);
pub const MANUALLY_INITIATED_POWER_BUTTON_HOLD: BUGCHECK_ERROR = BUGCHECK_ERROR(456u32);
pub const USER_MODE_HEALTH_MONITOR_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(457u32);
pub const SYNTHETIC_WATCHDOG_TIMEOUT: BUGCHECK_ERROR = BUGCHECK_ERROR(458u32);
pub const INVALID_SILO_DETACH: BUGCHECK_ERROR = BUGCHECK_ERROR(459u32);
pub const EXRESOURCE_TIMEOUT_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(460u32);
pub const INVALID_CALLBACK_STACK_ADDRESS: BUGCHECK_ERROR = BUGCHECK_ERROR(461u32);
pub const INVALID_KERNEL_STACK_ADDRESS: BUGCHECK_ERROR = BUGCHECK_ERROR(462u32);
pub const HARDWARE_WATCHDOG_TIMEOUT: BUGCHECK_ERROR = BUGCHECK_ERROR(463u32);
pub const ACPI_FIRMWARE_WATCHDOG_TIMEOUT: BUGCHECK_ERROR = BUGCHECK_ERROR(464u32);
pub const TELEMETRY_ASSERTS_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(465u32);
pub const WORKER_THREAD_INVALID_STATE: BUGCHECK_ERROR = BUGCHECK_ERROR(466u32);
pub const WFP_INVALID_OPERATION: BUGCHECK_ERROR = BUGCHECK_ERROR(467u32);
pub const UCMUCSI_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(468u32);
pub const DRIVER_PNP_WATCHDOG: BUGCHECK_ERROR = BUGCHECK_ERROR(469u32);
pub const WORKER_THREAD_RETURNED_WITH_NON_DEFAULT_WORKLOAD_CLASS: BUGCHECK_ERROR = BUGCHECK_ERROR(470u32);
pub const EFS_FATAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(471u32);
pub const UCMUCSI_FAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(472u32);
pub const HAL_IOMMU_INTERNAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(473u32);
pub const HAL_BLOCKED_PROCESSOR_INTERNAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(474u32);
pub const IPI_WATCHDOG_TIMEOUT: BUGCHECK_ERROR = BUGCHECK_ERROR(475u32);
pub const DMA_COMMON_BUFFER_VECTOR_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(476u32);
pub const BUGCODE_MBBADAPTER_DRIVER: BUGCHECK_ERROR = BUGCHECK_ERROR(477u32);
pub const BUGCODE_WIFIADAPTER_DRIVER: BUGCHECK_ERROR = BUGCHECK_ERROR(478u32);
pub const PROCESSOR_START_TIMEOUT: BUGCHECK_ERROR = BUGCHECK_ERROR(479u32);
pub const INVALID_ALTERNATE_SYSTEM_CALL_HANDLER_REGISTRATION: BUGCHECK_ERROR = BUGCHECK_ERROR(480u32);
pub const DEVICE_DIAGNOSTIC_LOG_LIVEDUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(481u32);
pub const AZURE_DEVICE_FW_DUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(482u32);
pub const BREAKAWAY_CABLE_TRANSITION: BUGCHECK_ERROR = BUGCHECK_ERROR(483u32);
pub const VIDEO_DXGKRNL_SYSMM_FATAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(484u32);
pub const DRIVER_VERIFIER_TRACKING_LIVE_DUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(485u32);
pub const CRASHDUMP_WATCHDOG_TIMEOUT: BUGCHECK_ERROR = BUGCHECK_ERROR(486u32);
pub const REGISTRY_LIVE_DUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(487u32);
pub const INVALID_THREAD_AFFINITY_STATE: BUGCHECK_ERROR = BUGCHECK_ERROR(488u32);
pub const ILLEGAL_ATS_INITIALIZATION: BUGCHECK_ERROR = BUGCHECK_ERROR(489u32);
pub const SECURE_PCI_CONFIG_SPACE_ACCESS_VIOLATION: BUGCHECK_ERROR = BUGCHECK_ERROR(490u32);
pub const DAM_WATCHDOG_TIMEOUT: BUGCHECK_ERROR = BUGCHECK_ERROR(491u32);
pub const XBOX_VMCTRL_CS_TIMEOUT: BUGCHECK_ERROR = BUGCHECK_ERROR(854u32);
pub const XBOX_CORRUPTED_IMAGE: BUGCHECK_ERROR = BUGCHECK_ERROR(855u32);
pub const XBOX_INVERTED_FUNCTION_TABLE_OVERFLOW: BUGCHECK_ERROR = BUGCHECK_ERROR(856u32);
pub const XBOX_CORRUPTED_IMAGE_BASE: BUGCHECK_ERROR = BUGCHECK_ERROR(857u32);
pub const XBOX_XDS_WATCHDOG_TIMEOUT: BUGCHECK_ERROR = BUGCHECK_ERROR(858u32);
pub const XBOX_SHUTDOWN_WATCHDOG_TIMEOUT: BUGCHECK_ERROR = BUGCHECK_ERROR(859u32);
pub const XBOX_360_SYSTEM_CRASH: BUGCHECK_ERROR = BUGCHECK_ERROR(864u32);
pub const XBOX_360_SYSTEM_CRASH_RESERVED: BUGCHECK_ERROR = BUGCHECK_ERROR(1056u32);
pub const XBOX_SECURITY_FAILUE: BUGCHECK_ERROR = BUGCHECK_ERROR(1057u32);
pub const KERNEL_CFG_INIT_FAILURE: BUGCHECK_ERROR = BUGCHECK_ERROR(1058u32);
pub const MANUALLY_INITIATED_POWER_BUTTON_HOLD_LIVE_DUMP: BUGCHECK_ERROR = BUGCHECK_ERROR(4552u32);
pub const HYPERVISOR_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(131073u32);
pub const WINLOGON_FATAL_ERROR: BUGCHECK_ERROR = BUGCHECK_ERROR(3221226010u32);
pub const MANUALLY_INITIATED_CRASH1: BUGCHECK_ERROR = BUGCHECK_ERROR(3735936685u32);
pub const BUGCHECK_CONTEXT_MODIFIER: BUGCHECK_ERROR = BUGCHECK_ERROR(2147483648u32);
impl ::std::convert::From<u32> for BUGCHECK_ERROR {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for BUGCHECK_ERROR {
    type Abi = Self;
}
impl ::std::ops::BitOr for BUGCHECK_ERROR {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for BUGCHECK_ERROR {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for BUGCHECK_ERROR {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for BUGCHECK_ERROR {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for BUGCHECK_ERROR {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn Beep(dwfreq: u32, dwduration: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn Beep(dwfreq: u32, dwduration: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(Beep(::std::mem::transmute(dwfreq), ::std::mem::transmute(dwduration)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn BindImage<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(imagename: Param0, dllpath: Param1, symbolpath: Param2) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn BindImage(imagename: super::super::super::Foundation::PSTR, dllpath: super::super::super::Foundation::PSTR, symbolpath: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(BindImage(imagename.into_param().abi(), dllpath.into_param().abi(), symbolpath.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn BindImageEx<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(flags: u32, imagename: Param1, dllpath: Param2, symbolpath: Param3, statusroutine: ::std::option::Option<PIMAGEHLP_STATUS_ROUTINE>) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn BindImageEx(flags: u32, imagename: super::super::super::Foundation::PSTR, dllpath: super::super::super::Foundation::PSTR, symbolpath: super::super::super::Foundation::PSTR, statusroutine: ::windows::runtime::RawPtr) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(BindImageEx(::std::mem::transmute(flags), imagename.into_param().abi(), dllpath.into_param().abi(), symbolpath.into_param().abi(), ::std::mem::transmute(statusroutine)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CANNOT_ALLOCATE_MEMORY: u32 = 9u32;
pub const CATID_ActiveScript: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4038566305, 38983, 4559, [143, 32, 0, 128, 95, 44, 208, 100]);
pub const CATID_ActiveScriptAuthor: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(183380626, 48315, 4560, [140, 114, 0, 192, 79, 194, 176, 133]);
pub const CATID_ActiveScriptEncode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4038566307, 38983, 4559, [143, 32, 0, 128, 95, 44, 208, 100]);
pub const CATID_ActiveScriptParse: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4038566306, 38983, 4559, [143, 32, 0, 128, 95, 44, 208, 100]);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CBA_CHECK_ARM_MACHINE_THUMB_TYPE_OVERRIDE: u32 = 2147483648u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CBA_CHECK_ENGOPT_DISALLOW_NETWORK_PATHS: u32 = 1879048192u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CBA_DEBUG_INFO: u32 = 268435456u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CBA_DEFERRED_SYMBOL_LOAD_CANCEL: u32 = 7u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CBA_DEFERRED_SYMBOL_LOAD_COMPLETE: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CBA_DEFERRED_SYMBOL_LOAD_FAILURE: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CBA_DEFERRED_SYMBOL_LOAD_PARTIAL: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CBA_DEFERRED_SYMBOL_LOAD_START: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CBA_DUPLICATE_SYMBOL: u32 = 5u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CBA_ENGINE_PRESENT: u32 = 1610612736u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CBA_EVENT: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CBA_MAP_JIT_SYMBOL: u32 = 2684354560u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CBA_READ_MEMORY: u32 = 6u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CBA_SET_OPTIONS: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CBA_SRCSRV_EVENT: u32 = 1073741824u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CBA_SRCSRV_INFO: u32 = 536870912u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CBA_SYMBOLS_UNLOADED: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CBA_UPDATE_STATUS_BAR: u32 = 1342177280u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CBA_XML_LOG: u32 = 2415919104u32;
pub const CDebugDocumentHelper: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2209922214, 26748, 4560, [164, 5, 0, 170, 0, 96, 39, 92]);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CERT_PE_IMAGE_DIGEST_ALL_IMPORT_INFO: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CERT_PE_IMAGE_DIGEST_DEBUG_INFO: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CERT_PE_IMAGE_DIGEST_NON_PE_INFO: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CERT_PE_IMAGE_DIGEST_RESOURCES: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CERT_SECTION_TYPE_ANY: u32 = 255u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CHECKSUM_MAPVIEW_FAILURE: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CHECKSUM_MAP_FAILURE: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CHECKSUM_OPEN_FAILURE: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CHECKSUM_SUCCESS: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CHECKSUM_UNICODE_FAILURE: u32 = 4u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_System_SystemServices")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_SystemServices`*"]
pub struct CONTEXT {
    pub ContextFlags: u32,
    pub Cpsr: u32,
    pub Anonymous: CONTEXT_0,
    pub Sp: u64,
    pub Pc: u64,
    pub V: [super::super::SystemServices::ARM64_NT_NEON128; 32],
    pub Fpcr: u32,
    pub Fpsr: u32,
    pub Bcr: [u32; 8],
    pub Bvr: [u64; 8],
    pub Wcr: [u32; 2],
    pub Wvr: [u64; 2],
}
#[cfg(feature = "Win32_System_SystemServices")]
impl CONTEXT {}
#[cfg(feature = "Win32_System_SystemServices")]
impl ::std::default::Default for CONTEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_SystemServices")]
impl ::std::cmp::PartialEq for CONTEXT {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_System_SystemServices")]
impl ::std::cmp::Eq for CONTEXT {}
#[cfg(feature = "Win32_System_SystemServices")]
unsafe impl ::windows::runtime::Abi for CONTEXT {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union CONTEXT_0 {
    pub Anonymous: CONTEXT_0_0,
    pub X: [u64; 31],
}
impl CONTEXT_0 {}
impl ::std::default::Default for CONTEXT_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CONTEXT_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CONTEXT_0 {}
unsafe impl ::windows::runtime::Abi for CONTEXT_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct CONTEXT_0_0 {
    pub X0: u64,
    pub X1: u64,
    pub X2: u64,
    pub X3: u64,
    pub X4: u64,
    pub X5: u64,
    pub X6: u64,
    pub X7: u64,
    pub X8: u64,
    pub X9: u64,
    pub X10: u64,
    pub X11: u64,
    pub X12: u64,
    pub X13: u64,
    pub X14: u64,
    pub X15: u64,
    pub X16: u64,
    pub X17: u64,
    pub X18: u64,
    pub X19: u64,
    pub X20: u64,
    pub X21: u64,
    pub X22: u64,
    pub X23: u64,
    pub X24: u64,
    pub X25: u64,
    pub X26: u64,
    pub X27: u64,
    pub X28: u64,
    pub Fp: u64,
    pub Lr: u64,
}
impl CONTEXT_0_0 {}
impl ::std::default::Default for CONTEXT_0_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CONTEXT_0_0 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_Anonymous_e__Struct")
            .field("X0", &self.X0)
            .field("X1", &self.X1)
            .field("X2", &self.X2)
            .field("X3", &self.X3)
            .field("X4", &self.X4)
            .field("X5", &self.X5)
            .field("X6", &self.X6)
            .field("X7", &self.X7)
            .field("X8", &self.X8)
            .field("X9", &self.X9)
            .field("X10", &self.X10)
            .field("X11", &self.X11)
            .field("X12", &self.X12)
            .field("X13", &self.X13)
            .field("X14", &self.X14)
            .field("X15", &self.X15)
            .field("X16", &self.X16)
            .field("X17", &self.X17)
            .field("X18", &self.X18)
            .field("X19", &self.X19)
            .field("X20", &self.X20)
            .field("X21", &self.X21)
            .field("X22", &self.X22)
            .field("X23", &self.X23)
            .field("X24", &self.X24)
            .field("X25", &self.X25)
            .field("X26", &self.X26)
            .field("X27", &self.X27)
            .field("X28", &self.X28)
            .field("Fp", &self.Fp)
            .field("Lr", &self.Lr)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CONTEXT_0_0 {
    fn eq(&self, other: &Self) -> bool {
        self.X0 == other.X0
            && self.X1 == other.X1
            && self.X2 == other.X2
            && self.X3 == other.X3
            && self.X4 == other.X4
            && self.X5 == other.X5
            && self.X6 == other.X6
            && self.X7 == other.X7
            && self.X8 == other.X8
            && self.X9 == other.X9
            && self.X10 == other.X10
            && self.X11 == other.X11
            && self.X12 == other.X12
            && self.X13 == other.X13
            && self.X14 == other.X14
            && self.X15 == other.X15
            && self.X16 == other.X16
            && self.X17 == other.X17
            && self.X18 == other.X18
            && self.X19 == other.X19
            && self.X20 == other.X20
            && self.X21 == other.X21
            && self.X22 == other.X22
            && self.X23 == other.X23
            && self.X24 == other.X24
            && self.X25 == other.X25
            && self.X26 == other.X26
            && self.X27 == other.X27
            && self.X28 == other.X28
            && self.Fp == other.Fp
            && self.Lr == other.Lr
    }
}
impl ::std::cmp::Eq for CONTEXT_0_0 {}
unsafe impl ::windows::runtime::Abi for CONTEXT_0_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union CPU_INFORMATION {
    pub X86CpuInfo: CPU_INFORMATION_1,
    pub OtherCpuInfo: CPU_INFORMATION_0,
}
impl CPU_INFORMATION {}
impl ::std::default::Default for CPU_INFORMATION {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CPU_INFORMATION {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CPU_INFORMATION {}
unsafe impl ::windows::runtime::Abi for CPU_INFORMATION {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct CPU_INFORMATION_0 {
    pub ProcessorFeatures: [u64; 2],
}
impl CPU_INFORMATION_0 {}
impl ::std::default::Default for CPU_INFORMATION_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CPU_INFORMATION_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CPU_INFORMATION_0 {}
unsafe impl ::windows::runtime::Abi for CPU_INFORMATION_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct CPU_INFORMATION_1 {
    pub VendorId: [u32; 3],
    pub VersionInformation: u32,
    pub FeatureInformation: u32,
    pub AMDExtendedCpuFeatures: u32,
}
impl CPU_INFORMATION_1 {}
impl ::std::default::Default for CPU_INFORMATION_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CPU_INFORMATION_1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_X86CpuInfo_e__Struct").field("VendorId", &self.VendorId).field("VersionInformation", &self.VersionInformation).field("FeatureInformation", &self.FeatureInformation).field("AMDExtendedCpuFeatures", &self.AMDExtendedCpuFeatures).finish()
    }
}
impl ::std::cmp::PartialEq for CPU_INFORMATION_1 {
    fn eq(&self, other: &Self) -> bool {
        self.VendorId == other.VendorId && self.VersionInformation == other.VersionInformation && self.FeatureInformation == other.FeatureInformation && self.AMDExtendedCpuFeatures == other.AMDExtendedCpuFeatures
    }
}
impl ::std::cmp::Eq for CPU_INFORMATION_1 {}
unsafe impl ::windows::runtime::Abi for CPU_INFORMATION_1 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
pub struct CREATE_PROCESS_DEBUG_INFO {
    pub hFile: super::super::super::Foundation::HANDLE,
    pub hProcess: super::super::super::Foundation::HANDLE,
    pub hThread: super::super::super::Foundation::HANDLE,
    pub lpBaseOfImage: *mut ::std::ffi::c_void,
    pub dwDebugInfoFileOffset: u32,
    pub nDebugInfoSize: u32,
    pub lpThreadLocalBase: *mut ::std::ffi::c_void,
    pub lpStartAddress: ::std::option::Option<super::super::SystemServices::LPTHREAD_START_ROUTINE>,
    pub lpImageName: *mut ::std::ffi::c_void,
    pub fUnicode: u16,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl CREATE_PROCESS_DEBUG_INFO {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::default::Default for CREATE_PROCESS_DEBUG_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::fmt::Debug for CREATE_PROCESS_DEBUG_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CREATE_PROCESS_DEBUG_INFO")
            .field("hFile", &self.hFile)
            .field("hProcess", &self.hProcess)
            .field("hThread", &self.hThread)
            .field("lpBaseOfImage", &self.lpBaseOfImage)
            .field("dwDebugInfoFileOffset", &self.dwDebugInfoFileOffset)
            .field("nDebugInfoSize", &self.nDebugInfoSize)
            .field("lpThreadLocalBase", &self.lpThreadLocalBase)
            .field("lpImageName", &self.lpImageName)
            .field("fUnicode", &self.fUnicode)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::PartialEq for CREATE_PROCESS_DEBUG_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.hFile == other.hFile && self.hProcess == other.hProcess && self.hThread == other.hThread && self.lpBaseOfImage == other.lpBaseOfImage && self.dwDebugInfoFileOffset == other.dwDebugInfoFileOffset && self.nDebugInfoSize == other.nDebugInfoSize && self.lpThreadLocalBase == other.lpThreadLocalBase && self.lpStartAddress.map(|f| f as usize) == other.lpStartAddress.map(|f| f as usize) && self.lpImageName == other.lpImageName && self.fUnicode == other.fUnicode
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::Eq for CREATE_PROCESS_DEBUG_INFO {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
unsafe impl ::windows::runtime::Abi for CREATE_PROCESS_DEBUG_INFO {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
pub struct CREATE_THREAD_DEBUG_INFO {
    pub hThread: super::super::super::Foundation::HANDLE,
    pub lpThreadLocalBase: *mut ::std::ffi::c_void,
    pub lpStartAddress: ::std::option::Option<super::super::SystemServices::LPTHREAD_START_ROUTINE>,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl CREATE_THREAD_DEBUG_INFO {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::default::Default for CREATE_THREAD_DEBUG_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::fmt::Debug for CREATE_THREAD_DEBUG_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CREATE_THREAD_DEBUG_INFO").field("hThread", &self.hThread).field("lpThreadLocalBase", &self.lpThreadLocalBase).finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::PartialEq for CREATE_THREAD_DEBUG_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.hThread == other.hThread && self.lpThreadLocalBase == other.lpThreadLocalBase && self.lpStartAddress.map(|f| f as usize) == other.lpStartAddress.map(|f| f as usize)
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::Eq for CREATE_THREAD_DEBUG_INFO {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
unsafe impl ::windows::runtime::Abi for CREATE_THREAD_DEBUG_INFO {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CROSS_PLATFORM_MAXIMUM_PROCESSORS: u32 = 2048u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const CURRENT_KD_SECONDARY_VERSION: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct CallingConventionKind(pub i32);
pub const CallingConventionUnknown: CallingConventionKind = CallingConventionKind(0i32);
pub const CallingConventionCDecl: CallingConventionKind = CallingConventionKind(1i32);
pub const CallingConventionFastCall: CallingConventionKind = CallingConventionKind(2i32);
pub const CallingConventionStdCall: CallingConventionKind = CallingConventionKind(3i32);
pub const CallingConventionSysCall: CallingConventionKind = CallingConventionKind(4i32);
pub const CallingConventionThisCall: CallingConventionKind = CallingConventionKind(5i32);
impl ::std::convert::From<i32> for CallingConventionKind {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CallingConventionKind {
    type Abi = Self;
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn CheckRemoteDebuggerPresent<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, pbdebuggerpresent: *mut super::super::super::Foundation::BOOL) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CheckRemoteDebuggerPresent(hprocess: super::super::super::Foundation::HANDLE, pbdebuggerpresent: *mut super::super::super::Foundation::BOOL) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(CheckRemoteDebuggerPresent(hprocess.into_param().abi(), ::std::mem::transmute(pbdebuggerpresent)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn CheckSumMappedFile(baseaddress: *const ::std::ffi::c_void, filelength: u32, headersum: *mut u32, checksum: *mut u32) -> *mut IMAGE_NT_HEADERS64 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CheckSumMappedFile(baseaddress: *const ::std::ffi::c_void, filelength: u32, headersum: *mut u32, checksum: *mut u32) -> *mut IMAGE_NT_HEADERS64;
        }
        ::std::mem::transmute(CheckSumMappedFile(::std::mem::transmute(baseaddress), ::std::mem::transmute(filelength), ::std::mem::transmute(headersum), ::std::mem::transmute(checksum)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn CloseThreadWaitChainSession(wcthandle: *const ::std::ffi::c_void) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CloseThreadWaitChainSession(wcthandle: *const ::std::ffi::c_void);
        }
        ::std::mem::transmute(CloseThreadWaitChainSession(::std::mem::transmute(wcthandle)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn ContinueDebugEvent(dwprocessid: u32, dwthreadid: u32, dwcontinuestatus: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ContinueDebugEvent(dwprocessid: u32, dwthreadid: u32, dwcontinuestatus: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(ContinueDebugEvent(::std::mem::transmute(dwprocessid), ::std::mem::transmute(dwthreadid), ::std::mem::transmute(dwcontinuestatus)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn CopyContext(destination: *mut CONTEXT, contextflags: u32, source: *const CONTEXT) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CopyContext(destination: *mut CONTEXT, contextflags: u32, source: *const CONTEXT) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(CopyContext(::std::mem::transmute(destination), ::std::mem::transmute(contextflags), ::std::mem::transmute(source)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn CreateDataModelManager<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHost>>(debughost: Param0) -> ::windows::runtime::Result<IDataModelManager> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CreateDataModelManager(debughost: ::windows::runtime::RawPtr, manager: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
        }
        let mut result__: <IDataModelManager as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        CreateDataModelManager(debughost.into_param().abi(), &mut result__).from_abi::<IDataModelManager>(result__)
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct DBGHELP_DATA_REPORT_STRUCT {
    pub pBinPathNonExist: super::super::super::Foundation::PWSTR,
    pub pSymbolPathNonExist: super::super::super::Foundation::PWSTR,
}
#[cfg(feature = "Win32_Foundation")]
impl DBGHELP_DATA_REPORT_STRUCT {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for DBGHELP_DATA_REPORT_STRUCT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for DBGHELP_DATA_REPORT_STRUCT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DBGHELP_DATA_REPORT_STRUCT").field("pBinPathNonExist", &self.pBinPathNonExist).field("pSymbolPathNonExist", &self.pSymbolPathNonExist).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for DBGHELP_DATA_REPORT_STRUCT {
    fn eq(&self, other: &Self) -> bool {
        self.pBinPathNonExist == other.pBinPathNonExist && self.pSymbolPathNonExist == other.pSymbolPathNonExist
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for DBGHELP_DATA_REPORT_STRUCT {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DBGHELP_DATA_REPORT_STRUCT {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_System_Kernel")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_Kernel`*"]
pub struct DBGKD_DEBUG_DATA_HEADER32 {
    pub List: super::super::Kernel::LIST_ENTRY32,
    pub OwnerTag: u32,
    pub Size: u32,
}
#[cfg(feature = "Win32_System_Kernel")]
impl DBGKD_DEBUG_DATA_HEADER32 {}
#[cfg(feature = "Win32_System_Kernel")]
impl ::std::default::Default for DBGKD_DEBUG_DATA_HEADER32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_Kernel")]
impl ::std::fmt::Debug for DBGKD_DEBUG_DATA_HEADER32 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DBGKD_DEBUG_DATA_HEADER32").field("List", &self.List).field("OwnerTag", &self.OwnerTag).field("Size", &self.Size).finish()
    }
}
#[cfg(feature = "Win32_System_Kernel")]
impl ::std::cmp::PartialEq for DBGKD_DEBUG_DATA_HEADER32 {
    fn eq(&self, other: &Self) -> bool {
        self.List == other.List && self.OwnerTag == other.OwnerTag && self.Size == other.Size
    }
}
#[cfg(feature = "Win32_System_Kernel")]
impl ::std::cmp::Eq for DBGKD_DEBUG_DATA_HEADER32 {}
#[cfg(feature = "Win32_System_Kernel")]
unsafe impl ::windows::runtime::Abi for DBGKD_DEBUG_DATA_HEADER32 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_System_Kernel")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_Kernel`*"]
pub struct DBGKD_DEBUG_DATA_HEADER64 {
    pub List: super::super::Kernel::LIST_ENTRY64,
    pub OwnerTag: u32,
    pub Size: u32,
}
#[cfg(feature = "Win32_System_Kernel")]
impl DBGKD_DEBUG_DATA_HEADER64 {}
#[cfg(feature = "Win32_System_Kernel")]
impl ::std::default::Default for DBGKD_DEBUG_DATA_HEADER64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_Kernel")]
impl ::std::fmt::Debug for DBGKD_DEBUG_DATA_HEADER64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DBGKD_DEBUG_DATA_HEADER64").field("List", &self.List).field("OwnerTag", &self.OwnerTag).field("Size", &self.Size).finish()
    }
}
#[cfg(feature = "Win32_System_Kernel")]
impl ::std::cmp::PartialEq for DBGKD_DEBUG_DATA_HEADER64 {
    fn eq(&self, other: &Self) -> bool {
        self.List == other.List && self.OwnerTag == other.OwnerTag && self.Size == other.Size
    }
}
#[cfg(feature = "Win32_System_Kernel")]
impl ::std::cmp::Eq for DBGKD_DEBUG_DATA_HEADER64 {}
#[cfg(feature = "Win32_System_Kernel")]
unsafe impl ::windows::runtime::Abi for DBGKD_DEBUG_DATA_HEADER64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DBGKD_GET_VERSION32 {
    pub MajorVersion: u16,
    pub MinorVersion: u16,
    pub ProtocolVersion: u16,
    pub Flags: u16,
    pub KernBase: u32,
    pub PsLoadedModuleList: u32,
    pub MachineType: u16,
    pub ThCallbackStack: u16,
    pub NextCallback: u16,
    pub FramePointer: u16,
    pub KiCallUserMode: u32,
    pub KeUserCallbackDispatcher: u32,
    pub BreakpointWithStatus: u32,
    pub DebuggerDataList: u32,
}
impl DBGKD_GET_VERSION32 {}
impl ::std::default::Default for DBGKD_GET_VERSION32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DBGKD_GET_VERSION32 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DBGKD_GET_VERSION32")
            .field("MajorVersion", &self.MajorVersion)
            .field("MinorVersion", &self.MinorVersion)
            .field("ProtocolVersion", &self.ProtocolVersion)
            .field("Flags", &self.Flags)
            .field("KernBase", &self.KernBase)
            .field("PsLoadedModuleList", &self.PsLoadedModuleList)
            .field("MachineType", &self.MachineType)
            .field("ThCallbackStack", &self.ThCallbackStack)
            .field("NextCallback", &self.NextCallback)
            .field("FramePointer", &self.FramePointer)
            .field("KiCallUserMode", &self.KiCallUserMode)
            .field("KeUserCallbackDispatcher", &self.KeUserCallbackDispatcher)
            .field("BreakpointWithStatus", &self.BreakpointWithStatus)
            .field("DebuggerDataList", &self.DebuggerDataList)
            .finish()
    }
}
impl ::std::cmp::PartialEq for DBGKD_GET_VERSION32 {
    fn eq(&self, other: &Self) -> bool {
        self.MajorVersion == other.MajorVersion
            && self.MinorVersion == other.MinorVersion
            && self.ProtocolVersion == other.ProtocolVersion
            && self.Flags == other.Flags
            && self.KernBase == other.KernBase
            && self.PsLoadedModuleList == other.PsLoadedModuleList
            && self.MachineType == other.MachineType
            && self.ThCallbackStack == other.ThCallbackStack
            && self.NextCallback == other.NextCallback
            && self.FramePointer == other.FramePointer
            && self.KiCallUserMode == other.KiCallUserMode
            && self.KeUserCallbackDispatcher == other.KeUserCallbackDispatcher
            && self.BreakpointWithStatus == other.BreakpointWithStatus
            && self.DebuggerDataList == other.DebuggerDataList
    }
}
impl ::std::cmp::Eq for DBGKD_GET_VERSION32 {}
unsafe impl ::windows::runtime::Abi for DBGKD_GET_VERSION32 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DBGKD_GET_VERSION64 {
    pub MajorVersion: u16,
    pub MinorVersion: u16,
    pub ProtocolVersion: u8,
    pub KdSecondaryVersion: u8,
    pub Flags: u16,
    pub MachineType: u16,
    pub MaxPacketType: u8,
    pub MaxStateChange: u8,
    pub MaxManipulate: u8,
    pub Simulation: u8,
    pub Unused: [u16; 1],
    pub KernBase: u64,
    pub PsLoadedModuleList: u64,
    pub DebuggerDataList: u64,
}
impl DBGKD_GET_VERSION64 {}
impl ::std::default::Default for DBGKD_GET_VERSION64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DBGKD_GET_VERSION64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DBGKD_GET_VERSION64")
            .field("MajorVersion", &self.MajorVersion)
            .field("MinorVersion", &self.MinorVersion)
            .field("ProtocolVersion", &self.ProtocolVersion)
            .field("KdSecondaryVersion", &self.KdSecondaryVersion)
            .field("Flags", &self.Flags)
            .field("MachineType", &self.MachineType)
            .field("MaxPacketType", &self.MaxPacketType)
            .field("MaxStateChange", &self.MaxStateChange)
            .field("MaxManipulate", &self.MaxManipulate)
            .field("Simulation", &self.Simulation)
            .field("Unused", &self.Unused)
            .field("KernBase", &self.KernBase)
            .field("PsLoadedModuleList", &self.PsLoadedModuleList)
            .field("DebuggerDataList", &self.DebuggerDataList)
            .finish()
    }
}
impl ::std::cmp::PartialEq for DBGKD_GET_VERSION64 {
    fn eq(&self, other: &Self) -> bool {
        self.MajorVersion == other.MajorVersion
            && self.MinorVersion == other.MinorVersion
            && self.ProtocolVersion == other.ProtocolVersion
            && self.KdSecondaryVersion == other.KdSecondaryVersion
            && self.Flags == other.Flags
            && self.MachineType == other.MachineType
            && self.MaxPacketType == other.MaxPacketType
            && self.MaxStateChange == other.MaxStateChange
            && self.MaxManipulate == other.MaxManipulate
            && self.Simulation == other.Simulation
            && self.Unused == other.Unused
            && self.KernBase == other.KernBase
            && self.PsLoadedModuleList == other.PsLoadedModuleList
            && self.DebuggerDataList == other.DebuggerDataList
    }
}
impl ::std::cmp::Eq for DBGKD_GET_VERSION64 {}
unsafe impl ::windows::runtime::Abi for DBGKD_GET_VERSION64 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct DBGKD_MAJOR_TYPES(pub i32);
pub const DBGKD_MAJOR_NT: DBGKD_MAJOR_TYPES = DBGKD_MAJOR_TYPES(0i32);
pub const DBGKD_MAJOR_XBOX: DBGKD_MAJOR_TYPES = DBGKD_MAJOR_TYPES(1i32);
pub const DBGKD_MAJOR_BIG: DBGKD_MAJOR_TYPES = DBGKD_MAJOR_TYPES(2i32);
pub const DBGKD_MAJOR_EXDI: DBGKD_MAJOR_TYPES = DBGKD_MAJOR_TYPES(3i32);
pub const DBGKD_MAJOR_NTBD: DBGKD_MAJOR_TYPES = DBGKD_MAJOR_TYPES(4i32);
pub const DBGKD_MAJOR_EFI: DBGKD_MAJOR_TYPES = DBGKD_MAJOR_TYPES(5i32);
pub const DBGKD_MAJOR_TNT: DBGKD_MAJOR_TYPES = DBGKD_MAJOR_TYPES(6i32);
pub const DBGKD_MAJOR_SINGULARITY: DBGKD_MAJOR_TYPES = DBGKD_MAJOR_TYPES(7i32);
pub const DBGKD_MAJOR_HYPERVISOR: DBGKD_MAJOR_TYPES = DBGKD_MAJOR_TYPES(8i32);
pub const DBGKD_MAJOR_MIDORI: DBGKD_MAJOR_TYPES = DBGKD_MAJOR_TYPES(9i32);
pub const DBGKD_MAJOR_CE: DBGKD_MAJOR_TYPES = DBGKD_MAJOR_TYPES(10i32);
pub const DBGKD_MAJOR_COUNT: DBGKD_MAJOR_TYPES = DBGKD_MAJOR_TYPES(11i32);
impl ::std::convert::From<i32> for DBGKD_MAJOR_TYPES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DBGKD_MAJOR_TYPES {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBGKD_SIMULATION_EXDI: i32 = 1i32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBGKD_SIMULATION_NONE: i32 = 0i32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBGKD_VERS_FLAG_DATA: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBGKD_VERS_FLAG_HAL_IN_NTOS: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBGKD_VERS_FLAG_HSS: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBGKD_VERS_FLAG_MP: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBGKD_VERS_FLAG_NOMM: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBGKD_VERS_FLAG_PARTITIONS: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBGKD_VERS_FLAG_PTR64: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct DBGPROP_ATTRIB_FLAGS(pub u32);
pub const DBGPROP_ATTRIB_NO_ATTRIB: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(0u32);
pub const DBGPROP_ATTRIB_VALUE_IS_INVALID: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(8u32);
pub const DBGPROP_ATTRIB_VALUE_IS_EXPANDABLE: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(16u32);
pub const DBGPROP_ATTRIB_VALUE_IS_FAKE: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(32u32);
pub const DBGPROP_ATTRIB_VALUE_IS_METHOD: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(256u32);
pub const DBGPROP_ATTRIB_VALUE_IS_EVENT: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(512u32);
pub const DBGPROP_ATTRIB_VALUE_IS_RAW_STRING: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(1024u32);
pub const DBGPROP_ATTRIB_VALUE_READONLY: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(2048u32);
pub const DBGPROP_ATTRIB_ACCESS_PUBLIC: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(4096u32);
pub const DBGPROP_ATTRIB_ACCESS_PRIVATE: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(8192u32);
pub const DBGPROP_ATTRIB_ACCESS_PROTECTED: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(16384u32);
pub const DBGPROP_ATTRIB_ACCESS_FINAL: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(32768u32);
pub const DBGPROP_ATTRIB_STORAGE_GLOBAL: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(65536u32);
pub const DBGPROP_ATTRIB_STORAGE_STATIC: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(131072u32);
pub const DBGPROP_ATTRIB_STORAGE_FIELD: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(262144u32);
pub const DBGPROP_ATTRIB_STORAGE_VIRTUAL: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(524288u32);
pub const DBGPROP_ATTRIB_TYPE_IS_CONSTANT: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(1048576u32);
pub const DBGPROP_ATTRIB_TYPE_IS_SYNCHRONIZED: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(2097152u32);
pub const DBGPROP_ATTRIB_TYPE_IS_VOLATILE: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(4194304u32);
pub const DBGPROP_ATTRIB_HAS_EXTENDED_ATTRIBS: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(8388608u32);
pub const DBGPROP_ATTRIB_FRAME_INTRYBLOCK: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(16777216u32);
pub const DBGPROP_ATTRIB_FRAME_INCATCHBLOCK: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(33554432u32);
pub const DBGPROP_ATTRIB_FRAME_INFINALLYBLOCK: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(67108864u32);
pub const DBGPROP_ATTRIB_VALUE_IS_RETURN_VALUE: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(134217728u32);
pub const DBGPROP_ATTRIB_VALUE_PENDING_MUTATION: DBGPROP_ATTRIB_FLAGS = DBGPROP_ATTRIB_FLAGS(268435456u32);
impl ::std::convert::From<u32> for DBGPROP_ATTRIB_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DBGPROP_ATTRIB_FLAGS {
    type Abi = Self;
}
impl ::std::ops::BitOr for DBGPROP_ATTRIB_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for DBGPROP_ATTRIB_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for DBGPROP_ATTRIB_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for DBGPROP_ATTRIB_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for DBGPROP_ATTRIB_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct DBGPROP_INFO(pub u32);
pub const DBGPROP_INFO_NAME: DBGPROP_INFO = DBGPROP_INFO(1u32);
pub const DBGPROP_INFO_TYPE: DBGPROP_INFO = DBGPROP_INFO(2u32);
pub const DBGPROP_INFO_VALUE: DBGPROP_INFO = DBGPROP_INFO(4u32);
pub const DBGPROP_INFO_FULLNAME: DBGPROP_INFO = DBGPROP_INFO(32u32);
pub const DBGPROP_INFO_ATTRIBUTES: DBGPROP_INFO = DBGPROP_INFO(8u32);
pub const DBGPROP_INFO_DEBUGPROP: DBGPROP_INFO = DBGPROP_INFO(16u32);
pub const DBGPROP_INFO_BEAUTIFY: DBGPROP_INFO = DBGPROP_INFO(33554432u32);
pub const DBGPROP_INFO_CALLTOSTRING: DBGPROP_INFO = DBGPROP_INFO(67108864u32);
pub const DBGPROP_INFO_AUTOEXPAND: DBGPROP_INFO = DBGPROP_INFO(134217728u32);
impl ::std::convert::From<u32> for DBGPROP_INFO {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DBGPROP_INFO {
    type Abi = Self;
}
impl ::std::ops::BitOr for DBGPROP_INFO {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for DBGPROP_INFO {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for DBGPROP_INFO {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for DBGPROP_INFO {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for DBGPROP_INFO {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_ADDRESS_AT_END: u32 = 131072u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_ADDRESS_OF_FIELD: u32 = 65536u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_ARRAY: u32 = 32768u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_BLOCK_RECURSE: u32 = 2097152u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_CALL_FOR_EACH: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_COMPACT_OUT: u32 = 8192u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_COPY_TYPE_DATA: u32 = 262144u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_FIELD_ARRAY: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_FIELD_CALL_BEFORE_PRINT: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_FIELD_COPY_FIELD_DATA: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_FIELD_DEFAULT_STRING: u32 = 65536u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_FIELD_FULL_NAME: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_FIELD_GUID_STRING: u32 = 524288u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_FIELD_MULTI_STRING: u32 = 262144u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_FIELD_NO_CALLBACK_REQ: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_FIELD_NO_PRINT: u32 = 16384u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_FIELD_RECUR_ON_THIS: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_FIELD_RETURN_ADDRESS: u32 = 4096u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_FIELD_SIZE_IN_BITS: u32 = 8192u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_FIELD_UTF32_STRING: u32 = 1048576u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_FIELD_WCHAR_STRING: u32 = 131072u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_FUNCTION_FORMAT: u32 = 1048576u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_GET_SIZE_ONLY: u32 = 128u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_LIST: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_MATCH_SIZE: u32 = 4194304u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_NO_INDENT: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_NO_OFFSET: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_NO_PRINT: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_READ_PHYSICAL: u32 = 524288u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_DUMP_VERBOSE: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_FRAME_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_FRAME_IGNORE_INLINE: u32 = 4294967295u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_RETURN_SUBTYPES: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_RETURN_TYPE: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBG_RETURN_TYPE_VALUES: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DBHHEADER_PDBGUID: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ADDSYNTHMOD_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ADDSYNTHMOD_ZEROBASE: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ADDSYNTHSYM_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ANY_ID: u32 = 4294967295u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ASMOPT_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ASMOPT_IGNORE_OUTPUT_WIDTH: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ASMOPT_NO_CODE_BYTES: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ASMOPT_SOURCE_LINE_NUMBER: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ASMOPT_VERBOSE: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ATTACH_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ATTACH_EXDI_DRIVER: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ATTACH_EXISTING: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ATTACH_INSTALL_DRIVER: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ATTACH_INVASIVE_NO_INITIAL_BREAK: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ATTACH_INVASIVE_RESUME_PROCESS: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ATTACH_KERNEL_CONNECTION: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ATTACH_LOCAL_KERNEL: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ATTACH_NONINVASIVE: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ATTACH_NONINVASIVE_ALLOW_PARTIAL: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ATTACH_NONINVASIVE_NO_SUSPEND: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_BREAKPOINT_ADDER_ONLY: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_BREAKPOINT_CODE: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_BREAKPOINT_DATA: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_BREAKPOINT_DEFERRED: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_BREAKPOINT_ENABLED: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_BREAKPOINT_GO_ONLY: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_BREAKPOINT_INLINE: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_BREAKPOINT_ONE_SHOT: u32 = 16u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_BREAKPOINT_PARAMETERS {
    pub Offset: u64,
    pub Id: u32,
    pub BreakType: u32,
    pub ProcType: u32,
    pub Flags: u32,
    pub DataSize: u32,
    pub DataAccessType: u32,
    pub PassCount: u32,
    pub CurrentPassCount: u32,
    pub MatchThread: u32,
    pub CommandSize: u32,
    pub OffsetExpressionSize: u32,
}
impl DEBUG_BREAKPOINT_PARAMETERS {}
impl ::std::default::Default for DEBUG_BREAKPOINT_PARAMETERS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_BREAKPOINT_PARAMETERS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_BREAKPOINT_PARAMETERS")
            .field("Offset", &self.Offset)
            .field("Id", &self.Id)
            .field("BreakType", &self.BreakType)
            .field("ProcType", &self.ProcType)
            .field("Flags", &self.Flags)
            .field("DataSize", &self.DataSize)
            .field("DataAccessType", &self.DataAccessType)
            .field("PassCount", &self.PassCount)
            .field("CurrentPassCount", &self.CurrentPassCount)
            .field("MatchThread", &self.MatchThread)
            .field("CommandSize", &self.CommandSize)
            .field("OffsetExpressionSize", &self.OffsetExpressionSize)
            .finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_BREAKPOINT_PARAMETERS {
    fn eq(&self, other: &Self) -> bool {
        self.Offset == other.Offset && self.Id == other.Id && self.BreakType == other.BreakType && self.ProcType == other.ProcType && self.Flags == other.Flags && self.DataSize == other.DataSize && self.DataAccessType == other.DataAccessType && self.PassCount == other.PassCount && self.CurrentPassCount == other.CurrentPassCount && self.MatchThread == other.MatchThread && self.CommandSize == other.CommandSize && self.OffsetExpressionSize == other.OffsetExpressionSize
    }
}
impl ::std::cmp::Eq for DEBUG_BREAKPOINT_PARAMETERS {}
unsafe impl ::windows::runtime::Abi for DEBUG_BREAKPOINT_PARAMETERS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_BREAKPOINT_TIME: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_BREAK_EXECUTE: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_BREAK_IO: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_BREAK_READ: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_BREAK_WRITE: u32 = 2u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_CACHED_SYMBOL_INFO {
    pub ModBase: u64,
    pub Arg1: u64,
    pub Arg2: u64,
    pub Id: u32,
    pub Arg3: u32,
}
impl DEBUG_CACHED_SYMBOL_INFO {}
impl ::std::default::Default for DEBUG_CACHED_SYMBOL_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_CACHED_SYMBOL_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_CACHED_SYMBOL_INFO").field("ModBase", &self.ModBase).field("Arg1", &self.Arg1).field("Arg2", &self.Arg2).field("Id", &self.Id).field("Arg3", &self.Arg3).finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_CACHED_SYMBOL_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.ModBase == other.ModBase && self.Arg1 == other.Arg1 && self.Arg2 == other.Arg2 && self.Id == other.Id && self.Arg3 == other.Arg3
    }
}
impl ::std::cmp::Eq for DEBUG_CACHED_SYMBOL_INFO {}
unsafe impl ::windows::runtime::Abi for DEBUG_CACHED_SYMBOL_INFO {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CDS_ALL: u32 = 4294967295u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CDS_DATA: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CDS_REFRESH: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CDS_REFRESH_ADDBREAKPOINT: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CDS_REFRESH_EVALUATE: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CDS_REFRESH_EXECUTE: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CDS_REFRESH_EXECUTECOMMANDFILE: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CDS_REFRESH_INLINESTEP: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CDS_REFRESH_INLINESTEP_PSEUDO: u32 = 17u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CDS_REFRESH_REMOVEBREAKPOINT: u32 = 5u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CDS_REFRESH_SETSCOPE: u32 = 12u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CDS_REFRESH_SETSCOPEFRAMEBYINDEX: u32 = 13u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CDS_REFRESH_SETSCOPEFROMJITDEBUGINFO: u32 = 14u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CDS_REFRESH_SETSCOPEFROMSTOREDEVENT: u32 = 15u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CDS_REFRESH_SETVALUE: u32 = 10u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CDS_REFRESH_SETVALUE2: u32 = 11u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CDS_REFRESH_WRITEPHYSICAL: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CDS_REFRESH_WRITEPHYSICAL2: u32 = 9u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CDS_REFRESH_WRITEVIRTUAL: u32 = 6u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CDS_REFRESH_WRITEVIRTUALUNCACHED: u32 = 7u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CDS_REGISTERS: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CES_ALL: u32 = 4294967295u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CES_ASSEMBLY_OPTIONS: u32 = 4096u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CES_BREAKPOINTS: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CES_CODE_LEVEL: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CES_CURRENT_THREAD: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CES_EFFECTIVE_PROCESSOR: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CES_ENGINE_OPTIONS: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CES_EVENT_FILTERS: u32 = 256u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CES_EXECUTION_STATUS: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CES_EXPRESSION_SYNTAX: u32 = 8192u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CES_EXTENSIONS: u32 = 1024u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CES_LOG_FILE: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CES_PROCESS_OPTIONS: u32 = 512u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CES_RADIX: u32 = 128u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CES_SYSTEMS: u32 = 2048u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CES_TEXT_REPLACEMENTS: u32 = 16384u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CLASS_IMAGE_FILE: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CLASS_KERNEL: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CLASS_UNINITIALIZED: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CLASS_USER_WINDOWS: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CLIENT_CDB: u32 = 4u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_CLIENT_CONTEXT {
    pub cbSize: u32,
    pub eClient: u32,
}
impl DEBUG_CLIENT_CONTEXT {}
impl ::std::default::Default for DEBUG_CLIENT_CONTEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_CLIENT_CONTEXT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_CLIENT_CONTEXT").field("cbSize", &self.cbSize).field("eClient", &self.eClient).finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_CLIENT_CONTEXT {
    fn eq(&self, other: &Self) -> bool {
        self.cbSize == other.cbSize && self.eClient == other.eClient
    }
}
impl ::std::cmp::Eq for DEBUG_CLIENT_CONTEXT {}
unsafe impl ::windows::runtime::Abi for DEBUG_CLIENT_CONTEXT {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CLIENT_KD: u32 = 5u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CLIENT_NTKD: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CLIENT_NTSD: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CLIENT_UNKNOWN: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CLIENT_VSINT: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CLIENT_WINDBG: u32 = 6u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CLIENT_WINIDE: u32 = 7u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CMDEX_ADD_EVENT_STRING: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CMDEX_INVALID: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CMDEX_RESET_EVENT_STRINGS: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_COMMAND_EXCEPTION_ID: u32 = 3688893886u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CONNECT_SESSION_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CONNECT_SESSION_NO_ANNOUNCE: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CONNECT_SESSION_NO_VERSION: u32 = 1u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_CREATE_PROCESS_OPTIONS {
    pub CreateFlags: u32,
    pub EngCreateFlags: u32,
    pub VerifierFlags: u32,
    pub Reserved: u32,
}
impl DEBUG_CREATE_PROCESS_OPTIONS {}
impl ::std::default::Default for DEBUG_CREATE_PROCESS_OPTIONS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_CREATE_PROCESS_OPTIONS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_CREATE_PROCESS_OPTIONS").field("CreateFlags", &self.CreateFlags).field("EngCreateFlags", &self.EngCreateFlags).field("VerifierFlags", &self.VerifierFlags).field("Reserved", &self.Reserved).finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_CREATE_PROCESS_OPTIONS {
    fn eq(&self, other: &Self) -> bool {
        self.CreateFlags == other.CreateFlags && self.EngCreateFlags == other.EngCreateFlags && self.VerifierFlags == other.VerifierFlags && self.Reserved == other.Reserved
    }
}
impl ::std::cmp::Eq for DEBUG_CREATE_PROCESS_OPTIONS {}
unsafe impl ::windows::runtime::Abi for DEBUG_CREATE_PROCESS_OPTIONS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CSS_ALL: u32 = 4294967295u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CSS_COLLAPSE_CHILDREN: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CSS_LOADS: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CSS_PATHS: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CSS_SCOPE: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CSS_SYMBOL_OPTIONS: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CSS_TYPE_OPTIONS: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CSS_UNLOADS: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CURRENT_DEFAULT: u32 = 15u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CURRENT_DISASM: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CURRENT_REGISTERS: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CURRENT_SOURCE_LINE: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_CURRENT_SYMBOL: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_BASE_TRANSLATION_VIRTUAL_OFFSET: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_BreakpointWithStatusAddr: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_CmNtCSDVersionAddr: u32 = 616u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_DumpAttributes: u32 = 100072u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_DumpFormatVersion: u32 = 100040u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_DumpMmStorage: u32 = 100064u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_DumpPowerState: u32 = 100056u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_DumpWriterStatus: u32 = 100032u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_DumpWriterVersion: u32 = 100048u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_EtwpDebuggerData: u32 = 816u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_ExpNumberOfPagedPoolsAddr: u32 = 112u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_ExpPagedPoolDescriptorAddr: u32 = 104u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_ExpSystemResourcesListAddr: u32 = 96u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_IopErrorLogListHeadAddr: u32 = 144u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_KPCR_OFFSET: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_KPRCB_OFFSET: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_KTHREAD_OFFSET: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_KdPrintBufferSizeAddr: u32 = 720u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_KdPrintCircularBufferAddr: u32 = 480u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_KdPrintCircularBufferEndAddr: u32 = 488u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_KdPrintCircularBufferPtrAddr: u32 = 712u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_KdPrintRolloverCountAddr: u32 = 504u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_KdPrintWritePointerAddr: u32 = 496u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_KeBugCheckCallbackListHeadAddr: u32 = 128u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_KeTimeIncrementAddr: u32 = 120u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_KeUserCallbackDispatcherAddr: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_KernBase: u32 = 24u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_KernelVerifierAddr: u32 = 576u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_KiBugcheckDataAddr: u32 = 136u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_KiCallUserModeAddr: u32 = 56u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_KiNormalSystemCall: u32 = 528u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_KiProcessorBlockAddr: u32 = 536u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmAllocatedNonPagedPoolAddr: u32 = 592u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmAvailablePagesAddr: u32 = 424u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmBadPagesDetected: u32 = 800u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmDriverCommitAddr: u32 = 352u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmExtendedCommitAddr: u32 = 376u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmFreePageListHeadAddr: u32 = 392u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmHighestPhysicalPageAddr: u32 = 240u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmHighestUserAddressAddr: u32 = 456u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmLastUnloadedDriverAddr: u32 = 552u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmLoadedUserImageListAddr: u32 = 512u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmLowestPhysicalPageAddr: u32 = 232u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmMaximumNonPagedPoolInBytesAddr: u32 = 256u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmModifiedNoWritePageListHeadAddr: u32 = 416u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmModifiedPageListHeadAddr: u32 = 408u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmNonPagedPoolEndAddr: u32 = 280u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmNonPagedPoolStartAddr: u32 = 272u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmNonPagedSystemStartAddr: u32 = 264u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmNumberOfPagingFilesAddr: u32 = 224u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmNumberOfPhysicalPagesAddr: u32 = 248u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmPageSize: u32 = 312u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmPagedPoolCommitAddr: u32 = 368u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmPagedPoolEndAddr: u32 = 296u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmPagedPoolInformationAddr: u32 = 304u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmPagedPoolStartAddr: u32 = 288u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmPeakCommitmentAddr: u32 = 600u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmPfnDatabaseAddr: u32 = 192u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmPhysicalMemoryBlockAddr: u32 = 624u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmProcessCommitAddr: u32 = 360u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmResidentAvailablePagesAddr: u32 = 432u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmSessionBase: u32 = 632u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmSessionSize: u32 = 640u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmSharedCommitAddr: u32 = 344u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmSizeOfPagedPoolInBytesAddr: u32 = 320u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmSpecialPoolTagAddr: u32 = 568u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmStandbyPageListHeadAddr: u32 = 400u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmSubsectionBaseAddr: u32 = 216u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmSystemCacheEndAddr: u32 = 176u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmSystemCacheStartAddr: u32 = 168u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmSystemCacheWsAddr: u32 = 184u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmSystemParentTablePage: u32 = 648u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmSystemPtesEndAddr: u32 = 208u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmSystemPtesStartAddr: u32 = 200u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmSystemRangeStartAddr: u32 = 464u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmTotalCommitLimitAddr: u32 = 328u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmTotalCommitLimitMaximumAddr: u32 = 608u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmTotalCommittedPagesAddr: u32 = 336u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmTriageActionTakenAddr: u32 = 560u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmUnloadedDriversAddr: u32 = 544u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmUserProbeAddressAddr: u32 = 472u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmVerifierDataAddr: u32 = 584u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmVirtualTranslationBase: u32 = 656u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_MmZeroedPageListHeadAddr: u32 = 384u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_NonPagedPoolDescriptorAddr: u32 = 448u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_NtBuildLabAddr: u32 = 520u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_ObpRootDirectoryObjectAddr: u32 = 152u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_ObpTypeObjectTypeAddr: u32 = 160u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_OffsetEprocessDirectoryTableBase: u32 = 686u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_OffsetEprocessParentCID: u32 = 684u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_OffsetEprocessPeb: u32 = 682u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_OffsetKThreadApcProcess: u32 = 672u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_OffsetKThreadBStore: u32 = 676u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_OffsetKThreadBStoreLimit: u32 = 678u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_OffsetKThreadInitialStack: u32 = 670u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_OffsetKThreadKernelStack: u32 = 668u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_OffsetKThreadNextProcessor: u32 = 664u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_OffsetKThreadState: u32 = 674u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_OffsetKThreadTeb: u32 = 666u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_OffsetPrcbCpuType: u32 = 696u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_OffsetPrcbCurrentThread: u32 = 692u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_OffsetPrcbDpcRoutine: u32 = 690u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_OffsetPrcbMhz: u32 = 694u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_OffsetPrcbNumber: u32 = 702u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_OffsetPrcbProcessorState: u32 = 700u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_OffsetPrcbVendorString: u32 = 698u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_PROCESSOR_IDENTIFICATION: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_PROCESSOR_SPEED: u32 = 5u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_PaeEnabled: u32 = 100000u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_PoolTrackTableAddr: u32 = 440u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_ProductType: u32 = 100016u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_PsActiveProcessHeadAddr: u32 = 80u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_PsLoadedModuleListAddr: u32 = 72u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_PspCidTableAddr: u32 = 88u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_PteBase: u32 = 864u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_SPACE_BUS_DATA: u32 = 5u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_SPACE_CONTROL: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_SPACE_COUNT: u32 = 7u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_SPACE_DEBUGGER_DATA: u32 = 6u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_SPACE_IO: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_SPACE_MSR: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_SPACE_PHYSICAL: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_SPACE_VIRTUAL: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_SavedContextAddr: u32 = 40u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_SharedUserData: u32 = 100008u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_SizeEProcess: u32 = 680u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_SizeEThread: u32 = 704u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_SizePrcb: u32 = 688u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DATA_SuiteMask: u32 = 100024u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DISASM_EFFECTIVE_ADDRESS: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DISASM_MATCHING_SYMBOLS: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DISASM_SOURCE_FILE_NAME: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DISASM_SOURCE_LINE_NUMBER: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DUMP_ACTIVE: u32 = 1030u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DUMP_DEFAULT: u32 = 1025u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DUMP_FILE_BASE: u32 = 4294967295u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DUMP_FILE_LOAD_FAILED_INDEX: u32 = 4294967295u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DUMP_FILE_ORIGINAL_CAB_INDEX: u32 = 4294967294u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DUMP_FILE_PAGE_FILE_DUMP: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DUMP_FULL: u32 = 1026u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DUMP_IMAGE_FILE: u32 = 1027u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DUMP_SMALL: u32 = 1024u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DUMP_TRACE_LOG: u32 = 1028u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_DUMP_WINDOWS_CE: u32 = 1029u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ECREATE_PROCESS_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ECREATE_PROCESS_INHERIT_HANDLES: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ECREATE_PROCESS_USE_IMPLICIT_COMMAND_LINE: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ECREATE_PROCESS_USE_VERIFIER_FLAGS: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EINDEX_FROM_CURRENT: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EINDEX_FROM_END: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EINDEX_FROM_START: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EINDEX_NAME: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_END_ACTIVE_DETACH: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_END_ACTIVE_TERMINATE: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_END_DISCONNECT: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_END_PASSIVE: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_END_REENTRANT: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_ALL: u32 = 15728639u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_ALLOW_NETWORK_PATHS: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_ALLOW_READ_ONLY_BREAKPOINTS: u32 = 1024u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_DEBUGGING_SENSITIVE_DATA: u32 = 4194304u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_DISABLESQM: u32 = 524288u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_DISABLE_EXECUTION_COMMANDS: u32 = 65536u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_DISABLE_MANAGED_SUPPORT: u32 = 16384u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_DISABLE_MODULE_SYMBOL_LOAD: u32 = 32768u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_DISABLE_STEPLINES_OPTIONS: u32 = 2097152u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_DISALLOW_IMAGE_FILE_MAPPING: u32 = 131072u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_DISALLOW_NETWORK_PATHS: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_DISALLOW_SHELL_COMMANDS: u32 = 4096u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_FAIL_INCOMPLETE_INFORMATION: u32 = 512u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_FINAL_BREAK: u32 = 128u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_IGNORE_DBGHELP_VERSION: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_IGNORE_EXTENSION_VERSIONS: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_IGNORE_LOADER_EXCEPTIONS: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_INITIAL_BREAK: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_INITIAL_MODULE_BREAK: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_KD_QUIET_MODE: u32 = 8192u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_NO_EXECUTE_REPEAT: u32 = 256u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_PREFER_DML: u32 = 262144u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_PREFER_TRACE_FILES: u32 = 8388608u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_ENGOPT_SYNCHRONIZE_BREAKPOINTS: u32 = 2048u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::clone::Clone for DEBUG_EVENT {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
pub struct DEBUG_EVENT {
    pub dwDebugEventCode: DEBUG_EVENT_CODE,
    pub dwProcessId: u32,
    pub dwThreadId: u32,
    pub u: DEBUG_EVENT_0,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl DEBUG_EVENT {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::default::Default for DEBUG_EVENT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::PartialEq for DEBUG_EVENT {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::Eq for DEBUG_EVENT {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
unsafe impl ::windows::runtime::Abi for DEBUG_EVENT {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::clone::Clone for DEBUG_EVENT_0 {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
pub union DEBUG_EVENT_0 {
    pub Exception: EXCEPTION_DEBUG_INFO,
    pub CreateThread: ::std::mem::ManuallyDrop<CREATE_THREAD_DEBUG_INFO>,
    pub CreateProcessInfo: ::std::mem::ManuallyDrop<CREATE_PROCESS_DEBUG_INFO>,
    pub ExitThread: EXIT_THREAD_DEBUG_INFO,
    pub ExitProcess: EXIT_PROCESS_DEBUG_INFO,
    pub LoadDll: LOAD_DLL_DEBUG_INFO,
    pub UnloadDll: UNLOAD_DLL_DEBUG_INFO,
    pub DebugString: OUTPUT_DEBUG_STRING_INFO,
    pub RipInfo: RIP_INFO,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl DEBUG_EVENT_0 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::default::Default for DEBUG_EVENT_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::PartialEq for DEBUG_EVENT_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::Eq for DEBUG_EVENT_0 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
unsafe impl ::windows::runtime::Abi for DEBUG_EVENT_0 {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EVENT_BREAKPOINT: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EVENT_CHANGE_DEBUGGEE_STATE: u32 = 1024u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EVENT_CHANGE_ENGINE_STATE: u32 = 2048u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EVENT_CHANGE_SYMBOL_STATE: u32 = 4096u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct DEBUG_EVENT_CODE(pub u32);
pub const CREATE_PROCESS_DEBUG_EVENT: DEBUG_EVENT_CODE = DEBUG_EVENT_CODE(3u32);
pub const CREATE_THREAD_DEBUG_EVENT: DEBUG_EVENT_CODE = DEBUG_EVENT_CODE(2u32);
pub const EXCEPTION_DEBUG_EVENT: DEBUG_EVENT_CODE = DEBUG_EVENT_CODE(1u32);
pub const EXIT_PROCESS_DEBUG_EVENT: DEBUG_EVENT_CODE = DEBUG_EVENT_CODE(5u32);
pub const EXIT_THREAD_DEBUG_EVENT: DEBUG_EVENT_CODE = DEBUG_EVENT_CODE(4u32);
pub const LOAD_DLL_DEBUG_EVENT: DEBUG_EVENT_CODE = DEBUG_EVENT_CODE(6u32);
pub const OUTPUT_DEBUG_STRING_EVENT: DEBUG_EVENT_CODE = DEBUG_EVENT_CODE(8u32);
pub const RIP_EVENT: DEBUG_EVENT_CODE = DEBUG_EVENT_CODE(9u32);
pub const UNLOAD_DLL_DEBUG_EVENT: DEBUG_EVENT_CODE = DEBUG_EVENT_CODE(7u32);
impl ::std::convert::From<u32> for DEBUG_EVENT_CODE {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DEBUG_EVENT_CODE {
    type Abi = Self;
}
impl ::std::ops::BitOr for DEBUG_EVENT_CODE {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for DEBUG_EVENT_CODE {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for DEBUG_EVENT_CODE {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for DEBUG_EVENT_CODE {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for DEBUG_EVENT_CODE {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_EVENT_CONTEXT {
    pub Size: u32,
    pub ProcessEngineId: u32,
    pub ThreadEngineId: u32,
    pub FrameEngineId: u32,
}
impl DEBUG_EVENT_CONTEXT {}
impl ::std::default::Default for DEBUG_EVENT_CONTEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_EVENT_CONTEXT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_EVENT_CONTEXT").field("Size", &self.Size).field("ProcessEngineId", &self.ProcessEngineId).field("ThreadEngineId", &self.ThreadEngineId).field("FrameEngineId", &self.FrameEngineId).finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_EVENT_CONTEXT {
    fn eq(&self, other: &Self) -> bool {
        self.Size == other.Size && self.ProcessEngineId == other.ProcessEngineId && self.ThreadEngineId == other.ThreadEngineId && self.FrameEngineId == other.FrameEngineId
    }
}
impl ::std::cmp::Eq for DEBUG_EVENT_CONTEXT {}
unsafe impl ::windows::runtime::Abi for DEBUG_EVENT_CONTEXT {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EVENT_CREATE_PROCESS: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EVENT_CREATE_THREAD: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EVENT_EXCEPTION: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EVENT_EXIT_PROCESS: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EVENT_EXIT_THREAD: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct DEBUG_EVENT_INFO_TYPE(pub i32);
pub const DEIT_GENERAL: DEBUG_EVENT_INFO_TYPE = DEBUG_EVENT_INFO_TYPE(0i32);
pub const DEIT_ASMJS_IN_DEBUGGING: DEBUG_EVENT_INFO_TYPE = DEBUG_EVENT_INFO_TYPE(1i32);
pub const DEIT_ASMJS_SUCCEEDED: DEBUG_EVENT_INFO_TYPE = DEBUG_EVENT_INFO_TYPE(2i32);
pub const DEIT_ASMJS_FAILED: DEBUG_EVENT_INFO_TYPE = DEBUG_EVENT_INFO_TYPE(3i32);
impl ::std::convert::From<i32> for DEBUG_EVENT_INFO_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DEBUG_EVENT_INFO_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EVENT_LOAD_MODULE: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EVENT_SERVICE_EXCEPTION: u32 = 8192u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EVENT_SESSION_STATUS: u32 = 512u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EVENT_SYSTEM_ERROR: u32 = 256u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EVENT_UNLOAD_MODULE: u32 = 128u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_EXCEPTION_FILTER_PARAMETERS {
    pub ExecutionOption: u32,
    pub ContinueOption: u32,
    pub TextSize: u32,
    pub CommandSize: u32,
    pub SecondCommandSize: u32,
    pub ExceptionCode: u32,
}
impl DEBUG_EXCEPTION_FILTER_PARAMETERS {}
impl ::std::default::Default for DEBUG_EXCEPTION_FILTER_PARAMETERS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_EXCEPTION_FILTER_PARAMETERS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_EXCEPTION_FILTER_PARAMETERS")
            .field("ExecutionOption", &self.ExecutionOption)
            .field("ContinueOption", &self.ContinueOption)
            .field("TextSize", &self.TextSize)
            .field("CommandSize", &self.CommandSize)
            .field("SecondCommandSize", &self.SecondCommandSize)
            .field("ExceptionCode", &self.ExceptionCode)
            .finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_EXCEPTION_FILTER_PARAMETERS {
    fn eq(&self, other: &Self) -> bool {
        self.ExecutionOption == other.ExecutionOption && self.ContinueOption == other.ContinueOption && self.TextSize == other.TextSize && self.CommandSize == other.CommandSize && self.SecondCommandSize == other.SecondCommandSize && self.ExceptionCode == other.ExceptionCode
    }
}
impl ::std::cmp::Eq for DEBUG_EXCEPTION_FILTER_PARAMETERS {}
unsafe impl ::windows::runtime::Abi for DEBUG_EXCEPTION_FILTER_PARAMETERS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EXECUTE_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EXECUTE_ECHO: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EXECUTE_EVENT: u32 = 2048u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EXECUTE_EXTENSION: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EXECUTE_HOTKEY: u32 = 1024u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EXECUTE_INTERNAL: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EXECUTE_MENU: u32 = 512u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EXECUTE_NOT_LOGGED: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EXECUTE_NO_REPEAT: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EXECUTE_SCRIPT: u32 = 128u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EXECUTE_TOOLBAR: u32 = 256u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EXECUTE_USER_CLICKED: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EXECUTE_USER_TYPED: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EXEC_FLAGS_NONBLOCK: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EXPR_CPLUSPLUS: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EXPR_MASM: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EXTENSION_AT_ENGINE: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EXTINIT_HAS_COMMAND_HELP: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EXT_PVALUE_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EXT_PVTYPE_IS_POINTER: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EXT_PVTYPE_IS_VALUE: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_EXT_QVALUE_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FILTER_BREAK: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FILTER_CREATE_PROCESS: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FILTER_CREATE_THREAD: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FILTER_DEBUGGEE_OUTPUT: u32 = 9u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FILTER_EXIT_PROCESS: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FILTER_EXIT_THREAD: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FILTER_GO_HANDLED: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FILTER_GO_NOT_HANDLED: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FILTER_IGNORE: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FILTER_INITIAL_BREAKPOINT: u32 = 7u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FILTER_INITIAL_MODULE_LOAD: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FILTER_LOAD_MODULE: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FILTER_OUTPUT: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FILTER_REMOVE: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FILTER_SECOND_CHANCE_BREAK: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FILTER_SYSTEM_ERROR: u32 = 6u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FILTER_UNLOAD_MODULE: u32 = 5u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FIND_SOURCE_BEST_MATCH: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FIND_SOURCE_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FIND_SOURCE_FULL_PATH: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FIND_SOURCE_NO_SRCSRV: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FIND_SOURCE_TOKEN_LOOKUP: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FIND_SOURCE_WITH_CHECKSUM: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FIND_SOURCE_WITH_CHECKSUM_STRICT: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_CAB_SECONDARY_ALL_IMAGES: u32 = 268435456u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_CAB_SECONDARY_FILES: u32 = 1073741824u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_NO_OVERWRITE: u32 = 2147483648u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_USER_SMALL_ADD_AVX_XSTATE_CONTEXT: u32 = 131072u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_USER_SMALL_CODE_SEGMENTS: u32 = 4096u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_USER_SMALL_DATA_SEGMENTS: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_USER_SMALL_FILTER_MEMORY: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_USER_SMALL_FILTER_PATHS: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_USER_SMALL_FILTER_TRIAGE: u32 = 65536u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_USER_SMALL_FULL_AUXILIARY_STATE: u32 = 16384u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_USER_SMALL_FULL_MEMORY: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_USER_SMALL_FULL_MEMORY_INFO: u32 = 1024u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_USER_SMALL_HANDLE_DATA: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_USER_SMALL_IGNORE_INACCESSIBLE_MEM: u32 = 134217728u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_USER_SMALL_INDIRECT_MEMORY: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_USER_SMALL_IPT_TRACE: u32 = 262144u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_USER_SMALL_MODULE_HEADERS: u32 = 32768u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_USER_SMALL_NO_AUXILIARY_STATE: u32 = 8192u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_USER_SMALL_NO_OPTIONAL_DATA: u32 = 512u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_USER_SMALL_PRIVATE_READ_WRITE_MEMORY: u32 = 256u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_USER_SMALL_PROCESS_THREAD_DATA: u32 = 128u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_USER_SMALL_SCAN_PARTIAL_PAGES: u32 = 268435456u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_USER_SMALL_THREAD_INFO: u32 = 2048u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_USER_SMALL_UNLOADED_MODULES: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FORMAT_WRITE_CAB: u32 = 536870912u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FRAME_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_FRAME_IGNORE_INLINE: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_GETFNENT_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_GETFNENT_RAW_ENTRY_ONLY: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_GETMOD_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_GETMOD_NO_LOADED_MODULES: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_GETMOD_NO_UNLOADED_MODULES: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_GET_PROC_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_GET_PROC_FULL_MATCH: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_GET_PROC_ONLY_MATCH: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_GET_PROC_SERVICE_NAME: u32 = 4u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_GET_TEXT_COMPLETIONS_IN {
    pub Flags: u32,
    pub MatchCountLimit: u32,
    pub Reserved: [u64; 3],
}
impl DEBUG_GET_TEXT_COMPLETIONS_IN {}
impl ::std::default::Default for DEBUG_GET_TEXT_COMPLETIONS_IN {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_GET_TEXT_COMPLETIONS_IN {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_GET_TEXT_COMPLETIONS_IN").field("Flags", &self.Flags).field("MatchCountLimit", &self.MatchCountLimit).field("Reserved", &self.Reserved).finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_GET_TEXT_COMPLETIONS_IN {
    fn eq(&self, other: &Self) -> bool {
        self.Flags == other.Flags && self.MatchCountLimit == other.MatchCountLimit && self.Reserved == other.Reserved
    }
}
impl ::std::cmp::Eq for DEBUG_GET_TEXT_COMPLETIONS_IN {}
unsafe impl ::windows::runtime::Abi for DEBUG_GET_TEXT_COMPLETIONS_IN {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_GET_TEXT_COMPLETIONS_IS_DOT_COMMAND: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_GET_TEXT_COMPLETIONS_IS_EXTENSION_COMMAND: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_GET_TEXT_COMPLETIONS_IS_SYMBOL: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_GET_TEXT_COMPLETIONS_NO_DOT_COMMANDS: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_GET_TEXT_COMPLETIONS_NO_EXTENSION_COMMANDS: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_GET_TEXT_COMPLETIONS_NO_SYMBOLS: u32 = 4u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_GET_TEXT_COMPLETIONS_OUT {
    pub Flags: u32,
    pub ReplaceIndex: u32,
    pub MatchCount: u32,
    pub Reserved1: u32,
    pub Reserved2: [u64; 2],
}
impl DEBUG_GET_TEXT_COMPLETIONS_OUT {}
impl ::std::default::Default for DEBUG_GET_TEXT_COMPLETIONS_OUT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_GET_TEXT_COMPLETIONS_OUT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_GET_TEXT_COMPLETIONS_OUT").field("Flags", &self.Flags).field("ReplaceIndex", &self.ReplaceIndex).field("MatchCount", &self.MatchCount).field("Reserved1", &self.Reserved1).field("Reserved2", &self.Reserved2).finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_GET_TEXT_COMPLETIONS_OUT {
    fn eq(&self, other: &Self) -> bool {
        self.Flags == other.Flags && self.ReplaceIndex == other.ReplaceIndex && self.MatchCount == other.MatchCount && self.Reserved1 == other.Reserved1 && self.Reserved2 == other.Reserved2
    }
}
impl ::std::cmp::Eq for DEBUG_GET_TEXT_COMPLETIONS_OUT {}
unsafe impl ::windows::runtime::Abi for DEBUG_GET_TEXT_COMPLETIONS_OUT {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_GSEL_ALLOW_HIGHER: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_GSEL_ALLOW_LOWER: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_GSEL_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_GSEL_INLINE_CALLSITE: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_GSEL_NEAREST_ONLY: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_GSEL_NO_SYMBOL_LOADS: u32 = 1u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_HANDLE_DATA_BASIC {
    pub TypeNameSize: u32,
    pub ObjectNameSize: u32,
    pub Attributes: u32,
    pub GrantedAccess: u32,
    pub HandleCount: u32,
    pub PointerCount: u32,
}
impl DEBUG_HANDLE_DATA_BASIC {}
impl ::std::default::Default for DEBUG_HANDLE_DATA_BASIC {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_HANDLE_DATA_BASIC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_HANDLE_DATA_BASIC")
            .field("TypeNameSize", &self.TypeNameSize)
            .field("ObjectNameSize", &self.ObjectNameSize)
            .field("Attributes", &self.Attributes)
            .field("GrantedAccess", &self.GrantedAccess)
            .field("HandleCount", &self.HandleCount)
            .field("PointerCount", &self.PointerCount)
            .finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_HANDLE_DATA_BASIC {
    fn eq(&self, other: &Self) -> bool {
        self.TypeNameSize == other.TypeNameSize && self.ObjectNameSize == other.ObjectNameSize && self.Attributes == other.Attributes && self.GrantedAccess == other.GrantedAccess && self.HandleCount == other.HandleCount && self.PointerCount == other.PointerCount
    }
}
impl ::std::cmp::Eq for DEBUG_HANDLE_DATA_BASIC {}
unsafe impl ::windows::runtime::Abi for DEBUG_HANDLE_DATA_BASIC {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_HANDLE_DATA_TYPE_ALL_HANDLE_OPERATIONS: u32 = 10u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_HANDLE_DATA_TYPE_BASIC: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_HANDLE_DATA_TYPE_HANDLE_COUNT: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_HANDLE_DATA_TYPE_MINI_EVENT_1: u32 = 13u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_HANDLE_DATA_TYPE_MINI_MUTANT_1: u32 = 7u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_HANDLE_DATA_TYPE_MINI_MUTANT_2: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_HANDLE_DATA_TYPE_MINI_PROCESS_1: u32 = 11u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_HANDLE_DATA_TYPE_MINI_PROCESS_2: u32 = 12u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_HANDLE_DATA_TYPE_MINI_SECTION_1: u32 = 14u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_HANDLE_DATA_TYPE_MINI_SEMAPHORE_1: u32 = 15u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_HANDLE_DATA_TYPE_MINI_THREAD_1: u32 = 6u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_HANDLE_DATA_TYPE_OBJECT_NAME: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_HANDLE_DATA_TYPE_OBJECT_NAME_WIDE: u32 = 5u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_HANDLE_DATA_TYPE_PER_HANDLE_OPERATIONS: u32 = 9u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_HANDLE_DATA_TYPE_TYPE_NAME: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_HANDLE_DATA_TYPE_TYPE_NAME_WIDE: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_INTERRUPT_ACTIVE: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_INTERRUPT_EXIT: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_INTERRUPT_PASSIVE: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_IOUTPUT_ADDR_TRANSLATE: u32 = 134217728u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_IOUTPUT_BREAKPOINT: u32 = 536870912u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_IOUTPUT_EVENT: u32 = 268435456u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_IOUTPUT_KD_PROTOCOL: u32 = 2147483648u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_IOUTPUT_REMOTING: u32 = 1073741824u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_KERNEL_ACTIVE_DUMP: u32 = 1030u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_KERNEL_CONNECTION: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_KERNEL_DUMP: u32 = 1025u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_KERNEL_EXDI_DRIVER: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_KERNEL_FULL_DUMP: u32 = 1026u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_KERNEL_IDNA: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_KERNEL_INSTALL_DRIVER: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_KERNEL_LOCAL: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_KERNEL_REPT: u32 = 5u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_KERNEL_SMALL_DUMP: u32 = 1024u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_KERNEL_TRACE_LOG: u32 = 1028u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_KNOWN_STRUCT_GET_NAMES: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_KNOWN_STRUCT_GET_SINGLE_LINE_OUTPUT: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_KNOWN_STRUCT_SUPPRESS_TYPE_NAME: u32 = 3u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_LAST_EVENT_INFO_BREAKPOINT {
    pub Id: u32,
}
impl DEBUG_LAST_EVENT_INFO_BREAKPOINT {}
impl ::std::default::Default for DEBUG_LAST_EVENT_INFO_BREAKPOINT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_LAST_EVENT_INFO_BREAKPOINT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_LAST_EVENT_INFO_BREAKPOINT").field("Id", &self.Id).finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_LAST_EVENT_INFO_BREAKPOINT {
    fn eq(&self, other: &Self) -> bool {
        self.Id == other.Id
    }
}
impl ::std::cmp::Eq for DEBUG_LAST_EVENT_INFO_BREAKPOINT {}
unsafe impl ::windows::runtime::Abi for DEBUG_LAST_EVENT_INFO_BREAKPOINT {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct DEBUG_LAST_EVENT_INFO_EXCEPTION {
    pub ExceptionRecord: EXCEPTION_RECORD64,
    pub FirstChance: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl DEBUG_LAST_EVENT_INFO_EXCEPTION {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for DEBUG_LAST_EVENT_INFO_EXCEPTION {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for DEBUG_LAST_EVENT_INFO_EXCEPTION {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_LAST_EVENT_INFO_EXCEPTION").field("ExceptionRecord", &self.ExceptionRecord).field("FirstChance", &self.FirstChance).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for DEBUG_LAST_EVENT_INFO_EXCEPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ExceptionRecord == other.ExceptionRecord && self.FirstChance == other.FirstChance
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for DEBUG_LAST_EVENT_INFO_EXCEPTION {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DEBUG_LAST_EVENT_INFO_EXCEPTION {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_LAST_EVENT_INFO_EXIT_PROCESS {
    pub ExitCode: u32,
}
impl DEBUG_LAST_EVENT_INFO_EXIT_PROCESS {}
impl ::std::default::Default for DEBUG_LAST_EVENT_INFO_EXIT_PROCESS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_LAST_EVENT_INFO_EXIT_PROCESS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_LAST_EVENT_INFO_EXIT_PROCESS").field("ExitCode", &self.ExitCode).finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_LAST_EVENT_INFO_EXIT_PROCESS {
    fn eq(&self, other: &Self) -> bool {
        self.ExitCode == other.ExitCode
    }
}
impl ::std::cmp::Eq for DEBUG_LAST_EVENT_INFO_EXIT_PROCESS {}
unsafe impl ::windows::runtime::Abi for DEBUG_LAST_EVENT_INFO_EXIT_PROCESS {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_LAST_EVENT_INFO_EXIT_THREAD {
    pub ExitCode: u32,
}
impl DEBUG_LAST_EVENT_INFO_EXIT_THREAD {}
impl ::std::default::Default for DEBUG_LAST_EVENT_INFO_EXIT_THREAD {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_LAST_EVENT_INFO_EXIT_THREAD {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_LAST_EVENT_INFO_EXIT_THREAD").field("ExitCode", &self.ExitCode).finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_LAST_EVENT_INFO_EXIT_THREAD {
    fn eq(&self, other: &Self) -> bool {
        self.ExitCode == other.ExitCode
    }
}
impl ::std::cmp::Eq for DEBUG_LAST_EVENT_INFO_EXIT_THREAD {}
unsafe impl ::windows::runtime::Abi for DEBUG_LAST_EVENT_INFO_EXIT_THREAD {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_LAST_EVENT_INFO_LOAD_MODULE {
    pub Base: u64,
}
impl DEBUG_LAST_EVENT_INFO_LOAD_MODULE {}
impl ::std::default::Default for DEBUG_LAST_EVENT_INFO_LOAD_MODULE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_LAST_EVENT_INFO_LOAD_MODULE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_LAST_EVENT_INFO_LOAD_MODULE").field("Base", &self.Base).finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_LAST_EVENT_INFO_LOAD_MODULE {
    fn eq(&self, other: &Self) -> bool {
        self.Base == other.Base
    }
}
impl ::std::cmp::Eq for DEBUG_LAST_EVENT_INFO_LOAD_MODULE {}
unsafe impl ::windows::runtime::Abi for DEBUG_LAST_EVENT_INFO_LOAD_MODULE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_LAST_EVENT_INFO_SERVICE_EXCEPTION {
    pub Kind: u32,
    pub DataSize: u32,
    pub Address: u64,
}
impl DEBUG_LAST_EVENT_INFO_SERVICE_EXCEPTION {}
impl ::std::default::Default for DEBUG_LAST_EVENT_INFO_SERVICE_EXCEPTION {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_LAST_EVENT_INFO_SERVICE_EXCEPTION {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_LAST_EVENT_INFO_SERVICE_EXCEPTION").field("Kind", &self.Kind).field("DataSize", &self.DataSize).field("Address", &self.Address).finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_LAST_EVENT_INFO_SERVICE_EXCEPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.DataSize == other.DataSize && self.Address == other.Address
    }
}
impl ::std::cmp::Eq for DEBUG_LAST_EVENT_INFO_SERVICE_EXCEPTION {}
unsafe impl ::windows::runtime::Abi for DEBUG_LAST_EVENT_INFO_SERVICE_EXCEPTION {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR {
    pub Error: u32,
    pub Level: u32,
}
impl DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR {}
impl ::std::default::Default for DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR").field("Error", &self.Error).field("Level", &self.Level).finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR {
    fn eq(&self, other: &Self) -> bool {
        self.Error == other.Error && self.Level == other.Level
    }
}
impl ::std::cmp::Eq for DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR {}
unsafe impl ::windows::runtime::Abi for DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE {
    pub Base: u64,
}
impl DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE {}
impl ::std::default::Default for DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE").field("Base", &self.Base).finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE {
    fn eq(&self, other: &Self) -> bool {
        self.Base == other.Base
    }
}
impl ::std::cmp::Eq for DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE {}
unsafe impl ::windows::runtime::Abi for DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_LEVEL_ASSEMBLY: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_LEVEL_SOURCE: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_LIVE_USER_NON_INVASIVE: u32 = 33u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_LOG_APPEND: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_LOG_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_LOG_DML: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_LOG_UNICODE: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_MANAGED_ALLOWED: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_MANAGED_DISABLED: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_MANAGED_DLL_LOADED: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_MANRESET_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_MANRESET_LOAD_DLL: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_MANSTR_LOADED_SUPPORT_DLL: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_MANSTR_LOAD_STATUS: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_MANSTR_NONE: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_MODNAME_IMAGE: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_MODNAME_LOADED_IMAGE: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_MODNAME_MAPPED_IMAGE: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_MODNAME_MODULE: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_MODNAME_SYMBOL_FILE: u32 = 3u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_MODULE_AND_ID {
    pub ModuleBase: u64,
    pub Id: u64,
}
impl DEBUG_MODULE_AND_ID {}
impl ::std::default::Default for DEBUG_MODULE_AND_ID {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_MODULE_AND_ID {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_MODULE_AND_ID").field("ModuleBase", &self.ModuleBase).field("Id", &self.Id).finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_MODULE_AND_ID {
    fn eq(&self, other: &Self) -> bool {
        self.ModuleBase == other.ModuleBase && self.Id == other.Id
    }
}
impl ::std::cmp::Eq for DEBUG_MODULE_AND_ID {}
unsafe impl ::windows::runtime::Abi for DEBUG_MODULE_AND_ID {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_MODULE_EXE_MODULE: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_MODULE_EXPLICIT: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_MODULE_LOADED: u32 = 0u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_MODULE_PARAMETERS {
    pub Base: u64,
    pub Size: u32,
    pub TimeDateStamp: u32,
    pub Checksum: u32,
    pub Flags: u32,
    pub SymbolType: u32,
    pub ImageNameSize: u32,
    pub ModuleNameSize: u32,
    pub LoadedImageNameSize: u32,
    pub SymbolFileNameSize: u32,
    pub MappedImageNameSize: u32,
    pub Reserved: [u64; 2],
}
impl DEBUG_MODULE_PARAMETERS {}
impl ::std::default::Default for DEBUG_MODULE_PARAMETERS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_MODULE_PARAMETERS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_MODULE_PARAMETERS")
            .field("Base", &self.Base)
            .field("Size", &self.Size)
            .field("TimeDateStamp", &self.TimeDateStamp)
            .field("Checksum", &self.Checksum)
            .field("Flags", &self.Flags)
            .field("SymbolType", &self.SymbolType)
            .field("ImageNameSize", &self.ImageNameSize)
            .field("ModuleNameSize", &self.ModuleNameSize)
            .field("LoadedImageNameSize", &self.LoadedImageNameSize)
            .field("SymbolFileNameSize", &self.SymbolFileNameSize)
            .field("MappedImageNameSize", &self.MappedImageNameSize)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_MODULE_PARAMETERS {
    fn eq(&self, other: &Self) -> bool {
        self.Base == other.Base
            && self.Size == other.Size
            && self.TimeDateStamp == other.TimeDateStamp
            && self.Checksum == other.Checksum
            && self.Flags == other.Flags
            && self.SymbolType == other.SymbolType
            && self.ImageNameSize == other.ImageNameSize
            && self.ModuleNameSize == other.ModuleNameSize
            && self.LoadedImageNameSize == other.LoadedImageNameSize
            && self.SymbolFileNameSize == other.SymbolFileNameSize
            && self.MappedImageNameSize == other.MappedImageNameSize
            && self.Reserved == other.Reserved
    }
}
impl ::std::cmp::Eq for DEBUG_MODULE_PARAMETERS {}
unsafe impl ::windows::runtime::Abi for DEBUG_MODULE_PARAMETERS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_MODULE_SECONDARY: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_MODULE_SYM_BAD_CHECKSUM: u32 = 65536u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_MODULE_SYNTHETIC: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_MODULE_UNLOADED: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_MODULE_USER_MODE: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_NOTIFY_SESSION_ACCESSIBLE: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_NOTIFY_SESSION_ACTIVE: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_NOTIFY_SESSION_INACCESSIBLE: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_NOTIFY_SESSION_INACTIVE: u32 = 1u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_OFFSET_REGION {
    pub Base: u64,
    pub Size: u64,
}
impl DEBUG_OFFSET_REGION {}
impl ::std::default::Default for DEBUG_OFFSET_REGION {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_OFFSET_REGION {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_OFFSET_REGION").field("Base", &self.Base).field("Size", &self.Size).finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_OFFSET_REGION {
    fn eq(&self, other: &Self) -> bool {
        self.Base == other.Base && self.Size == other.Size
    }
}
impl ::std::cmp::Eq for DEBUG_OFFSET_REGION {}
unsafe impl ::windows::runtime::Abi for DEBUG_OFFSET_REGION {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OFFSINFO_VIRTUAL_SOURCE: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTCBF_COMBINED_EXPLICIT_FLUSH: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTCBF_DML_HAS_SPECIAL_CHARACTERS: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTCBF_DML_HAS_TAGS: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTCBI_ANY_FORMAT: u32 = 6u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTCBI_DML: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTCBI_EXPLICIT_FLUSH: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTCBI_TEXT: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTCB_DML: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTCB_EXPLICIT_FLUSH: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTCB_TEXT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTCTL_ALL_CLIENTS: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTCTL_ALL_OTHER_CLIENTS: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTCTL_AMBIENT: u32 = 4294967295u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTCTL_AMBIENT_DML: u32 = 4294967294u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTCTL_AMBIENT_TEXT: u32 = 4294967295u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTCTL_DML: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTCTL_IGNORE: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTCTL_LOG_ONLY: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTCTL_NOT_LOGGED: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTCTL_OVERRIDE_MASK: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTCTL_SEND_MASK: u32 = 7u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTCTL_THIS_CLIENT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTPUT_DEBUGGEE: u32 = 128u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTPUT_DEBUGGEE_PROMPT: u32 = 256u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTPUT_ERROR: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTPUT_EXTENSION_WARNING: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTPUT_IDENTITY_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTPUT_NORMAL: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTPUT_PROMPT: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTPUT_PROMPT_REGISTERS: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTPUT_STATUS: u32 = 1024u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTPUT_SYMBOLS: u32 = 512u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTPUT_SYMBOLS_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTPUT_SYMBOLS_NO_NAMES: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTPUT_SYMBOLS_NO_OFFSETS: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTPUT_SYMBOLS_NO_TYPES: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTPUT_SYMBOLS_NO_VALUES: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTPUT_VERBOSE: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTPUT_WARNING: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTPUT_XML: u32 = 2048u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTSYM_ALLOW_DISPLACEMENT: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTSYM_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTSYM_FORCE_OFFSET: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTSYM_SOURCE_LINE: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTTYPE_ADDRESS_AT_END: u32 = 131072u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTTYPE_ADDRESS_OF_FIELD: u32 = 65536u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTTYPE_BLOCK_RECURSE: u32 = 2097152u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTTYPE_COMPACT_OUTPUT: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTTYPE_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTTYPE_NO_INDENT: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTTYPE_NO_OFFSET: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUTTYPE_VERBOSE: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_OUT_TEXT_REPL_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_PHYSICAL_CACHED: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_PHYSICAL_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_PHYSICAL_UNCACHED: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_PHYSICAL_WRITE_COMBINED: u32 = 3u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub union DEBUG_PROCESSOR_IDENTIFICATION_ALL {
    pub Alpha: DEBUG_PROCESSOR_IDENTIFICATION_ALPHA,
    pub Amd64: DEBUG_PROCESSOR_IDENTIFICATION_AMD64,
    pub Ia64: DEBUG_PROCESSOR_IDENTIFICATION_IA64,
    pub X86: DEBUG_PROCESSOR_IDENTIFICATION_X86,
    pub Arm: DEBUG_PROCESSOR_IDENTIFICATION_ARM,
    pub Arm64: DEBUG_PROCESSOR_IDENTIFICATION_ARM64,
}
#[cfg(feature = "Win32_Foundation")]
impl DEBUG_PROCESSOR_IDENTIFICATION_ALL {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for DEBUG_PROCESSOR_IDENTIFICATION_ALL {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for DEBUG_PROCESSOR_IDENTIFICATION_ALL {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for DEBUG_PROCESSOR_IDENTIFICATION_ALL {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DEBUG_PROCESSOR_IDENTIFICATION_ALL {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_PROCESSOR_IDENTIFICATION_ALPHA {
    pub Type: u32,
    pub Revision: u32,
}
impl DEBUG_PROCESSOR_IDENTIFICATION_ALPHA {}
impl ::std::default::Default for DEBUG_PROCESSOR_IDENTIFICATION_ALPHA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_PROCESSOR_IDENTIFICATION_ALPHA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_PROCESSOR_IDENTIFICATION_ALPHA").field("Type", &self.Type).field("Revision", &self.Revision).finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_PROCESSOR_IDENTIFICATION_ALPHA {
    fn eq(&self, other: &Self) -> bool {
        self.Type == other.Type && self.Revision == other.Revision
    }
}
impl ::std::cmp::Eq for DEBUG_PROCESSOR_IDENTIFICATION_ALPHA {}
unsafe impl ::windows::runtime::Abi for DEBUG_PROCESSOR_IDENTIFICATION_ALPHA {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct DEBUG_PROCESSOR_IDENTIFICATION_AMD64 {
    pub Family: u32,
    pub Model: u32,
    pub Stepping: u32,
    pub VendorString: [super::super::super::Foundation::CHAR; 16],
}
#[cfg(feature = "Win32_Foundation")]
impl DEBUG_PROCESSOR_IDENTIFICATION_AMD64 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for DEBUG_PROCESSOR_IDENTIFICATION_AMD64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for DEBUG_PROCESSOR_IDENTIFICATION_AMD64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_PROCESSOR_IDENTIFICATION_AMD64").field("Family", &self.Family).field("Model", &self.Model).field("Stepping", &self.Stepping).field("VendorString", &self.VendorString).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for DEBUG_PROCESSOR_IDENTIFICATION_AMD64 {
    fn eq(&self, other: &Self) -> bool {
        self.Family == other.Family && self.Model == other.Model && self.Stepping == other.Stepping && self.VendorString == other.VendorString
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for DEBUG_PROCESSOR_IDENTIFICATION_AMD64 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DEBUG_PROCESSOR_IDENTIFICATION_AMD64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct DEBUG_PROCESSOR_IDENTIFICATION_ARM {
    pub Model: u32,
    pub Revision: u32,
    pub VendorString: [super::super::super::Foundation::CHAR; 16],
}
#[cfg(feature = "Win32_Foundation")]
impl DEBUG_PROCESSOR_IDENTIFICATION_ARM {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for DEBUG_PROCESSOR_IDENTIFICATION_ARM {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for DEBUG_PROCESSOR_IDENTIFICATION_ARM {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_PROCESSOR_IDENTIFICATION_ARM").field("Model", &self.Model).field("Revision", &self.Revision).field("VendorString", &self.VendorString).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for DEBUG_PROCESSOR_IDENTIFICATION_ARM {
    fn eq(&self, other: &Self) -> bool {
        self.Model == other.Model && self.Revision == other.Revision && self.VendorString == other.VendorString
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for DEBUG_PROCESSOR_IDENTIFICATION_ARM {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DEBUG_PROCESSOR_IDENTIFICATION_ARM {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct DEBUG_PROCESSOR_IDENTIFICATION_ARM64 {
    pub Model: u32,
    pub Revision: u32,
    pub VendorString: [super::super::super::Foundation::CHAR; 16],
}
#[cfg(feature = "Win32_Foundation")]
impl DEBUG_PROCESSOR_IDENTIFICATION_ARM64 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for DEBUG_PROCESSOR_IDENTIFICATION_ARM64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for DEBUG_PROCESSOR_IDENTIFICATION_ARM64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_PROCESSOR_IDENTIFICATION_ARM64").field("Model", &self.Model).field("Revision", &self.Revision).field("VendorString", &self.VendorString).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for DEBUG_PROCESSOR_IDENTIFICATION_ARM64 {
    fn eq(&self, other: &Self) -> bool {
        self.Model == other.Model && self.Revision == other.Revision && self.VendorString == other.VendorString
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for DEBUG_PROCESSOR_IDENTIFICATION_ARM64 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DEBUG_PROCESSOR_IDENTIFICATION_ARM64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct DEBUG_PROCESSOR_IDENTIFICATION_IA64 {
    pub Model: u32,
    pub Revision: u32,
    pub Family: u32,
    pub ArchRev: u32,
    pub VendorString: [super::super::super::Foundation::CHAR; 16],
}
#[cfg(feature = "Win32_Foundation")]
impl DEBUG_PROCESSOR_IDENTIFICATION_IA64 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for DEBUG_PROCESSOR_IDENTIFICATION_IA64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for DEBUG_PROCESSOR_IDENTIFICATION_IA64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_PROCESSOR_IDENTIFICATION_IA64").field("Model", &self.Model).field("Revision", &self.Revision).field("Family", &self.Family).field("ArchRev", &self.ArchRev).field("VendorString", &self.VendorString).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for DEBUG_PROCESSOR_IDENTIFICATION_IA64 {
    fn eq(&self, other: &Self) -> bool {
        self.Model == other.Model && self.Revision == other.Revision && self.Family == other.Family && self.ArchRev == other.ArchRev && self.VendorString == other.VendorString
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for DEBUG_PROCESSOR_IDENTIFICATION_IA64 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DEBUG_PROCESSOR_IDENTIFICATION_IA64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct DEBUG_PROCESSOR_IDENTIFICATION_X86 {
    pub Family: u32,
    pub Model: u32,
    pub Stepping: u32,
    pub VendorString: [super::super::super::Foundation::CHAR; 16],
}
#[cfg(feature = "Win32_Foundation")]
impl DEBUG_PROCESSOR_IDENTIFICATION_X86 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for DEBUG_PROCESSOR_IDENTIFICATION_X86 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for DEBUG_PROCESSOR_IDENTIFICATION_X86 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_PROCESSOR_IDENTIFICATION_X86").field("Family", &self.Family).field("Model", &self.Model).field("Stepping", &self.Stepping).field("VendorString", &self.VendorString).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for DEBUG_PROCESSOR_IDENTIFICATION_X86 {
    fn eq(&self, other: &Self) -> bool {
        self.Family == other.Family && self.Model == other.Model && self.Stepping == other.Stepping && self.VendorString == other.VendorString
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for DEBUG_PROCESSOR_IDENTIFICATION_X86 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DEBUG_PROCESSOR_IDENTIFICATION_X86 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_PROCESS_DETACH_ON_EXIT: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_PROCESS_ONLY_THIS_PROCESS: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_PROC_DESC_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_PROC_DESC_NO_COMMAND_LINE: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_PROC_DESC_NO_MTS_PACKAGES: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_PROC_DESC_NO_PATHS: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_PROC_DESC_NO_SERVICES: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_PROC_DESC_NO_SESSION_ID: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_PROC_DESC_NO_USER_NAME: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_PROC_DESC_WITH_PACKAGEFAMILY: u32 = 64u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_READ_USER_MINIDUMP_STREAM {
    pub StreamType: u32,
    pub Flags: u32,
    pub Offset: u64,
    pub Buffer: *mut ::std::ffi::c_void,
    pub BufferSize: u32,
    pub BufferUsed: u32,
}
impl DEBUG_READ_USER_MINIDUMP_STREAM {}
impl ::std::default::Default for DEBUG_READ_USER_MINIDUMP_STREAM {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_READ_USER_MINIDUMP_STREAM {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_READ_USER_MINIDUMP_STREAM").field("StreamType", &self.StreamType).field("Flags", &self.Flags).field("Offset", &self.Offset).field("Buffer", &self.Buffer).field("BufferSize", &self.BufferSize).field("BufferUsed", &self.BufferUsed).finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_READ_USER_MINIDUMP_STREAM {
    fn eq(&self, other: &Self) -> bool {
        self.StreamType == other.StreamType && self.Flags == other.Flags && self.Offset == other.Offset && self.Buffer == other.Buffer && self.BufferSize == other.BufferSize && self.BufferUsed == other.BufferUsed
    }
}
impl ::std::cmp::Eq for DEBUG_READ_USER_MINIDUMP_STREAM {}
unsafe impl ::windows::runtime::Abi for DEBUG_READ_USER_MINIDUMP_STREAM {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REGISTERS_ALL: u32 = 7u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REGISTERS_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REGISTERS_FLOAT: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REGISTERS_INT32: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REGISTERS_INT64: u32 = 2u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_REGISTER_DESCRIPTION {
    pub Type: u32,
    pub Flags: u32,
    pub SubregMaster: u32,
    pub SubregLength: u32,
    pub SubregMask: u64,
    pub SubregShift: u32,
    pub Reserved0: u32,
}
impl DEBUG_REGISTER_DESCRIPTION {}
impl ::std::default::Default for DEBUG_REGISTER_DESCRIPTION {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_REGISTER_DESCRIPTION {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_REGISTER_DESCRIPTION")
            .field("Type", &self.Type)
            .field("Flags", &self.Flags)
            .field("SubregMaster", &self.SubregMaster)
            .field("SubregLength", &self.SubregLength)
            .field("SubregMask", &self.SubregMask)
            .field("SubregShift", &self.SubregShift)
            .field("Reserved0", &self.Reserved0)
            .finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_REGISTER_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Type == other.Type && self.Flags == other.Flags && self.SubregMaster == other.SubregMaster && self.SubregLength == other.SubregLength && self.SubregMask == other.SubregMask && self.SubregShift == other.SubregShift && self.Reserved0 == other.Reserved0
    }
}
impl ::std::cmp::Eq for DEBUG_REGISTER_DESCRIPTION {}
unsafe impl ::windows::runtime::Abi for DEBUG_REGISTER_DESCRIPTION {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REGISTER_SUB_REGISTER: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REGSRC_DEBUGGEE: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REGSRC_EXPLICIT: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REGSRC_FRAME: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_ADD_CACHED_SYMBOL_INFO: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_CLOSE_TOKEN: u32 = 30u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_CURRENT_OUTPUT_CALLBACKS_ARE_DML_AWARE: u32 = 19u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_DUPLICATE_TOKEN: u32 = 28u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_EXT_TYPED_DATA_ANSI: u32 = 12u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_GET_ADDITIONAL_CREATE_OPTIONS: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_GET_CACHED_SYMBOL_INFO: u32 = 15u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_GET_CAPTURED_EVENT_CODE_OFFSET: u32 = 10u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_GET_DUMP_HEADER: u32 = 21u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_GET_EXTENSION_SEARCH_PATH_WIDE: u32 = 13u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_GET_INSTRUMENTATION_VERSION: u32 = 37u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_GET_MODULE_ARCHITECTURE: u32 = 38u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_GET_OFFSET_UNWIND_INFORMATION: u32 = 20u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_GET_TEXT_COMPLETIONS_ANSI: u32 = 18u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_GET_TEXT_COMPLETIONS_WIDE: u32 = 14u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_GET_WIN32_MAJOR_MINOR_VERSIONS: u32 = 6u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_INLINE_QUERY: u32 = 35u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_MIDORI: u32 = 23u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_MISC_INFORMATION: u32 = 25u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_OPEN_PROCESS_TOKEN: u32 = 26u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_OPEN_THREAD_TOKEN: u32 = 27u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_PROCESS_DESCRIPTORS: u32 = 24u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_QUERY_INFO_TOKEN: u32 = 29u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_READ_CAPTURED_EVENT_CODE_STREAM: u32 = 11u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_READ_USER_MINIDUMP_STREAM: u32 = 7u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_REMOVE_CACHED_SYMBOL_INFO: u32 = 17u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_RESUME_THREAD: u32 = 34u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_SET_ADDITIONAL_CREATE_OPTIONS: u32 = 5u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_SET_DUMP_HEADER: u32 = 22u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_SET_LOCAL_IMPLICIT_COMMAND_LINE: u32 = 9u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_SOURCE_PATH_HAS_SOURCE_SERVER: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_TARGET_CAN_DETACH: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_TARGET_EXCEPTION_CONTEXT: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_TARGET_EXCEPTION_RECORD: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_TARGET_EXCEPTION_THREAD: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_TL_INSTRUMENTATION_AWARE: u32 = 36u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_WOW_MODULE: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_REQUEST_WOW_PROCESS: u32 = 31u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SCOPE_GROUP_ALL: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SCOPE_GROUP_ARGUMENTS: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SCOPE_GROUP_BY_DATAMODEL: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SCOPE_GROUP_LOCALS: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SERVERS_ALL: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SERVERS_DEBUGGER: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SERVERS_PROCESS: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SESSION_ACTIVE: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SESSION_END: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SESSION_END_SESSION_ACTIVE_DETACH: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SESSION_END_SESSION_ACTIVE_TERMINATE: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SESSION_END_SESSION_PASSIVE: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SESSION_FAILURE: u32 = 7u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SESSION_HIBERNATE: u32 = 6u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SESSION_REBOOT: u32 = 5u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SOURCE_IS_STATEMENT: u32 = 1u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_SPECIFIC_FILTER_PARAMETERS {
    pub ExecutionOption: u32,
    pub ContinueOption: u32,
    pub TextSize: u32,
    pub CommandSize: u32,
    pub ArgumentSize: u32,
}
impl DEBUG_SPECIFIC_FILTER_PARAMETERS {}
impl ::std::default::Default for DEBUG_SPECIFIC_FILTER_PARAMETERS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_SPECIFIC_FILTER_PARAMETERS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_SPECIFIC_FILTER_PARAMETERS").field("ExecutionOption", &self.ExecutionOption).field("ContinueOption", &self.ContinueOption).field("TextSize", &self.TextSize).field("CommandSize", &self.CommandSize).field("ArgumentSize", &self.ArgumentSize).finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_SPECIFIC_FILTER_PARAMETERS {
    fn eq(&self, other: &Self) -> bool {
        self.ExecutionOption == other.ExecutionOption && self.ContinueOption == other.ContinueOption && self.TextSize == other.TextSize && self.CommandSize == other.CommandSize && self.ArgumentSize == other.ArgumentSize
    }
}
impl ::std::cmp::Eq for DEBUG_SPECIFIC_FILTER_PARAMETERS {}
unsafe impl ::windows::runtime::Abi for DEBUG_SPECIFIC_FILTER_PARAMETERS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SRCFILE_SYMBOL_CHECKSUMINFO: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SRCFILE_SYMBOL_TOKEN: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SRCFILE_SYMBOL_TOKEN_SOURCE_COMMAND_WIDE: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct DEBUG_STACKFRAME_TYPE(pub i32);
pub const DST_SCRIPT_FRAME: DEBUG_STACKFRAME_TYPE = DEBUG_STACKFRAME_TYPE(0i32);
pub const DST_INTERNAL_FRAME: DEBUG_STACKFRAME_TYPE = DEBUG_STACKFRAME_TYPE(1i32);
pub const DST_INVOCATION_FRAME: DEBUG_STACKFRAME_TYPE = DEBUG_STACKFRAME_TYPE(2i32);
impl ::std::convert::From<i32> for DEBUG_STACKFRAME_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DEBUG_STACKFRAME_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STACK_ARGUMENTS: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STACK_COLUMN_NAMES: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STACK_DML: u32 = 2048u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct DEBUG_STACK_FRAME {
    pub InstructionOffset: u64,
    pub ReturnOffset: u64,
    pub FrameOffset: u64,
    pub StackOffset: u64,
    pub FuncTableEntry: u64,
    pub Params: [u64; 4],
    pub Reserved: [u64; 6],
    pub Virtual: super::super::super::Foundation::BOOL,
    pub FrameNumber: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl DEBUG_STACK_FRAME {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for DEBUG_STACK_FRAME {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for DEBUG_STACK_FRAME {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_STACK_FRAME")
            .field("InstructionOffset", &self.InstructionOffset)
            .field("ReturnOffset", &self.ReturnOffset)
            .field("FrameOffset", &self.FrameOffset)
            .field("StackOffset", &self.StackOffset)
            .field("FuncTableEntry", &self.FuncTableEntry)
            .field("Params", &self.Params)
            .field("Reserved", &self.Reserved)
            .field("Virtual", &self.Virtual)
            .field("FrameNumber", &self.FrameNumber)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for DEBUG_STACK_FRAME {
    fn eq(&self, other: &Self) -> bool {
        self.InstructionOffset == other.InstructionOffset && self.ReturnOffset == other.ReturnOffset && self.FrameOffset == other.FrameOffset && self.StackOffset == other.StackOffset && self.FuncTableEntry == other.FuncTableEntry && self.Params == other.Params && self.Reserved == other.Reserved && self.Virtual == other.Virtual && self.FrameNumber == other.FrameNumber
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for DEBUG_STACK_FRAME {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DEBUG_STACK_FRAME {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STACK_FRAME_ADDRESSES: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STACK_FRAME_ADDRESSES_RA_ONLY: u32 = 256u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STACK_FRAME_ARCH: u32 = 16384u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct DEBUG_STACK_FRAME_EX {
    pub InstructionOffset: u64,
    pub ReturnOffset: u64,
    pub FrameOffset: u64,
    pub StackOffset: u64,
    pub FuncTableEntry: u64,
    pub Params: [u64; 4],
    pub Reserved: [u64; 6],
    pub Virtual: super::super::super::Foundation::BOOL,
    pub FrameNumber: u32,
    pub InlineFrameContext: u32,
    pub Reserved1: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl DEBUG_STACK_FRAME_EX {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for DEBUG_STACK_FRAME_EX {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for DEBUG_STACK_FRAME_EX {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_STACK_FRAME_EX")
            .field("InstructionOffset", &self.InstructionOffset)
            .field("ReturnOffset", &self.ReturnOffset)
            .field("FrameOffset", &self.FrameOffset)
            .field("StackOffset", &self.StackOffset)
            .field("FuncTableEntry", &self.FuncTableEntry)
            .field("Params", &self.Params)
            .field("Reserved", &self.Reserved)
            .field("Virtual", &self.Virtual)
            .field("FrameNumber", &self.FrameNumber)
            .field("InlineFrameContext", &self.InlineFrameContext)
            .field("Reserved1", &self.Reserved1)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for DEBUG_STACK_FRAME_EX {
    fn eq(&self, other: &Self) -> bool {
        self.InstructionOffset == other.InstructionOffset && self.ReturnOffset == other.ReturnOffset && self.FrameOffset == other.FrameOffset && self.StackOffset == other.StackOffset && self.FuncTableEntry == other.FuncTableEntry && self.Params == other.Params && self.Reserved == other.Reserved && self.Virtual == other.Virtual && self.FrameNumber == other.FrameNumber && self.InlineFrameContext == other.InlineFrameContext && self.Reserved1 == other.Reserved1
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for DEBUG_STACK_FRAME_EX {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DEBUG_STACK_FRAME_EX {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STACK_FRAME_MEMORY_USAGE: u32 = 512u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STACK_FRAME_NUMBERS: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STACK_FRAME_OFFSETS: u32 = 4096u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STACK_FUNCTION_INFO: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STACK_NONVOLATILE_REGISTERS: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STACK_PARAMETERS: u32 = 128u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STACK_PARAMETERS_NEWLINE: u32 = 1024u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STACK_PROVIDER: u32 = 8192u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STACK_SOURCE_LINE: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STATUS_BREAK: u32 = 6u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STATUS_GO: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STATUS_GO_HANDLED: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STATUS_GO_NOT_HANDLED: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STATUS_IGNORE_EVENT: u32 = 9u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STATUS_INSIDE_WAIT: u64 = 4294967296u64;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STATUS_MASK: u32 = 31u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STATUS_NO_CHANGE: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STATUS_NO_DEBUGGEE: u32 = 7u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STATUS_OUT_OF_SYNC: u32 = 15u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STATUS_RESTART_REQUESTED: u32 = 10u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STATUS_REVERSE_GO: u32 = 11u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STATUS_REVERSE_STEP_BRANCH: u32 = 12u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STATUS_REVERSE_STEP_INTO: u32 = 14u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STATUS_REVERSE_STEP_OVER: u32 = 13u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STATUS_STEP_BRANCH: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STATUS_STEP_INTO: u32 = 5u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STATUS_STEP_OVER: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STATUS_TIMEOUT: u32 = 17u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STATUS_WAIT_INPUT: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_STATUS_WAIT_TIMEOUT: u64 = 8589934592u64;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_SYMBOL_ENTRY {
    pub ModuleBase: u64,
    pub Offset: u64,
    pub Id: u64,
    pub Arg64: u64,
    pub Size: u32,
    pub Flags: u32,
    pub TypeId: u32,
    pub NameSize: u32,
    pub Token: u32,
    pub Tag: u32,
    pub Arg32: u32,
    pub Reserved: u32,
}
impl DEBUG_SYMBOL_ENTRY {}
impl ::std::default::Default for DEBUG_SYMBOL_ENTRY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_SYMBOL_ENTRY {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_SYMBOL_ENTRY")
            .field("ModuleBase", &self.ModuleBase)
            .field("Offset", &self.Offset)
            .field("Id", &self.Id)
            .field("Arg64", &self.Arg64)
            .field("Size", &self.Size)
            .field("Flags", &self.Flags)
            .field("TypeId", &self.TypeId)
            .field("NameSize", &self.NameSize)
            .field("Token", &self.Token)
            .field("Tag", &self.Tag)
            .field("Arg32", &self.Arg32)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_SYMBOL_ENTRY {
    fn eq(&self, other: &Self) -> bool {
        self.ModuleBase == other.ModuleBase && self.Offset == other.Offset && self.Id == other.Id && self.Arg64 == other.Arg64 && self.Size == other.Size && self.Flags == other.Flags && self.TypeId == other.TypeId && self.NameSize == other.NameSize && self.Token == other.Token && self.Tag == other.Tag && self.Arg32 == other.Arg32 && self.Reserved == other.Reserved
    }
}
impl ::std::cmp::Eq for DEBUG_SYMBOL_ENTRY {}
unsafe impl ::windows::runtime::Abi for DEBUG_SYMBOL_ENTRY {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMBOL_EXPANDED: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMBOL_EXPANSION_LEVEL_MASK: u32 = 15u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMBOL_IS_ARGUMENT: u32 = 256u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMBOL_IS_ARRAY: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMBOL_IS_FLOAT: u32 = 128u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMBOL_IS_LOCAL: u32 = 512u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_SYMBOL_PARAMETERS {
    pub Module: u64,
    pub TypeId: u32,
    pub ParentSymbol: u32,
    pub SubElements: u32,
    pub Flags: u32,
    pub Reserved: u64,
}
impl DEBUG_SYMBOL_PARAMETERS {}
impl ::std::default::Default for DEBUG_SYMBOL_PARAMETERS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_SYMBOL_PARAMETERS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_SYMBOL_PARAMETERS").field("Module", &self.Module).field("TypeId", &self.TypeId).field("ParentSymbol", &self.ParentSymbol).field("SubElements", &self.SubElements).field("Flags", &self.Flags).field("Reserved", &self.Reserved).finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_SYMBOL_PARAMETERS {
    fn eq(&self, other: &Self) -> bool {
        self.Module == other.Module && self.TypeId == other.TypeId && self.ParentSymbol == other.ParentSymbol && self.SubElements == other.SubElements && self.Flags == other.Flags && self.Reserved == other.Reserved
    }
}
impl ::std::cmp::Eq for DEBUG_SYMBOL_PARAMETERS {}
unsafe impl ::windows::runtime::Abi for DEBUG_SYMBOL_PARAMETERS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMBOL_READ_ONLY: u32 = 32u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_SYMBOL_SOURCE_ENTRY {
    pub ModuleBase: u64,
    pub Offset: u64,
    pub FileNameId: u64,
    pub EngineInternal: u64,
    pub Size: u32,
    pub Flags: u32,
    pub FileNameSize: u32,
    pub StartLine: u32,
    pub EndLine: u32,
    pub StartColumn: u32,
    pub EndColumn: u32,
    pub Reserved: u32,
}
impl DEBUG_SYMBOL_SOURCE_ENTRY {}
impl ::std::default::Default for DEBUG_SYMBOL_SOURCE_ENTRY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_SYMBOL_SOURCE_ENTRY {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_SYMBOL_SOURCE_ENTRY")
            .field("ModuleBase", &self.ModuleBase)
            .field("Offset", &self.Offset)
            .field("FileNameId", &self.FileNameId)
            .field("EngineInternal", &self.EngineInternal)
            .field("Size", &self.Size)
            .field("Flags", &self.Flags)
            .field("FileNameSize", &self.FileNameSize)
            .field("StartLine", &self.StartLine)
            .field("EndLine", &self.EndLine)
            .field("StartColumn", &self.StartColumn)
            .field("EndColumn", &self.EndColumn)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_SYMBOL_SOURCE_ENTRY {
    fn eq(&self, other: &Self) -> bool {
        self.ModuleBase == other.ModuleBase && self.Offset == other.Offset && self.FileNameId == other.FileNameId && self.EngineInternal == other.EngineInternal && self.Size == other.Size && self.Flags == other.Flags && self.FileNameSize == other.FileNameSize && self.StartLine == other.StartLine && self.EndLine == other.EndLine && self.StartColumn == other.StartColumn && self.EndColumn == other.EndColumn && self.Reserved == other.Reserved
    }
}
impl ::std::cmp::Eq for DEBUG_SYMBOL_SOURCE_ENTRY {}
unsafe impl ::windows::runtime::Abi for DEBUG_SYMBOL_SOURCE_ENTRY {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMENT_IS_CODE: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMENT_IS_DATA: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMENT_IS_LOCAL: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMENT_IS_MANAGED: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMENT_IS_PARAMETER: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMENT_IS_SYNTHETIC: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMINFO_BREAKPOINT_SOURCE_LINE: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMINFO_GET_MODULE_SYMBOL_NAMES_AND_OFFSETS: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMINFO_GET_SYMBOL_NAME_BY_OFFSET_AND_TAG_WIDE: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMINFO_IMAGEHLP_MODULEW64: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMTYPE_CODEVIEW: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMTYPE_COFF: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMTYPE_DEFERRED: u32 = 5u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMTYPE_DIA: u32 = 7u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMTYPE_EXPORT: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMTYPE_NONE: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMTYPE_PDB: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYMTYPE_SYM: u32 = 6u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYSOBJINFO_CURRENT_PROCESS_COOKIE: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYSOBJINFO_THREAD_BASIC_INFORMATION: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYSOBJINFO_THREAD_NAME_WIDE: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYSVERSTR_BUILD: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_SYSVERSTR_SERVICE_PACK: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TBINFO_AFFINITY: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TBINFO_ALL: u32 = 63u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TBINFO_EXIT_STATUS: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TBINFO_PRIORITY: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TBINFO_PRIORITY_CLASS: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TBINFO_START_OFFSET: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TBINFO_TIMES: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TEXT_ALLOWBREAKPOINTS: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TEXT_ALLOWERRORREPORT: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TEXT_EVALUATETOCODECONTEXT: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TEXT_ISEXPRESSION: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TEXT_ISNONUSERCODE: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TEXT_NOSIDEEFFECTS: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TEXT_RETURNVALUE: u32 = 2u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_THREAD_BASIC_INFORMATION {
    pub Valid: u32,
    pub ExitStatus: u32,
    pub PriorityClass: u32,
    pub Priority: u32,
    pub CreateTime: u64,
    pub ExitTime: u64,
    pub KernelTime: u64,
    pub UserTime: u64,
    pub StartOffset: u64,
    pub Affinity: u64,
}
impl DEBUG_THREAD_BASIC_INFORMATION {}
impl ::std::default::Default for DEBUG_THREAD_BASIC_INFORMATION {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_THREAD_BASIC_INFORMATION {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_THREAD_BASIC_INFORMATION")
            .field("Valid", &self.Valid)
            .field("ExitStatus", &self.ExitStatus)
            .field("PriorityClass", &self.PriorityClass)
            .field("Priority", &self.Priority)
            .field("CreateTime", &self.CreateTime)
            .field("ExitTime", &self.ExitTime)
            .field("KernelTime", &self.KernelTime)
            .field("UserTime", &self.UserTime)
            .field("StartOffset", &self.StartOffset)
            .field("Affinity", &self.Affinity)
            .finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_THREAD_BASIC_INFORMATION {
    fn eq(&self, other: &Self) -> bool {
        self.Valid == other.Valid && self.ExitStatus == other.ExitStatus && self.PriorityClass == other.PriorityClass && self.Priority == other.Priority && self.CreateTime == other.CreateTime && self.ExitTime == other.ExitTime && self.KernelTime == other.KernelTime && self.UserTime == other.UserTime && self.StartOffset == other.StartOffset && self.Affinity == other.Affinity
    }
}
impl ::std::cmp::Eq for DEBUG_THREAD_BASIC_INFORMATION {}
unsafe impl ::windows::runtime::Abi for DEBUG_THREAD_BASIC_INFORMATION {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_TYPED_DATA {
    pub ModBase: u64,
    pub Offset: u64,
    pub EngineHandle: u64,
    pub Data: u64,
    pub Size: u32,
    pub Flags: u32,
    pub TypeId: u32,
    pub BaseTypeId: u32,
    pub Tag: u32,
    pub Register: u32,
    pub Internal: [u64; 9],
}
impl DEBUG_TYPED_DATA {}
impl ::std::default::Default for DEBUG_TYPED_DATA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_TYPED_DATA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DEBUG_TYPED_DATA")
            .field("ModBase", &self.ModBase)
            .field("Offset", &self.Offset)
            .field("EngineHandle", &self.EngineHandle)
            .field("Data", &self.Data)
            .field("Size", &self.Size)
            .field("Flags", &self.Flags)
            .field("TypeId", &self.TypeId)
            .field("BaseTypeId", &self.BaseTypeId)
            .field("Tag", &self.Tag)
            .field("Register", &self.Register)
            .field("Internal", &self.Internal)
            .finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_TYPED_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.ModBase == other.ModBase && self.Offset == other.Offset && self.EngineHandle == other.EngineHandle && self.Data == other.Data && self.Size == other.Size && self.Flags == other.Flags && self.TypeId == other.TypeId && self.BaseTypeId == other.BaseTypeId && self.Tag == other.Tag && self.Register == other.Register && self.Internal == other.Internal
    }
}
impl ::std::cmp::Eq for DEBUG_TYPED_DATA {}
unsafe impl ::windows::runtime::Abi for DEBUG_TYPED_DATA {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TYPED_DATA_IS_IN_MEMORY: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TYPED_DATA_PHYSICAL_CACHED: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TYPED_DATA_PHYSICAL_DEFAULT: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TYPED_DATA_PHYSICAL_MEMORY: u32 = 14u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TYPED_DATA_PHYSICAL_UNCACHED: u32 = 6u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TYPED_DATA_PHYSICAL_WRITE_COMBINED: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TYPEOPTS_FORCERADIX_OUTPUT: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TYPEOPTS_LONGSTATUS_DISPLAY: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TYPEOPTS_MATCH_MAXSIZE: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_TYPEOPTS_UNICODE_DISPLAY: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_USER_WINDOWS_DUMP: u32 = 1025u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_USER_WINDOWS_DUMP_WINDOWS_CE: u32 = 1029u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_USER_WINDOWS_IDNA: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_USER_WINDOWS_PROCESS: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_USER_WINDOWS_PROCESS_SERVER: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_USER_WINDOWS_REPT: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_USER_WINDOWS_SMALL_DUMP: u32 = 1024u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct DEBUG_VALUE {
    pub Anonymous: DEBUG_VALUE_0,
    pub TailOfRawBytes: u32,
    pub Type: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl DEBUG_VALUE {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for DEBUG_VALUE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for DEBUG_VALUE {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for DEBUG_VALUE {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DEBUG_VALUE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub union DEBUG_VALUE_0 {
    pub I8: u8,
    pub I16: u16,
    pub I32: u32,
    pub Anonymous: DEBUG_VALUE_0_0,
    pub F32: f32,
    pub F64: f64,
    pub F80Bytes: [u8; 10],
    pub F82Bytes: [u8; 11],
    pub F128Bytes: [u8; 16],
    pub VI8: [u8; 16],
    pub VI16: [u16; 8],
    pub VI32: [u32; 4],
    pub VI64: [u64; 2],
    pub VF32: [f32; 4],
    pub VF64: [f64; 2],
    pub I64Parts32: DEBUG_VALUE_0_2,
    pub F128Parts64: DEBUG_VALUE_0_1,
    pub RawBytes: [u8; 24],
}
#[cfg(feature = "Win32_Foundation")]
impl DEBUG_VALUE_0 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for DEBUG_VALUE_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for DEBUG_VALUE_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for DEBUG_VALUE_0 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DEBUG_VALUE_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct DEBUG_VALUE_0_0 {
    pub I64: u64,
    pub Nat: super::super::super::Foundation::BOOL,
}
#[cfg(feature = "Win32_Foundation")]
impl DEBUG_VALUE_0_0 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for DEBUG_VALUE_0_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for DEBUG_VALUE_0_0 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_Anonymous_e__Struct").field("I64", &self.I64).field("Nat", &self.Nat).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for DEBUG_VALUE_0_0 {
    fn eq(&self, other: &Self) -> bool {
        self.I64 == other.I64 && self.Nat == other.Nat
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for DEBUG_VALUE_0_0 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DEBUG_VALUE_0_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_VALUE_0_1 {
    pub LowPart: u64,
    pub HighPart: i64,
}
impl DEBUG_VALUE_0_1 {}
impl ::std::default::Default for DEBUG_VALUE_0_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_VALUE_0_1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_F128Parts64_e__Struct").field("LowPart", &self.LowPart).field("HighPart", &self.HighPart).finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_VALUE_0_1 {
    fn eq(&self, other: &Self) -> bool {
        self.LowPart == other.LowPart && self.HighPart == other.HighPart
    }
}
impl ::std::cmp::Eq for DEBUG_VALUE_0_1 {}
unsafe impl ::windows::runtime::Abi for DEBUG_VALUE_0_1 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DEBUG_VALUE_0_2 {
    pub LowPart: u32,
    pub HighPart: u32,
}
impl DEBUG_VALUE_0_2 {}
impl ::std::default::Default for DEBUG_VALUE_0_2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DEBUG_VALUE_0_2 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_I64Parts32_e__Struct").field("LowPart", &self.LowPart).field("HighPart", &self.HighPart).finish()
    }
}
impl ::std::cmp::PartialEq for DEBUG_VALUE_0_2 {
    fn eq(&self, other: &Self) -> bool {
        self.LowPart == other.LowPart && self.HighPart == other.HighPart
    }
}
impl ::std::cmp::Eq for DEBUG_VALUE_0_2 {}
unsafe impl ::windows::runtime::Abi for DEBUG_VALUE_0_2 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_VALUE_FLOAT128: u32 = 9u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_VALUE_FLOAT32: u32 = 5u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_VALUE_FLOAT64: u32 = 6u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_VALUE_FLOAT80: u32 = 7u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_VALUE_FLOAT82: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_VALUE_INT16: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_VALUE_INT32: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_VALUE_INT64: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_VALUE_INT8: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_VALUE_INVALID: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_VALUE_TYPES: u32 = 12u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_VALUE_VECTOR128: u32 = 11u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_VALUE_VECTOR64: u32 = 10u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_VSEARCH_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_VSEARCH_WRITABLE_ONLY: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_VSOURCE_DEBUGGEE: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_VSOURCE_DUMP_WITHOUT_MEMINFO: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_VSOURCE_INVALID: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_VSOURCE_MAPPED_IMAGE: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DEBUG_WAIT_DEFAULT: u32 = 0u32;
#[cfg(feature = "Win32_Foundation")]
pub type DIGEST_FUNCTION = unsafe extern "system" fn(refdata: *mut ::std::ffi::c_void, pdata: *mut u8, dwlength: u32) -> super::super::super::Foundation::BOOL;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DMP_CONTEXT_RECORD_SIZE_32: u32 = 1200u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DMP_CONTEXT_RECORD_SIZE_64: u32 = 3000u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DMP_HEADER_COMMENT_SIZE: u32 = 128u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DMP_PHYSICAL_MEMORY_BLOCK_SIZE_32: u32 = 700u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DMP_PHYSICAL_MEMORY_BLOCK_SIZE_64: u32 = 700u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DMP_RESERVED_0_SIZE_32: u32 = 1760u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DMP_RESERVED_0_SIZE_64: u32 = 4008u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DMP_RESERVED_2_SIZE_32: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DMP_RESERVED_3_SIZE_32: u32 = 56u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct DOCUMENTNAMETYPE(pub i32);
pub const DOCUMENTNAMETYPE_APPNODE: DOCUMENTNAMETYPE = DOCUMENTNAMETYPE(0i32);
pub const DOCUMENTNAMETYPE_TITLE: DOCUMENTNAMETYPE = DOCUMENTNAMETYPE(1i32);
pub const DOCUMENTNAMETYPE_FILE_TAIL: DOCUMENTNAMETYPE = DOCUMENTNAMETYPE(2i32);
pub const DOCUMENTNAMETYPE_URL: DOCUMENTNAMETYPE = DOCUMENTNAMETYPE(3i32);
pub const DOCUMENTNAMETYPE_UNIQUE_TITLE: DOCUMENTNAMETYPE = DOCUMENTNAMETYPE(4i32);
pub const DOCUMENTNAMETYPE_SOURCE_MAP_URL: DOCUMENTNAMETYPE = DOCUMENTNAMETYPE(5i32);
impl ::std::convert::From<i32> for DOCUMENTNAMETYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for DOCUMENTNAMETYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DSLFLAG_MISMATCHED_DBG: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DSLFLAG_MISMATCHED_PDB: u32 = 1u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union DUMP_FILE_ATTRIBUTES {
    pub Anonymous: DUMP_FILE_ATTRIBUTES_0,
    pub Attributes: u32,
}
impl DUMP_FILE_ATTRIBUTES {}
impl ::std::default::Default for DUMP_FILE_ATTRIBUTES {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for DUMP_FILE_ATTRIBUTES {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for DUMP_FILE_ATTRIBUTES {}
unsafe impl ::windows::runtime::Abi for DUMP_FILE_ATTRIBUTES {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct DUMP_FILE_ATTRIBUTES_0 {
    pub _bitfield: u32,
}
impl DUMP_FILE_ATTRIBUTES_0 {}
impl ::std::default::Default for DUMP_FILE_ATTRIBUTES_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for DUMP_FILE_ATTRIBUTES_0 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_Anonymous_e__Struct").field("_bitfield", &self._bitfield).finish()
    }
}
impl ::std::cmp::PartialEq for DUMP_FILE_ATTRIBUTES_0 {
    fn eq(&self, other: &Self) -> bool {
        self._bitfield == other._bitfield
    }
}
impl ::std::cmp::Eq for DUMP_FILE_ATTRIBUTES_0 {}
unsafe impl ::windows::runtime::Abi for DUMP_FILE_ATTRIBUTES_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
pub struct DUMP_HEADER32 {
    pub Signature: u32,
    pub ValidDump: u32,
    pub MajorVersion: u32,
    pub MinorVersion: u32,
    pub DirectoryTableBase: u32,
    pub PfnDataBase: u32,
    pub PsLoadedModuleList: u32,
    pub PsActiveProcessHead: u32,
    pub MachineImageType: u32,
    pub NumberProcessors: u32,
    pub BugCheckCode: u32,
    pub BugCheckParameter1: u32,
    pub BugCheckParameter2: u32,
    pub BugCheckParameter3: u32,
    pub BugCheckParameter4: u32,
    pub VersionUser: [super::super::super::Foundation::CHAR; 32],
    pub PaeEnabled: u8,
    pub KdSecondaryVersion: u8,
    pub Spare3: [u8; 2],
    pub KdDebuggerDataBlock: u32,
    pub Anonymous: DUMP_HEADER32_0,
    pub ContextRecord: [u8; 1200],
    pub Exception: super::super::SystemServices::EXCEPTION_RECORD32,
    pub Comment: [super::super::super::Foundation::CHAR; 128],
    pub Attributes: DUMP_FILE_ATTRIBUTES,
    pub BootId: u32,
    pub _reserved0: [u8; 1760],
    pub DumpType: u32,
    pub MiniDumpFields: u32,
    pub SecondaryDataState: u32,
    pub ProductType: u32,
    pub SuiteMask: u32,
    pub WriterStatus: u32,
    pub RequiredDumpSpace: i64,
    pub _reserved2: [u8; 16],
    pub SystemUpTime: i64,
    pub SystemTime: i64,
    pub _reserved3: [u8; 56],
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl DUMP_HEADER32 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::default::Default for DUMP_HEADER32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::PartialEq for DUMP_HEADER32 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::Eq for DUMP_HEADER32 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
unsafe impl ::windows::runtime::Abi for DUMP_HEADER32 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union DUMP_HEADER32_0 {
    pub PhysicalMemoryBlock: PHYSICAL_MEMORY_DESCRIPTOR32,
    pub PhysicalMemoryBlockBuffer: [u8; 700],
}
impl DUMP_HEADER32_0 {}
impl ::std::default::Default for DUMP_HEADER32_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for DUMP_HEADER32_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for DUMP_HEADER32_0 {}
unsafe impl ::windows::runtime::Abi for DUMP_HEADER32_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct DUMP_HEADER64 {
    pub Signature: u32,
    pub ValidDump: u32,
    pub MajorVersion: u32,
    pub MinorVersion: u32,
    pub DirectoryTableBase: u64,
    pub PfnDataBase: u64,
    pub PsLoadedModuleList: u64,
    pub PsActiveProcessHead: u64,
    pub MachineImageType: u32,
    pub NumberProcessors: u32,
    pub BugCheckCode: u32,
    pub BugCheckParameter1: u64,
    pub BugCheckParameter2: u64,
    pub BugCheckParameter3: u64,
    pub BugCheckParameter4: u64,
    pub VersionUser: [super::super::super::Foundation::CHAR; 32],
    pub KdDebuggerDataBlock: u64,
    pub Anonymous: DUMP_HEADER64_0,
    pub ContextRecord: [u8; 3000],
    pub Exception: EXCEPTION_RECORD64,
    pub DumpType: u32,
    pub RequiredDumpSpace: i64,
    pub SystemTime: i64,
    pub Comment: [super::super::super::Foundation::CHAR; 128],
    pub SystemUpTime: i64,
    pub MiniDumpFields: u32,
    pub SecondaryDataState: u32,
    pub ProductType: u32,
    pub SuiteMask: u32,
    pub WriterStatus: u32,
    pub Unused1: u8,
    pub KdSecondaryVersion: u8,
    pub Unused: [u8; 2],
    pub Attributes: DUMP_FILE_ATTRIBUTES,
    pub BootId: u32,
    pub _reserved0: [u8; 4008],
}
#[cfg(feature = "Win32_Foundation")]
impl DUMP_HEADER64 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for DUMP_HEADER64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for DUMP_HEADER64 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for DUMP_HEADER64 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DUMP_HEADER64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union DUMP_HEADER64_0 {
    pub PhysicalMemoryBlock: PHYSICAL_MEMORY_DESCRIPTOR64,
    pub PhysicalMemoryBlockBuffer: [u8; 700],
}
impl DUMP_HEADER64_0 {}
impl ::std::default::Default for DUMP_HEADER64_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for DUMP_HEADER64_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for DUMP_HEADER64_0 {}
unsafe impl ::windows::runtime::Abi for DUMP_HEADER64_0 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DUMP_SUMMARY_VALID_CURRENT_USER_VA: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const DUMP_SUMMARY_VALID_KERNEL_VA: u32 = 1u32;
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn DbgHelpCreateUserDump<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(filename: Param0, callback: ::std::option::Option<PDBGHELP_CREATE_USER_DUMP_CALLBACK>, userdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DbgHelpCreateUserDump(filename: super::super::super::Foundation::PSTR, callback: ::windows::runtime::RawPtr, userdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(DbgHelpCreateUserDump(filename.into_param().abi(), ::std::mem::transmute(callback), ::std::mem::transmute(userdata)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn DbgHelpCreateUserDumpW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(filename: Param0, callback: ::std::option::Option<PDBGHELP_CREATE_USER_DUMP_CALLBACK>, userdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DbgHelpCreateUserDumpW(filename: super::super::super::Foundation::PWSTR, callback: ::windows::runtime::RawPtr, userdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(DbgHelpCreateUserDumpW(filename.into_param().abi(), ::std::mem::transmute(callback), ::std::mem::transmute(userdata)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn DebugActiveProcess(dwprocessid: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DebugActiveProcess(dwprocessid: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(DebugActiveProcess(::std::mem::transmute(dwprocessid)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn DebugActiveProcessStop(dwprocessid: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DebugActiveProcessStop(dwprocessid: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(DebugActiveProcessStop(::std::mem::transmute(dwprocessid)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct DebugBaseEventCallbacks(::windows::runtime::IUnknown);
impl DebugBaseEventCallbacks {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInterestMask(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Breakpoint<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugBreakpoint>>(&self, bp: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), bp.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Exception(&self, exception: *const EXCEPTION_RECORD64, firstchance: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(exception), ::std::mem::transmute(firstchance)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateThread(&self, handle: u64, dataoffset: u64, startoffset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), ::std::mem::transmute(dataoffset), ::std::mem::transmute(startoffset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ExitThread(&self, exitcode: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(exitcode)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessA<'a, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: Param4, imagename: Param5, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(imagefilehandle),
            ::std::mem::transmute(handle),
            ::std::mem::transmute(baseoffset),
            ::std::mem::transmute(modulesize),
            modulename.into_param().abi(),
            imagename.into_param().abi(),
            ::std::mem::transmute(checksum),
            ::std::mem::transmute(timedatestamp),
            ::std::mem::transmute(initialthreadhandle),
            ::std::mem::transmute(threaddataoffset),
            ::std::mem::transmute(startoffset),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ExitProcess(&self, exitcode: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(exitcode)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn LoadModule<'a, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: Param3, imagename: Param4, checksum: u32, timedatestamp: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(imagefilehandle), ::std::mem::transmute(baseoffset), ::std::mem::transmute(modulesize), modulename.into_param().abi(), imagename.into_param().abi(), ::std::mem::transmute(checksum), ::std::mem::transmute(timedatestamp)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn UnloadModule<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, imagebasename: Param0, baseoffset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), imagebasename.into_param().abi(), ::std::mem::transmute(baseoffset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SystemError(&self, error: u32, level: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(error), ::std::mem::transmute(level)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SessionStatus(&self, status: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(status)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ChangeDebuggeeState(&self, flags: u32, argument: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(argument)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ChangeEngineState(&self, flags: u32, argument: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(argument)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ChangeSymbolState(&self, flags: u32, argument: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(argument)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for DebugBaseEventCallbacks {
    type Vtable = DebugBaseEventCallbacks_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::zeroed();
}
impl ::std::convert::From<DebugBaseEventCallbacks> for IDebugEventCallbacks {
    fn from(value: DebugBaseEventCallbacks) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&DebugBaseEventCallbacks> for IDebugEventCallbacks {
    fn from(value: &DebugBaseEventCallbacks) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugEventCallbacks> for DebugBaseEventCallbacks {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugEventCallbacks> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugEventCallbacks>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugEventCallbacks> for &DebugBaseEventCallbacks {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugEventCallbacks> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugEventCallbacks>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct DebugBaseEventCallbacks_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bp: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, exception: *const EXCEPTION_RECORD64, firstchance: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, dataoffset: u64, startoffset: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, exitcode: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PSTR, imagename: super::super::super::Foundation::PSTR, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, exitcode: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PSTR, imagename: super::super::super::Foundation::PSTR, checksum: u32, timedatestamp: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, imagebasename: super::super::super::Foundation::PSTR, baseoffset: u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, error: u32, level: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, status: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, argument: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, argument: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, argument: u64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct DebugBaseEventCallbacksWide(::windows::runtime::IUnknown);
impl DebugBaseEventCallbacksWide {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInterestMask(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Breakpoint<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugBreakpoint2>>(&self, bp: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), bp.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Exception(&self, exception: *const EXCEPTION_RECORD64, firstchance: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(exception), ::std::mem::transmute(firstchance)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateThread(&self, handle: u64, dataoffset: u64, startoffset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), ::std::mem::transmute(dataoffset), ::std::mem::transmute(startoffset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ExitThread(&self, exitcode: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(exitcode)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessA<'a, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: Param4, imagename: Param5, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(imagefilehandle),
            ::std::mem::transmute(handle),
            ::std::mem::transmute(baseoffset),
            ::std::mem::transmute(modulesize),
            modulename.into_param().abi(),
            imagename.into_param().abi(),
            ::std::mem::transmute(checksum),
            ::std::mem::transmute(timedatestamp),
            ::std::mem::transmute(initialthreadhandle),
            ::std::mem::transmute(threaddataoffset),
            ::std::mem::transmute(startoffset),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ExitProcess(&self, exitcode: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(exitcode)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn LoadModule<'a, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: Param3, imagename: Param4, checksum: u32, timedatestamp: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(imagefilehandle), ::std::mem::transmute(baseoffset), ::std::mem::transmute(modulesize), modulename.into_param().abi(), imagename.into_param().abi(), ::std::mem::transmute(checksum), ::std::mem::transmute(timedatestamp)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn UnloadModule<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, imagebasename: Param0, baseoffset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), imagebasename.into_param().abi(), ::std::mem::transmute(baseoffset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SystemError(&self, error: u32, level: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(error), ::std::mem::transmute(level)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SessionStatus(&self, status: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(status)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ChangeDebuggeeState(&self, flags: u32, argument: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(argument)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ChangeEngineState(&self, flags: u32, argument: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(argument)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ChangeSymbolState(&self, flags: u32, argument: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(argument)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for DebugBaseEventCallbacksWide {
    type Vtable = DebugBaseEventCallbacksWide_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::zeroed();
}
impl ::std::convert::From<DebugBaseEventCallbacksWide> for IDebugEventCallbacksWide {
    fn from(value: DebugBaseEventCallbacksWide) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&DebugBaseEventCallbacksWide> for IDebugEventCallbacksWide {
    fn from(value: &DebugBaseEventCallbacksWide) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugEventCallbacksWide> for DebugBaseEventCallbacksWide {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugEventCallbacksWide> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugEventCallbacksWide>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugEventCallbacksWide> for &DebugBaseEventCallbacksWide {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugEventCallbacksWide> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugEventCallbacksWide>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct DebugBaseEventCallbacksWide_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bp: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, exception: *const EXCEPTION_RECORD64, firstchance: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, dataoffset: u64, startoffset: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, exitcode: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PWSTR, imagename: super::super::super::Foundation::PWSTR, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, exitcode: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PWSTR, imagename: super::super::super::Foundation::PWSTR, checksum: u32, timedatestamp: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, imagebasename: super::super::super::Foundation::PWSTR, baseoffset: u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, error: u32, level: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, status: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, argument: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, argument: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, argument: u64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn DebugBreak() {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DebugBreak();
        }
        ::std::mem::transmute(DebugBreak())
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn DebugBreakProcess<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(process: Param0) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DebugBreakProcess(process: super::super::super::Foundation::HANDLE) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(DebugBreakProcess(process.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn DebugConnect<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(remoteoptions: Param0, interfaceid: *const ::windows::runtime::GUID, interface: *mut *mut ::std::ffi::c_void) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DebugConnect(remoteoptions: super::super::super::Foundation::PSTR, interfaceid: *const ::windows::runtime::GUID, interface: *mut *mut ::std::ffi::c_void) -> ::windows::runtime::HRESULT;
        }
        DebugConnect(remoteoptions.into_param().abi(), ::std::mem::transmute(interfaceid), ::std::mem::transmute(interface)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn DebugConnectWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(remoteoptions: Param0, interfaceid: *const ::windows::runtime::GUID, interface: *mut *mut ::std::ffi::c_void) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DebugConnectWide(remoteoptions: super::super::super::Foundation::PWSTR, interfaceid: *const ::windows::runtime::GUID, interface: *mut *mut ::std::ffi::c_void) -> ::windows::runtime::HRESULT;
        }
        DebugConnectWide(remoteoptions.into_param().abi(), ::std::mem::transmute(interfaceid), ::std::mem::transmute(interface)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn DebugCreate(interfaceid: *const ::windows::runtime::GUID, interface: *mut *mut ::std::ffi::c_void) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DebugCreate(interfaceid: *const ::windows::runtime::GUID, interface: *mut *mut ::std::ffi::c_void) -> ::windows::runtime::HRESULT;
        }
        DebugCreate(::std::mem::transmute(interfaceid), ::std::mem::transmute(interface)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn DebugCreateEx(interfaceid: *const ::windows::runtime::GUID, dbgengoptions: u32, interface: *mut *mut ::std::ffi::c_void) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DebugCreateEx(interfaceid: *const ::windows::runtime::GUID, dbgengoptions: u32, interface: *mut *mut ::std::ffi::c_void) -> ::windows::runtime::HRESULT;
        }
        DebugCreateEx(::std::mem::transmute(interfaceid), ::std::mem::transmute(dbgengoptions), ::std::mem::transmute(interface)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const DebugHelper: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(201113696, 35869, 4560, [172, 205, 0, 170, 0, 96, 39, 92]);
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct DebugPropertyInfo {
    pub m_dwValidFields: u32,
    pub m_bstrName: super::super::super::Foundation::BSTR,
    pub m_bstrType: super::super::super::Foundation::BSTR,
    pub m_bstrValue: super::super::super::Foundation::BSTR,
    pub m_bstrFullName: super::super::super::Foundation::BSTR,
    pub m_dwAttrib: u32,
    pub m_pDebugProp: ::std::option::Option<IDebugProperty>,
}
#[cfg(feature = "Win32_Foundation")]
impl DebugPropertyInfo {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for DebugPropertyInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for DebugPropertyInfo {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DebugPropertyInfo")
            .field("m_dwValidFields", &self.m_dwValidFields)
            .field("m_bstrName", &self.m_bstrName)
            .field("m_bstrType", &self.m_bstrType)
            .field("m_bstrValue", &self.m_bstrValue)
            .field("m_bstrFullName", &self.m_bstrFullName)
            .field("m_dwAttrib", &self.m_dwAttrib)
            .field("m_pDebugProp", &self.m_pDebugProp)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for DebugPropertyInfo {
    fn eq(&self, other: &Self) -> bool {
        self.m_dwValidFields == other.m_dwValidFields && self.m_bstrName == other.m_bstrName && self.m_bstrType == other.m_bstrType && self.m_bstrValue == other.m_bstrValue && self.m_bstrFullName == other.m_bstrFullName && self.m_dwAttrib == other.m_dwAttrib && self.m_pDebugProp == other.m_pDebugProp
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for DebugPropertyInfo {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DebugPropertyInfo {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn DebugSetProcessKillOnExit<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(killonexit: Param0) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DebugSetProcessKillOnExit(killonexit: super::super::super::Foundation::BOOL) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(DebugSetProcessKillOnExit(killonexit.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct DebugStackFrameDescriptor {
    pub pdsf: ::std::option::Option<IDebugStackFrame>,
    pub dwMin: u32,
    pub dwLim: u32,
    pub fFinal: super::super::super::Foundation::BOOL,
    pub punkFinal: ::std::option::Option<::windows::runtime::IUnknown>,
}
#[cfg(feature = "Win32_Foundation")]
impl DebugStackFrameDescriptor {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for DebugStackFrameDescriptor {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for DebugStackFrameDescriptor {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DebugStackFrameDescriptor").field("pdsf", &self.pdsf).field("dwMin", &self.dwMin).field("dwLim", &self.dwLim).field("fFinal", &self.fFinal).field("punkFinal", &self.punkFinal).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for DebugStackFrameDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.pdsf == other.pdsf && self.dwMin == other.dwMin && self.dwLim == other.dwLim && self.fFinal == other.fFinal && self.punkFinal == other.punkFinal
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for DebugStackFrameDescriptor {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DebugStackFrameDescriptor {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct DebugStackFrameDescriptor64 {
    pub pdsf: ::std::option::Option<IDebugStackFrame>,
    pub dwMin: u64,
    pub dwLim: u64,
    pub fFinal: super::super::super::Foundation::BOOL,
    pub punkFinal: ::std::option::Option<::windows::runtime::IUnknown>,
}
#[cfg(feature = "Win32_Foundation")]
impl DebugStackFrameDescriptor64 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for DebugStackFrameDescriptor64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for DebugStackFrameDescriptor64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("DebugStackFrameDescriptor64").field("pdsf", &self.pdsf).field("dwMin", &self.dwMin).field("dwLim", &self.dwLim).field("fFinal", &self.fFinal).field("punkFinal", &self.punkFinal).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for DebugStackFrameDescriptor64 {
    fn eq(&self, other: &Self) -> bool {
        self.pdsf == other.pdsf && self.dwMin == other.dwMin && self.dwLim == other.dwLim && self.fFinal == other.fFinal && self.punkFinal == other.punkFinal
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for DebugStackFrameDescriptor64 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for DebugStackFrameDescriptor64 {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn DecodePointer(ptr: *const ::std::ffi::c_void) -> *mut ::std::ffi::c_void {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DecodePointer(ptr: *const ::std::ffi::c_void) -> *mut ::std::ffi::c_void;
        }
        ::std::mem::transmute(DecodePointer(::std::mem::transmute(ptr)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn DecodeRemotePointer<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(processhandle: Param0, ptr: *const ::std::ffi::c_void, decodedptr: *mut *mut ::std::ffi::c_void) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DecodeRemotePointer(processhandle: super::super::super::Foundation::HANDLE, ptr: *const ::std::ffi::c_void, decodedptr: *mut *mut ::std::ffi::c_void) -> ::windows::runtime::HRESULT;
        }
        DecodeRemotePointer(processhandle.into_param().abi(), ::std::mem::transmute(ptr), ::std::mem::transmute(decodedptr)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn DecodeSystemPointer(ptr: *const ::std::ffi::c_void) -> *mut ::std::ffi::c_void {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DecodeSystemPointer(ptr: *const ::std::ffi::c_void) -> *mut ::std::ffi::c_void;
        }
        ::std::mem::transmute(DecodeSystemPointer(::std::mem::transmute(ptr)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const DefaultDebugSessionProvider: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2202085538, 20980, 4560, [143, 32, 0, 128, 95, 44, 208, 100]);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct ERRORRESUMEACTION(pub i32);
pub const ERRORRESUMEACTION_ReexecuteErrorStatement: ERRORRESUMEACTION = ERRORRESUMEACTION(0i32);
pub const ERRORRESUMEACTION_AbortCallAndReturnErrorToCaller: ERRORRESUMEACTION = ERRORRESUMEACTION(1i32);
pub const ERRORRESUMEACTION_SkipErrorStatement: ERRORRESUMEACTION = ERRORRESUMEACTION(2i32);
impl ::std::convert::From<i32> for ERRORRESUMEACTION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for ERRORRESUMEACTION {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const ERROR_DBG_CANCELLED: u32 = 3221226695u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const ERROR_DBG_TIMEOUT: u32 = 3221226932u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const ERROR_IMAGE_NOT_STRIPPED: u32 = 34816u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const ERROR_NO_DBG_POINTER: u32 = 34817u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const ERROR_NO_PDB_POINTER: u32 = 34818u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const ESLFLAG_FULLPATH: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const ESLFLAG_INLINE_SITE: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const ESLFLAG_NEAREST: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const ESLFLAG_NEXT: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const ESLFLAG_PREV: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const EVENT_SRCSPEW: u32 = 100u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const EVENT_SRCSPEW_END: u32 = 199u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const EVENT_SRCSPEW_START: u32 = 100u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct EXCEPTION_DEBUG_INFO {
    pub ExceptionRecord: EXCEPTION_RECORD,
    pub dwFirstChance: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl EXCEPTION_DEBUG_INFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for EXCEPTION_DEBUG_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for EXCEPTION_DEBUG_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("EXCEPTION_DEBUG_INFO").field("ExceptionRecord", &self.ExceptionRecord).field("dwFirstChance", &self.dwFirstChance).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for EXCEPTION_DEBUG_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.ExceptionRecord == other.ExceptionRecord && self.dwFirstChance == other.dwFirstChance
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for EXCEPTION_DEBUG_INFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for EXCEPTION_DEBUG_INFO {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
pub struct EXCEPTION_POINTERS {
    pub ExceptionRecord: *mut EXCEPTION_RECORD,
    pub ContextRecord: *mut CONTEXT,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl EXCEPTION_POINTERS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::default::Default for EXCEPTION_POINTERS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::fmt::Debug for EXCEPTION_POINTERS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("EXCEPTION_POINTERS").field("ExceptionRecord", &self.ExceptionRecord).field("ContextRecord", &self.ContextRecord).finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::PartialEq for EXCEPTION_POINTERS {
    fn eq(&self, other: &Self) -> bool {
        self.ExceptionRecord == other.ExceptionRecord && self.ContextRecord == other.ContextRecord
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::Eq for EXCEPTION_POINTERS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
unsafe impl ::windows::runtime::Abi for EXCEPTION_POINTERS {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct EXCEPTION_RECORD {
    pub ExceptionCode: super::super::super::Foundation::NTSTATUS,
    pub ExceptionFlags: u32,
    pub ExceptionRecord: *mut EXCEPTION_RECORD,
    pub ExceptionAddress: *mut ::std::ffi::c_void,
    pub NumberParameters: u32,
    pub ExceptionInformation: [usize; 15],
}
#[cfg(feature = "Win32_Foundation")]
impl EXCEPTION_RECORD {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for EXCEPTION_RECORD {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for EXCEPTION_RECORD {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("EXCEPTION_RECORD")
            .field("ExceptionCode", &self.ExceptionCode)
            .field("ExceptionFlags", &self.ExceptionFlags)
            .field("ExceptionRecord", &self.ExceptionRecord)
            .field("ExceptionAddress", &self.ExceptionAddress)
            .field("NumberParameters", &self.NumberParameters)
            .field("ExceptionInformation", &self.ExceptionInformation)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for EXCEPTION_RECORD {
    fn eq(&self, other: &Self) -> bool {
        self.ExceptionCode == other.ExceptionCode && self.ExceptionFlags == other.ExceptionFlags && self.ExceptionRecord == other.ExceptionRecord && self.ExceptionAddress == other.ExceptionAddress && self.NumberParameters == other.NumberParameters && self.ExceptionInformation == other.ExceptionInformation
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for EXCEPTION_RECORD {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for EXCEPTION_RECORD {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct EXCEPTION_RECORD64 {
    pub ExceptionCode: super::super::super::Foundation::NTSTATUS,
    pub ExceptionFlags: u32,
    pub ExceptionRecord: u64,
    pub ExceptionAddress: u64,
    pub NumberParameters: u32,
    pub __unusedAlignment: u32,
    pub ExceptionInformation: [u64; 15],
}
#[cfg(feature = "Win32_Foundation")]
impl EXCEPTION_RECORD64 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for EXCEPTION_RECORD64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for EXCEPTION_RECORD64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("EXCEPTION_RECORD64")
            .field("ExceptionCode", &self.ExceptionCode)
            .field("ExceptionFlags", &self.ExceptionFlags)
            .field("ExceptionRecord", &self.ExceptionRecord)
            .field("ExceptionAddress", &self.ExceptionAddress)
            .field("NumberParameters", &self.NumberParameters)
            .field("__unusedAlignment", &self.__unusedAlignment)
            .field("ExceptionInformation", &self.ExceptionInformation)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for EXCEPTION_RECORD64 {
    fn eq(&self, other: &Self) -> bool {
        self.ExceptionCode == other.ExceptionCode && self.ExceptionFlags == other.ExceptionFlags && self.ExceptionRecord == other.ExceptionRecord && self.ExceptionAddress == other.ExceptionAddress && self.NumberParameters == other.NumberParameters && self.__unusedAlignment == other.__unusedAlignment && self.ExceptionInformation == other.ExceptionInformation
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for EXCEPTION_RECORD64 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for EXCEPTION_RECORD64 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const EXIT_ON_CONTROLC: u32 = 8u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct EXIT_PROCESS_DEBUG_INFO {
    pub dwExitCode: u32,
}
impl EXIT_PROCESS_DEBUG_INFO {}
impl ::std::default::Default for EXIT_PROCESS_DEBUG_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for EXIT_PROCESS_DEBUG_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("EXIT_PROCESS_DEBUG_INFO").field("dwExitCode", &self.dwExitCode).finish()
    }
}
impl ::std::cmp::PartialEq for EXIT_PROCESS_DEBUG_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.dwExitCode == other.dwExitCode
    }
}
impl ::std::cmp::Eq for EXIT_PROCESS_DEBUG_INFO {}
unsafe impl ::windows::runtime::Abi for EXIT_PROCESS_DEBUG_INFO {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct EXIT_THREAD_DEBUG_INFO {
    pub dwExitCode: u32,
}
impl EXIT_THREAD_DEBUG_INFO {}
impl ::std::default::Default for EXIT_THREAD_DEBUG_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for EXIT_THREAD_DEBUG_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("EXIT_THREAD_DEBUG_INFO").field("dwExitCode", &self.dwExitCode).finish()
    }
}
impl ::std::cmp::PartialEq for EXIT_THREAD_DEBUG_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.dwExitCode == other.dwExitCode
    }
}
impl ::std::cmp::Eq for EXIT_THREAD_DEBUG_INFO {}
unsafe impl ::windows::runtime::Abi for EXIT_THREAD_DEBUG_INFO {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct EXTSTACKTRACE {
    pub FramePointer: u32,
    pub ProgramCounter: u32,
    pub ReturnAddress: u32,
    pub Args: [u32; 4],
}
impl EXTSTACKTRACE {}
impl ::std::default::Default for EXTSTACKTRACE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for EXTSTACKTRACE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("EXTSTACKTRACE").field("FramePointer", &self.FramePointer).field("ProgramCounter", &self.ProgramCounter).field("ReturnAddress", &self.ReturnAddress).field("Args", &self.Args).finish()
    }
}
impl ::std::cmp::PartialEq for EXTSTACKTRACE {
    fn eq(&self, other: &Self) -> bool {
        self.FramePointer == other.FramePointer && self.ProgramCounter == other.ProgramCounter && self.ReturnAddress == other.ReturnAddress && self.Args == other.Args
    }
}
impl ::std::cmp::Eq for EXTSTACKTRACE {}
unsafe impl ::windows::runtime::Abi for EXTSTACKTRACE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct EXTSTACKTRACE32 {
    pub FramePointer: u32,
    pub ProgramCounter: u32,
    pub ReturnAddress: u32,
    pub Args: [u32; 4],
}
impl EXTSTACKTRACE32 {}
impl ::std::default::Default for EXTSTACKTRACE32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for EXTSTACKTRACE32 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("EXTSTACKTRACE32").field("FramePointer", &self.FramePointer).field("ProgramCounter", &self.ProgramCounter).field("ReturnAddress", &self.ReturnAddress).field("Args", &self.Args).finish()
    }
}
impl ::std::cmp::PartialEq for EXTSTACKTRACE32 {
    fn eq(&self, other: &Self) -> bool {
        self.FramePointer == other.FramePointer && self.ProgramCounter == other.ProgramCounter && self.ReturnAddress == other.ReturnAddress && self.Args == other.Args
    }
}
impl ::std::cmp::Eq for EXTSTACKTRACE32 {}
unsafe impl ::windows::runtime::Abi for EXTSTACKTRACE32 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct EXTSTACKTRACE64 {
    pub FramePointer: u64,
    pub ProgramCounter: u64,
    pub ReturnAddress: u64,
    pub Args: [u64; 4],
}
impl EXTSTACKTRACE64 {}
impl ::std::default::Default for EXTSTACKTRACE64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for EXTSTACKTRACE64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("EXTSTACKTRACE64").field("FramePointer", &self.FramePointer).field("ProgramCounter", &self.ProgramCounter).field("ReturnAddress", &self.ReturnAddress).field("Args", &self.Args).finish()
    }
}
impl ::std::cmp::PartialEq for EXTSTACKTRACE64 {
    fn eq(&self, other: &Self) -> bool {
        self.FramePointer == other.FramePointer && self.ProgramCounter == other.ProgramCounter && self.ReturnAddress == other.ReturnAddress && self.Args == other.Args
    }
}
impl ::std::cmp::Eq for EXTSTACKTRACE64 {}
unsafe impl ::windows::runtime::Abi for EXTSTACKTRACE64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct EXT_API_VERSION {
    pub MajorVersion: u16,
    pub MinorVersion: u16,
    pub Revision: u16,
    pub Reserved: u16,
}
impl EXT_API_VERSION {}
impl ::std::default::Default for EXT_API_VERSION {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for EXT_API_VERSION {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("EXT_API_VERSION").field("MajorVersion", &self.MajorVersion).field("MinorVersion", &self.MinorVersion).field("Revision", &self.Revision).field("Reserved", &self.Reserved).finish()
    }
}
impl ::std::cmp::PartialEq for EXT_API_VERSION {
    fn eq(&self, other: &Self) -> bool {
        self.MajorVersion == other.MajorVersion && self.MinorVersion == other.MinorVersion && self.Revision == other.Revision && self.Reserved == other.Reserved
    }
}
impl ::std::cmp::Eq for EXT_API_VERSION {}
unsafe impl ::windows::runtime::Abi for EXT_API_VERSION {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const EXT_API_VERSION_NUMBER: u32 = 5u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const EXT_API_VERSION_NUMBER32: u32 = 5u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const EXT_API_VERSION_NUMBER64: u32 = 6u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct EXT_FIND_FILE {
    pub FileName: super::super::super::Foundation::PWSTR,
    pub IndexedSize: u64,
    pub ImageTimeDateStamp: u32,
    pub ImageCheckSum: u32,
    pub ExtraInfo: *mut ::std::ffi::c_void,
    pub ExtraInfoSize: u32,
    pub Flags: u32,
    pub FileMapping: *mut ::std::ffi::c_void,
    pub FileMappingSize: u64,
    pub FileHandle: super::super::super::Foundation::HANDLE,
    pub FoundFileName: super::super::super::Foundation::PWSTR,
    pub FoundFileNameChars: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl EXT_FIND_FILE {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for EXT_FIND_FILE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for EXT_FIND_FILE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("EXT_FIND_FILE")
            .field("FileName", &self.FileName)
            .field("IndexedSize", &self.IndexedSize)
            .field("ImageTimeDateStamp", &self.ImageTimeDateStamp)
            .field("ImageCheckSum", &self.ImageCheckSum)
            .field("ExtraInfo", &self.ExtraInfo)
            .field("ExtraInfoSize", &self.ExtraInfoSize)
            .field("Flags", &self.Flags)
            .field("FileMapping", &self.FileMapping)
            .field("FileMappingSize", &self.FileMappingSize)
            .field("FileHandle", &self.FileHandle)
            .field("FoundFileName", &self.FoundFileName)
            .field("FoundFileNameChars", &self.FoundFileNameChars)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for EXT_FIND_FILE {
    fn eq(&self, other: &Self) -> bool {
        self.FileName == other.FileName
            && self.IndexedSize == other.IndexedSize
            && self.ImageTimeDateStamp == other.ImageTimeDateStamp
            && self.ImageCheckSum == other.ImageCheckSum
            && self.ExtraInfo == other.ExtraInfo
            && self.ExtraInfoSize == other.ExtraInfoSize
            && self.Flags == other.Flags
            && self.FileMapping == other.FileMapping
            && self.FileMappingSize == other.FileMappingSize
            && self.FileHandle == other.FileHandle
            && self.FoundFileName == other.FoundFileName
            && self.FoundFileNameChars == other.FoundFileNameChars
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for EXT_FIND_FILE {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for EXT_FIND_FILE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const EXT_FIND_FILE_ALLOW_GIVEN_PATH: u32 = 1u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct EXT_MATCH_PATTERN_A {
    pub Str: super::super::super::Foundation::PSTR,
    pub Pattern: super::super::super::Foundation::PSTR,
    pub CaseSensitive: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl EXT_MATCH_PATTERN_A {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for EXT_MATCH_PATTERN_A {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for EXT_MATCH_PATTERN_A {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("EXT_MATCH_PATTERN_A").field("Str", &self.Str).field("Pattern", &self.Pattern).field("CaseSensitive", &self.CaseSensitive).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for EXT_MATCH_PATTERN_A {
    fn eq(&self, other: &Self) -> bool {
        self.Str == other.Str && self.Pattern == other.Pattern && self.CaseSensitive == other.CaseSensitive
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for EXT_MATCH_PATTERN_A {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for EXT_MATCH_PATTERN_A {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const EXT_OUTPUT_VER: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const EXT_TDF_PHYSICAL_CACHED: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const EXT_TDF_PHYSICAL_DEFAULT: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const EXT_TDF_PHYSICAL_MEMORY: u32 = 14u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const EXT_TDF_PHYSICAL_UNCACHED: u32 = 6u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const EXT_TDF_PHYSICAL_WRITE_COMBINED: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct EXT_TDOP(pub i32);
pub const EXT_TDOP_COPY: EXT_TDOP = EXT_TDOP(0i32);
pub const EXT_TDOP_RELEASE: EXT_TDOP = EXT_TDOP(1i32);
pub const EXT_TDOP_SET_FROM_EXPR: EXT_TDOP = EXT_TDOP(2i32);
pub const EXT_TDOP_SET_FROM_U64_EXPR: EXT_TDOP = EXT_TDOP(3i32);
pub const EXT_TDOP_GET_FIELD: EXT_TDOP = EXT_TDOP(4i32);
pub const EXT_TDOP_EVALUATE: EXT_TDOP = EXT_TDOP(5i32);
pub const EXT_TDOP_GET_TYPE_NAME: EXT_TDOP = EXT_TDOP(6i32);
pub const EXT_TDOP_OUTPUT_TYPE_NAME: EXT_TDOP = EXT_TDOP(7i32);
pub const EXT_TDOP_OUTPUT_SIMPLE_VALUE: EXT_TDOP = EXT_TDOP(8i32);
pub const EXT_TDOP_OUTPUT_FULL_VALUE: EXT_TDOP = EXT_TDOP(9i32);
pub const EXT_TDOP_HAS_FIELD: EXT_TDOP = EXT_TDOP(10i32);
pub const EXT_TDOP_GET_FIELD_OFFSET: EXT_TDOP = EXT_TDOP(11i32);
pub const EXT_TDOP_GET_ARRAY_ELEMENT: EXT_TDOP = EXT_TDOP(12i32);
pub const EXT_TDOP_GET_DEREFERENCE: EXT_TDOP = EXT_TDOP(13i32);
pub const EXT_TDOP_GET_TYPE_SIZE: EXT_TDOP = EXT_TDOP(14i32);
pub const EXT_TDOP_OUTPUT_TYPE_DEFINITION: EXT_TDOP = EXT_TDOP(15i32);
pub const EXT_TDOP_GET_POINTER_TO: EXT_TDOP = EXT_TDOP(16i32);
pub const EXT_TDOP_SET_FROM_TYPE_ID_AND_U64: EXT_TDOP = EXT_TDOP(17i32);
pub const EXT_TDOP_SET_PTR_FROM_TYPE_ID_AND_U64: EXT_TDOP = EXT_TDOP(18i32);
pub const EXT_TDOP_COUNT: EXT_TDOP = EXT_TDOP(19i32);
impl ::std::convert::From<i32> for EXT_TDOP {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for EXT_TDOP {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct EXT_TYPED_DATA {
    pub Operation: EXT_TDOP,
    pub Flags: u32,
    pub InData: DEBUG_TYPED_DATA,
    pub OutData: DEBUG_TYPED_DATA,
    pub InStrIndex: u32,
    pub In32: u32,
    pub Out32: u32,
    pub In64: u64,
    pub Out64: u64,
    pub StrBufferIndex: u32,
    pub StrBufferChars: u32,
    pub StrCharsNeeded: u32,
    pub DataBufferIndex: u32,
    pub DataBufferBytes: u32,
    pub DataBytesNeeded: u32,
    pub Status: ::windows::runtime::HRESULT,
    pub Reserved: [u64; 8],
}
impl EXT_TYPED_DATA {}
impl ::std::default::Default for EXT_TYPED_DATA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for EXT_TYPED_DATA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("EXT_TYPED_DATA")
            .field("Operation", &self.Operation)
            .field("Flags", &self.Flags)
            .field("InData", &self.InData)
            .field("OutData", &self.OutData)
            .field("InStrIndex", &self.InStrIndex)
            .field("In32", &self.In32)
            .field("Out32", &self.Out32)
            .field("In64", &self.In64)
            .field("Out64", &self.Out64)
            .field("StrBufferIndex", &self.StrBufferIndex)
            .field("StrBufferChars", &self.StrBufferChars)
            .field("StrCharsNeeded", &self.StrCharsNeeded)
            .field("DataBufferIndex", &self.DataBufferIndex)
            .field("DataBufferBytes", &self.DataBufferBytes)
            .field("DataBytesNeeded", &self.DataBytesNeeded)
            .field("Status", &self.Status)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl ::std::cmp::PartialEq for EXT_TYPED_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.Operation == other.Operation
            && self.Flags == other.Flags
            && self.InData == other.InData
            && self.OutData == other.OutData
            && self.InStrIndex == other.InStrIndex
            && self.In32 == other.In32
            && self.Out32 == other.Out32
            && self.In64 == other.In64
            && self.Out64 == other.Out64
            && self.StrBufferIndex == other.StrBufferIndex
            && self.StrBufferChars == other.StrBufferChars
            && self.StrCharsNeeded == other.StrCharsNeeded
            && self.DataBufferIndex == other.DataBufferIndex
            && self.DataBufferBytes == other.DataBufferBytes
            && self.DataBytesNeeded == other.DataBytesNeeded
            && self.Status == other.Status
            && self.Reserved == other.Reserved
    }
}
impl ::std::cmp::Eq for EXT_TYPED_DATA {}
unsafe impl ::windows::runtime::Abi for EXT_TYPED_DATA {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct EX_PROP_INFO_FLAGS(pub i32);
pub const EX_PROP_INFO_ID: EX_PROP_INFO_FLAGS = EX_PROP_INFO_FLAGS(256i32);
pub const EX_PROP_INFO_NTYPE: EX_PROP_INFO_FLAGS = EX_PROP_INFO_FLAGS(512i32);
pub const EX_PROP_INFO_NVALUE: EX_PROP_INFO_FLAGS = EX_PROP_INFO_FLAGS(1024i32);
pub const EX_PROP_INFO_LOCKBYTES: EX_PROP_INFO_FLAGS = EX_PROP_INFO_FLAGS(2048i32);
pub const EX_PROP_INFO_DEBUGEXTPROP: EX_PROP_INFO_FLAGS = EX_PROP_INFO_FLAGS(4096i32);
impl ::std::convert::From<i32> for EX_PROP_INFO_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for EX_PROP_INFO_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const E_JsDEBUG_INVALID_MEMORY_ADDRESS: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1916338171i32 as _);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const E_JsDEBUG_MISMATCHED_RUNTIME: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1916338175i32 as _);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const E_JsDEBUG_OUTSIDE_OF_VM: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1916338172i32 as _);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const E_JsDEBUG_RUNTIME_NOT_IN_DEBUG_MODE: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1916338169i32 as _);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const E_JsDEBUG_SOURCE_LOCATION_NOT_FOUND: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1916338170i32 as _);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const E_JsDEBUG_UNKNOWN_THREAD: ::windows::runtime::HRESULT = ::windows::runtime::HRESULT(-1916338174i32 as _);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn EncodePointer(ptr: *const ::std::ffi::c_void) -> *mut ::std::ffi::c_void {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn EncodePointer(ptr: *const ::std::ffi::c_void) -> *mut ::std::ffi::c_void;
        }
        ::std::mem::transmute(EncodePointer(::std::mem::transmute(ptr)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn EncodeRemotePointer<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(processhandle: Param0, ptr: *const ::std::ffi::c_void, encodedptr: *mut *mut ::std::ffi::c_void) -> ::windows::runtime::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn EncodeRemotePointer(processhandle: super::super::super::Foundation::HANDLE, ptr: *const ::std::ffi::c_void, encodedptr: *mut *mut ::std::ffi::c_void) -> ::windows::runtime::HRESULT;
        }
        EncodeRemotePointer(processhandle.into_param().abi(), ::std::mem::transmute(ptr), ::std::mem::transmute(encodedptr)).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn EncodeSystemPointer(ptr: *const ::std::ffi::c_void) -> *mut ::std::ffi::c_void {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn EncodeSystemPointer(ptr: *const ::std::ffi::c_void) -> *mut ::std::ffi::c_void;
        }
        ::std::mem::transmute(EncodeSystemPointer(::std::mem::transmute(ptr)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn EnumDirTree<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(
    hprocess: Param0,
    rootpath: Param1,
    inputpathname: Param2,
    outputpathbuffer: super::super::super::Foundation::PSTR,
    cb: ::std::option::Option<PENUMDIRTREE_CALLBACK>,
    data: *const ::std::ffi::c_void,
) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn EnumDirTree(hprocess: super::super::super::Foundation::HANDLE, rootpath: super::super::super::Foundation::PSTR, inputpathname: super::super::super::Foundation::PSTR, outputpathbuffer: super::super::super::Foundation::PSTR, cb: ::windows::runtime::RawPtr, data: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(EnumDirTree(hprocess.into_param().abi(), rootpath.into_param().abi(), inputpathname.into_param().abi(), ::std::mem::transmute(outputpathbuffer), ::std::mem::transmute(cb), ::std::mem::transmute(data)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn EnumDirTreeW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(
    hprocess: Param0,
    rootpath: Param1,
    inputpathname: Param2,
    outputpathbuffer: super::super::super::Foundation::PWSTR,
    cb: ::std::option::Option<PENUMDIRTREE_CALLBACKW>,
    data: *const ::std::ffi::c_void,
) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn EnumDirTreeW(hprocess: super::super::super::Foundation::HANDLE, rootpath: super::super::super::Foundation::PWSTR, inputpathname: super::super::super::Foundation::PWSTR, outputpathbuffer: super::super::super::Foundation::PWSTR, cb: ::windows::runtime::RawPtr, data: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(EnumDirTreeW(hprocess.into_param().abi(), rootpath.into_param().abi(), inputpathname.into_param().abi(), ::std::mem::transmute(outputpathbuffer), ::std::mem::transmute(cb), ::std::mem::transmute(data)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "x86")]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn EnumerateLoadedModules<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, enumloadedmodulescallback: ::std::option::Option<PENUMLOADED_MODULES_CALLBACK>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn EnumerateLoadedModules(hprocess: super::super::super::Foundation::HANDLE, enumloadedmodulescallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(EnumerateLoadedModules(hprocess.into_param().abi(), ::std::mem::transmute(enumloadedmodulescallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn EnumerateLoadedModules64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, enumloadedmodulescallback: ::std::option::Option<PENUMLOADED_MODULES_CALLBACK64>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn EnumerateLoadedModules64(hprocess: super::super::super::Foundation::HANDLE, enumloadedmodulescallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(EnumerateLoadedModules64(hprocess.into_param().abi(), ::std::mem::transmute(enumloadedmodulescallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn EnumerateLoadedModulesEx<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, enumloadedmodulescallback: ::std::option::Option<PENUMLOADED_MODULES_CALLBACK64>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn EnumerateLoadedModulesEx(hprocess: super::super::super::Foundation::HANDLE, enumloadedmodulescallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(EnumerateLoadedModulesEx(hprocess.into_param().abi(), ::std::mem::transmute(enumloadedmodulescallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn EnumerateLoadedModulesExW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, enumloadedmodulescallback: ::std::option::Option<PENUMLOADED_MODULES_CALLBACKW64>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn EnumerateLoadedModulesExW(hprocess: super::super::super::Foundation::HANDLE, enumloadedmodulescallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(EnumerateLoadedModulesExW(hprocess.into_param().abi(), ::std::mem::transmute(enumloadedmodulescallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn EnumerateLoadedModulesW64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, enumloadedmodulescallback: ::std::option::Option<PENUMLOADED_MODULES_CALLBACKW64>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn EnumerateLoadedModulesW64(hprocess: super::super::super::Foundation::HANDLE, enumloadedmodulescallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(EnumerateLoadedModulesW64(hprocess.into_param().abi(), ::std::mem::transmute(enumloadedmodulescallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct ErrorClass(pub i32);
pub const ErrorClassWarning: ErrorClass = ErrorClass(0i32);
pub const ErrorClassError: ErrorClass = ErrorClass(1i32);
impl ::std::convert::From<i32> for ErrorClass {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for ErrorClass {
    type Abi = Self;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
impl ::std::clone::Clone for ExtendedDebugPropertyInfo {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
pub struct ExtendedDebugPropertyInfo {
    pub dwValidFields: u32,
    pub pszName: super::super::super::Foundation::PWSTR,
    pub pszType: super::super::super::Foundation::PWSTR,
    pub pszValue: super::super::super::Foundation::PWSTR,
    pub pszFullName: super::super::super::Foundation::PWSTR,
    pub dwAttrib: u32,
    pub pDebugProp: ::std::option::Option<IDebugProperty>,
    pub nDISPID: u32,
    pub nType: u32,
    pub varValue: super::super::Com::VARIANT,
    pub plbValue: ::std::option::Option<super::super::Com::StructuredStorage::ILockBytes>,
    pub pDebugExtProp: ::std::option::Option<IDebugExtendedProperty>,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
impl ExtendedDebugPropertyInfo {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
impl ::std::default::Default for ExtendedDebugPropertyInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
impl ::std::cmp::PartialEq for ExtendedDebugPropertyInfo {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
impl ::std::cmp::Eq for ExtendedDebugPropertyInfo {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
unsafe impl ::windows::runtime::Abi for ExtendedDebugPropertyInfo {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct FACILITY_CODE(pub u32);
pub const FACILITY_NULL: FACILITY_CODE = FACILITY_CODE(0u32);
pub const FACILITY_RPC: FACILITY_CODE = FACILITY_CODE(1u32);
pub const FACILITY_DISPATCH: FACILITY_CODE = FACILITY_CODE(2u32);
pub const FACILITY_STORAGE: FACILITY_CODE = FACILITY_CODE(3u32);
pub const FACILITY_ITF: FACILITY_CODE = FACILITY_CODE(4u32);
pub const FACILITY_WIN32: FACILITY_CODE = FACILITY_CODE(7u32);
pub const FACILITY_WINDOWS: FACILITY_CODE = FACILITY_CODE(8u32);
pub const FACILITY_SSPI: FACILITY_CODE = FACILITY_CODE(9u32);
pub const FACILITY_SECURITY: FACILITY_CODE = FACILITY_CODE(9u32);
pub const FACILITY_CONTROL: FACILITY_CODE = FACILITY_CODE(10u32);
pub const FACILITY_CERT: FACILITY_CODE = FACILITY_CODE(11u32);
pub const FACILITY_INTERNET: FACILITY_CODE = FACILITY_CODE(12u32);
pub const FACILITY_MEDIASERVER: FACILITY_CODE = FACILITY_CODE(13u32);
pub const FACILITY_MSMQ: FACILITY_CODE = FACILITY_CODE(14u32);
pub const FACILITY_SETUPAPI: FACILITY_CODE = FACILITY_CODE(15u32);
pub const FACILITY_SCARD: FACILITY_CODE = FACILITY_CODE(16u32);
pub const FACILITY_COMPLUS: FACILITY_CODE = FACILITY_CODE(17u32);
pub const FACILITY_AAF: FACILITY_CODE = FACILITY_CODE(18u32);
pub const FACILITY_URT: FACILITY_CODE = FACILITY_CODE(19u32);
pub const FACILITY_ACS: FACILITY_CODE = FACILITY_CODE(20u32);
pub const FACILITY_DPLAY: FACILITY_CODE = FACILITY_CODE(21u32);
pub const FACILITY_UMI: FACILITY_CODE = FACILITY_CODE(22u32);
pub const FACILITY_SXS: FACILITY_CODE = FACILITY_CODE(23u32);
pub const FACILITY_WINDOWS_CE: FACILITY_CODE = FACILITY_CODE(24u32);
pub const FACILITY_HTTP: FACILITY_CODE = FACILITY_CODE(25u32);
pub const FACILITY_USERMODE_COMMONLOG: FACILITY_CODE = FACILITY_CODE(26u32);
pub const FACILITY_WER: FACILITY_CODE = FACILITY_CODE(27u32);
pub const FACILITY_USERMODE_FILTER_MANAGER: FACILITY_CODE = FACILITY_CODE(31u32);
pub const FACILITY_BACKGROUNDCOPY: FACILITY_CODE = FACILITY_CODE(32u32);
pub const FACILITY_CONFIGURATION: FACILITY_CODE = FACILITY_CODE(33u32);
pub const FACILITY_WIA: FACILITY_CODE = FACILITY_CODE(33u32);
pub const FACILITY_STATE_MANAGEMENT: FACILITY_CODE = FACILITY_CODE(34u32);
pub const FACILITY_METADIRECTORY: FACILITY_CODE = FACILITY_CODE(35u32);
pub const FACILITY_WINDOWSUPDATE: FACILITY_CODE = FACILITY_CODE(36u32);
pub const FACILITY_DIRECTORYSERVICE: FACILITY_CODE = FACILITY_CODE(37u32);
pub const FACILITY_GRAPHICS: FACILITY_CODE = FACILITY_CODE(38u32);
pub const FACILITY_SHELL: FACILITY_CODE = FACILITY_CODE(39u32);
pub const FACILITY_NAP: FACILITY_CODE = FACILITY_CODE(39u32);
pub const FACILITY_TPM_SERVICES: FACILITY_CODE = FACILITY_CODE(40u32);
pub const FACILITY_TPM_SOFTWARE: FACILITY_CODE = FACILITY_CODE(41u32);
pub const FACILITY_UI: FACILITY_CODE = FACILITY_CODE(42u32);
pub const FACILITY_XAML: FACILITY_CODE = FACILITY_CODE(43u32);
pub const FACILITY_ACTION_QUEUE: FACILITY_CODE = FACILITY_CODE(44u32);
pub const FACILITY_PLA: FACILITY_CODE = FACILITY_CODE(48u32);
pub const FACILITY_WINDOWS_SETUP: FACILITY_CODE = FACILITY_CODE(48u32);
pub const FACILITY_FVE: FACILITY_CODE = FACILITY_CODE(49u32);
pub const FACILITY_FWP: FACILITY_CODE = FACILITY_CODE(50u32);
pub const FACILITY_WINRM: FACILITY_CODE = FACILITY_CODE(51u32);
pub const FACILITY_NDIS: FACILITY_CODE = FACILITY_CODE(52u32);
pub const FACILITY_USERMODE_HYPERVISOR: FACILITY_CODE = FACILITY_CODE(53u32);
pub const FACILITY_CMI: FACILITY_CODE = FACILITY_CODE(54u32);
pub const FACILITY_USERMODE_VIRTUALIZATION: FACILITY_CODE = FACILITY_CODE(55u32);
pub const FACILITY_USERMODE_VOLMGR: FACILITY_CODE = FACILITY_CODE(56u32);
pub const FACILITY_BCD: FACILITY_CODE = FACILITY_CODE(57u32);
pub const FACILITY_USERMODE_VHD: FACILITY_CODE = FACILITY_CODE(58u32);
pub const FACILITY_USERMODE_HNS: FACILITY_CODE = FACILITY_CODE(59u32);
pub const FACILITY_SDIAG: FACILITY_CODE = FACILITY_CODE(60u32);
pub const FACILITY_WEBSERVICES: FACILITY_CODE = FACILITY_CODE(61u32);
pub const FACILITY_WINPE: FACILITY_CODE = FACILITY_CODE(61u32);
pub const FACILITY_WPN: FACILITY_CODE = FACILITY_CODE(62u32);
pub const FACILITY_WINDOWS_STORE: FACILITY_CODE = FACILITY_CODE(63u32);
pub const FACILITY_INPUT: FACILITY_CODE = FACILITY_CODE(64u32);
pub const FACILITY_QUIC: FACILITY_CODE = FACILITY_CODE(65u32);
pub const FACILITY_EAP: FACILITY_CODE = FACILITY_CODE(66u32);
pub const FACILITY_IORING: FACILITY_CODE = FACILITY_CODE(70u32);
pub const FACILITY_WINDOWS_DEFENDER: FACILITY_CODE = FACILITY_CODE(80u32);
pub const FACILITY_OPC: FACILITY_CODE = FACILITY_CODE(81u32);
pub const FACILITY_XPS: FACILITY_CODE = FACILITY_CODE(82u32);
pub const FACILITY_MBN: FACILITY_CODE = FACILITY_CODE(84u32);
pub const FACILITY_POWERSHELL: FACILITY_CODE = FACILITY_CODE(84u32);
pub const FACILITY_RAS: FACILITY_CODE = FACILITY_CODE(83u32);
pub const FACILITY_P2P_INT: FACILITY_CODE = FACILITY_CODE(98u32);
pub const FACILITY_P2P: FACILITY_CODE = FACILITY_CODE(99u32);
pub const FACILITY_DAF: FACILITY_CODE = FACILITY_CODE(100u32);
pub const FACILITY_BLUETOOTH_ATT: FACILITY_CODE = FACILITY_CODE(101u32);
pub const FACILITY_AUDIO: FACILITY_CODE = FACILITY_CODE(102u32);
pub const FACILITY_STATEREPOSITORY: FACILITY_CODE = FACILITY_CODE(103u32);
pub const FACILITY_VISUALCPP: FACILITY_CODE = FACILITY_CODE(109u32);
pub const FACILITY_SCRIPT: FACILITY_CODE = FACILITY_CODE(112u32);
pub const FACILITY_PARSE: FACILITY_CODE = FACILITY_CODE(113u32);
pub const FACILITY_BLB: FACILITY_CODE = FACILITY_CODE(120u32);
pub const FACILITY_BLB_CLI: FACILITY_CODE = FACILITY_CODE(121u32);
pub const FACILITY_WSBAPP: FACILITY_CODE = FACILITY_CODE(122u32);
pub const FACILITY_BLBUI: FACILITY_CODE = FACILITY_CODE(128u32);
pub const FACILITY_USN: FACILITY_CODE = FACILITY_CODE(129u32);
pub const FACILITY_USERMODE_VOLSNAP: FACILITY_CODE = FACILITY_CODE(130u32);
pub const FACILITY_TIERING: FACILITY_CODE = FACILITY_CODE(131u32);
pub const FACILITY_WSB_ONLINE: FACILITY_CODE = FACILITY_CODE(133u32);
pub const FACILITY_ONLINE_ID: FACILITY_CODE = FACILITY_CODE(134u32);
pub const FACILITY_DEVICE_UPDATE_AGENT: FACILITY_CODE = FACILITY_CODE(135u32);
pub const FACILITY_DRVSERVICING: FACILITY_CODE = FACILITY_CODE(136u32);
pub const FACILITY_DLS: FACILITY_CODE = FACILITY_CODE(153u32);
pub const FACILITY_DELIVERY_OPTIMIZATION: FACILITY_CODE = FACILITY_CODE(208u32);
pub const FACILITY_USERMODE_SPACES: FACILITY_CODE = FACILITY_CODE(231u32);
pub const FACILITY_USER_MODE_SECURITY_CORE: FACILITY_CODE = FACILITY_CODE(232u32);
pub const FACILITY_USERMODE_LICENSING: FACILITY_CODE = FACILITY_CODE(234u32);
pub const FACILITY_SOS: FACILITY_CODE = FACILITY_CODE(160u32);
pub const FACILITY_OCP_UPDATE_AGENT: FACILITY_CODE = FACILITY_CODE(173u32);
pub const FACILITY_DEBUGGERS: FACILITY_CODE = FACILITY_CODE(176u32);
pub const FACILITY_SPP: FACILITY_CODE = FACILITY_CODE(256u32);
pub const FACILITY_RESTORE: FACILITY_CODE = FACILITY_CODE(256u32);
pub const FACILITY_DMSERVER: FACILITY_CODE = FACILITY_CODE(256u32);
pub const FACILITY_DEPLOYMENT_SERVICES_SERVER: FACILITY_CODE = FACILITY_CODE(257u32);
pub const FACILITY_DEPLOYMENT_SERVICES_IMAGING: FACILITY_CODE = FACILITY_CODE(258u32);
pub const FACILITY_DEPLOYMENT_SERVICES_MANAGEMENT: FACILITY_CODE = FACILITY_CODE(259u32);
pub const FACILITY_DEPLOYMENT_SERVICES_UTIL: FACILITY_CODE = FACILITY_CODE(260u32);
pub const FACILITY_DEPLOYMENT_SERVICES_BINLSVC: FACILITY_CODE = FACILITY_CODE(261u32);
pub const FACILITY_DEPLOYMENT_SERVICES_PXE: FACILITY_CODE = FACILITY_CODE(263u32);
pub const FACILITY_DEPLOYMENT_SERVICES_TFTP: FACILITY_CODE = FACILITY_CODE(264u32);
pub const FACILITY_DEPLOYMENT_SERVICES_TRANSPORT_MANAGEMENT: FACILITY_CODE = FACILITY_CODE(272u32);
pub const FACILITY_DEPLOYMENT_SERVICES_DRIVER_PROVISIONING: FACILITY_CODE = FACILITY_CODE(278u32);
pub const FACILITY_DEPLOYMENT_SERVICES_MULTICAST_SERVER: FACILITY_CODE = FACILITY_CODE(289u32);
pub const FACILITY_DEPLOYMENT_SERVICES_MULTICAST_CLIENT: FACILITY_CODE = FACILITY_CODE(290u32);
pub const FACILITY_DEPLOYMENT_SERVICES_CONTENT_PROVIDER: FACILITY_CODE = FACILITY_CODE(293u32);
pub const FACILITY_HSP_SERVICES: FACILITY_CODE = FACILITY_CODE(296u32);
pub const FACILITY_HSP_SOFTWARE: FACILITY_CODE = FACILITY_CODE(297u32);
pub const FACILITY_LINGUISTIC_SERVICES: FACILITY_CODE = FACILITY_CODE(305u32);
pub const FACILITY_AUDIOSTREAMING: FACILITY_CODE = FACILITY_CODE(1094u32);
pub const FACILITY_TTD: FACILITY_CODE = FACILITY_CODE(1490u32);
pub const FACILITY_ACCELERATOR: FACILITY_CODE = FACILITY_CODE(1536u32);
pub const FACILITY_WMAAECMA: FACILITY_CODE = FACILITY_CODE(1996u32);
pub const FACILITY_DIRECTMUSIC: FACILITY_CODE = FACILITY_CODE(2168u32);
pub const FACILITY_DIRECT3D10: FACILITY_CODE = FACILITY_CODE(2169u32);
pub const FACILITY_DXGI: FACILITY_CODE = FACILITY_CODE(2170u32);
pub const FACILITY_DXGI_DDI: FACILITY_CODE = FACILITY_CODE(2171u32);
pub const FACILITY_DIRECT3D11: FACILITY_CODE = FACILITY_CODE(2172u32);
pub const FACILITY_DIRECT3D11_DEBUG: FACILITY_CODE = FACILITY_CODE(2173u32);
pub const FACILITY_DIRECT3D12: FACILITY_CODE = FACILITY_CODE(2174u32);
pub const FACILITY_DIRECT3D12_DEBUG: FACILITY_CODE = FACILITY_CODE(2175u32);
pub const FACILITY_DXCORE: FACILITY_CODE = FACILITY_CODE(2176u32);
pub const FACILITY_PRESENTATION: FACILITY_CODE = FACILITY_CODE(2177u32);
pub const FACILITY_LEAP: FACILITY_CODE = FACILITY_CODE(2184u32);
pub const FACILITY_AUDCLNT: FACILITY_CODE = FACILITY_CODE(2185u32);
pub const FACILITY_WINCODEC_DWRITE_DWM: FACILITY_CODE = FACILITY_CODE(2200u32);
pub const FACILITY_WINML: FACILITY_CODE = FACILITY_CODE(2192u32);
pub const FACILITY_DIRECT2D: FACILITY_CODE = FACILITY_CODE(2201u32);
pub const FACILITY_DEFRAG: FACILITY_CODE = FACILITY_CODE(2304u32);
pub const FACILITY_USERMODE_SDBUS: FACILITY_CODE = FACILITY_CODE(2305u32);
pub const FACILITY_JSCRIPT: FACILITY_CODE = FACILITY_CODE(2306u32);
pub const FACILITY_PIDGENX: FACILITY_CODE = FACILITY_CODE(2561u32);
pub const FACILITY_EAS: FACILITY_CODE = FACILITY_CODE(85u32);
pub const FACILITY_WEB: FACILITY_CODE = FACILITY_CODE(885u32);
pub const FACILITY_WEB_SOCKET: FACILITY_CODE = FACILITY_CODE(886u32);
pub const FACILITY_MOBILE: FACILITY_CODE = FACILITY_CODE(1793u32);
pub const FACILITY_SQLITE: FACILITY_CODE = FACILITY_CODE(1967u32);
pub const FACILITY_SERVICE_FABRIC: FACILITY_CODE = FACILITY_CODE(1968u32);
pub const FACILITY_UTC: FACILITY_CODE = FACILITY_CODE(1989u32);
pub const FACILITY_WEP: FACILITY_CODE = FACILITY_CODE(2049u32);
pub const FACILITY_SYNCENGINE: FACILITY_CODE = FACILITY_CODE(2050u32);
pub const FACILITY_XBOX: FACILITY_CODE = FACILITY_CODE(2339u32);
pub const FACILITY_GAME: FACILITY_CODE = FACILITY_CODE(2340u32);
pub const FACILITY_PIX: FACILITY_CODE = FACILITY_CODE(2748u32);
pub const FACILITY_NT_BIT: FACILITY_CODE = FACILITY_CODE(268435456u32);
impl ::std::convert::From<u32> for FACILITY_CODE {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for FACILITY_CODE {
    type Abi = Self;
}
impl ::std::ops::BitOr for FACILITY_CODE {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for FACILITY_CODE {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for FACILITY_CODE {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for FACILITY_CODE {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for FACILITY_CODE {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const FACILITY_JsDEBUG: u32 = 3527u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const FIELDS_DID_NOT_MATCH: u32 = 4u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct FIELD_INFO {
    pub fName: *mut u8,
    pub printName: *mut u8,
    pub size: u32,
    pub fOptions: u32,
    pub address: u64,
    pub Anonymous: FIELD_INFO_0,
    pub TypeId: u32,
    pub FieldOffset: u32,
    pub BufferSize: u32,
    pub BitField: FIELD_INFO_1,
    pub _bitfield: u32,
}
impl FIELD_INFO {}
impl ::std::default::Default for FIELD_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for FIELD_INFO {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for FIELD_INFO {}
unsafe impl ::windows::runtime::Abi for FIELD_INFO {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union FIELD_INFO_0 {
    pub fieldCallBack: *mut ::std::ffi::c_void,
    pub pBuffer: *mut ::std::ffi::c_void,
}
impl FIELD_INFO_0 {}
impl ::std::default::Default for FIELD_INFO_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for FIELD_INFO_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for FIELD_INFO_0 {}
unsafe impl ::windows::runtime::Abi for FIELD_INFO_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct FIELD_INFO_1 {
    pub Position: u16,
    pub Size: u16,
}
impl FIELD_INFO_1 {}
impl ::std::default::Default for FIELD_INFO_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for FIELD_INFO_1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_BitField").field("Position", &self.Position).field("Size", &self.Size).finish()
    }
}
impl ::std::cmp::PartialEq for FIELD_INFO_1 {
    fn eq(&self, other: &Self) -> bool {
        self.Position == other.Position && self.Size == other.Size
    }
}
impl ::std::cmp::Eq for FIELD_INFO_1 {}
unsafe impl ::windows::runtime::Abi for FIELD_INFO_1 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const FLAG_ENGINE_PRESENT: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const FLAG_ENGOPT_DISALLOW_NETWORK_PATHS: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const FLAG_OVERRIDE_ARM_MACHINE_TYPE: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct FORMAT_MESSAGE_OPTIONS(pub u32);
pub const FORMAT_MESSAGE_ALLOCATE_BUFFER: FORMAT_MESSAGE_OPTIONS = FORMAT_MESSAGE_OPTIONS(256u32);
pub const FORMAT_MESSAGE_ARGUMENT_ARRAY: FORMAT_MESSAGE_OPTIONS = FORMAT_MESSAGE_OPTIONS(8192u32);
pub const FORMAT_MESSAGE_FROM_HMODULE: FORMAT_MESSAGE_OPTIONS = FORMAT_MESSAGE_OPTIONS(2048u32);
pub const FORMAT_MESSAGE_FROM_STRING: FORMAT_MESSAGE_OPTIONS = FORMAT_MESSAGE_OPTIONS(1024u32);
pub const FORMAT_MESSAGE_FROM_SYSTEM: FORMAT_MESSAGE_OPTIONS = FORMAT_MESSAGE_OPTIONS(4096u32);
pub const FORMAT_MESSAGE_IGNORE_INSERTS: FORMAT_MESSAGE_OPTIONS = FORMAT_MESSAGE_OPTIONS(512u32);
impl ::std::convert::From<u32> for FORMAT_MESSAGE_OPTIONS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for FORMAT_MESSAGE_OPTIONS {
    type Abi = Self;
}
impl ::std::ops::BitOr for FORMAT_MESSAGE_OPTIONS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for FORMAT_MESSAGE_OPTIONS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for FORMAT_MESSAGE_OPTIONS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for FORMAT_MESSAGE_OPTIONS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for FORMAT_MESSAGE_OPTIONS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct FPO_DATA {
    pub ulOffStart: u32,
    pub cbProcSize: u32,
    pub cdwLocals: u32,
    pub cdwParams: u16,
    pub _bitfield: u16,
}
impl FPO_DATA {}
impl ::std::default::Default for FPO_DATA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for FPO_DATA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("FPO_DATA").field("ulOffStart", &self.ulOffStart).field("cbProcSize", &self.cbProcSize).field("cdwLocals", &self.cdwLocals).field("cdwParams", &self.cdwParams).field("_bitfield", &self._bitfield).finish()
    }
}
impl ::std::cmp::PartialEq for FPO_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.ulOffStart == other.ulOffStart && self.cbProcSize == other.cbProcSize && self.cdwLocals == other.cdwLocals && self.cdwParams == other.cdwParams && self._bitfield == other._bitfield
    }
}
impl ::std::cmp::Eq for FPO_DATA {}
unsafe impl ::windows::runtime::Abi for FPO_DATA {
    type Abi = Self;
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn FatalAppExitA<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(uaction: u32, lpmessagetext: Param1) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn FatalAppExitA(uaction: u32, lpmessagetext: super::super::super::Foundation::PSTR);
        }
        ::std::mem::transmute(FatalAppExitA(::std::mem::transmute(uaction), lpmessagetext.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn FatalAppExitW<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(uaction: u32, lpmessagetext: Param1) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn FatalAppExitW(uaction: u32, lpmessagetext: super::super::super::Foundation::PWSTR);
        }
        ::std::mem::transmute(FatalAppExitW(::std::mem::transmute(uaction), lpmessagetext.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn FatalExit(exitcode: i32) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn FatalExit(exitcode: i32);
        }
        ::std::mem::transmute(FatalExit(::std::mem::transmute(exitcode)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn FindDebugInfoFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(filename: Param0, symbolpath: Param1, debugfilepath: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::HANDLE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn FindDebugInfoFile(filename: super::super::super::Foundation::PSTR, symbolpath: super::super::super::Foundation::PSTR, debugfilepath: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::HANDLE;
        }
        ::std::mem::transmute(FindDebugInfoFile(filename.into_param().abi(), symbolpath.into_param().abi(), ::std::mem::transmute(debugfilepath)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn FindDebugInfoFileEx<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(filename: Param0, symbolpath: Param1, debugfilepath: super::super::super::Foundation::PSTR, callback: ::std::option::Option<PFIND_DEBUG_FILE_CALLBACK>, callerdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::HANDLE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn FindDebugInfoFileEx(filename: super::super::super::Foundation::PSTR, symbolpath: super::super::super::Foundation::PSTR, debugfilepath: super::super::super::Foundation::PSTR, callback: ::windows::runtime::RawPtr, callerdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::HANDLE;
        }
        ::std::mem::transmute(FindDebugInfoFileEx(filename.into_param().abi(), symbolpath.into_param().abi(), ::std::mem::transmute(debugfilepath), ::std::mem::transmute(callback), ::std::mem::transmute(callerdata)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn FindDebugInfoFileExW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(filename: Param0, symbolpath: Param1, debugfilepath: super::super::super::Foundation::PWSTR, callback: ::std::option::Option<PFIND_DEBUG_FILE_CALLBACKW>, callerdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::HANDLE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn FindDebugInfoFileExW(filename: super::super::super::Foundation::PWSTR, symbolpath: super::super::super::Foundation::PWSTR, debugfilepath: super::super::super::Foundation::PWSTR, callback: ::windows::runtime::RawPtr, callerdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::HANDLE;
        }
        ::std::mem::transmute(FindDebugInfoFileExW(filename.into_param().abi(), symbolpath.into_param().abi(), ::std::mem::transmute(debugfilepath), ::std::mem::transmute(callback), ::std::mem::transmute(callerdata)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn FindExecutableImage<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(filename: Param0, symbolpath: Param1, imagefilepath: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::HANDLE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn FindExecutableImage(filename: super::super::super::Foundation::PSTR, symbolpath: super::super::super::Foundation::PSTR, imagefilepath: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::HANDLE;
        }
        ::std::mem::transmute(FindExecutableImage(filename.into_param().abi(), symbolpath.into_param().abi(), ::std::mem::transmute(imagefilepath)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn FindExecutableImageEx<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(filename: Param0, symbolpath: Param1, imagefilepath: super::super::super::Foundation::PSTR, callback: ::std::option::Option<PFIND_EXE_FILE_CALLBACK>, callerdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::HANDLE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn FindExecutableImageEx(filename: super::super::super::Foundation::PSTR, symbolpath: super::super::super::Foundation::PSTR, imagefilepath: super::super::super::Foundation::PSTR, callback: ::windows::runtime::RawPtr, callerdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::HANDLE;
        }
        ::std::mem::transmute(FindExecutableImageEx(filename.into_param().abi(), symbolpath.into_param().abi(), ::std::mem::transmute(imagefilepath), ::std::mem::transmute(callback), ::std::mem::transmute(callerdata)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn FindExecutableImageExW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(filename: Param0, symbolpath: Param1, imagefilepath: super::super::super::Foundation::PWSTR, callback: ::std::option::Option<PFIND_EXE_FILE_CALLBACKW>, callerdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::HANDLE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn FindExecutableImageExW(filename: super::super::super::Foundation::PWSTR, symbolpath: super::super::super::Foundation::PWSTR, imagefilepath: super::super::super::Foundation::PWSTR, callback: ::windows::runtime::RawPtr, callerdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::HANDLE;
        }
        ::std::mem::transmute(FindExecutableImageExW(filename.into_param().abi(), symbolpath.into_param().abi(), ::std::mem::transmute(imagefilepath), ::std::mem::transmute(callback), ::std::mem::transmute(callerdata)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn FindFileInPath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, searchpatha: Param1, filename: Param2, id: *const ::std::ffi::c_void, two: u32, three: u32, flags: u32, filepath: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn FindFileInPath(hprocess: super::super::super::Foundation::HANDLE, searchpatha: super::super::super::Foundation::PSTR, filename: super::super::super::Foundation::PSTR, id: *const ::std::ffi::c_void, two: u32, three: u32, flags: u32, filepath: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(FindFileInPath(hprocess.into_param().abi(), searchpatha.into_param().abi(), filename.into_param().abi(), ::std::mem::transmute(id), ::std::mem::transmute(two), ::std::mem::transmute(three), ::std::mem::transmute(flags), ::std::mem::transmute(filepath)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn FindFileInSearchPath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, searchpatha: Param1, filename: Param2, one: u32, two: u32, three: u32, filepath: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn FindFileInSearchPath(hprocess: super::super::super::Foundation::HANDLE, searchpatha: super::super::super::Foundation::PSTR, filename: super::super::super::Foundation::PSTR, one: u32, two: u32, three: u32, filepath: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(FindFileInSearchPath(hprocess.into_param().abi(), searchpatha.into_param().abi(), filename.into_param().abi(), ::std::mem::transmute(one), ::std::mem::transmute(two), ::std::mem::transmute(three), ::std::mem::transmute(filepath)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn FlushInstructionCache<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, lpbaseaddress: *const ::std::ffi::c_void, dwsize: usize) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn FlushInstructionCache(hprocess: super::super::super::Foundation::HANDLE, lpbaseaddress: *const ::std::ffi::c_void, dwsize: usize) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(FlushInstructionCache(hprocess.into_param().abi(), ::std::mem::transmute(lpbaseaddress), ::std::mem::transmute(dwsize)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn FormatMessageA(dwflags: FORMAT_MESSAGE_OPTIONS, lpsource: *const ::std::ffi::c_void, dwmessageid: u32, dwlanguageid: u32, lpbuffer: super::super::super::Foundation::PSTR, nsize: u32, arguments: *const *const i8) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn FormatMessageA(dwflags: FORMAT_MESSAGE_OPTIONS, lpsource: *const ::std::ffi::c_void, dwmessageid: u32, dwlanguageid: u32, lpbuffer: super::super::super::Foundation::PSTR, nsize: u32, arguments: *const *const i8) -> u32;
        }
        ::std::mem::transmute(FormatMessageA(::std::mem::transmute(dwflags), ::std::mem::transmute(lpsource), ::std::mem::transmute(dwmessageid), ::std::mem::transmute(dwlanguageid), ::std::mem::transmute(lpbuffer), ::std::mem::transmute(nsize), ::std::mem::transmute(arguments)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn FormatMessageW(dwflags: FORMAT_MESSAGE_OPTIONS, lpsource: *const ::std::ffi::c_void, dwmessageid: u32, dwlanguageid: u32, lpbuffer: super::super::super::Foundation::PWSTR, nsize: u32, arguments: *const *const i8) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn FormatMessageW(dwflags: FORMAT_MESSAGE_OPTIONS, lpsource: *const ::std::ffi::c_void, dwmessageid: u32, dwlanguageid: u32, lpbuffer: super::super::super::Foundation::PWSTR, nsize: u32, arguments: *const *const i8) -> u32;
        }
        ::std::mem::transmute(FormatMessageW(::std::mem::transmute(dwflags), ::std::mem::transmute(lpsource), ::std::mem::transmute(dwmessageid), ::std::mem::transmute(dwlanguageid), ::std::mem::transmute(lpbuffer), ::std::mem::transmute(nsize), ::std::mem::transmute(arguments)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const GETATTRFLAG_HUMANTEXT: u32 = 32768u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const GETATTRFLAG_THIS: u32 = 256u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const GETATTRTYPE_DEPSCAN: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const GETATTRTYPE_NORMAL: u32 = 0u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct GET_CONTEXT_EX {
    pub Status: u32,
    pub ContextSize: u32,
    pub pContext: *mut ::std::ffi::c_void,
}
impl GET_CONTEXT_EX {}
impl ::std::default::Default for GET_CONTEXT_EX {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for GET_CONTEXT_EX {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("GET_CONTEXT_EX").field("Status", &self.Status).field("ContextSize", &self.ContextSize).field("pContext", &self.pContext).finish()
    }
}
impl ::std::cmp::PartialEq for GET_CONTEXT_EX {
    fn eq(&self, other: &Self) -> bool {
        self.Status == other.Status && self.ContextSize == other.ContextSize && self.pContext == other.pContext
    }
}
impl ::std::cmp::Eq for GET_CONTEXT_EX {}
unsafe impl ::windows::runtime::Abi for GET_CONTEXT_EX {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct GET_CURRENT_PROCESS_ADDRESS {
    pub Processor: u32,
    pub CurrentThread: u64,
    pub Address: u64,
}
impl GET_CURRENT_PROCESS_ADDRESS {}
impl ::std::default::Default for GET_CURRENT_PROCESS_ADDRESS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for GET_CURRENT_PROCESS_ADDRESS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("GET_CURRENT_PROCESS_ADDRESS").field("Processor", &self.Processor).field("CurrentThread", &self.CurrentThread).field("Address", &self.Address).finish()
    }
}
impl ::std::cmp::PartialEq for GET_CURRENT_PROCESS_ADDRESS {
    fn eq(&self, other: &Self) -> bool {
        self.Processor == other.Processor && self.CurrentThread == other.CurrentThread && self.Address == other.Address
    }
}
impl ::std::cmp::Eq for GET_CURRENT_PROCESS_ADDRESS {}
unsafe impl ::windows::runtime::Abi for GET_CURRENT_PROCESS_ADDRESS {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct GET_CURRENT_THREAD_ADDRESS {
    pub Processor: u32,
    pub Address: u64,
}
impl GET_CURRENT_THREAD_ADDRESS {}
impl ::std::default::Default for GET_CURRENT_THREAD_ADDRESS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for GET_CURRENT_THREAD_ADDRESS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("GET_CURRENT_THREAD_ADDRESS").field("Processor", &self.Processor).field("Address", &self.Address).finish()
    }
}
impl ::std::cmp::PartialEq for GET_CURRENT_THREAD_ADDRESS {
    fn eq(&self, other: &Self) -> bool {
        self.Processor == other.Processor && self.Address == other.Address
    }
}
impl ::std::cmp::Eq for GET_CURRENT_THREAD_ADDRESS {}
unsafe impl ::windows::runtime::Abi for GET_CURRENT_THREAD_ADDRESS {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct GET_EXPRESSION_EX {
    pub Expression: super::super::super::Foundation::PSTR,
    pub Remainder: super::super::super::Foundation::PSTR,
    pub Value: u64,
}
#[cfg(feature = "Win32_Foundation")]
impl GET_EXPRESSION_EX {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for GET_EXPRESSION_EX {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for GET_EXPRESSION_EX {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("GET_EXPRESSION_EX").field("Expression", &self.Expression).field("Remainder", &self.Remainder).field("Value", &self.Value).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for GET_EXPRESSION_EX {
    fn eq(&self, other: &Self) -> bool {
        self.Expression == other.Expression && self.Remainder == other.Remainder && self.Value == other.Value
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for GET_EXPRESSION_EX {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for GET_EXPRESSION_EX {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct GET_INPUT_LINE {
    pub Prompt: super::super::super::Foundation::PSTR,
    pub Buffer: super::super::super::Foundation::PSTR,
    pub BufferSize: u32,
    pub InputSize: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl GET_INPUT_LINE {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for GET_INPUT_LINE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for GET_INPUT_LINE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("GET_INPUT_LINE").field("Prompt", &self.Prompt).field("Buffer", &self.Buffer).field("BufferSize", &self.BufferSize).field("InputSize", &self.InputSize).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for GET_INPUT_LINE {
    fn eq(&self, other: &Self) -> bool {
        self.Prompt == other.Prompt && self.Buffer == other.Buffer && self.BufferSize == other.BufferSize && self.InputSize == other.InputSize
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for GET_INPUT_LINE {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for GET_INPUT_LINE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct GET_PEB_ADDRESS {
    pub CurrentThread: u64,
    pub Address: u64,
}
impl GET_PEB_ADDRESS {}
impl ::std::default::Default for GET_PEB_ADDRESS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for GET_PEB_ADDRESS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("GET_PEB_ADDRESS").field("CurrentThread", &self.CurrentThread).field("Address", &self.Address).finish()
    }
}
impl ::std::cmp::PartialEq for GET_PEB_ADDRESS {
    fn eq(&self, other: &Self) -> bool {
        self.CurrentThread == other.CurrentThread && self.Address == other.Address
    }
}
impl ::std::cmp::Eq for GET_PEB_ADDRESS {}
unsafe impl ::windows::runtime::Abi for GET_PEB_ADDRESS {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct GET_SET_SYMPATH {
    pub Args: super::super::super::Foundation::PSTR,
    pub Result: super::super::super::Foundation::PSTR,
    pub Length: i32,
}
#[cfg(feature = "Win32_Foundation")]
impl GET_SET_SYMPATH {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for GET_SET_SYMPATH {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for GET_SET_SYMPATH {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("GET_SET_SYMPATH").field("Args", &self.Args).field("Result", &self.Result).field("Length", &self.Length).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for GET_SET_SYMPATH {
    fn eq(&self, other: &Self) -> bool {
        self.Args == other.Args && self.Result == other.Result && self.Length == other.Length
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for GET_SET_SYMPATH {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for GET_SET_SYMPATH {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct GET_TEB_ADDRESS {
    pub Address: u64,
}
impl GET_TEB_ADDRESS {}
impl ::std::default::Default for GET_TEB_ADDRESS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for GET_TEB_ADDRESS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("GET_TEB_ADDRESS").field("Address", &self.Address).finish()
    }
}
impl ::std::cmp::PartialEq for GET_TEB_ADDRESS {
    fn eq(&self, other: &Self) -> bool {
        self.Address == other.Address
    }
}
impl ::std::cmp::Eq for GET_TEB_ADDRESS {}
unsafe impl ::windows::runtime::Abi for GET_TEB_ADDRESS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn GetEnabledXStateFeatures() -> u64 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetEnabledXStateFeatures() -> u64;
        }
        ::std::mem::transmute(GetEnabledXStateFeatures())
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn GetErrorMode() -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetErrorMode() -> u32;
        }
        ::std::mem::transmute(GetErrorMode())
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Kernel`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn GetImageConfigInformation(loadedimage: *const LOADED_IMAGE, imageconfiginformation: *mut IMAGE_LOAD_CONFIG_DIRECTORY64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetImageConfigInformation(loadedimage: *const LOADED_IMAGE, imageconfiginformation: *mut IMAGE_LOAD_CONFIG_DIRECTORY64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(GetImageConfigInformation(::std::mem::transmute(loadedimage), ::std::mem::transmute(imageconfiginformation)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Kernel`*"]
#[inline]
pub unsafe fn GetImageUnusedHeaderBytes(loadedimage: *const LOADED_IMAGE, sizeunusedheaderbytes: *mut u32) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetImageUnusedHeaderBytes(loadedimage: *const LOADED_IMAGE, sizeunusedheaderbytes: *mut u32) -> u32;
        }
        ::std::mem::transmute(GetImageUnusedHeaderBytes(::std::mem::transmute(loadedimage), ::std::mem::transmute(sizeunusedheaderbytes)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn GetSymLoadError() -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetSymLoadError() -> u32;
        }
        ::std::mem::transmute(GetSymLoadError())
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn GetThreadContext<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hthread: Param0, lpcontext: *mut CONTEXT) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetThreadContext(hthread: super::super::super::Foundation::HANDLE, lpcontext: *mut CONTEXT) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(GetThreadContext(hthread.into_param().abi(), ::std::mem::transmute(lpcontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn GetThreadErrorMode() -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetThreadErrorMode() -> u32;
        }
        ::std::mem::transmute(GetThreadErrorMode())
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn GetThreadSelectorEntry<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hthread: Param0, dwselector: u32, lpselectorentry: *mut LDT_ENTRY) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetThreadSelectorEntry(hthread: super::super::super::Foundation::HANDLE, dwselector: u32, lpselectorentry: *mut LDT_ENTRY) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(GetThreadSelectorEntry(hthread.into_param().abi(), ::std::mem::transmute(dwselector), ::std::mem::transmute(lpselectorentry)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn GetThreadWaitChain(wcthandle: *const ::std::ffi::c_void, context: usize, flags: WAIT_CHAIN_THREAD_OPTIONS, threadid: u32, nodecount: *mut u32, nodeinfoarray: *mut WAITCHAIN_NODE_INFO, iscycle: *mut i32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetThreadWaitChain(wcthandle: *const ::std::ffi::c_void, context: usize, flags: WAIT_CHAIN_THREAD_OPTIONS, threadid: u32, nodecount: *mut u32, nodeinfoarray: *mut WAITCHAIN_NODE_INFO, iscycle: *mut i32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(GetThreadWaitChain(::std::mem::transmute(wcthandle), ::std::mem::transmute(context), ::std::mem::transmute(flags), ::std::mem::transmute(threadid), ::std::mem::transmute(nodecount), ::std::mem::transmute(nodeinfoarray), ::std::mem::transmute(iscycle)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn GetTimestampForLoadedLibrary<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HINSTANCE>>(module: Param0) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetTimestampForLoadedLibrary(module: super::super::super::Foundation::HINSTANCE) -> u32;
        }
        ::std::mem::transmute(GetTimestampForLoadedLibrary(module.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn GetXStateFeaturesMask(context: *const CONTEXT, featuremask: *mut u64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetXStateFeaturesMask(context: *const CONTEXT, featuremask: *mut u64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(GetXStateFeaturesMask(::std::mem::transmute(context), ::std::mem::transmute(featuremask)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScript(::windows::runtime::IUnknown);
impl IActiveScript {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetScriptSite<'a, Param0: ::windows::runtime::IntoParam<'a, IActiveScriptSite>>(&self, pass: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), pass.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetScriptSite<T: ::windows::runtime::Interface>(&self) -> ::windows::runtime::Result<T> {
        let mut result__ = ::std::option::Option::None;
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &<T as ::windows::runtime::Interface>::IID, &mut result__ as *mut _ as *mut _).and_some(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetScriptState(&self, ss: SCRIPTSTATE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(ss)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetScriptState(&self) -> ::windows::runtime::Result<SCRIPTSTATE> {
        let mut result__: <SCRIPTSTATE as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<SCRIPTSTATE>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddNamedItem<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pstrname: Param0, dwflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), pstrname.into_param().abi(), ::std::mem::transmute(dwflags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddTypeLib(&self, rguidtypelib: *const ::windows::runtime::GUID, dwmajor: u32, dwminor: u32, dwflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(rguidtypelib), ::std::mem::transmute(dwmajor), ::std::mem::transmute(dwminor), ::std::mem::transmute(dwflags)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetScriptDispatch<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pstritemname: Param0) -> ::windows::runtime::Result<super::super::Ole::Automation::IDispatch> {
        let mut result__: <super::super::Ole::Automation::IDispatch as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), pstritemname.into_param().abi(), &mut result__).from_abi::<super::super::Ole::Automation::IDispatch>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentScriptThreadID(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetScriptThreadID(&self, dwwin32threadid: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwwin32threadid), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetScriptThreadState(&self, stidthread: u32) -> ::windows::runtime::Result<SCRIPTTHREADSTATE> {
        let mut result__: <SCRIPTTHREADSTATE as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(stidthread), &mut result__).from_abi::<SCRIPTTHREADSTATE>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn InterruptScriptThread(&self, stidthread: u32, pexcepinfo: *const super::super::Ole::Automation::EXCEPINFO, dwflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(stidthread), ::std::mem::transmute(pexcepinfo), ::std::mem::transmute(dwflags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IActiveScript> {
        let mut result__: <IActiveScript as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IActiveScript>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScript {
    type Vtable = IActiveScript_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3139054305, 42233, 4559, [143, 32, 0, 128, 95, 44, 208, 100]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScript_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pass: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::std::ffi::c_void) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ss: SCRIPTSTATE) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pssstate: *mut SCRIPTSTATE) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstrname: super::super::super::Foundation::PWSTR, dwflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, rguidtypelib: *const ::windows::runtime::GUID, dwmajor: u32, dwminor: u32, dwflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstritemname: super::super::super::Foundation::PWSTR, ppdisp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstidthread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwwin32threadid: u32, pstidthread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, stidthread: u32, pstsstate: *mut SCRIPTTHREADSTATE) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, stidthread: u32, pexcepinfo: *const ::std::mem::ManuallyDrop<super::super::Ole::Automation::EXCEPINFO>, dwflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppscript: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptAuthor(::windows::runtime::IUnknown);
impl IActiveScriptAuthor {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn AddNamedItem<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::Ole::Automation::IDispatch>>(&self, pszname: Param0, dwflags: u32, pdisp: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), pszname.into_param().abi(), ::std::mem::transmute(dwflags), pdisp.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddScriptlet<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
    >(
        &self,
        pszdefaultname: Param0,
        pszcode: Param1,
        pszitemname: Param2,
        pszsubitemname: Param3,
        pszeventname: Param4,
        pszdelimiter: Param5,
        dwcookie: u32,
        dwflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), pszdefaultname.into_param().abi(), pszcode.into_param().abi(), pszitemname.into_param().abi(), pszsubitemname.into_param().abi(), pszeventname.into_param().abi(), pszdelimiter.into_param().abi(), ::std::mem::transmute(dwcookie), ::std::mem::transmute(dwflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ParseScriptText<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pszcode: Param0, pszitemname: Param1, pszdelimiter: Param2, dwcookie: u32, dwflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), pszcode.into_param().abi(), pszitemname.into_param().abi(), pszdelimiter.into_param().abi(), ::std::mem::transmute(dwcookie), ::std::mem::transmute(dwflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetScriptTextAttributes<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pszcode: Param0, cch: u32, pszdelimiter: Param2, dwflags: u32, pattr: *mut u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), pszcode.into_param().abi(), ::std::mem::transmute(cch), pszdelimiter.into_param().abi(), ::std::mem::transmute(dwflags), ::std::mem::transmute(pattr)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetScriptletTextAttributes<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pszcode: Param0, cch: u32, pszdelimiter: Param2, dwflags: u32, pattr: *mut u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), pszcode.into_param().abi(), ::std::mem::transmute(cch), pszdelimiter.into_param().abi(), ::std::mem::transmute(dwflags), ::std::mem::transmute(pattr)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRoot(&self) -> ::windows::runtime::Result<IScriptNode> {
        let mut result__: <IScriptNode as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IScriptNode>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetLanguageFlags(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetEventHandler<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Ole::Automation::IDispatch>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pdisp: Param0, pszitem: Param1, pszsubitem: Param2, pszevent: Param3) -> ::windows::runtime::Result<IScriptEntry> {
        let mut result__: <IScriptEntry as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), pdisp.into_param().abi(), pszitem.into_param().abi(), pszsubitem.into_param().abi(), pszevent.into_param().abi(), &mut result__).from_abi::<IScriptEntry>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn RemoveNamedItem<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pszname: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), pszname.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddTypeLib(&self, rguidtypelib: *const ::windows::runtime::GUID, dwmajor: u32, dwminor: u32, dwflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(rguidtypelib), ::std::mem::transmute(dwmajor), ::std::mem::transmute(dwminor), ::std::mem::transmute(dwflags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveTypeLib(&self, rguidtypelib: *const ::windows::runtime::GUID, dwmajor: u32, dwminor: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(rguidtypelib), ::std::mem::transmute(dwmajor), ::std::mem::transmute(dwminor)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetChars(&self, frequestedlist: u32) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(frequestedlist), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetInfoFromContext<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pszcode: Param0, cchcode: u32, ichcurrentposition: u32, dwlisttypesrequested: u32, pdwlisttypesprovided: *mut u32, pichlistanchorposition: *mut u32, pichfuncanchorposition: *mut u32, pmemid: *mut i32, picurrentparameter: *mut i32, ppunk: *mut ::std::option::Option<::windows::runtime::IUnknown>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            pszcode.into_param().abi(),
            ::std::mem::transmute(cchcode),
            ::std::mem::transmute(ichcurrentposition),
            ::std::mem::transmute(dwlisttypesrequested),
            ::std::mem::transmute(pdwlisttypesprovided),
            ::std::mem::transmute(pichlistanchorposition),
            ::std::mem::transmute(pichfuncanchorposition),
            ::std::mem::transmute(pmemid),
            ::std::mem::transmute(picurrentparameter),
            ::std::mem::transmute(ppunk),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn IsCommitChar(&self, ch: u16) -> ::windows::runtime::Result<super::super::super::Foundation::BOOL> {
        let mut result__: <super::super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(ch), &mut result__).from_abi::<super::super::super::Foundation::BOOL>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptAuthor {
    type Vtable = IActiveScriptAuthor_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2618334624, 28678, 4561, [179, 108, 0, 160, 201, 17, 232, 178]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptAuthor_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszname: super::super::super::Foundation::PWSTR, dwflags: u32, pdisp: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszdefaultname: super::super::super::Foundation::PWSTR, pszcode: super::super::super::Foundation::PWSTR, pszitemname: super::super::super::Foundation::PWSTR, pszsubitemname: super::super::super::Foundation::PWSTR, pszeventname: super::super::super::Foundation::PWSTR, pszdelimiter: super::super::super::Foundation::PWSTR, dwcookie: u32, dwflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszcode: super::super::super::Foundation::PWSTR, pszitemname: super::super::super::Foundation::PWSTR, pszdelimiter: super::super::super::Foundation::PWSTR, dwcookie: u32, dwflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszcode: super::super::super::Foundation::PWSTR, cch: u32, pszdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszcode: super::super::super::Foundation::PWSTR, cch: u32, pszdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppsp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pgrfasa: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdisp: ::windows::runtime::RawPtr, pszitem: super::super::super::Foundation::PWSTR, pszsubitem: super::super::super::Foundation::PWSTR, pszevent: super::super::super::Foundation::PWSTR, ppse: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszname: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, rguidtypelib: *const ::windows::runtime::GUID, dwmajor: u32, dwminor: u32, dwflags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, rguidtypelib: *const ::windows::runtime::GUID, dwmajor: u32, dwminor: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, frequestedlist: u32, pbstrchars: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszcode: super::super::super::Foundation::PWSTR, cchcode: u32, ichcurrentposition: u32, dwlisttypesrequested: u32, pdwlisttypesprovided: *mut u32, pichlistanchorposition: *mut u32, pichfuncanchorposition: *mut u32, pmemid: *mut i32, picurrentparameter: *mut i32, ppunk: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ch: u16, pfcommit: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptAuthorProcedure(::windows::runtime::IUnknown);
impl IActiveScriptAuthorProcedure {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn ParseProcedureText<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param7: ::windows::runtime::IntoParam<'a, super::super::Ole::Automation::IDispatch>,
    >(
        &self,
        pszcode: Param0,
        pszformalparams: Param1,
        pszprocedurename: Param2,
        pszitemname: Param3,
        pszdelimiter: Param4,
        dwcookie: u32,
        dwflags: u32,
        pdispfor: Param7,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), pszcode.into_param().abi(), pszformalparams.into_param().abi(), pszprocedurename.into_param().abi(), pszitemname.into_param().abi(), pszdelimiter.into_param().abi(), ::std::mem::transmute(dwcookie), ::std::mem::transmute(dwflags), pdispfor.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptAuthorProcedure {
    type Vtable = IActiveScriptAuthorProcedure_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2116897648, 48538, 4560, [147, 54, 0, 160, 201, 13, 202, 169]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptAuthorProcedure_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    pub  unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszcode: super::super::super::Foundation::PWSTR, pszformalparams: super::super::super::Foundation::PWSTR, pszprocedurename: super::super::super::Foundation::PWSTR, pszitemname: super::super::super::Foundation::PWSTR, pszdelimiter: super::super::super::Foundation::PWSTR, dwcookie: u32, dwflags: u32, pdispfor: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptDebug32(::windows::runtime::IUnknown);
impl IActiveScriptDebug32 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetScriptTextAttributes<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pstrcode: Param0, unumcodechars: u32, pstrdelimiter: Param2, dwflags: u32, pattr: *mut u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), pstrcode.into_param().abi(), ::std::mem::transmute(unumcodechars), pstrdelimiter.into_param().abi(), ::std::mem::transmute(dwflags), ::std::mem::transmute(pattr)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetScriptletTextAttributes<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pstrcode: Param0, unumcodechars: u32, pstrdelimiter: Param2, dwflags: u32, pattr: *mut u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), pstrcode.into_param().abi(), ::std::mem::transmute(unumcodechars), pstrdelimiter.into_param().abi(), ::std::mem::transmute(dwflags), ::std::mem::transmute(pattr)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumCodeContextsOfPosition(&self, dwsourcecontext: u32, ucharacteroffset: u32, unumchars: u32) -> ::windows::runtime::Result<IEnumDebugCodeContexts> {
        let mut result__: <IEnumDebugCodeContexts as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwsourcecontext), ::std::mem::transmute(ucharacteroffset), ::std::mem::transmute(unumchars), &mut result__).from_abi::<IEnumDebugCodeContexts>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptDebug32 {
    type Vtable = IActiveScriptDebug32_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865808, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptDebug32_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsourcecontext: u32, ucharacteroffset: u32, unumchars: u32, ppescc: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptDebug64(::windows::runtime::IUnknown);
impl IActiveScriptDebug64 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetScriptTextAttributes<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pstrcode: Param0, unumcodechars: u32, pstrdelimiter: Param2, dwflags: u32, pattr: *mut u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), pstrcode.into_param().abi(), ::std::mem::transmute(unumcodechars), pstrdelimiter.into_param().abi(), ::std::mem::transmute(dwflags), ::std::mem::transmute(pattr)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetScriptletTextAttributes<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pstrcode: Param0, unumcodechars: u32, pstrdelimiter: Param2, dwflags: u32, pattr: *mut u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), pstrcode.into_param().abi(), ::std::mem::transmute(unumcodechars), pstrdelimiter.into_param().abi(), ::std::mem::transmute(dwflags), ::std::mem::transmute(pattr)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumCodeContextsOfPosition(&self, dwsourcecontext: u64, ucharacteroffset: u32, unumchars: u32) -> ::windows::runtime::Result<IEnumDebugCodeContexts> {
        let mut result__: <IEnumDebugCodeContexts as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwsourcecontext), ::std::mem::transmute(ucharacteroffset), ::std::mem::transmute(unumchars), &mut result__).from_abi::<IEnumDebugCodeContexts>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptDebug64 {
    type Vtable = IActiveScriptDebug64_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3158539811, 62904, 18420, [187, 121, 125, 28, 229, 72, 59, 134]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptDebug64_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsourcecontext: u64, ucharacteroffset: u32, unumchars: u32, ppescc: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptEncode(::windows::runtime::IUnknown);
impl IActiveScriptEncode {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn EncodeSection<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pchin: Param0, cchin: u32, pchout: Param2, cchout: u32, pcchret: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), pchin.into_param().abi(), ::std::mem::transmute(cchin), pchout.into_param().abi(), ::std::mem::transmute(cchout), ::std::mem::transmute(pcchret)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn DecodeScript<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pchin: Param0, cchin: u32, pchout: Param2, cchout: u32, pcchret: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), pchin.into_param().abi(), ::std::mem::transmute(cchin), pchout.into_param().abi(), ::std::mem::transmute(cchout), ::std::mem::transmute(pcchret)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEncodeProgId(&self, pbstrout: *mut super::super::super::Foundation::BSTR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(pbstrout)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptEncode {
    type Vtable = IActiveScriptEncode_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3139054307, 42233, 4559, [143, 32, 0, 128, 95, 44, 208, 100]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptEncode_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pchin: super::super::super::Foundation::PWSTR, cchin: u32, pchout: super::super::super::Foundation::PWSTR, cchout: u32, pcchret: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pchin: super::super::super::Foundation::PWSTR, cchin: u32, pchout: super::super::super::Foundation::PWSTR, cchout: u32, pcchret: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstrout: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptError(::windows::runtime::IUnknown);
impl IActiveScriptError {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetExceptionInfo(&self) -> ::windows::runtime::Result<super::super::Ole::Automation::EXCEPINFO> {
        let mut result__: <super::super::Ole::Automation::EXCEPINFO as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Ole::Automation::EXCEPINFO>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSourcePosition(&self, pdwsourcecontext: *mut u32, pullinenumber: *mut u32, plcharacterposition: *mut i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(pdwsourcecontext), ::std::mem::transmute(pullinenumber), ::std::mem::transmute(plcharacterposition)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceLineText(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptError {
    type Vtable = IActiveScriptError_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3940661857, 42221, 4559, [143, 32, 0, 128, 95, 44, 208, 100]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptError_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::Ole::Automation::EXCEPINFO>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwsourcecontext: *mut u32, pullinenumber: *mut u32, plcharacterposition: *mut i32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstrsourceline: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptError64(::windows::runtime::IUnknown);
impl IActiveScriptError64 {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetExceptionInfo(&self) -> ::windows::runtime::Result<super::super::Ole::Automation::EXCEPINFO> {
        let mut result__: <super::super::Ole::Automation::EXCEPINFO as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Ole::Automation::EXCEPINFO>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSourcePosition(&self, pdwsourcecontext: *mut u32, pullinenumber: *mut u32, plcharacterposition: *mut i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(pdwsourcecontext), ::std::mem::transmute(pullinenumber), ::std::mem::transmute(plcharacterposition)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceLineText(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSourcePosition64(&self, pdwsourcecontext: *mut u64, pullinenumber: *mut u32, plcharacterposition: *mut i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(pdwsourcecontext), ::std::mem::transmute(pullinenumber), ::std::mem::transmute(plcharacterposition)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptError64 {
    type Vtable = IActiveScriptError64_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2988421793, 23439, 18787, [140, 33, 33, 69, 15, 132, 237, 127]);
}
impl ::std::convert::From<IActiveScriptError64> for IActiveScriptError {
    fn from(value: IActiveScriptError64) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IActiveScriptError64> for IActiveScriptError {
    fn from(value: &IActiveScriptError64) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptError> for IActiveScriptError64 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptError> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptError>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptError> for &IActiveScriptError64 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptError> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptError>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptError64_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::Ole::Automation::EXCEPINFO>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwsourcecontext: *mut u32, pullinenumber: *mut u32, plcharacterposition: *mut i32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstrsourceline: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwsourcecontext: *mut u64, pullinenumber: *mut u32, plcharacterposition: *mut i32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptErrorDebug(::windows::runtime::IUnknown);
impl IActiveScriptErrorDebug {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetExceptionInfo(&self) -> ::windows::runtime::Result<super::super::Ole::Automation::EXCEPINFO> {
        let mut result__: <super::super::Ole::Automation::EXCEPINFO as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Ole::Automation::EXCEPINFO>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSourcePosition(&self, pdwsourcecontext: *mut u32, pullinenumber: *mut u32, plcharacterposition: *mut i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(pdwsourcecontext), ::std::mem::transmute(pullinenumber), ::std::mem::transmute(plcharacterposition)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceLineText(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDocumentContext(&self) -> ::windows::runtime::Result<IDebugDocumentContext> {
        let mut result__: <IDebugDocumentContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugDocumentContext>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetStackFrame(&self) -> ::windows::runtime::Result<IDebugStackFrame> {
        let mut result__: <IDebugStackFrame as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugStackFrame>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptErrorDebug {
    type Vtable = IActiveScriptErrorDebug_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865810, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
impl ::std::convert::From<IActiveScriptErrorDebug> for IActiveScriptError {
    fn from(value: IActiveScriptErrorDebug) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IActiveScriptErrorDebug> for IActiveScriptError {
    fn from(value: &IActiveScriptErrorDebug) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptError> for IActiveScriptErrorDebug {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptError> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptError>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptError> for &IActiveScriptErrorDebug {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptError> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptError>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptErrorDebug_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::Ole::Automation::EXCEPINFO>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwsourcecontext: *mut u32, pullinenumber: *mut u32, plcharacterposition: *mut i32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstrsourceline: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppssc: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppdsf: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptErrorDebug110(::windows::runtime::IUnknown);
impl IActiveScriptErrorDebug110 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExceptionThrownKind(&self) -> ::windows::runtime::Result<SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND> {
        let mut result__: <SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptErrorDebug110 {
    type Vtable = IActiveScriptErrorDebug110_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1366180534, 35240, 17712, [147, 123, 95, 7, 8, 67, 20, 66]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptErrorDebug110_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pexceptionkind: *mut SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptGarbageCollector(::windows::runtime::IUnknown);
impl IActiveScriptGarbageCollector {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CollectGarbage(&self, scriptgctype: SCRIPTGCTYPE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(scriptgctype)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptGarbageCollector {
    type Vtable = IActiveScriptGarbageCollector_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1789052064, 11091, 4564, [162, 160, 0, 16, 75, 211, 80, 144]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptGarbageCollector_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, scriptgctype: SCRIPTGCTYPE) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptHostEncode(::windows::runtime::IUnknown);
impl IActiveScriptHostEncode {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn EncodeScriptHostFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BSTR>>(&self, bstrinfile: Param0, pbstroutfile: *mut super::super::super::Foundation::BSTR, cflags: u32, bstrdefaultlang: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), bstrinfile.into_param().abi(), ::std::mem::transmute(pbstroutfile), ::std::mem::transmute(cflags), bstrdefaultlang.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptHostEncode {
    type Vtable = IActiveScriptHostEncode_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3202987886, 53219, 4561, [183, 71, 0, 192, 79, 194, 176, 133]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptHostEncode_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bstrinfile: ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, pbstroutfile: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, cflags: u32, bstrdefaultlang: ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptParse32(::windows::runtime::IUnknown);
impl IActiveScriptParse32 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn InitNew(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn AddScriptlet<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
    >(
        &self,
        pstrdefaultname: Param0,
        pstrcode: Param1,
        pstritemname: Param2,
        pstrsubitemname: Param3,
        pstreventname: Param4,
        pstrdelimiter: Param5,
        dwsourcecontextcookie: u32,
        ulstartinglinenumber: u32,
        dwflags: u32,
        pbstrname: *mut super::super::super::Foundation::BSTR,
        pexcepinfo: *mut super::super::Ole::Automation::EXCEPINFO,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            pstrdefaultname.into_param().abi(),
            pstrcode.into_param().abi(),
            pstritemname.into_param().abi(),
            pstrsubitemname.into_param().abi(),
            pstreventname.into_param().abi(),
            pstrdelimiter.into_param().abi(),
            ::std::mem::transmute(dwsourcecontextcookie),
            ::std::mem::transmute(ulstartinglinenumber),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(pbstrname),
            ::std::mem::transmute(pexcepinfo),
        )
        .ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn ParseScriptText<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(
        &self,
        pstrcode: Param0,
        pstritemname: Param1,
        punkcontext: Param2,
        pstrdelimiter: Param3,
        dwsourcecontextcookie: u32,
        ulstartinglinenumber: u32,
        dwflags: u32,
        pvarresult: *mut super::super::Com::VARIANT,
        pexcepinfo: *mut super::super::Ole::Automation::EXCEPINFO,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            pstrcode.into_param().abi(),
            pstritemname.into_param().abi(),
            punkcontext.into_param().abi(),
            pstrdelimiter.into_param().abi(),
            ::std::mem::transmute(dwsourcecontextcookie),
            ::std::mem::transmute(ulstartinglinenumber),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptParse32 {
    type Vtable = IActiveScriptParse32_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3139054306, 42233, 4559, [143, 32, 0, 128, 95, 44, 208, 100]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptParse32_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstrdefaultname: super::super::super::Foundation::PWSTR,
        pstrcode: super::super::super::Foundation::PWSTR,
        pstritemname: super::super::super::Foundation::PWSTR,
        pstrsubitemname: super::super::super::Foundation::PWSTR,
        pstreventname: super::super::super::Foundation::PWSTR,
        pstrdelimiter: super::super::super::Foundation::PWSTR,
        dwsourcecontextcookie: u32,
        ulstartinglinenumber: u32,
        dwflags: u32,
        pbstrname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::Ole::Automation::EXCEPINFO>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstrcode: super::super::super::Foundation::PWSTR,
        pstritemname: super::super::super::Foundation::PWSTR,
        punkcontext: ::windows::runtime::RawPtr,
        pstrdelimiter: super::super::super::Foundation::PWSTR,
        dwsourcecontextcookie: u32,
        ulstartinglinenumber: u32,
        dwflags: u32,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::Ole::Automation::EXCEPINFO>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptParse64(::windows::runtime::IUnknown);
impl IActiveScriptParse64 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn InitNew(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn AddScriptlet<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
    >(
        &self,
        pstrdefaultname: Param0,
        pstrcode: Param1,
        pstritemname: Param2,
        pstrsubitemname: Param3,
        pstreventname: Param4,
        pstrdelimiter: Param5,
        dwsourcecontextcookie: u64,
        ulstartinglinenumber: u32,
        dwflags: u32,
        pbstrname: *mut super::super::super::Foundation::BSTR,
        pexcepinfo: *mut super::super::Ole::Automation::EXCEPINFO,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            pstrdefaultname.into_param().abi(),
            pstrcode.into_param().abi(),
            pstritemname.into_param().abi(),
            pstrsubitemname.into_param().abi(),
            pstreventname.into_param().abi(),
            pstrdelimiter.into_param().abi(),
            ::std::mem::transmute(dwsourcecontextcookie),
            ::std::mem::transmute(ulstartinglinenumber),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(pbstrname),
            ::std::mem::transmute(pexcepinfo),
        )
        .ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn ParseScriptText<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(
        &self,
        pstrcode: Param0,
        pstritemname: Param1,
        punkcontext: Param2,
        pstrdelimiter: Param3,
        dwsourcecontextcookie: u64,
        ulstartinglinenumber: u32,
        dwflags: u32,
        pvarresult: *mut super::super::Com::VARIANT,
        pexcepinfo: *mut super::super::Ole::Automation::EXCEPINFO,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            pstrcode.into_param().abi(),
            pstritemname.into_param().abi(),
            punkcontext.into_param().abi(),
            pstrdelimiter.into_param().abi(),
            ::std::mem::transmute(dwsourcecontextcookie),
            ::std::mem::transmute(ulstartinglinenumber),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptParse64 {
    type Vtable = IActiveScriptParse64_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3354359384, 57838, 18446, [151, 234, 213, 44, 180, 215, 109, 23]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptParse64_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstrdefaultname: super::super::super::Foundation::PWSTR,
        pstrcode: super::super::super::Foundation::PWSTR,
        pstritemname: super::super::super::Foundation::PWSTR,
        pstrsubitemname: super::super::super::Foundation::PWSTR,
        pstreventname: super::super::super::Foundation::PWSTR,
        pstrdelimiter: super::super::super::Foundation::PWSTR,
        dwsourcecontextcookie: u64,
        ulstartinglinenumber: u32,
        dwflags: u32,
        pbstrname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::Ole::Automation::EXCEPINFO>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstrcode: super::super::super::Foundation::PWSTR,
        pstritemname: super::super::super::Foundation::PWSTR,
        punkcontext: ::windows::runtime::RawPtr,
        pstrdelimiter: super::super::super::Foundation::PWSTR,
        dwsourcecontextcookie: u64,
        ulstartinglinenumber: u32,
        dwflags: u32,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::Ole::Automation::EXCEPINFO>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptParseProcedure2_32(::windows::runtime::IUnknown);
impl IActiveScriptParseProcedure2_32 {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn ParseProcedureText<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param4: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
        Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
    >(
        &self,
        pstrcode: Param0,
        pstrformalparams: Param1,
        pstrprocedurename: Param2,
        pstritemname: Param3,
        punkcontext: Param4,
        pstrdelimiter: Param5,
        dwsourcecontextcookie: u32,
        ulstartinglinenumber: u32,
        dwflags: u32,
    ) -> ::windows::runtime::Result<super::super::Ole::Automation::IDispatch> {
        let mut result__: <super::super::Ole::Automation::IDispatch as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pstrcode.into_param().abi(),
            pstrformalparams.into_param().abi(),
            pstrprocedurename.into_param().abi(),
            pstritemname.into_param().abi(),
            punkcontext.into_param().abi(),
            pstrdelimiter.into_param().abi(),
            ::std::mem::transmute(dwsourcecontextcookie),
            ::std::mem::transmute(ulstartinglinenumber),
            ::std::mem::transmute(dwflags),
            &mut result__,
        )
        .from_abi::<super::super::Ole::Automation::IDispatch>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptParseProcedure2_32 {
    type Vtable = IActiveScriptParseProcedure2_32_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1911446304, 64260, 4561, [179, 168, 0, 160, 201, 17, 232, 178]);
}
impl ::std::convert::From<IActiveScriptParseProcedure2_32> for IActiveScriptParseProcedure32 {
    fn from(value: IActiveScriptParseProcedure2_32) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IActiveScriptParseProcedure2_32> for IActiveScriptParseProcedure32 {
    fn from(value: &IActiveScriptParseProcedure2_32) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptParseProcedure32> for IActiveScriptParseProcedure2_32 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptParseProcedure32> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptParseProcedure32>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptParseProcedure32> for &IActiveScriptParseProcedure2_32 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptParseProcedure32> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptParseProcedure32>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptParseProcedure2_32_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstrcode: super::super::super::Foundation::PWSTR,
        pstrformalparams: super::super::super::Foundation::PWSTR,
        pstrprocedurename: super::super::super::Foundation::PWSTR,
        pstritemname: super::super::super::Foundation::PWSTR,
        punkcontext: ::windows::runtime::RawPtr,
        pstrdelimiter: super::super::super::Foundation::PWSTR,
        dwsourcecontextcookie: u32,
        ulstartinglinenumber: u32,
        dwflags: u32,
        ppdisp: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptParseProcedure2_64(::windows::runtime::IUnknown);
impl IActiveScriptParseProcedure2_64 {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn ParseProcedureText<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param4: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
        Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
    >(
        &self,
        pstrcode: Param0,
        pstrformalparams: Param1,
        pstrprocedurename: Param2,
        pstritemname: Param3,
        punkcontext: Param4,
        pstrdelimiter: Param5,
        dwsourcecontextcookie: u64,
        ulstartinglinenumber: u32,
        dwflags: u32,
    ) -> ::windows::runtime::Result<super::super::Ole::Automation::IDispatch> {
        let mut result__: <super::super::Ole::Automation::IDispatch as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pstrcode.into_param().abi(),
            pstrformalparams.into_param().abi(),
            pstrprocedurename.into_param().abi(),
            pstritemname.into_param().abi(),
            punkcontext.into_param().abi(),
            pstrdelimiter.into_param().abi(),
            ::std::mem::transmute(dwsourcecontextcookie),
            ::std::mem::transmute(ulstartinglinenumber),
            ::std::mem::transmute(dwflags),
            &mut result__,
        )
        .from_abi::<super::super::Ole::Automation::IDispatch>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptParseProcedure2_64 {
    type Vtable = IActiveScriptParseProcedure2_64_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4269556337, 8460, 17549, [159, 84, 118, 218, 183, 4, 123, 40]);
}
impl ::std::convert::From<IActiveScriptParseProcedure2_64> for IActiveScriptParseProcedure64 {
    fn from(value: IActiveScriptParseProcedure2_64) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IActiveScriptParseProcedure2_64> for IActiveScriptParseProcedure64 {
    fn from(value: &IActiveScriptParseProcedure2_64) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptParseProcedure64> for IActiveScriptParseProcedure2_64 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptParseProcedure64> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptParseProcedure64>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptParseProcedure64> for &IActiveScriptParseProcedure2_64 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptParseProcedure64> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptParseProcedure64>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptParseProcedure2_64_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstrcode: super::super::super::Foundation::PWSTR,
        pstrformalparams: super::super::super::Foundation::PWSTR,
        pstrprocedurename: super::super::super::Foundation::PWSTR,
        pstritemname: super::super::super::Foundation::PWSTR,
        punkcontext: ::windows::runtime::RawPtr,
        pstrdelimiter: super::super::super::Foundation::PWSTR,
        dwsourcecontextcookie: u64,
        ulstartinglinenumber: u32,
        dwflags: u32,
        ppdisp: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptParseProcedure32(::windows::runtime::IUnknown);
impl IActiveScriptParseProcedure32 {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn ParseProcedureText<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param4: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
        Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
    >(
        &self,
        pstrcode: Param0,
        pstrformalparams: Param1,
        pstrprocedurename: Param2,
        pstritemname: Param3,
        punkcontext: Param4,
        pstrdelimiter: Param5,
        dwsourcecontextcookie: u32,
        ulstartinglinenumber: u32,
        dwflags: u32,
    ) -> ::windows::runtime::Result<super::super::Ole::Automation::IDispatch> {
        let mut result__: <super::super::Ole::Automation::IDispatch as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pstrcode.into_param().abi(),
            pstrformalparams.into_param().abi(),
            pstrprocedurename.into_param().abi(),
            pstritemname.into_param().abi(),
            punkcontext.into_param().abi(),
            pstrdelimiter.into_param().abi(),
            ::std::mem::transmute(dwsourcecontextcookie),
            ::std::mem::transmute(ulstartinglinenumber),
            ::std::mem::transmute(dwflags),
            &mut result__,
        )
        .from_abi::<super::super::Ole::Automation::IDispatch>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptParseProcedure32 {
    type Vtable = IActiveScriptParseProcedure32_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2858117760, 47156, 4560, [147, 47, 0, 160, 201, 13, 202, 169]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptParseProcedure32_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstrcode: super::super::super::Foundation::PWSTR,
        pstrformalparams: super::super::super::Foundation::PWSTR,
        pstrprocedurename: super::super::super::Foundation::PWSTR,
        pstritemname: super::super::super::Foundation::PWSTR,
        punkcontext: ::windows::runtime::RawPtr,
        pstrdelimiter: super::super::super::Foundation::PWSTR,
        dwsourcecontextcookie: u32,
        ulstartinglinenumber: u32,
        dwflags: u32,
        ppdisp: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptParseProcedure64(::windows::runtime::IUnknown);
impl IActiveScriptParseProcedure64 {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn ParseProcedureText<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
        Param4: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
        Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>,
    >(
        &self,
        pstrcode: Param0,
        pstrformalparams: Param1,
        pstrprocedurename: Param2,
        pstritemname: Param3,
        punkcontext: Param4,
        pstrdelimiter: Param5,
        dwsourcecontextcookie: u64,
        ulstartinglinenumber: u32,
        dwflags: u32,
    ) -> ::windows::runtime::Result<super::super::Ole::Automation::IDispatch> {
        let mut result__: <super::super::Ole::Automation::IDispatch as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pstrcode.into_param().abi(),
            pstrformalparams.into_param().abi(),
            pstrprocedurename.into_param().abi(),
            pstritemname.into_param().abi(),
            punkcontext.into_param().abi(),
            pstrdelimiter.into_param().abi(),
            ::std::mem::transmute(dwsourcecontextcookie),
            ::std::mem::transmute(ulstartinglinenumber),
            ::std::mem::transmute(dwflags),
            &mut result__,
        )
        .from_abi::<super::super::Ole::Automation::IDispatch>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptParseProcedure64 {
    type Vtable = IActiveScriptParseProcedure64_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3326546870, 57385, 19653, [146, 0, 67, 139, 114, 137, 11, 106]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptParseProcedure64_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pstrcode: super::super::super::Foundation::PWSTR,
        pstrformalparams: super::super::super::Foundation::PWSTR,
        pstrprocedurename: super::super::super::Foundation::PWSTR,
        pstritemname: super::super::super::Foundation::PWSTR,
        punkcontext: ::windows::runtime::RawPtr,
        pstrdelimiter: super::super::super::Foundation::PWSTR,
        dwsourcecontextcookie: u64,
        ulstartinglinenumber: u32,
        dwflags: u32,
        ppdisp: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptParseProcedureOld32(::windows::runtime::IUnknown);
impl IActiveScriptParseProcedureOld32 {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn ParseProcedureText<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(
        &self,
        pstrcode: Param0,
        pstrformalparams: Param1,
        pstritemname: Param2,
        punkcontext: Param3,
        pstrdelimiter: Param4,
        dwsourcecontextcookie: u32,
        ulstartinglinenumber: u32,
        dwflags: u32,
    ) -> ::windows::runtime::Result<super::super::Ole::Automation::IDispatch> {
        let mut result__: <super::super::Ole::Automation::IDispatch as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pstrcode.into_param().abi(),
            pstrformalparams.into_param().abi(),
            pstritemname.into_param().abi(),
            punkcontext.into_param().abi(),
            pstrdelimiter.into_param().abi(),
            ::std::mem::transmute(dwsourcecontextcookie),
            ::std::mem::transmute(ulstartinglinenumber),
            ::std::mem::transmute(dwflags),
            &mut result__,
        )
        .from_abi::<super::super::Ole::Automation::IDispatch>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptParseProcedureOld32 {
    type Vtable = IActiveScriptParseProcedureOld32_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(486473808, 28637, 4560, [147, 40, 0, 160, 201, 13, 202, 169]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptParseProcedureOld32_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    pub  unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstrcode: super::super::super::Foundation::PWSTR, pstrformalparams: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: ::windows::runtime::RawPtr, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u32, ulstartinglinenumber: u32, dwflags: u32, ppdisp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptParseProcedureOld64(::windows::runtime::IUnknown);
impl IActiveScriptParseProcedureOld64 {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn ParseProcedureText<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(
        &self,
        pstrcode: Param0,
        pstrformalparams: Param1,
        pstritemname: Param2,
        punkcontext: Param3,
        pstrdelimiter: Param4,
        dwsourcecontextcookie: u64,
        ulstartinglinenumber: u32,
        dwflags: u32,
    ) -> ::windows::runtime::Result<super::super::Ole::Automation::IDispatch> {
        let mut result__: <super::super::Ole::Automation::IDispatch as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pstrcode.into_param().abi(),
            pstrformalparams.into_param().abi(),
            pstritemname.into_param().abi(),
            punkcontext.into_param().abi(),
            pstrdelimiter.into_param().abi(),
            ::std::mem::transmute(dwsourcecontextcookie),
            ::std::mem::transmute(ulstartinglinenumber),
            ::std::mem::transmute(dwflags),
            &mut result__,
        )
        .from_abi::<super::super::Ole::Automation::IDispatch>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptParseProcedureOld64 {
    type Vtable = IActiveScriptParseProcedureOld64_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(569733416, 2249, 17976, [186, 18, 34, 209, 93, 136, 220, 92]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptParseProcedureOld64_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    pub  unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstrcode: super::super::super::Foundation::PWSTR, pstrformalparams: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: ::windows::runtime::RawPtr, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u64, ulstartinglinenumber: u32, dwflags: u32, ppdisp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptProfilerCallback(::windows::runtime::IUnknown);
impl IActiveScriptProfilerCallback {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Initialize(&self, dwcontext: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwcontext)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Shutdown(&self, hrreason: ::windows::runtime::HRESULT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(hrreason)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ScriptCompiled<'a, Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, scriptid: i32, r#type: PROFILER_SCRIPT_TYPE, pidebugdocumentcontext: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(scriptid), ::std::mem::transmute(r#type), pidebugdocumentcontext.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FunctionCompiled<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, functionid: i32, scriptid: i32, pwszfunctionname: Param2, pwszfunctionnamehint: Param3, pidebugdocumentcontext: Param4) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(functionid), ::std::mem::transmute(scriptid), pwszfunctionname.into_param().abi(), pwszfunctionnamehint.into_param().abi(), pidebugdocumentcontext.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnFunctionEnter(&self, scriptid: i32, functionid: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(scriptid), ::std::mem::transmute(functionid)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnFunctionExit(&self, scriptid: i32, functionid: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(scriptid), ::std::mem::transmute(functionid)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptProfilerCallback {
    type Vtable = IActiveScriptProfilerCallback_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1947126307, 32157, 17125, [186, 157, 248, 178, 75, 28, 122, 155]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptProfilerCallback_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwcontext: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hrreason: ::windows::runtime::HRESULT) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, scriptid: i32, r#type: PROFILER_SCRIPT_TYPE, pidebugdocumentcontext: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, functionid: i32, scriptid: i32, pwszfunctionname: super::super::super::Foundation::PWSTR, pwszfunctionnamehint: super::super::super::Foundation::PWSTR, pidebugdocumentcontext: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, scriptid: i32, functionid: i32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, scriptid: i32, functionid: i32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptProfilerCallback2(::windows::runtime::IUnknown);
impl IActiveScriptProfilerCallback2 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Initialize(&self, dwcontext: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwcontext)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Shutdown(&self, hrreason: ::windows::runtime::HRESULT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(hrreason)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ScriptCompiled<'a, Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, scriptid: i32, r#type: PROFILER_SCRIPT_TYPE, pidebugdocumentcontext: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(scriptid), ::std::mem::transmute(r#type), pidebugdocumentcontext.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FunctionCompiled<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, functionid: i32, scriptid: i32, pwszfunctionname: Param2, pwszfunctionnamehint: Param3, pidebugdocumentcontext: Param4) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(functionid), ::std::mem::transmute(scriptid), pwszfunctionname.into_param().abi(), pwszfunctionnamehint.into_param().abi(), pidebugdocumentcontext.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnFunctionEnter(&self, scriptid: i32, functionid: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(scriptid), ::std::mem::transmute(functionid)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnFunctionExit(&self, scriptid: i32, functionid: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(scriptid), ::std::mem::transmute(functionid)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OnFunctionEnterByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pwszfunctionname: Param0, r#type: PROFILER_SCRIPT_TYPE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), pwszfunctionname.into_param().abi(), ::std::mem::transmute(r#type)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OnFunctionExitByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pwszfunctionname: Param0, r#type: PROFILER_SCRIPT_TYPE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), pwszfunctionname.into_param().abi(), ::std::mem::transmute(r#type)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptProfilerCallback2 {
    type Vtable = IActiveScriptProfilerCallback2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(834140333, 42551, 16540, [178, 47, 4, 9, 149, 182, 16, 61]);
}
impl ::std::convert::From<IActiveScriptProfilerCallback2> for IActiveScriptProfilerCallback {
    fn from(value: IActiveScriptProfilerCallback2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IActiveScriptProfilerCallback2> for IActiveScriptProfilerCallback {
    fn from(value: &IActiveScriptProfilerCallback2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerCallback> for IActiveScriptProfilerCallback2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerCallback> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerCallback>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerCallback> for &IActiveScriptProfilerCallback2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerCallback> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerCallback>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptProfilerCallback2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwcontext: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hrreason: ::windows::runtime::HRESULT) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, scriptid: i32, r#type: PROFILER_SCRIPT_TYPE, pidebugdocumentcontext: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, functionid: i32, scriptid: i32, pwszfunctionname: super::super::super::Foundation::PWSTR, pwszfunctionnamehint: super::super::super::Foundation::PWSTR, pidebugdocumentcontext: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, scriptid: i32, functionid: i32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, scriptid: i32, functionid: i32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwszfunctionname: super::super::super::Foundation::PWSTR, r#type: PROFILER_SCRIPT_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwszfunctionname: super::super::super::Foundation::PWSTR, r#type: PROFILER_SCRIPT_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptProfilerCallback3(::windows::runtime::IUnknown);
impl IActiveScriptProfilerCallback3 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Initialize(&self, dwcontext: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwcontext)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Shutdown(&self, hrreason: ::windows::runtime::HRESULT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(hrreason)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ScriptCompiled<'a, Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, scriptid: i32, r#type: PROFILER_SCRIPT_TYPE, pidebugdocumentcontext: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(scriptid), ::std::mem::transmute(r#type), pidebugdocumentcontext.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FunctionCompiled<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, functionid: i32, scriptid: i32, pwszfunctionname: Param2, pwszfunctionnamehint: Param3, pidebugdocumentcontext: Param4) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(functionid), ::std::mem::transmute(scriptid), pwszfunctionname.into_param().abi(), pwszfunctionnamehint.into_param().abi(), pidebugdocumentcontext.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnFunctionEnter(&self, scriptid: i32, functionid: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(scriptid), ::std::mem::transmute(functionid)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnFunctionExit(&self, scriptid: i32, functionid: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(scriptid), ::std::mem::transmute(functionid)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OnFunctionEnterByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pwszfunctionname: Param0, r#type: PROFILER_SCRIPT_TYPE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), pwszfunctionname.into_param().abi(), ::std::mem::transmute(r#type)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OnFunctionExitByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pwszfunctionname: Param0, r#type: PROFILER_SCRIPT_TYPE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), pwszfunctionname.into_param().abi(), ::std::mem::transmute(r#type)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetWebWorkerId(&self, webworkerid: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(webworkerid)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptProfilerCallback3 {
    type Vtable = IActiveScriptProfilerCallback3_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1791339813, 8247, 18055, [145, 223, 181, 153, 121, 217, 61, 115]);
}
impl ::std::convert::From<IActiveScriptProfilerCallback3> for IActiveScriptProfilerCallback2 {
    fn from(value: IActiveScriptProfilerCallback3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IActiveScriptProfilerCallback3> for IActiveScriptProfilerCallback2 {
    fn from(value: &IActiveScriptProfilerCallback3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerCallback2> for IActiveScriptProfilerCallback3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerCallback2> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerCallback2>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerCallback2> for &IActiveScriptProfilerCallback3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerCallback2> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerCallback2>::into(::std::clone::Clone::clone(self)))
    }
}
impl ::std::convert::From<IActiveScriptProfilerCallback3> for IActiveScriptProfilerCallback {
    fn from(value: IActiveScriptProfilerCallback3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IActiveScriptProfilerCallback3> for IActiveScriptProfilerCallback {
    fn from(value: &IActiveScriptProfilerCallback3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerCallback> for IActiveScriptProfilerCallback3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerCallback> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerCallback>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerCallback> for &IActiveScriptProfilerCallback3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerCallback> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerCallback>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptProfilerCallback3_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwcontext: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hrreason: ::windows::runtime::HRESULT) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, scriptid: i32, r#type: PROFILER_SCRIPT_TYPE, pidebugdocumentcontext: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, functionid: i32, scriptid: i32, pwszfunctionname: super::super::super::Foundation::PWSTR, pwszfunctionnamehint: super::super::super::Foundation::PWSTR, pidebugdocumentcontext: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, scriptid: i32, functionid: i32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, scriptid: i32, functionid: i32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwszfunctionname: super::super::super::Foundation::PWSTR, r#type: PROFILER_SCRIPT_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwszfunctionname: super::super::super::Foundation::PWSTR, r#type: PROFILER_SCRIPT_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, webworkerid: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptProfilerControl(::windows::runtime::IUnknown);
impl IActiveScriptProfilerControl {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StartProfiling(&self, clsidprofilerobject: *const ::windows::runtime::GUID, dweventmask: u32, dwcontext: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(clsidprofilerobject), ::std::mem::transmute(dweventmask), ::std::mem::transmute(dwcontext)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetProfilerEventMask(&self, dweventmask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(dweventmask)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StopProfiling(&self, hrshutdownreason: ::windows::runtime::HRESULT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(hrshutdownreason)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptProfilerControl {
    type Vtable = IActiveScriptProfilerControl_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2018205680, 27056, 18385, [167, 220, 37, 24, 244, 35, 14, 144]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptProfilerControl_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, clsidprofilerobject: *const ::windows::runtime::GUID, dweventmask: u32, dwcontext: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dweventmask: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hrshutdownreason: ::windows::runtime::HRESULT) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptProfilerControl2(::windows::runtime::IUnknown);
impl IActiveScriptProfilerControl2 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StartProfiling(&self, clsidprofilerobject: *const ::windows::runtime::GUID, dweventmask: u32, dwcontext: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(clsidprofilerobject), ::std::mem::transmute(dweventmask), ::std::mem::transmute(dwcontext)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetProfilerEventMask(&self, dweventmask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(dweventmask)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StopProfiling(&self, hrshutdownreason: ::windows::runtime::HRESULT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(hrshutdownreason)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CompleteProfilerStart(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn PrepareProfilerStop(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptProfilerControl2 {
    type Vtable = IActiveScriptProfilerControl2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1199636837, 18831, 16574, [148, 241, 101, 53, 87, 233, 231, 218]);
}
impl ::std::convert::From<IActiveScriptProfilerControl2> for IActiveScriptProfilerControl {
    fn from(value: IActiveScriptProfilerControl2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IActiveScriptProfilerControl2> for IActiveScriptProfilerControl {
    fn from(value: &IActiveScriptProfilerControl2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerControl> for IActiveScriptProfilerControl2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerControl> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerControl>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerControl> for &IActiveScriptProfilerControl2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerControl> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerControl>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptProfilerControl2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, clsidprofilerobject: *const ::windows::runtime::GUID, dweventmask: u32, dwcontext: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dweventmask: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hrshutdownreason: ::windows::runtime::HRESULT) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptProfilerControl3(::windows::runtime::IUnknown);
impl IActiveScriptProfilerControl3 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StartProfiling(&self, clsidprofilerobject: *const ::windows::runtime::GUID, dweventmask: u32, dwcontext: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(clsidprofilerobject), ::std::mem::transmute(dweventmask), ::std::mem::transmute(dwcontext)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetProfilerEventMask(&self, dweventmask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(dweventmask)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StopProfiling(&self, hrshutdownreason: ::windows::runtime::HRESULT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(hrshutdownreason)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CompleteProfilerStart(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn PrepareProfilerStop(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumHeap(&self) -> ::windows::runtime::Result<IActiveScriptProfilerHeapEnum> {
        let mut result__: <IActiveScriptProfilerHeapEnum as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IActiveScriptProfilerHeapEnum>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptProfilerControl3 {
    type Vtable = IActiveScriptProfilerControl3_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(188755989, 62337, 16419, [165, 208, 111, 237, 7, 109, 231, 22]);
}
impl ::std::convert::From<IActiveScriptProfilerControl3> for IActiveScriptProfilerControl2 {
    fn from(value: IActiveScriptProfilerControl3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IActiveScriptProfilerControl3> for IActiveScriptProfilerControl2 {
    fn from(value: &IActiveScriptProfilerControl3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerControl2> for IActiveScriptProfilerControl3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerControl2> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerControl2>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerControl2> for &IActiveScriptProfilerControl3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerControl2> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerControl2>::into(::std::clone::Clone::clone(self)))
    }
}
impl ::std::convert::From<IActiveScriptProfilerControl3> for IActiveScriptProfilerControl {
    fn from(value: IActiveScriptProfilerControl3) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IActiveScriptProfilerControl3> for IActiveScriptProfilerControl {
    fn from(value: &IActiveScriptProfilerControl3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerControl> for IActiveScriptProfilerControl3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerControl> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerControl>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerControl> for &IActiveScriptProfilerControl3 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerControl> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerControl>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptProfilerControl3_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, clsidprofilerobject: *const ::windows::runtime::GUID, dweventmask: u32, dwcontext: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dweventmask: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hrshutdownreason: ::windows::runtime::HRESULT) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppenum: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptProfilerControl4(::windows::runtime::IUnknown);
impl IActiveScriptProfilerControl4 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StartProfiling(&self, clsidprofilerobject: *const ::windows::runtime::GUID, dweventmask: u32, dwcontext: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(clsidprofilerobject), ::std::mem::transmute(dweventmask), ::std::mem::transmute(dwcontext)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetProfilerEventMask(&self, dweventmask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(dweventmask)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StopProfiling(&self, hrshutdownreason: ::windows::runtime::HRESULT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(hrshutdownreason)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CompleteProfilerStart(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn PrepareProfilerStop(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumHeap(&self) -> ::windows::runtime::Result<IActiveScriptProfilerHeapEnum> {
        let mut result__: <IActiveScriptProfilerHeapEnum as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IActiveScriptProfilerHeapEnum>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SummarizeHeap(&self, heapsummary: *mut PROFILER_HEAP_SUMMARY) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(heapsummary)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptProfilerControl4 {
    type Vtable = IActiveScriptProfilerControl4_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(370119933, 40380, 16596, [158, 172, 43, 113, 219, 49, 50, 244]);
}
impl ::std::convert::From<IActiveScriptProfilerControl4> for IActiveScriptProfilerControl3 {
    fn from(value: IActiveScriptProfilerControl4) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IActiveScriptProfilerControl4> for IActiveScriptProfilerControl3 {
    fn from(value: &IActiveScriptProfilerControl4) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerControl3> for IActiveScriptProfilerControl4 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerControl3> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerControl3>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerControl3> for &IActiveScriptProfilerControl4 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerControl3> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerControl3>::into(::std::clone::Clone::clone(self)))
    }
}
impl ::std::convert::From<IActiveScriptProfilerControl4> for IActiveScriptProfilerControl2 {
    fn from(value: IActiveScriptProfilerControl4) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IActiveScriptProfilerControl4> for IActiveScriptProfilerControl2 {
    fn from(value: &IActiveScriptProfilerControl4) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerControl2> for IActiveScriptProfilerControl4 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerControl2> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerControl2>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerControl2> for &IActiveScriptProfilerControl4 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerControl2> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerControl2>::into(::std::clone::Clone::clone(self)))
    }
}
impl ::std::convert::From<IActiveScriptProfilerControl4> for IActiveScriptProfilerControl {
    fn from(value: IActiveScriptProfilerControl4) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IActiveScriptProfilerControl4> for IActiveScriptProfilerControl {
    fn from(value: &IActiveScriptProfilerControl4) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerControl> for IActiveScriptProfilerControl4 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerControl> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerControl>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerControl> for &IActiveScriptProfilerControl4 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerControl> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerControl>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptProfilerControl4_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, clsidprofilerobject: *const ::windows::runtime::GUID, dweventmask: u32, dwcontext: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dweventmask: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hrshutdownreason: ::windows::runtime::HRESULT) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppenum: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, heapsummary: *mut PROFILER_HEAP_SUMMARY) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptProfilerControl5(::windows::runtime::IUnknown);
impl IActiveScriptProfilerControl5 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StartProfiling(&self, clsidprofilerobject: *const ::windows::runtime::GUID, dweventmask: u32, dwcontext: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(clsidprofilerobject), ::std::mem::transmute(dweventmask), ::std::mem::transmute(dwcontext)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetProfilerEventMask(&self, dweventmask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(dweventmask)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StopProfiling(&self, hrshutdownreason: ::windows::runtime::HRESULT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(hrshutdownreason)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CompleteProfilerStart(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn PrepareProfilerStop(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumHeap(&self) -> ::windows::runtime::Result<IActiveScriptProfilerHeapEnum> {
        let mut result__: <IActiveScriptProfilerHeapEnum as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IActiveScriptProfilerHeapEnum>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SummarizeHeap(&self, heapsummary: *mut PROFILER_HEAP_SUMMARY) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(heapsummary)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumHeap2(&self, enumflags: PROFILER_HEAP_ENUM_FLAGS) -> ::windows::runtime::Result<IActiveScriptProfilerHeapEnum> {
        let mut result__: <IActiveScriptProfilerHeapEnum as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(enumflags), &mut result__).from_abi::<IActiveScriptProfilerHeapEnum>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptProfilerControl5 {
    type Vtable = IActiveScriptProfilerControl5_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(469869265, 36623, 18085, [151, 32, 13, 126, 210, 198, 47, 10]);
}
impl ::std::convert::From<IActiveScriptProfilerControl5> for IActiveScriptProfilerControl4 {
    fn from(value: IActiveScriptProfilerControl5) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IActiveScriptProfilerControl5> for IActiveScriptProfilerControl4 {
    fn from(value: &IActiveScriptProfilerControl5) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerControl4> for IActiveScriptProfilerControl5 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerControl4> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerControl4>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerControl4> for &IActiveScriptProfilerControl5 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerControl4> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerControl4>::into(::std::clone::Clone::clone(self)))
    }
}
impl ::std::convert::From<IActiveScriptProfilerControl5> for IActiveScriptProfilerControl3 {
    fn from(value: IActiveScriptProfilerControl5) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IActiveScriptProfilerControl5> for IActiveScriptProfilerControl3 {
    fn from(value: &IActiveScriptProfilerControl5) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerControl3> for IActiveScriptProfilerControl5 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerControl3> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerControl3>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerControl3> for &IActiveScriptProfilerControl5 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerControl3> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerControl3>::into(::std::clone::Clone::clone(self)))
    }
}
impl ::std::convert::From<IActiveScriptProfilerControl5> for IActiveScriptProfilerControl2 {
    fn from(value: IActiveScriptProfilerControl5) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IActiveScriptProfilerControl5> for IActiveScriptProfilerControl2 {
    fn from(value: &IActiveScriptProfilerControl5) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerControl2> for IActiveScriptProfilerControl5 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerControl2> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerControl2>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerControl2> for &IActiveScriptProfilerControl5 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerControl2> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerControl2>::into(::std::clone::Clone::clone(self)))
    }
}
impl ::std::convert::From<IActiveScriptProfilerControl5> for IActiveScriptProfilerControl {
    fn from(value: IActiveScriptProfilerControl5) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IActiveScriptProfilerControl5> for IActiveScriptProfilerControl {
    fn from(value: &IActiveScriptProfilerControl5) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerControl> for IActiveScriptProfilerControl5 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerControl> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerControl>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptProfilerControl> for &IActiveScriptProfilerControl5 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptProfilerControl> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptProfilerControl>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptProfilerControl5_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, clsidprofilerobject: *const ::windows::runtime::GUID, dweventmask: u32, dwcontext: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dweventmask: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hrshutdownreason: ::windows::runtime::HRESULT) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppenum: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, heapsummary: *mut PROFILER_HEAP_SUMMARY) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, enumflags: PROFILER_HEAP_ENUM_FLAGS, ppenum: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptProfilerHeapEnum(::windows::runtime::IUnknown);
impl IActiveScriptProfilerHeapEnum {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Next(&self, celt: u32, heapobjects: *mut *mut PROFILER_HEAP_OBJECT, pceltfetched: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(celt), ::std::mem::transmute(heapobjects), ::std::mem::transmute(pceltfetched)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOptionalInfo(&self, heapobject: *const PROFILER_HEAP_OBJECT, celt: u32, optionalinfo: *mut PROFILER_HEAP_OBJECT_OPTIONAL_INFO) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(heapobject), ::std::mem::transmute(celt), ::std::mem::transmute(optionalinfo)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FreeObjectAndOptionalInfo(&self, celt: u32, heapobjects: *const *const PROFILER_HEAP_OBJECT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(celt), ::std::mem::transmute(heapobjects)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNameIdMap(&self, pnamelist: *mut *mut *mut super::super::super::Foundation::PWSTR, pcelt: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(pnamelist), ::std::mem::transmute(pcelt)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptProfilerHeapEnum {
    type Vtable = IActiveScriptProfilerHeapEnum_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(853829966, 3383, 16795, [185, 61, 250, 32, 222, 214, 232, 234]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptProfilerHeapEnum_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, celt: u32, heapobjects: *mut *mut PROFILER_HEAP_OBJECT, pceltfetched: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, heapobject: *const PROFILER_HEAP_OBJECT, celt: u32, optionalinfo: *mut PROFILER_HEAP_OBJECT_OPTIONAL_INFO) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, celt: u32, heapobjects: *const *const PROFILER_HEAP_OBJECT) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pnamelist: *mut *mut *mut super::super::super::Foundation::PWSTR, pcelt: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptProperty(::windows::runtime::IUnknown);
impl IActiveScriptProperty {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetProperty(&self, dwproperty: u32, pvarindex: *const super::super::Com::VARIANT) -> ::windows::runtime::Result<super::super::Com::VARIANT> {
        let mut result__: <super::super::Com::VARIANT as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwproperty), ::std::mem::transmute(pvarindex), &mut result__).from_abi::<super::super::Com::VARIANT>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetProperty(&self, dwproperty: u32, pvarindex: *const super::super::Com::VARIANT, pvarvalue: *const super::super::Com::VARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwproperty), ::std::mem::transmute(pvarindex), ::std::mem::transmute(pvarvalue)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptProperty {
    type Vtable = IActiveScriptProperty_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1230299344, 64455, 4561, [132, 16, 0, 96, 8, 195, 251, 252]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptProperty_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwproperty: u32, pvarindex: *const ::std::mem::ManuallyDrop<super::super::Com::VARIANT>, pvarvalue: *mut ::std::mem::ManuallyDrop<super::super::Com::VARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwproperty: u32, pvarindex: *const ::std::mem::ManuallyDrop<super::super::Com::VARIANT>, pvarvalue: *const ::std::mem::ManuallyDrop<super::super::Com::VARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptSIPInfo(::windows::runtime::IUnknown);
impl IActiveScriptSIPInfo {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSIPOID(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptSIPInfo {
    type Vtable = IActiveScriptSIPInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1984319952, 14558, 4564, [162, 163, 0, 16, 75, 211, 80, 144]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptSIPInfo_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, poid_sip: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptSite(::windows::runtime::IUnknown);
impl IActiveScriptSite {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetLCID(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetItemInfo<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pstrname: Param0, dwreturnmask: u32, ppiunkitem: *mut ::std::option::Option<::windows::runtime::IUnknown>, ppti: *mut ::std::option::Option<super::super::Ole::Automation::ITypeInfo>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), pstrname.into_param().abi(), ::std::mem::transmute(dwreturnmask), ::std::mem::transmute(ppiunkitem), ::std::mem::transmute(ppti)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDocVersionString(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn OnScriptTerminate(&self, pvarresult: *const super::super::Com::VARIANT, pexcepinfo: *const super::super::Ole::Automation::EXCEPINFO) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(pvarresult), ::std::mem::transmute(pexcepinfo)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnStateChange(&self, ssscriptstate: SCRIPTSTATE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(ssscriptstate)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnScriptError<'a, Param0: ::windows::runtime::IntoParam<'a, IActiveScriptError>>(&self, pscripterror: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), pscripterror.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnEnterScript(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnLeaveScript(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptSite {
    type Vtable = IActiveScriptSite_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3674317283, 42027, 4559, [143, 32, 0, 128, 95, 44, 208, 100]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptSite_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, plcid: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstrname: super::super::super::Foundation::PWSTR, dwreturnmask: u32, ppiunkitem: *mut ::windows::runtime::RawPtr, ppti: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstrversion: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pvarresult: *const ::std::mem::ManuallyDrop<super::super::Com::VARIANT>, pexcepinfo: *const ::std::mem::ManuallyDrop<super::super::Ole::Automation::EXCEPINFO>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ssscriptstate: SCRIPTSTATE) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pscripterror: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptSiteDebug32(::windows::runtime::IUnknown);
impl IActiveScriptSiteDebug32 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDocumentContextFromPosition(&self, dwsourcecontext: u32, ucharacteroffset: u32, unumchars: u32) -> ::windows::runtime::Result<IDebugDocumentContext> {
        let mut result__: <IDebugDocumentContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwsourcecontext), ::std::mem::transmute(ucharacteroffset), ::std::mem::transmute(unumchars), &mut result__).from_abi::<IDebugDocumentContext>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetApplication(&self) -> ::windows::runtime::Result<IDebugApplication32> {
        let mut result__: <IDebugApplication32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugApplication32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRootApplicationNode(&self) -> ::windows::runtime::Result<IDebugApplicationNode> {
        let mut result__: <IDebugApplicationNode as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugApplicationNode>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OnScriptErrorDebug<'a, Param0: ::windows::runtime::IntoParam<'a, IActiveScriptErrorDebug>>(&self, perrordebug: Param0, pfenterdebugger: *mut super::super::super::Foundation::BOOL, pfcallonscripterrorwhencontinuing: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), perrordebug.into_param().abi(), ::std::mem::transmute(pfenterdebugger), ::std::mem::transmute(pfcallonscripterrorwhencontinuing)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptSiteDebug32 {
    type Vtable = IActiveScriptSiteDebug32_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865809, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptSiteDebug32_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsourcecontext: u32, ucharacteroffset: u32, unumchars: u32, ppsc: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppda: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppdanroot: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, perrordebug: ::windows::runtime::RawPtr, pfenterdebugger: *mut super::super::super::Foundation::BOOL, pfcallonscripterrorwhencontinuing: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptSiteDebug64(::windows::runtime::IUnknown);
impl IActiveScriptSiteDebug64 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDocumentContextFromPosition(&self, dwsourcecontext: u64, ucharacteroffset: u32, unumchars: u32) -> ::windows::runtime::Result<IDebugDocumentContext> {
        let mut result__: <IDebugDocumentContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwsourcecontext), ::std::mem::transmute(ucharacteroffset), ::std::mem::transmute(unumchars), &mut result__).from_abi::<IDebugDocumentContext>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetApplication(&self) -> ::windows::runtime::Result<IDebugApplication64> {
        let mut result__: <IDebugApplication64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugApplication64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRootApplicationNode(&self) -> ::windows::runtime::Result<IDebugApplicationNode> {
        let mut result__: <IDebugApplicationNode as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugApplicationNode>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OnScriptErrorDebug<'a, Param0: ::windows::runtime::IntoParam<'a, IActiveScriptErrorDebug>>(&self, perrordebug: Param0, pfenterdebugger: *mut super::super::super::Foundation::BOOL, pfcallonscripterrorwhencontinuing: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), perrordebug.into_param().abi(), ::std::mem::transmute(pfenterdebugger), ::std::mem::transmute(pfcallonscripterrorwhencontinuing)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptSiteDebug64 {
    type Vtable = IActiveScriptSiteDebug64_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3602475786, 29795, 16428, [146, 172, 137, 152, 66, 38, 148, 47]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptSiteDebug64_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsourcecontext: u64, ucharacteroffset: u32, unumchars: u32, ppsc: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppda: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppdanroot: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, perrordebug: ::windows::runtime::RawPtr, pfenterdebugger: *mut super::super::super::Foundation::BOOL, pfcallonscripterrorwhencontinuing: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptSiteDebugEx(::windows::runtime::IUnknown);
impl IActiveScriptSiteDebugEx {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OnCanNotJITScriptErrorDebug<'a, Param0: ::windows::runtime::IntoParam<'a, IActiveScriptErrorDebug>>(&self, perrordebug: Param0) -> ::windows::runtime::Result<super::super::super::Foundation::BOOL> {
        let mut result__: <super::super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), perrordebug.into_param().abi(), &mut result__).from_abi::<super::super::super::Foundation::BOOL>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptSiteDebugEx {
    type Vtable = IActiveScriptSiteDebugEx_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3144821963, 27346, 16838, [183, 128, 175, 156, 3, 238, 105, 245]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptSiteDebugEx_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, perrordebug: ::windows::runtime::RawPtr, pfcallonscripterrorwhencontinuing: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptSiteInterruptPoll(::windows::runtime::IUnknown);
impl IActiveScriptSiteInterruptPoll {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn QueryContinue(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptSiteInterruptPoll {
    type Vtable = IActiveScriptSiteInterruptPoll_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1402378400, 52682, 4559, [165, 235, 0, 170, 0, 71, 160, 99]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptSiteInterruptPoll_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptSiteTraceInfo(::windows::runtime::IUnknown);
impl IActiveScriptSiteTraceInfo {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SendScriptTraceInfo<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(&self, stieventtype: SCRIPTTRACEINFO, guidcontextid: Param1, dwscriptcontextcookie: u32, lscriptstatementstart: i32, lscriptstatementend: i32, dwreserved: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(stieventtype), guidcontextid.into_param().abi(), ::std::mem::transmute(dwscriptcontextcookie), ::std::mem::transmute(lscriptstatementstart), ::std::mem::transmute(lscriptstatementend), ::std::mem::transmute(dwreserved)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptSiteTraceInfo {
    type Vtable = IActiveScriptSiteTraceInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1265791662, 6485, 19454, [152, 176, 120, 6, 33, 136, 133, 105]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptSiteTraceInfo_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, stieventtype: SCRIPTTRACEINFO, guidcontextid: ::windows::runtime::GUID, dwscriptcontextcookie: u32, lscriptstatementstart: i32, lscriptstatementend: i32, dwreserved: u64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptSiteUIControl(::windows::runtime::IUnknown);
impl IActiveScriptSiteUIControl {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetUIBehavior(&self, uicitem: SCRIPTUICITEM) -> ::windows::runtime::Result<SCRIPTUICHANDLING> {
        let mut result__: <SCRIPTUICHANDLING as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(uicitem), &mut result__).from_abi::<SCRIPTUICHANDLING>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptSiteUIControl {
    type Vtable = IActiveScriptSiteUIControl_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2933582206, 55278, 18326, [185, 96, 127, 9, 42, 232, 68, 171]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptSiteUIControl_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, uicitem: SCRIPTUICITEM, puichandling: *mut SCRIPTUICHANDLING) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptSiteWindow(::windows::runtime::IUnknown);
impl IActiveScriptSiteWindow {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetWindow(&self) -> ::windows::runtime::Result<super::super::super::Foundation::HWND> {
        let mut result__: <super::super::super::Foundation::HWND as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::HWND>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn EnableModeless<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(&self, fenable: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), fenable.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptSiteWindow {
    type Vtable = IActiveScriptSiteWindow_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3507447649, 33769, 4559, [143, 32, 0, 128, 95, 44, 208, 100]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptSiteWindow_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, phwnd: *mut super::super::super::Foundation::HWND) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fenable: super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptStats(::windows::runtime::IUnknown);
impl IActiveScriptStats {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetStat(&self, stid: u32, pluhi: *mut u32, plulo: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(stid), ::std::mem::transmute(pluhi), ::std::mem::transmute(plulo)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetStatEx(&self, guid: *const ::windows::runtime::GUID, pluhi: *mut u32, plulo: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(guid), ::std::mem::transmute(pluhi), ::std::mem::transmute(plulo)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ResetStats(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptStats {
    type Vtable = IActiveScriptStats_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3101319952, 57755, 4560, [147, 60, 0, 160, 201, 13, 202, 169]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptStats_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, stid: u32, pluhi: *mut u32, plulo: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, pluhi: *mut u32, plulo: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptStringCompare(::windows::runtime::IUnknown);
impl IActiveScriptStringCompare {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StrComp<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BSTR>>(&self, bszstr1: Param0, bszstr2: Param1) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), bszstr1.into_param().abi(), bszstr2.into_param().abi(), &mut result__).from_abi::<i32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptStringCompare {
    type Vtable = IActiveScriptStringCompare_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1482041193, 60754, 17143, [132, 3, 73, 99, 81, 78, 31, 17]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptStringCompare_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bszstr1: ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, bszstr2: ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, iret: *mut i32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptTraceInfo(::windows::runtime::IUnknown);
impl IActiveScriptTraceInfo {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StartScriptTracing<'a, Param0: ::windows::runtime::IntoParam<'a, IActiveScriptSiteTraceInfo>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>>(&self, psitetraceinfo: Param0, guidcontextid: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), psitetraceinfo.into_param().abi(), guidcontextid.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StopScriptTracing(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptTraceInfo {
    type Vtable = IActiveScriptTraceInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3277084391, 48831, 18971, [134, 169, 36, 213, 107, 232, 179, 105]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptTraceInfo_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psitetraceinfo: ::windows::runtime::RawPtr, guidcontextid: ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IActiveScriptWinRTErrorDebug(::windows::runtime::IUnknown);
impl IActiveScriptWinRTErrorDebug {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetExceptionInfo(&self) -> ::windows::runtime::Result<super::super::Ole::Automation::EXCEPINFO> {
        let mut result__: <super::super::Ole::Automation::EXCEPINFO as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Ole::Automation::EXCEPINFO>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSourcePosition(&self, pdwsourcecontext: *mut u32, pullinenumber: *mut u32, plcharacterposition: *mut i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(pdwsourcecontext), ::std::mem::transmute(pullinenumber), ::std::mem::transmute(plcharacterposition)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceLineText(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRestrictedErrorString(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRestrictedErrorReference(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetCapabilitySid(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IActiveScriptWinRTErrorDebug {
    type Vtable = IActiveScriptWinRTErrorDebug_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1940125738, 4073, 19251, [186, 59, 254, 9, 95, 105, 126, 10]);
}
impl ::std::convert::From<IActiveScriptWinRTErrorDebug> for IActiveScriptError {
    fn from(value: IActiveScriptWinRTErrorDebug) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IActiveScriptWinRTErrorDebug> for IActiveScriptError {
    fn from(value: &IActiveScriptWinRTErrorDebug) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptError> for IActiveScriptWinRTErrorDebug {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptError> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptError>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IActiveScriptError> for &IActiveScriptWinRTErrorDebug {
    fn into_param(self) -> ::windows::runtime::Param<'a, IActiveScriptError> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IActiveScriptError>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IActiveScriptWinRTErrorDebug_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::Ole::Automation::EXCEPINFO>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwsourcecontext: *mut u32, pullinenumber: *mut u32, plcharacterposition: *mut i32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstrsourceline: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, errorstring: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, referencestring: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, capabilitysid: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IApplicationDebugger(::windows::runtime::IUnknown);
impl IApplicationDebugger {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn QueryAlive(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateInstanceAtDebugger<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, rclsid: *const ::windows::runtime::GUID, punkouter: Param1, dwclscontext: u32, riid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(rclsid), punkouter.into_param().abi(), ::std::mem::transmute(dwclscontext), ::std::mem::transmute(riid), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn onDebugOutput<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pstr: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), pstr.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn onHandleBreakPoint<'a, Param0: ::windows::runtime::IntoParam<'a, IRemoteDebugApplicationThread>, Param2: ::windows::runtime::IntoParam<'a, IActiveScriptErrorDebug>>(&self, prpt: Param0, br: BREAKREASON, perror: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), prpt.into_param().abi(), ::std::mem::transmute(br), perror.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn onClose(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn onDebuggerEvent<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, riid: *const ::windows::runtime::GUID, punk: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(riid), punk.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IApplicationDebugger {
    type Vtable = IApplicationDebugger_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865834, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IApplicationDebugger_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, rclsid: *const ::windows::runtime::GUID, punkouter: ::windows::runtime::RawPtr, dwclscontext: u32, riid: *const ::windows::runtime::GUID, ppvobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstr: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prpt: ::windows::runtime::RawPtr, br: BREAKREASON, perror: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, punk: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IApplicationDebuggerUI(::windows::runtime::IUnknown);
impl IApplicationDebuggerUI {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn BringDocumentToTop<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugDocumentText>>(&self, pddt: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), pddt.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn BringDocumentContextToTop<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugDocumentContext>>(&self, pddc: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), pddc.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IApplicationDebuggerUI {
    type Vtable = IApplicationDebuggerUI_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865835, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IApplicationDebuggerUI_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pddt: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pddc: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IBindEventHandler(::windows::runtime::IUnknown);
impl IBindEventHandler {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn BindHandler<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::Ole::Automation::IDispatch>>(&self, pstrevent: Param0, pdisp: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), pstrevent.into_param().abi(), pdisp.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IBindEventHandler {
    type Vtable = IBindEventHandler_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1674427568, 49585, 4560, [147, 54, 0, 160, 201, 13, 202, 169]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBindEventHandler_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstrevent: super::super::super::Foundation::PWSTR, pdisp: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct ICodeAddressConcept(::windows::runtime::IUnknown);
impl ICodeAddressConcept {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContainingSymbol<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, pcontextobject: Param0) -> ::windows::runtime::Result<IDebugHostSymbol> {
        let mut result__: <IDebugHostSymbol as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), pcontextobject.into_param().abi(), &mut result__).from_abi::<IDebugHostSymbol>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ICodeAddressConcept {
    type Vtable = ICodeAddressConcept_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3342275944, 23672, 18944, [164, 171, 110, 248, 130, 49, 132, 203]);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICodeAddressConcept_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcontextobject: ::windows::runtime::RawPtr, ppsymbol: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IComparableConcept(::windows::runtime::IUnknown);
impl IComparableConcept {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CompareObjects<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>, Param1: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, contextobject: Param0, otherobject: Param1) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), contextobject.into_param().abi(), otherobject.into_param().abi(), &mut result__).from_abi::<i32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IComparableConcept {
    type Vtable = IComparableConcept_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2810381894, 40716, 18993, [186, 25, 80, 63, 51, 230, 200, 163]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IComparableConcept_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, contextobject: ::windows::runtime::RawPtr, otherobject: ::windows::runtime::RawPtr, comparisonresult: *mut i32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDataModelConcept(::windows::runtime::IUnknown);
impl IDataModelConcept {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn InitializeObject<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>, Param1: ::windows::runtime::IntoParam<'a, IDebugHostTypeSignature>, Param2: ::windows::runtime::IntoParam<'a, IDebugHostSymbolEnumerator>>(&self, modelobject: Param0, matchingtypesignature: Param1, wildcardmatches: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), modelobject.into_param().abi(), matchingtypesignature.into_param().abi(), wildcardmatches.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDataModelConcept {
    type Vtable = IDataModelConcept_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4240018717, 4372, 20415, [178, 76, 239, 252, 181, 222, 240, 211]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataModelConcept_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, modelobject: ::windows::runtime::RawPtr, matchingtypesignature: ::windows::runtime::RawPtr, wildcardmatches: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, modelname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDataModelManager(::windows::runtime::IUnknown);
impl IDataModelManager {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateNoValue(&self) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateErrorObject<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, hrerror: ::windows::runtime::HRESULT, pwszmessage: Param1) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(hrerror), pwszmessage.into_param().abi(), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateTypedObject<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>, Param1: ::windows::runtime::IntoParam<'a, Location>, Param2: ::windows::runtime::IntoParam<'a, IDebugHostType>>(&self, context: Param0, objectlocation: Param1, objecttype: Param2) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), context.into_param().abi(), objectlocation.into_param().abi(), objecttype.into_param().abi(), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateTypedObjectReference<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>, Param1: ::windows::runtime::IntoParam<'a, Location>, Param2: ::windows::runtime::IntoParam<'a, IDebugHostType>>(&self, context: Param0, objectlocation: Param1, objecttype: Param2) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), context.into_param().abi(), objectlocation.into_param().abi(), objecttype.into_param().abi(), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateSyntheticObject<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>>(&self, context: Param0) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), context.into_param().abi(), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateDataModelObject<'a, Param0: ::windows::runtime::IntoParam<'a, IDataModelConcept>>(&self, datamodel: Param0) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), datamodel.into_param().abi(), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CreateIntrinsicObject(&self, objectkind: ModelObjectKind, intrinsicdata: *const super::super::Com::VARIANT) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(objectkind), ::std::mem::transmute(intrinsicdata), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CreateTypedIntrinsicObject<'a, Param1: ::windows::runtime::IntoParam<'a, IDebugHostType>>(&self, intrinsicdata: *const super::super::Com::VARIANT, r#type: Param1) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(intrinsicdata), r#type.into_param().abi(), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetModelForTypeSignature<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostTypeSignature>>(&self, typesignature: Param0) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), typesignature.into_param().abi(), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetModelForType<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostType>>(&self, r#type: Param0, datamodel: *mut ::std::option::Option<IModelObject>, typesignature: *mut ::std::option::Option<IDebugHostTypeSignature>, wildcardmatches: *mut ::std::option::Option<IDebugHostSymbolEnumerator>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), r#type.into_param().abi(), ::std::mem::transmute(datamodel), ::std::mem::transmute(typesignature), ::std::mem::transmute(wildcardmatches)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RegisterModelForTypeSignature<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostTypeSignature>, Param1: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, typesignature: Param0, datamodel: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), typesignature.into_param().abi(), datamodel.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn UnregisterModelForTypeSignature<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>, Param1: ::windows::runtime::IntoParam<'a, IDebugHostTypeSignature>>(&self, datamodel: Param0, typesignature: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), datamodel.into_param().abi(), typesignature.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RegisterExtensionForTypeSignature<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostTypeSignature>, Param1: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, typesignature: Param0, datamodel: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), typesignature.into_param().abi(), datamodel.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn UnregisterExtensionForTypeSignature<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>, Param1: ::windows::runtime::IntoParam<'a, IDebugHostTypeSignature>>(&self, datamodel: Param0, typesignature: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), datamodel.into_param().abi(), typesignature.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateMetadataStore<'a, Param0: ::windows::runtime::IntoParam<'a, IKeyStore>>(&self, parentstore: Param0) -> ::windows::runtime::Result<IKeyStore> {
        let mut result__: <IKeyStore as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), parentstore.into_param().abi(), &mut result__).from_abi::<IKeyStore>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRootNamespace(&self) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn RegisterNamedModel<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, modelname: Param0, modeobject: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), modelname.into_param().abi(), modeobject.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn UnregisterNamedModel<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, modelname: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), modelname.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AcquireNamedModel<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, modelname: Param0) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), modelname.into_param().abi(), &mut result__).from_abi::<IModelObject>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDataModelManager {
    type Vtable = IDataModelManager_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1946032628, 41232, 17664, [142, 217, 60, 40, 137, 111, 80, 140]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataModelManager_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, object: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hrerror: ::windows::runtime::HRESULT, pwszmessage: super::super::super::Foundation::PWSTR, object: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, objectlocation: Location, objecttype: ::windows::runtime::RawPtr, object: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, objectlocation: Location, objecttype: ::windows::runtime::RawPtr, object: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, object: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, datamodel: ::windows::runtime::RawPtr, object: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, objectkind: ModelObjectKind, intrinsicdata: *const ::std::mem::ManuallyDrop<super::super::Com::VARIANT>, object: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, intrinsicdata: *const ::std::mem::ManuallyDrop<super::super::Com::VARIANT>, r#type: ::windows::runtime::RawPtr, object: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, typesignature: ::windows::runtime::RawPtr, datamodel: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: ::windows::runtime::RawPtr, datamodel: *mut ::windows::runtime::RawPtr, typesignature: *mut ::windows::runtime::RawPtr, wildcardmatches: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, typesignature: ::windows::runtime::RawPtr, datamodel: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, datamodel: ::windows::runtime::RawPtr, typesignature: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, typesignature: ::windows::runtime::RawPtr, datamodel: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, datamodel: ::windows::runtime::RawPtr, typesignature: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, parentstore: ::windows::runtime::RawPtr, metadatastore: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, rootnamespace: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, modelname: super::super::super::Foundation::PWSTR, modeobject: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, modelname: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, modelname: super::super::super::Foundation::PWSTR, modelobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDataModelManager2(::windows::runtime::IUnknown);
impl IDataModelManager2 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateNoValue(&self) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateErrorObject<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, hrerror: ::windows::runtime::HRESULT, pwszmessage: Param1) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(hrerror), pwszmessage.into_param().abi(), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateTypedObject<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>, Param1: ::windows::runtime::IntoParam<'a, Location>, Param2: ::windows::runtime::IntoParam<'a, IDebugHostType>>(&self, context: Param0, objectlocation: Param1, objecttype: Param2) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), context.into_param().abi(), objectlocation.into_param().abi(), objecttype.into_param().abi(), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateTypedObjectReference<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>, Param1: ::windows::runtime::IntoParam<'a, Location>, Param2: ::windows::runtime::IntoParam<'a, IDebugHostType>>(&self, context: Param0, objectlocation: Param1, objecttype: Param2) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), context.into_param().abi(), objectlocation.into_param().abi(), objecttype.into_param().abi(), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateSyntheticObject<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>>(&self, context: Param0) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), context.into_param().abi(), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateDataModelObject<'a, Param0: ::windows::runtime::IntoParam<'a, IDataModelConcept>>(&self, datamodel: Param0) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), datamodel.into_param().abi(), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CreateIntrinsicObject(&self, objectkind: ModelObjectKind, intrinsicdata: *const super::super::Com::VARIANT) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(objectkind), ::std::mem::transmute(intrinsicdata), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CreateTypedIntrinsicObject<'a, Param1: ::windows::runtime::IntoParam<'a, IDebugHostType>>(&self, intrinsicdata: *const super::super::Com::VARIANT, r#type: Param1) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(intrinsicdata), r#type.into_param().abi(), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetModelForTypeSignature<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostTypeSignature>>(&self, typesignature: Param0) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), typesignature.into_param().abi(), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetModelForType<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostType>>(&self, r#type: Param0, datamodel: *mut ::std::option::Option<IModelObject>, typesignature: *mut ::std::option::Option<IDebugHostTypeSignature>, wildcardmatches: *mut ::std::option::Option<IDebugHostSymbolEnumerator>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), r#type.into_param().abi(), ::std::mem::transmute(datamodel), ::std::mem::transmute(typesignature), ::std::mem::transmute(wildcardmatches)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RegisterModelForTypeSignature<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostTypeSignature>, Param1: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, typesignature: Param0, datamodel: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), typesignature.into_param().abi(), datamodel.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn UnregisterModelForTypeSignature<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>, Param1: ::windows::runtime::IntoParam<'a, IDebugHostTypeSignature>>(&self, datamodel: Param0, typesignature: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), datamodel.into_param().abi(), typesignature.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RegisterExtensionForTypeSignature<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostTypeSignature>, Param1: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, typesignature: Param0, datamodel: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), typesignature.into_param().abi(), datamodel.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn UnregisterExtensionForTypeSignature<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>, Param1: ::windows::runtime::IntoParam<'a, IDebugHostTypeSignature>>(&self, datamodel: Param0, typesignature: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), datamodel.into_param().abi(), typesignature.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateMetadataStore<'a, Param0: ::windows::runtime::IntoParam<'a, IKeyStore>>(&self, parentstore: Param0) -> ::windows::runtime::Result<IKeyStore> {
        let mut result__: <IKeyStore as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), parentstore.into_param().abi(), &mut result__).from_abi::<IKeyStore>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRootNamespace(&self) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn RegisterNamedModel<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, modelname: Param0, modeobject: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), modelname.into_param().abi(), modeobject.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn UnregisterNamedModel<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, modelname: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), modelname.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AcquireNamedModel<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, modelname: Param0) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), modelname.into_param().abi(), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AcquireSubNamespace<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, IKeyStore>>(&self, modelname: Param0, subnamespacemodelname: Param1, accessname: Param2, metadata: Param3) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), modelname.into_param().abi(), subnamespacemodelname.into_param().abi(), accessname.into_param().abi(), metadata.into_param().abi(), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CreateTypedIntrinsicObjectEx<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>, Param2: ::windows::runtime::IntoParam<'a, IDebugHostType>>(&self, context: Param0, intrinsicdata: *const super::super::Com::VARIANT, r#type: Param2) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), context.into_param().abi(), ::std::mem::transmute(intrinsicdata), r#type.into_param().abi(), &mut result__).from_abi::<IModelObject>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDataModelManager2 {
    type Vtable = IDataModelManager2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4094871018, 8836, 17954, [166, 96, 166, 151, 22, 13, 51, 18]);
}
impl ::std::convert::From<IDataModelManager2> for IDataModelManager {
    fn from(value: IDataModelManager2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDataModelManager2> for IDataModelManager {
    fn from(value: &IDataModelManager2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDataModelManager> for IDataModelManager2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDataModelManager> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDataModelManager>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDataModelManager> for &IDataModelManager2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDataModelManager> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDataModelManager>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataModelManager2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, object: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hrerror: ::windows::runtime::HRESULT, pwszmessage: super::super::super::Foundation::PWSTR, object: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, objectlocation: Location, objecttype: ::windows::runtime::RawPtr, object: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, objectlocation: Location, objecttype: ::windows::runtime::RawPtr, object: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, object: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, datamodel: ::windows::runtime::RawPtr, object: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, objectkind: ModelObjectKind, intrinsicdata: *const ::std::mem::ManuallyDrop<super::super::Com::VARIANT>, object: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, intrinsicdata: *const ::std::mem::ManuallyDrop<super::super::Com::VARIANT>, r#type: ::windows::runtime::RawPtr, object: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, typesignature: ::windows::runtime::RawPtr, datamodel: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: ::windows::runtime::RawPtr, datamodel: *mut ::windows::runtime::RawPtr, typesignature: *mut ::windows::runtime::RawPtr, wildcardmatches: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, typesignature: ::windows::runtime::RawPtr, datamodel: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, datamodel: ::windows::runtime::RawPtr, typesignature: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, typesignature: ::windows::runtime::RawPtr, datamodel: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, datamodel: ::windows::runtime::RawPtr, typesignature: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, parentstore: ::windows::runtime::RawPtr, metadatastore: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, rootnamespace: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, modelname: super::super::super::Foundation::PWSTR, modeobject: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, modelname: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, modelname: super::super::super::Foundation::PWSTR, modelobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, modelname: super::super::super::Foundation::PWSTR, subnamespacemodelname: super::super::super::Foundation::PWSTR, accessname: super::super::super::Foundation::PWSTR, metadata: ::windows::runtime::RawPtr, namespacemodelobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, intrinsicdata: *const ::std::mem::ManuallyDrop<super::super::Com::VARIANT>, r#type: ::windows::runtime::RawPtr, object: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDataModelNameBinder(::windows::runtime::IUnknown);
impl IDataModelNameBinder {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn BindValue<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, contextobject: Param0, name: Param1, value: *mut ::std::option::Option<IModelObject>, metadata: *mut ::std::option::Option<IKeyStore>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), contextobject.into_param().abi(), name.into_param().abi(), ::std::mem::transmute(value), ::std::mem::transmute(metadata)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn BindReference<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, contextobject: Param0, name: Param1, reference: *mut ::std::option::Option<IModelObject>, metadata: *mut ::std::option::Option<IKeyStore>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), contextobject.into_param().abi(), name.into_param().abi(), ::std::mem::transmute(reference), ::std::mem::transmute(metadata)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumerateValues<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, contextobject: Param0) -> ::windows::runtime::Result<IKeyEnumerator> {
        let mut result__: <IKeyEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), contextobject.into_param().abi(), &mut result__).from_abi::<IKeyEnumerator>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumerateReferences<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, contextobject: Param0) -> ::windows::runtime::Result<IKeyEnumerator> {
        let mut result__: <IKeyEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), contextobject.into_param().abi(), &mut result__).from_abi::<IKeyEnumerator>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDataModelNameBinder {
    type Vtable = IDataModelNameBinder_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2939497339, 33426, 19457, [179, 96, 45, 195, 105, 108, 101, 231]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataModelNameBinder_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, contextobject: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PWSTR, value: *mut ::windows::runtime::RawPtr, metadata: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, contextobject: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PWSTR, reference: *mut ::windows::runtime::RawPtr, metadata: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, contextobject: ::windows::runtime::RawPtr, enumerator: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, contextobject: ::windows::runtime::RawPtr, enumerator: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDataModelScript(::windows::runtime::IUnknown);
impl IDataModelScript {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Rename<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, scriptname: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), scriptname.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_System_Com")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_Com`*"]
    pub unsafe fn Populate<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Com::IStream>>(&self, contentstream: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), contentstream.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Execute<'a, Param0: ::windows::runtime::IntoParam<'a, IDataModelScriptClient>>(&self, client: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), client.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Unlink(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsInvocable(&self) -> ::windows::runtime::Result<bool> {
        let mut result__: <bool as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<bool>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn InvokeMain<'a, Param0: ::windows::runtime::IntoParam<'a, IDataModelScriptClient>>(&self, client: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), client.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDataModelScript {
    type Vtable = IDataModelScript_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2068656380, 45386, 18936, [141, 135, 217, 161, 72, 12, 151, 247]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataModelScript_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, scriptname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, scriptname: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_System_Com")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, contentstream: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, isinvocable: *mut bool) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDataModelScriptClient(::windows::runtime::IUnknown);
impl IDataModelScriptClient {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ReportError<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, errclass: ErrorClass, hrfail: ::windows::runtime::HRESULT, message: Param2, line: u32, position: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(errclass), ::std::mem::transmute(hrfail), message.into_param().abi(), ::std::mem::transmute(line), ::std::mem::transmute(position)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDataModelScriptClient {
    type Vtable = IDataModelScriptClient_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(993405710, 35312, 18118, [166, 99, 223, 220, 149, 25, 74, 239]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataModelScriptClient_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, errclass: ErrorClass, hrfail: ::windows::runtime::HRESULT, message: super::super::super::Foundation::PWSTR, line: u32, position: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDataModelScriptDebug(::windows::runtime::IUnknown);
impl IDataModelScriptDebug {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDebugState(&self) -> ScriptDebugState {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetCurrentPosition(&self, currentposition: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut super::super::super::Foundation::BSTR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(currentposition), ::std::mem::transmute(positionspanend), ::std::mem::transmute(linetext)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetStack(&self) -> ::windows::runtime::Result<IDataModelScriptDebugStack> {
        let mut result__: <IDataModelScriptDebugStack as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDataModelScriptDebugStack>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetBreakpoint(&self, lineposition: u32, columnposition: u32) -> ::windows::runtime::Result<IDataModelScriptDebugBreakpoint> {
        let mut result__: <IDataModelScriptDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(lineposition), ::std::mem::transmute(columnposition), &mut result__).from_abi::<IDataModelScriptDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FindBreakpointById(&self, breakpointid: u64) -> ::windows::runtime::Result<IDataModelScriptDebugBreakpoint> {
        let mut result__: <IDataModelScriptDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(breakpointid), &mut result__).from_abi::<IDataModelScriptDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumerateBreakpoints(&self) -> ::windows::runtime::Result<IDataModelScriptDebugBreakpointEnumerator> {
        let mut result__: <IDataModelScriptDebugBreakpointEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDataModelScriptDebugBreakpointEnumerator>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventFilter(&self, eventfilter: ScriptDebugEventFilter) -> ::windows::runtime::Result<bool> {
        let mut result__: <bool as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(eventfilter), &mut result__).from_abi::<bool>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEventFilter(&self, eventfilter: ScriptDebugEventFilter, isbreakenabled: u8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(eventfilter), ::std::mem::transmute(isbreakenabled)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StartDebugging<'a, Param0: ::windows::runtime::IntoParam<'a, IDataModelScriptDebugClient>>(&self, debugclient: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), debugclient.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StopDebugging<'a, Param0: ::windows::runtime::IntoParam<'a, IDataModelScriptDebugClient>>(&self, debugclient: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), debugclient.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDataModelScriptDebug {
    type Vtable = IDataModelScriptDebug_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3733850437, 38736, 17521, [171, 118, 168, 247, 157, 110, 195, 80]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataModelScriptDebug_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ScriptDebugState,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, currentposition: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, stack: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lineposition: u32, columnposition: u32, breakpoint: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, breakpointid: u64, breakpoint: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, breakpointenum: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, eventfilter: ScriptDebugEventFilter, isbreakenabled: *mut bool) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, eventfilter: ScriptDebugEventFilter, isbreakenabled: u8) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, debugclient: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, debugclient: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDataModelScriptDebug2(::windows::runtime::IUnknown);
impl IDataModelScriptDebug2 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDebugState(&self) -> ScriptDebugState {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetCurrentPosition(&self, currentposition: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut super::super::super::Foundation::BSTR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(currentposition), ::std::mem::transmute(positionspanend), ::std::mem::transmute(linetext)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetStack(&self) -> ::windows::runtime::Result<IDataModelScriptDebugStack> {
        let mut result__: <IDataModelScriptDebugStack as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDataModelScriptDebugStack>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetBreakpoint(&self, lineposition: u32, columnposition: u32) -> ::windows::runtime::Result<IDataModelScriptDebugBreakpoint> {
        let mut result__: <IDataModelScriptDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(lineposition), ::std::mem::transmute(columnposition), &mut result__).from_abi::<IDataModelScriptDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FindBreakpointById(&self, breakpointid: u64) -> ::windows::runtime::Result<IDataModelScriptDebugBreakpoint> {
        let mut result__: <IDataModelScriptDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(breakpointid), &mut result__).from_abi::<IDataModelScriptDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumerateBreakpoints(&self) -> ::windows::runtime::Result<IDataModelScriptDebugBreakpointEnumerator> {
        let mut result__: <IDataModelScriptDebugBreakpointEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDataModelScriptDebugBreakpointEnumerator>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventFilter(&self, eventfilter: ScriptDebugEventFilter) -> ::windows::runtime::Result<bool> {
        let mut result__: <bool as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(eventfilter), &mut result__).from_abi::<bool>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEventFilter(&self, eventfilter: ScriptDebugEventFilter, isbreakenabled: u8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(eventfilter), ::std::mem::transmute(isbreakenabled)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StartDebugging<'a, Param0: ::windows::runtime::IntoParam<'a, IDataModelScriptDebugClient>>(&self, debugclient: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), debugclient.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StopDebugging<'a, Param0: ::windows::runtime::IntoParam<'a, IDataModelScriptDebugClient>>(&self, debugclient: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), debugclient.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetBreakpointAtFunction<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, functionname: Param0) -> ::windows::runtime::Result<IDataModelScriptDebugBreakpoint> {
        let mut result__: <IDataModelScriptDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), functionname.into_param().abi(), &mut result__).from_abi::<IDataModelScriptDebugBreakpoint>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDataModelScriptDebug2 {
    type Vtable = IDataModelScriptDebug2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3417378515, 33694, 17004, [146, 67, 226, 53, 53, 193, 174, 26]);
}
impl ::std::convert::From<IDataModelScriptDebug2> for IDataModelScriptDebug {
    fn from(value: IDataModelScriptDebug2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDataModelScriptDebug2> for IDataModelScriptDebug {
    fn from(value: &IDataModelScriptDebug2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDataModelScriptDebug> for IDataModelScriptDebug2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDataModelScriptDebug> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDataModelScriptDebug>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDataModelScriptDebug> for &IDataModelScriptDebug2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDataModelScriptDebug> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDataModelScriptDebug>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataModelScriptDebug2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ScriptDebugState,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, currentposition: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, stack: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lineposition: u32, columnposition: u32, breakpoint: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, breakpointid: u64, breakpoint: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, breakpointenum: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, eventfilter: ScriptDebugEventFilter, isbreakenabled: *mut bool) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, eventfilter: ScriptDebugEventFilter, isbreakenabled: u8) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, debugclient: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, debugclient: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, functionname: super::super::super::Foundation::PWSTR, breakpoint: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDataModelScriptDebugBreakpoint(::windows::runtime::IUnknown);
impl IDataModelScriptDebugBreakpoint {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetId(&self) -> u64 {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsEnabled(&self) -> bool {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Enable(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Disable(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Remove(&self) {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetPosition(&self, position: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut super::super::super::Foundation::BSTR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(position), ::std::mem::transmute(positionspanend), ::std::mem::transmute(linetext)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDataModelScriptDebugBreakpoint {
    type Vtable = IDataModelScriptDebugBreakpoint_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1806859061, 742, 18379, [144, 160, 83, 113, 36, 64, 50, 222]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataModelScriptDebugBreakpoint_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> bool,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr),
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, position: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDataModelScriptDebugBreakpointEnumerator(::windows::runtime::IUnknown);
impl IDataModelScriptDebugBreakpointEnumerator {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNext(&self) -> ::windows::runtime::Result<IDataModelScriptDebugBreakpoint> {
        let mut result__: <IDataModelScriptDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDataModelScriptDebugBreakpoint>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDataModelScriptDebugBreakpointEnumerator {
    type Vtable = IDataModelScriptDebugBreakpointEnumerator_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(961038965, 46323, 18329, [134, 218, 105, 26, 250, 87, 178, 153]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataModelScriptDebugBreakpointEnumerator_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, breakpoint: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDataModelScriptDebugClient(::windows::runtime::IUnknown);
impl IDataModelScriptDebugClient {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn NotifyDebugEvent<'a, Param1: ::windows::runtime::IntoParam<'a, IDataModelScript>, Param2: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, peventinfo: *const ScriptDebugEventInformation, pscript: Param1, peventdataobject: Param2, resumeeventkind: *mut ScriptExecutionKind) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(peventinfo), pscript.into_param().abi(), peventdataobject.into_param().abi(), ::std::mem::transmute(resumeeventkind)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDataModelScriptDebugClient {
    type Vtable = IDataModelScriptDebugClient_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1393924973, 54468, 18203, [168, 99, 91, 17, 12, 168, 0, 202]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataModelScriptDebugClient_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, peventinfo: *const ScriptDebugEventInformation, pscript: ::windows::runtime::RawPtr, peventdataobject: ::windows::runtime::RawPtr, resumeeventkind: *mut ScriptExecutionKind) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDataModelScriptDebugStack(::windows::runtime::IUnknown);
impl IDataModelScriptDebugStack {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetFrameCount(&self) -> u64 {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetStackFrame(&self, framenumber: u64) -> ::windows::runtime::Result<IDataModelScriptDebugStackFrame> {
        let mut result__: <IDataModelScriptDebugStackFrame as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(framenumber), &mut result__).from_abi::<IDataModelScriptDebugStackFrame>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDataModelScriptDebugStack {
    type Vtable = IDataModelScriptDebugStack_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(85157085, 58441, 17470, [151, 98, 254, 87, 143, 74, 84, 115]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataModelScriptDebugStack_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u64,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, framenumber: u64, stackframe: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDataModelScriptDebugStackFrame(::windows::runtime::IUnknown);
impl IDataModelScriptDebugStackFrame {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetPosition(&self, position: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut super::super::super::Foundation::BSTR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(position), ::std::mem::transmute(positionspanend), ::std::mem::transmute(linetext)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsTransitionPoint(&self) -> ::windows::runtime::Result<bool> {
        let mut result__: <bool as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<bool>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTransition(&self, transitionscript: *mut ::std::option::Option<IDataModelScript>, istransitioncontiguous: *mut bool) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(transitionscript), ::std::mem::transmute(istransitioncontiguous)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Evaluate<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pwszexpression: Param0) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), pwszexpression.into_param().abi(), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumerateLocals(&self) -> ::windows::runtime::Result<IDataModelScriptDebugVariableSetEnumerator> {
        let mut result__: <IDataModelScriptDebugVariableSetEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDataModelScriptDebugVariableSetEnumerator>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumerateArguments(&self) -> ::windows::runtime::Result<IDataModelScriptDebugVariableSetEnumerator> {
        let mut result__: <IDataModelScriptDebugVariableSetEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDataModelScriptDebugVariableSetEnumerator>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDataModelScriptDebugStackFrame {
    type Vtable = IDataModelScriptDebugStackFrame_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3737578846, 25440, 18753, [171, 76, 162, 100, 9, 222, 79, 130]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataModelScriptDebugStackFrame_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, position: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, istransitionpoint: *mut bool) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, transitionscript: *mut ::windows::runtime::RawPtr, istransitioncontiguous: *mut bool) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwszexpression: super::super::super::Foundation::PWSTR, ppresult: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, variablesenum: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, variablesenum: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDataModelScriptDebugVariableSetEnumerator(::windows::runtime::IUnknown);
impl IDataModelScriptDebugVariableSetEnumerator {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNext(&self, variablename: *mut super::super::super::Foundation::BSTR, variablevalue: *mut ::std::option::Option<IModelObject>, variablemetadata: *mut ::std::option::Option<IKeyStore>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(variablename), ::std::mem::transmute(variablevalue), ::std::mem::transmute(variablemetadata)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDataModelScriptDebugVariableSetEnumerator {
    type Vtable = IDataModelScriptDebugVariableSetEnumerator_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(262139607, 53317, 19139, [152, 168, 169, 137, 66, 207, 106, 53]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataModelScriptDebugVariableSetEnumerator_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, variablename: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, variablevalue: *mut ::windows::runtime::RawPtr, variablemetadata: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDataModelScriptHostContext(::windows::runtime::IUnknown);
impl IDataModelScriptHostContext {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn NotifyScriptChange<'a, Param0: ::windows::runtime::IntoParam<'a, IDataModelScript>>(&self, script: Param0, changekind: ScriptChangeKind) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), script.into_param().abi(), ::std::mem::transmute(changekind)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNamespaceObject(&self) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IModelObject>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDataModelScriptHostContext {
    type Vtable = IDataModelScriptHostContext_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(21837418, 7971, 18817, [146, 25, 178, 219, 139, 64, 32, 84]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataModelScriptHostContext_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, script: ::windows::runtime::RawPtr, changekind: ScriptChangeKind) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, namespaceobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDataModelScriptManager(::windows::runtime::IUnknown);
impl IDataModelScriptManager {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDefaultNameBinder(&self) -> ::windows::runtime::Result<IDataModelNameBinder> {
        let mut result__: <IDataModelNameBinder as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDataModelNameBinder>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RegisterScriptProvider<'a, Param0: ::windows::runtime::IntoParam<'a, IDataModelScriptProvider>>(&self, provider: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), provider.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn UnregisterScriptProvider<'a, Param0: ::windows::runtime::IntoParam<'a, IDataModelScriptProvider>>(&self, provider: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), provider.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FindProviderForScriptType<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, scripttype: Param0) -> ::windows::runtime::Result<IDataModelScriptProvider> {
        let mut result__: <IDataModelScriptProvider as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), scripttype.into_param().abi(), &mut result__).from_abi::<IDataModelScriptProvider>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FindProviderForScriptExtension<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, scriptextension: Param0) -> ::windows::runtime::Result<IDataModelScriptProvider> {
        let mut result__: <IDataModelScriptProvider as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), scriptextension.into_param().abi(), &mut result__).from_abi::<IDataModelScriptProvider>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumerateScriptProviders(&self) -> ::windows::runtime::Result<IDataModelScriptProviderEnumerator> {
        let mut result__: <IDataModelScriptProviderEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDataModelScriptProviderEnumerator>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDataModelScriptManager {
    type Vtable = IDataModelScriptManager_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1875975731, 58797, 16651, [128, 17, 104, 198, 188, 75, 248, 13]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataModelScriptManager_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppnamebinder: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, provider: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, provider: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, scripttype: super::super::super::Foundation::PWSTR, provider: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, scriptextension: super::super::super::Foundation::PWSTR, provider: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, enumerator: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDataModelScriptProvider(::windows::runtime::IUnknown);
impl IDataModelScriptProvider {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExtension(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateScript(&self) -> ::windows::runtime::Result<IDataModelScript> {
        let mut result__: <IDataModelScript as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDataModelScript>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDefaultTemplateContent(&self) -> ::windows::runtime::Result<IDataModelScriptTemplate> {
        let mut result__: <IDataModelScriptTemplate as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDataModelScriptTemplate>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumerateTemplates(&self) -> ::windows::runtime::Result<IDataModelScriptTemplateEnumerator> {
        let mut result__: <IDataModelScriptTemplateEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDataModelScriptTemplateEnumerator>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDataModelScriptProvider {
    type Vtable = IDataModelScriptProvider_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1362387424, 20426, 18638, [134, 88, 50, 243, 226, 5, 111, 59]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataModelScriptProvider_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, extension: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, script: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, templatecontent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, enumerator: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDataModelScriptProviderEnumerator(::windows::runtime::IUnknown);
impl IDataModelScriptProviderEnumerator {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNext(&self) -> ::windows::runtime::Result<IDataModelScriptProvider> {
        let mut result__: <IDataModelScriptProvider as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDataModelScriptProvider>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDataModelScriptProviderEnumerator {
    type Vtable = IDataModelScriptProviderEnumerator_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2511995106, 28746, 20450, [168, 241, 167, 231, 216, 251, 9, 65]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataModelScriptProviderEnumerator_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, provider: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDataModelScriptTemplate(::windows::runtime::IUnknown);
impl IDataModelScriptTemplate {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDescription(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_System_Com")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_Com`*"]
    pub unsafe fn GetContent(&self) -> ::windows::runtime::Result<super::super::Com::IStream> {
        let mut result__: <super::super::Com::IStream as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Com::IStream>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDataModelScriptTemplate {
    type Vtable = IDataModelScriptTemplate_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(319020740, 64059, 20251, [146, 36, 185, 83, 209, 107, 171, 181]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataModelScriptTemplate_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, templatename: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, templatedescription: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_System_Com")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, contentstream: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDataModelScriptTemplateEnumerator(::windows::runtime::IUnknown);
impl IDataModelScriptTemplateEnumerator {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNext(&self) -> ::windows::runtime::Result<IDataModelScriptTemplate> {
        let mut result__: <IDataModelScriptTemplate as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDataModelScriptTemplate>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDataModelScriptTemplateEnumerator {
    type Vtable = IDataModelScriptTemplateEnumerator_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1775135458, 8808, 20079, [176, 98, 32, 206, 98, 191, 230, 119]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataModelScriptTemplateEnumerator_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, templatecontent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugAdvanced(::windows::runtime::IUnknown);
impl IDebugAdvanced {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadContext(&self, context: *mut ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(context), ::std::mem::transmute(contextsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetThreadContext(&self, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(context), ::std::mem::transmute(contextsize)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugAdvanced {
    type Vtable = IDebugAdvanced_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4074725203, 1823, 18365, [157, 230, 87, 52, 195, 254, 214, 137]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugAdvanced_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: *mut ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugAdvanced2(::windows::runtime::IUnknown);
impl IDebugAdvanced2 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadContext(&self, context: *mut ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(context), ::std::mem::transmute(contextsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetThreadContext(&self, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(context), ::std::mem::transmute(contextsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Request(&self, request: u32, inbuffer: *const ::std::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::std::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(request), ::std::mem::transmute(inbuffer), ::std::mem::transmute(inbuffersize), ::std::mem::transmute(outbuffer), ::std::mem::transmute(outbuffersize), ::std::mem::transmute(outsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceFileInformation<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, which: u32, sourcefile: Param1, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), sourcefile.into_param().abi(), ::std::mem::transmute(arg64), ::std::mem::transmute(arg32), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(infosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FindSourceFileAndToken<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, startelement: u32, modaddr: u64, file: Param2, flags: u32, filetoken: *const ::std::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(startelement),
            ::std::mem::transmute(modaddr),
            file.into_param().abi(),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(filetoken),
            ::std::mem::transmute(filetokensize),
            ::std::mem::transmute(foundelement),
            ::std::mem::transmute(buffer),
            ::std::mem::transmute(buffersize),
            ::std::mem::transmute(foundsize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolInformation(&self, which: u32, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(which),
            ::std::mem::transmute(arg64),
            ::std::mem::transmute(arg32),
            ::std::mem::transmute(buffer),
            ::std::mem::transmute(buffersize),
            ::std::mem::transmute(infosize),
            ::std::mem::transmute(stringbuffer),
            ::std::mem::transmute(stringbuffersize),
            ::std::mem::transmute(stringsize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSystemObjectInformation(&self, which: u32, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), ::std::mem::transmute(arg64), ::std::mem::transmute(arg32), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(infosize)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugAdvanced2 {
    type Vtable = IDebugAdvanced2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1902974153, 4507, 19365, [175, 31, 8, 144, 230, 114, 65, 106]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugAdvanced2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: *mut ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, request: u32, inbuffer: *const ::std::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::std::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, sourcefile: super::super::super::Foundation::PSTR, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PSTR, flags: u32, filetoken: *const ::std::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugAdvanced3(::windows::runtime::IUnknown);
impl IDebugAdvanced3 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadContext(&self, context: *mut ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(context), ::std::mem::transmute(contextsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetThreadContext(&self, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(context), ::std::mem::transmute(contextsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Request(&self, request: u32, inbuffer: *const ::std::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::std::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(request), ::std::mem::transmute(inbuffer), ::std::mem::transmute(inbuffersize), ::std::mem::transmute(outbuffer), ::std::mem::transmute(outbuffersize), ::std::mem::transmute(outsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceFileInformation<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, which: u32, sourcefile: Param1, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), sourcefile.into_param().abi(), ::std::mem::transmute(arg64), ::std::mem::transmute(arg32), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(infosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FindSourceFileAndToken<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, startelement: u32, modaddr: u64, file: Param2, flags: u32, filetoken: *const ::std::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(startelement),
            ::std::mem::transmute(modaddr),
            file.into_param().abi(),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(filetoken),
            ::std::mem::transmute(filetokensize),
            ::std::mem::transmute(foundelement),
            ::std::mem::transmute(buffer),
            ::std::mem::transmute(buffersize),
            ::std::mem::transmute(foundsize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolInformation(&self, which: u32, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(which),
            ::std::mem::transmute(arg64),
            ::std::mem::transmute(arg32),
            ::std::mem::transmute(buffer),
            ::std::mem::transmute(buffersize),
            ::std::mem::transmute(infosize),
            ::std::mem::transmute(stringbuffer),
            ::std::mem::transmute(stringbuffersize),
            ::std::mem::transmute(stringsize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSystemObjectInformation(&self, which: u32, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), ::std::mem::transmute(arg64), ::std::mem::transmute(arg32), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(infosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceFileInformationWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, which: u32, sourcefile: Param1, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), sourcefile.into_param().abi(), ::std::mem::transmute(arg64), ::std::mem::transmute(arg32), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(infosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FindSourceFileAndTokenWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, startelement: u32, modaddr: u64, file: Param2, flags: u32, filetoken: *const ::std::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(startelement),
            ::std::mem::transmute(modaddr),
            file.into_param().abi(),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(filetoken),
            ::std::mem::transmute(filetokensize),
            ::std::mem::transmute(foundelement),
            ::std::mem::transmute(buffer),
            ::std::mem::transmute(buffersize),
            ::std::mem::transmute(foundsize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolInformationWide(&self, which: u32, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PWSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(which),
            ::std::mem::transmute(arg64),
            ::std::mem::transmute(arg32),
            ::std::mem::transmute(buffer),
            ::std::mem::transmute(buffersize),
            ::std::mem::transmute(infosize),
            ::std::mem::transmute(stringbuffer),
            ::std::mem::transmute(stringbuffersize),
            ::std::mem::transmute(stringsize),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugAdvanced3 {
    type Vtable = IDebugAdvanced3_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3416566708, 33988, 17485, [135, 202, 160, 78, 19, 40, 103, 57]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugAdvanced3_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: *mut ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, request: u32, inbuffer: *const ::std::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::std::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, sourcefile: super::super::super::Foundation::PSTR, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PSTR, flags: u32, filetoken: *const ::std::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, sourcefile: super::super::super::Foundation::PWSTR, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PWSTR, flags: u32, filetoken: *const ::std::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PWSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugAdvanced4(::windows::runtime::IUnknown);
impl IDebugAdvanced4 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadContext(&self, context: *mut ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(context), ::std::mem::transmute(contextsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetThreadContext(&self, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(context), ::std::mem::transmute(contextsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Request(&self, request: u32, inbuffer: *const ::std::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::std::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(request), ::std::mem::transmute(inbuffer), ::std::mem::transmute(inbuffersize), ::std::mem::transmute(outbuffer), ::std::mem::transmute(outbuffersize), ::std::mem::transmute(outsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceFileInformation<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, which: u32, sourcefile: Param1, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), sourcefile.into_param().abi(), ::std::mem::transmute(arg64), ::std::mem::transmute(arg32), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(infosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FindSourceFileAndToken<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, startelement: u32, modaddr: u64, file: Param2, flags: u32, filetoken: *const ::std::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(startelement),
            ::std::mem::transmute(modaddr),
            file.into_param().abi(),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(filetoken),
            ::std::mem::transmute(filetokensize),
            ::std::mem::transmute(foundelement),
            ::std::mem::transmute(buffer),
            ::std::mem::transmute(buffersize),
            ::std::mem::transmute(foundsize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolInformation(&self, which: u32, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(which),
            ::std::mem::transmute(arg64),
            ::std::mem::transmute(arg32),
            ::std::mem::transmute(buffer),
            ::std::mem::transmute(buffersize),
            ::std::mem::transmute(infosize),
            ::std::mem::transmute(stringbuffer),
            ::std::mem::transmute(stringbuffersize),
            ::std::mem::transmute(stringsize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSystemObjectInformation(&self, which: u32, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), ::std::mem::transmute(arg64), ::std::mem::transmute(arg32), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(infosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceFileInformationWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, which: u32, sourcefile: Param1, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), sourcefile.into_param().abi(), ::std::mem::transmute(arg64), ::std::mem::transmute(arg32), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(infosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FindSourceFileAndTokenWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, startelement: u32, modaddr: u64, file: Param2, flags: u32, filetoken: *const ::std::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(startelement),
            ::std::mem::transmute(modaddr),
            file.into_param().abi(),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(filetoken),
            ::std::mem::transmute(filetokensize),
            ::std::mem::transmute(foundelement),
            ::std::mem::transmute(buffer),
            ::std::mem::transmute(buffersize),
            ::std::mem::transmute(foundsize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolInformationWide(&self, which: u32, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PWSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(which),
            ::std::mem::transmute(arg64),
            ::std::mem::transmute(arg32),
            ::std::mem::transmute(buffer),
            ::std::mem::transmute(buffersize),
            ::std::mem::transmute(infosize),
            ::std::mem::transmute(stringbuffer),
            ::std::mem::transmute(stringbuffersize),
            ::std::mem::transmute(stringsize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolInformationWideEx(&self, which: u32, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PWSTR, stringbuffersize: u32, stringsize: *mut u32, pinfoex: *mut SYMBOL_INFO_EX) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(which),
            ::std::mem::transmute(arg64),
            ::std::mem::transmute(arg32),
            ::std::mem::transmute(buffer),
            ::std::mem::transmute(buffersize),
            ::std::mem::transmute(infosize),
            ::std::mem::transmute(stringbuffer),
            ::std::mem::transmute(stringbuffersize),
            ::std::mem::transmute(stringsize),
            ::std::mem::transmute(pinfoex),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugAdvanced4 {
    type Vtable = IDebugAdvanced4_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3506868327, 10853, 19440, [174, 151, 118, 24, 75, 103, 133, 107]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugAdvanced4_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: *mut ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, request: u32, inbuffer: *const ::std::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::std::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, sourcefile: super::super::super::Foundation::PSTR, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PSTR, flags: u32, filetoken: *const ::std::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, sourcefile: super::super::super::Foundation::PWSTR, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PWSTR, flags: u32, filetoken: *const ::std::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PWSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, arg64: u64, arg32: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PWSTR, stringbuffersize: u32, stringsize: *mut u32, pinfoex: *mut SYMBOL_INFO_EX) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugApplication11032(::windows::runtime::IUnknown);
impl IDebugApplication11032 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetDebuggerOptions(&self, mask: SCRIPT_DEBUGGER_OPTIONS, value: SCRIPT_DEBUGGER_OPTIONS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), ::std::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentDebuggerOptions(&self) -> ::windows::runtime::Result<SCRIPT_DEBUGGER_OPTIONS> {
        let mut result__: <SCRIPT_DEBUGGER_OPTIONS as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<SCRIPT_DEBUGGER_OPTIONS>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetMainThread(&self) -> ::windows::runtime::Result<IRemoteDebugApplicationThread> {
        let mut result__: <IRemoteDebugApplicationThread as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IRemoteDebugApplicationThread>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SynchronousCallInMainThread<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugThreadCall32>>(&self, pptc: Param0, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), pptc.into_param().abi(), ::std::mem::transmute(dwparam1), ::std::mem::transmute(dwparam2), ::std::mem::transmute(dwparam3)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AsynchronousCallInMainThread<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugThreadCall32>>(&self, pptc: Param0, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), pptc.into_param().abi(), ::std::mem::transmute(dwparam1), ::std::mem::transmute(dwparam2), ::std::mem::transmute(dwparam3)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CallableWaitForHandles(&self, handlecount: u32, phandles: *const super::super::super::Foundation::HANDLE) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(handlecount), ::std::mem::transmute(phandles), &mut result__).from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugApplication11032 {
    type Vtable = IDebugApplication11032_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3182671326, 35314, 19985, [132, 165, 151, 68, 95, 148, 28, 125]);
}
impl ::std::convert::From<IDebugApplication11032> for IRemoteDebugApplication110 {
    fn from(value: IDebugApplication11032) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugApplication11032> for IRemoteDebugApplication110 {
    fn from(value: &IDebugApplication11032) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IRemoteDebugApplication110> for IDebugApplication11032 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IRemoteDebugApplication110> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IRemoteDebugApplication110>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IRemoteDebugApplication110> for &IDebugApplication11032 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IRemoteDebugApplication110> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IRemoteDebugApplication110>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugApplication11032_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: SCRIPT_DEBUGGER_OPTIONS, value: SCRIPT_DEBUGGER_OPTIONS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcurrentoptions: *mut SCRIPT_DEBUGGER_OPTIONS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppthread: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pptc: ::windows::runtime::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pptc: ::windows::runtime::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handlecount: u32, phandles: *const super::super::super::Foundation::HANDLE, pindex: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugApplication11064(::windows::runtime::IUnknown);
impl IDebugApplication11064 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetDebuggerOptions(&self, mask: SCRIPT_DEBUGGER_OPTIONS, value: SCRIPT_DEBUGGER_OPTIONS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), ::std::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentDebuggerOptions(&self) -> ::windows::runtime::Result<SCRIPT_DEBUGGER_OPTIONS> {
        let mut result__: <SCRIPT_DEBUGGER_OPTIONS as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<SCRIPT_DEBUGGER_OPTIONS>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetMainThread(&self) -> ::windows::runtime::Result<IRemoteDebugApplicationThread> {
        let mut result__: <IRemoteDebugApplicationThread as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IRemoteDebugApplicationThread>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SynchronousCallInMainThread<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugThreadCall64>>(&self, pptc: Param0, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), pptc.into_param().abi(), ::std::mem::transmute(dwparam1), ::std::mem::transmute(dwparam2), ::std::mem::transmute(dwparam3)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AsynchronousCallInMainThread<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugThreadCall64>>(&self, pptc: Param0, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), pptc.into_param().abi(), ::std::mem::transmute(dwparam1), ::std::mem::transmute(dwparam2), ::std::mem::transmute(dwparam3)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CallableWaitForHandles(&self, handlecount: u32, phandles: *const super::super::super::Foundation::HANDLE) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(handlecount), ::std::mem::transmute(phandles), &mut result__).from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugApplication11064 {
    type Vtable = IDebugApplication11064_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(540662104, 20203, 18794, [135, 187, 46, 82, 1, 234, 222, 239]);
}
impl ::std::convert::From<IDebugApplication11064> for IRemoteDebugApplication110 {
    fn from(value: IDebugApplication11064) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugApplication11064> for IRemoteDebugApplication110 {
    fn from(value: &IDebugApplication11064) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IRemoteDebugApplication110> for IDebugApplication11064 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IRemoteDebugApplication110> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IRemoteDebugApplication110>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IRemoteDebugApplication110> for &IDebugApplication11064 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IRemoteDebugApplication110> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IRemoteDebugApplication110>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugApplication11064_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: SCRIPT_DEBUGGER_OPTIONS, value: SCRIPT_DEBUGGER_OPTIONS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcurrentoptions: *mut SCRIPT_DEBUGGER_OPTIONS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppthread: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pptc: ::windows::runtime::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pptc: ::windows::runtime::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handlecount: u32, phandles: *const super::super::super::Foundation::HANDLE, pindex: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugApplication32(::windows::runtime::IUnknown);
impl IDebugApplication32 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ResumeFromBreakPoint<'a, Param0: ::windows::runtime::IntoParam<'a, IRemoteDebugApplicationThread>>(&self, prptfocus: Param0, bra: BREAKRESUME_ACTION, era: ERRORRESUMEACTION) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), prptfocus.into_param().abi(), ::std::mem::transmute(bra), ::std::mem::transmute(era)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CauseBreak(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ConnectDebugger<'a, Param0: ::windows::runtime::IntoParam<'a, IApplicationDebugger>>(&self, pad: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), pad.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DisconnectDebugger(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDebugger(&self) -> ::windows::runtime::Result<IApplicationDebugger> {
        let mut result__: <IApplicationDebugger as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IApplicationDebugger>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateInstanceAtApplication<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, rclsid: *const ::windows::runtime::GUID, punkouter: Param1, dwclscontext: u32, riid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(rclsid), punkouter.into_param().abi(), ::std::mem::transmute(dwclscontext), ::std::mem::transmute(riid), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn QueryAlive(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumThreads(&self) -> ::windows::runtime::Result<IEnumRemoteDebugApplicationThreads> {
        let mut result__: <IEnumRemoteDebugApplicationThreads as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumRemoteDebugApplicationThreads>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRootNode(&self) -> ::windows::runtime::Result<IDebugApplicationNode> {
        let mut result__: <IDebugApplicationNode as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugApplicationNode>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumGlobalExpressionContexts(&self) -> ::windows::runtime::Result<IEnumDebugExpressionContexts> {
        let mut result__: <IEnumDebugExpressionContexts as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumDebugExpressionContexts>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pstrname: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), pstrname.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StepOutComplete(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn DebugOutput<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pstr: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), pstr.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StartDebugSession(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn HandleBreakPoint(&self, br: BREAKREASON) -> ::windows::runtime::Result<BREAKRESUME_ACTION> {
        let mut result__: <BREAKRESUME_ACTION as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(br), &mut result__).from_abi::<BREAKRESUME_ACTION>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakFlags(&self, pabf: *mut u32, pprdatsteppingthread: *mut ::std::option::Option<IRemoteDebugApplicationThread>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), ::std::mem::transmute(pabf), ::std::mem::transmute(pprdatsteppingthread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentThread(&self) -> ::windows::runtime::Result<IDebugApplicationThread> {
        let mut result__: <IDebugApplicationThread as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugApplicationThread>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateAsyncDebugOperation<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugSyncOperation>>(&self, psdo: Param0) -> ::windows::runtime::Result<IDebugAsyncOperation> {
        let mut result__: <IDebugAsyncOperation as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), psdo.into_param().abi(), &mut result__).from_abi::<IDebugAsyncOperation>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddStackFrameSniffer<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugStackFrameSniffer>>(&self, pdsfs: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), pdsfs.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveStackFrameSniffer(&self, dwcookie: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwcookie)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn QueryCurrentThreadIsDebuggerThread(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SynchronousCallInDebuggerThread<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugThreadCall32>>(&self, pptc: Param0, dwparam1: u32, dwparam2: u32, dwparam3: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), pptc.into_param().abi(), ::std::mem::transmute(dwparam1), ::std::mem::transmute(dwparam2), ::std::mem::transmute(dwparam3)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateApplicationNode(&self) -> ::windows::runtime::Result<IDebugApplicationNode> {
        let mut result__: <IDebugApplicationNode as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugApplicationNode>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FireDebuggerEvent<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, riid: *const ::windows::runtime::GUID, punk: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(riid), punk.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn HandleRuntimeError<'a, Param0: ::windows::runtime::IntoParam<'a, IActiveScriptErrorDebug>, Param1: ::windows::runtime::IntoParam<'a, IActiveScriptSite>>(&self, perrordebug: Param0, pscriptsite: Param1, pbra: *mut BREAKRESUME_ACTION, perra: *mut ERRORRESUMEACTION, pfcallonscripterror: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self), perrordebug.into_param().abi(), pscriptsite.into_param().abi(), ::std::mem::transmute(pbra), ::std::mem::transmute(perra), ::std::mem::transmute(pfcallonscripterror)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FCanJitDebug(&self) -> super::super::super::Foundation::BOOL {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FIsAutoJitDebugEnabled(&self) -> super::super::super::Foundation::BOOL {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddGlobalExpressionContextProvider<'a, Param0: ::windows::runtime::IntoParam<'a, IProvideExpressionContexts>>(&self, pdsfs: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), pdsfs.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveGlobalExpressionContextProvider(&self, dwcookie: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwcookie)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugApplication32 {
    type Vtable = IDebugApplication32_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865842, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
impl ::std::convert::From<IDebugApplication32> for IRemoteDebugApplication {
    fn from(value: IDebugApplication32) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugApplication32> for IRemoteDebugApplication {
    fn from(value: &IDebugApplication32) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IRemoteDebugApplication> for IDebugApplication32 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IRemoteDebugApplication> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IRemoteDebugApplication>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IRemoteDebugApplication> for &IDebugApplication32 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IRemoteDebugApplication> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IRemoteDebugApplication>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugApplication32_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prptfocus: ::windows::runtime::RawPtr, bra: BREAKRESUME_ACTION, era: ERRORRESUMEACTION) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pad: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pad: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, rclsid: *const ::windows::runtime::GUID, punkouter: ::windows::runtime::RawPtr, dwclscontext: u32, riid: *const ::windows::runtime::GUID, ppvobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pperdat: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstrname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppdanroot: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppedec: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstrname: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstr: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, br: BREAKREASON, pbra: *mut BREAKRESUME_ACTION) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pabf: *mut u32, pprdatsteppingthread: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pat: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psdo: ::windows::runtime::RawPtr, ppado: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdsfs: ::windows::runtime::RawPtr, pdwcookie: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwcookie: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pptc: ::windows::runtime::RawPtr, dwparam1: u32, dwparam2: u32, dwparam3: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppdannew: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, punk: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, perrordebug: ::windows::runtime::RawPtr, pscriptsite: ::windows::runtime::RawPtr, pbra: *mut BREAKRESUME_ACTION, perra: *mut ERRORRESUMEACTION, pfcallonscripterror: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdsfs: ::windows::runtime::RawPtr, pdwcookie: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwcookie: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugApplication64(::windows::runtime::IUnknown);
impl IDebugApplication64 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ResumeFromBreakPoint<'a, Param0: ::windows::runtime::IntoParam<'a, IRemoteDebugApplicationThread>>(&self, prptfocus: Param0, bra: BREAKRESUME_ACTION, era: ERRORRESUMEACTION) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), prptfocus.into_param().abi(), ::std::mem::transmute(bra), ::std::mem::transmute(era)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CauseBreak(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ConnectDebugger<'a, Param0: ::windows::runtime::IntoParam<'a, IApplicationDebugger>>(&self, pad: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), pad.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DisconnectDebugger(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDebugger(&self) -> ::windows::runtime::Result<IApplicationDebugger> {
        let mut result__: <IApplicationDebugger as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IApplicationDebugger>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateInstanceAtApplication<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, rclsid: *const ::windows::runtime::GUID, punkouter: Param1, dwclscontext: u32, riid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(rclsid), punkouter.into_param().abi(), ::std::mem::transmute(dwclscontext), ::std::mem::transmute(riid), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn QueryAlive(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumThreads(&self) -> ::windows::runtime::Result<IEnumRemoteDebugApplicationThreads> {
        let mut result__: <IEnumRemoteDebugApplicationThreads as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumRemoteDebugApplicationThreads>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRootNode(&self) -> ::windows::runtime::Result<IDebugApplicationNode> {
        let mut result__: <IDebugApplicationNode as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugApplicationNode>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumGlobalExpressionContexts(&self) -> ::windows::runtime::Result<IEnumDebugExpressionContexts> {
        let mut result__: <IEnumDebugExpressionContexts as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumDebugExpressionContexts>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pstrname: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), pstrname.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StepOutComplete(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn DebugOutput<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pstr: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), pstr.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StartDebugSession(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn HandleBreakPoint(&self, br: BREAKREASON) -> ::windows::runtime::Result<BREAKRESUME_ACTION> {
        let mut result__: <BREAKRESUME_ACTION as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(br), &mut result__).from_abi::<BREAKRESUME_ACTION>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakFlags(&self, pabf: *mut u32, pprdatsteppingthread: *mut ::std::option::Option<IRemoteDebugApplicationThread>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), ::std::mem::transmute(pabf), ::std::mem::transmute(pprdatsteppingthread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentThread(&self) -> ::windows::runtime::Result<IDebugApplicationThread> {
        let mut result__: <IDebugApplicationThread as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugApplicationThread>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateAsyncDebugOperation<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugSyncOperation>>(&self, psdo: Param0) -> ::windows::runtime::Result<IDebugAsyncOperation> {
        let mut result__: <IDebugAsyncOperation as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), psdo.into_param().abi(), &mut result__).from_abi::<IDebugAsyncOperation>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddStackFrameSniffer<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugStackFrameSniffer>>(&self, pdsfs: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), pdsfs.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveStackFrameSniffer(&self, dwcookie: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwcookie)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn QueryCurrentThreadIsDebuggerThread(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SynchronousCallInDebuggerThread<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugThreadCall64>>(&self, pptc: Param0, dwparam1: u64, dwparam2: u64, dwparam3: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), pptc.into_param().abi(), ::std::mem::transmute(dwparam1), ::std::mem::transmute(dwparam2), ::std::mem::transmute(dwparam3)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateApplicationNode(&self) -> ::windows::runtime::Result<IDebugApplicationNode> {
        let mut result__: <IDebugApplicationNode as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugApplicationNode>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FireDebuggerEvent<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, riid: *const ::windows::runtime::GUID, punk: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(riid), punk.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn HandleRuntimeError<'a, Param0: ::windows::runtime::IntoParam<'a, IActiveScriptErrorDebug>, Param1: ::windows::runtime::IntoParam<'a, IActiveScriptSite>>(&self, perrordebug: Param0, pscriptsite: Param1, pbra: *mut BREAKRESUME_ACTION, perra: *mut ERRORRESUMEACTION, pfcallonscripterror: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self), perrordebug.into_param().abi(), pscriptsite.into_param().abi(), ::std::mem::transmute(pbra), ::std::mem::transmute(perra), ::std::mem::transmute(pfcallonscripterror)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FCanJitDebug(&self) -> super::super::super::Foundation::BOOL {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self)))
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FIsAutoJitDebugEnabled(&self) -> super::super::super::Foundation::BOOL {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self)))
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddGlobalExpressionContextProvider<'a, Param0: ::windows::runtime::IntoParam<'a, IProvideExpressionContexts>>(&self, pdsfs: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), pdsfs.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveGlobalExpressionContextProvider(&self, dwcookie: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwcookie)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugApplication64 {
    type Vtable = IDebugApplication64_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1307428692, 1223, 20240, [158, 96, 22, 163, 144, 254, 110, 98]);
}
impl ::std::convert::From<IDebugApplication64> for IRemoteDebugApplication {
    fn from(value: IDebugApplication64) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugApplication64> for IRemoteDebugApplication {
    fn from(value: &IDebugApplication64) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IRemoteDebugApplication> for IDebugApplication64 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IRemoteDebugApplication> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IRemoteDebugApplication>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IRemoteDebugApplication> for &IDebugApplication64 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IRemoteDebugApplication> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IRemoteDebugApplication>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugApplication64_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prptfocus: ::windows::runtime::RawPtr, bra: BREAKRESUME_ACTION, era: ERRORRESUMEACTION) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pad: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pad: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, rclsid: *const ::windows::runtime::GUID, punkouter: ::windows::runtime::RawPtr, dwclscontext: u32, riid: *const ::windows::runtime::GUID, ppvobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pperdat: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstrname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppdanroot: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppedec: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstrname: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstr: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, br: BREAKREASON, pbra: *mut BREAKRESUME_ACTION) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pabf: *mut u32, pprdatsteppingthread: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pat: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psdo: ::windows::runtime::RawPtr, ppado: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdsfs: ::windows::runtime::RawPtr, pdwcookie: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwcookie: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pptc: ::windows::runtime::RawPtr, dwparam1: u64, dwparam2: u64, dwparam3: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppdannew: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, punk: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, perrordebug: ::windows::runtime::RawPtr, pscriptsite: ::windows::runtime::RawPtr, pbra: *mut BREAKRESUME_ACTION, perra: *mut ERRORRESUMEACTION, pfcallonscripterror: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> super::super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdsfs: ::windows::runtime::RawPtr, pdwcookie: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwcookie: u64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugApplicationNode(::windows::runtime::IUnknown);
impl IDebugApplicationNode {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self, dnt: DOCUMENTNAMETYPE) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(dnt), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDocumentClassId(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDocument(&self) -> ::windows::runtime::Result<IDebugDocument> {
        let mut result__: <IDebugDocument as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugDocument>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumChildren(&self) -> ::windows::runtime::Result<IEnumDebugApplicationNodes> {
        let mut result__: <IEnumDebugApplicationNodes as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumDebugApplicationNodes>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetParent(&self) -> ::windows::runtime::Result<IDebugApplicationNode> {
        let mut result__: <IDebugApplicationNode as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugApplicationNode>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetDocumentProvider<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugDocumentProvider>>(&self, pddp: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), pddp.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Close(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Attach<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugApplicationNode>>(&self, pdanparent: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), pdanparent.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Detach(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugApplicationNode {
    type Vtable = IDebugApplicationNode_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865844, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
impl ::std::convert::From<IDebugApplicationNode> for IDebugDocumentProvider {
    fn from(value: IDebugApplicationNode) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugApplicationNode> for IDebugDocumentProvider {
    fn from(value: &IDebugApplicationNode) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugDocumentProvider> for IDebugApplicationNode {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugDocumentProvider> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugDocumentProvider>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugDocumentProvider> for &IDebugApplicationNode {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugDocumentProvider> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugDocumentProvider>::into(::std::clone::Clone::clone(self)))
    }
}
impl ::std::convert::From<IDebugApplicationNode> for IDebugDocumentInfo {
    fn from(value: IDebugApplicationNode) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugApplicationNode> for IDebugDocumentInfo {
    fn from(value: &IDebugApplicationNode) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugDocumentInfo> for IDebugApplicationNode {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugDocumentInfo> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugDocumentInfo>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugDocumentInfo> for &IDebugApplicationNode {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugDocumentInfo> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugDocumentInfo>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugApplicationNode_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dnt: DOCUMENTNAMETYPE, pbstrname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pclsiddocument: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppssd: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pperddp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pprddp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pddp: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdanparent: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugApplicationNode100(::windows::runtime::IUnknown);
impl IDebugApplicationNode100 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetFilterForEventSink(&self, dwcookie: u32, filter: APPLICATION_NODE_EVENT_FILTER) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwcookie), ::std::mem::transmute(filter)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExcludedDocuments(&self, filter: APPLICATION_NODE_EVENT_FILTER) -> ::windows::runtime::Result<TEXT_DOCUMENT_ARRAY> {
        let mut result__: <TEXT_DOCUMENT_ARRAY as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(filter), &mut result__).from_abi::<TEXT_DOCUMENT_ARRAY>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn QueryIsChildNode<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugDocument>>(&self, psearchkey: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), psearchkey.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugApplicationNode100 {
    type Vtable = IDebugApplicationNode100_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2426893134, 33819, 20343, [147, 132, 162, 137, 30, 118, 231, 226]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugApplicationNode100_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwcookie: u32, filter: APPLICATION_NODE_EVENT_FILTER) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, filter: APPLICATION_NODE_EVENT_FILTER, pdocuments: *mut TEXT_DOCUMENT_ARRAY) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psearchkey: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugApplicationNodeEvents(::windows::runtime::IUnknown);
impl IDebugApplicationNodeEvents {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn onAddChild<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugApplicationNode>>(&self, prddpchild: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), prddpchild.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn onRemoveChild<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugApplicationNode>>(&self, prddpchild: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), prddpchild.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn onDetach(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn onAttach<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugApplicationNode>>(&self, prddpparent: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), prddpparent.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugApplicationNodeEvents {
    type Vtable = IDebugApplicationNodeEvents_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865845, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugApplicationNodeEvents_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prddpchild: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prddpchild: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prddpparent: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugApplicationThread(::windows::runtime::IUnknown);
impl IDebugApplicationThread {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSystemThreadId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetApplication(&self) -> ::windows::runtime::Result<IRemoteDebugApplication> {
        let mut result__: <IRemoteDebugApplication as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IRemoteDebugApplication>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumStackFrames(&self) -> ::windows::runtime::Result<IEnumDebugStackFrames> {
        let mut result__: <IEnumDebugStackFrames as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumDebugStackFrames>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDescription(&self, pbstrdescription: *mut super::super::super::Foundation::BSTR, pbstrstate: *mut super::super::super::Foundation::BSTR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(pbstrdescription), ::std::mem::transmute(pbstrstate)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetNextStatement<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugStackFrame>, Param1: ::windows::runtime::IntoParam<'a, IDebugCodeContext>>(&self, pstackframe: Param0, pcodecontext: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), pstackframe.into_param().abi(), pcodecontext.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetState(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Suspend(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Resume(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSuspendCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SynchronousCallIntoThread32<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugThreadCall32>>(&self, pstcb: Param0, dwparam1: u32, dwparam2: u32, dwparam3: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), pstcb.into_param().abi(), ::std::mem::transmute(dwparam1), ::std::mem::transmute(dwparam2), ::std::mem::transmute(dwparam3)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn QueryIsCurrentThread(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn QueryIsDebuggerThread(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetDescription<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pstrdescription: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), pstrdescription.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetStateString<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pstrstate: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), pstrstate.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugApplicationThread {
    type Vtable = IDebugApplicationThread_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865848, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
impl ::std::convert::From<IDebugApplicationThread> for IRemoteDebugApplicationThread {
    fn from(value: IDebugApplicationThread) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugApplicationThread> for IRemoteDebugApplicationThread {
    fn from(value: &IDebugApplicationThread) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IRemoteDebugApplicationThread> for IDebugApplicationThread {
    fn into_param(self) -> ::windows::runtime::Param<'a, IRemoteDebugApplicationThread> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IRemoteDebugApplicationThread>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IRemoteDebugApplicationThread> for &IDebugApplicationThread {
    fn into_param(self) -> ::windows::runtime::Param<'a, IRemoteDebugApplicationThread> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IRemoteDebugApplicationThread>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugApplicationThread_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwthreadid: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pprda: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppedsf: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstrdescription: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, pbstrstate: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstackframe: ::windows::runtime::RawPtr, pcodecontext: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstate: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstcb: ::windows::runtime::RawPtr, dwparam1: u32, dwparam2: u32, dwparam3: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstrdescription: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstrstate: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugApplicationThread11032(::windows::runtime::IUnknown);
impl IDebugApplicationThread11032 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetActiveThreadRequestCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn IsSuspendedForBreakPoint(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BOOL> {
        let mut result__: <super::super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn IsThreadCallable(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BOOL> {
        let mut result__: <super::super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AsynchronousCallIntoThread<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugThreadCall32>>(&self, pptc: Param0, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), pptc.into_param().abi(), ::std::mem::transmute(dwparam1), ::std::mem::transmute(dwparam2), ::std::mem::transmute(dwparam3)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugApplicationThread11032 {
    type Vtable = IDebugApplicationThread11032_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(563391580, 25953, 16458, [162, 233, 245, 125, 114, 222, 55, 2]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugApplicationThread11032_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, puithreadrequests: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfissuspended: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfiscallable: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pptc: ::windows::runtime::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugApplicationThread11064(::windows::runtime::IUnknown);
impl IDebugApplicationThread11064 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetActiveThreadRequestCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn IsSuspendedForBreakPoint(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BOOL> {
        let mut result__: <super::super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn IsThreadCallable(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BOOL> {
        let mut result__: <super::super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AsynchronousCallIntoThread<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugThreadCall64>>(&self, pptc: Param0, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), pptc.into_param().abi(), ::std::mem::transmute(dwparam1), ::std::mem::transmute(dwparam2), ::std::mem::transmute(dwparam3)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugApplicationThread11064 {
    type Vtable = IDebugApplicationThread11064_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1107993804, 61400, 19884, [152, 59, 71, 18, 120, 38, 145, 125]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugApplicationThread11064_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, puithreadrequests: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfissuspended: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pfiscallable: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pptc: ::windows::runtime::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugApplicationThread64(::windows::runtime::IUnknown);
impl IDebugApplicationThread64 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSystemThreadId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetApplication(&self) -> ::windows::runtime::Result<IRemoteDebugApplication> {
        let mut result__: <IRemoteDebugApplication as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IRemoteDebugApplication>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumStackFrames(&self) -> ::windows::runtime::Result<IEnumDebugStackFrames> {
        let mut result__: <IEnumDebugStackFrames as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumDebugStackFrames>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDescription(&self, pbstrdescription: *mut super::super::super::Foundation::BSTR, pbstrstate: *mut super::super::super::Foundation::BSTR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(pbstrdescription), ::std::mem::transmute(pbstrstate)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetNextStatement<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugStackFrame>, Param1: ::windows::runtime::IntoParam<'a, IDebugCodeContext>>(&self, pstackframe: Param0, pcodecontext: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), pstackframe.into_param().abi(), pcodecontext.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetState(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Suspend(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Resume(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSuspendCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SynchronousCallIntoThread32<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugThreadCall32>>(&self, pstcb: Param0, dwparam1: u32, dwparam2: u32, dwparam3: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), pstcb.into_param().abi(), ::std::mem::transmute(dwparam1), ::std::mem::transmute(dwparam2), ::std::mem::transmute(dwparam3)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn QueryIsCurrentThread(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn QueryIsDebuggerThread(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetDescription<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pstrdescription: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), pstrdescription.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetStateString<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pstrstate: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), pstrstate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SynchronousCallIntoThread64<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugThreadCall64>>(&self, pstcb: Param0, dwparam1: u64, dwparam2: u64, dwparam3: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), pstcb.into_param().abi(), ::std::mem::transmute(dwparam1), ::std::mem::transmute(dwparam2), ::std::mem::transmute(dwparam3)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugApplicationThread64 {
    type Vtable = IDebugApplicationThread64_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2645317766, 56237, 17773, [157, 238, 93, 236, 57, 171, 61, 218]);
}
impl ::std::convert::From<IDebugApplicationThread64> for IDebugApplicationThread {
    fn from(value: IDebugApplicationThread64) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugApplicationThread64> for IDebugApplicationThread {
    fn from(value: &IDebugApplicationThread64) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugApplicationThread> for IDebugApplicationThread64 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugApplicationThread> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugApplicationThread>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugApplicationThread> for &IDebugApplicationThread64 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugApplicationThread> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugApplicationThread>::into(::std::clone::Clone::clone(self)))
    }
}
impl ::std::convert::From<IDebugApplicationThread64> for IRemoteDebugApplicationThread {
    fn from(value: IDebugApplicationThread64) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugApplicationThread64> for IRemoteDebugApplicationThread {
    fn from(value: &IDebugApplicationThread64) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IRemoteDebugApplicationThread> for IDebugApplicationThread64 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IRemoteDebugApplicationThread> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IRemoteDebugApplicationThread>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IRemoteDebugApplicationThread> for &IDebugApplicationThread64 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IRemoteDebugApplicationThread> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IRemoteDebugApplicationThread>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugApplicationThread64_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwthreadid: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pprda: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppedsf: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstrdescription: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, pbstrstate: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstackframe: ::windows::runtime::RawPtr, pcodecontext: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstate: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstcb: ::windows::runtime::RawPtr, dwparam1: u32, dwparam2: u32, dwparam3: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstrdescription: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstrstate: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstcb: ::windows::runtime::RawPtr, dwparam1: u64, dwparam2: u64, dwparam3: u64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugApplicationThreadEvents110(::windows::runtime::IUnknown);
impl IDebugApplicationThreadEvents110 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnSuspendForBreakPoint(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnResumeFromBreakPoint(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnThreadRequestComplete(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnBeginThreadRequest(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugApplicationThreadEvents110 {
    type Vtable = IDebugApplicationThreadEvents110_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2229658728, 54746, 18600, [131, 244, 64, 54, 100, 41, 0, 123]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugApplicationThreadEvents110_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugAsyncOperation(::windows::runtime::IUnknown);
impl IDebugAsyncOperation {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSyncDebugOperation(&self) -> ::windows::runtime::Result<IDebugSyncOperation> {
        let mut result__: <IDebugSyncOperation as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugSyncOperation>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Start<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugAsyncOperationCallBack>>(&self, padocb: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), padocb.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Abort(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn QueryIsComplete(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetResult(&self, phrresult: *mut ::windows::runtime::HRESULT, ppunkresult: *mut ::std::option::Option<::windows::runtime::IUnknown>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(phrresult), ::std::mem::transmute(ppunkresult)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugAsyncOperation {
    type Vtable = IDebugAsyncOperation_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865819, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugAsyncOperation_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppsdo: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, padocb: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, phrresult: *mut ::windows::runtime::HRESULT, ppunkresult: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugAsyncOperationCallBack(::windows::runtime::IUnknown);
impl IDebugAsyncOperationCallBack {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn onComplete(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugAsyncOperationCallBack {
    type Vtable = IDebugAsyncOperationCallBack_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865820, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugAsyncOperationCallBack_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugBreakpoint(::windows::runtime::IUnknown);
impl IDebugBreakpoint {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetType(&self, breaktype: *mut u32, proctype: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(breaktype), ::std::mem::transmute(proctype)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetAdder(&self) -> ::windows::runtime::Result<IDebugClient> {
        let mut result__: <IDebugClient as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugClient>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetFlags(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddFlags(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveFlags(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetFlags(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOffset(&self, offset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDataParameters(&self, size: *mut u32, accesstype: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(size), ::std::mem::transmute(accesstype)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetDataParameters(&self, size: u32, accesstype: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(size), ::std::mem::transmute(accesstype)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetPassCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetPassCount(&self, count: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(count)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentPassCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetMatchThreadId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetMatchThreadId(&self, thread: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(thread)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetCommand(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetCommand<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, command: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), command.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOffsetExpression(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(expressionsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetOffsetExpression<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, expression: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), expression.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetParameters(&self) -> ::windows::runtime::Result<DEBUG_BREAKPOINT_PARAMETERS> {
        let mut result__: <DEBUG_BREAKPOINT_PARAMETERS as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), &mut result__).from_abi::<DEBUG_BREAKPOINT_PARAMETERS>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugBreakpoint {
    type Vtable = IDebugBreakpoint_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1541002356, 22901, 16954, [184, 139, 101, 168, 231, 17, 14, 101]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugBreakpoint_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, breaktype: *mut u32, proctype: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, adder: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, size: *mut u32, accesstype: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, size: u32, accesstype: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, thread: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, command: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, expression: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugBreakpoint2(::windows::runtime::IUnknown);
impl IDebugBreakpoint2 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetType(&self, breaktype: *mut u32, proctype: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(breaktype), ::std::mem::transmute(proctype)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetAdder(&self) -> ::windows::runtime::Result<IDebugClient> {
        let mut result__: <IDebugClient as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugClient>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetFlags(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddFlags(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveFlags(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetFlags(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOffset(&self, offset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDataParameters(&self, size: *mut u32, accesstype: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(size), ::std::mem::transmute(accesstype)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetDataParameters(&self, size: u32, accesstype: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(size), ::std::mem::transmute(accesstype)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetPassCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetPassCount(&self, count: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(count)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentPassCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetMatchThreadId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetMatchThreadId(&self, thread: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(thread)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetCommand(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetCommand<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, command: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), command.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOffsetExpression(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(expressionsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetOffsetExpression<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, expression: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), expression.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetParameters(&self) -> ::windows::runtime::Result<DEBUG_BREAKPOINT_PARAMETERS> {
        let mut result__: <DEBUG_BREAKPOINT_PARAMETERS as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), &mut result__).from_abi::<DEBUG_BREAKPOINT_PARAMETERS>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetCommandWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetCommandWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, command: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), command.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOffsetExpressionWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(expressionsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetOffsetExpressionWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, expression: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), expression.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugBreakpoint2 {
    type Vtable = IDebugBreakpoint2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(455576864, 31218, 17006, [163, 249, 193, 221, 243, 117, 212, 142]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugBreakpoint2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, breaktype: *mut u32, proctype: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, adder: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, size: *mut u32, accesstype: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, size: u32, accesstype: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, thread: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, command: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, expression: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, command: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, expression: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugBreakpoint3(::windows::runtime::IUnknown);
impl IDebugBreakpoint3 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetType(&self, breaktype: *mut u32, proctype: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(breaktype), ::std::mem::transmute(proctype)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetAdder(&self) -> ::windows::runtime::Result<IDebugClient> {
        let mut result__: <IDebugClient as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugClient>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetFlags(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddFlags(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveFlags(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetFlags(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOffset(&self, offset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDataParameters(&self, size: *mut u32, accesstype: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(size), ::std::mem::transmute(accesstype)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetDataParameters(&self, size: u32, accesstype: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(size), ::std::mem::transmute(accesstype)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetPassCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetPassCount(&self, count: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(count)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentPassCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetMatchThreadId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetMatchThreadId(&self, thread: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(thread)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetCommand(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetCommand<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, command: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), command.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOffsetExpression(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(expressionsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetOffsetExpression<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, expression: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), expression.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetParameters(&self) -> ::windows::runtime::Result<DEBUG_BREAKPOINT_PARAMETERS> {
        let mut result__: <DEBUG_BREAKPOINT_PARAMETERS as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), &mut result__).from_abi::<DEBUG_BREAKPOINT_PARAMETERS>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetCommandWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetCommandWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, command: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), command.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOffsetExpressionWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(expressionsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetOffsetExpressionWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, expression: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), expression.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetGuid(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugBreakpoint3 {
    type Vtable = IDebugBreakpoint3_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(955630153, 46152, 17339, [152, 53, 87, 157, 78, 192, 34, 73]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugBreakpoint3_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, breaktype: *mut u32, proctype: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, adder: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, size: *mut u32, accesstype: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, size: u32, accesstype: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, thread: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, command: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, expression: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, command: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, expression: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugClient(::windows::runtime::IUnknown);
impl IDebugClient {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AttachKernel<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, flags: u32, connectoptions: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), connectoptions.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetKernelConnectionOptions(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(optionssize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetKernelConnectionOptions<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartProcessServer<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, flags: u32, options: Param1, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), options.into_param().abi(), ::std::mem::transmute(reserved)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ConnectProcessServer<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, remoteoptions: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), remoteoptions.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DisconnectProcessServer(&self, server: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(server)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRunningProcessSystemIds(&self, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), ::std::mem::transmute(ids), ::std::mem::transmute(count), ::std::mem::transmute(actualcount)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessSystemIdByExecutableName<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, exename: Param1, flags: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), exename.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessDescription(&self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(server),
            ::std::mem::transmute(systemid),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(exename),
            ::std::mem::transmute(exenamesize),
            ::std::mem::transmute(actualexenamesize),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(actualdescriptionsize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AttachProcess(&self, server: u64, processid: u32, attachflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), ::std::mem::transmute(processid), ::std::mem::transmute(attachflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessA<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, commandline: Param1, createflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessAndAttach<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, commandline: Param1, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags), ::std::mem::transmute(processid), ::std::mem::transmute(attachflags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenDumpFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, dumpfile: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), dumpfile.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn WriteDumpFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, dumpfile: Param0, qualifier: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), dumpfile.into_param().abi(), ::std::mem::transmute(qualifier)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ConnectSession(&self, flags: u32, historylimit: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(historylimit)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartServer<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputServers<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, machine: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), machine.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn TerminateProcesses(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DetachProcesses(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EndSession(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExitCode(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DispatchCallbacks(&self, timeout: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(timeout)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ExitDispatch<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self), client.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateClient(&self) -> ::windows::runtime::Result<IDebugClient> {
        let mut result__: <IDebugClient as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugClient>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInputCallbacks(&self) -> ::windows::runtime::Result<IDebugInputCallbacks> {
        let mut result__: <IDebugInputCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugInputCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetInputCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugInputCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputCallbacks(&self) -> ::windows::runtime::Result<IDebugOutputCallbacks> {
        let mut result__: <IDebugOutputCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugOutputCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugOutputCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputMask(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputMask(&self, mask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOtherOutputMask<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).37)(::std::mem::transmute_copy(self), client.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOtherOutputMask<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0, mask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::std::mem::transmute_copy(self), client.into_param().abi(), ::std::mem::transmute(mask)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputWidth(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).39)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputWidth(&self, columns: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(::std::mem::transmute_copy(self), ::std::mem::transmute(columns)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOutputLinePrefix(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).41)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(prefixsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetOutputLinePrefix<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, prefix: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::std::mem::transmute_copy(self), prefix.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetIdentity(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(identitysize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputIdentity<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, flags: u32, format: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).44)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags), format.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventCallbacks(&self) -> ::windows::runtime::Result<IDebugEventCallbacks> {
        let mut result__: <IDebugEventCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).45)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugEventCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEventCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugEventCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FlushCallbacks(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).47)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugClient {
    type Vtable = IDebugClient_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(670979641, 33799, 20295, [131, 100, 238, 17, 143, 176, 138, 200]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugClient_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, historylimit: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, code: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, timeout: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr, mask: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, columns: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, columns: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prefix: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugClient2(::windows::runtime::IUnknown);
impl IDebugClient2 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AttachKernel<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, flags: u32, connectoptions: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), connectoptions.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetKernelConnectionOptions(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(optionssize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetKernelConnectionOptions<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartProcessServer<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, flags: u32, options: Param1, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), options.into_param().abi(), ::std::mem::transmute(reserved)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ConnectProcessServer<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, remoteoptions: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), remoteoptions.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DisconnectProcessServer(&self, server: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(server)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRunningProcessSystemIds(&self, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), ::std::mem::transmute(ids), ::std::mem::transmute(count), ::std::mem::transmute(actualcount)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessSystemIdByExecutableName<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, exename: Param1, flags: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), exename.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessDescription(&self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(server),
            ::std::mem::transmute(systemid),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(exename),
            ::std::mem::transmute(exenamesize),
            ::std::mem::transmute(actualexenamesize),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(actualdescriptionsize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AttachProcess(&self, server: u64, processid: u32, attachflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), ::std::mem::transmute(processid), ::std::mem::transmute(attachflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessA<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, commandline: Param1, createflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessAndAttach<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, commandline: Param1, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags), ::std::mem::transmute(processid), ::std::mem::transmute(attachflags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenDumpFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, dumpfile: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), dumpfile.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn WriteDumpFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, dumpfile: Param0, qualifier: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), dumpfile.into_param().abi(), ::std::mem::transmute(qualifier)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ConnectSession(&self, flags: u32, historylimit: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(historylimit)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartServer<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputServers<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, machine: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), machine.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn TerminateProcesses(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DetachProcesses(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EndSession(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExitCode(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DispatchCallbacks(&self, timeout: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(timeout)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ExitDispatch<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self), client.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateClient(&self) -> ::windows::runtime::Result<IDebugClient> {
        let mut result__: <IDebugClient as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugClient>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInputCallbacks(&self) -> ::windows::runtime::Result<IDebugInputCallbacks> {
        let mut result__: <IDebugInputCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugInputCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetInputCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugInputCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputCallbacks(&self) -> ::windows::runtime::Result<IDebugOutputCallbacks> {
        let mut result__: <IDebugOutputCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugOutputCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugOutputCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputMask(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputMask(&self, mask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOtherOutputMask<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).37)(::std::mem::transmute_copy(self), client.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOtherOutputMask<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0, mask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::std::mem::transmute_copy(self), client.into_param().abi(), ::std::mem::transmute(mask)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputWidth(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).39)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputWidth(&self, columns: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(::std::mem::transmute_copy(self), ::std::mem::transmute(columns)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOutputLinePrefix(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).41)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(prefixsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetOutputLinePrefix<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, prefix: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::std::mem::transmute_copy(self), prefix.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetIdentity(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(identitysize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputIdentity<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, flags: u32, format: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).44)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags), format.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventCallbacks(&self) -> ::windows::runtime::Result<IDebugEventCallbacks> {
        let mut result__: <IDebugEventCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).45)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugEventCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEventCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugEventCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FlushCallbacks(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).47)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn WriteDumpFile2<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, dumpfile: Param0, qualifier: u32, formatflags: u32, comment: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).48)(::std::mem::transmute_copy(self), dumpfile.into_param().abi(), ::std::mem::transmute(qualifier), ::std::mem::transmute(formatflags), comment.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddDumpInformationFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, infofile: Param0, r#type: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).49)(::std::mem::transmute_copy(self), infofile.into_param().abi(), ::std::mem::transmute(r#type)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EndProcessServer(&self, server: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).50)(::std::mem::transmute_copy(self), ::std::mem::transmute(server)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WaitForProcessServerEnd(&self, timeout: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).51)(::std::mem::transmute_copy(self), ::std::mem::transmute(timeout)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsKernelDebuggerEnabled(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).52)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn TerminateCurrentProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).53)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DetachCurrentProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).54)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AbandonCurrentProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).55)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugClient2 {
    type Vtable = IDebugClient2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3988706869, 14126, 19883, [187, 254, 237, 13, 47, 99, 190, 129]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugClient2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, historylimit: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, code: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, timeout: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr, mask: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, columns: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, columns: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prefix: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, timeout: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugClient3(::windows::runtime::IUnknown);
impl IDebugClient3 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AttachKernel<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, flags: u32, connectoptions: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), connectoptions.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetKernelConnectionOptions(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(optionssize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetKernelConnectionOptions<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartProcessServer<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, flags: u32, options: Param1, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), options.into_param().abi(), ::std::mem::transmute(reserved)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ConnectProcessServer<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, remoteoptions: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), remoteoptions.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DisconnectProcessServer(&self, server: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(server)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRunningProcessSystemIds(&self, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), ::std::mem::transmute(ids), ::std::mem::transmute(count), ::std::mem::transmute(actualcount)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessSystemIdByExecutableName<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, exename: Param1, flags: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), exename.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessDescription(&self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(server),
            ::std::mem::transmute(systemid),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(exename),
            ::std::mem::transmute(exenamesize),
            ::std::mem::transmute(actualexenamesize),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(actualdescriptionsize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AttachProcess(&self, server: u64, processid: u32, attachflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), ::std::mem::transmute(processid), ::std::mem::transmute(attachflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessA<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, commandline: Param1, createflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessAndAttach<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, commandline: Param1, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags), ::std::mem::transmute(processid), ::std::mem::transmute(attachflags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenDumpFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, dumpfile: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), dumpfile.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn WriteDumpFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, dumpfile: Param0, qualifier: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), dumpfile.into_param().abi(), ::std::mem::transmute(qualifier)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ConnectSession(&self, flags: u32, historylimit: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(historylimit)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartServer<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputServers<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, machine: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), machine.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn TerminateProcesses(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DetachProcesses(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EndSession(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExitCode(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DispatchCallbacks(&self, timeout: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(timeout)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ExitDispatch<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self), client.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateClient(&self) -> ::windows::runtime::Result<IDebugClient> {
        let mut result__: <IDebugClient as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugClient>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInputCallbacks(&self) -> ::windows::runtime::Result<IDebugInputCallbacks> {
        let mut result__: <IDebugInputCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugInputCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetInputCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugInputCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputCallbacks(&self) -> ::windows::runtime::Result<IDebugOutputCallbacks> {
        let mut result__: <IDebugOutputCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugOutputCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugOutputCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputMask(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputMask(&self, mask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOtherOutputMask<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).37)(::std::mem::transmute_copy(self), client.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOtherOutputMask<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0, mask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::std::mem::transmute_copy(self), client.into_param().abi(), ::std::mem::transmute(mask)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputWidth(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).39)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputWidth(&self, columns: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(::std::mem::transmute_copy(self), ::std::mem::transmute(columns)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOutputLinePrefix(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).41)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(prefixsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetOutputLinePrefix<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, prefix: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::std::mem::transmute_copy(self), prefix.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetIdentity(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(identitysize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputIdentity<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, flags: u32, format: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).44)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags), format.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventCallbacks(&self) -> ::windows::runtime::Result<IDebugEventCallbacks> {
        let mut result__: <IDebugEventCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).45)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugEventCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEventCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugEventCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FlushCallbacks(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).47)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn WriteDumpFile2<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, dumpfile: Param0, qualifier: u32, formatflags: u32, comment: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).48)(::std::mem::transmute_copy(self), dumpfile.into_param().abi(), ::std::mem::transmute(qualifier), ::std::mem::transmute(formatflags), comment.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddDumpInformationFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, infofile: Param0, r#type: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).49)(::std::mem::transmute_copy(self), infofile.into_param().abi(), ::std::mem::transmute(r#type)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EndProcessServer(&self, server: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).50)(::std::mem::transmute_copy(self), ::std::mem::transmute(server)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WaitForProcessServerEnd(&self, timeout: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).51)(::std::mem::transmute_copy(self), ::std::mem::transmute(timeout)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsKernelDebuggerEnabled(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).52)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn TerminateCurrentProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).53)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DetachCurrentProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).54)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AbandonCurrentProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).55)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessSystemIdByExecutableNameWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, exename: Param1, flags: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).56)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), exename.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessDescriptionWide(&self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).57)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(server),
            ::std::mem::transmute(systemid),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(exename),
            ::std::mem::transmute(exenamesize),
            ::std::mem::transmute(actualexenamesize),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(actualdescriptionsize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, commandline: Param1, createflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).58)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessAndAttachWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, commandline: Param1, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).59)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags), ::std::mem::transmute(processid), ::std::mem::transmute(attachflags)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugClient3 {
    type Vtable = IDebugClient3_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3712560511, 29112, 19158, [168, 220, 28, 136, 116, 121, 255, 145]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugClient3_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, historylimit: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, code: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, timeout: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr, mask: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, columns: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, columns: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prefix: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, timeout: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugClient4(::windows::runtime::IUnknown);
impl IDebugClient4 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AttachKernel<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, flags: u32, connectoptions: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), connectoptions.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetKernelConnectionOptions(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(optionssize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetKernelConnectionOptions<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartProcessServer<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, flags: u32, options: Param1, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), options.into_param().abi(), ::std::mem::transmute(reserved)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ConnectProcessServer<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, remoteoptions: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), remoteoptions.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DisconnectProcessServer(&self, server: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(server)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRunningProcessSystemIds(&self, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), ::std::mem::transmute(ids), ::std::mem::transmute(count), ::std::mem::transmute(actualcount)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessSystemIdByExecutableName<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, exename: Param1, flags: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), exename.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessDescription(&self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(server),
            ::std::mem::transmute(systemid),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(exename),
            ::std::mem::transmute(exenamesize),
            ::std::mem::transmute(actualexenamesize),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(actualdescriptionsize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AttachProcess(&self, server: u64, processid: u32, attachflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), ::std::mem::transmute(processid), ::std::mem::transmute(attachflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessA<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, commandline: Param1, createflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessAndAttach<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, commandline: Param1, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags), ::std::mem::transmute(processid), ::std::mem::transmute(attachflags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenDumpFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, dumpfile: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), dumpfile.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn WriteDumpFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, dumpfile: Param0, qualifier: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), dumpfile.into_param().abi(), ::std::mem::transmute(qualifier)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ConnectSession(&self, flags: u32, historylimit: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(historylimit)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartServer<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputServers<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, machine: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), machine.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn TerminateProcesses(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DetachProcesses(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EndSession(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExitCode(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DispatchCallbacks(&self, timeout: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(timeout)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ExitDispatch<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self), client.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateClient(&self) -> ::windows::runtime::Result<IDebugClient> {
        let mut result__: <IDebugClient as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugClient>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInputCallbacks(&self) -> ::windows::runtime::Result<IDebugInputCallbacks> {
        let mut result__: <IDebugInputCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugInputCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetInputCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugInputCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputCallbacks(&self) -> ::windows::runtime::Result<IDebugOutputCallbacks> {
        let mut result__: <IDebugOutputCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugOutputCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugOutputCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputMask(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputMask(&self, mask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOtherOutputMask<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).37)(::std::mem::transmute_copy(self), client.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOtherOutputMask<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0, mask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::std::mem::transmute_copy(self), client.into_param().abi(), ::std::mem::transmute(mask)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputWidth(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).39)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputWidth(&self, columns: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(::std::mem::transmute_copy(self), ::std::mem::transmute(columns)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOutputLinePrefix(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).41)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(prefixsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetOutputLinePrefix<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, prefix: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::std::mem::transmute_copy(self), prefix.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetIdentity(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(identitysize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputIdentity<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, flags: u32, format: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).44)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags), format.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventCallbacks(&self) -> ::windows::runtime::Result<IDebugEventCallbacks> {
        let mut result__: <IDebugEventCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).45)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugEventCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEventCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugEventCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FlushCallbacks(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).47)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn WriteDumpFile2<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, dumpfile: Param0, qualifier: u32, formatflags: u32, comment: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).48)(::std::mem::transmute_copy(self), dumpfile.into_param().abi(), ::std::mem::transmute(qualifier), ::std::mem::transmute(formatflags), comment.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddDumpInformationFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, infofile: Param0, r#type: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).49)(::std::mem::transmute_copy(self), infofile.into_param().abi(), ::std::mem::transmute(r#type)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EndProcessServer(&self, server: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).50)(::std::mem::transmute_copy(self), ::std::mem::transmute(server)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WaitForProcessServerEnd(&self, timeout: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).51)(::std::mem::transmute_copy(self), ::std::mem::transmute(timeout)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsKernelDebuggerEnabled(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).52)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn TerminateCurrentProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).53)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DetachCurrentProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).54)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AbandonCurrentProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).55)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessSystemIdByExecutableNameWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, exename: Param1, flags: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).56)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), exename.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessDescriptionWide(&self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).57)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(server),
            ::std::mem::transmute(systemid),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(exename),
            ::std::mem::transmute(exenamesize),
            ::std::mem::transmute(actualexenamesize),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(actualdescriptionsize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, commandline: Param1, createflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).58)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessAndAttachWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, commandline: Param1, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).59)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags), ::std::mem::transmute(processid), ::std::mem::transmute(attachflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenDumpFileWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, filename: Param0, filehandle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).60)(::std::mem::transmute_copy(self), filename.into_param().abi(), ::std::mem::transmute(filehandle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn WriteDumpFileWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, filename: Param0, filehandle: u64, qualifier: u32, formatflags: u32, comment: Param4) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).61)(::std::mem::transmute_copy(self), filename.into_param().abi(), ::std::mem::transmute(filehandle), ::std::mem::transmute(qualifier), ::std::mem::transmute(formatflags), comment.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddDumpInformationFileWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, filename: Param0, filehandle: u64, r#type: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).62)(::std::mem::transmute_copy(self), filename.into_param().abi(), ::std::mem::transmute(filehandle), ::std::mem::transmute(r#type)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberDumpFiles(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).63)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDumpFile(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).64)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(handle), ::std::mem::transmute(r#type)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDumpFileWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).65)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(handle), ::std::mem::transmute(r#type)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugClient4 {
    type Vtable = IDebugClient4_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3397632990, 20617, 19704, [147, 200, 216, 146, 56, 127, 42, 94]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugClient4_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, historylimit: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, code: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, timeout: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr, mask: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, columns: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, columns: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prefix: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, timeout: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugClient5(::windows::runtime::IUnknown);
impl IDebugClient5 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AttachKernel<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, flags: u32, connectoptions: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), connectoptions.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetKernelConnectionOptions(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(optionssize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetKernelConnectionOptions<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartProcessServer<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, flags: u32, options: Param1, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), options.into_param().abi(), ::std::mem::transmute(reserved)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ConnectProcessServer<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, remoteoptions: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), remoteoptions.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DisconnectProcessServer(&self, server: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(server)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRunningProcessSystemIds(&self, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), ::std::mem::transmute(ids), ::std::mem::transmute(count), ::std::mem::transmute(actualcount)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessSystemIdByExecutableName<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, exename: Param1, flags: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), exename.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessDescription(&self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(server),
            ::std::mem::transmute(systemid),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(exename),
            ::std::mem::transmute(exenamesize),
            ::std::mem::transmute(actualexenamesize),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(actualdescriptionsize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AttachProcess(&self, server: u64, processid: u32, attachflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), ::std::mem::transmute(processid), ::std::mem::transmute(attachflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessA<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, commandline: Param1, createflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessAndAttach<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, commandline: Param1, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags), ::std::mem::transmute(processid), ::std::mem::transmute(attachflags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenDumpFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, dumpfile: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), dumpfile.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn WriteDumpFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, dumpfile: Param0, qualifier: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), dumpfile.into_param().abi(), ::std::mem::transmute(qualifier)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ConnectSession(&self, flags: u32, historylimit: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(historylimit)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartServer<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputServers<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, machine: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), machine.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn TerminateProcesses(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DetachProcesses(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EndSession(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExitCode(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DispatchCallbacks(&self, timeout: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(timeout)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ExitDispatch<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self), client.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateClient(&self) -> ::windows::runtime::Result<IDebugClient> {
        let mut result__: <IDebugClient as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugClient>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInputCallbacks(&self) -> ::windows::runtime::Result<IDebugInputCallbacks> {
        let mut result__: <IDebugInputCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugInputCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetInputCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugInputCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputCallbacks(&self) -> ::windows::runtime::Result<IDebugOutputCallbacks> {
        let mut result__: <IDebugOutputCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugOutputCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugOutputCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputMask(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputMask(&self, mask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOtherOutputMask<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).37)(::std::mem::transmute_copy(self), client.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOtherOutputMask<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0, mask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::std::mem::transmute_copy(self), client.into_param().abi(), ::std::mem::transmute(mask)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputWidth(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).39)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputWidth(&self, columns: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(::std::mem::transmute_copy(self), ::std::mem::transmute(columns)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOutputLinePrefix(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).41)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(prefixsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetOutputLinePrefix<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, prefix: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::std::mem::transmute_copy(self), prefix.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetIdentity(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(identitysize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputIdentity<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, flags: u32, format: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).44)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags), format.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventCallbacks(&self) -> ::windows::runtime::Result<IDebugEventCallbacks> {
        let mut result__: <IDebugEventCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).45)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugEventCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEventCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugEventCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FlushCallbacks(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).47)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn WriteDumpFile2<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, dumpfile: Param0, qualifier: u32, formatflags: u32, comment: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).48)(::std::mem::transmute_copy(self), dumpfile.into_param().abi(), ::std::mem::transmute(qualifier), ::std::mem::transmute(formatflags), comment.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddDumpInformationFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, infofile: Param0, r#type: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).49)(::std::mem::transmute_copy(self), infofile.into_param().abi(), ::std::mem::transmute(r#type)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EndProcessServer(&self, server: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).50)(::std::mem::transmute_copy(self), ::std::mem::transmute(server)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WaitForProcessServerEnd(&self, timeout: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).51)(::std::mem::transmute_copy(self), ::std::mem::transmute(timeout)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsKernelDebuggerEnabled(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).52)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn TerminateCurrentProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).53)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DetachCurrentProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).54)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AbandonCurrentProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).55)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessSystemIdByExecutableNameWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, exename: Param1, flags: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).56)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), exename.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessDescriptionWide(&self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).57)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(server),
            ::std::mem::transmute(systemid),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(exename),
            ::std::mem::transmute(exenamesize),
            ::std::mem::transmute(actualexenamesize),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(actualdescriptionsize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, commandline: Param1, createflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).58)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessAndAttachWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, commandline: Param1, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).59)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags), ::std::mem::transmute(processid), ::std::mem::transmute(attachflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenDumpFileWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, filename: Param0, filehandle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).60)(::std::mem::transmute_copy(self), filename.into_param().abi(), ::std::mem::transmute(filehandle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn WriteDumpFileWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, filename: Param0, filehandle: u64, qualifier: u32, formatflags: u32, comment: Param4) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).61)(::std::mem::transmute_copy(self), filename.into_param().abi(), ::std::mem::transmute(filehandle), ::std::mem::transmute(qualifier), ::std::mem::transmute(formatflags), comment.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddDumpInformationFileWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, filename: Param0, filehandle: u64, r#type: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).62)(::std::mem::transmute_copy(self), filename.into_param().abi(), ::std::mem::transmute(filehandle), ::std::mem::transmute(r#type)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberDumpFiles(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).63)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDumpFile(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).64)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(handle), ::std::mem::transmute(r#type)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDumpFileWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).65)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(handle), ::std::mem::transmute(r#type)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AttachKernelWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, flags: u32, connectoptions: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).66)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), connectoptions.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetKernelConnectionOptionsWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).67)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(optionssize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetKernelConnectionOptionsWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).68)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartProcessServerWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, flags: u32, options: Param1, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).69)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), options.into_param().abi(), ::std::mem::transmute(reserved)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ConnectProcessServerWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, remoteoptions: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).70)(::std::mem::transmute_copy(self), remoteoptions.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartServerWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).71)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputServersWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, machine: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).72)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), machine.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputCallbacksWide(&self) -> ::windows::runtime::Result<IDebugOutputCallbacksWide> {
        let mut result__: <IDebugOutputCallbacksWide as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).73)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugOutputCallbacksWide>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputCallbacksWide<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugOutputCallbacksWide>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).74)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOutputLinePrefixWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).75)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(prefixsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetOutputLinePrefixWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, prefix: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).76)(::std::mem::transmute_copy(self), prefix.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetIdentityWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).77)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(identitysize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputIdentityWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, flags: u32, format: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).78)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags), format.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventCallbacksWide(&self) -> ::windows::runtime::Result<IDebugEventCallbacksWide> {
        let mut result__: <IDebugEventCallbacksWide as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).79)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugEventCallbacksWide>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEventCallbacksWide<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugEventCallbacksWide>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).80)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcess2<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, commandline: Param1, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: Param4, environment: Param5) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).81)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(optionsbuffer), ::std::mem::transmute(optionsbuffersize), initialdirectory.into_param().abi(), environment.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcess2Wide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, commandline: Param1, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: Param4, environment: Param5) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).82)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(optionsbuffer), ::std::mem::transmute(optionsbuffersize), initialdirectory.into_param().abi(), environment.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessAndAttach2<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(
        &self,
        server: u64,
        commandline: Param1,
        optionsbuffer: *const ::std::ffi::c_void,
        optionsbuffersize: u32,
        initialdirectory: Param4,
        environment: Param5,
        processid: u32,
        attachflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).83)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(server),
            commandline.into_param().abi(),
            ::std::mem::transmute(optionsbuffer),
            ::std::mem::transmute(optionsbuffersize),
            initialdirectory.into_param().abi(),
            environment.into_param().abi(),
            ::std::mem::transmute(processid),
            ::std::mem::transmute(attachflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessAndAttach2Wide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(
        &self,
        server: u64,
        commandline: Param1,
        optionsbuffer: *const ::std::ffi::c_void,
        optionsbuffersize: u32,
        initialdirectory: Param4,
        environment: Param5,
        processid: u32,
        attachflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).84)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(server),
            commandline.into_param().abi(),
            ::std::mem::transmute(optionsbuffer),
            ::std::mem::transmute(optionsbuffersize),
            initialdirectory.into_param().abi(),
            environment.into_param().abi(),
            ::std::mem::transmute(processid),
            ::std::mem::transmute(attachflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn PushOutputLinePrefix<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, newprefix: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).85)(::std::mem::transmute_copy(self), newprefix.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn PushOutputLinePrefixWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, newprefix: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).86)(::std::mem::transmute_copy(self), newprefix.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn PopOutputLinePrefix(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).87)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberInputCallbacks(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).88)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberOutputCallbacks(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).89)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberEventCallbacks(&self, eventflags: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).90)(::std::mem::transmute_copy(self), ::std::mem::transmute(eventflags), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetQuitLockString(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).91)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetQuitLockString<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, string: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).92)(::std::mem::transmute_copy(self), string.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetQuitLockStringWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).93)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetQuitLockStringWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, string: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).94)(::std::mem::transmute_copy(self), string.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugClient5 {
    type Vtable = IDebugClient5_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3819747799, 32450, 20236, [160, 218, 232, 30, 12, 187, 230, 40]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugClient5_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, historylimit: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, code: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, timeout: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr, mask: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, columns: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, columns: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prefix: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, timeout: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, connectoptions: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, options: super::super::super::Foundation::PWSTR, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, remoteoptions: super::super::super::Foundation::PWSTR, server: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, machine: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prefix: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, newprefix: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, newprefix: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, eventflags: u32, count: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, string: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, string: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugClient6(::windows::runtime::IUnknown);
impl IDebugClient6 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AttachKernel<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, flags: u32, connectoptions: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), connectoptions.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetKernelConnectionOptions(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(optionssize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetKernelConnectionOptions<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartProcessServer<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, flags: u32, options: Param1, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), options.into_param().abi(), ::std::mem::transmute(reserved)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ConnectProcessServer<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, remoteoptions: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), remoteoptions.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DisconnectProcessServer(&self, server: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(server)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRunningProcessSystemIds(&self, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), ::std::mem::transmute(ids), ::std::mem::transmute(count), ::std::mem::transmute(actualcount)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessSystemIdByExecutableName<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, exename: Param1, flags: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), exename.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessDescription(&self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(server),
            ::std::mem::transmute(systemid),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(exename),
            ::std::mem::transmute(exenamesize),
            ::std::mem::transmute(actualexenamesize),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(actualdescriptionsize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AttachProcess(&self, server: u64, processid: u32, attachflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), ::std::mem::transmute(processid), ::std::mem::transmute(attachflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessA<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, commandline: Param1, createflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessAndAttach<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, commandline: Param1, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags), ::std::mem::transmute(processid), ::std::mem::transmute(attachflags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenDumpFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, dumpfile: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), dumpfile.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn WriteDumpFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, dumpfile: Param0, qualifier: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), dumpfile.into_param().abi(), ::std::mem::transmute(qualifier)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ConnectSession(&self, flags: u32, historylimit: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(historylimit)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartServer<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputServers<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, machine: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), machine.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn TerminateProcesses(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DetachProcesses(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EndSession(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExitCode(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DispatchCallbacks(&self, timeout: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(timeout)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ExitDispatch<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self), client.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateClient(&self) -> ::windows::runtime::Result<IDebugClient> {
        let mut result__: <IDebugClient as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugClient>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInputCallbacks(&self) -> ::windows::runtime::Result<IDebugInputCallbacks> {
        let mut result__: <IDebugInputCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugInputCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetInputCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugInputCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputCallbacks(&self) -> ::windows::runtime::Result<IDebugOutputCallbacks> {
        let mut result__: <IDebugOutputCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugOutputCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugOutputCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputMask(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputMask(&self, mask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOtherOutputMask<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).37)(::std::mem::transmute_copy(self), client.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOtherOutputMask<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0, mask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::std::mem::transmute_copy(self), client.into_param().abi(), ::std::mem::transmute(mask)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputWidth(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).39)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputWidth(&self, columns: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(::std::mem::transmute_copy(self), ::std::mem::transmute(columns)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOutputLinePrefix(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).41)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(prefixsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetOutputLinePrefix<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, prefix: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::std::mem::transmute_copy(self), prefix.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetIdentity(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(identitysize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputIdentity<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, flags: u32, format: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).44)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags), format.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventCallbacks(&self) -> ::windows::runtime::Result<IDebugEventCallbacks> {
        let mut result__: <IDebugEventCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).45)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugEventCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEventCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugEventCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FlushCallbacks(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).47)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn WriteDumpFile2<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, dumpfile: Param0, qualifier: u32, formatflags: u32, comment: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).48)(::std::mem::transmute_copy(self), dumpfile.into_param().abi(), ::std::mem::transmute(qualifier), ::std::mem::transmute(formatflags), comment.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddDumpInformationFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, infofile: Param0, r#type: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).49)(::std::mem::transmute_copy(self), infofile.into_param().abi(), ::std::mem::transmute(r#type)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EndProcessServer(&self, server: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).50)(::std::mem::transmute_copy(self), ::std::mem::transmute(server)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WaitForProcessServerEnd(&self, timeout: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).51)(::std::mem::transmute_copy(self), ::std::mem::transmute(timeout)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsKernelDebuggerEnabled(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).52)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn TerminateCurrentProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).53)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DetachCurrentProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).54)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AbandonCurrentProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).55)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessSystemIdByExecutableNameWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, exename: Param1, flags: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).56)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), exename.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessDescriptionWide(&self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).57)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(server),
            ::std::mem::transmute(systemid),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(exename),
            ::std::mem::transmute(exenamesize),
            ::std::mem::transmute(actualexenamesize),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(actualdescriptionsize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, commandline: Param1, createflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).58)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessAndAttachWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, commandline: Param1, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).59)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags), ::std::mem::transmute(processid), ::std::mem::transmute(attachflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenDumpFileWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, filename: Param0, filehandle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).60)(::std::mem::transmute_copy(self), filename.into_param().abi(), ::std::mem::transmute(filehandle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn WriteDumpFileWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, filename: Param0, filehandle: u64, qualifier: u32, formatflags: u32, comment: Param4) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).61)(::std::mem::transmute_copy(self), filename.into_param().abi(), ::std::mem::transmute(filehandle), ::std::mem::transmute(qualifier), ::std::mem::transmute(formatflags), comment.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddDumpInformationFileWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, filename: Param0, filehandle: u64, r#type: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).62)(::std::mem::transmute_copy(self), filename.into_param().abi(), ::std::mem::transmute(filehandle), ::std::mem::transmute(r#type)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberDumpFiles(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).63)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDumpFile(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).64)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(handle), ::std::mem::transmute(r#type)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDumpFileWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).65)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(handle), ::std::mem::transmute(r#type)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AttachKernelWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, flags: u32, connectoptions: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).66)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), connectoptions.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetKernelConnectionOptionsWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).67)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(optionssize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetKernelConnectionOptionsWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).68)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartProcessServerWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, flags: u32, options: Param1, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).69)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), options.into_param().abi(), ::std::mem::transmute(reserved)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ConnectProcessServerWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, remoteoptions: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).70)(::std::mem::transmute_copy(self), remoteoptions.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartServerWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).71)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputServersWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, machine: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).72)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), machine.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputCallbacksWide(&self) -> ::windows::runtime::Result<IDebugOutputCallbacksWide> {
        let mut result__: <IDebugOutputCallbacksWide as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).73)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugOutputCallbacksWide>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputCallbacksWide<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugOutputCallbacksWide>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).74)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOutputLinePrefixWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).75)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(prefixsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetOutputLinePrefixWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, prefix: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).76)(::std::mem::transmute_copy(self), prefix.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetIdentityWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).77)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(identitysize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputIdentityWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, flags: u32, format: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).78)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags), format.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventCallbacksWide(&self) -> ::windows::runtime::Result<IDebugEventCallbacksWide> {
        let mut result__: <IDebugEventCallbacksWide as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).79)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugEventCallbacksWide>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEventCallbacksWide<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugEventCallbacksWide>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).80)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcess2<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, commandline: Param1, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: Param4, environment: Param5) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).81)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(optionsbuffer), ::std::mem::transmute(optionsbuffersize), initialdirectory.into_param().abi(), environment.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcess2Wide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, commandline: Param1, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: Param4, environment: Param5) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).82)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(optionsbuffer), ::std::mem::transmute(optionsbuffersize), initialdirectory.into_param().abi(), environment.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessAndAttach2<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(
        &self,
        server: u64,
        commandline: Param1,
        optionsbuffer: *const ::std::ffi::c_void,
        optionsbuffersize: u32,
        initialdirectory: Param4,
        environment: Param5,
        processid: u32,
        attachflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).83)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(server),
            commandline.into_param().abi(),
            ::std::mem::transmute(optionsbuffer),
            ::std::mem::transmute(optionsbuffersize),
            initialdirectory.into_param().abi(),
            environment.into_param().abi(),
            ::std::mem::transmute(processid),
            ::std::mem::transmute(attachflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessAndAttach2Wide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(
        &self,
        server: u64,
        commandline: Param1,
        optionsbuffer: *const ::std::ffi::c_void,
        optionsbuffersize: u32,
        initialdirectory: Param4,
        environment: Param5,
        processid: u32,
        attachflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).84)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(server),
            commandline.into_param().abi(),
            ::std::mem::transmute(optionsbuffer),
            ::std::mem::transmute(optionsbuffersize),
            initialdirectory.into_param().abi(),
            environment.into_param().abi(),
            ::std::mem::transmute(processid),
            ::std::mem::transmute(attachflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn PushOutputLinePrefix<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, newprefix: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).85)(::std::mem::transmute_copy(self), newprefix.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn PushOutputLinePrefixWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, newprefix: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).86)(::std::mem::transmute_copy(self), newprefix.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn PopOutputLinePrefix(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).87)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberInputCallbacks(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).88)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberOutputCallbacks(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).89)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberEventCallbacks(&self, eventflags: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).90)(::std::mem::transmute_copy(self), ::std::mem::transmute(eventflags), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetQuitLockString(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).91)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetQuitLockString<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, string: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).92)(::std::mem::transmute_copy(self), string.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetQuitLockStringWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).93)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetQuitLockStringWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, string: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).94)(::std::mem::transmute_copy(self), string.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEventContextCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugEventContextCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).95)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugClient6 {
    type Vtable = IDebugClient6_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4247303365, 50328, 18054, [162, 142, 98, 202, 210, 21, 78, 179]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugClient6_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, historylimit: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, code: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, timeout: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr, mask: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, columns: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, columns: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prefix: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, timeout: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, connectoptions: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, options: super::super::super::Foundation::PWSTR, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, remoteoptions: super::super::super::Foundation::PWSTR, server: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, machine: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prefix: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, newprefix: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, newprefix: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, eventflags: u32, count: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, string: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, string: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugClient7(::windows::runtime::IUnknown);
impl IDebugClient7 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AttachKernel<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, flags: u32, connectoptions: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), connectoptions.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetKernelConnectionOptions(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(optionssize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetKernelConnectionOptions<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartProcessServer<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, flags: u32, options: Param1, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), options.into_param().abi(), ::std::mem::transmute(reserved)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ConnectProcessServer<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, remoteoptions: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), remoteoptions.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DisconnectProcessServer(&self, server: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(server)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRunningProcessSystemIds(&self, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), ::std::mem::transmute(ids), ::std::mem::transmute(count), ::std::mem::transmute(actualcount)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessSystemIdByExecutableName<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, exename: Param1, flags: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), exename.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessDescription(&self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(server),
            ::std::mem::transmute(systemid),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(exename),
            ::std::mem::transmute(exenamesize),
            ::std::mem::transmute(actualexenamesize),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(actualdescriptionsize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AttachProcess(&self, server: u64, processid: u32, attachflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), ::std::mem::transmute(processid), ::std::mem::transmute(attachflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessA<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, commandline: Param1, createflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessAndAttach<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, commandline: Param1, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags), ::std::mem::transmute(processid), ::std::mem::transmute(attachflags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenDumpFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, dumpfile: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), dumpfile.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn WriteDumpFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, dumpfile: Param0, qualifier: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), dumpfile.into_param().abi(), ::std::mem::transmute(qualifier)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ConnectSession(&self, flags: u32, historylimit: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(historylimit)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartServer<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputServers<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, machine: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), machine.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn TerminateProcesses(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DetachProcesses(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EndSession(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExitCode(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DispatchCallbacks(&self, timeout: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(timeout)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ExitDispatch<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self), client.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateClient(&self) -> ::windows::runtime::Result<IDebugClient> {
        let mut result__: <IDebugClient as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugClient>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInputCallbacks(&self) -> ::windows::runtime::Result<IDebugInputCallbacks> {
        let mut result__: <IDebugInputCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugInputCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetInputCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugInputCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputCallbacks(&self) -> ::windows::runtime::Result<IDebugOutputCallbacks> {
        let mut result__: <IDebugOutputCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugOutputCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugOutputCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputMask(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputMask(&self, mask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOtherOutputMask<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).37)(::std::mem::transmute_copy(self), client.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOtherOutputMask<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0, mask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::std::mem::transmute_copy(self), client.into_param().abi(), ::std::mem::transmute(mask)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputWidth(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).39)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputWidth(&self, columns: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(::std::mem::transmute_copy(self), ::std::mem::transmute(columns)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOutputLinePrefix(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).41)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(prefixsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetOutputLinePrefix<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, prefix: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::std::mem::transmute_copy(self), prefix.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetIdentity(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(identitysize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputIdentity<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, flags: u32, format: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).44)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags), format.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventCallbacks(&self) -> ::windows::runtime::Result<IDebugEventCallbacks> {
        let mut result__: <IDebugEventCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).45)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugEventCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEventCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugEventCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FlushCallbacks(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).47)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn WriteDumpFile2<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, dumpfile: Param0, qualifier: u32, formatflags: u32, comment: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).48)(::std::mem::transmute_copy(self), dumpfile.into_param().abi(), ::std::mem::transmute(qualifier), ::std::mem::transmute(formatflags), comment.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddDumpInformationFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, infofile: Param0, r#type: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).49)(::std::mem::transmute_copy(self), infofile.into_param().abi(), ::std::mem::transmute(r#type)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EndProcessServer(&self, server: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).50)(::std::mem::transmute_copy(self), ::std::mem::transmute(server)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WaitForProcessServerEnd(&self, timeout: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).51)(::std::mem::transmute_copy(self), ::std::mem::transmute(timeout)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsKernelDebuggerEnabled(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).52)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn TerminateCurrentProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).53)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DetachCurrentProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).54)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AbandonCurrentProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).55)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessSystemIdByExecutableNameWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, exename: Param1, flags: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).56)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), exename.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessDescriptionWide(&self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).57)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(server),
            ::std::mem::transmute(systemid),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(exename),
            ::std::mem::transmute(exenamesize),
            ::std::mem::transmute(actualexenamesize),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(actualdescriptionsize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, commandline: Param1, createflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).58)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessAndAttachWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, commandline: Param1, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).59)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags), ::std::mem::transmute(processid), ::std::mem::transmute(attachflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenDumpFileWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, filename: Param0, filehandle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).60)(::std::mem::transmute_copy(self), filename.into_param().abi(), ::std::mem::transmute(filehandle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn WriteDumpFileWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, filename: Param0, filehandle: u64, qualifier: u32, formatflags: u32, comment: Param4) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).61)(::std::mem::transmute_copy(self), filename.into_param().abi(), ::std::mem::transmute(filehandle), ::std::mem::transmute(qualifier), ::std::mem::transmute(formatflags), comment.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddDumpInformationFileWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, filename: Param0, filehandle: u64, r#type: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).62)(::std::mem::transmute_copy(self), filename.into_param().abi(), ::std::mem::transmute(filehandle), ::std::mem::transmute(r#type)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberDumpFiles(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).63)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDumpFile(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).64)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(handle), ::std::mem::transmute(r#type)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDumpFileWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).65)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(handle), ::std::mem::transmute(r#type)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AttachKernelWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, flags: u32, connectoptions: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).66)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), connectoptions.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetKernelConnectionOptionsWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).67)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(optionssize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetKernelConnectionOptionsWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).68)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartProcessServerWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, flags: u32, options: Param1, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).69)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), options.into_param().abi(), ::std::mem::transmute(reserved)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ConnectProcessServerWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, remoteoptions: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).70)(::std::mem::transmute_copy(self), remoteoptions.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartServerWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).71)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputServersWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, machine: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).72)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), machine.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputCallbacksWide(&self) -> ::windows::runtime::Result<IDebugOutputCallbacksWide> {
        let mut result__: <IDebugOutputCallbacksWide as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).73)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugOutputCallbacksWide>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputCallbacksWide<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugOutputCallbacksWide>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).74)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOutputLinePrefixWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).75)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(prefixsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetOutputLinePrefixWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, prefix: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).76)(::std::mem::transmute_copy(self), prefix.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetIdentityWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).77)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(identitysize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputIdentityWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, flags: u32, format: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).78)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags), format.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventCallbacksWide(&self) -> ::windows::runtime::Result<IDebugEventCallbacksWide> {
        let mut result__: <IDebugEventCallbacksWide as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).79)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugEventCallbacksWide>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEventCallbacksWide<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugEventCallbacksWide>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).80)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcess2<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, commandline: Param1, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: Param4, environment: Param5) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).81)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(optionsbuffer), ::std::mem::transmute(optionsbuffersize), initialdirectory.into_param().abi(), environment.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcess2Wide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, commandline: Param1, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: Param4, environment: Param5) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).82)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(optionsbuffer), ::std::mem::transmute(optionsbuffersize), initialdirectory.into_param().abi(), environment.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessAndAttach2<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(
        &self,
        server: u64,
        commandline: Param1,
        optionsbuffer: *const ::std::ffi::c_void,
        optionsbuffersize: u32,
        initialdirectory: Param4,
        environment: Param5,
        processid: u32,
        attachflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).83)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(server),
            commandline.into_param().abi(),
            ::std::mem::transmute(optionsbuffer),
            ::std::mem::transmute(optionsbuffersize),
            initialdirectory.into_param().abi(),
            environment.into_param().abi(),
            ::std::mem::transmute(processid),
            ::std::mem::transmute(attachflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessAndAttach2Wide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(
        &self,
        server: u64,
        commandline: Param1,
        optionsbuffer: *const ::std::ffi::c_void,
        optionsbuffersize: u32,
        initialdirectory: Param4,
        environment: Param5,
        processid: u32,
        attachflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).84)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(server),
            commandline.into_param().abi(),
            ::std::mem::transmute(optionsbuffer),
            ::std::mem::transmute(optionsbuffersize),
            initialdirectory.into_param().abi(),
            environment.into_param().abi(),
            ::std::mem::transmute(processid),
            ::std::mem::transmute(attachflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn PushOutputLinePrefix<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, newprefix: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).85)(::std::mem::transmute_copy(self), newprefix.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn PushOutputLinePrefixWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, newprefix: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).86)(::std::mem::transmute_copy(self), newprefix.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn PopOutputLinePrefix(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).87)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberInputCallbacks(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).88)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberOutputCallbacks(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).89)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberEventCallbacks(&self, eventflags: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).90)(::std::mem::transmute_copy(self), ::std::mem::transmute(eventflags), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetQuitLockString(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).91)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetQuitLockString<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, string: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).92)(::std::mem::transmute_copy(self), string.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetQuitLockStringWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).93)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetQuitLockStringWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, string: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).94)(::std::mem::transmute_copy(self), string.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEventContextCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugEventContextCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).95)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetClientContext(&self, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).96)(::std::mem::transmute_copy(self), ::std::mem::transmute(context), ::std::mem::transmute(contextsize)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugClient7 {
    type Vtable = IDebugClient7_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(324561891, 21550, 18462, [177, 242, 132, 151, 186, 116, 249, 169]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugClient7_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, historylimit: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, code: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, timeout: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr, mask: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, columns: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, columns: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prefix: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, timeout: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, connectoptions: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, options: super::super::super::Foundation::PWSTR, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, remoteoptions: super::super::super::Foundation::PWSTR, server: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, machine: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prefix: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, newprefix: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, newprefix: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, eventflags: u32, count: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, string: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, string: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugClient8(::windows::runtime::IUnknown);
impl IDebugClient8 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AttachKernel<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, flags: u32, connectoptions: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), connectoptions.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetKernelConnectionOptions(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(optionssize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetKernelConnectionOptions<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartProcessServer<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, flags: u32, options: Param1, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), options.into_param().abi(), ::std::mem::transmute(reserved)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ConnectProcessServer<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, remoteoptions: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), remoteoptions.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DisconnectProcessServer(&self, server: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(server)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRunningProcessSystemIds(&self, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), ::std::mem::transmute(ids), ::std::mem::transmute(count), ::std::mem::transmute(actualcount)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessSystemIdByExecutableName<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, exename: Param1, flags: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), exename.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessDescription(&self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(server),
            ::std::mem::transmute(systemid),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(exename),
            ::std::mem::transmute(exenamesize),
            ::std::mem::transmute(actualexenamesize),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(actualdescriptionsize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AttachProcess(&self, server: u64, processid: u32, attachflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), ::std::mem::transmute(processid), ::std::mem::transmute(attachflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessA<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, commandline: Param1, createflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessAndAttach<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, commandline: Param1, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags), ::std::mem::transmute(processid), ::std::mem::transmute(attachflags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetProcessOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenDumpFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, dumpfile: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), dumpfile.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn WriteDumpFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, dumpfile: Param0, qualifier: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), dumpfile.into_param().abi(), ::std::mem::transmute(qualifier)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ConnectSession(&self, flags: u32, historylimit: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(historylimit)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartServer<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputServers<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, machine: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), machine.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn TerminateProcesses(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DetachProcesses(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EndSession(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExitCode(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DispatchCallbacks(&self, timeout: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(timeout)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ExitDispatch<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self), client.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateClient(&self) -> ::windows::runtime::Result<IDebugClient> {
        let mut result__: <IDebugClient as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugClient>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInputCallbacks(&self) -> ::windows::runtime::Result<IDebugInputCallbacks> {
        let mut result__: <IDebugInputCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugInputCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetInputCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugInputCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputCallbacks(&self) -> ::windows::runtime::Result<IDebugOutputCallbacks> {
        let mut result__: <IDebugOutputCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugOutputCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugOutputCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputMask(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputMask(&self, mask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOtherOutputMask<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).37)(::std::mem::transmute_copy(self), client.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOtherOutputMask<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugClient>>(&self, client: Param0, mask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::std::mem::transmute_copy(self), client.into_param().abi(), ::std::mem::transmute(mask)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputWidth(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).39)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputWidth(&self, columns: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(::std::mem::transmute_copy(self), ::std::mem::transmute(columns)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOutputLinePrefix(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).41)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(prefixsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetOutputLinePrefix<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, prefix: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::std::mem::transmute_copy(self), prefix.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetIdentity(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(identitysize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputIdentity<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, flags: u32, format: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).44)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags), format.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventCallbacks(&self) -> ::windows::runtime::Result<IDebugEventCallbacks> {
        let mut result__: <IDebugEventCallbacks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).45)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugEventCallbacks>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEventCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugEventCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FlushCallbacks(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).47)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn WriteDumpFile2<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, dumpfile: Param0, qualifier: u32, formatflags: u32, comment: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).48)(::std::mem::transmute_copy(self), dumpfile.into_param().abi(), ::std::mem::transmute(qualifier), ::std::mem::transmute(formatflags), comment.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddDumpInformationFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, infofile: Param0, r#type: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).49)(::std::mem::transmute_copy(self), infofile.into_param().abi(), ::std::mem::transmute(r#type)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EndProcessServer(&self, server: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).50)(::std::mem::transmute_copy(self), ::std::mem::transmute(server)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WaitForProcessServerEnd(&self, timeout: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).51)(::std::mem::transmute_copy(self), ::std::mem::transmute(timeout)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsKernelDebuggerEnabled(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).52)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn TerminateCurrentProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).53)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DetachCurrentProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).54)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AbandonCurrentProcess(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).55)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessSystemIdByExecutableNameWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, exename: Param1, flags: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).56)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), exename.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRunningProcessDescriptionWide(&self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).57)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(server),
            ::std::mem::transmute(systemid),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(exename),
            ::std::mem::transmute(exenamesize),
            ::std::mem::transmute(actualexenamesize),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(actualdescriptionsize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, commandline: Param1, createflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).58)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessAndAttachWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, commandline: Param1, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).59)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(createflags), ::std::mem::transmute(processid), ::std::mem::transmute(attachflags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenDumpFileWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, filename: Param0, filehandle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).60)(::std::mem::transmute_copy(self), filename.into_param().abi(), ::std::mem::transmute(filehandle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn WriteDumpFileWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, filename: Param0, filehandle: u64, qualifier: u32, formatflags: u32, comment: Param4) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).61)(::std::mem::transmute_copy(self), filename.into_param().abi(), ::std::mem::transmute(filehandle), ::std::mem::transmute(qualifier), ::std::mem::transmute(formatflags), comment.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddDumpInformationFileWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, filename: Param0, filehandle: u64, r#type: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).62)(::std::mem::transmute_copy(self), filename.into_param().abi(), ::std::mem::transmute(filehandle), ::std::mem::transmute(r#type)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberDumpFiles(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).63)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDumpFile(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).64)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(handle), ::std::mem::transmute(r#type)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDumpFileWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).65)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(handle), ::std::mem::transmute(r#type)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AttachKernelWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, flags: u32, connectoptions: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).66)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), connectoptions.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetKernelConnectionOptionsWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).67)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(optionssize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetKernelConnectionOptionsWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).68)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartProcessServerWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, flags: u32, options: Param1, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).69)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), options.into_param().abi(), ::std::mem::transmute(reserved)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ConnectProcessServerWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, remoteoptions: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).70)(::std::mem::transmute_copy(self), remoteoptions.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartServerWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, options: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).71)(::std::mem::transmute_copy(self), options.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputServersWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, machine: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).72)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), machine.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOutputCallbacksWide(&self) -> ::windows::runtime::Result<IDebugOutputCallbacksWide> {
        let mut result__: <IDebugOutputCallbacksWide as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).73)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugOutputCallbacksWide>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetOutputCallbacksWide<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugOutputCallbacksWide>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).74)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOutputLinePrefixWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).75)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(prefixsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetOutputLinePrefixWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, prefix: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).76)(::std::mem::transmute_copy(self), prefix.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetIdentityWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).77)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(identitysize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputIdentityWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, flags: u32, format: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).78)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags), format.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventCallbacksWide(&self) -> ::windows::runtime::Result<IDebugEventCallbacksWide> {
        let mut result__: <IDebugEventCallbacksWide as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).79)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugEventCallbacksWide>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEventCallbacksWide<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugEventCallbacksWide>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).80)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcess2<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, server: u64, commandline: Param1, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: Param4, environment: Param5) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).81)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(optionsbuffer), ::std::mem::transmute(optionsbuffersize), initialdirectory.into_param().abi(), environment.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcess2Wide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, commandline: Param1, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: Param4, environment: Param5) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).82)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), commandline.into_param().abi(), ::std::mem::transmute(optionsbuffer), ::std::mem::transmute(optionsbuffersize), initialdirectory.into_param().abi(), environment.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessAndAttach2<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(
        &self,
        server: u64,
        commandline: Param1,
        optionsbuffer: *const ::std::ffi::c_void,
        optionsbuffersize: u32,
        initialdirectory: Param4,
        environment: Param5,
        processid: u32,
        attachflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).83)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(server),
            commandline.into_param().abi(),
            ::std::mem::transmute(optionsbuffer),
            ::std::mem::transmute(optionsbuffersize),
            initialdirectory.into_param().abi(),
            environment.into_param().abi(),
            ::std::mem::transmute(processid),
            ::std::mem::transmute(attachflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessAndAttach2Wide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(
        &self,
        server: u64,
        commandline: Param1,
        optionsbuffer: *const ::std::ffi::c_void,
        optionsbuffersize: u32,
        initialdirectory: Param4,
        environment: Param5,
        processid: u32,
        attachflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).84)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(server),
            commandline.into_param().abi(),
            ::std::mem::transmute(optionsbuffer),
            ::std::mem::transmute(optionsbuffersize),
            initialdirectory.into_param().abi(),
            environment.into_param().abi(),
            ::std::mem::transmute(processid),
            ::std::mem::transmute(attachflags),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn PushOutputLinePrefix<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, newprefix: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).85)(::std::mem::transmute_copy(self), newprefix.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn PushOutputLinePrefixWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, newprefix: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).86)(::std::mem::transmute_copy(self), newprefix.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn PopOutputLinePrefix(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).87)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberInputCallbacks(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).88)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberOutputCallbacks(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).89)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberEventCallbacks(&self, eventflags: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).90)(::std::mem::transmute_copy(self), ::std::mem::transmute(eventflags), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetQuitLockString(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).91)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetQuitLockString<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, string: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).92)(::std::mem::transmute_copy(self), string.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetQuitLockStringWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).93)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetQuitLockStringWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, string: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).94)(::std::mem::transmute_copy(self), string.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEventContextCallbacks<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugEventContextCallbacks>>(&self, callbacks: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).95)(::std::mem::transmute_copy(self), callbacks.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetClientContext(&self, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).96)(::std::mem::transmute_copy(self), ::std::mem::transmute(context), ::std::mem::transmute(contextsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenDumpFileWide2<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, filename: Param0, filehandle: u64, alternatearch: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).97)(::std::mem::transmute_copy(self), filename.into_param().abi(), ::std::mem::transmute(filehandle), ::std::mem::transmute(alternatearch)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugClient8 {
    type Vtable = IDebugClient8_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3468966621, 25461, 18078, [131, 213, 65, 78, 64, 51, 193, 154]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugClient8_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, historylimit: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, code: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, timeout: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, client: ::windows::runtime::RawPtr, mask: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, columns: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, columns: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prefix: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, timeout: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, connectoptions: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, options: super::super::super::Foundation::PWSTR, reserved: *const ::std::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, remoteoptions: super::super::super::Foundation::PWSTR, server: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, machine: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prefix: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::std::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR, processid: u32, attachflags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, newprefix: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, newprefix: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, eventflags: u32, count: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, string: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, string: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, callbacks: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, filename: super::super::super::Foundation::PWSTR, filehandle: u64, alternatearch: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugCodeContext(::windows::runtime::IUnknown);
impl IDebugCodeContext {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDocumentContext(&self) -> ::windows::runtime::Result<IDebugDocumentContext> {
        let mut result__: <IDebugDocumentContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugDocumentContext>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetBreakPoint(&self, bps: BREAKPOINT_STATE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(bps)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugCodeContext {
    type Vtable = IDebugCodeContext_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865811, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugCodeContext_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppsc: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bps: BREAKPOINT_STATE) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugControl(::windows::runtime::IUnknown);
impl IDebugControl {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInterrupt(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetInterrupt(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInterruptTimeout(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetInterruptTimeout(&self, seconds: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(seconds)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLogFile(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(append)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenLogFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(&self, file: Param0, append: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), file.into_param().abi(), append.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CloseLogFile(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetLogMask(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetLogMask(&self, mask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Input(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(inputsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ReturnInput<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, buffer: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), buffer.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Output<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, mask: u32, format: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputVaList<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, mask: u32, format: Param1, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ControlledOutput<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, mask: u32, format: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(mask), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ControlledOutputVaList<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, mask: u32, format: Param2, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(mask), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputPrompt<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, format: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputPromptVaList<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, format: Param1, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetPromptText(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(textsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputCurrentState(&self, outputcontrol: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputVersionInformation(&self, outputcontrol: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNotifyEventHandle(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetNotifyEventHandle(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Assemble<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, offset: u64, instr: Param1) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), instr.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Disassemble(&self, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(flags), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(disassemblysize), ::std::mem::transmute(endoffset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDisassembleEffectiveOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputDisassembly(&self, outputcontrol: u32, offset: u64, flags: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(offset), ::std::mem::transmute(flags), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputDisassemblyLines(&self, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(outputcontrol),
            ::std::mem::transmute(previouslines),
            ::std::mem::transmute(totallines),
            ::std::mem::transmute(offset),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(offsetline),
            ::std::mem::transmute(startoffset),
            ::std::mem::transmute(endoffset),
            ::std::mem::transmute(lineoffsets),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNearInstruction(&self, offset: u64, delta: i32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(delta), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetStackTrace(&self, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), ::std::mem::transmute(frameoffset), ::std::mem::transmute(stackoffset), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(framesfilled)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetReturnOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputStackTrace(&self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDebuggeeType(&self, class: *mut u32, qualifier: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), ::std::mem::transmute(class), ::std::mem::transmute(qualifier)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetActualProcessorType(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExecutingProcessorType(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberPossibleExecutingProcessorTypes(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).37)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetPossibleExecutingProcessorTypes(&self, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(types)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberProcessors(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).39)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSystemVersion(&self, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(platformid),
            ::std::mem::transmute(major),
            ::std::mem::transmute(minor),
            ::std::mem::transmute(servicepackstring),
            ::std::mem::transmute(servicepackstringsize),
            ::std::mem::transmute(servicepackstringused),
            ::std::mem::transmute(servicepacknumber),
            ::std::mem::transmute(buildstring),
            ::std::mem::transmute(buildstringsize),
            ::std::mem::transmute(buildstringused),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetPageSize(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).41)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsPointer64Bit(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadBugCheckData(&self, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::std::mem::transmute_copy(self), ::std::mem::transmute(code), ::std::mem::transmute(arg1), ::std::mem::transmute(arg2), ::std::mem::transmute(arg3), ::std::mem::transmute(arg4)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberSupportedProcessorTypes(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).44)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSupportedProcessorTypes(&self, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).45)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(types)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetProcessorTypeNames(&self, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(fullnamebuffer),
            ::std::mem::transmute(fullnamebuffersize),
            ::std::mem::transmute(fullnamesize),
            ::std::mem::transmute(abbrevnamebuffer),
            ::std::mem::transmute(abbrevnamebuffersize),
            ::std::mem::transmute(abbrevnamesize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEffectiveProcessorType(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).47)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEffectiveProcessorType(&self, r#type: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).48)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#type)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExecutionStatus(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).49)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetExecutionStatus(&self, status: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).50)(::std::mem::transmute_copy(self), ::std::mem::transmute(status)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCodeLevel(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).51)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetCodeLevel(&self, level: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).52)(::std::mem::transmute_copy(self), ::std::mem::transmute(level)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEngineOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).53)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddEngineOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).54)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveEngineOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).55)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEngineOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).56)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSystemErrorControl(&self, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).57)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputlevel), ::std::mem::transmute(breaklevel)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetSystemErrorControl(&self, outputlevel: u32, breaklevel: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).58)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputlevel), ::std::mem::transmute(breaklevel)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTextMacro(&self, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).59)(::std::mem::transmute_copy(self), ::std::mem::transmute(slot), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(macrosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetTextMacro<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, slot: u32, r#macro: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).60)(::std::mem::transmute_copy(self), ::std::mem::transmute(slot), r#macro.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRadix(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).61)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetRadix(&self, radix: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).62)(::std::mem::transmute_copy(self), ::std::mem::transmute(radix)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Evaluate<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, expression: Param0, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).63)(::std::mem::transmute_copy(self), expression.into_param().abi(), ::std::mem::transmute(desiredtype), ::std::mem::transmute(value), ::std::mem::transmute(remainderindex)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CoerceValue(&self, r#in: *const DEBUG_VALUE, outtype: u32) -> ::windows::runtime::Result<DEBUG_VALUE> {
        let mut result__: <DEBUG_VALUE as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).64)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#in), ::std::mem::transmute(outtype), &mut result__).from_abi::<DEBUG_VALUE>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CoerceValues(&self, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).65)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(r#in), ::std::mem::transmute(outtypes), ::std::mem::transmute(out)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Execute<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, command: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).66)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), command.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ExecuteCommandFile<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, commandfile: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).67)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), commandfile.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberBreakpoints(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).68)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointByIndex(&self, index: u32) -> ::windows::runtime::Result<IDebugBreakpoint> {
        let mut result__: <IDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).69)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), &mut result__).from_abi::<IDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointById(&self, id: u32) -> ::windows::runtime::Result<IDebugBreakpoint> {
        let mut result__: <IDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).70)(::std::mem::transmute_copy(self), ::std::mem::transmute(id), &mut result__).from_abi::<IDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointParameters(&self, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).71)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(ids), ::std::mem::transmute(start), ::std::mem::transmute(params)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddBreakpoint(&self, r#type: u32, desiredid: u32) -> ::windows::runtime::Result<IDebugBreakpoint> {
        let mut result__: <IDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).72)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#type), ::std::mem::transmute(desiredid), &mut result__).from_abi::<IDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveBreakpoint<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugBreakpoint>>(&self, bp: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).73)(::std::mem::transmute_copy(self), bp.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddExtension<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0, flags: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).74)(::std::mem::transmute_copy(self), path.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveExtension(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).75)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExtensionByPath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).76)(::std::mem::transmute_copy(self), path.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CallExtension<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, handle: u64, function: Param1, arguments: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).77)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), function.into_param().abi(), arguments.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExtensionFunction<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, handle: u64, funcname: Param1, function: *mut ::std::option::Option<super::super::super::Foundation::FARPROC>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).78)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), funcname.into_param().abi(), ::std::mem::transmute(function)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
    pub unsafe fn GetWindbgExtensionApis32(&self, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).79)(::std::mem::transmute_copy(self), ::std::mem::transmute(api)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
    pub unsafe fn GetWindbgExtensionApis64(&self, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).80)(::std::mem::transmute_copy(self), ::std::mem::transmute(api)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberEventFilters(&self, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).81)(::std::mem::transmute_copy(self), ::std::mem::transmute(specificevents), ::std::mem::transmute(specificexceptions), ::std::mem::transmute(arbitraryexceptions)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventFilterText(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).82)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(textsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventFilterCommand(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).83)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetEventFilterCommand<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, command: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).84)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), command.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSpecificFilterParameters(&self, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).85)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(params)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetSpecificFilterParameters(&self, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).86)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(params)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSpecificFilterArgument(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).87)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(argumentsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSpecificFilterArgument<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, argument: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).88)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), argument.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExceptionFilterParameters(&self, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).89)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(codes), ::std::mem::transmute(start), ::std::mem::transmute(params)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetExceptionFilterParameters(&self, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).90)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(params)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExceptionFilterSecondCommand(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).91)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetExceptionFilterSecondCommand<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, command: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).92)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), command.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WaitForEvent(&self, flags: u32, timeout: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).93)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(timeout)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLastEventInformation(&self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).94)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(processid),
            ::std::mem::transmute(threadid),
            ::std::mem::transmute(extrainformation),
            ::std::mem::transmute(extrainformationsize),
            ::std::mem::transmute(extrainformationused),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(descriptionused),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugControl {
    type Vtable = IDebugControl_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1367533160, 4190, 16750, [173, 146, 36, 239, 128, 4, 36, 186]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugControl_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, seconds: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, seconds: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, class: *mut u32, qualifier: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, size: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, status: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, status: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, level: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, level: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputlevel: u32, breaklevel: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, radix: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, radix: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32, desiredid: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bp: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *mut ::std::mem::ManuallyDrop<WINDBG_EXTENSION_APIS32>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *mut ::std::mem::ManuallyDrop<WINDBG_EXTENSION_APIS64>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, timeout: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugControl2(::windows::runtime::IUnknown);
impl IDebugControl2 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInterrupt(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetInterrupt(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInterruptTimeout(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetInterruptTimeout(&self, seconds: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(seconds)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLogFile(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(append)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenLogFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(&self, file: Param0, append: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), file.into_param().abi(), append.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CloseLogFile(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetLogMask(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetLogMask(&self, mask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Input(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(inputsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ReturnInput<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, buffer: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), buffer.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Output<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, mask: u32, format: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputVaList<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, mask: u32, format: Param1, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ControlledOutput<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, mask: u32, format: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(mask), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ControlledOutputVaList<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, mask: u32, format: Param2, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(mask), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputPrompt<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, format: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputPromptVaList<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, format: Param1, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetPromptText(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(textsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputCurrentState(&self, outputcontrol: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputVersionInformation(&self, outputcontrol: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNotifyEventHandle(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetNotifyEventHandle(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Assemble<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, offset: u64, instr: Param1) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), instr.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Disassemble(&self, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(flags), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(disassemblysize), ::std::mem::transmute(endoffset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDisassembleEffectiveOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputDisassembly(&self, outputcontrol: u32, offset: u64, flags: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(offset), ::std::mem::transmute(flags), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputDisassemblyLines(&self, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(outputcontrol),
            ::std::mem::transmute(previouslines),
            ::std::mem::transmute(totallines),
            ::std::mem::transmute(offset),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(offsetline),
            ::std::mem::transmute(startoffset),
            ::std::mem::transmute(endoffset),
            ::std::mem::transmute(lineoffsets),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNearInstruction(&self, offset: u64, delta: i32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(delta), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetStackTrace(&self, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), ::std::mem::transmute(frameoffset), ::std::mem::transmute(stackoffset), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(framesfilled)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetReturnOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputStackTrace(&self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDebuggeeType(&self, class: *mut u32, qualifier: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), ::std::mem::transmute(class), ::std::mem::transmute(qualifier)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetActualProcessorType(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExecutingProcessorType(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberPossibleExecutingProcessorTypes(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).37)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetPossibleExecutingProcessorTypes(&self, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(types)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberProcessors(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).39)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSystemVersion(&self, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(platformid),
            ::std::mem::transmute(major),
            ::std::mem::transmute(minor),
            ::std::mem::transmute(servicepackstring),
            ::std::mem::transmute(servicepackstringsize),
            ::std::mem::transmute(servicepackstringused),
            ::std::mem::transmute(servicepacknumber),
            ::std::mem::transmute(buildstring),
            ::std::mem::transmute(buildstringsize),
            ::std::mem::transmute(buildstringused),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetPageSize(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).41)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsPointer64Bit(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadBugCheckData(&self, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::std::mem::transmute_copy(self), ::std::mem::transmute(code), ::std::mem::transmute(arg1), ::std::mem::transmute(arg2), ::std::mem::transmute(arg3), ::std::mem::transmute(arg4)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberSupportedProcessorTypes(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).44)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSupportedProcessorTypes(&self, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).45)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(types)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetProcessorTypeNames(&self, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(fullnamebuffer),
            ::std::mem::transmute(fullnamebuffersize),
            ::std::mem::transmute(fullnamesize),
            ::std::mem::transmute(abbrevnamebuffer),
            ::std::mem::transmute(abbrevnamebuffersize),
            ::std::mem::transmute(abbrevnamesize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEffectiveProcessorType(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).47)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEffectiveProcessorType(&self, r#type: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).48)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#type)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExecutionStatus(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).49)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetExecutionStatus(&self, status: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).50)(::std::mem::transmute_copy(self), ::std::mem::transmute(status)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCodeLevel(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).51)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetCodeLevel(&self, level: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).52)(::std::mem::transmute_copy(self), ::std::mem::transmute(level)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEngineOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).53)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddEngineOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).54)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveEngineOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).55)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEngineOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).56)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSystemErrorControl(&self, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).57)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputlevel), ::std::mem::transmute(breaklevel)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetSystemErrorControl(&self, outputlevel: u32, breaklevel: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).58)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputlevel), ::std::mem::transmute(breaklevel)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTextMacro(&self, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).59)(::std::mem::transmute_copy(self), ::std::mem::transmute(slot), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(macrosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetTextMacro<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, slot: u32, r#macro: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).60)(::std::mem::transmute_copy(self), ::std::mem::transmute(slot), r#macro.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRadix(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).61)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetRadix(&self, radix: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).62)(::std::mem::transmute_copy(self), ::std::mem::transmute(radix)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Evaluate<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, expression: Param0, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).63)(::std::mem::transmute_copy(self), expression.into_param().abi(), ::std::mem::transmute(desiredtype), ::std::mem::transmute(value), ::std::mem::transmute(remainderindex)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CoerceValue(&self, r#in: *const DEBUG_VALUE, outtype: u32) -> ::windows::runtime::Result<DEBUG_VALUE> {
        let mut result__: <DEBUG_VALUE as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).64)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#in), ::std::mem::transmute(outtype), &mut result__).from_abi::<DEBUG_VALUE>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CoerceValues(&self, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).65)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(r#in), ::std::mem::transmute(outtypes), ::std::mem::transmute(out)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Execute<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, command: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).66)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), command.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ExecuteCommandFile<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, commandfile: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).67)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), commandfile.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberBreakpoints(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).68)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointByIndex(&self, index: u32) -> ::windows::runtime::Result<IDebugBreakpoint> {
        let mut result__: <IDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).69)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), &mut result__).from_abi::<IDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointById(&self, id: u32) -> ::windows::runtime::Result<IDebugBreakpoint> {
        let mut result__: <IDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).70)(::std::mem::transmute_copy(self), ::std::mem::transmute(id), &mut result__).from_abi::<IDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointParameters(&self, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).71)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(ids), ::std::mem::transmute(start), ::std::mem::transmute(params)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddBreakpoint(&self, r#type: u32, desiredid: u32) -> ::windows::runtime::Result<IDebugBreakpoint> {
        let mut result__: <IDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).72)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#type), ::std::mem::transmute(desiredid), &mut result__).from_abi::<IDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveBreakpoint<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugBreakpoint>>(&self, bp: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).73)(::std::mem::transmute_copy(self), bp.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddExtension<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0, flags: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).74)(::std::mem::transmute_copy(self), path.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveExtension(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).75)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExtensionByPath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).76)(::std::mem::transmute_copy(self), path.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CallExtension<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, handle: u64, function: Param1, arguments: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).77)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), function.into_param().abi(), arguments.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExtensionFunction<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, handle: u64, funcname: Param1, function: *mut ::std::option::Option<super::super::super::Foundation::FARPROC>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).78)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), funcname.into_param().abi(), ::std::mem::transmute(function)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
    pub unsafe fn GetWindbgExtensionApis32(&self, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).79)(::std::mem::transmute_copy(self), ::std::mem::transmute(api)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
    pub unsafe fn GetWindbgExtensionApis64(&self, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).80)(::std::mem::transmute_copy(self), ::std::mem::transmute(api)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberEventFilters(&self, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).81)(::std::mem::transmute_copy(self), ::std::mem::transmute(specificevents), ::std::mem::transmute(specificexceptions), ::std::mem::transmute(arbitraryexceptions)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventFilterText(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).82)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(textsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventFilterCommand(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).83)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetEventFilterCommand<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, command: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).84)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), command.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSpecificFilterParameters(&self, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).85)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(params)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetSpecificFilterParameters(&self, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).86)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(params)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSpecificFilterArgument(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).87)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(argumentsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSpecificFilterArgument<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, argument: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).88)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), argument.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExceptionFilterParameters(&self, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).89)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(codes), ::std::mem::transmute(start), ::std::mem::transmute(params)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetExceptionFilterParameters(&self, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).90)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(params)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExceptionFilterSecondCommand(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).91)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetExceptionFilterSecondCommand<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, command: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).92)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), command.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WaitForEvent(&self, flags: u32, timeout: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).93)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(timeout)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLastEventInformation(&self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).94)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(processid),
            ::std::mem::transmute(threadid),
            ::std::mem::transmute(extrainformation),
            ::std::mem::transmute(extrainformationsize),
            ::std::mem::transmute(extrainformationused),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(descriptionused),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentTimeDate(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).95)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentSystemUpTime(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).96)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDumpFormatFlags(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).97)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberTextReplacements(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).98)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTextReplacement<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, srctext: Param0, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).99)(::std::mem::transmute_copy(self), srctext.into_param().abi(), ::std::mem::transmute(index), ::std::mem::transmute(srcbuffer), ::std::mem::transmute(srcbuffersize), ::std::mem::transmute(srcsize), ::std::mem::transmute(dstbuffer), ::std::mem::transmute(dstbuffersize), ::std::mem::transmute(dstsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetTextReplacement<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, srctext: Param0, dsttext: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).100)(::std::mem::transmute_copy(self), srctext.into_param().abi(), dsttext.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveTextReplacements(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).101)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputTextReplacements(&self, outputcontrol: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).102)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugControl2 {
    type Vtable = IDebugControl2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3560335139, 17631, 19437, [140, 126, 76, 5, 66, 79, 69, 136]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugControl2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, seconds: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, seconds: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, class: *mut u32, qualifier: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, size: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, status: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, status: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, level: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, level: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputlevel: u32, breaklevel: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, radix: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, radix: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32, desiredid: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bp: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *mut ::std::mem::ManuallyDrop<WINDBG_EXTENSION_APIS32>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *mut ::std::mem::ManuallyDrop<WINDBG_EXTENSION_APIS64>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, timeout: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, timedate: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, uptime: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, formatflags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, numrepl: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugControl3(::windows::runtime::IUnknown);
impl IDebugControl3 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInterrupt(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetInterrupt(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInterruptTimeout(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetInterruptTimeout(&self, seconds: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(seconds)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLogFile(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(append)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenLogFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(&self, file: Param0, append: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), file.into_param().abi(), append.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CloseLogFile(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetLogMask(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetLogMask(&self, mask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Input(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(inputsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ReturnInput<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, buffer: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), buffer.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Output<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, mask: u32, format: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputVaList<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, mask: u32, format: Param1, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ControlledOutput<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, mask: u32, format: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(mask), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ControlledOutputVaList<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, mask: u32, format: Param2, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(mask), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputPrompt<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, format: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputPromptVaList<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, format: Param1, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetPromptText(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(textsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputCurrentState(&self, outputcontrol: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputVersionInformation(&self, outputcontrol: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNotifyEventHandle(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetNotifyEventHandle(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Assemble<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, offset: u64, instr: Param1) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), instr.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Disassemble(&self, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(flags), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(disassemblysize), ::std::mem::transmute(endoffset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDisassembleEffectiveOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputDisassembly(&self, outputcontrol: u32, offset: u64, flags: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(offset), ::std::mem::transmute(flags), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputDisassemblyLines(&self, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(outputcontrol),
            ::std::mem::transmute(previouslines),
            ::std::mem::transmute(totallines),
            ::std::mem::transmute(offset),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(offsetline),
            ::std::mem::transmute(startoffset),
            ::std::mem::transmute(endoffset),
            ::std::mem::transmute(lineoffsets),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNearInstruction(&self, offset: u64, delta: i32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(delta), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetStackTrace(&self, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), ::std::mem::transmute(frameoffset), ::std::mem::transmute(stackoffset), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(framesfilled)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetReturnOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputStackTrace(&self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDebuggeeType(&self, class: *mut u32, qualifier: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), ::std::mem::transmute(class), ::std::mem::transmute(qualifier)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetActualProcessorType(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExecutingProcessorType(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberPossibleExecutingProcessorTypes(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).37)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetPossibleExecutingProcessorTypes(&self, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(types)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberProcessors(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).39)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSystemVersion(&self, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(platformid),
            ::std::mem::transmute(major),
            ::std::mem::transmute(minor),
            ::std::mem::transmute(servicepackstring),
            ::std::mem::transmute(servicepackstringsize),
            ::std::mem::transmute(servicepackstringused),
            ::std::mem::transmute(servicepacknumber),
            ::std::mem::transmute(buildstring),
            ::std::mem::transmute(buildstringsize),
            ::std::mem::transmute(buildstringused),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetPageSize(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).41)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsPointer64Bit(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadBugCheckData(&self, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::std::mem::transmute_copy(self), ::std::mem::transmute(code), ::std::mem::transmute(arg1), ::std::mem::transmute(arg2), ::std::mem::transmute(arg3), ::std::mem::transmute(arg4)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberSupportedProcessorTypes(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).44)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSupportedProcessorTypes(&self, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).45)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(types)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetProcessorTypeNames(&self, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(fullnamebuffer),
            ::std::mem::transmute(fullnamebuffersize),
            ::std::mem::transmute(fullnamesize),
            ::std::mem::transmute(abbrevnamebuffer),
            ::std::mem::transmute(abbrevnamebuffersize),
            ::std::mem::transmute(abbrevnamesize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEffectiveProcessorType(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).47)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEffectiveProcessorType(&self, r#type: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).48)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#type)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExecutionStatus(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).49)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetExecutionStatus(&self, status: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).50)(::std::mem::transmute_copy(self), ::std::mem::transmute(status)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCodeLevel(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).51)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetCodeLevel(&self, level: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).52)(::std::mem::transmute_copy(self), ::std::mem::transmute(level)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEngineOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).53)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddEngineOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).54)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveEngineOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).55)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEngineOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).56)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSystemErrorControl(&self, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).57)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputlevel), ::std::mem::transmute(breaklevel)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetSystemErrorControl(&self, outputlevel: u32, breaklevel: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).58)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputlevel), ::std::mem::transmute(breaklevel)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTextMacro(&self, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).59)(::std::mem::transmute_copy(self), ::std::mem::transmute(slot), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(macrosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetTextMacro<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, slot: u32, r#macro: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).60)(::std::mem::transmute_copy(self), ::std::mem::transmute(slot), r#macro.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRadix(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).61)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetRadix(&self, radix: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).62)(::std::mem::transmute_copy(self), ::std::mem::transmute(radix)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Evaluate<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, expression: Param0, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).63)(::std::mem::transmute_copy(self), expression.into_param().abi(), ::std::mem::transmute(desiredtype), ::std::mem::transmute(value), ::std::mem::transmute(remainderindex)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CoerceValue(&self, r#in: *const DEBUG_VALUE, outtype: u32) -> ::windows::runtime::Result<DEBUG_VALUE> {
        let mut result__: <DEBUG_VALUE as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).64)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#in), ::std::mem::transmute(outtype), &mut result__).from_abi::<DEBUG_VALUE>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CoerceValues(&self, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).65)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(r#in), ::std::mem::transmute(outtypes), ::std::mem::transmute(out)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Execute<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, command: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).66)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), command.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ExecuteCommandFile<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, commandfile: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).67)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), commandfile.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberBreakpoints(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).68)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointByIndex(&self, index: u32) -> ::windows::runtime::Result<IDebugBreakpoint> {
        let mut result__: <IDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).69)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), &mut result__).from_abi::<IDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointById(&self, id: u32) -> ::windows::runtime::Result<IDebugBreakpoint> {
        let mut result__: <IDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).70)(::std::mem::transmute_copy(self), ::std::mem::transmute(id), &mut result__).from_abi::<IDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointParameters(&self, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).71)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(ids), ::std::mem::transmute(start), ::std::mem::transmute(params)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddBreakpoint(&self, r#type: u32, desiredid: u32) -> ::windows::runtime::Result<IDebugBreakpoint> {
        let mut result__: <IDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).72)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#type), ::std::mem::transmute(desiredid), &mut result__).from_abi::<IDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveBreakpoint<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugBreakpoint>>(&self, bp: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).73)(::std::mem::transmute_copy(self), bp.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddExtension<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0, flags: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).74)(::std::mem::transmute_copy(self), path.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveExtension(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).75)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExtensionByPath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).76)(::std::mem::transmute_copy(self), path.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CallExtension<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, handle: u64, function: Param1, arguments: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).77)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), function.into_param().abi(), arguments.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExtensionFunction<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, handle: u64, funcname: Param1, function: *mut ::std::option::Option<super::super::super::Foundation::FARPROC>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).78)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), funcname.into_param().abi(), ::std::mem::transmute(function)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
    pub unsafe fn GetWindbgExtensionApis32(&self, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).79)(::std::mem::transmute_copy(self), ::std::mem::transmute(api)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
    pub unsafe fn GetWindbgExtensionApis64(&self, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).80)(::std::mem::transmute_copy(self), ::std::mem::transmute(api)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberEventFilters(&self, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).81)(::std::mem::transmute_copy(self), ::std::mem::transmute(specificevents), ::std::mem::transmute(specificexceptions), ::std::mem::transmute(arbitraryexceptions)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventFilterText(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).82)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(textsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventFilterCommand(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).83)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetEventFilterCommand<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, command: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).84)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), command.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSpecificFilterParameters(&self, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).85)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(params)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetSpecificFilterParameters(&self, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).86)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(params)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSpecificFilterArgument(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).87)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(argumentsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSpecificFilterArgument<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, argument: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).88)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), argument.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExceptionFilterParameters(&self, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).89)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(codes), ::std::mem::transmute(start), ::std::mem::transmute(params)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetExceptionFilterParameters(&self, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).90)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(params)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExceptionFilterSecondCommand(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).91)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetExceptionFilterSecondCommand<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, command: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).92)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), command.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WaitForEvent(&self, flags: u32, timeout: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).93)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(timeout)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLastEventInformation(&self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).94)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(processid),
            ::std::mem::transmute(threadid),
            ::std::mem::transmute(extrainformation),
            ::std::mem::transmute(extrainformationsize),
            ::std::mem::transmute(extrainformationused),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(descriptionused),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentTimeDate(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).95)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentSystemUpTime(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).96)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDumpFormatFlags(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).97)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberTextReplacements(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).98)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTextReplacement<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, srctext: Param0, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).99)(::std::mem::transmute_copy(self), srctext.into_param().abi(), ::std::mem::transmute(index), ::std::mem::transmute(srcbuffer), ::std::mem::transmute(srcbuffersize), ::std::mem::transmute(srcsize), ::std::mem::transmute(dstbuffer), ::std::mem::transmute(dstbuffersize), ::std::mem::transmute(dstsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetTextReplacement<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, srctext: Param0, dsttext: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).100)(::std::mem::transmute_copy(self), srctext.into_param().abi(), dsttext.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveTextReplacements(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).101)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputTextReplacements(&self, outputcontrol: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).102)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetAssemblyOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).103)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddAssemblyOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).104)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveAssemblyOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).105)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetAssemblyOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).106)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExpressionSyntax(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).107)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetExpressionSyntax(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).108)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetExpressionSyntaxByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, abbrevname: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).109)(::std::mem::transmute_copy(self), abbrevname.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberExpressionSyntaxes(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).110)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExpressionSyntaxNames(&self, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).111)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(index),
            ::std::mem::transmute(fullnamebuffer),
            ::std::mem::transmute(fullnamebuffersize),
            ::std::mem::transmute(fullnamesize),
            ::std::mem::transmute(abbrevnamebuffer),
            ::std::mem::transmute(abbrevnamebuffersize),
            ::std::mem::transmute(abbrevnamesize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberEvents(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).112)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventIndexDescription<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, which: u32, buffer: Param2, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).113)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(which), buffer.into_param().abi(), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentEventIndex(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).114)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetNextEventIndex(&self, relation: u32, value: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).115)(::std::mem::transmute_copy(self), ::std::mem::transmute(relation), ::std::mem::transmute(value), &mut result__).from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugControl3 {
    type Vtable = IDebugControl3_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2113358470, 45119, 16511, [144, 171, 162, 13, 173, 206, 173, 8]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugControl3_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, seconds: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, seconds: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, class: *mut u32, qualifier: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, size: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, status: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, status: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, level: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, level: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputlevel: u32, breaklevel: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, radix: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, radix: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32, desiredid: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bp: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *mut ::std::mem::ManuallyDrop<WINDBG_EXTENSION_APIS32>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *mut ::std::mem::ManuallyDrop<WINDBG_EXTENSION_APIS64>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, timeout: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, timedate: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, uptime: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, formatflags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, numrepl: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, events: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, descsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, relation: u32, value: u32, nextindex: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugControl4(::windows::runtime::IUnknown);
impl IDebugControl4 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInterrupt(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetInterrupt(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInterruptTimeout(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetInterruptTimeout(&self, seconds: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(seconds)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLogFile(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(append)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenLogFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(&self, file: Param0, append: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), file.into_param().abi(), append.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CloseLogFile(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetLogMask(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetLogMask(&self, mask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Input(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(inputsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ReturnInput<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, buffer: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), buffer.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Output<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, mask: u32, format: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputVaList<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, mask: u32, format: Param1, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ControlledOutput<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, mask: u32, format: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(mask), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ControlledOutputVaList<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, mask: u32, format: Param2, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(mask), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputPrompt<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, format: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputPromptVaList<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, format: Param1, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetPromptText(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(textsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputCurrentState(&self, outputcontrol: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputVersionInformation(&self, outputcontrol: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNotifyEventHandle(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetNotifyEventHandle(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Assemble<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, offset: u64, instr: Param1) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), instr.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Disassemble(&self, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(flags), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(disassemblysize), ::std::mem::transmute(endoffset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDisassembleEffectiveOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputDisassembly(&self, outputcontrol: u32, offset: u64, flags: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(offset), ::std::mem::transmute(flags), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputDisassemblyLines(&self, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(outputcontrol),
            ::std::mem::transmute(previouslines),
            ::std::mem::transmute(totallines),
            ::std::mem::transmute(offset),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(offsetline),
            ::std::mem::transmute(startoffset),
            ::std::mem::transmute(endoffset),
            ::std::mem::transmute(lineoffsets),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNearInstruction(&self, offset: u64, delta: i32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(delta), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetStackTrace(&self, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), ::std::mem::transmute(frameoffset), ::std::mem::transmute(stackoffset), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(framesfilled)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetReturnOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputStackTrace(&self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDebuggeeType(&self, class: *mut u32, qualifier: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), ::std::mem::transmute(class), ::std::mem::transmute(qualifier)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetActualProcessorType(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExecutingProcessorType(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberPossibleExecutingProcessorTypes(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).37)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetPossibleExecutingProcessorTypes(&self, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(types)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberProcessors(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).39)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSystemVersion(&self, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(platformid),
            ::std::mem::transmute(major),
            ::std::mem::transmute(minor),
            ::std::mem::transmute(servicepackstring),
            ::std::mem::transmute(servicepackstringsize),
            ::std::mem::transmute(servicepackstringused),
            ::std::mem::transmute(servicepacknumber),
            ::std::mem::transmute(buildstring),
            ::std::mem::transmute(buildstringsize),
            ::std::mem::transmute(buildstringused),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetPageSize(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).41)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsPointer64Bit(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadBugCheckData(&self, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::std::mem::transmute_copy(self), ::std::mem::transmute(code), ::std::mem::transmute(arg1), ::std::mem::transmute(arg2), ::std::mem::transmute(arg3), ::std::mem::transmute(arg4)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberSupportedProcessorTypes(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).44)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSupportedProcessorTypes(&self, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).45)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(types)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetProcessorTypeNames(&self, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(fullnamebuffer),
            ::std::mem::transmute(fullnamebuffersize),
            ::std::mem::transmute(fullnamesize),
            ::std::mem::transmute(abbrevnamebuffer),
            ::std::mem::transmute(abbrevnamebuffersize),
            ::std::mem::transmute(abbrevnamesize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEffectiveProcessorType(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).47)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEffectiveProcessorType(&self, r#type: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).48)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#type)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExecutionStatus(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).49)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetExecutionStatus(&self, status: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).50)(::std::mem::transmute_copy(self), ::std::mem::transmute(status)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCodeLevel(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).51)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetCodeLevel(&self, level: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).52)(::std::mem::transmute_copy(self), ::std::mem::transmute(level)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEngineOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).53)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddEngineOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).54)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveEngineOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).55)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEngineOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).56)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSystemErrorControl(&self, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).57)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputlevel), ::std::mem::transmute(breaklevel)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetSystemErrorControl(&self, outputlevel: u32, breaklevel: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).58)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputlevel), ::std::mem::transmute(breaklevel)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTextMacro(&self, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).59)(::std::mem::transmute_copy(self), ::std::mem::transmute(slot), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(macrosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetTextMacro<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, slot: u32, r#macro: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).60)(::std::mem::transmute_copy(self), ::std::mem::transmute(slot), r#macro.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRadix(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).61)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetRadix(&self, radix: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).62)(::std::mem::transmute_copy(self), ::std::mem::transmute(radix)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Evaluate<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, expression: Param0, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).63)(::std::mem::transmute_copy(self), expression.into_param().abi(), ::std::mem::transmute(desiredtype), ::std::mem::transmute(value), ::std::mem::transmute(remainderindex)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CoerceValue(&self, r#in: *const DEBUG_VALUE, outtype: u32) -> ::windows::runtime::Result<DEBUG_VALUE> {
        let mut result__: <DEBUG_VALUE as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).64)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#in), ::std::mem::transmute(outtype), &mut result__).from_abi::<DEBUG_VALUE>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CoerceValues(&self, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).65)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(r#in), ::std::mem::transmute(outtypes), ::std::mem::transmute(out)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Execute<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, command: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).66)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), command.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ExecuteCommandFile<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, commandfile: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).67)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), commandfile.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberBreakpoints(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).68)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointByIndex(&self, index: u32) -> ::windows::runtime::Result<IDebugBreakpoint> {
        let mut result__: <IDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).69)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), &mut result__).from_abi::<IDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointById(&self, id: u32) -> ::windows::runtime::Result<IDebugBreakpoint> {
        let mut result__: <IDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).70)(::std::mem::transmute_copy(self), ::std::mem::transmute(id), &mut result__).from_abi::<IDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointParameters(&self, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).71)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(ids), ::std::mem::transmute(start), ::std::mem::transmute(params)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddBreakpoint(&self, r#type: u32, desiredid: u32) -> ::windows::runtime::Result<IDebugBreakpoint> {
        let mut result__: <IDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).72)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#type), ::std::mem::transmute(desiredid), &mut result__).from_abi::<IDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveBreakpoint<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugBreakpoint>>(&self, bp: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).73)(::std::mem::transmute_copy(self), bp.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddExtension<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0, flags: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).74)(::std::mem::transmute_copy(self), path.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveExtension(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).75)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExtensionByPath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).76)(::std::mem::transmute_copy(self), path.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CallExtension<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, handle: u64, function: Param1, arguments: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).77)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), function.into_param().abi(), arguments.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExtensionFunction<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, handle: u64, funcname: Param1, function: *mut ::std::option::Option<super::super::super::Foundation::FARPROC>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).78)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), funcname.into_param().abi(), ::std::mem::transmute(function)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
    pub unsafe fn GetWindbgExtensionApis32(&self, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).79)(::std::mem::transmute_copy(self), ::std::mem::transmute(api)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
    pub unsafe fn GetWindbgExtensionApis64(&self, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).80)(::std::mem::transmute_copy(self), ::std::mem::transmute(api)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberEventFilters(&self, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).81)(::std::mem::transmute_copy(self), ::std::mem::transmute(specificevents), ::std::mem::transmute(specificexceptions), ::std::mem::transmute(arbitraryexceptions)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventFilterText(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).82)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(textsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventFilterCommand(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).83)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetEventFilterCommand<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, command: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).84)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), command.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSpecificFilterParameters(&self, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).85)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(params)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetSpecificFilterParameters(&self, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).86)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(params)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSpecificFilterArgument(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).87)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(argumentsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSpecificFilterArgument<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, argument: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).88)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), argument.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExceptionFilterParameters(&self, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).89)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(codes), ::std::mem::transmute(start), ::std::mem::transmute(params)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetExceptionFilterParameters(&self, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).90)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(params)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExceptionFilterSecondCommand(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).91)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetExceptionFilterSecondCommand<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, command: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).92)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), command.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WaitForEvent(&self, flags: u32, timeout: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).93)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(timeout)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLastEventInformation(&self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).94)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(processid),
            ::std::mem::transmute(threadid),
            ::std::mem::transmute(extrainformation),
            ::std::mem::transmute(extrainformationsize),
            ::std::mem::transmute(extrainformationused),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(descriptionused),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentTimeDate(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).95)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentSystemUpTime(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).96)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDumpFormatFlags(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).97)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberTextReplacements(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).98)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTextReplacement<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, srctext: Param0, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).99)(::std::mem::transmute_copy(self), srctext.into_param().abi(), ::std::mem::transmute(index), ::std::mem::transmute(srcbuffer), ::std::mem::transmute(srcbuffersize), ::std::mem::transmute(srcsize), ::std::mem::transmute(dstbuffer), ::std::mem::transmute(dstbuffersize), ::std::mem::transmute(dstsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetTextReplacement<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, srctext: Param0, dsttext: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).100)(::std::mem::transmute_copy(self), srctext.into_param().abi(), dsttext.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveTextReplacements(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).101)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputTextReplacements(&self, outputcontrol: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).102)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetAssemblyOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).103)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddAssemblyOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).104)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveAssemblyOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).105)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetAssemblyOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).106)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExpressionSyntax(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).107)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetExpressionSyntax(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).108)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetExpressionSyntaxByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, abbrevname: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).109)(::std::mem::transmute_copy(self), abbrevname.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberExpressionSyntaxes(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).110)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExpressionSyntaxNames(&self, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).111)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(index),
            ::std::mem::transmute(fullnamebuffer),
            ::std::mem::transmute(fullnamebuffersize),
            ::std::mem::transmute(fullnamesize),
            ::std::mem::transmute(abbrevnamebuffer),
            ::std::mem::transmute(abbrevnamebuffersize),
            ::std::mem::transmute(abbrevnamesize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberEvents(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).112)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventIndexDescription<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, which: u32, buffer: Param2, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).113)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(which), buffer.into_param().abi(), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentEventIndex(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).114)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetNextEventIndex(&self, relation: u32, value: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).115)(::std::mem::transmute_copy(self), ::std::mem::transmute(relation), ::std::mem::transmute(value), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLogFileWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).116)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(append)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenLogFileWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(&self, file: Param0, append: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).117)(::std::mem::transmute_copy(self), file.into_param().abi(), append.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn InputWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).118)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(inputsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ReturnInputWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, buffer: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).119)(::std::mem::transmute_copy(self), buffer.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, mask: u32, format: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).120)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputVaListWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, mask: u32, format: Param1, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).121)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ControlledOutputWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, mask: u32, format: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).122)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(mask), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ControlledOutputVaListWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, mask: u32, format: Param2, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).123)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(mask), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputPromptWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, format: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).124)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputPromptVaListWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, format: Param1, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).125)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetPromptTextWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).126)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(textsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AssembleWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, offset: u64, instr: Param1) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).127)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), instr.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn DisassembleWide(&self, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).128)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(flags), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(disassemblysize), ::std::mem::transmute(endoffset)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetProcessorTypeNamesWide(&self, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).129)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(fullnamebuffer),
            ::std::mem::transmute(fullnamebuffersize),
            ::std::mem::transmute(fullnamesize),
            ::std::mem::transmute(abbrevnamebuffer),
            ::std::mem::transmute(abbrevnamebuffersize),
            ::std::mem::transmute(abbrevnamesize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTextMacroWide(&self, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).130)(::std::mem::transmute_copy(self), ::std::mem::transmute(slot), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(macrosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetTextMacroWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, slot: u32, r#macro: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).131)(::std::mem::transmute_copy(self), ::std::mem::transmute(slot), r#macro.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn EvaluateWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, expression: Param0, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).132)(::std::mem::transmute_copy(self), expression.into_param().abi(), ::std::mem::transmute(desiredtype), ::std::mem::transmute(value), ::std::mem::transmute(remainderindex)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ExecuteWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, command: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).133)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), command.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ExecuteCommandFileWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, commandfile: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).134)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), commandfile.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointByIndex2(&self, index: u32) -> ::windows::runtime::Result<IDebugBreakpoint2> {
        let mut result__: <IDebugBreakpoint2 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).135)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), &mut result__).from_abi::<IDebugBreakpoint2>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointById2(&self, id: u32) -> ::windows::runtime::Result<IDebugBreakpoint2> {
        let mut result__: <IDebugBreakpoint2 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).136)(::std::mem::transmute_copy(self), ::std::mem::transmute(id), &mut result__).from_abi::<IDebugBreakpoint2>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddBreakpoint2(&self, r#type: u32, desiredid: u32) -> ::windows::runtime::Result<IDebugBreakpoint2> {
        let mut result__: <IDebugBreakpoint2 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).137)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#type), ::std::mem::transmute(desiredid), &mut result__).from_abi::<IDebugBreakpoint2>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveBreakpoint2<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugBreakpoint2>>(&self, bp: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).138)(::std::mem::transmute_copy(self), bp.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddExtensionWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, path: Param0, flags: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).139)(::std::mem::transmute_copy(self), path.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExtensionByPathWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, path: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).140)(::std::mem::transmute_copy(self), path.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CallExtensionWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, handle: u64, function: Param1, arguments: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).141)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), function.into_param().abi(), arguments.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExtensionFunctionWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, handle: u64, funcname: Param1, function: *mut ::std::option::Option<super::super::super::Foundation::FARPROC>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).142)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), funcname.into_param().abi(), ::std::mem::transmute(function)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventFilterTextWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).143)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(textsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventFilterCommandWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).144)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetEventFilterCommandWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, index: u32, command: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).145)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), command.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSpecificFilterArgumentWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).146)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(argumentsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSpecificFilterArgumentWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, index: u32, argument: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).147)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), argument.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExceptionFilterSecondCommandWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).148)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetExceptionFilterSecondCommandWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, index: u32, command: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).149)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), command.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLastEventInformationWide(&self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).150)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(processid),
            ::std::mem::transmute(threadid),
            ::std::mem::transmute(extrainformation),
            ::std::mem::transmute(extrainformationsize),
            ::std::mem::transmute(extrainformationused),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(descriptionused),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTextReplacementWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, srctext: Param0, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).151)(::std::mem::transmute_copy(self), srctext.into_param().abi(), ::std::mem::transmute(index), ::std::mem::transmute(srcbuffer), ::std::mem::transmute(srcbuffersize), ::std::mem::transmute(srcsize), ::std::mem::transmute(dstbuffer), ::std::mem::transmute(dstbuffersize), ::std::mem::transmute(dstsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetTextReplacementWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, srctext: Param0, dsttext: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).152)(::std::mem::transmute_copy(self), srctext.into_param().abi(), dsttext.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetExpressionSyntaxByNameWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, abbrevname: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).153)(::std::mem::transmute_copy(self), abbrevname.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExpressionSyntaxNamesWide(&self, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).154)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(index),
            ::std::mem::transmute(fullnamebuffer),
            ::std::mem::transmute(fullnamebuffersize),
            ::std::mem::transmute(fullnamesize),
            ::std::mem::transmute(abbrevnamebuffer),
            ::std::mem::transmute(abbrevnamebuffersize),
            ::std::mem::transmute(abbrevnamesize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventIndexDescriptionWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, index: u32, which: u32, buffer: Param2, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).155)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(which), buffer.into_param().abi(), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLogFile2(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).156)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenLogFile2<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, file: Param0, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).157)(::std::mem::transmute_copy(self), file.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLogFile2Wide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).158)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenLogFile2Wide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, file: Param0, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).159)(::std::mem::transmute_copy(self), file.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSystemVersionValues(&self, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).160)(::std::mem::transmute_copy(self), ::std::mem::transmute(platformid), ::std::mem::transmute(win32major), ::std::mem::transmute(win32minor), ::std::mem::transmute(kdmajor), ::std::mem::transmute(kdminor)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSystemVersionString(&self, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).161)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSystemVersionStringWide(&self, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).162)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetContextStackTrace(&self, startcontext: *const ::std::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).163)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(startcontext),
            ::std::mem::transmute(startcontextsize),
            ::std::mem::transmute(frames),
            ::std::mem::transmute(framessize),
            ::std::mem::transmute(framecontexts),
            ::std::mem::transmute(framecontextssize),
            ::std::mem::transmute(framecontextsentrysize),
            ::std::mem::transmute(framesfilled),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputContextStackTrace(&self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).164)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(framecontexts), ::std::mem::transmute(framecontextssize), ::std::mem::transmute(framecontextsentrysize), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetStoredEventInformation(&self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::std::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).165)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(processid),
            ::std::mem::transmute(threadid),
            ::std::mem::transmute(context),
            ::std::mem::transmute(contextsize),
            ::std::mem::transmute(contextused),
            ::std::mem::transmute(extrainformation),
            ::std::mem::transmute(extrainformationsize),
            ::std::mem::transmute(extrainformationused),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetManagedStatus(&self, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).166)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(whichstring), ::std::mem::transmute(string), ::std::mem::transmute(stringsize), ::std::mem::transmute(stringneeded)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetManagedStatusWide(&self, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).167)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(whichstring), ::std::mem::transmute(string), ::std::mem::transmute(stringsize), ::std::mem::transmute(stringneeded)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ResetManagedStatus(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).168)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugControl4 {
    type Vtable = IDebugControl4_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2498104553, 39745, 19225, [159, 192, 109, 158, 179, 82, 114, 179]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugControl4_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, seconds: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, seconds: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, class: *mut u32, qualifier: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, size: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, status: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, status: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, level: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, level: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputlevel: u32, breaklevel: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, radix: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, radix: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32, desiredid: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bp: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *mut ::std::mem::ManuallyDrop<WINDBG_EXTENSION_APIS32>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *mut ::std::mem::ManuallyDrop<WINDBG_EXTENSION_APIS64>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, timeout: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, timedate: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, uptime: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, formatflags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, numrepl: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, events: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, descsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, relation: u32, value: u32, nextindex: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PWSTR, append: super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, instr: super::super::super::Foundation::PWSTR, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, slot: u32, r#macro: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, expression: super::super::super::Foundation::PWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, command: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, commandfile: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32, desiredid: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bp: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PWSTR, flags: u32, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, function: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, funcname: super::super::super::Foundation::PWSTR, function: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, argument: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, srctext: super::super::super::Foundation::PWSTR, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, srctext: super::super::super::Foundation::PWSTR, dsttext: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, abbrevname: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, descsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, startcontext: *const ::std::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::std::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugControl5(::windows::runtime::IUnknown);
impl IDebugControl5 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInterrupt(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetInterrupt(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInterruptTimeout(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetInterruptTimeout(&self, seconds: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(seconds)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLogFile(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(append)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenLogFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(&self, file: Param0, append: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), file.into_param().abi(), append.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CloseLogFile(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetLogMask(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetLogMask(&self, mask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Input(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(inputsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ReturnInput<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, buffer: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), buffer.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Output<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, mask: u32, format: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputVaList<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, mask: u32, format: Param1, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ControlledOutput<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, mask: u32, format: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(mask), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ControlledOutputVaList<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, mask: u32, format: Param2, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(mask), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputPrompt<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, format: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputPromptVaList<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, format: Param1, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetPromptText(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(textsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputCurrentState(&self, outputcontrol: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputVersionInformation(&self, outputcontrol: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNotifyEventHandle(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetNotifyEventHandle(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Assemble<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, offset: u64, instr: Param1) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), instr.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Disassemble(&self, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(flags), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(disassemblysize), ::std::mem::transmute(endoffset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDisassembleEffectiveOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputDisassembly(&self, outputcontrol: u32, offset: u64, flags: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(offset), ::std::mem::transmute(flags), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputDisassemblyLines(&self, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(outputcontrol),
            ::std::mem::transmute(previouslines),
            ::std::mem::transmute(totallines),
            ::std::mem::transmute(offset),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(offsetline),
            ::std::mem::transmute(startoffset),
            ::std::mem::transmute(endoffset),
            ::std::mem::transmute(lineoffsets),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNearInstruction(&self, offset: u64, delta: i32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(delta), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetStackTrace(&self, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), ::std::mem::transmute(frameoffset), ::std::mem::transmute(stackoffset), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(framesfilled)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetReturnOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputStackTrace(&self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDebuggeeType(&self, class: *mut u32, qualifier: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), ::std::mem::transmute(class), ::std::mem::transmute(qualifier)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetActualProcessorType(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExecutingProcessorType(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberPossibleExecutingProcessorTypes(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).37)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetPossibleExecutingProcessorTypes(&self, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(types)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberProcessors(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).39)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSystemVersion(&self, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(platformid),
            ::std::mem::transmute(major),
            ::std::mem::transmute(minor),
            ::std::mem::transmute(servicepackstring),
            ::std::mem::transmute(servicepackstringsize),
            ::std::mem::transmute(servicepackstringused),
            ::std::mem::transmute(servicepacknumber),
            ::std::mem::transmute(buildstring),
            ::std::mem::transmute(buildstringsize),
            ::std::mem::transmute(buildstringused),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetPageSize(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).41)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsPointer64Bit(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadBugCheckData(&self, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::std::mem::transmute_copy(self), ::std::mem::transmute(code), ::std::mem::transmute(arg1), ::std::mem::transmute(arg2), ::std::mem::transmute(arg3), ::std::mem::transmute(arg4)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberSupportedProcessorTypes(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).44)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSupportedProcessorTypes(&self, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).45)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(types)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetProcessorTypeNames(&self, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(fullnamebuffer),
            ::std::mem::transmute(fullnamebuffersize),
            ::std::mem::transmute(fullnamesize),
            ::std::mem::transmute(abbrevnamebuffer),
            ::std::mem::transmute(abbrevnamebuffersize),
            ::std::mem::transmute(abbrevnamesize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEffectiveProcessorType(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).47)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEffectiveProcessorType(&self, r#type: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).48)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#type)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExecutionStatus(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).49)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetExecutionStatus(&self, status: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).50)(::std::mem::transmute_copy(self), ::std::mem::transmute(status)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCodeLevel(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).51)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetCodeLevel(&self, level: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).52)(::std::mem::transmute_copy(self), ::std::mem::transmute(level)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEngineOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).53)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddEngineOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).54)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveEngineOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).55)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEngineOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).56)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSystemErrorControl(&self, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).57)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputlevel), ::std::mem::transmute(breaklevel)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetSystemErrorControl(&self, outputlevel: u32, breaklevel: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).58)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputlevel), ::std::mem::transmute(breaklevel)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTextMacro(&self, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).59)(::std::mem::transmute_copy(self), ::std::mem::transmute(slot), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(macrosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetTextMacro<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, slot: u32, r#macro: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).60)(::std::mem::transmute_copy(self), ::std::mem::transmute(slot), r#macro.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRadix(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).61)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetRadix(&self, radix: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).62)(::std::mem::transmute_copy(self), ::std::mem::transmute(radix)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Evaluate<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, expression: Param0, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).63)(::std::mem::transmute_copy(self), expression.into_param().abi(), ::std::mem::transmute(desiredtype), ::std::mem::transmute(value), ::std::mem::transmute(remainderindex)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CoerceValue(&self, r#in: *const DEBUG_VALUE, outtype: u32) -> ::windows::runtime::Result<DEBUG_VALUE> {
        let mut result__: <DEBUG_VALUE as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).64)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#in), ::std::mem::transmute(outtype), &mut result__).from_abi::<DEBUG_VALUE>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CoerceValues(&self, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).65)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(r#in), ::std::mem::transmute(outtypes), ::std::mem::transmute(out)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Execute<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, command: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).66)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), command.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ExecuteCommandFile<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, commandfile: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).67)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), commandfile.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberBreakpoints(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).68)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointByIndex(&self, index: u32) -> ::windows::runtime::Result<IDebugBreakpoint> {
        let mut result__: <IDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).69)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), &mut result__).from_abi::<IDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointById(&self, id: u32) -> ::windows::runtime::Result<IDebugBreakpoint> {
        let mut result__: <IDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).70)(::std::mem::transmute_copy(self), ::std::mem::transmute(id), &mut result__).from_abi::<IDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointParameters(&self, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).71)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(ids), ::std::mem::transmute(start), ::std::mem::transmute(params)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddBreakpoint(&self, r#type: u32, desiredid: u32) -> ::windows::runtime::Result<IDebugBreakpoint> {
        let mut result__: <IDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).72)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#type), ::std::mem::transmute(desiredid), &mut result__).from_abi::<IDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveBreakpoint<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugBreakpoint>>(&self, bp: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).73)(::std::mem::transmute_copy(self), bp.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddExtension<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0, flags: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).74)(::std::mem::transmute_copy(self), path.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveExtension(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).75)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExtensionByPath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).76)(::std::mem::transmute_copy(self), path.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CallExtension<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, handle: u64, function: Param1, arguments: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).77)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), function.into_param().abi(), arguments.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExtensionFunction<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, handle: u64, funcname: Param1, function: *mut ::std::option::Option<super::super::super::Foundation::FARPROC>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).78)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), funcname.into_param().abi(), ::std::mem::transmute(function)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
    pub unsafe fn GetWindbgExtensionApis32(&self, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).79)(::std::mem::transmute_copy(self), ::std::mem::transmute(api)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
    pub unsafe fn GetWindbgExtensionApis64(&self, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).80)(::std::mem::transmute_copy(self), ::std::mem::transmute(api)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberEventFilters(&self, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).81)(::std::mem::transmute_copy(self), ::std::mem::transmute(specificevents), ::std::mem::transmute(specificexceptions), ::std::mem::transmute(arbitraryexceptions)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventFilterText(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).82)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(textsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventFilterCommand(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).83)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetEventFilterCommand<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, command: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).84)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), command.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSpecificFilterParameters(&self, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).85)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(params)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetSpecificFilterParameters(&self, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).86)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(params)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSpecificFilterArgument(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).87)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(argumentsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSpecificFilterArgument<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, argument: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).88)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), argument.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExceptionFilterParameters(&self, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).89)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(codes), ::std::mem::transmute(start), ::std::mem::transmute(params)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetExceptionFilterParameters(&self, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).90)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(params)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExceptionFilterSecondCommand(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).91)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetExceptionFilterSecondCommand<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, command: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).92)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), command.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WaitForEvent(&self, flags: u32, timeout: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).93)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(timeout)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLastEventInformation(&self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).94)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(processid),
            ::std::mem::transmute(threadid),
            ::std::mem::transmute(extrainformation),
            ::std::mem::transmute(extrainformationsize),
            ::std::mem::transmute(extrainformationused),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(descriptionused),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentTimeDate(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).95)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentSystemUpTime(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).96)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDumpFormatFlags(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).97)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberTextReplacements(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).98)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTextReplacement<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, srctext: Param0, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).99)(::std::mem::transmute_copy(self), srctext.into_param().abi(), ::std::mem::transmute(index), ::std::mem::transmute(srcbuffer), ::std::mem::transmute(srcbuffersize), ::std::mem::transmute(srcsize), ::std::mem::transmute(dstbuffer), ::std::mem::transmute(dstbuffersize), ::std::mem::transmute(dstsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetTextReplacement<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, srctext: Param0, dsttext: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).100)(::std::mem::transmute_copy(self), srctext.into_param().abi(), dsttext.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveTextReplacements(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).101)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputTextReplacements(&self, outputcontrol: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).102)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetAssemblyOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).103)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddAssemblyOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).104)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveAssemblyOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).105)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetAssemblyOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).106)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExpressionSyntax(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).107)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetExpressionSyntax(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).108)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetExpressionSyntaxByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, abbrevname: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).109)(::std::mem::transmute_copy(self), abbrevname.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberExpressionSyntaxes(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).110)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExpressionSyntaxNames(&self, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).111)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(index),
            ::std::mem::transmute(fullnamebuffer),
            ::std::mem::transmute(fullnamebuffersize),
            ::std::mem::transmute(fullnamesize),
            ::std::mem::transmute(abbrevnamebuffer),
            ::std::mem::transmute(abbrevnamebuffersize),
            ::std::mem::transmute(abbrevnamesize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberEvents(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).112)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventIndexDescription<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, which: u32, buffer: Param2, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).113)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(which), buffer.into_param().abi(), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentEventIndex(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).114)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetNextEventIndex(&self, relation: u32, value: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).115)(::std::mem::transmute_copy(self), ::std::mem::transmute(relation), ::std::mem::transmute(value), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLogFileWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).116)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(append)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenLogFileWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(&self, file: Param0, append: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).117)(::std::mem::transmute_copy(self), file.into_param().abi(), append.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn InputWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).118)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(inputsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ReturnInputWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, buffer: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).119)(::std::mem::transmute_copy(self), buffer.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, mask: u32, format: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).120)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputVaListWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, mask: u32, format: Param1, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).121)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ControlledOutputWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, mask: u32, format: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).122)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(mask), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ControlledOutputVaListWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, mask: u32, format: Param2, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).123)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(mask), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputPromptWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, format: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).124)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputPromptVaListWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, format: Param1, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).125)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetPromptTextWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).126)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(textsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AssembleWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, offset: u64, instr: Param1) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).127)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), instr.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn DisassembleWide(&self, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).128)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(flags), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(disassemblysize), ::std::mem::transmute(endoffset)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetProcessorTypeNamesWide(&self, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).129)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(fullnamebuffer),
            ::std::mem::transmute(fullnamebuffersize),
            ::std::mem::transmute(fullnamesize),
            ::std::mem::transmute(abbrevnamebuffer),
            ::std::mem::transmute(abbrevnamebuffersize),
            ::std::mem::transmute(abbrevnamesize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTextMacroWide(&self, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).130)(::std::mem::transmute_copy(self), ::std::mem::transmute(slot), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(macrosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetTextMacroWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, slot: u32, r#macro: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).131)(::std::mem::transmute_copy(self), ::std::mem::transmute(slot), r#macro.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn EvaluateWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, expression: Param0, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).132)(::std::mem::transmute_copy(self), expression.into_param().abi(), ::std::mem::transmute(desiredtype), ::std::mem::transmute(value), ::std::mem::transmute(remainderindex)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ExecuteWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, command: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).133)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), command.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ExecuteCommandFileWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, commandfile: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).134)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), commandfile.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointByIndex2(&self, index: u32) -> ::windows::runtime::Result<IDebugBreakpoint2> {
        let mut result__: <IDebugBreakpoint2 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).135)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), &mut result__).from_abi::<IDebugBreakpoint2>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointById2(&self, id: u32) -> ::windows::runtime::Result<IDebugBreakpoint2> {
        let mut result__: <IDebugBreakpoint2 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).136)(::std::mem::transmute_copy(self), ::std::mem::transmute(id), &mut result__).from_abi::<IDebugBreakpoint2>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddBreakpoint2(&self, r#type: u32, desiredid: u32) -> ::windows::runtime::Result<IDebugBreakpoint2> {
        let mut result__: <IDebugBreakpoint2 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).137)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#type), ::std::mem::transmute(desiredid), &mut result__).from_abi::<IDebugBreakpoint2>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveBreakpoint2<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugBreakpoint2>>(&self, bp: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).138)(::std::mem::transmute_copy(self), bp.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddExtensionWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, path: Param0, flags: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).139)(::std::mem::transmute_copy(self), path.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExtensionByPathWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, path: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).140)(::std::mem::transmute_copy(self), path.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CallExtensionWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, handle: u64, function: Param1, arguments: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).141)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), function.into_param().abi(), arguments.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExtensionFunctionWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, handle: u64, funcname: Param1, function: *mut ::std::option::Option<super::super::super::Foundation::FARPROC>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).142)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), funcname.into_param().abi(), ::std::mem::transmute(function)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventFilterTextWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).143)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(textsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventFilterCommandWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).144)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetEventFilterCommandWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, index: u32, command: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).145)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), command.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSpecificFilterArgumentWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).146)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(argumentsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSpecificFilterArgumentWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, index: u32, argument: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).147)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), argument.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExceptionFilterSecondCommandWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).148)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetExceptionFilterSecondCommandWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, index: u32, command: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).149)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), command.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLastEventInformationWide(&self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).150)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(processid),
            ::std::mem::transmute(threadid),
            ::std::mem::transmute(extrainformation),
            ::std::mem::transmute(extrainformationsize),
            ::std::mem::transmute(extrainformationused),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(descriptionused),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTextReplacementWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, srctext: Param0, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).151)(::std::mem::transmute_copy(self), srctext.into_param().abi(), ::std::mem::transmute(index), ::std::mem::transmute(srcbuffer), ::std::mem::transmute(srcbuffersize), ::std::mem::transmute(srcsize), ::std::mem::transmute(dstbuffer), ::std::mem::transmute(dstbuffersize), ::std::mem::transmute(dstsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetTextReplacementWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, srctext: Param0, dsttext: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).152)(::std::mem::transmute_copy(self), srctext.into_param().abi(), dsttext.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetExpressionSyntaxByNameWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, abbrevname: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).153)(::std::mem::transmute_copy(self), abbrevname.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExpressionSyntaxNamesWide(&self, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).154)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(index),
            ::std::mem::transmute(fullnamebuffer),
            ::std::mem::transmute(fullnamebuffersize),
            ::std::mem::transmute(fullnamesize),
            ::std::mem::transmute(abbrevnamebuffer),
            ::std::mem::transmute(abbrevnamebuffersize),
            ::std::mem::transmute(abbrevnamesize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventIndexDescriptionWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, index: u32, which: u32, buffer: Param2, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).155)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(which), buffer.into_param().abi(), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLogFile2(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).156)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenLogFile2<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, file: Param0, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).157)(::std::mem::transmute_copy(self), file.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLogFile2Wide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).158)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenLogFile2Wide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, file: Param0, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).159)(::std::mem::transmute_copy(self), file.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSystemVersionValues(&self, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).160)(::std::mem::transmute_copy(self), ::std::mem::transmute(platformid), ::std::mem::transmute(win32major), ::std::mem::transmute(win32minor), ::std::mem::transmute(kdmajor), ::std::mem::transmute(kdminor)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSystemVersionString(&self, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).161)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSystemVersionStringWide(&self, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).162)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetContextStackTrace(&self, startcontext: *const ::std::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).163)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(startcontext),
            ::std::mem::transmute(startcontextsize),
            ::std::mem::transmute(frames),
            ::std::mem::transmute(framessize),
            ::std::mem::transmute(framecontexts),
            ::std::mem::transmute(framecontextssize),
            ::std::mem::transmute(framecontextsentrysize),
            ::std::mem::transmute(framesfilled),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputContextStackTrace(&self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).164)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(framecontexts), ::std::mem::transmute(framecontextssize), ::std::mem::transmute(framecontextsentrysize), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetStoredEventInformation(&self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::std::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).165)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(processid),
            ::std::mem::transmute(threadid),
            ::std::mem::transmute(context),
            ::std::mem::transmute(contextsize),
            ::std::mem::transmute(contextused),
            ::std::mem::transmute(extrainformation),
            ::std::mem::transmute(extrainformationsize),
            ::std::mem::transmute(extrainformationused),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetManagedStatus(&self, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).166)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(whichstring), ::std::mem::transmute(string), ::std::mem::transmute(stringsize), ::std::mem::transmute(stringneeded)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetManagedStatusWide(&self, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).167)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(whichstring), ::std::mem::transmute(string), ::std::mem::transmute(stringsize), ::std::mem::transmute(stringneeded)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ResetManagedStatus(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).168)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetStackTraceEx(&self, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).169)(::std::mem::transmute_copy(self), ::std::mem::transmute(frameoffset), ::std::mem::transmute(stackoffset), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(framesfilled)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputStackTraceEx(&self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).170)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetContextStackTraceEx(&self, startcontext: *const ::std::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).171)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(startcontext),
            ::std::mem::transmute(startcontextsize),
            ::std::mem::transmute(frames),
            ::std::mem::transmute(framessize),
            ::std::mem::transmute(framecontexts),
            ::std::mem::transmute(framecontextssize),
            ::std::mem::transmute(framecontextsentrysize),
            ::std::mem::transmute(framesfilled),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputContextStackTraceEx(&self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).172)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(framecontexts), ::std::mem::transmute(framecontextssize), ::std::mem::transmute(framecontextsentrysize), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointByGuid(&self, guid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<IDebugBreakpoint3> {
        let mut result__: <IDebugBreakpoint3 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).173)(::std::mem::transmute_copy(self), ::std::mem::transmute(guid), &mut result__).from_abi::<IDebugBreakpoint3>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugControl5 {
    type Vtable = IDebugControl5_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3003113826, 9234, 17055, [141, 29, 91, 246, 221, 130, 70, 150]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugControl5_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, seconds: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, seconds: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, class: *mut u32, qualifier: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, size: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, status: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, status: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, level: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, level: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputlevel: u32, breaklevel: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, radix: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, radix: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32, desiredid: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bp: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *mut ::std::mem::ManuallyDrop<WINDBG_EXTENSION_APIS32>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *mut ::std::mem::ManuallyDrop<WINDBG_EXTENSION_APIS64>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, timeout: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, timedate: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, uptime: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, formatflags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, numrepl: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, events: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, descsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, relation: u32, value: u32, nextindex: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PWSTR, append: super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, instr: super::super::super::Foundation::PWSTR, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, slot: u32, r#macro: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, expression: super::super::super::Foundation::PWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, command: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, commandfile: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32, desiredid: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bp: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PWSTR, flags: u32, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, function: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, funcname: super::super::super::Foundation::PWSTR, function: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, argument: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, srctext: super::super::super::Foundation::PWSTR, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, srctext: super::super::super::Foundation::PWSTR, dsttext: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, abbrevname: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, descsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, startcontext: *const ::std::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::std::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, startcontext: *const ::std::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugControl6(::windows::runtime::IUnknown);
impl IDebugControl6 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInterrupt(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetInterrupt(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInterruptTimeout(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetInterruptTimeout(&self, seconds: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(seconds)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLogFile(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(append)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenLogFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(&self, file: Param0, append: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), file.into_param().abi(), append.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CloseLogFile(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetLogMask(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetLogMask(&self, mask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Input(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(inputsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ReturnInput<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, buffer: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), buffer.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Output<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, mask: u32, format: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputVaList<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, mask: u32, format: Param1, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ControlledOutput<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, mask: u32, format: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(mask), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ControlledOutputVaList<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, mask: u32, format: Param2, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(mask), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputPrompt<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, format: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputPromptVaList<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, format: Param1, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetPromptText(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(textsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputCurrentState(&self, outputcontrol: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputVersionInformation(&self, outputcontrol: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNotifyEventHandle(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetNotifyEventHandle(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Assemble<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, offset: u64, instr: Param1) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), instr.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Disassemble(&self, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(flags), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(disassemblysize), ::std::mem::transmute(endoffset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDisassembleEffectiveOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputDisassembly(&self, outputcontrol: u32, offset: u64, flags: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(offset), ::std::mem::transmute(flags), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputDisassemblyLines(&self, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(outputcontrol),
            ::std::mem::transmute(previouslines),
            ::std::mem::transmute(totallines),
            ::std::mem::transmute(offset),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(offsetline),
            ::std::mem::transmute(startoffset),
            ::std::mem::transmute(endoffset),
            ::std::mem::transmute(lineoffsets),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNearInstruction(&self, offset: u64, delta: i32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(delta), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetStackTrace(&self, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), ::std::mem::transmute(frameoffset), ::std::mem::transmute(stackoffset), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(framesfilled)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetReturnOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputStackTrace(&self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDebuggeeType(&self, class: *mut u32, qualifier: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), ::std::mem::transmute(class), ::std::mem::transmute(qualifier)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetActualProcessorType(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExecutingProcessorType(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberPossibleExecutingProcessorTypes(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).37)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetPossibleExecutingProcessorTypes(&self, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(types)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberProcessors(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).39)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSystemVersion(&self, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(platformid),
            ::std::mem::transmute(major),
            ::std::mem::transmute(minor),
            ::std::mem::transmute(servicepackstring),
            ::std::mem::transmute(servicepackstringsize),
            ::std::mem::transmute(servicepackstringused),
            ::std::mem::transmute(servicepacknumber),
            ::std::mem::transmute(buildstring),
            ::std::mem::transmute(buildstringsize),
            ::std::mem::transmute(buildstringused),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetPageSize(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).41)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsPointer64Bit(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadBugCheckData(&self, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::std::mem::transmute_copy(self), ::std::mem::transmute(code), ::std::mem::transmute(arg1), ::std::mem::transmute(arg2), ::std::mem::transmute(arg3), ::std::mem::transmute(arg4)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberSupportedProcessorTypes(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).44)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSupportedProcessorTypes(&self, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).45)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(types)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetProcessorTypeNames(&self, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(fullnamebuffer),
            ::std::mem::transmute(fullnamebuffersize),
            ::std::mem::transmute(fullnamesize),
            ::std::mem::transmute(abbrevnamebuffer),
            ::std::mem::transmute(abbrevnamebuffersize),
            ::std::mem::transmute(abbrevnamesize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEffectiveProcessorType(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).47)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEffectiveProcessorType(&self, r#type: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).48)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#type)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExecutionStatus(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).49)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetExecutionStatus(&self, status: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).50)(::std::mem::transmute_copy(self), ::std::mem::transmute(status)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCodeLevel(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).51)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetCodeLevel(&self, level: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).52)(::std::mem::transmute_copy(self), ::std::mem::transmute(level)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEngineOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).53)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddEngineOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).54)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveEngineOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).55)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEngineOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).56)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSystemErrorControl(&self, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).57)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputlevel), ::std::mem::transmute(breaklevel)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetSystemErrorControl(&self, outputlevel: u32, breaklevel: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).58)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputlevel), ::std::mem::transmute(breaklevel)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTextMacro(&self, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).59)(::std::mem::transmute_copy(self), ::std::mem::transmute(slot), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(macrosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetTextMacro<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, slot: u32, r#macro: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).60)(::std::mem::transmute_copy(self), ::std::mem::transmute(slot), r#macro.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRadix(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).61)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetRadix(&self, radix: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).62)(::std::mem::transmute_copy(self), ::std::mem::transmute(radix)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Evaluate<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, expression: Param0, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).63)(::std::mem::transmute_copy(self), expression.into_param().abi(), ::std::mem::transmute(desiredtype), ::std::mem::transmute(value), ::std::mem::transmute(remainderindex)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CoerceValue(&self, r#in: *const DEBUG_VALUE, outtype: u32) -> ::windows::runtime::Result<DEBUG_VALUE> {
        let mut result__: <DEBUG_VALUE as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).64)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#in), ::std::mem::transmute(outtype), &mut result__).from_abi::<DEBUG_VALUE>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CoerceValues(&self, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).65)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(r#in), ::std::mem::transmute(outtypes), ::std::mem::transmute(out)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Execute<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, command: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).66)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), command.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ExecuteCommandFile<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, commandfile: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).67)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), commandfile.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberBreakpoints(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).68)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointByIndex(&self, index: u32) -> ::windows::runtime::Result<IDebugBreakpoint> {
        let mut result__: <IDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).69)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), &mut result__).from_abi::<IDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointById(&self, id: u32) -> ::windows::runtime::Result<IDebugBreakpoint> {
        let mut result__: <IDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).70)(::std::mem::transmute_copy(self), ::std::mem::transmute(id), &mut result__).from_abi::<IDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointParameters(&self, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).71)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(ids), ::std::mem::transmute(start), ::std::mem::transmute(params)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddBreakpoint(&self, r#type: u32, desiredid: u32) -> ::windows::runtime::Result<IDebugBreakpoint> {
        let mut result__: <IDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).72)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#type), ::std::mem::transmute(desiredid), &mut result__).from_abi::<IDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveBreakpoint<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugBreakpoint>>(&self, bp: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).73)(::std::mem::transmute_copy(self), bp.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddExtension<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0, flags: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).74)(::std::mem::transmute_copy(self), path.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveExtension(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).75)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExtensionByPath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).76)(::std::mem::transmute_copy(self), path.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CallExtension<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, handle: u64, function: Param1, arguments: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).77)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), function.into_param().abi(), arguments.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExtensionFunction<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, handle: u64, funcname: Param1, function: *mut ::std::option::Option<super::super::super::Foundation::FARPROC>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).78)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), funcname.into_param().abi(), ::std::mem::transmute(function)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
    pub unsafe fn GetWindbgExtensionApis32(&self, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).79)(::std::mem::transmute_copy(self), ::std::mem::transmute(api)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
    pub unsafe fn GetWindbgExtensionApis64(&self, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).80)(::std::mem::transmute_copy(self), ::std::mem::transmute(api)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberEventFilters(&self, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).81)(::std::mem::transmute_copy(self), ::std::mem::transmute(specificevents), ::std::mem::transmute(specificexceptions), ::std::mem::transmute(arbitraryexceptions)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventFilterText(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).82)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(textsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventFilterCommand(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).83)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetEventFilterCommand<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, command: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).84)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), command.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSpecificFilterParameters(&self, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).85)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(params)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetSpecificFilterParameters(&self, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).86)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(params)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSpecificFilterArgument(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).87)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(argumentsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSpecificFilterArgument<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, argument: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).88)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), argument.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExceptionFilterParameters(&self, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).89)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(codes), ::std::mem::transmute(start), ::std::mem::transmute(params)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetExceptionFilterParameters(&self, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).90)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(params)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExceptionFilterSecondCommand(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).91)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetExceptionFilterSecondCommand<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, command: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).92)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), command.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WaitForEvent(&self, flags: u32, timeout: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).93)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(timeout)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLastEventInformation(&self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).94)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(processid),
            ::std::mem::transmute(threadid),
            ::std::mem::transmute(extrainformation),
            ::std::mem::transmute(extrainformationsize),
            ::std::mem::transmute(extrainformationused),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(descriptionused),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentTimeDate(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).95)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentSystemUpTime(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).96)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDumpFormatFlags(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).97)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberTextReplacements(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).98)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTextReplacement<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, srctext: Param0, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).99)(::std::mem::transmute_copy(self), srctext.into_param().abi(), ::std::mem::transmute(index), ::std::mem::transmute(srcbuffer), ::std::mem::transmute(srcbuffersize), ::std::mem::transmute(srcsize), ::std::mem::transmute(dstbuffer), ::std::mem::transmute(dstbuffersize), ::std::mem::transmute(dstsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetTextReplacement<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, srctext: Param0, dsttext: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).100)(::std::mem::transmute_copy(self), srctext.into_param().abi(), dsttext.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveTextReplacements(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).101)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputTextReplacements(&self, outputcontrol: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).102)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetAssemblyOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).103)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddAssemblyOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).104)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveAssemblyOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).105)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetAssemblyOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).106)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExpressionSyntax(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).107)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetExpressionSyntax(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).108)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetExpressionSyntaxByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, abbrevname: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).109)(::std::mem::transmute_copy(self), abbrevname.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberExpressionSyntaxes(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).110)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExpressionSyntaxNames(&self, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).111)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(index),
            ::std::mem::transmute(fullnamebuffer),
            ::std::mem::transmute(fullnamebuffersize),
            ::std::mem::transmute(fullnamesize),
            ::std::mem::transmute(abbrevnamebuffer),
            ::std::mem::transmute(abbrevnamebuffersize),
            ::std::mem::transmute(abbrevnamesize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberEvents(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).112)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventIndexDescription<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, which: u32, buffer: Param2, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).113)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(which), buffer.into_param().abi(), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentEventIndex(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).114)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetNextEventIndex(&self, relation: u32, value: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).115)(::std::mem::transmute_copy(self), ::std::mem::transmute(relation), ::std::mem::transmute(value), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLogFileWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).116)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(append)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenLogFileWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(&self, file: Param0, append: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).117)(::std::mem::transmute_copy(self), file.into_param().abi(), append.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn InputWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).118)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(inputsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ReturnInputWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, buffer: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).119)(::std::mem::transmute_copy(self), buffer.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, mask: u32, format: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).120)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputVaListWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, mask: u32, format: Param1, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).121)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ControlledOutputWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, mask: u32, format: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).122)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(mask), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ControlledOutputVaListWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, mask: u32, format: Param2, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).123)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(mask), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputPromptWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, format: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).124)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputPromptVaListWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, format: Param1, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).125)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetPromptTextWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).126)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(textsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AssembleWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, offset: u64, instr: Param1) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).127)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), instr.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn DisassembleWide(&self, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).128)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(flags), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(disassemblysize), ::std::mem::transmute(endoffset)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetProcessorTypeNamesWide(&self, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).129)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(fullnamebuffer),
            ::std::mem::transmute(fullnamebuffersize),
            ::std::mem::transmute(fullnamesize),
            ::std::mem::transmute(abbrevnamebuffer),
            ::std::mem::transmute(abbrevnamebuffersize),
            ::std::mem::transmute(abbrevnamesize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTextMacroWide(&self, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).130)(::std::mem::transmute_copy(self), ::std::mem::transmute(slot), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(macrosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetTextMacroWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, slot: u32, r#macro: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).131)(::std::mem::transmute_copy(self), ::std::mem::transmute(slot), r#macro.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn EvaluateWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, expression: Param0, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).132)(::std::mem::transmute_copy(self), expression.into_param().abi(), ::std::mem::transmute(desiredtype), ::std::mem::transmute(value), ::std::mem::transmute(remainderindex)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ExecuteWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, command: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).133)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), command.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ExecuteCommandFileWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, commandfile: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).134)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), commandfile.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointByIndex2(&self, index: u32) -> ::windows::runtime::Result<IDebugBreakpoint2> {
        let mut result__: <IDebugBreakpoint2 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).135)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), &mut result__).from_abi::<IDebugBreakpoint2>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointById2(&self, id: u32) -> ::windows::runtime::Result<IDebugBreakpoint2> {
        let mut result__: <IDebugBreakpoint2 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).136)(::std::mem::transmute_copy(self), ::std::mem::transmute(id), &mut result__).from_abi::<IDebugBreakpoint2>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddBreakpoint2(&self, r#type: u32, desiredid: u32) -> ::windows::runtime::Result<IDebugBreakpoint2> {
        let mut result__: <IDebugBreakpoint2 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).137)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#type), ::std::mem::transmute(desiredid), &mut result__).from_abi::<IDebugBreakpoint2>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveBreakpoint2<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugBreakpoint2>>(&self, bp: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).138)(::std::mem::transmute_copy(self), bp.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddExtensionWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, path: Param0, flags: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).139)(::std::mem::transmute_copy(self), path.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExtensionByPathWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, path: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).140)(::std::mem::transmute_copy(self), path.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CallExtensionWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, handle: u64, function: Param1, arguments: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).141)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), function.into_param().abi(), arguments.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExtensionFunctionWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, handle: u64, funcname: Param1, function: *mut ::std::option::Option<super::super::super::Foundation::FARPROC>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).142)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), funcname.into_param().abi(), ::std::mem::transmute(function)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventFilterTextWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).143)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(textsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventFilterCommandWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).144)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetEventFilterCommandWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, index: u32, command: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).145)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), command.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSpecificFilterArgumentWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).146)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(argumentsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSpecificFilterArgumentWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, index: u32, argument: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).147)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), argument.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExceptionFilterSecondCommandWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).148)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetExceptionFilterSecondCommandWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, index: u32, command: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).149)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), command.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLastEventInformationWide(&self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).150)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(processid),
            ::std::mem::transmute(threadid),
            ::std::mem::transmute(extrainformation),
            ::std::mem::transmute(extrainformationsize),
            ::std::mem::transmute(extrainformationused),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(descriptionused),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTextReplacementWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, srctext: Param0, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).151)(::std::mem::transmute_copy(self), srctext.into_param().abi(), ::std::mem::transmute(index), ::std::mem::transmute(srcbuffer), ::std::mem::transmute(srcbuffersize), ::std::mem::transmute(srcsize), ::std::mem::transmute(dstbuffer), ::std::mem::transmute(dstbuffersize), ::std::mem::transmute(dstsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetTextReplacementWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, srctext: Param0, dsttext: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).152)(::std::mem::transmute_copy(self), srctext.into_param().abi(), dsttext.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetExpressionSyntaxByNameWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, abbrevname: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).153)(::std::mem::transmute_copy(self), abbrevname.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExpressionSyntaxNamesWide(&self, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).154)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(index),
            ::std::mem::transmute(fullnamebuffer),
            ::std::mem::transmute(fullnamebuffersize),
            ::std::mem::transmute(fullnamesize),
            ::std::mem::transmute(abbrevnamebuffer),
            ::std::mem::transmute(abbrevnamebuffersize),
            ::std::mem::transmute(abbrevnamesize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventIndexDescriptionWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, index: u32, which: u32, buffer: Param2, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).155)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(which), buffer.into_param().abi(), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLogFile2(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).156)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenLogFile2<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, file: Param0, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).157)(::std::mem::transmute_copy(self), file.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLogFile2Wide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).158)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenLogFile2Wide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, file: Param0, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).159)(::std::mem::transmute_copy(self), file.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSystemVersionValues(&self, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).160)(::std::mem::transmute_copy(self), ::std::mem::transmute(platformid), ::std::mem::transmute(win32major), ::std::mem::transmute(win32minor), ::std::mem::transmute(kdmajor), ::std::mem::transmute(kdminor)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSystemVersionString(&self, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).161)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSystemVersionStringWide(&self, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).162)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetContextStackTrace(&self, startcontext: *const ::std::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).163)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(startcontext),
            ::std::mem::transmute(startcontextsize),
            ::std::mem::transmute(frames),
            ::std::mem::transmute(framessize),
            ::std::mem::transmute(framecontexts),
            ::std::mem::transmute(framecontextssize),
            ::std::mem::transmute(framecontextsentrysize),
            ::std::mem::transmute(framesfilled),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputContextStackTrace(&self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).164)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(framecontexts), ::std::mem::transmute(framecontextssize), ::std::mem::transmute(framecontextsentrysize), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetStoredEventInformation(&self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::std::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).165)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(processid),
            ::std::mem::transmute(threadid),
            ::std::mem::transmute(context),
            ::std::mem::transmute(contextsize),
            ::std::mem::transmute(contextused),
            ::std::mem::transmute(extrainformation),
            ::std::mem::transmute(extrainformationsize),
            ::std::mem::transmute(extrainformationused),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetManagedStatus(&self, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).166)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(whichstring), ::std::mem::transmute(string), ::std::mem::transmute(stringsize), ::std::mem::transmute(stringneeded)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetManagedStatusWide(&self, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).167)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(whichstring), ::std::mem::transmute(string), ::std::mem::transmute(stringsize), ::std::mem::transmute(stringneeded)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ResetManagedStatus(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).168)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetStackTraceEx(&self, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).169)(::std::mem::transmute_copy(self), ::std::mem::transmute(frameoffset), ::std::mem::transmute(stackoffset), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(framesfilled)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputStackTraceEx(&self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).170)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetContextStackTraceEx(&self, startcontext: *const ::std::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).171)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(startcontext),
            ::std::mem::transmute(startcontextsize),
            ::std::mem::transmute(frames),
            ::std::mem::transmute(framessize),
            ::std::mem::transmute(framecontexts),
            ::std::mem::transmute(framecontextssize),
            ::std::mem::transmute(framecontextsentrysize),
            ::std::mem::transmute(framesfilled),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputContextStackTraceEx(&self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).172)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(framecontexts), ::std::mem::transmute(framecontextssize), ::std::mem::transmute(framecontextsentrysize), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointByGuid(&self, guid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<IDebugBreakpoint3> {
        let mut result__: <IDebugBreakpoint3 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).173)(::std::mem::transmute_copy(self), ::std::mem::transmute(guid), &mut result__).from_abi::<IDebugBreakpoint3>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExecutionStatusEx(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).174)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSynchronizationStatus(&self, sendsattempted: *mut u32, secondssincelastresponse: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).175)(::std::mem::transmute_copy(self), ::std::mem::transmute(sendsattempted), ::std::mem::transmute(secondssincelastresponse)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugControl6 {
    type Vtable = IDebugControl6_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3154991167, 4717, 17313, [156, 196, 168, 96, 171, 29, 83, 123]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugControl6_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, seconds: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, seconds: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, class: *mut u32, qualifier: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, size: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, status: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, status: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, level: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, level: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputlevel: u32, breaklevel: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, radix: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, radix: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32, desiredid: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bp: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *mut ::std::mem::ManuallyDrop<WINDBG_EXTENSION_APIS32>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *mut ::std::mem::ManuallyDrop<WINDBG_EXTENSION_APIS64>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, timeout: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, timedate: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, uptime: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, formatflags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, numrepl: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, events: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, descsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, relation: u32, value: u32, nextindex: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PWSTR, append: super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, instr: super::super::super::Foundation::PWSTR, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, slot: u32, r#macro: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, expression: super::super::super::Foundation::PWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, command: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, commandfile: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32, desiredid: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bp: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PWSTR, flags: u32, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, function: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, funcname: super::super::super::Foundation::PWSTR, function: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, argument: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, srctext: super::super::super::Foundation::PWSTR, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, srctext: super::super::super::Foundation::PWSTR, dsttext: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, abbrevname: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, descsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, startcontext: *const ::std::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::std::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, startcontext: *const ::std::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, status: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sendsattempted: *mut u32, secondssincelastresponse: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugControl7(::windows::runtime::IUnknown);
impl IDebugControl7 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInterrupt(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetInterrupt(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInterruptTimeout(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetInterruptTimeout(&self, seconds: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(seconds)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLogFile(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(append)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenLogFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(&self, file: Param0, append: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), file.into_param().abi(), append.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CloseLogFile(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetLogMask(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetLogMask(&self, mask: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Input(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(inputsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ReturnInput<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, buffer: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), buffer.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Output<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, mask: u32, format: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputVaList<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, mask: u32, format: Param1, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ControlledOutput<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, mask: u32, format: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(mask), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ControlledOutputVaList<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, mask: u32, format: Param2, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(mask), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputPrompt<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, format: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputPromptVaList<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, format: Param1, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetPromptText(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(textsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputCurrentState(&self, outputcontrol: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputVersionInformation(&self, outputcontrol: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNotifyEventHandle(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetNotifyEventHandle(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Assemble<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, offset: u64, instr: Param1) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), instr.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Disassemble(&self, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(flags), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(disassemblysize), ::std::mem::transmute(endoffset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDisassembleEffectiveOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputDisassembly(&self, outputcontrol: u32, offset: u64, flags: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(offset), ::std::mem::transmute(flags), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputDisassemblyLines(&self, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(outputcontrol),
            ::std::mem::transmute(previouslines),
            ::std::mem::transmute(totallines),
            ::std::mem::transmute(offset),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(offsetline),
            ::std::mem::transmute(startoffset),
            ::std::mem::transmute(endoffset),
            ::std::mem::transmute(lineoffsets),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNearInstruction(&self, offset: u64, delta: i32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(delta), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetStackTrace(&self, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), ::std::mem::transmute(frameoffset), ::std::mem::transmute(stackoffset), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(framesfilled)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetReturnOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputStackTrace(&self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDebuggeeType(&self, class: *mut u32, qualifier: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), ::std::mem::transmute(class), ::std::mem::transmute(qualifier)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetActualProcessorType(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExecutingProcessorType(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberPossibleExecutingProcessorTypes(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).37)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetPossibleExecutingProcessorTypes(&self, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(types)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberProcessors(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).39)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSystemVersion(&self, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(platformid),
            ::std::mem::transmute(major),
            ::std::mem::transmute(minor),
            ::std::mem::transmute(servicepackstring),
            ::std::mem::transmute(servicepackstringsize),
            ::std::mem::transmute(servicepackstringused),
            ::std::mem::transmute(servicepacknumber),
            ::std::mem::transmute(buildstring),
            ::std::mem::transmute(buildstringsize),
            ::std::mem::transmute(buildstringused),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetPageSize(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).41)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsPointer64Bit(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadBugCheckData(&self, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::std::mem::transmute_copy(self), ::std::mem::transmute(code), ::std::mem::transmute(arg1), ::std::mem::transmute(arg2), ::std::mem::transmute(arg3), ::std::mem::transmute(arg4)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberSupportedProcessorTypes(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).44)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSupportedProcessorTypes(&self, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).45)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(types)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetProcessorTypeNames(&self, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(fullnamebuffer),
            ::std::mem::transmute(fullnamebuffersize),
            ::std::mem::transmute(fullnamesize),
            ::std::mem::transmute(abbrevnamebuffer),
            ::std::mem::transmute(abbrevnamebuffersize),
            ::std::mem::transmute(abbrevnamesize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEffectiveProcessorType(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).47)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEffectiveProcessorType(&self, r#type: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).48)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#type)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExecutionStatus(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).49)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetExecutionStatus(&self, status: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).50)(::std::mem::transmute_copy(self), ::std::mem::transmute(status)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCodeLevel(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).51)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetCodeLevel(&self, level: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).52)(::std::mem::transmute_copy(self), ::std::mem::transmute(level)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEngineOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).53)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddEngineOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).54)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveEngineOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).55)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetEngineOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).56)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSystemErrorControl(&self, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).57)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputlevel), ::std::mem::transmute(breaklevel)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetSystemErrorControl(&self, outputlevel: u32, breaklevel: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).58)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputlevel), ::std::mem::transmute(breaklevel)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTextMacro(&self, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).59)(::std::mem::transmute_copy(self), ::std::mem::transmute(slot), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(macrosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetTextMacro<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, slot: u32, r#macro: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).60)(::std::mem::transmute_copy(self), ::std::mem::transmute(slot), r#macro.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRadix(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).61)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetRadix(&self, radix: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).62)(::std::mem::transmute_copy(self), ::std::mem::transmute(radix)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Evaluate<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, expression: Param0, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).63)(::std::mem::transmute_copy(self), expression.into_param().abi(), ::std::mem::transmute(desiredtype), ::std::mem::transmute(value), ::std::mem::transmute(remainderindex)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CoerceValue(&self, r#in: *const DEBUG_VALUE, outtype: u32) -> ::windows::runtime::Result<DEBUG_VALUE> {
        let mut result__: <DEBUG_VALUE as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).64)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#in), ::std::mem::transmute(outtype), &mut result__).from_abi::<DEBUG_VALUE>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CoerceValues(&self, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).65)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(r#in), ::std::mem::transmute(outtypes), ::std::mem::transmute(out)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Execute<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, command: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).66)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), command.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ExecuteCommandFile<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, outputcontrol: u32, commandfile: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).67)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), commandfile.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberBreakpoints(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).68)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointByIndex(&self, index: u32) -> ::windows::runtime::Result<IDebugBreakpoint> {
        let mut result__: <IDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).69)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), &mut result__).from_abi::<IDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointById(&self, id: u32) -> ::windows::runtime::Result<IDebugBreakpoint> {
        let mut result__: <IDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).70)(::std::mem::transmute_copy(self), ::std::mem::transmute(id), &mut result__).from_abi::<IDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointParameters(&self, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).71)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(ids), ::std::mem::transmute(start), ::std::mem::transmute(params)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddBreakpoint(&self, r#type: u32, desiredid: u32) -> ::windows::runtime::Result<IDebugBreakpoint> {
        let mut result__: <IDebugBreakpoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).72)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#type), ::std::mem::transmute(desiredid), &mut result__).from_abi::<IDebugBreakpoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveBreakpoint<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugBreakpoint>>(&self, bp: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).73)(::std::mem::transmute_copy(self), bp.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddExtension<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0, flags: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).74)(::std::mem::transmute_copy(self), path.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveExtension(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).75)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExtensionByPath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).76)(::std::mem::transmute_copy(self), path.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CallExtension<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, handle: u64, function: Param1, arguments: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).77)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), function.into_param().abi(), arguments.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExtensionFunction<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, handle: u64, funcname: Param1, function: *mut ::std::option::Option<super::super::super::Foundation::FARPROC>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).78)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), funcname.into_param().abi(), ::std::mem::transmute(function)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
    pub unsafe fn GetWindbgExtensionApis32(&self, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).79)(::std::mem::transmute_copy(self), ::std::mem::transmute(api)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
    pub unsafe fn GetWindbgExtensionApis64(&self, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).80)(::std::mem::transmute_copy(self), ::std::mem::transmute(api)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberEventFilters(&self, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).81)(::std::mem::transmute_copy(self), ::std::mem::transmute(specificevents), ::std::mem::transmute(specificexceptions), ::std::mem::transmute(arbitraryexceptions)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventFilterText(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).82)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(textsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventFilterCommand(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).83)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetEventFilterCommand<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, command: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).84)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), command.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSpecificFilterParameters(&self, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).85)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(params)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetSpecificFilterParameters(&self, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).86)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(params)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSpecificFilterArgument(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).87)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(argumentsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSpecificFilterArgument<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, argument: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).88)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), argument.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExceptionFilterParameters(&self, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).89)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(codes), ::std::mem::transmute(start), ::std::mem::transmute(params)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetExceptionFilterParameters(&self, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).90)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(params)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExceptionFilterSecondCommand(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).91)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetExceptionFilterSecondCommand<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, command: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).92)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), command.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WaitForEvent(&self, flags: u32, timeout: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).93)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(timeout)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLastEventInformation(&self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).94)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(processid),
            ::std::mem::transmute(threadid),
            ::std::mem::transmute(extrainformation),
            ::std::mem::transmute(extrainformationsize),
            ::std::mem::transmute(extrainformationused),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(descriptionused),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentTimeDate(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).95)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentSystemUpTime(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).96)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDumpFormatFlags(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).97)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberTextReplacements(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).98)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTextReplacement<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, srctext: Param0, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).99)(::std::mem::transmute_copy(self), srctext.into_param().abi(), ::std::mem::transmute(index), ::std::mem::transmute(srcbuffer), ::std::mem::transmute(srcbuffersize), ::std::mem::transmute(srcsize), ::std::mem::transmute(dstbuffer), ::std::mem::transmute(dstbuffersize), ::std::mem::transmute(dstsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetTextReplacement<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, srctext: Param0, dsttext: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).100)(::std::mem::transmute_copy(self), srctext.into_param().abi(), dsttext.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveTextReplacements(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).101)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputTextReplacements(&self, outputcontrol: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).102)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetAssemblyOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).103)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddAssemblyOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).104)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveAssemblyOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).105)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetAssemblyOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).106)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExpressionSyntax(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).107)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetExpressionSyntax(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).108)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetExpressionSyntaxByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, abbrevname: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).109)(::std::mem::transmute_copy(self), abbrevname.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberExpressionSyntaxes(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).110)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExpressionSyntaxNames(&self, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).111)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(index),
            ::std::mem::transmute(fullnamebuffer),
            ::std::mem::transmute(fullnamebuffersize),
            ::std::mem::transmute(fullnamesize),
            ::std::mem::transmute(abbrevnamebuffer),
            ::std::mem::transmute(abbrevnamebuffersize),
            ::std::mem::transmute(abbrevnamesize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberEvents(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).112)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventIndexDescription<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, which: u32, buffer: Param2, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).113)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(which), buffer.into_param().abi(), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentEventIndex(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).114)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetNextEventIndex(&self, relation: u32, value: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).115)(::std::mem::transmute_copy(self), ::std::mem::transmute(relation), ::std::mem::transmute(value), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLogFileWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).116)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(append)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenLogFileWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(&self, file: Param0, append: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).117)(::std::mem::transmute_copy(self), file.into_param().abi(), append.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn InputWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).118)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(inputsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ReturnInputWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, buffer: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).119)(::std::mem::transmute_copy(self), buffer.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, mask: u32, format: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).120)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputVaListWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, mask: u32, format: Param1, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).121)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ControlledOutputWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, mask: u32, format: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).122)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(mask), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ControlledOutputVaListWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, mask: u32, format: Param2, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).123)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(mask), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputPromptWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, format: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).124)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), format.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputPromptVaListWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, format: Param1, args: *const i8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).125)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), format.into_param().abi(), ::std::mem::transmute(args)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetPromptTextWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).126)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(textsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AssembleWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, offset: u64, instr: Param1) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).127)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), instr.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn DisassembleWide(&self, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).128)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(flags), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(disassemblysize), ::std::mem::transmute(endoffset)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetProcessorTypeNamesWide(&self, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).129)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(fullnamebuffer),
            ::std::mem::transmute(fullnamebuffersize),
            ::std::mem::transmute(fullnamesize),
            ::std::mem::transmute(abbrevnamebuffer),
            ::std::mem::transmute(abbrevnamebuffersize),
            ::std::mem::transmute(abbrevnamesize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTextMacroWide(&self, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).130)(::std::mem::transmute_copy(self), ::std::mem::transmute(slot), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(macrosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetTextMacroWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, slot: u32, r#macro: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).131)(::std::mem::transmute_copy(self), ::std::mem::transmute(slot), r#macro.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn EvaluateWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, expression: Param0, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).132)(::std::mem::transmute_copy(self), expression.into_param().abi(), ::std::mem::transmute(desiredtype), ::std::mem::transmute(value), ::std::mem::transmute(remainderindex)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ExecuteWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, command: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).133)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), command.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ExecuteCommandFileWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, outputcontrol: u32, commandfile: Param1, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).134)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), commandfile.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointByIndex2(&self, index: u32) -> ::windows::runtime::Result<IDebugBreakpoint2> {
        let mut result__: <IDebugBreakpoint2 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).135)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), &mut result__).from_abi::<IDebugBreakpoint2>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointById2(&self, id: u32) -> ::windows::runtime::Result<IDebugBreakpoint2> {
        let mut result__: <IDebugBreakpoint2 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).136)(::std::mem::transmute_copy(self), ::std::mem::transmute(id), &mut result__).from_abi::<IDebugBreakpoint2>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddBreakpoint2(&self, r#type: u32, desiredid: u32) -> ::windows::runtime::Result<IDebugBreakpoint2> {
        let mut result__: <IDebugBreakpoint2 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).137)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#type), ::std::mem::transmute(desiredid), &mut result__).from_abi::<IDebugBreakpoint2>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveBreakpoint2<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugBreakpoint2>>(&self, bp: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).138)(::std::mem::transmute_copy(self), bp.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddExtensionWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, path: Param0, flags: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).139)(::std::mem::transmute_copy(self), path.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExtensionByPathWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, path: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).140)(::std::mem::transmute_copy(self), path.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CallExtensionWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, handle: u64, function: Param1, arguments: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).141)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), function.into_param().abi(), arguments.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExtensionFunctionWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, handle: u64, funcname: Param1, function: *mut ::std::option::Option<super::super::super::Foundation::FARPROC>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).142)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), funcname.into_param().abi(), ::std::mem::transmute(function)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventFilterTextWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).143)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(textsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventFilterCommandWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).144)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetEventFilterCommandWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, index: u32, command: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).145)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), command.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSpecificFilterArgumentWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).146)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(argumentsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSpecificFilterArgumentWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, index: u32, argument: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).147)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), argument.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExceptionFilterSecondCommandWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).148)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(commandsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetExceptionFilterSecondCommandWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, index: u32, command: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).149)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), command.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLastEventInformationWide(&self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).150)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(processid),
            ::std::mem::transmute(threadid),
            ::std::mem::transmute(extrainformation),
            ::std::mem::transmute(extrainformationsize),
            ::std::mem::transmute(extrainformationused),
            ::std::mem::transmute(description),
            ::std::mem::transmute(descriptionsize),
            ::std::mem::transmute(descriptionused),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTextReplacementWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, srctext: Param0, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).151)(::std::mem::transmute_copy(self), srctext.into_param().abi(), ::std::mem::transmute(index), ::std::mem::transmute(srcbuffer), ::std::mem::transmute(srcbuffersize), ::std::mem::transmute(srcsize), ::std::mem::transmute(dstbuffer), ::std::mem::transmute(dstbuffersize), ::std::mem::transmute(dstsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetTextReplacementWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, srctext: Param0, dsttext: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).152)(::std::mem::transmute_copy(self), srctext.into_param().abi(), dsttext.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetExpressionSyntaxByNameWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, abbrevname: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).153)(::std::mem::transmute_copy(self), abbrevname.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetExpressionSyntaxNamesWide(&self, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).154)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(index),
            ::std::mem::transmute(fullnamebuffer),
            ::std::mem::transmute(fullnamebuffersize),
            ::std::mem::transmute(fullnamesize),
            ::std::mem::transmute(abbrevnamebuffer),
            ::std::mem::transmute(abbrevnamebuffersize),
            ::std::mem::transmute(abbrevnamesize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventIndexDescriptionWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, index: u32, which: u32, buffer: Param2, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).155)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(which), buffer.into_param().abi(), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLogFile2(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).156)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenLogFile2<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, file: Param0, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).157)(::std::mem::transmute_copy(self), file.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLogFile2Wide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).158)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OpenLogFile2Wide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, file: Param0, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).159)(::std::mem::transmute_copy(self), file.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSystemVersionValues(&self, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).160)(::std::mem::transmute_copy(self), ::std::mem::transmute(platformid), ::std::mem::transmute(win32major), ::std::mem::transmute(win32minor), ::std::mem::transmute(kdmajor), ::std::mem::transmute(kdminor)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSystemVersionString(&self, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).161)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSystemVersionStringWide(&self, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).162)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetContextStackTrace(&self, startcontext: *const ::std::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).163)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(startcontext),
            ::std::mem::transmute(startcontextsize),
            ::std::mem::transmute(frames),
            ::std::mem::transmute(framessize),
            ::std::mem::transmute(framecontexts),
            ::std::mem::transmute(framecontextssize),
            ::std::mem::transmute(framecontextsentrysize),
            ::std::mem::transmute(framesfilled),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputContextStackTrace(&self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).164)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(framecontexts), ::std::mem::transmute(framecontextssize), ::std::mem::transmute(framecontextsentrysize), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetStoredEventInformation(&self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::std::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).165)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
            ::std::mem::transmute(processid),
            ::std::mem::transmute(threadid),
            ::std::mem::transmute(context),
            ::std::mem::transmute(contextsize),
            ::std::mem::transmute(contextused),
            ::std::mem::transmute(extrainformation),
            ::std::mem::transmute(extrainformationsize),
            ::std::mem::transmute(extrainformationused),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetManagedStatus(&self, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).166)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(whichstring), ::std::mem::transmute(string), ::std::mem::transmute(stringsize), ::std::mem::transmute(stringneeded)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetManagedStatusWide(&self, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).167)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(whichstring), ::std::mem::transmute(string), ::std::mem::transmute(stringsize), ::std::mem::transmute(stringneeded)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ResetManagedStatus(&self, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).168)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetStackTraceEx(&self, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).169)(::std::mem::transmute_copy(self), ::std::mem::transmute(frameoffset), ::std::mem::transmute(stackoffset), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(framesfilled)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputStackTraceEx(&self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).170)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetContextStackTraceEx(&self, startcontext: *const ::std::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).171)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(startcontext),
            ::std::mem::transmute(startcontextsize),
            ::std::mem::transmute(frames),
            ::std::mem::transmute(framessize),
            ::std::mem::transmute(framecontexts),
            ::std::mem::transmute(framecontextssize),
            ::std::mem::transmute(framecontextsentrysize),
            ::std::mem::transmute(framesfilled),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputContextStackTraceEx(&self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).172)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(frames), ::std::mem::transmute(framessize), ::std::mem::transmute(framecontexts), ::std::mem::transmute(framecontextssize), ::std::mem::transmute(framecontextsentrysize), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBreakpointByGuid(&self, guid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<IDebugBreakpoint3> {
        let mut result__: <IDebugBreakpoint3 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).173)(::std::mem::transmute_copy(self), ::std::mem::transmute(guid), &mut result__).from_abi::<IDebugBreakpoint3>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExecutionStatusEx(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).174)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSynchronizationStatus(&self, sendsattempted: *mut u32, secondssincelastresponse: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).175)(::std::mem::transmute_copy(self), ::std::mem::transmute(sendsattempted), ::std::mem::transmute(secondssincelastresponse)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDebuggeeType2(&self, flags: u32, class: *mut u32, qualifier: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).176)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(class), ::std::mem::transmute(qualifier)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugControl7 {
    type Vtable = IDebugControl7_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3094328241, 32980, 18267, [174, 163, 207, 6, 83, 156, 246, 58]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugControl7_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, seconds: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, seconds: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, class: *mut u32, qualifier: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, size: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, types: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, status: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, status: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, level: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, level: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputlevel: u32, breaklevel: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, radix: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, radix: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32, desiredid: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bp: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *mut ::std::mem::ManuallyDrop<WINDBG_EXTENSION_APIS32>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, api: *mut ::std::mem::ManuallyDrop<WINDBG_EXTENSION_APIS64>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, timeout: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, timedate: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, uptime: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, formatflags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, numrepl: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, events: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, descsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, relation: u32, value: u32, nextindex: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PWSTR, append: super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, instr: super::super::super::Foundation::PWSTR, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, slot: u32, r#macro: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, expression: super::super::super::Foundation::PWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, command: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, commandfile: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: u32, desiredid: u32, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bp: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PWSTR, flags: u32, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, function: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, funcname: super::super::super::Foundation::PWSTR, function: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, argument: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, srctext: super::super::super::Foundation::PWSTR, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, srctext: super::super::super::Foundation::PWSTR, dsttext: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, abbrevname: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, descsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, startcontext: *const ::std::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::std::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::std::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, startcontext: *const ::std::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::std::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guid: *const ::windows::runtime::GUID, bp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, status: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sendsattempted: *mut u32, secondssincelastresponse: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, class: *mut u32, qualifier: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugCookie(::windows::runtime::IUnknown);
impl IDebugCookie {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetDebugCookie(&self, dwdebugappcookie: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwdebugappcookie)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugCookie {
    type Vtable = IDebugCookie_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865849, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugCookie_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwdebugappcookie: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugDataSpaces(::windows::runtime::IUnknown);
impl IDebugDataSpaces {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadVirtual(&self, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteVirtual(&self, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SearchVirtual(&self, offset: u64, length: u64, pattern: *const ::std::ffi::c_void, patternsize: u32, patterngranularity: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(length), ::std::mem::transmute(pattern), ::std::mem::transmute(patternsize), ::std::mem::transmute(patterngranularity), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadVirtualUncached(&self, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteVirtualUncached(&self, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadPointersVirtual(&self, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(offset), ::std::mem::transmute(ptrs)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WritePointersVirtual(&self, count: u32, offset: u64, ptrs: *const u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(offset), ::std::mem::transmute(ptrs)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadPhysical(&self, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WritePhysical(&self, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadControl(&self, processor: u32, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(processor), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteControl(&self, processor: u32, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(processor), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadIo(&self, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(interfacetype), ::std::mem::transmute(busnumber), ::std::mem::transmute(addressspace), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteIo(&self, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(interfacetype), ::std::mem::transmute(busnumber), ::std::mem::transmute(addressspace), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadMsr(&self, msr: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(msr), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteMsr(&self, msr: u32, value: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(msr), ::std::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadBusData(&self, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(busdatatype), ::std::mem::transmute(busnumber), ::std::mem::transmute(slotnumber), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteBusData(&self, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), ::std::mem::transmute(busdatatype), ::std::mem::transmute(busnumber), ::std::mem::transmute(slotnumber), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CheckLowMemory(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadDebuggerData(&self, index: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(datasize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadProcessorSystemData(&self, processor: u32, index: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), ::std::mem::transmute(processor), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(datasize)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugDataSpaces {
    type Vtable = IDebugDataSpaces_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2297946027, 16039, 19514, [174, 251, 196, 232, 16, 97, 115, 170]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugDataSpaces_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, length: u64, pattern: *const ::std::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, offset: u64, ptrs: *const u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, processor: u32, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, processor: u32, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, msr: u32, value: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, msr: u32, value: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, processor: u32, index: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugDataSpaces2(::windows::runtime::IUnknown);
impl IDebugDataSpaces2 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadVirtual(&self, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteVirtual(&self, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SearchVirtual(&self, offset: u64, length: u64, pattern: *const ::std::ffi::c_void, patternsize: u32, patterngranularity: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(length), ::std::mem::transmute(pattern), ::std::mem::transmute(patternsize), ::std::mem::transmute(patterngranularity), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadVirtualUncached(&self, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteVirtualUncached(&self, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadPointersVirtual(&self, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(offset), ::std::mem::transmute(ptrs)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WritePointersVirtual(&self, count: u32, offset: u64, ptrs: *const u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(offset), ::std::mem::transmute(ptrs)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadPhysical(&self, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WritePhysical(&self, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadControl(&self, processor: u32, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(processor), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteControl(&self, processor: u32, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(processor), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadIo(&self, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(interfacetype), ::std::mem::transmute(busnumber), ::std::mem::transmute(addressspace), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteIo(&self, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(interfacetype), ::std::mem::transmute(busnumber), ::std::mem::transmute(addressspace), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadMsr(&self, msr: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(msr), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteMsr(&self, msr: u32, value: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(msr), ::std::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadBusData(&self, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(busdatatype), ::std::mem::transmute(busnumber), ::std::mem::transmute(slotnumber), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteBusData(&self, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), ::std::mem::transmute(busdatatype), ::std::mem::transmute(busnumber), ::std::mem::transmute(slotnumber), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CheckLowMemory(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadDebuggerData(&self, index: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(datasize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadProcessorSystemData(&self, processor: u32, index: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), ::std::mem::transmute(processor), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(datasize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn VirtualToPhysical(&self, r#virtual: u64) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#virtual), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetVirtualTranslationPhysicalOffsets(&self, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#virtual), ::std::mem::transmute(offsets), ::std::mem::transmute(offsetssize), ::std::mem::transmute(levels)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadHandleData(&self, handle: u64, datatype: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), ::std::mem::transmute(datatype), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(datasize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FillVirtual(&self, start: u64, size: u32, pattern: *const ::std::ffi::c_void, patternsize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(size), ::std::mem::transmute(pattern), ::std::mem::transmute(patternsize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FillPhysical(&self, start: u64, size: u32, pattern: *const ::std::ffi::c_void, patternsize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(size), ::std::mem::transmute(pattern), ::std::mem::transmute(patternsize), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Memory")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_Memory`*"]
    pub unsafe fn QueryVirtual(&self, offset: u64) -> ::windows::runtime::Result<super::super::Memory::MEMORY_BASIC_INFORMATION64> {
        let mut result__: <super::super::Memory::MEMORY_BASIC_INFORMATION64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), &mut result__).from_abi::<super::super::Memory::MEMORY_BASIC_INFORMATION64>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugDataSpaces2 {
    type Vtable = IDebugDataSpaces2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2053014831, 38633, 18063, [172, 27, 11, 58, 221, 196, 160, 73]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugDataSpaces2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, length: u64, pattern: *const ::std::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, offset: u64, ptrs: *const u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, processor: u32, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, processor: u32, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, msr: u32, value: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, msr: u32, value: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, processor: u32, index: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#virtual: u64, physical: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, datatype: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u64, size: u32, pattern: *const ::std::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u64, size: u32, pattern: *const ::std::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Memory")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, info: *mut super::super::Memory::MEMORY_BASIC_INFORMATION64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Memory"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugDataSpaces3(::windows::runtime::IUnknown);
impl IDebugDataSpaces3 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadVirtual(&self, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteVirtual(&self, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SearchVirtual(&self, offset: u64, length: u64, pattern: *const ::std::ffi::c_void, patternsize: u32, patterngranularity: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(length), ::std::mem::transmute(pattern), ::std::mem::transmute(patternsize), ::std::mem::transmute(patterngranularity), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadVirtualUncached(&self, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteVirtualUncached(&self, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadPointersVirtual(&self, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(offset), ::std::mem::transmute(ptrs)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WritePointersVirtual(&self, count: u32, offset: u64, ptrs: *const u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(offset), ::std::mem::transmute(ptrs)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadPhysical(&self, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WritePhysical(&self, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadControl(&self, processor: u32, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(processor), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteControl(&self, processor: u32, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(processor), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadIo(&self, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(interfacetype), ::std::mem::transmute(busnumber), ::std::mem::transmute(addressspace), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteIo(&self, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(interfacetype), ::std::mem::transmute(busnumber), ::std::mem::transmute(addressspace), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadMsr(&self, msr: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(msr), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteMsr(&self, msr: u32, value: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(msr), ::std::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadBusData(&self, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(busdatatype), ::std::mem::transmute(busnumber), ::std::mem::transmute(slotnumber), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteBusData(&self, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), ::std::mem::transmute(busdatatype), ::std::mem::transmute(busnumber), ::std::mem::transmute(slotnumber), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CheckLowMemory(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadDebuggerData(&self, index: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(datasize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadProcessorSystemData(&self, processor: u32, index: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), ::std::mem::transmute(processor), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(datasize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn VirtualToPhysical(&self, r#virtual: u64) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#virtual), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetVirtualTranslationPhysicalOffsets(&self, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#virtual), ::std::mem::transmute(offsets), ::std::mem::transmute(offsetssize), ::std::mem::transmute(levels)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadHandleData(&self, handle: u64, datatype: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), ::std::mem::transmute(datatype), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(datasize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FillVirtual(&self, start: u64, size: u32, pattern: *const ::std::ffi::c_void, patternsize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(size), ::std::mem::transmute(pattern), ::std::mem::transmute(patternsize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FillPhysical(&self, start: u64, size: u32, pattern: *const ::std::ffi::c_void, patternsize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(size), ::std::mem::transmute(pattern), ::std::mem::transmute(patternsize), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Memory")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_Memory`*"]
    pub unsafe fn QueryVirtual(&self, offset: u64) -> ::windows::runtime::Result<super::super::Memory::MEMORY_BASIC_INFORMATION64> {
        let mut result__: <super::super::Memory::MEMORY_BASIC_INFORMATION64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), &mut result__).from_abi::<super::super::Memory::MEMORY_BASIC_INFORMATION64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadImageNtHeaders(&self, imagebase: u64) -> ::windows::runtime::Result<IMAGE_NT_HEADERS64> {
        let mut result__: <IMAGE_NT_HEADERS64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self), ::std::mem::transmute(imagebase), &mut result__).from_abi::<IMAGE_NT_HEADERS64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadTagged(&self, tag: *const ::windows::runtime::GUID, offset: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, totalsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), ::std::mem::transmute(tag), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(totalsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StartEnumTagged(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNextTagged(&self, handle: u64, tag: *mut ::windows::runtime::GUID, size: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), ::std::mem::transmute(tag), ::std::mem::transmute(size)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EndEnumTagged(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugDataSpaces3 {
    type Vtable = IDebugDataSpaces3_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(603430252, 35503, 20348, [166, 7, 153, 149, 245, 64, 126, 99]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugDataSpaces3_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, length: u64, pattern: *const ::std::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, offset: u64, ptrs: *const u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, processor: u32, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, processor: u32, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, msr: u32, value: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, msr: u32, value: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, processor: u32, index: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#virtual: u64, physical: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, datatype: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u64, size: u32, pattern: *const ::std::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u64, size: u32, pattern: *const ::std::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Memory")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, info: *mut super::super::Memory::MEMORY_BASIC_INFORMATION64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Memory"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, imagebase: u64, headers: *mut IMAGE_NT_HEADERS64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, tag: *const ::windows::runtime::GUID, offset: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, totalsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, tag: *mut ::windows::runtime::GUID, size: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugDataSpaces4(::windows::runtime::IUnknown);
impl IDebugDataSpaces4 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadVirtual(&self, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteVirtual(&self, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SearchVirtual(&self, offset: u64, length: u64, pattern: *const ::std::ffi::c_void, patternsize: u32, patterngranularity: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(length), ::std::mem::transmute(pattern), ::std::mem::transmute(patternsize), ::std::mem::transmute(patterngranularity), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadVirtualUncached(&self, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteVirtualUncached(&self, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadPointersVirtual(&self, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(offset), ::std::mem::transmute(ptrs)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WritePointersVirtual(&self, count: u32, offset: u64, ptrs: *const u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(offset), ::std::mem::transmute(ptrs)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadPhysical(&self, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WritePhysical(&self, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadControl(&self, processor: u32, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(processor), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteControl(&self, processor: u32, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(processor), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadIo(&self, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(interfacetype), ::std::mem::transmute(busnumber), ::std::mem::transmute(addressspace), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteIo(&self, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(interfacetype), ::std::mem::transmute(busnumber), ::std::mem::transmute(addressspace), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadMsr(&self, msr: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(msr), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteMsr(&self, msr: u32, value: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(msr), ::std::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadBusData(&self, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(busdatatype), ::std::mem::transmute(busnumber), ::std::mem::transmute(slotnumber), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteBusData(&self, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), ::std::mem::transmute(busdatatype), ::std::mem::transmute(busnumber), ::std::mem::transmute(slotnumber), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CheckLowMemory(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadDebuggerData(&self, index: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(datasize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadProcessorSystemData(&self, processor: u32, index: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), ::std::mem::transmute(processor), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(datasize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn VirtualToPhysical(&self, r#virtual: u64) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#virtual), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetVirtualTranslationPhysicalOffsets(&self, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(r#virtual), ::std::mem::transmute(offsets), ::std::mem::transmute(offsetssize), ::std::mem::transmute(levels)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadHandleData(&self, handle: u64, datatype: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), ::std::mem::transmute(datatype), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(datasize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FillVirtual(&self, start: u64, size: u32, pattern: *const ::std::ffi::c_void, patternsize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(size), ::std::mem::transmute(pattern), ::std::mem::transmute(patternsize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FillPhysical(&self, start: u64, size: u32, pattern: *const ::std::ffi::c_void, patternsize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(size), ::std::mem::transmute(pattern), ::std::mem::transmute(patternsize), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Memory")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_Memory`*"]
    pub unsafe fn QueryVirtual(&self, offset: u64) -> ::windows::runtime::Result<super::super::Memory::MEMORY_BASIC_INFORMATION64> {
        let mut result__: <super::super::Memory::MEMORY_BASIC_INFORMATION64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), &mut result__).from_abi::<super::super::Memory::MEMORY_BASIC_INFORMATION64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadImageNtHeaders(&self, imagebase: u64) -> ::windows::runtime::Result<IMAGE_NT_HEADERS64> {
        let mut result__: <IMAGE_NT_HEADERS64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self), ::std::mem::transmute(imagebase), &mut result__).from_abi::<IMAGE_NT_HEADERS64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadTagged(&self, tag: *const ::windows::runtime::GUID, offset: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, totalsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), ::std::mem::transmute(tag), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(totalsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StartEnumTagged(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNextTagged(&self, handle: u64, tag: *mut ::windows::runtime::GUID, size: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), ::std::mem::transmute(tag), ::std::mem::transmute(size)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EndEnumTagged(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOffsetInformation(&self, space: u32, which: u32, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), ::std::mem::transmute(space), ::std::mem::transmute(which), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(infosize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNextDifferentlyValidOffsetVirtual(&self, offset: u64) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetValidRegionVirtual(&self, base: u64, size: u32, validbase: *mut u64, validsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), ::std::mem::transmute(base), ::std::mem::transmute(size), ::std::mem::transmute(validbase), ::std::mem::transmute(validsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SearchVirtual2(&self, offset: u64, length: u64, flags: u32, pattern: *const ::std::ffi::c_void, patternsize: u32, patterngranularity: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).37)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(length), ::std::mem::transmute(flags), ::std::mem::transmute(pattern), ::std::mem::transmute(patternsize), ::std::mem::transmute(patterngranularity), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ReadMultiByteStringVirtual(&self, offset: u64, maxbytes: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(maxbytes), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringbytes)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ReadMultiByteStringVirtualWide(&self, offset: u64, maxbytes: u32, codepage: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).39)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(maxbytes), ::std::mem::transmute(codepage), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringbytes)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ReadUnicodeStringVirtual(&self, offset: u64, maxbytes: u32, codepage: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(maxbytes), ::std::mem::transmute(codepage), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringbytes)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ReadUnicodeStringVirtualWide(&self, offset: u64, maxbytes: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).41)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(maxbytes), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringbytes)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadPhysical2(&self, offset: u64, flags: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(flags), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WritePhysical2(&self, offset: u64, flags: u32, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).43)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(flags), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugDataSpaces4 {
    type Vtable = IDebugDataSpaces4_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3649755679, 10729, 20213, [166, 192, 229, 51, 73, 136, 50, 18]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugDataSpaces4_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, length: u64, pattern: *const ::std::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, offset: u64, ptrs: *const u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, processor: u32, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, processor: u32, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, msr: u32, value: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, msr: u32, value: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, processor: u32, index: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#virtual: u64, physical: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, datatype: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u64, size: u32, pattern: *const ::std::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u64, size: u32, pattern: *const ::std::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Memory")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, info: *mut super::super::Memory::MEMORY_BASIC_INFORMATION64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Memory"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, imagebase: u64, headers: *mut IMAGE_NT_HEADERS64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, tag: *const ::windows::runtime::GUID, offset: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, totalsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, tag: *mut ::windows::runtime::GUID, size: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, space: u32, which: u32, offset: u64, buffer: *mut ::std::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, nextoffset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, base: u64, size: u32, validbase: *mut u64, validsize: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, length: u64, flags: u32, pattern: *const ::std::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, maxbytes: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, maxbytes: u32, codepage: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, maxbytes: u32, codepage: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, maxbytes: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, flags: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, flags: u32, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugDocument(::windows::runtime::IUnknown);
impl IDebugDocument {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self, dnt: DOCUMENTNAMETYPE) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(dnt), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDocumentClassId(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugDocument {
    type Vtable = IDebugDocument_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865825, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
impl ::std::convert::From<IDebugDocument> for IDebugDocumentInfo {
    fn from(value: IDebugDocument) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugDocument> for IDebugDocumentInfo {
    fn from(value: &IDebugDocument) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugDocumentInfo> for IDebugDocument {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugDocumentInfo> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugDocumentInfo>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugDocumentInfo> for &IDebugDocument {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugDocumentInfo> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugDocumentInfo>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugDocument_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dnt: DOCUMENTNAMETYPE, pbstrname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pclsiddocument: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugDocumentContext(::windows::runtime::IUnknown);
impl IDebugDocumentContext {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDocument(&self) -> ::windows::runtime::Result<IDebugDocument> {
        let mut result__: <IDebugDocument as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugDocument>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumCodeContexts(&self) -> ::windows::runtime::Result<IEnumDebugCodeContexts> {
        let mut result__: <IEnumDebugCodeContexts as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumDebugCodeContexts>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugDocumentContext {
    type Vtable = IDebugDocumentContext_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865832, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugDocumentContext_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppsd: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppescc: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugDocumentHelper32(::windows::runtime::IUnknown);
impl IDebugDocumentHelper32 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Init<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugApplication32>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pda: Param0, pszshortname: Param1, pszlongname: Param2, docattr: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), pda.into_param().abi(), pszshortname.into_param().abi(), pszlongname.into_param().abi(), ::std::mem::transmute(docattr)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Attach<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugDocumentHelper32>>(&self, pddhparent: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), pddhparent.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Detach(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddUnicodeText<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, psztext: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), psztext.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddDBCSText<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, psztext: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), psztext.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetDebugDocumentHost<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugDocumentHost>>(&self, pddh: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), pddh.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddDeferredText(&self, cchars: u32, dwtextstartcookie: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(cchars), ::std::mem::transmute(dwtextstartcookie)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn DefineScriptBlock<'a, Param2: ::windows::runtime::IntoParam<'a, IActiveScript>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(&self, ulcharoffset: u32, cchars: u32, pas: Param2, fscriptlet: Param3) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(ulcharoffset), ::std::mem::transmute(cchars), pas.into_param().abi(), fscriptlet.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetDefaultTextAttr(&self, statextattr: u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(statextattr)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetTextAttributes(&self, ulcharoffset: u32, cchars: u32, pstatextattr: *const u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(ulcharoffset), ::std::mem::transmute(cchars), ::std::mem::transmute(pstatextattr)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetLongName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pszlongname: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), pszlongname.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetShortName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pszshortname: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), pszshortname.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetDocumentAttr(&self, pszattributes: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(pszattributes)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDebugApplicationNode(&self) -> ::windows::runtime::Result<IDebugApplicationNode> {
        let mut result__: <IDebugApplicationNode as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugApplicationNode>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetScriptBlockInfo(&self, dwsourcecontext: u32, ppasd: *mut ::std::option::Option<IActiveScript>, picharpos: *mut u32, pcchars: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwsourcecontext), ::std::mem::transmute(ppasd), ::std::mem::transmute(picharpos), ::std::mem::transmute(pcchars)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateDebugDocumentContext(&self, icharpos: u32, cchars: u32) -> ::windows::runtime::Result<IDebugDocumentContext> {
        let mut result__: <IDebugDocumentContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(icharpos), ::std::mem::transmute(cchars), &mut result__).from_abi::<IDebugDocumentContext>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn BringDocumentToTop(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn BringDocumentContextToTop<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugDocumentContext>>(&self, pddc: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), pddc.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugDocumentHelper32 {
    type Vtable = IDebugDocumentHelper32_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865830, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugDocumentHelper32_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pda: ::windows::runtime::RawPtr, pszshortname: super::super::super::Foundation::PWSTR, pszlongname: super::super::super::Foundation::PWSTR, docattr: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pddhparent: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psztext: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psztext: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pddh: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, cchars: u32, dwtextstartcookie: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ulcharoffset: u32, cchars: u32, pas: ::windows::runtime::RawPtr, fscriptlet: super::super::super::Foundation::BOOL, pdwsourcecontext: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, statextattr: u16) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ulcharoffset: u32, cchars: u32, pstatextattr: *const u16) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszlongname: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszshortname: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszattributes: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppdan: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsourcecontext: u32, ppasd: *mut ::windows::runtime::RawPtr, picharpos: *mut u32, pcchars: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, icharpos: u32, cchars: u32, ppddc: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pddc: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugDocumentHelper64(::windows::runtime::IUnknown);
impl IDebugDocumentHelper64 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Init<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugApplication64>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pda: Param0, pszshortname: Param1, pszlongname: Param2, docattr: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), pda.into_param().abi(), pszshortname.into_param().abi(), pszlongname.into_param().abi(), ::std::mem::transmute(docattr)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Attach<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugDocumentHelper64>>(&self, pddhparent: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), pddhparent.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Detach(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddUnicodeText<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, psztext: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), psztext.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddDBCSText<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, psztext: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), psztext.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetDebugDocumentHost<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugDocumentHost>>(&self, pddh: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), pddh.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddDeferredText(&self, cchars: u32, dwtextstartcookie: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(cchars), ::std::mem::transmute(dwtextstartcookie)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn DefineScriptBlock<'a, Param2: ::windows::runtime::IntoParam<'a, IActiveScript>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(&self, ulcharoffset: u32, cchars: u32, pas: Param2, fscriptlet: Param3) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(ulcharoffset), ::std::mem::transmute(cchars), pas.into_param().abi(), fscriptlet.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetDefaultTextAttr(&self, statextattr: u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(statextattr)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetTextAttributes(&self, ulcharoffset: u32, cchars: u32, pstatextattr: *const u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(ulcharoffset), ::std::mem::transmute(cchars), ::std::mem::transmute(pstatextattr)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetLongName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pszlongname: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), pszlongname.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetShortName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pszshortname: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), pszshortname.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetDocumentAttr(&self, pszattributes: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(pszattributes)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDebugApplicationNode(&self) -> ::windows::runtime::Result<IDebugApplicationNode> {
        let mut result__: <IDebugApplicationNode as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugApplicationNode>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetScriptBlockInfo(&self, dwsourcecontext: u64, ppasd: *mut ::std::option::Option<IActiveScript>, picharpos: *mut u32, pcchars: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwsourcecontext), ::std::mem::transmute(ppasd), ::std::mem::transmute(picharpos), ::std::mem::transmute(pcchars)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateDebugDocumentContext(&self, icharpos: u32, cchars: u32) -> ::windows::runtime::Result<IDebugDocumentContext> {
        let mut result__: <IDebugDocumentContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(icharpos), ::std::mem::transmute(cchars), &mut result__).from_abi::<IDebugDocumentContext>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn BringDocumentToTop(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn BringDocumentContextToTop<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugDocumentContext>>(&self, pddc: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), pddc.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugDocumentHelper64 {
    type Vtable = IDebugDocumentHelper64_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3301389884, 8445, 18425, [189, 130, 72, 85, 224, 21, 8, 113]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugDocumentHelper64_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pda: ::windows::runtime::RawPtr, pszshortname: super::super::super::Foundation::PWSTR, pszlongname: super::super::super::Foundation::PWSTR, docattr: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pddhparent: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psztext: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psztext: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pddh: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, cchars: u32, dwtextstartcookie: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ulcharoffset: u32, cchars: u32, pas: ::windows::runtime::RawPtr, fscriptlet: super::super::super::Foundation::BOOL, pdwsourcecontext: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, statextattr: u16) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ulcharoffset: u32, cchars: u32, pstatextattr: *const u16) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszlongname: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszshortname: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszattributes: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppdan: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwsourcecontext: u64, ppasd: *mut ::windows::runtime::RawPtr, picharpos: *mut u32, pcchars: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, icharpos: u32, cchars: u32, ppddc: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pddc: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugDocumentHost(::windows::runtime::IUnknown);
impl IDebugDocumentHost {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDeferredText(&self, dwtextstartcookie: u32, pchartext: super::super::super::Foundation::PWSTR, pstatextattr: *mut u16, pcnumchars: *mut u32, cmaxchars: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwtextstartcookie), ::std::mem::transmute(pchartext), ::std::mem::transmute(pstatextattr), ::std::mem::transmute(pcnumchars), ::std::mem::transmute(cmaxchars)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetScriptTextAttributes<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pstrcode: Param0, unumcodechars: u32, pstrdelimiter: Param2, dwflags: u32, pattr: *mut u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), pstrcode.into_param().abi(), ::std::mem::transmute(unumcodechars), pstrdelimiter.into_param().abi(), ::std::mem::transmute(dwflags), ::std::mem::transmute(pattr)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnCreateDocumentContext(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetPathName(&self, pbstrlongname: *mut super::super::super::Foundation::BSTR, pfisoriginalfile: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(pbstrlongname), ::std::mem::transmute(pfisoriginalfile)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetFileName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn NotifyChanged(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugDocumentHost {
    type Vtable = IDebugDocumentHost_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865831, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugDocumentHost_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwtextstartcookie: u32, pchartext: super::super::super::Foundation::PWSTR, pstatextattr: *mut u16, pcnumchars: *mut u32, cmaxchars: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppunkouter: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstrlongname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, pfisoriginalfile: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstrshortname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugDocumentInfo(::windows::runtime::IUnknown);
impl IDebugDocumentInfo {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self, dnt: DOCUMENTNAMETYPE) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(dnt), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDocumentClassId(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugDocumentInfo {
    type Vtable = IDebugDocumentInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865823, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugDocumentInfo_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dnt: DOCUMENTNAMETYPE, pbstrname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pclsiddocument: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugDocumentProvider(::windows::runtime::IUnknown);
impl IDebugDocumentProvider {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self, dnt: DOCUMENTNAMETYPE) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(dnt), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDocumentClassId(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDocument(&self) -> ::windows::runtime::Result<IDebugDocument> {
        let mut result__: <IDebugDocument as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugDocument>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugDocumentProvider {
    type Vtable = IDebugDocumentProvider_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865824, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
impl ::std::convert::From<IDebugDocumentProvider> for IDebugDocumentInfo {
    fn from(value: IDebugDocumentProvider) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugDocumentProvider> for IDebugDocumentInfo {
    fn from(value: &IDebugDocumentProvider) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugDocumentInfo> for IDebugDocumentProvider {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugDocumentInfo> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugDocumentInfo>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugDocumentInfo> for &IDebugDocumentProvider {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugDocumentInfo> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugDocumentInfo>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugDocumentProvider_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dnt: DOCUMENTNAMETYPE, pbstrname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pclsiddocument: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppssd: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugDocumentText(::windows::runtime::IUnknown);
impl IDebugDocumentText {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self, dnt: DOCUMENTNAMETYPE) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(dnt), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDocumentClassId(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDocumentAttributes(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSize(&self, pcnumlines: *mut u32, pcnumchars: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(pcnumlines), ::std::mem::transmute(pcnumchars)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetPositionOfLine(&self, clinenumber: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(clinenumber), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetLineOfPosition(&self, ccharacterposition: u32, pclinenumber: *mut u32, pccharacteroffsetinline: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(ccharacterposition), ::std::mem::transmute(pclinenumber), ::std::mem::transmute(pccharacteroffsetinline)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetText(&self, ccharacterposition: u32, pchartext: super::super::super::Foundation::PWSTR, pstatextattr: *mut u16, pcnumchars: *mut u32, cmaxchars: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(ccharacterposition), ::std::mem::transmute(pchartext), ::std::mem::transmute(pstatextattr), ::std::mem::transmute(pcnumchars), ::std::mem::transmute(cmaxchars)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetPositionOfContext<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugDocumentContext>>(&self, psc: Param0, pccharacterposition: *mut u32, cnumchars: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), psc.into_param().abi(), ::std::mem::transmute(pccharacterposition), ::std::mem::transmute(cnumchars)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContextOfPosition(&self, ccharacterposition: u32, cnumchars: u32) -> ::windows::runtime::Result<IDebugDocumentContext> {
        let mut result__: <IDebugDocumentContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(ccharacterposition), ::std::mem::transmute(cnumchars), &mut result__).from_abi::<IDebugDocumentContext>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugDocumentText {
    type Vtable = IDebugDocumentText_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865826, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
impl ::std::convert::From<IDebugDocumentText> for IDebugDocument {
    fn from(value: IDebugDocumentText) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugDocumentText> for IDebugDocument {
    fn from(value: &IDebugDocumentText) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugDocument> for IDebugDocumentText {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugDocument> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugDocument>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugDocument> for &IDebugDocumentText {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugDocument> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugDocument>::into(::std::clone::Clone::clone(self)))
    }
}
impl ::std::convert::From<IDebugDocumentText> for IDebugDocumentInfo {
    fn from(value: IDebugDocumentText) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugDocumentText> for IDebugDocumentInfo {
    fn from(value: &IDebugDocumentText) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugDocumentInfo> for IDebugDocumentText {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugDocumentInfo> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugDocumentInfo>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugDocumentInfo> for &IDebugDocumentText {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugDocumentInfo> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugDocumentInfo>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugDocumentText_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dnt: DOCUMENTNAMETYPE, pbstrname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pclsiddocument: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptextdocattr: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcnumlines: *mut u32, pcnumchars: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, clinenumber: u32, pccharacterposition: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ccharacterposition: u32, pclinenumber: *mut u32, pccharacteroffsetinline: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ccharacterposition: u32, pchartext: super::super::super::Foundation::PWSTR, pstatextattr: *mut u16, pcnumchars: *mut u32, cmaxchars: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psc: ::windows::runtime::RawPtr, pccharacterposition: *mut u32, cnumchars: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ccharacterposition: u32, cnumchars: u32, ppsc: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugDocumentTextAuthor(::windows::runtime::IUnknown);
impl IDebugDocumentTextAuthor {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self, dnt: DOCUMENTNAMETYPE) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(dnt), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDocumentClassId(&self) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDocumentAttributes(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSize(&self, pcnumlines: *mut u32, pcnumchars: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(pcnumlines), ::std::mem::transmute(pcnumchars)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetPositionOfLine(&self, clinenumber: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(clinenumber), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetLineOfPosition(&self, ccharacterposition: u32, pclinenumber: *mut u32, pccharacteroffsetinline: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(ccharacterposition), ::std::mem::transmute(pclinenumber), ::std::mem::transmute(pccharacteroffsetinline)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetText(&self, ccharacterposition: u32, pchartext: super::super::super::Foundation::PWSTR, pstatextattr: *mut u16, pcnumchars: *mut u32, cmaxchars: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(ccharacterposition), ::std::mem::transmute(pchartext), ::std::mem::transmute(pstatextattr), ::std::mem::transmute(pcnumchars), ::std::mem::transmute(cmaxchars)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetPositionOfContext<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugDocumentContext>>(&self, psc: Param0, pccharacterposition: *mut u32, cnumchars: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), psc.into_param().abi(), ::std::mem::transmute(pccharacterposition), ::std::mem::transmute(cnumchars)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContextOfPosition(&self, ccharacterposition: u32, cnumchars: u32) -> ::windows::runtime::Result<IDebugDocumentContext> {
        let mut result__: <IDebugDocumentContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(ccharacterposition), ::std::mem::transmute(cnumchars), &mut result__).from_abi::<IDebugDocumentContext>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn InsertText<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, ccharacterposition: u32, cnumtoinsert: u32, pchartext: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(ccharacterposition), ::std::mem::transmute(cnumtoinsert), pchartext.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveText(&self, ccharacterposition: u32, cnumtoremove: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(ccharacterposition), ::std::mem::transmute(cnumtoremove)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ReplaceText<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, ccharacterposition: u32, cnumtoreplace: u32, pchartext: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(ccharacterposition), ::std::mem::transmute(cnumtoreplace), pchartext.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugDocumentTextAuthor {
    type Vtable = IDebugDocumentTextAuthor_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865828, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
impl ::std::convert::From<IDebugDocumentTextAuthor> for IDebugDocumentText {
    fn from(value: IDebugDocumentTextAuthor) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugDocumentTextAuthor> for IDebugDocumentText {
    fn from(value: &IDebugDocumentTextAuthor) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugDocumentText> for IDebugDocumentTextAuthor {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugDocumentText> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugDocumentText>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugDocumentText> for &IDebugDocumentTextAuthor {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugDocumentText> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugDocumentText>::into(::std::clone::Clone::clone(self)))
    }
}
impl ::std::convert::From<IDebugDocumentTextAuthor> for IDebugDocument {
    fn from(value: IDebugDocumentTextAuthor) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugDocumentTextAuthor> for IDebugDocument {
    fn from(value: &IDebugDocumentTextAuthor) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugDocument> for IDebugDocumentTextAuthor {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugDocument> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugDocument>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugDocument> for &IDebugDocumentTextAuthor {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugDocument> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugDocument>::into(::std::clone::Clone::clone(self)))
    }
}
impl ::std::convert::From<IDebugDocumentTextAuthor> for IDebugDocumentInfo {
    fn from(value: IDebugDocumentTextAuthor) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugDocumentTextAuthor> for IDebugDocumentInfo {
    fn from(value: &IDebugDocumentTextAuthor) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugDocumentInfo> for IDebugDocumentTextAuthor {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugDocumentInfo> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugDocumentInfo>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugDocumentInfo> for &IDebugDocumentTextAuthor {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugDocumentInfo> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugDocumentInfo>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugDocumentTextAuthor_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dnt: DOCUMENTNAMETYPE, pbstrname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pclsiddocument: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ptextdocattr: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcnumlines: *mut u32, pcnumchars: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, clinenumber: u32, pccharacterposition: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ccharacterposition: u32, pclinenumber: *mut u32, pccharacteroffsetinline: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ccharacterposition: u32, pchartext: super::super::super::Foundation::PWSTR, pstatextattr: *mut u16, pcnumchars: *mut u32, cmaxchars: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psc: ::windows::runtime::RawPtr, pccharacterposition: *mut u32, cnumchars: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ccharacterposition: u32, cnumchars: u32, ppsc: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ccharacterposition: u32, cnumtoinsert: u32, pchartext: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ccharacterposition: u32, cnumtoremove: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ccharacterposition: u32, cnumtoreplace: u32, pchartext: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugDocumentTextEvents(::windows::runtime::IUnknown);
impl IDebugDocumentTextEvents {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn onDestroy(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn onInsertText(&self, ccharacterposition: u32, cnumtoinsert: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(ccharacterposition), ::std::mem::transmute(cnumtoinsert)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn onRemoveText(&self, ccharacterposition: u32, cnumtoremove: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(ccharacterposition), ::std::mem::transmute(cnumtoremove)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn onReplaceText(&self, ccharacterposition: u32, cnumtoreplace: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(ccharacterposition), ::std::mem::transmute(cnumtoreplace)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn onUpdateTextAttributes(&self, ccharacterposition: u32, cnumtoupdate: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(ccharacterposition), ::std::mem::transmute(cnumtoupdate)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn onUpdateDocumentAttributes(&self, textdocattr: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(textdocattr)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugDocumentTextEvents {
    type Vtable = IDebugDocumentTextEvents_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865827, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugDocumentTextEvents_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ccharacterposition: u32, cnumtoinsert: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ccharacterposition: u32, cnumtoremove: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ccharacterposition: u32, cnumtoreplace: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ccharacterposition: u32, cnumtoupdate: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, textdocattr: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugDocumentTextExternalAuthor(::windows::runtime::IUnknown);
impl IDebugDocumentTextExternalAuthor {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetPathName(&self, pbstrlongname: *mut super::super::super::Foundation::BSTR, pfisoriginalfile: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(pbstrlongname), ::std::mem::transmute(pfisoriginalfile)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetFileName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn NotifyChanged(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugDocumentTextExternalAuthor {
    type Vtable = IDebugDocumentTextExternalAuthor_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865829, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugDocumentTextExternalAuthor_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstrlongname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, pfisoriginalfile: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstrshortname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugEventCallbacks(::windows::runtime::IUnknown);
impl IDebugEventCallbacks {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInterestMask(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Breakpoint<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugBreakpoint>>(&self, bp: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), bp.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Exception(&self, exception: *const EXCEPTION_RECORD64, firstchance: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(exception), ::std::mem::transmute(firstchance)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateThread(&self, handle: u64, dataoffset: u64, startoffset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), ::std::mem::transmute(dataoffset), ::std::mem::transmute(startoffset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ExitThread(&self, exitcode: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(exitcode)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessA<'a, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: Param4, imagename: Param5, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(imagefilehandle),
            ::std::mem::transmute(handle),
            ::std::mem::transmute(baseoffset),
            ::std::mem::transmute(modulesize),
            modulename.into_param().abi(),
            imagename.into_param().abi(),
            ::std::mem::transmute(checksum),
            ::std::mem::transmute(timedatestamp),
            ::std::mem::transmute(initialthreadhandle),
            ::std::mem::transmute(threaddataoffset),
            ::std::mem::transmute(startoffset),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ExitProcess(&self, exitcode: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(exitcode)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn LoadModule<'a, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: Param3, imagename: Param4, checksum: u32, timedatestamp: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(imagefilehandle), ::std::mem::transmute(baseoffset), ::std::mem::transmute(modulesize), modulename.into_param().abi(), imagename.into_param().abi(), ::std::mem::transmute(checksum), ::std::mem::transmute(timedatestamp)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn UnloadModule<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, imagebasename: Param0, baseoffset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), imagebasename.into_param().abi(), ::std::mem::transmute(baseoffset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SystemError(&self, error: u32, level: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(error), ::std::mem::transmute(level)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SessionStatus(&self, status: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(status)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ChangeDebuggeeState(&self, flags: u32, argument: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(argument)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ChangeEngineState(&self, flags: u32, argument: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(argument)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ChangeSymbolState(&self, flags: u32, argument: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(argument)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugEventCallbacks {
    type Vtable = IDebugEventCallbacks_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(863756939, 20534, 19826, [182, 191, 196, 95, 187, 159, 46, 170]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugEventCallbacks_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bp: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, exception: *const EXCEPTION_RECORD64, firstchance: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, dataoffset: u64, startoffset: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, exitcode: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PSTR, imagename: super::super::super::Foundation::PSTR, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, exitcode: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PSTR, imagename: super::super::super::Foundation::PSTR, checksum: u32, timedatestamp: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, imagebasename: super::super::super::Foundation::PSTR, baseoffset: u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, error: u32, level: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, status: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, argument: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, argument: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, argument: u64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugEventCallbacksWide(::windows::runtime::IUnknown);
impl IDebugEventCallbacksWide {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInterestMask(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Breakpoint<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugBreakpoint2>>(&self, bp: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), bp.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Exception(&self, exception: *const EXCEPTION_RECORD64, firstchance: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(exception), ::std::mem::transmute(firstchance)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateThread(&self, handle: u64, dataoffset: u64, startoffset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), ::std::mem::transmute(dataoffset), ::std::mem::transmute(startoffset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ExitThread(&self, exitcode: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(exitcode)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessA<'a, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: Param4, imagename: Param5, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(imagefilehandle),
            ::std::mem::transmute(handle),
            ::std::mem::transmute(baseoffset),
            ::std::mem::transmute(modulesize),
            modulename.into_param().abi(),
            imagename.into_param().abi(),
            ::std::mem::transmute(checksum),
            ::std::mem::transmute(timedatestamp),
            ::std::mem::transmute(initialthreadhandle),
            ::std::mem::transmute(threaddataoffset),
            ::std::mem::transmute(startoffset),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ExitProcess(&self, exitcode: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(exitcode)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn LoadModule<'a, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: Param3, imagename: Param4, checksum: u32, timedatestamp: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(imagefilehandle), ::std::mem::transmute(baseoffset), ::std::mem::transmute(modulesize), modulename.into_param().abi(), imagename.into_param().abi(), ::std::mem::transmute(checksum), ::std::mem::transmute(timedatestamp)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn UnloadModule<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, imagebasename: Param0, baseoffset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), imagebasename.into_param().abi(), ::std::mem::transmute(baseoffset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SystemError(&self, error: u32, level: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(error), ::std::mem::transmute(level)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SessionStatus(&self, status: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(status)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ChangeDebuggeeState(&self, flags: u32, argument: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(argument)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ChangeEngineState(&self, flags: u32, argument: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(argument)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ChangeSymbolState(&self, flags: u32, argument: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(argument)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugEventCallbacksWide {
    type Vtable = IDebugEventCallbacksWide_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(110157894, 39971, 17836, [160, 79, 152, 122, 194, 154, 208, 211]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugEventCallbacksWide_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bp: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, exception: *const EXCEPTION_RECORD64, firstchance: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, dataoffset: u64, startoffset: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, exitcode: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PWSTR, imagename: super::super::super::Foundation::PWSTR, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, exitcode: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PWSTR, imagename: super::super::super::Foundation::PWSTR, checksum: u32, timedatestamp: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, imagebasename: super::super::super::Foundation::PWSTR, baseoffset: u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, error: u32, level: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, status: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, argument: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, argument: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, argument: u64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugEventContextCallbacks(::windows::runtime::IUnknown);
impl IDebugEventContextCallbacks {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInterestMask(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Breakpoint<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugBreakpoint2>>(&self, bp: Param0, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), bp.into_param().abi(), ::std::mem::transmute(context), ::std::mem::transmute(contextsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Exception(&self, exception: *const EXCEPTION_RECORD64, firstchance: u32, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(exception), ::std::mem::transmute(firstchance), ::std::mem::transmute(context), ::std::mem::transmute(contextsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateThread(&self, handle: u64, dataoffset: u64, startoffset: u64, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), ::std::mem::transmute(dataoffset), ::std::mem::transmute(startoffset), ::std::mem::transmute(context), ::std::mem::transmute(contextsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ExitThread(&self, exitcode: u32, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(exitcode), ::std::mem::transmute(context), ::std::mem::transmute(contextsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateProcessA<'a, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(
        &self,
        imagefilehandle: u64,
        handle: u64,
        baseoffset: u64,
        modulesize: u32,
        modulename: Param4,
        imagename: Param5,
        checksum: u32,
        timedatestamp: u32,
        initialthreadhandle: u64,
        threaddataoffset: u64,
        startoffset: u64,
        context: *const ::std::ffi::c_void,
        contextsize: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(imagefilehandle),
            ::std::mem::transmute(handle),
            ::std::mem::transmute(baseoffset),
            ::std::mem::transmute(modulesize),
            modulename.into_param().abi(),
            imagename.into_param().abi(),
            ::std::mem::transmute(checksum),
            ::std::mem::transmute(timedatestamp),
            ::std::mem::transmute(initialthreadhandle),
            ::std::mem::transmute(threaddataoffset),
            ::std::mem::transmute(startoffset),
            ::std::mem::transmute(context),
            ::std::mem::transmute(contextsize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ExitProcess(&self, exitcode: u32, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(exitcode), ::std::mem::transmute(context), ::std::mem::transmute(contextsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn LoadModule<'a, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: Param3, imagename: Param4, checksum: u32, timedatestamp: u32, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(imagefilehandle),
            ::std::mem::transmute(baseoffset),
            ::std::mem::transmute(modulesize),
            modulename.into_param().abi(),
            imagename.into_param().abi(),
            ::std::mem::transmute(checksum),
            ::std::mem::transmute(timedatestamp),
            ::std::mem::transmute(context),
            ::std::mem::transmute(contextsize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn UnloadModule<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, imagebasename: Param0, baseoffset: u64, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), imagebasename.into_param().abi(), ::std::mem::transmute(baseoffset), ::std::mem::transmute(context), ::std::mem::transmute(contextsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SystemError(&self, error: u32, level: u32, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(error), ::std::mem::transmute(level), ::std::mem::transmute(context), ::std::mem::transmute(contextsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SessionStatus(&self, status: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(status)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ChangeDebuggeeState(&self, flags: u32, argument: u64, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(argument), ::std::mem::transmute(context), ::std::mem::transmute(contextsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ChangeEngineState(&self, flags: u32, argument: u64, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(argument), ::std::mem::transmute(context), ::std::mem::transmute(contextsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ChangeSymbolState(&self, flags: u32, argument: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(argument)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugEventContextCallbacks {
    type Vtable = IDebugEventContextCallbacks_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1638174811, 9209, 16967, [179, 197, 83, 208, 135, 82, 154, 183]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugEventContextCallbacks_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, bp: ::windows::runtime::RawPtr, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, exception: *const EXCEPTION_RECORD64, firstchance: u32, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, dataoffset: u64, startoffset: u64, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, exitcode: u32, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PWSTR, imagename: super::super::super::Foundation::PWSTR, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, exitcode: u32, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PWSTR, imagename: super::super::super::Foundation::PWSTR, checksum: u32, timedatestamp: u32, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, imagebasename: super::super::super::Foundation::PWSTR, baseoffset: u64, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, error: u32, level: u32, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, status: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, argument: u64, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, argument: u64, context: *const ::std::ffi::c_void, contextsize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, argument: u64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugExpression(::windows::runtime::IUnknown);
impl IDebugExpression {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Start<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugExpressionCallBack>>(&self, pdecb: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), pdecb.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Abort(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn QueryIsComplete(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetResultAsString(&self, phrresult: *mut ::windows::runtime::HRESULT, pbstrresult: *mut super::super::super::Foundation::BSTR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(phrresult), ::std::mem::transmute(pbstrresult)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetResultAsDebugProperty(&self, phrresult: *mut ::windows::runtime::HRESULT, ppdp: *mut ::std::option::Option<IDebugProperty>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(phrresult), ::std::mem::transmute(ppdp)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugExpression {
    type Vtable = IDebugExpression_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865812, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugExpression_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdecb: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, phrresult: *mut ::windows::runtime::HRESULT, pbstrresult: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, phrresult: *mut ::windows::runtime::HRESULT, ppdp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugExpressionCallBack(::windows::runtime::IUnknown);
impl IDebugExpressionCallBack {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn onComplete(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugExpressionCallBack {
    type Vtable = IDebugExpressionCallBack_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865814, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugExpressionCallBack_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugExpressionContext(::windows::runtime::IUnknown);
impl IDebugExpressionContext {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ParseLanguageText<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pstrcode: Param0, nradix: u32, pstrdelimiter: Param2, dwflags: u32) -> ::windows::runtime::Result<IDebugExpression> {
        let mut result__: <IDebugExpression as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), pstrcode.into_param().abi(), ::std::mem::transmute(nradix), pstrdelimiter.into_param().abi(), ::std::mem::transmute(dwflags), &mut result__).from_abi::<IDebugExpression>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLanguageInfo(&self, pbstrlanguagename: *mut super::super::super::Foundation::BSTR, planguageid: *mut ::windows::runtime::GUID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(pbstrlanguagename), ::std::mem::transmute(planguageid)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugExpressionContext {
    type Vtable = IDebugExpressionContext_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865813, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugExpressionContext_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstrcode: super::super::super::Foundation::PWSTR, nradix: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, ppe: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstrlanguagename: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, planguageid: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugExtendedProperty(::windows::runtime::IUnknown);
impl IDebugExtendedProperty {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetPropertyInfo(&self, dwfieldspec: u32, nradix: u32) -> ::windows::runtime::Result<DebugPropertyInfo> {
        let mut result__: <DebugPropertyInfo as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwfieldspec), ::std::mem::transmute(nradix), &mut result__).from_abi::<DebugPropertyInfo>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetExtendedInfo(&self, cinfos: u32, rgguidextendedinfo: *const ::windows::runtime::GUID, rgvar: *mut super::super::Com::VARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(cinfos), ::std::mem::transmute(rgguidextendedinfo), ::std::mem::transmute(rgvar)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetValueAsString<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pszvalue: Param0, nradix: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), pszvalue.into_param().abi(), ::std::mem::transmute(nradix)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumMembers(&self, dwfieldspec: u32, nradix: u32, refiid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<IEnumDebugPropertyInfo> {
        let mut result__: <IEnumDebugPropertyInfo as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwfieldspec), ::std::mem::transmute(nradix), ::std::mem::transmute(refiid), &mut result__).from_abi::<IEnumDebugPropertyInfo>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetParent(&self) -> ::windows::runtime::Result<IDebugProperty> {
        let mut result__: <IDebugProperty as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugProperty>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetExtendedPropertyInfo(&self, dwfieldspec: u32, nradix: u32) -> ::windows::runtime::Result<ExtendedDebugPropertyInfo> {
        let mut result__: <ExtendedDebugPropertyInfo as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwfieldspec), ::std::mem::transmute(nradix), &mut result__).from_abi::<ExtendedDebugPropertyInfo>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumExtendedMembers(&self, dwfieldspec: u32, nradix: u32) -> ::windows::runtime::Result<IEnumDebugExtendedPropertyInfo> {
        let mut result__: <IEnumDebugExtendedPropertyInfo as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwfieldspec), ::std::mem::transmute(nradix), &mut result__).from_abi::<IEnumDebugExtendedPropertyInfo>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugExtendedProperty {
    type Vtable = IDebugExtendedProperty_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865874, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
impl ::std::convert::From<IDebugExtendedProperty> for IDebugProperty {
    fn from(value: IDebugExtendedProperty) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugExtendedProperty> for IDebugProperty {
    fn from(value: &IDebugExtendedProperty) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugProperty> for IDebugExtendedProperty {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugProperty> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugProperty>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugProperty> for &IDebugExtendedProperty {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugProperty> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugProperty>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugExtendedProperty_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwfieldspec: u32, nradix: u32, ppropertyinfo: *mut ::std::mem::ManuallyDrop<DebugPropertyInfo>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, cinfos: u32, rgguidextendedinfo: *const ::windows::runtime::GUID, rgvar: *mut ::std::mem::ManuallyDrop<super::super::Com::VARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszvalue: super::super::super::Foundation::PWSTR, nradix: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwfieldspec: u32, nradix: u32, refiid: *const ::windows::runtime::GUID, ppepi: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppdebugprop: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwfieldspec: u32, nradix: u32, pextendedpropertyinfo: *mut ::std::mem::ManuallyDrop<ExtendedDebugPropertyInfo>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwfieldspec: u32, nradix: u32, ppeepi: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugFormatter(::windows::runtime::IUnknown);
impl IDebugFormatter {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetStringForVariant(&self, pvar: *const super::super::Com::VARIANT, nradix: u32) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(pvar), ::std::mem::transmute(nradix), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetVariantForString<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pwstrvalue: Param0) -> ::windows::runtime::Result<super::super::Com::VARIANT> {
        let mut result__: <super::super::Com::VARIANT as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), pwstrvalue.into_param().abi(), &mut result__).from_abi::<super::super::Com::VARIANT>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetStringForVarType(&self, vt: u16, ptdescarraytype: *const super::super::Ole::Automation::TYPEDESC) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(vt), ::std::mem::transmute(ptdescarraytype), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugFormatter {
    type Vtable = IDebugFormatter_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865797, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugFormatter_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pvar: *const ::std::mem::ManuallyDrop<super::super::Com::VARIANT>, nradix: u32, pbstrvalue: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwstrvalue: super::super::super::Foundation::PWSTR, pvar: *mut ::std::mem::ManuallyDrop<super::super::Com::VARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, vt: u16, ptdescarraytype: *const super::super::Ole::Automation::TYPEDESC, pbstr: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHelper(::windows::runtime::IUnknown);
impl IDebugHelper {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CreatePropertyBrowser<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, IDebugApplicationThread>>(&self, pvar: *const super::super::Com::VARIANT, bstrname: Param1, pdat: Param2) -> ::windows::runtime::Result<IDebugProperty> {
        let mut result__: <IDebugProperty as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(pvar), bstrname.into_param().abi(), pdat.into_param().abi(), &mut result__).from_abi::<IDebugProperty>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CreatePropertyBrowserEx<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, IDebugApplicationThread>, Param3: ::windows::runtime::IntoParam<'a, IDebugFormatter>>(&self, pvar: *const super::super::Com::VARIANT, bstrname: Param1, pdat: Param2, pdf: Param3) -> ::windows::runtime::Result<IDebugProperty> {
        let mut result__: <IDebugProperty as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(pvar), bstrname.into_param().abi(), pdat.into_param().abi(), pdf.into_param().abi(), &mut result__).from_abi::<IDebugProperty>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CreateSimpleConnectionPoint<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Ole::Automation::IDispatch>>(&self, pdisp: Param0) -> ::windows::runtime::Result<ISimpleConnectionPoint> {
        let mut result__: <ISimpleConnectionPoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), pdisp.into_param().abi(), &mut result__).from_abi::<ISimpleConnectionPoint>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHelper {
    type Vtable = IDebugHelper_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865855, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHelper_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pvar: *const ::std::mem::ManuallyDrop<super::super::Com::VARIANT>, bstrname: super::super::super::Foundation::PWSTR, pdat: ::windows::runtime::RawPtr, ppdob: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pvar: *const ::std::mem::ManuallyDrop<super::super::Com::VARIANT>, bstrname: super::super::super::Foundation::PWSTR, pdat: ::windows::runtime::RawPtr, pdf: ::windows::runtime::RawPtr, ppdob: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_System_Ole_Automation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdisp: ::windows::runtime::RawPtr, ppscp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHost(::windows::runtime::IUnknown);
impl IDebugHost {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetHostDefinedInterface(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentContext(&self) -> ::windows::runtime::Result<IDebugHostContext> {
        let mut result__: <IDebugHostContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostContext>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDefaultMetadata(&self) -> ::windows::runtime::Result<IKeyStore> {
        let mut result__: <IKeyStore as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IKeyStore>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHost {
    type Vtable = IDebugHost_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3100068163, 27436, 20203, [181, 197, 53, 211, 120, 166, 217, 157]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHost_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hostunk: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, defaultmetadatastore: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostBaseClass(::windows::runtime::IUnknown);
impl IDebugHostBaseClass {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContext(&self) -> ::windows::runtime::Result<IDebugHostContext> {
        let mut result__: <IDebugHostContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostContext>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn EnumerateChildren<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, kind: SymbolKind, name: Param1) -> ::windows::runtime::Result<IDebugHostSymbolEnumerator> {
        let mut result__: <IDebugHostSymbolEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(kind), name.into_param().abi(), &mut result__).from_abi::<IDebugHostSymbolEnumerator>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolKind(&self) -> ::windows::runtime::Result<SymbolKind> {
        let mut result__: <SymbolKind as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<SymbolKind>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetType(&self) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContainingModule(&self) -> ::windows::runtime::Result<IDebugHostModule> {
        let mut result__: <IDebugHostModule as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostModule>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CompareAgainst<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostSymbol>>(&self, pcomparisonsymbol: Param0, comparisonflags: u32) -> ::windows::runtime::Result<bool> {
        let mut result__: <bool as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), pcomparisonsymbol.into_param().abi(), ::std::mem::transmute(comparisonflags), &mut result__).from_abi::<bool>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostBaseClass {
    type Vtable = IDebugHostBaseClass_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3108853714, 14603, 16631, [181, 180, 182, 219, 137, 125, 151, 75]);
}
impl ::std::convert::From<IDebugHostBaseClass> for IDebugHostSymbol {
    fn from(value: IDebugHostBaseClass) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugHostBaseClass> for IDebugHostSymbol {
    fn from(value: &IDebugHostBaseClass) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostSymbol> for IDebugHostBaseClass {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostSymbol> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostSymbol>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostSymbol> for &IDebugHostBaseClass {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostSymbol> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostSymbol>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostBaseClass_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, ppenum: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: *mut SymbolKind) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbolname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, containingmodule: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcomparisonsymbol: ::windows::runtime::RawPtr, comparisonflags: u32, pmatches: *mut bool) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostConstant(::windows::runtime::IUnknown);
impl IDebugHostConstant {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContext(&self) -> ::windows::runtime::Result<IDebugHostContext> {
        let mut result__: <IDebugHostContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostContext>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn EnumerateChildren<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, kind: SymbolKind, name: Param1) -> ::windows::runtime::Result<IDebugHostSymbolEnumerator> {
        let mut result__: <IDebugHostSymbolEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(kind), name.into_param().abi(), &mut result__).from_abi::<IDebugHostSymbolEnumerator>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolKind(&self) -> ::windows::runtime::Result<SymbolKind> {
        let mut result__: <SymbolKind as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<SymbolKind>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetType(&self) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContainingModule(&self) -> ::windows::runtime::Result<IDebugHostModule> {
        let mut result__: <IDebugHostModule as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostModule>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CompareAgainst<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostSymbol>>(&self, pcomparisonsymbol: Param0, comparisonflags: u32) -> ::windows::runtime::Result<bool> {
        let mut result__: <bool as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), pcomparisonsymbol.into_param().abi(), ::std::mem::transmute(comparisonflags), &mut result__).from_abi::<bool>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetValue(&self) -> ::windows::runtime::Result<super::super::Com::VARIANT> {
        let mut result__: <super::super::Com::VARIANT as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Com::VARIANT>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostConstant {
    type Vtable = IDebugHostConstant_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1652063964, 64118, 18064, [189, 113, 94, 140, 62, 41, 55, 236]);
}
impl ::std::convert::From<IDebugHostConstant> for IDebugHostSymbol {
    fn from(value: IDebugHostConstant) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugHostConstant> for IDebugHostSymbol {
    fn from(value: &IDebugHostConstant) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostSymbol> for IDebugHostConstant {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostSymbol> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostSymbol>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostSymbol> for &IDebugHostConstant {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostSymbol> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostSymbol>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostConstant_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, ppenum: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: *mut SymbolKind) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbolname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, containingmodule: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcomparisonsymbol: ::windows::runtime::RawPtr, comparisonflags: u32, pmatches: *mut bool) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, value: *mut ::std::mem::ManuallyDrop<super::super::Com::VARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostContext(::windows::runtime::IUnknown);
impl IDebugHostContext {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsEqualTo<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>>(&self, pcontext: Param0) -> ::windows::runtime::Result<bool> {
        let mut result__: <bool as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), pcontext.into_param().abi(), &mut result__).from_abi::<bool>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostContext {
    type Vtable = IDebugHostContext_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2794221784, 24256, 18149, [183, 117, 49, 52, 164, 142, 162, 227]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostContext_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcontext: ::windows::runtime::RawPtr, pisequal: *mut bool) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostData(::windows::runtime::IUnknown);
impl IDebugHostData {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContext(&self) -> ::windows::runtime::Result<IDebugHostContext> {
        let mut result__: <IDebugHostContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostContext>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn EnumerateChildren<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, kind: SymbolKind, name: Param1) -> ::windows::runtime::Result<IDebugHostSymbolEnumerator> {
        let mut result__: <IDebugHostSymbolEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(kind), name.into_param().abi(), &mut result__).from_abi::<IDebugHostSymbolEnumerator>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolKind(&self) -> ::windows::runtime::Result<SymbolKind> {
        let mut result__: <SymbolKind as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<SymbolKind>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetType(&self) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContainingModule(&self) -> ::windows::runtime::Result<IDebugHostModule> {
        let mut result__: <IDebugHostModule as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostModule>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CompareAgainst<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostSymbol>>(&self, pcomparisonsymbol: Param0, comparisonflags: u32) -> ::windows::runtime::Result<bool> {
        let mut result__: <bool as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), pcomparisonsymbol.into_param().abi(), ::std::mem::transmute(comparisonflags), &mut result__).from_abi::<bool>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetLocationKind(&self) -> ::windows::runtime::Result<LocationKind> {
        let mut result__: <LocationKind as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<LocationKind>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetLocation(&self) -> ::windows::runtime::Result<Location> {
        let mut result__: <Location as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), &mut result__).from_abi::<Location>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetValue(&self) -> ::windows::runtime::Result<super::super::Com::VARIANT> {
        let mut result__: <super::super::Com::VARIANT as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Com::VARIANT>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostData {
    type Vtable = IDebugHostData_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2748729747, 33388, 17658, [137, 125, 146, 111, 47, 231, 173, 11]);
}
impl ::std::convert::From<IDebugHostData> for IDebugHostSymbol {
    fn from(value: IDebugHostData) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugHostData> for IDebugHostSymbol {
    fn from(value: &IDebugHostData) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostSymbol> for IDebugHostData {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostSymbol> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostSymbol>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostSymbol> for &IDebugHostData {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostSymbol> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostSymbol>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostData_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, ppenum: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: *mut SymbolKind) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbolname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, containingmodule: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcomparisonsymbol: ::windows::runtime::RawPtr, comparisonflags: u32, pmatches: *mut bool) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, locationkind: *mut LocationKind) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, location: *mut Location) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, value: *mut ::std::mem::ManuallyDrop<super::super::Com::VARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostErrorSink(::windows::runtime::IUnknown);
impl IDebugHostErrorSink {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ReportError<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, errclass: ErrorClass, hrerror: ::windows::runtime::HRESULT, message: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(errclass), ::std::mem::transmute(hrerror), message.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostErrorSink {
    type Vtable = IDebugHostErrorSink_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3372158731, 64745, 18046, [139, 179, 93, 105, 239, 16, 156, 0]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostErrorSink_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, errclass: ErrorClass, hrerror: ::windows::runtime::HRESULT, message: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostEvaluator(::windows::runtime::IUnknown);
impl IDebugHostEvaluator {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn EvaluateExpression<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, context: Param0, expression: Param1, bindingcontext: Param2, result: *mut ::std::option::Option<IModelObject>, metadata: *mut ::std::option::Option<IKeyStore>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), context.into_param().abi(), expression.into_param().abi(), bindingcontext.into_param().abi(), ::std::mem::transmute(result), ::std::mem::transmute(metadata)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn EvaluateExtendedExpression<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, context: Param0, expression: Param1, bindingcontext: Param2, result: *mut ::std::option::Option<IModelObject>, metadata: *mut ::std::option::Option<IKeyStore>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), context.into_param().abi(), expression.into_param().abi(), bindingcontext.into_param().abi(), ::std::mem::transmute(result), ::std::mem::transmute(metadata)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostEvaluator {
    type Vtable = IDebugHostEvaluator_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(267360801, 22398, 18839, [172, 123, 28, 72, 131, 36, 29, 153]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostEvaluator_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, expression: super::super::super::Foundation::PWSTR, bindingcontext: ::windows::runtime::RawPtr, result: *mut ::windows::runtime::RawPtr, metadata: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, expression: super::super::super::Foundation::PWSTR, bindingcontext: ::windows::runtime::RawPtr, result: *mut ::windows::runtime::RawPtr, metadata: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostEvaluator2(::windows::runtime::IUnknown);
impl IDebugHostEvaluator2 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn EvaluateExpression<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, context: Param0, expression: Param1, bindingcontext: Param2, result: *mut ::std::option::Option<IModelObject>, metadata: *mut ::std::option::Option<IKeyStore>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), context.into_param().abi(), expression.into_param().abi(), bindingcontext.into_param().abi(), ::std::mem::transmute(result), ::std::mem::transmute(metadata)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn EvaluateExtendedExpression<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, context: Param0, expression: Param1, bindingcontext: Param2, result: *mut ::std::option::Option<IModelObject>, metadata: *mut ::std::option::Option<IKeyStore>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), context.into_param().abi(), expression.into_param().abi(), bindingcontext.into_param().abi(), ::std::mem::transmute(result), ::std::mem::transmute(metadata)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AssignTo<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>, Param1: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, assignmentreference: Param0, assignmentvalue: Param1, assignmentresult: *mut ::std::option::Option<IModelObject>, assignmentmetadata: *mut ::std::option::Option<IKeyStore>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), assignmentreference.into_param().abi(), assignmentvalue.into_param().abi(), ::std::mem::transmute(assignmentresult), ::std::mem::transmute(assignmentmetadata)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostEvaluator2 {
    type Vtable = IDebugHostEvaluator2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2702681141, 8116, 16530, [162, 171, 169, 41, 87, 108, 30, 135]);
}
impl ::std::convert::From<IDebugHostEvaluator2> for IDebugHostEvaluator {
    fn from(value: IDebugHostEvaluator2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugHostEvaluator2> for IDebugHostEvaluator {
    fn from(value: &IDebugHostEvaluator2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostEvaluator> for IDebugHostEvaluator2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostEvaluator> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostEvaluator>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostEvaluator> for &IDebugHostEvaluator2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostEvaluator> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostEvaluator>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostEvaluator2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, expression: super::super::super::Foundation::PWSTR, bindingcontext: ::windows::runtime::RawPtr, result: *mut ::windows::runtime::RawPtr, metadata: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, expression: super::super::super::Foundation::PWSTR, bindingcontext: ::windows::runtime::RawPtr, result: *mut ::windows::runtime::RawPtr, metadata: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, assignmentreference: ::windows::runtime::RawPtr, assignmentvalue: ::windows::runtime::RawPtr, assignmentresult: *mut ::windows::runtime::RawPtr, assignmentmetadata: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostExtensibility(::windows::runtime::IUnknown);
impl IDebugHostExtensibility {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateFunctionAlias<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, aliasname: Param0, functionobject: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), aliasname.into_param().abi(), functionobject.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn DestroyFunctionAlias<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, aliasname: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), aliasname.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostExtensibility {
    type Vtable = IDebugHostExtensibility_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1009460449, 4560, 20358, [138, 229, 77, 241, 102, 247, 50, 83]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostExtensibility_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, aliasname: super::super::super::Foundation::PWSTR, functionobject: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, aliasname: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostField(::windows::runtime::IUnknown);
impl IDebugHostField {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContext(&self) -> ::windows::runtime::Result<IDebugHostContext> {
        let mut result__: <IDebugHostContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostContext>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn EnumerateChildren<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, kind: SymbolKind, name: Param1) -> ::windows::runtime::Result<IDebugHostSymbolEnumerator> {
        let mut result__: <IDebugHostSymbolEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(kind), name.into_param().abi(), &mut result__).from_abi::<IDebugHostSymbolEnumerator>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolKind(&self) -> ::windows::runtime::Result<SymbolKind> {
        let mut result__: <SymbolKind as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<SymbolKind>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetType(&self) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContainingModule(&self) -> ::windows::runtime::Result<IDebugHostModule> {
        let mut result__: <IDebugHostModule as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostModule>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CompareAgainst<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostSymbol>>(&self, pcomparisonsymbol: Param0, comparisonflags: u32) -> ::windows::runtime::Result<bool> {
        let mut result__: <bool as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), pcomparisonsymbol.into_param().abi(), ::std::mem::transmute(comparisonflags), &mut result__).from_abi::<bool>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetLocationKind(&self) -> ::windows::runtime::Result<LocationKind> {
        let mut result__: <LocationKind as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<LocationKind>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetLocation(&self) -> ::windows::runtime::Result<Location> {
        let mut result__: <Location as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), &mut result__).from_abi::<Location>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetValue(&self) -> ::windows::runtime::Result<super::super::Com::VARIANT> {
        let mut result__: <super::super::Com::VARIANT as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Com::VARIANT>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostField {
    type Vtable = IDebugHostField_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3765396629, 5820, 19657, [177, 29, 42, 107, 35, 250, 114, 243]);
}
impl ::std::convert::From<IDebugHostField> for IDebugHostSymbol {
    fn from(value: IDebugHostField) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugHostField> for IDebugHostSymbol {
    fn from(value: &IDebugHostField) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostSymbol> for IDebugHostField {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostSymbol> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostSymbol>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostSymbol> for &IDebugHostField {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostSymbol> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostSymbol>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostField_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, ppenum: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: *mut SymbolKind) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbolname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, containingmodule: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcomparisonsymbol: ::windows::runtime::RawPtr, comparisonflags: u32, pmatches: *mut bool) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, locationkind: *mut LocationKind) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, location: *mut Location) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, value: *mut ::std::mem::ManuallyDrop<super::super::Com::VARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostMemory(::windows::runtime::IUnknown);
impl IDebugHostMemory {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadBytes<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>, Param1: ::windows::runtime::IntoParam<'a, Location>>(&self, context: Param0, location: Param1, buffer: *mut ::std::ffi::c_void, buffersize: u64, bytesread: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), context.into_param().abi(), location.into_param().abi(), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteBytes<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>, Param1: ::windows::runtime::IntoParam<'a, Location>>(&self, context: Param0, location: Param1, buffer: *const ::std::ffi::c_void, buffersize: u64) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), context.into_param().abi(), location.into_param().abi(), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadPointers<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>, Param1: ::windows::runtime::IntoParam<'a, Location>>(&self, context: Param0, location: Param1, count: u64, pointers: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), context.into_param().abi(), location.into_param().abi(), ::std::mem::transmute(count), ::std::mem::transmute(pointers)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WritePointers<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>, Param1: ::windows::runtime::IntoParam<'a, Location>>(&self, context: Param0, location: Param1, count: u64, pointers: *const u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), context.into_param().abi(), location.into_param().abi(), ::std::mem::transmute(count), ::std::mem::transmute(pointers)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDisplayStringForLocation<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>, Param1: ::windows::runtime::IntoParam<'a, Location>>(&self, context: Param0, location: Param1, verbose: u8) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), context.into_param().abi(), location.into_param().abi(), ::std::mem::transmute(verbose), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostMemory {
    type Vtable = IDebugHostMemory_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(555829705, 37251, 19006, [176, 14, 79, 209, 220, 149, 51, 155]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostMemory_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, location: Location, buffer: *mut ::std::ffi::c_void, buffersize: u64, bytesread: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, location: Location, buffer: *const ::std::ffi::c_void, buffersize: u64, byteswritten: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, location: Location, count: u64, pointers: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, location: Location, count: u64, pointers: *const u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, location: Location, verbose: u8, locationname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostMemory2(::windows::runtime::IUnknown);
impl IDebugHostMemory2 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadBytes<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>, Param1: ::windows::runtime::IntoParam<'a, Location>>(&self, context: Param0, location: Param1, buffer: *mut ::std::ffi::c_void, buffersize: u64, bytesread: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), context.into_param().abi(), location.into_param().abi(), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteBytes<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>, Param1: ::windows::runtime::IntoParam<'a, Location>>(&self, context: Param0, location: Param1, buffer: *const ::std::ffi::c_void, buffersize: u64) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), context.into_param().abi(), location.into_param().abi(), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadPointers<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>, Param1: ::windows::runtime::IntoParam<'a, Location>>(&self, context: Param0, location: Param1, count: u64, pointers: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), context.into_param().abi(), location.into_param().abi(), ::std::mem::transmute(count), ::std::mem::transmute(pointers)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WritePointers<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>, Param1: ::windows::runtime::IntoParam<'a, Location>>(&self, context: Param0, location: Param1, count: u64, pointers: *const u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), context.into_param().abi(), location.into_param().abi(), ::std::mem::transmute(count), ::std::mem::transmute(pointers)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDisplayStringForLocation<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>, Param1: ::windows::runtime::IntoParam<'a, Location>>(&self, context: Param0, location: Param1, verbose: u8) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), context.into_param().abi(), location.into_param().abi(), ::std::mem::transmute(verbose), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn LinearizeLocation<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>, Param1: ::windows::runtime::IntoParam<'a, Location>>(&self, context: Param0, location: Param1) -> ::windows::runtime::Result<Location> {
        let mut result__: <Location as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), context.into_param().abi(), location.into_param().abi(), &mut result__).from_abi::<Location>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostMemory2 {
    type Vtable = IDebugHostMemory2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4003476446, 14582, 16747, [162, 81, 29, 55, 113, 0, 18, 112]);
}
impl ::std::convert::From<IDebugHostMemory2> for IDebugHostMemory {
    fn from(value: IDebugHostMemory2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugHostMemory2> for IDebugHostMemory {
    fn from(value: &IDebugHostMemory2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostMemory> for IDebugHostMemory2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostMemory> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostMemory>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostMemory> for &IDebugHostMemory2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostMemory> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostMemory>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostMemory2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, location: Location, buffer: *mut ::std::ffi::c_void, buffersize: u64, bytesread: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, location: Location, buffer: *const ::std::ffi::c_void, buffersize: u64, byteswritten: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, location: Location, count: u64, pointers: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, location: Location, count: u64, pointers: *const u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, location: Location, verbose: u8, locationname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, location: Location, plinearizedlocation: *mut Location) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostModule(::windows::runtime::IUnknown);
impl IDebugHostModule {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContext(&self) -> ::windows::runtime::Result<IDebugHostContext> {
        let mut result__: <IDebugHostContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostContext>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn EnumerateChildren<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, kind: SymbolKind, name: Param1) -> ::windows::runtime::Result<IDebugHostSymbolEnumerator> {
        let mut result__: <IDebugHostSymbolEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(kind), name.into_param().abi(), &mut result__).from_abi::<IDebugHostSymbolEnumerator>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolKind(&self) -> ::windows::runtime::Result<SymbolKind> {
        let mut result__: <SymbolKind as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<SymbolKind>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetType(&self) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContainingModule(&self) -> ::windows::runtime::Result<IDebugHostModule> {
        let mut result__: <IDebugHostModule as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostModule>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CompareAgainst<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostSymbol>>(&self, pcomparisonsymbol: Param0, comparisonflags: u32) -> ::windows::runtime::Result<bool> {
        let mut result__: <bool as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), pcomparisonsymbol.into_param().abi(), ::std::mem::transmute(comparisonflags), &mut result__).from_abi::<bool>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetImageName(&self, allowpath: u8) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(allowpath), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBaseLocation(&self) -> ::windows::runtime::Result<Location> {
        let mut result__: <Location as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), &mut result__).from_abi::<Location>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetVersion(&self, fileversion: *mut u64, productversion: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(fileversion), ::std::mem::transmute(productversion)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FindTypeByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, typename: Param0) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), typename.into_param().abi(), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FindSymbolByRVA(&self, rva: u64) -> ::windows::runtime::Result<IDebugHostSymbol> {
        let mut result__: <IDebugHostSymbol as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(rva), &mut result__).from_abi::<IDebugHostSymbol>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FindSymbolByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, symbolname: Param0) -> ::windows::runtime::Result<IDebugHostSymbol> {
        let mut result__: <IDebugHostSymbol as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), symbolname.into_param().abi(), &mut result__).from_abi::<IDebugHostSymbol>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostModule {
    type Vtable = IDebugHostModule_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3384426008, 53360, 17272, [187, 208, 52, 97, 59, 52, 110, 30]);
}
impl ::std::convert::From<IDebugHostModule> for IDebugHostSymbol {
    fn from(value: IDebugHostModule) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugHostModule> for IDebugHostSymbol {
    fn from(value: &IDebugHostModule) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostSymbol> for IDebugHostModule {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostSymbol> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostSymbol>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostSymbol> for &IDebugHostModule {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostSymbol> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostSymbol>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostModule_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, ppenum: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: *mut SymbolKind) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbolname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, containingmodule: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcomparisonsymbol: ::windows::runtime::RawPtr, comparisonflags: u32, pmatches: *mut bool) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, allowpath: u8, imagename: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, modulebaselocation: *mut Location) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fileversion: *mut u64, productversion: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, typename: super::super::super::Foundation::PWSTR, r#type: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, rva: u64, symbol: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbolname: super::super::super::Foundation::PWSTR, symbol: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostModule2(::windows::runtime::IUnknown);
impl IDebugHostModule2 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContext(&self) -> ::windows::runtime::Result<IDebugHostContext> {
        let mut result__: <IDebugHostContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostContext>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn EnumerateChildren<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, kind: SymbolKind, name: Param1) -> ::windows::runtime::Result<IDebugHostSymbolEnumerator> {
        let mut result__: <IDebugHostSymbolEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(kind), name.into_param().abi(), &mut result__).from_abi::<IDebugHostSymbolEnumerator>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolKind(&self) -> ::windows::runtime::Result<SymbolKind> {
        let mut result__: <SymbolKind as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<SymbolKind>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetType(&self) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContainingModule(&self) -> ::windows::runtime::Result<IDebugHostModule> {
        let mut result__: <IDebugHostModule as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostModule>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CompareAgainst<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostSymbol>>(&self, pcomparisonsymbol: Param0, comparisonflags: u32) -> ::windows::runtime::Result<bool> {
        let mut result__: <bool as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), pcomparisonsymbol.into_param().abi(), ::std::mem::transmute(comparisonflags), &mut result__).from_abi::<bool>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetImageName(&self, allowpath: u8) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(allowpath), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBaseLocation(&self) -> ::windows::runtime::Result<Location> {
        let mut result__: <Location as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), &mut result__).from_abi::<Location>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetVersion(&self, fileversion: *mut u64, productversion: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(fileversion), ::std::mem::transmute(productversion)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FindTypeByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, typename: Param0) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), typename.into_param().abi(), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FindSymbolByRVA(&self, rva: u64) -> ::windows::runtime::Result<IDebugHostSymbol> {
        let mut result__: <IDebugHostSymbol as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(rva), &mut result__).from_abi::<IDebugHostSymbol>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FindSymbolByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, symbolname: Param0) -> ::windows::runtime::Result<IDebugHostSymbol> {
        let mut result__: <IDebugHostSymbol as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), symbolname.into_param().abi(), &mut result__).from_abi::<IDebugHostSymbol>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FindContainingSymbolByRVA(&self, rva: u64, symbol: *mut ::std::option::Option<IDebugHostSymbol>, offset: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(rva), ::std::mem::transmute(symbol), ::std::mem::transmute(offset)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostModule2 {
    type Vtable = IDebugHostModule2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3038283752, 48336, 20111, [168, 199, 67, 67, 152, 183, 140, 55]);
}
impl ::std::convert::From<IDebugHostModule2> for IDebugHostModule {
    fn from(value: IDebugHostModule2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugHostModule2> for IDebugHostModule {
    fn from(value: &IDebugHostModule2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostModule> for IDebugHostModule2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostModule> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostModule>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostModule> for &IDebugHostModule2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostModule> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostModule>::into(::std::clone::Clone::clone(self)))
    }
}
impl ::std::convert::From<IDebugHostModule2> for IDebugHostSymbol {
    fn from(value: IDebugHostModule2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugHostModule2> for IDebugHostSymbol {
    fn from(value: &IDebugHostModule2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostSymbol> for IDebugHostModule2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostSymbol> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostSymbol>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostSymbol> for &IDebugHostModule2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostSymbol> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostSymbol>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostModule2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, ppenum: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: *mut SymbolKind) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbolname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, containingmodule: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcomparisonsymbol: ::windows::runtime::RawPtr, comparisonflags: u32, pmatches: *mut bool) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, allowpath: u8, imagename: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, modulebaselocation: *mut Location) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fileversion: *mut u64, productversion: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, typename: super::super::super::Foundation::PWSTR, r#type: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, rva: u64, symbol: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbolname: super::super::super::Foundation::PWSTR, symbol: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, rva: u64, symbol: *mut ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostModuleSignature(::windows::runtime::IUnknown);
impl IDebugHostModuleSignature {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsMatch<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostModule>>(&self, pmodule: Param0) -> ::windows::runtime::Result<bool> {
        let mut result__: <bool as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), pmodule.into_param().abi(), &mut result__).from_abi::<bool>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostModuleSignature {
    type Vtable = IDebugHostModuleSignature_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(837106266, 494, 19387, [184, 153, 75, 70, 174, 125, 89, 92]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostModuleSignature_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmodule: ::windows::runtime::RawPtr, ismatch: *mut bool) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostPublic(::windows::runtime::IUnknown);
impl IDebugHostPublic {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContext(&self) -> ::windows::runtime::Result<IDebugHostContext> {
        let mut result__: <IDebugHostContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostContext>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn EnumerateChildren<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, kind: SymbolKind, name: Param1) -> ::windows::runtime::Result<IDebugHostSymbolEnumerator> {
        let mut result__: <IDebugHostSymbolEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(kind), name.into_param().abi(), &mut result__).from_abi::<IDebugHostSymbolEnumerator>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolKind(&self) -> ::windows::runtime::Result<SymbolKind> {
        let mut result__: <SymbolKind as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<SymbolKind>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetType(&self) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContainingModule(&self) -> ::windows::runtime::Result<IDebugHostModule> {
        let mut result__: <IDebugHostModule as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostModule>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CompareAgainst<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostSymbol>>(&self, pcomparisonsymbol: Param0, comparisonflags: u32) -> ::windows::runtime::Result<bool> {
        let mut result__: <bool as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), pcomparisonsymbol.into_param().abi(), ::std::mem::transmute(comparisonflags), &mut result__).from_abi::<bool>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetLocationKind(&self) -> ::windows::runtime::Result<LocationKind> {
        let mut result__: <LocationKind as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<LocationKind>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetLocation(&self) -> ::windows::runtime::Result<Location> {
        let mut result__: <Location as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), &mut result__).from_abi::<Location>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostPublic {
    type Vtable = IDebugHostPublic_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1817803465, 64333, 20333, [159, 57, 34, 72, 133, 57, 248, 244]);
}
impl ::std::convert::From<IDebugHostPublic> for IDebugHostSymbol {
    fn from(value: IDebugHostPublic) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugHostPublic> for IDebugHostSymbol {
    fn from(value: &IDebugHostPublic) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostSymbol> for IDebugHostPublic {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostSymbol> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostSymbol>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostSymbol> for &IDebugHostPublic {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostSymbol> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostSymbol>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostPublic_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, ppenum: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: *mut SymbolKind) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbolname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, containingmodule: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcomparisonsymbol: ::windows::runtime::RawPtr, comparisonflags: u32, pmatches: *mut bool) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, locationkind: *mut LocationKind) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, location: *mut Location) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostScriptHost(::windows::runtime::IUnknown);
impl IDebugHostScriptHost {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateContext<'a, Param0: ::windows::runtime::IntoParam<'a, IDataModelScript>>(&self, script: Param0) -> ::windows::runtime::Result<IDataModelScriptHostContext> {
        let mut result__: <IDataModelScriptHostContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), script.into_param().abi(), &mut result__).from_abi::<IDataModelScriptHostContext>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostScriptHost {
    type Vtable = IDebugHostScriptHost_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3070440612, 47404, 17776, [147, 161, 211, 235, 104, 102, 73, 160]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostScriptHost_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, script: ::windows::runtime::RawPtr, scriptcontext: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostStatus(::windows::runtime::IUnknown);
impl IDebugHostStatus {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn PollUserInterrupt(&self) -> ::windows::runtime::Result<bool> {
        let mut result__: <bool as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<bool>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostStatus {
    type Vtable = IDebugHostStatus_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1329470690, 34482, 19578, [156, 101, 208, 169, 208, 238, 207, 68]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostStatus_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, interruptrequested: *mut bool) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostSymbol(::windows::runtime::IUnknown);
impl IDebugHostSymbol {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContext(&self) -> ::windows::runtime::Result<IDebugHostContext> {
        let mut result__: <IDebugHostContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostContext>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn EnumerateChildren<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, kind: SymbolKind, name: Param1) -> ::windows::runtime::Result<IDebugHostSymbolEnumerator> {
        let mut result__: <IDebugHostSymbolEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(kind), name.into_param().abi(), &mut result__).from_abi::<IDebugHostSymbolEnumerator>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolKind(&self) -> ::windows::runtime::Result<SymbolKind> {
        let mut result__: <SymbolKind as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<SymbolKind>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetType(&self) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContainingModule(&self) -> ::windows::runtime::Result<IDebugHostModule> {
        let mut result__: <IDebugHostModule as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostModule>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CompareAgainst<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostSymbol>>(&self, pcomparisonsymbol: Param0, comparisonflags: u32) -> ::windows::runtime::Result<bool> {
        let mut result__: <bool as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), pcomparisonsymbol.into_param().abi(), ::std::mem::transmute(comparisonflags), &mut result__).from_abi::<bool>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostSymbol {
    type Vtable = IDebugHostSymbol_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(260149507, 34782, 20118, [130, 119, 224, 92, 212, 65, 251, 34]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostSymbol_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, ppenum: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: *mut SymbolKind) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbolname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, containingmodule: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcomparisonsymbol: ::windows::runtime::RawPtr, comparisonflags: u32, pmatches: *mut bool) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostSymbol2(::windows::runtime::IUnknown);
impl IDebugHostSymbol2 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContext(&self) -> ::windows::runtime::Result<IDebugHostContext> {
        let mut result__: <IDebugHostContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostContext>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn EnumerateChildren<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, kind: SymbolKind, name: Param1) -> ::windows::runtime::Result<IDebugHostSymbolEnumerator> {
        let mut result__: <IDebugHostSymbolEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(kind), name.into_param().abi(), &mut result__).from_abi::<IDebugHostSymbolEnumerator>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolKind(&self) -> ::windows::runtime::Result<SymbolKind> {
        let mut result__: <SymbolKind as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<SymbolKind>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetType(&self) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContainingModule(&self) -> ::windows::runtime::Result<IDebugHostModule> {
        let mut result__: <IDebugHostModule as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostModule>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CompareAgainst<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostSymbol>>(&self, pcomparisonsymbol: Param0, comparisonflags: u32) -> ::windows::runtime::Result<bool> {
        let mut result__: <bool as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), pcomparisonsymbol.into_param().abi(), ::std::mem::transmute(comparisonflags), &mut result__).from_abi::<bool>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetLanguage(&self) -> ::windows::runtime::Result<LanguageKind> {
        let mut result__: <LanguageKind as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<LanguageKind>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostSymbol2 {
    type Vtable = IDebugHostSymbol2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(558979943, 26400, 16983, [138, 104, 7, 125, 201, 68, 71, 28]);
}
impl ::std::convert::From<IDebugHostSymbol2> for IDebugHostSymbol {
    fn from(value: IDebugHostSymbol2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugHostSymbol2> for IDebugHostSymbol {
    fn from(value: &IDebugHostSymbol2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostSymbol> for IDebugHostSymbol2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostSymbol> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostSymbol>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostSymbol> for &IDebugHostSymbol2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostSymbol> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostSymbol>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostSymbol2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, ppenum: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: *mut SymbolKind) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbolname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, containingmodule: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcomparisonsymbol: ::windows::runtime::RawPtr, comparisonflags: u32, pmatches: *mut bool) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pkind: *mut LanguageKind) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostSymbolEnumerator(::windows::runtime::IUnknown);
impl IDebugHostSymbolEnumerator {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNext(&self) -> ::windows::runtime::Result<IDebugHostSymbol> {
        let mut result__: <IDebugHostSymbol as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostSymbol>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostSymbolEnumerator {
    type Vtable = IDebugHostSymbolEnumerator_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(685337734, 4259, 18806, [177, 78, 234, 239, 71, 144, 170, 31]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostSymbolEnumerator_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostSymbols(::windows::runtime::IUnknown);
impl IDebugHostSymbols {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateModuleSignature<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pwszmodulename: Param0, pwszminversion: Param1, pwszmaxversion: Param2) -> ::windows::runtime::Result<IDebugHostModuleSignature> {
        let mut result__: <IDebugHostModuleSignature as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), pwszmodulename.into_param().abi(), pwszminversion.into_param().abi(), pwszmaxversion.into_param().abi(), &mut result__).from_abi::<IDebugHostModuleSignature>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateTypeSignature<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, IDebugHostModule>>(&self, signaturespecification: Param0, module: Param1) -> ::windows::runtime::Result<IDebugHostTypeSignature> {
        let mut result__: <IDebugHostTypeSignature as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), signaturespecification.into_param().abi(), module.into_param().abi(), &mut result__).from_abi::<IDebugHostTypeSignature>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateTypeSignatureForModuleRange<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(
        &self,
        signaturespecification: Param0,
        modulename: Param1,
        minversion: Param2,
        maxversion: Param3,
    ) -> ::windows::runtime::Result<IDebugHostTypeSignature> {
        let mut result__: <IDebugHostTypeSignature as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), signaturespecification.into_param().abi(), modulename.into_param().abi(), minversion.into_param().abi(), maxversion.into_param().abi(), &mut result__).from_abi::<IDebugHostTypeSignature>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumerateModules<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>>(&self, context: Param0) -> ::windows::runtime::Result<IDebugHostSymbolEnumerator> {
        let mut result__: <IDebugHostSymbolEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), context.into_param().abi(), &mut result__).from_abi::<IDebugHostSymbolEnumerator>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FindModuleByName<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, context: Param0, modulename: Param1) -> ::windows::runtime::Result<IDebugHostModule> {
        let mut result__: <IDebugHostModule as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), context.into_param().abi(), modulename.into_param().abi(), &mut result__).from_abi::<IDebugHostModule>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FindModuleByLocation<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>, Param1: ::windows::runtime::IntoParam<'a, Location>>(&self, context: Param0, modulelocation: Param1) -> ::windows::runtime::Result<IDebugHostModule> {
        let mut result__: <IDebugHostModule as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), context.into_param().abi(), modulelocation.into_param().abi(), &mut result__).from_abi::<IDebugHostModule>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetMostDerivedObject<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostContext>, Param1: ::windows::runtime::IntoParam<'a, Location>, Param2: ::windows::runtime::IntoParam<'a, IDebugHostType>>(&self, pcontext: Param0, location: Param1, objecttype: Param2, derivedlocation: *mut Location, derivedtype: *mut ::std::option::Option<IDebugHostType>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), pcontext.into_param().abi(), location.into_param().abi(), objecttype.into_param().abi(), ::std::mem::transmute(derivedlocation), ::std::mem::transmute(derivedtype)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostSymbols {
    type Vtable = IDebugHostSymbols_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2236602193, 49889, 20146, [181, 37, 102, 25, 203, 151, 165, 136]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostSymbols_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pwszmodulename: super::super::super::Foundation::PWSTR, pwszminversion: super::super::super::Foundation::PWSTR, pwszmaxversion: super::super::super::Foundation::PWSTR, ppmodulesignature: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, signaturespecification: super::super::super::Foundation::PWSTR, module: ::windows::runtime::RawPtr, typesignature: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, signaturespecification: super::super::super::Foundation::PWSTR, modulename: super::super::super::Foundation::PWSTR, minversion: super::super::super::Foundation::PWSTR, maxversion: super::super::super::Foundation::PWSTR, typesignature: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, moduleenum: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, modulename: super::super::super::Foundation::PWSTR, module: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr, modulelocation: Location, module: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcontext: ::windows::runtime::RawPtr, location: Location, objecttype: ::windows::runtime::RawPtr, derivedlocation: *mut Location, derivedtype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostType(::windows::runtime::IUnknown);
impl IDebugHostType {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContext(&self) -> ::windows::runtime::Result<IDebugHostContext> {
        let mut result__: <IDebugHostContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostContext>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn EnumerateChildren<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, kind: SymbolKind, name: Param1) -> ::windows::runtime::Result<IDebugHostSymbolEnumerator> {
        let mut result__: <IDebugHostSymbolEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(kind), name.into_param().abi(), &mut result__).from_abi::<IDebugHostSymbolEnumerator>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolKind(&self) -> ::windows::runtime::Result<SymbolKind> {
        let mut result__: <SymbolKind as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<SymbolKind>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetType(&self) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContainingModule(&self) -> ::windows::runtime::Result<IDebugHostModule> {
        let mut result__: <IDebugHostModule as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostModule>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CompareAgainst<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostSymbol>>(&self, pcomparisonsymbol: Param0, comparisonflags: u32) -> ::windows::runtime::Result<bool> {
        let mut result__: <bool as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), pcomparisonsymbol.into_param().abi(), ::std::mem::transmute(comparisonflags), &mut result__).from_abi::<bool>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTypeKind(&self) -> ::windows::runtime::Result<TypeKind> {
        let mut result__: <TypeKind as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<TypeKind>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSize(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBaseType(&self) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetHashCode(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetIntrinsicType(&self, intrinsickind: *mut IntrinsicKind, carriertype: *mut u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(intrinsickind), ::std::mem::transmute(carriertype)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBitField(&self, lsboffield: *mut u32, lengthoffield: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(lsboffield), ::std::mem::transmute(lengthoffield)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetPointerKind(&self) -> ::windows::runtime::Result<PointerKind> {
        let mut result__: <PointerKind as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), &mut result__).from_abi::<PointerKind>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetMemberType(&self) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreatePointerTo(&self, kind: PointerKind) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(kind), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetArrayDimensionality(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetArrayDimensions(&self, dimensions: u64, pdimensions: *mut ArrayDimension) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), ::std::mem::transmute(dimensions), ::std::mem::transmute(pdimensions)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateArrayOf(&self, dimensions: u64, pdimensions: *const ArrayDimension) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(dimensions), ::std::mem::transmute(pdimensions), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetFunctionCallingConvention(&self) -> ::windows::runtime::Result<CallingConventionKind> {
        let mut result__: <CallingConventionKind as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), &mut result__).from_abi::<CallingConventionKind>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetFunctionReturnType(&self) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetFunctionParameterTypeCount(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetFunctionParameterTypeAt(&self, i: u64) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), ::std::mem::transmute(i), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsGeneric(&self) -> ::windows::runtime::Result<bool> {
        let mut result__: <bool as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), &mut result__).from_abi::<bool>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetGenericArgumentCount(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetGenericArgumentAt(&self, i: u64) -> ::windows::runtime::Result<IDebugHostSymbol> {
        let mut result__: <IDebugHostSymbol as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(i), &mut result__).from_abi::<IDebugHostSymbol>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostType {
    type Vtable = IDebugHostType_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(984466259, 11028, 19131, [152, 147, 94, 3, 69, 142, 7, 238]);
}
impl ::std::convert::From<IDebugHostType> for IDebugHostSymbol {
    fn from(value: IDebugHostType) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugHostType> for IDebugHostSymbol {
    fn from(value: &IDebugHostType) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostSymbol> for IDebugHostType {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostSymbol> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostSymbol>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostSymbol> for &IDebugHostType {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostSymbol> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostSymbol>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostType_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, ppenum: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: *mut SymbolKind) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbolname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, containingmodule: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcomparisonsymbol: ::windows::runtime::RawPtr, comparisonflags: u32, pmatches: *mut bool) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: *mut TypeKind) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, size: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, basetype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hashcode: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, intrinsickind: *mut IntrinsicKind, carriertype: *mut u16) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lsboffield: *mut u32, lengthoffield: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pointerkind: *mut PointerKind) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, membertype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: PointerKind, newtype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, arraydimensionality: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dimensions: u64, pdimensions: *mut ArrayDimension) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dimensions: u64, pdimensions: *const ArrayDimension, newtype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, conventionkind: *mut CallingConventionKind) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, returntype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, i: u64, parametertype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, isgeneric: *mut bool) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, argcount: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, i: u64, argument: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostType2(::windows::runtime::IUnknown);
impl IDebugHostType2 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContext(&self) -> ::windows::runtime::Result<IDebugHostContext> {
        let mut result__: <IDebugHostContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostContext>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn EnumerateChildren<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, kind: SymbolKind, name: Param1) -> ::windows::runtime::Result<IDebugHostSymbolEnumerator> {
        let mut result__: <IDebugHostSymbolEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(kind), name.into_param().abi(), &mut result__).from_abi::<IDebugHostSymbolEnumerator>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolKind(&self) -> ::windows::runtime::Result<SymbolKind> {
        let mut result__: <SymbolKind as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<SymbolKind>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetType(&self) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContainingModule(&self) -> ::windows::runtime::Result<IDebugHostModule> {
        let mut result__: <IDebugHostModule as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostModule>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CompareAgainst<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostSymbol>>(&self, pcomparisonsymbol: Param0, comparisonflags: u32) -> ::windows::runtime::Result<bool> {
        let mut result__: <bool as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), pcomparisonsymbol.into_param().abi(), ::std::mem::transmute(comparisonflags), &mut result__).from_abi::<bool>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTypeKind(&self) -> ::windows::runtime::Result<TypeKind> {
        let mut result__: <TypeKind as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<TypeKind>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSize(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBaseType(&self) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetHashCode(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetIntrinsicType(&self, intrinsickind: *mut IntrinsicKind, carriertype: *mut u16) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(intrinsickind), ::std::mem::transmute(carriertype)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetBitField(&self, lsboffield: *mut u32, lengthoffield: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(lsboffield), ::std::mem::transmute(lengthoffield)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetPointerKind(&self) -> ::windows::runtime::Result<PointerKind> {
        let mut result__: <PointerKind as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), &mut result__).from_abi::<PointerKind>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetMemberType(&self) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreatePointerTo(&self, kind: PointerKind) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(kind), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetArrayDimensionality(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetArrayDimensions(&self, dimensions: u64, pdimensions: *mut ArrayDimension) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), ::std::mem::transmute(dimensions), ::std::mem::transmute(pdimensions)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateArrayOf(&self, dimensions: u64, pdimensions: *const ArrayDimension) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(dimensions), ::std::mem::transmute(pdimensions), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetFunctionCallingConvention(&self) -> ::windows::runtime::Result<CallingConventionKind> {
        let mut result__: <CallingConventionKind as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), &mut result__).from_abi::<CallingConventionKind>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetFunctionReturnType(&self) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetFunctionParameterTypeCount(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetFunctionParameterTypeAt(&self, i: u64) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), ::std::mem::transmute(i), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsGeneric(&self) -> ::windows::runtime::Result<bool> {
        let mut result__: <bool as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), &mut result__).from_abi::<bool>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetGenericArgumentCount(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetGenericArgumentAt(&self, i: u64) -> ::windows::runtime::Result<IDebugHostSymbol> {
        let mut result__: <IDebugHostSymbol as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(i), &mut result__).from_abi::<IDebugHostSymbol>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsTypedef(&self) -> ::windows::runtime::Result<bool> {
        let mut result__: <bool as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self), &mut result__).from_abi::<bool>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTypedefBaseType(&self) -> ::windows::runtime::Result<IDebugHostType2> {
        let mut result__: <IDebugHostType2 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostType2>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTypedefFinalBaseType(&self) -> ::windows::runtime::Result<IDebugHostType2> {
        let mut result__: <IDebugHostType2 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostType2>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetFunctionVarArgsKind(&self) -> ::windows::runtime::Result<VarArgsKind> {
        let mut result__: <VarArgsKind as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), &mut result__).from_abi::<VarArgsKind>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetFunctionInstancePointerType(&self) -> ::windows::runtime::Result<IDebugHostType2> {
        let mut result__: <IDebugHostType2 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostType2>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostType2 {
    type Vtable = IDebugHostType2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2995139257, 34054, 18038, [135, 206, 143, 126, 5, 229, 152, 118]);
}
impl ::std::convert::From<IDebugHostType2> for IDebugHostType {
    fn from(value: IDebugHostType2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugHostType2> for IDebugHostType {
    fn from(value: &IDebugHostType2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostType> for IDebugHostType2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostType> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostType>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostType> for &IDebugHostType2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostType> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostType>::into(::std::clone::Clone::clone(self)))
    }
}
impl ::std::convert::From<IDebugHostType2> for IDebugHostSymbol {
    fn from(value: IDebugHostType2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugHostType2> for IDebugHostSymbol {
    fn from(value: &IDebugHostType2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostSymbol> for IDebugHostType2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostSymbol> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostSymbol>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugHostSymbol> for &IDebugHostType2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugHostSymbol> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugHostSymbol>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostType2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, ppenum: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: *mut SymbolKind) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbolname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, containingmodule: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcomparisonsymbol: ::windows::runtime::RawPtr, comparisonflags: u32, pmatches: *mut bool) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: *mut TypeKind) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, size: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, basetype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hashcode: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, intrinsickind: *mut IntrinsicKind, carriertype: *mut u16) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lsboffield: *mut u32, lengthoffield: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pointerkind: *mut PointerKind) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, membertype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: PointerKind, newtype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, arraydimensionality: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dimensions: u64, pdimensions: *mut ArrayDimension) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dimensions: u64, pdimensions: *const ArrayDimension, newtype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, conventionkind: *mut CallingConventionKind) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, returntype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, i: u64, parametertype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, isgeneric: *mut bool) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, argcount: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, i: u64, argument: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, istypedef: *mut bool) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, basetype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, finalbasetype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, varargskind: *mut VarArgsKind) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, instancepointertype: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugHostTypeSignature(::windows::runtime::IUnknown);
impl IDebugHostTypeSignature {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetHashCode(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsMatch<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostType>>(&self, r#type: Param0, ismatch: *mut bool, wildcardmatches: *mut ::std::option::Option<IDebugHostSymbolEnumerator>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), r#type.into_param().abi(), ::std::mem::transmute(ismatch), ::std::mem::transmute(wildcardmatches)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CompareAgainst<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugHostTypeSignature>>(&self, typesignature: Param0) -> ::windows::runtime::Result<SignatureComparison> {
        let mut result__: <SignatureComparison as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), typesignature.into_param().abi(), &mut result__).from_abi::<SignatureComparison>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugHostTypeSignature {
    type Vtable = IDebugHostTypeSignature_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(984466259, 11028, 19131, [152, 147, 94, 3, 69, 142, 7, 238]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugHostTypeSignature_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hashcode: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: ::windows::runtime::RawPtr, ismatch: *mut bool, wildcardmatches: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, typesignature: ::windows::runtime::RawPtr, result: *mut SignatureComparison) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugInputCallbacks(::windows::runtime::IUnknown);
impl IDebugInputCallbacks {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StartInput(&self, buffersize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffersize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EndInput(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugInputCallbacks {
    type Vtable = IDebugInputCallbacks_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2672878636, 61750, 18846, [154, 151, 115, 3, 108, 148, 237, 45]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugInputCallbacks_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffersize: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugOutputCallbacks(::windows::runtime::IUnknown);
impl IDebugOutputCallbacks {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Output<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, mask: u32, text: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), text.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugOutputCallbacks {
    type Vtable = IDebugOutputCallbacks_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1274380357, 54868, 19520, [176, 175, 104, 48, 144, 243, 86, 220]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugOutputCallbacks_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, text: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugOutputCallbacks2(::windows::runtime::IUnknown);
impl IDebugOutputCallbacks2 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Output<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, mask: u32, text: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), text.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInterestMask(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Output2<'a, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, which: u32, flags: u32, arg: u64, text: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), ::std::mem::transmute(flags), ::std::mem::transmute(arg), text.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugOutputCallbacks2 {
    type Vtable = IDebugOutputCallbacks2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1735532521, 22226, 19012, [163, 37, 43, 101, 81, 60, 230, 235]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugOutputCallbacks2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, text: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, flags: u32, arg: u64, text: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugOutputCallbacksWide(::windows::runtime::IUnknown);
impl IDebugOutputCallbacksWide {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Output<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, mask: u32, text: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), text.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugOutputCallbacksWide {
    type Vtable = IDebugOutputCallbacksWide_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1283446371, 50068, 20006, [142, 241, 52, 173, 94, 211, 118, 76]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugOutputCallbacksWide_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: u32, text: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugOutputStream(::windows::runtime::IUnknown);
impl IDebugOutputStream {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Write<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, psz: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), psz.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugOutputStream {
    type Vtable = IDebugOutputStream_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2005063922, 11141, 16473, [171, 136, 40, 206, 221, 202, 28, 128]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugOutputStream_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psz: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugPlmClient(::windows::runtime::IUnknown);
impl IDebugPlmClient {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn LaunchPlmPackageForDebugWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, timeout: u32, packagefullname: Param2, appname: Param3, arguments: Param4, processid: *mut u32, threadid: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), ::std::mem::transmute(timeout), packagefullname.into_param().abi(), appname.into_param().abi(), arguments.into_param().abi(), ::std::mem::transmute(processid), ::std::mem::transmute(threadid)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugPlmClient {
    type Vtable = IDebugPlmClient_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2687198916, 44707, 16948, [169, 247, 254, 76, 56, 61, 78, 41]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugPlmClient_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, appname: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugPlmClient2(::windows::runtime::IUnknown);
impl IDebugPlmClient2 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn LaunchPlmPackageForDebugWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, timeout: u32, packagefullname: Param2, appname: Param3, arguments: Param4, processid: *mut u32, threadid: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), ::std::mem::transmute(timeout), packagefullname.into_param().abi(), appname.into_param().abi(), arguments.into_param().abi(), ::std::mem::transmute(processid), ::std::mem::transmute(threadid)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn LaunchPlmBgTaskForDebugWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, timeout: u32, packagefullname: Param2, backgroundtaskid: Param3, processid: *mut u32, threadid: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), ::std::mem::transmute(timeout), packagefullname.into_param().abi(), backgroundtaskid.into_param().abi(), ::std::mem::transmute(processid), ::std::mem::transmute(threadid)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugPlmClient2 {
    type Vtable = IDebugPlmClient2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1501337613, 59325, 17161, [150, 44, 157, 155, 105, 167, 55, 44]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugPlmClient2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, appname: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, backgroundtaskid: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugPlmClient3(::windows::runtime::IUnknown);
impl IDebugPlmClient3 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn LaunchPlmPackageForDebugWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, timeout: u32, packagefullname: Param2, appname: Param3, arguments: Param4, processid: *mut u32, threadid: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), ::std::mem::transmute(timeout), packagefullname.into_param().abi(), appname.into_param().abi(), arguments.into_param().abi(), ::std::mem::transmute(processid), ::std::mem::transmute(threadid)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn LaunchPlmBgTaskForDebugWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, timeout: u32, packagefullname: Param2, backgroundtaskid: Param3, processid: *mut u32, threadid: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), ::std::mem::transmute(timeout), packagefullname.into_param().abi(), backgroundtaskid.into_param().abi(), ::std::mem::transmute(processid), ::std::mem::transmute(threadid)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn QueryPlmPackageWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, IDebugOutputStream>>(&self, server: u64, packagefullname: Param1, stream: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), packagefullname.into_param().abi(), stream.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn QueryPlmPackageList<'a, Param1: ::windows::runtime::IntoParam<'a, IDebugOutputStream>>(&self, server: u64, stream: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), stream.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn EnablePlmPackageDebugWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, packagefullname: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), packagefullname.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn DisablePlmPackageDebugWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, packagefullname: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), packagefullname.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SuspendPlmPackageWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, packagefullname: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), packagefullname.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ResumePlmPackageWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, packagefullname: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), packagefullname.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn TerminatePlmPackageWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, packagefullname: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), packagefullname.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn LaunchAndDebugPlmAppWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, packagefullname: Param1, appname: Param2, arguments: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), packagefullname.into_param().abi(), appname.into_param().abi(), arguments.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ActivateAndDebugPlmBgTaskWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, server: u64, packagefullname: Param1, backgroundtaskid: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), packagefullname.into_param().abi(), backgroundtaskid.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugPlmClient3 {
    type Vtable = IDebugPlmClient3_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3567639505, 51714, 19856, [133, 106, 42, 146, 191, 208, 242, 15]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugPlmClient3_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, appname: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, backgroundtaskid: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, packagefullname: super::super::super::Foundation::PWSTR, stream: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, stream: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, packagefullname: super::super::super::Foundation::PWSTR, appname: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, packagefullname: super::super::super::Foundation::PWSTR, backgroundtaskid: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugProperty(::windows::runtime::IUnknown);
impl IDebugProperty {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetPropertyInfo(&self, dwfieldspec: u32, nradix: u32) -> ::windows::runtime::Result<DebugPropertyInfo> {
        let mut result__: <DebugPropertyInfo as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwfieldspec), ::std::mem::transmute(nradix), &mut result__).from_abi::<DebugPropertyInfo>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetExtendedInfo(&self, cinfos: u32, rgguidextendedinfo: *const ::windows::runtime::GUID, rgvar: *mut super::super::Com::VARIANT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(cinfos), ::std::mem::transmute(rgguidextendedinfo), ::std::mem::transmute(rgvar)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetValueAsString<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pszvalue: Param0, nradix: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), pszvalue.into_param().abi(), ::std::mem::transmute(nradix)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumMembers(&self, dwfieldspec: u32, nradix: u32, refiid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<IEnumDebugPropertyInfo> {
        let mut result__: <IEnumDebugPropertyInfo as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwfieldspec), ::std::mem::transmute(nradix), ::std::mem::transmute(refiid), &mut result__).from_abi::<IEnumDebugPropertyInfo>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetParent(&self) -> ::windows::runtime::Result<IDebugProperty> {
        let mut result__: <IDebugProperty as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugProperty>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugProperty {
    type Vtable = IDebugProperty_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865872, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugProperty_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwfieldspec: u32, nradix: u32, ppropertyinfo: *mut ::std::mem::ManuallyDrop<DebugPropertyInfo>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, cinfos: u32, rgguidextendedinfo: *const ::windows::runtime::GUID, rgvar: *mut ::std::mem::ManuallyDrop<super::super::Com::VARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszvalue: super::super::super::Foundation::PWSTR, nradix: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwfieldspec: u32, nradix: u32, refiid: *const ::windows::runtime::GUID, ppepi: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppdebugprop: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugPropertyEnumType_All(::windows::runtime::IUnknown);
impl IDebugPropertyEnumType_All {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugPropertyEnumType_All {
    type Vtable = IDebugPropertyEnumType_All_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865877, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugPropertyEnumType_All_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, __midl__idebugpropertyenumtype_all0000: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugPropertyEnumType_Arguments(::windows::runtime::IUnknown);
impl IDebugPropertyEnumType_Arguments {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugPropertyEnumType_Arguments {
    type Vtable = IDebugPropertyEnumType_Arguments_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865879, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
impl ::std::convert::From<IDebugPropertyEnumType_Arguments> for IDebugPropertyEnumType_All {
    fn from(value: IDebugPropertyEnumType_Arguments) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugPropertyEnumType_Arguments> for IDebugPropertyEnumType_All {
    fn from(value: &IDebugPropertyEnumType_Arguments) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugPropertyEnumType_All> for IDebugPropertyEnumType_Arguments {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugPropertyEnumType_All> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugPropertyEnumType_All>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugPropertyEnumType_All> for &IDebugPropertyEnumType_Arguments {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugPropertyEnumType_All> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugPropertyEnumType_All>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugPropertyEnumType_Arguments_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, __midl__idebugpropertyenumtype_all0000: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugPropertyEnumType_Locals(::windows::runtime::IUnknown);
impl IDebugPropertyEnumType_Locals {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugPropertyEnumType_Locals {
    type Vtable = IDebugPropertyEnumType_Locals_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865878, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
impl ::std::convert::From<IDebugPropertyEnumType_Locals> for IDebugPropertyEnumType_All {
    fn from(value: IDebugPropertyEnumType_Locals) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugPropertyEnumType_Locals> for IDebugPropertyEnumType_All {
    fn from(value: &IDebugPropertyEnumType_Locals) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugPropertyEnumType_All> for IDebugPropertyEnumType_Locals {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugPropertyEnumType_All> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugPropertyEnumType_All>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugPropertyEnumType_All> for &IDebugPropertyEnumType_Locals {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugPropertyEnumType_All> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugPropertyEnumType_All>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugPropertyEnumType_Locals_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, __midl__idebugpropertyenumtype_all0000: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugPropertyEnumType_LocalsPlusArgs(::windows::runtime::IUnknown);
impl IDebugPropertyEnumType_LocalsPlusArgs {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugPropertyEnumType_LocalsPlusArgs {
    type Vtable = IDebugPropertyEnumType_LocalsPlusArgs_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865880, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
impl ::std::convert::From<IDebugPropertyEnumType_LocalsPlusArgs> for IDebugPropertyEnumType_All {
    fn from(value: IDebugPropertyEnumType_LocalsPlusArgs) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugPropertyEnumType_LocalsPlusArgs> for IDebugPropertyEnumType_All {
    fn from(value: &IDebugPropertyEnumType_LocalsPlusArgs) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugPropertyEnumType_All> for IDebugPropertyEnumType_LocalsPlusArgs {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugPropertyEnumType_All> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugPropertyEnumType_All>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugPropertyEnumType_All> for &IDebugPropertyEnumType_LocalsPlusArgs {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugPropertyEnumType_All> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugPropertyEnumType_All>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugPropertyEnumType_LocalsPlusArgs_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, __midl__idebugpropertyenumtype_all0000: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugPropertyEnumType_Registers(::windows::runtime::IUnknown);
impl IDebugPropertyEnumType_Registers {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugPropertyEnumType_Registers {
    type Vtable = IDebugPropertyEnumType_Registers_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865881, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
impl ::std::convert::From<IDebugPropertyEnumType_Registers> for IDebugPropertyEnumType_All {
    fn from(value: IDebugPropertyEnumType_Registers) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugPropertyEnumType_Registers> for IDebugPropertyEnumType_All {
    fn from(value: &IDebugPropertyEnumType_Registers) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugPropertyEnumType_All> for IDebugPropertyEnumType_Registers {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugPropertyEnumType_All> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugPropertyEnumType_All>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugPropertyEnumType_All> for &IDebugPropertyEnumType_Registers {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugPropertyEnumType_All> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugPropertyEnumType_All>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugPropertyEnumType_Registers_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, __midl__idebugpropertyenumtype_all0000: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugRegisters(::windows::runtime::IUnknown);
impl IDebugRegisters {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberRegisters(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDescription(&self, register: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(register), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(desc)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetIndexByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, name: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), name.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetValue(&self, register: u32) -> ::windows::runtime::Result<DEBUG_VALUE> {
        let mut result__: <DEBUG_VALUE as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(register), &mut result__).from_abi::<DEBUG_VALUE>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetValue(&self, register: u32, value: *const DEBUG_VALUE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(register), ::std::mem::transmute(value)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetValues(&self, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(indices), ::std::mem::transmute(start), ::std::mem::transmute(values)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetValues(&self, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(indices), ::std::mem::transmute(start), ::std::mem::transmute(values)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputRegisters(&self, outputcontrol: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInstructionOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetStackOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetFrameOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugRegisters {
    type Vtable = IDebugRegisters_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3458765094, 40580, 17831, [147, 126, 103, 187, 24, 105, 20, 147]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugRegisters_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, register: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PSTR, index: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, register: u32, value: *mut DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, register: u32, value: *const DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugRegisters2(::windows::runtime::IUnknown);
impl IDebugRegisters2 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberRegisters(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDescription(&self, register: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(register), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(desc)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetIndexByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, name: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), name.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetValue(&self, register: u32) -> ::windows::runtime::Result<DEBUG_VALUE> {
        let mut result__: <DEBUG_VALUE as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(register), &mut result__).from_abi::<DEBUG_VALUE>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetValue(&self, register: u32, value: *const DEBUG_VALUE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(register), ::std::mem::transmute(value)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetValues(&self, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(indices), ::std::mem::transmute(start), ::std::mem::transmute(values)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetValues(&self, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(indices), ::std::mem::transmute(start), ::std::mem::transmute(values)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputRegisters(&self, outputcontrol: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInstructionOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetStackOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetFrameOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDescriptionWide(&self, register: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(register), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(desc)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetIndexByNameWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, name: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), name.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberPseudoRegisters(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetPseudoDescription(&self, register: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, typemodule: *mut u64, typeid: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(register), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(typemodule), ::std::mem::transmute(typeid)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetPseudoDescriptionWide(&self, register: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, typemodule: *mut u64, typeid: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(register), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(typemodule), ::std::mem::transmute(typeid)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetPseudoIndexByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, name: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), name.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetPseudoIndexByNameWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, name: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), name.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetPseudoValues(&self, source: u32, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(source), ::std::mem::transmute(count), ::std::mem::transmute(indices), ::std::mem::transmute(start), ::std::mem::transmute(values)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetPseudoValues(&self, source: u32, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), ::std::mem::transmute(source), ::std::mem::transmute(count), ::std::mem::transmute(indices), ::std::mem::transmute(start), ::std::mem::transmute(values)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetValues2(&self, source: u32, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), ::std::mem::transmute(source), ::std::mem::transmute(count), ::std::mem::transmute(indices), ::std::mem::transmute(start), ::std::mem::transmute(values)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetValues2(&self, source: u32, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(source), ::std::mem::transmute(count), ::std::mem::transmute(indices), ::std::mem::transmute(start), ::std::mem::transmute(values)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputRegisters2(&self, outputcontrol: u32, source: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(source), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInstructionOffset2(&self, source: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(source), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetStackOffset2(&self, source: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), ::std::mem::transmute(source), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetFrameOffset2(&self, source: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(source), &mut result__).from_abi::<u64>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugRegisters2 {
    type Vtable = IDebugRegisters2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(374779817, 6598, 20026, [151, 231, 93, 201, 22, 12, 249, 196]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugRegisters2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, register: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PSTR, index: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, register: u32, value: *mut DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, register: u32, value: *const DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, register: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PWSTR, index: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, register: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, typemodule: *mut u64, typeid: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, register: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, typemodule: *mut u64, typeid: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PSTR, index: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PWSTR, index: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, source: u32, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, source: u32, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, source: u32, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, source: u32, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, source: u32, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, source: u32, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, source: u32, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, source: u32, offset: *mut u64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugSessionProvider(::windows::runtime::IUnknown);
impl IDebugSessionProvider {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn StartDebugSession<'a, Param0: ::windows::runtime::IntoParam<'a, IRemoteDebugApplication>>(&self, pda: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), pda.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugSessionProvider {
    type Vtable = IDebugSessionProvider_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865833, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugSessionProvider_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pda: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugStackFrame(::windows::runtime::IUnknown);
impl IDebugStackFrame {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCodeContext(&self) -> ::windows::runtime::Result<IDebugCodeContext> {
        let mut result__: <IDebugCodeContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugCodeContext>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDescriptionString<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(&self, flong: Param0) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), flong.into_param().abi(), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLanguageString<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(&self, flong: Param0) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), flong.into_param().abi(), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThread(&self) -> ::windows::runtime::Result<IDebugApplicationThread> {
        let mut result__: <IDebugApplicationThread as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugApplicationThread>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDebugProperty(&self) -> ::windows::runtime::Result<IDebugProperty> {
        let mut result__: <IDebugProperty as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugProperty>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugStackFrame {
    type Vtable = IDebugStackFrame_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865815, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugStackFrame_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppcc: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flong: super::super::super::Foundation::BOOL, pbstrdescription: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flong: super::super::super::Foundation::BOOL, pbstrlanguage: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppat: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppdebugprop: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugStackFrame110(::windows::runtime::IUnknown);
impl IDebugStackFrame110 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCodeContext(&self) -> ::windows::runtime::Result<IDebugCodeContext> {
        let mut result__: <IDebugCodeContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugCodeContext>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDescriptionString<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(&self, flong: Param0) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), flong.into_param().abi(), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLanguageString<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(&self, flong: Param0) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), flong.into_param().abi(), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThread(&self) -> ::windows::runtime::Result<IDebugApplicationThread> {
        let mut result__: <IDebugApplicationThread as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugApplicationThread>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDebugProperty(&self) -> ::windows::runtime::Result<IDebugProperty> {
        let mut result__: <IDebugProperty as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugProperty>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetStackFrameType(&self) -> ::windows::runtime::Result<DEBUG_STACKFRAME_TYPE> {
        let mut result__: <DEBUG_STACKFRAME_TYPE as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<DEBUG_STACKFRAME_TYPE>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetScriptInvocationContext(&self) -> ::windows::runtime::Result<IScriptInvocationContext> {
        let mut result__: <IScriptInvocationContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IScriptInvocationContext>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugStackFrame110 {
    type Vtable = IDebugStackFrame110_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1263572497, 46826, 19236, [173, 203, 208, 204, 253, 26, 126, 51]);
}
impl ::std::convert::From<IDebugStackFrame110> for IDebugStackFrame {
    fn from(value: IDebugStackFrame110) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugStackFrame110> for IDebugStackFrame {
    fn from(value: &IDebugStackFrame110) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugStackFrame> for IDebugStackFrame110 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugStackFrame> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugStackFrame>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugStackFrame> for &IDebugStackFrame110 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugStackFrame> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugStackFrame>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugStackFrame110_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppcc: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flong: super::super::super::Foundation::BOOL, pbstrdescription: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flong: super::super::super::Foundation::BOOL, pbstrlanguage: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppat: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppdebugprop: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstackframekind: *mut DEBUG_STACKFRAME_TYPE) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppinvocationcontext: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugStackFrameSniffer(::windows::runtime::IUnknown);
impl IDebugStackFrameSniffer {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumStackFrames(&self) -> ::windows::runtime::Result<IEnumDebugStackFrames> {
        let mut result__: <IEnumDebugStackFrames as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumDebugStackFrames>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugStackFrameSniffer {
    type Vtable = IDebugStackFrameSniffer_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865816, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugStackFrameSniffer_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppedsf: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugStackFrameSnifferEx32(::windows::runtime::IUnknown);
impl IDebugStackFrameSnifferEx32 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumStackFrames(&self) -> ::windows::runtime::Result<IEnumDebugStackFrames> {
        let mut result__: <IEnumDebugStackFrames as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumDebugStackFrames>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumStackFramesEx32(&self, dwspmin: u32) -> ::windows::runtime::Result<IEnumDebugStackFrames> {
        let mut result__: <IEnumDebugStackFrames as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwspmin), &mut result__).from_abi::<IEnumDebugStackFrames>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugStackFrameSnifferEx32 {
    type Vtable = IDebugStackFrameSnifferEx32_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865817, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
impl ::std::convert::From<IDebugStackFrameSnifferEx32> for IDebugStackFrameSniffer {
    fn from(value: IDebugStackFrameSnifferEx32) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugStackFrameSnifferEx32> for IDebugStackFrameSniffer {
    fn from(value: &IDebugStackFrameSnifferEx32) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugStackFrameSniffer> for IDebugStackFrameSnifferEx32 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugStackFrameSniffer> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugStackFrameSniffer>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugStackFrameSniffer> for &IDebugStackFrameSnifferEx32 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugStackFrameSniffer> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugStackFrameSniffer>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugStackFrameSnifferEx32_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppedsf: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwspmin: u32, ppedsf: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugStackFrameSnifferEx64(::windows::runtime::IUnknown);
impl IDebugStackFrameSnifferEx64 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumStackFrames(&self) -> ::windows::runtime::Result<IEnumDebugStackFrames> {
        let mut result__: <IEnumDebugStackFrames as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumDebugStackFrames>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumStackFramesEx64(&self, dwspmin: u64) -> ::windows::runtime::Result<IEnumDebugStackFrames64> {
        let mut result__: <IEnumDebugStackFrames64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwspmin), &mut result__).from_abi::<IEnumDebugStackFrames64>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugStackFrameSnifferEx64 {
    type Vtable = IDebugStackFrameSnifferEx64_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2362518260, 18881, 19794, [141, 138, 193, 70, 244, 117, 129, 170]);
}
impl ::std::convert::From<IDebugStackFrameSnifferEx64> for IDebugStackFrameSniffer {
    fn from(value: IDebugStackFrameSnifferEx64) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IDebugStackFrameSnifferEx64> for IDebugStackFrameSniffer {
    fn from(value: &IDebugStackFrameSnifferEx64) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugStackFrameSniffer> for IDebugStackFrameSnifferEx64 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugStackFrameSniffer> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugStackFrameSniffer>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IDebugStackFrameSniffer> for &IDebugStackFrameSnifferEx64 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IDebugStackFrameSniffer> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IDebugStackFrameSniffer>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugStackFrameSnifferEx64_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppedsf: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwspmin: u64, ppedsf: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugSymbolGroup(::windows::runtime::IUnknown);
impl IDebugSymbolGroup {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberSymbols(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddSymbol<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, name: Param0, index: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), name.into_param().abi(), ::std::mem::transmute(index)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn RemoveSymbolByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, name: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), name.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveSymbolByIndex(&self, index: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(index)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolName(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolParameters(&self, start: u32, count: u32, params: *mut DEBUG_SYMBOL_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(params)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ExpandSymbol<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(&self, index: u32, expand: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), expand.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputSymbols(&self, outputcontrol: u32, flags: u32, start: u32, count: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags), ::std::mem::transmute(start), ::std::mem::transmute(count)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn WriteSymbol<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, value: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), value.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputAsType<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, r#type: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), r#type.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugSymbolGroup {
    type Vtable = IDebugSymbolGroup_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4065493782, 3866, 17457, [174, 237, 17, 208, 150, 225, 226, 171]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugSymbolGroup_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PSTR, index: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, params: *mut DEBUG_SYMBOL_PARAMETERS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, expand: super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32, start: u32, count: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, value: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, r#type: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugSymbolGroup2(::windows::runtime::IUnknown);
impl IDebugSymbolGroup2 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberSymbols(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddSymbol<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, name: Param0, index: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), name.into_param().abi(), ::std::mem::transmute(index)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn RemoveSymbolByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, name: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), name.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveSymbolByIndex(&self, index: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(index)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolName(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolParameters(&self, start: u32, count: u32, params: *mut DEBUG_SYMBOL_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(params)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ExpandSymbol<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(&self, index: u32, expand: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), expand.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputSymbols(&self, outputcontrol: u32, flags: u32, start: u32, count: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags), ::std::mem::transmute(start), ::std::mem::transmute(count)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn WriteSymbol<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, value: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), value.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputAsType<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, r#type: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), r#type.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddSymbolWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, name: Param0, index: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), name.into_param().abi(), ::std::mem::transmute(index)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn RemoveSymbolByNameWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, name: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), name.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolNameWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn WriteSymbolWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, index: u32, value: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), value.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OutputAsTypeWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, index: u32, r#type: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), r#type.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolTypeName(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolTypeNameWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolSize(&self, index: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolOffset(&self, index: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolRegister(&self, index: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolValueText(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolValueTextWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolEntryInformation(&self, index: u32) -> ::windows::runtime::Result<DEBUG_SYMBOL_ENTRY> {
        let mut result__: <DEBUG_SYMBOL_ENTRY as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), &mut result__).from_abi::<DEBUG_SYMBOL_ENTRY>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugSymbolGroup2 {
    type Vtable = IDebugSymbolGroup2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1786563679, 64350, 19916, [180, 28, 108, 32, 48, 123, 204, 199]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugSymbolGroup2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PSTR, index: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, params: *mut DEBUG_SYMBOL_PARAMETERS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, expand: super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32, start: u32, count: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, value: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, r#type: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PWSTR, index: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, value: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, r#type: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, size: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, register: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, entry: *mut DEBUG_SYMBOL_ENTRY) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugSymbols(::windows::runtime::IUnknown);
impl IDebugSymbols {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddSymbolOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveSymbolOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetSymbolOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNameByOffset(&self, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOffsetByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, symbol: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), symbol.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNearNameByOffset(&self, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(delta), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLineByOffset(&self, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(line), ::std::mem::transmute(filebuffer), ::std::mem::transmute(filebuffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOffsetByLine<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, line: u32, file: Param1) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(line), file.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberModules(&self, loaded: *mut u32, unloaded: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(loaded), ::std::mem::transmute(unloaded)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetModuleByIndex(&self, index: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleByModuleName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, name: Param0, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), name.into_param().abi(), ::std::mem::transmute(startindex), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetModuleByOffset(&self, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(startindex), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleNames(&self, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(index),
            ::std::mem::transmute(base),
            ::std::mem::transmute(imagenamebuffer),
            ::std::mem::transmute(imagenamebuffersize),
            ::std::mem::transmute(imagenamesize),
            ::std::mem::transmute(modulenamebuffer),
            ::std::mem::transmute(modulenamebuffersize),
            ::std::mem::transmute(modulenamesize),
            ::std::mem::transmute(loadedimagenamebuffer),
            ::std::mem::transmute(loadedimagenamebuffersize),
            ::std::mem::transmute(loadedimagenamesize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetModuleParameters(&self, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(bases), ::std::mem::transmute(start), ::std::mem::transmute(params)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolModule<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, symbol: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), symbol.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTypeName(&self, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTypeId<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, module: u64, name: Param1) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), name.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTypeSize(&self, module: u64, typeid: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetFieldOffset<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, module: u64, typeid: u32, field: Param2) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), field.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolTypeId<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, symbol: Param0, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), symbol.into_param().abi(), ::std::mem::transmute(typeid), ::std::mem::transmute(module)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOffsetTypeId(&self, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(typeid), ::std::mem::transmute(module)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadTypedDataVirtual(&self, offset: u64, module: u64, typeid: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteTypedDataVirtual(&self, offset: u64, module: u64, typeid: u32, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputTypedDataVirtual(&self, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadTypedDataPhysical(&self, offset: u64, module: u64, typeid: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteTypedDataPhysical(&self, offset: u64, module: u64, typeid: u32, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputTypedDataPhysical(&self, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetScope(&self, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(scopeframe), ::std::mem::transmute(scopecontext), ::std::mem::transmute(scopecontextsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetScope(&self, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(scopeframe), ::std::mem::transmute(scopecontext), ::std::mem::transmute(scopecontextsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ResetScope(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetScopeSymbolGroup<'a, Param1: ::windows::runtime::IntoParam<'a, IDebugSymbolGroup>>(&self, flags: u32, update: Param1) -> ::windows::runtime::Result<IDebugSymbolGroup> {
        let mut result__: <IDebugSymbolGroup as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), update.into_param().abi(), &mut result__).from_abi::<IDebugSymbolGroup>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateSymbolGroup(&self) -> ::windows::runtime::Result<IDebugSymbolGroup> {
        let mut result__: <IDebugSymbolGroup as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugSymbolGroup>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartSymbolMatch<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, pattern: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), pattern.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNextSymbolMatch(&self, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).37)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(matchsize), ::std::mem::transmute(offset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EndSymbolMatch(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Reload<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, module: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).39)(::std::mem::transmute_copy(self), module.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolPath(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSymbolPath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).41)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendSymbolPath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetImagePath(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetImagePath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).44)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendImagePath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).45)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourcePath(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourcePathElement(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).47)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(elementsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSourcePath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).48)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendSourcePath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).49)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FindSourceFile<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, startelement: u32, file: Param1, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).50)(::std::mem::transmute_copy(self), ::std::mem::transmute(startelement), file.into_param().abi(), ::std::mem::transmute(flags), ::std::mem::transmute(foundelement), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(foundsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceFileLineOffsets<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, file: Param0, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).51)(::std::mem::transmute_copy(self), file.into_param().abi(), ::std::mem::transmute(buffer), ::std::mem::transmute(bufferlines), ::std::mem::transmute(filelines)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugSymbols {
    type Vtable = IDebugSymbols_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2352081292, 38970, 18597, [144, 22, 111, 229, 214, 103, 169, 80]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugSymbols_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, line: u32, file: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, loaded: *mut u32, unloaded: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PSTR, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, name: super::super::super::Foundation::PSTR, typeid: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, size: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR, offset: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, module: u64, typeid: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, module: u64, typeid: u32, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, module: u64, typeid: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, module: u64, typeid: u32, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, update: ::windows::runtime::RawPtr, symbols: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, group: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pattern: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugSymbols2(::windows::runtime::IUnknown);
impl IDebugSymbols2 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddSymbolOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveSymbolOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetSymbolOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNameByOffset(&self, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOffsetByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, symbol: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), symbol.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNearNameByOffset(&self, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(delta), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLineByOffset(&self, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(line), ::std::mem::transmute(filebuffer), ::std::mem::transmute(filebuffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOffsetByLine<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, line: u32, file: Param1) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(line), file.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberModules(&self, loaded: *mut u32, unloaded: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(loaded), ::std::mem::transmute(unloaded)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetModuleByIndex(&self, index: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleByModuleName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, name: Param0, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), name.into_param().abi(), ::std::mem::transmute(startindex), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetModuleByOffset(&self, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(startindex), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleNames(&self, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(index),
            ::std::mem::transmute(base),
            ::std::mem::transmute(imagenamebuffer),
            ::std::mem::transmute(imagenamebuffersize),
            ::std::mem::transmute(imagenamesize),
            ::std::mem::transmute(modulenamebuffer),
            ::std::mem::transmute(modulenamebuffersize),
            ::std::mem::transmute(modulenamesize),
            ::std::mem::transmute(loadedimagenamebuffer),
            ::std::mem::transmute(loadedimagenamebuffersize),
            ::std::mem::transmute(loadedimagenamesize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetModuleParameters(&self, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(bases), ::std::mem::transmute(start), ::std::mem::transmute(params)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolModule<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, symbol: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), symbol.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTypeName(&self, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTypeId<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, module: u64, name: Param1) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), name.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTypeSize(&self, module: u64, typeid: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetFieldOffset<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, module: u64, typeid: u32, field: Param2) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), field.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolTypeId<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, symbol: Param0, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), symbol.into_param().abi(), ::std::mem::transmute(typeid), ::std::mem::transmute(module)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOffsetTypeId(&self, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(typeid), ::std::mem::transmute(module)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadTypedDataVirtual(&self, offset: u64, module: u64, typeid: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteTypedDataVirtual(&self, offset: u64, module: u64, typeid: u32, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputTypedDataVirtual(&self, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadTypedDataPhysical(&self, offset: u64, module: u64, typeid: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteTypedDataPhysical(&self, offset: u64, module: u64, typeid: u32, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputTypedDataPhysical(&self, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetScope(&self, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(scopeframe), ::std::mem::transmute(scopecontext), ::std::mem::transmute(scopecontextsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetScope(&self, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(scopeframe), ::std::mem::transmute(scopecontext), ::std::mem::transmute(scopecontextsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ResetScope(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetScopeSymbolGroup<'a, Param1: ::windows::runtime::IntoParam<'a, IDebugSymbolGroup>>(&self, flags: u32, update: Param1) -> ::windows::runtime::Result<IDebugSymbolGroup> {
        let mut result__: <IDebugSymbolGroup as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), update.into_param().abi(), &mut result__).from_abi::<IDebugSymbolGroup>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateSymbolGroup(&self) -> ::windows::runtime::Result<IDebugSymbolGroup> {
        let mut result__: <IDebugSymbolGroup as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugSymbolGroup>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartSymbolMatch<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, pattern: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), pattern.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNextSymbolMatch(&self, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).37)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(matchsize), ::std::mem::transmute(offset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EndSymbolMatch(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Reload<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, module: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).39)(::std::mem::transmute_copy(self), module.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolPath(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSymbolPath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).41)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendSymbolPath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetImagePath(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetImagePath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).44)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendImagePath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).45)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourcePath(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourcePathElement(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).47)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(elementsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSourcePath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).48)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendSourcePath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).49)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FindSourceFile<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, startelement: u32, file: Param1, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).50)(::std::mem::transmute_copy(self), ::std::mem::transmute(startelement), file.into_param().abi(), ::std::mem::transmute(flags), ::std::mem::transmute(foundelement), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(foundsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceFileLineOffsets<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, file: Param0, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).51)(::std::mem::transmute_copy(self), file.into_param().abi(), ::std::mem::transmute(buffer), ::std::mem::transmute(bufferlines), ::std::mem::transmute(filelines)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleVersionInformation<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, base: u64, item: Param2, buffer: *mut ::std::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).52)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(base), item.into_param().abi(), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(verinfosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleNameString(&self, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).53)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), ::std::mem::transmute(index), ::std::mem::transmute(base), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetConstantName(&self, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).54)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(value), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetFieldName(&self, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).55)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(fieldindex), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTypeOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).56)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddTypeOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).57)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveTypeOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).58)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetTypeOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).59)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugSymbols2 {
    type Vtable = IDebugSymbols2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(980447761, 45021, 17557, [173, 79, 86, 254, 205, 248, 22, 63]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugSymbols2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, line: u32, file: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, loaded: *mut u32, unloaded: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PSTR, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, name: super::super::super::Foundation::PSTR, typeid: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, size: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR, offset: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, module: u64, typeid: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, module: u64, typeid: u32, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, module: u64, typeid: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, module: u64, typeid: u32, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, update: ::windows::runtime::RawPtr, symbols: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, group: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pattern: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, base: u64, item: super::super::super::Foundation::PSTR, buffer: *mut ::std::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugSymbols3(::windows::runtime::IUnknown);
impl IDebugSymbols3 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddSymbolOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveSymbolOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetSymbolOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNameByOffset(&self, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOffsetByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, symbol: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), symbol.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNearNameByOffset(&self, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(delta), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLineByOffset(&self, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(line), ::std::mem::transmute(filebuffer), ::std::mem::transmute(filebuffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOffsetByLine<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, line: u32, file: Param1) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(line), file.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberModules(&self, loaded: *mut u32, unloaded: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(loaded), ::std::mem::transmute(unloaded)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetModuleByIndex(&self, index: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleByModuleName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, name: Param0, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), name.into_param().abi(), ::std::mem::transmute(startindex), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetModuleByOffset(&self, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(startindex), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleNames(&self, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(index),
            ::std::mem::transmute(base),
            ::std::mem::transmute(imagenamebuffer),
            ::std::mem::transmute(imagenamebuffersize),
            ::std::mem::transmute(imagenamesize),
            ::std::mem::transmute(modulenamebuffer),
            ::std::mem::transmute(modulenamebuffersize),
            ::std::mem::transmute(modulenamesize),
            ::std::mem::transmute(loadedimagenamebuffer),
            ::std::mem::transmute(loadedimagenamebuffersize),
            ::std::mem::transmute(loadedimagenamesize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetModuleParameters(&self, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(bases), ::std::mem::transmute(start), ::std::mem::transmute(params)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolModule<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, symbol: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), symbol.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTypeName(&self, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTypeId<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, module: u64, name: Param1) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), name.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTypeSize(&self, module: u64, typeid: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetFieldOffset<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, module: u64, typeid: u32, field: Param2) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), field.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolTypeId<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, symbol: Param0, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), symbol.into_param().abi(), ::std::mem::transmute(typeid), ::std::mem::transmute(module)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOffsetTypeId(&self, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(typeid), ::std::mem::transmute(module)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadTypedDataVirtual(&self, offset: u64, module: u64, typeid: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteTypedDataVirtual(&self, offset: u64, module: u64, typeid: u32, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputTypedDataVirtual(&self, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadTypedDataPhysical(&self, offset: u64, module: u64, typeid: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteTypedDataPhysical(&self, offset: u64, module: u64, typeid: u32, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputTypedDataPhysical(&self, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetScope(&self, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(scopeframe), ::std::mem::transmute(scopecontext), ::std::mem::transmute(scopecontextsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetScope(&self, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(scopeframe), ::std::mem::transmute(scopecontext), ::std::mem::transmute(scopecontextsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ResetScope(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetScopeSymbolGroup<'a, Param1: ::windows::runtime::IntoParam<'a, IDebugSymbolGroup>>(&self, flags: u32, update: Param1) -> ::windows::runtime::Result<IDebugSymbolGroup> {
        let mut result__: <IDebugSymbolGroup as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), update.into_param().abi(), &mut result__).from_abi::<IDebugSymbolGroup>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateSymbolGroup(&self) -> ::windows::runtime::Result<IDebugSymbolGroup> {
        let mut result__: <IDebugSymbolGroup as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugSymbolGroup>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartSymbolMatch<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, pattern: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), pattern.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNextSymbolMatch(&self, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).37)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(matchsize), ::std::mem::transmute(offset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EndSymbolMatch(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Reload<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, module: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).39)(::std::mem::transmute_copy(self), module.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolPath(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSymbolPath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).41)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendSymbolPath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetImagePath(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetImagePath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).44)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendImagePath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).45)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourcePath(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourcePathElement(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).47)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(elementsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSourcePath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).48)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendSourcePath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).49)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FindSourceFile<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, startelement: u32, file: Param1, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).50)(::std::mem::transmute_copy(self), ::std::mem::transmute(startelement), file.into_param().abi(), ::std::mem::transmute(flags), ::std::mem::transmute(foundelement), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(foundsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceFileLineOffsets<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, file: Param0, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).51)(::std::mem::transmute_copy(self), file.into_param().abi(), ::std::mem::transmute(buffer), ::std::mem::transmute(bufferlines), ::std::mem::transmute(filelines)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleVersionInformation<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, base: u64, item: Param2, buffer: *mut ::std::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).52)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(base), item.into_param().abi(), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(verinfosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleNameString(&self, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).53)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), ::std::mem::transmute(index), ::std::mem::transmute(base), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetConstantName(&self, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).54)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(value), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetFieldName(&self, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).55)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(fieldindex), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTypeOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).56)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddTypeOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).57)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveTypeOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).58)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetTypeOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).59)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNameByOffsetWide(&self, offset: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).60)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOffsetByNameWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, symbol: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).61)(::std::mem::transmute_copy(self), symbol.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNearNameByOffsetWide(&self, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).62)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(delta), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLineByOffsetWide(&self, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).63)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(line), ::std::mem::transmute(filebuffer), ::std::mem::transmute(filebuffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOffsetByLineWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, line: u32, file: Param1) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).64)(::std::mem::transmute_copy(self), ::std::mem::transmute(line), file.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleByModuleNameWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, name: Param0, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).65)(::std::mem::transmute_copy(self), name.into_param().abi(), ::std::mem::transmute(startindex), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolModuleWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, symbol: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).66)(::std::mem::transmute_copy(self), symbol.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTypeNameWide(&self, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).67)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTypeIdWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, module: u64, name: Param1) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).68)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), name.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetFieldOffsetWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, module: u64, typeid: u32, field: Param2) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).69)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), field.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolTypeIdWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, symbol: Param0, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).70)(::std::mem::transmute_copy(self), symbol.into_param().abi(), ::std::mem::transmute(typeid), ::std::mem::transmute(module)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetScopeSymbolGroup2<'a, Param1: ::windows::runtime::IntoParam<'a, IDebugSymbolGroup2>>(&self, flags: u32, update: Param1) -> ::windows::runtime::Result<IDebugSymbolGroup2> {
        let mut result__: <IDebugSymbolGroup2 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).71)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), update.into_param().abi(), &mut result__).from_abi::<IDebugSymbolGroup2>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateSymbolGroup2(&self) -> ::windows::runtime::Result<IDebugSymbolGroup2> {
        let mut result__: <IDebugSymbolGroup2 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).72)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugSymbolGroup2>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartSymbolMatchWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pattern: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).73)(::std::mem::transmute_copy(self), pattern.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNextSymbolMatchWide(&self, handle: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).74)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(matchsize), ::std::mem::transmute(offset)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ReloadWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, module: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).75)(::std::mem::transmute_copy(self), module.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolPathWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).76)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSymbolPathWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).77)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendSymbolPathWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).78)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetImagePathWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).79)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetImagePathWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).80)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendImagePathWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).81)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourcePathWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).82)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourcePathElementWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).83)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(elementsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSourcePathWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).84)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendSourcePathWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).85)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FindSourceFileWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, startelement: u32, file: Param1, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).86)(::std::mem::transmute_copy(self), ::std::mem::transmute(startelement), file.into_param().abi(), ::std::mem::transmute(flags), ::std::mem::transmute(foundelement), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(foundsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceFileLineOffsetsWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, file: Param0, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).87)(::std::mem::transmute_copy(self), file.into_param().abi(), ::std::mem::transmute(buffer), ::std::mem::transmute(bufferlines), ::std::mem::transmute(filelines)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleVersionInformationWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, index: u32, base: u64, item: Param2, buffer: *mut ::std::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).88)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(base), item.into_param().abi(), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(verinfosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleNameStringWide(&self, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).89)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), ::std::mem::transmute(index), ::std::mem::transmute(base), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetConstantNameWide(&self, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).90)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(value), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetFieldNameWide(&self, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).91)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(fieldindex), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsManagedModule(&self, index: u32, base: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).92)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleByModuleName2<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, name: Param0, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).93)(::std::mem::transmute_copy(self), name.into_param().abi(), ::std::mem::transmute(startindex), ::std::mem::transmute(flags), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleByModuleName2Wide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, name: Param0, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).94)(::std::mem::transmute_copy(self), name.into_param().abi(), ::std::mem::transmute(startindex), ::std::mem::transmute(flags), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetModuleByOffset2(&self, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).95)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(startindex), ::std::mem::transmute(flags), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddSyntheticModule<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, base: u64, size: u32, imagepath: Param2, modulename: Param3, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).96)(::std::mem::transmute_copy(self), ::std::mem::transmute(base), ::std::mem::transmute(size), imagepath.into_param().abi(), modulename.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddSyntheticModuleWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, base: u64, size: u32, imagepath: Param2, modulename: Param3, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).97)(::std::mem::transmute_copy(self), ::std::mem::transmute(base), ::std::mem::transmute(size), imagepath.into_param().abi(), modulename.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveSyntheticModule(&self, base: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).98)(::std::mem::transmute_copy(self), ::std::mem::transmute(base)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentScopeFrameIndex(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).99)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetScopeFrameByIndex(&self, index: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).100)(::std::mem::transmute_copy(self), ::std::mem::transmute(index)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetScopeFromJitDebugInfo(&self, outputcontrol: u32, infooffset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).101)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(infooffset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetScopeFromStoredEvent(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).102)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputSymbolByOffset(&self, outputcontrol: u32, flags: u32, offset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).103)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags), ::std::mem::transmute(offset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetFunctionEntryByOffset(&self, offset: u64, flags: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).104)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(flags), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bufferneeded)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetFieldTypeAndOffset<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, module: u64, containertypeid: u32, field: Param2, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).105)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(containertypeid), field.into_param().abi(), ::std::mem::transmute(fieldtypeid), ::std::mem::transmute(offset)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetFieldTypeAndOffsetWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, module: u64, containertypeid: u32, field: Param2, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).106)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(containertypeid), field.into_param().abi(), ::std::mem::transmute(fieldtypeid), ::std::mem::transmute(offset)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddSyntheticSymbol<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, offset: u64, size: u32, name: Param2, flags: u32) -> ::windows::runtime::Result<DEBUG_MODULE_AND_ID> {
        let mut result__: <DEBUG_MODULE_AND_ID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).107)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(size), name.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<DEBUG_MODULE_AND_ID>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddSyntheticSymbolWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, offset: u64, size: u32, name: Param2, flags: u32) -> ::windows::runtime::Result<DEBUG_MODULE_AND_ID> {
        let mut result__: <DEBUG_MODULE_AND_ID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).108)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(size), name.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<DEBUG_MODULE_AND_ID>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveSyntheticSymbol(&self, id: *const DEBUG_MODULE_AND_ID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).109)(::std::mem::transmute_copy(self), ::std::mem::transmute(id)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolEntriesByOffset(&self, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).110)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(flags), ::std::mem::transmute(ids), ::std::mem::transmute(displacements), ::std::mem::transmute(idscount), ::std::mem::transmute(entries)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolEntriesByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, symbol: Param0, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).111)(::std::mem::transmute_copy(self), symbol.into_param().abi(), ::std::mem::transmute(flags), ::std::mem::transmute(ids), ::std::mem::transmute(idscount), ::std::mem::transmute(entries)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolEntriesByNameWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, symbol: Param0, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).112)(::std::mem::transmute_copy(self), symbol.into_param().abi(), ::std::mem::transmute(flags), ::std::mem::transmute(ids), ::std::mem::transmute(idscount), ::std::mem::transmute(entries)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolEntryByToken(&self, modulebase: u64, token: u32) -> ::windows::runtime::Result<DEBUG_MODULE_AND_ID> {
        let mut result__: <DEBUG_MODULE_AND_ID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).113)(::std::mem::transmute_copy(self), ::std::mem::transmute(modulebase), ::std::mem::transmute(token), &mut result__).from_abi::<DEBUG_MODULE_AND_ID>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolEntryInformation(&self, id: *const DEBUG_MODULE_AND_ID) -> ::windows::runtime::Result<DEBUG_SYMBOL_ENTRY> {
        let mut result__: <DEBUG_SYMBOL_ENTRY as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).114)(::std::mem::transmute_copy(self), ::std::mem::transmute(id), &mut result__).from_abi::<DEBUG_SYMBOL_ENTRY>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolEntryString(&self, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).115)(::std::mem::transmute_copy(self), ::std::mem::transmute(id), ::std::mem::transmute(which), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolEntryStringWide(&self, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).116)(::std::mem::transmute_copy(self), ::std::mem::transmute(id), ::std::mem::transmute(which), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolEntryOffsetRegions(&self, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).117)(::std::mem::transmute_copy(self), ::std::mem::transmute(id), ::std::mem::transmute(flags), ::std::mem::transmute(regions), ::std::mem::transmute(regionscount), ::std::mem::transmute(regionsavail)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolEntryBySymbolEntry(&self, fromid: *const DEBUG_MODULE_AND_ID, flags: u32) -> ::windows::runtime::Result<DEBUG_MODULE_AND_ID> {
        let mut result__: <DEBUG_MODULE_AND_ID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).118)(::std::mem::transmute_copy(self), ::std::mem::transmute(fromid), ::std::mem::transmute(flags), &mut result__).from_abi::<DEBUG_MODULE_AND_ID>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSourceEntriesByOffset(&self, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).119)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(flags), ::std::mem::transmute(entries), ::std::mem::transmute(entriescount), ::std::mem::transmute(entriesavail)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceEntriesByLine<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, line: u32, file: Param1, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).120)(::std::mem::transmute_copy(self), ::std::mem::transmute(line), file.into_param().abi(), ::std::mem::transmute(flags), ::std::mem::transmute(entries), ::std::mem::transmute(entriescount), ::std::mem::transmute(entriesavail)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceEntriesByLineWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, line: u32, file: Param1, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).121)(::std::mem::transmute_copy(self), ::std::mem::transmute(line), file.into_param().abi(), ::std::mem::transmute(flags), ::std::mem::transmute(entries), ::std::mem::transmute(entriescount), ::std::mem::transmute(entriesavail)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceEntryString(&self, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).122)(::std::mem::transmute_copy(self), ::std::mem::transmute(entry), ::std::mem::transmute(which), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceEntryStringWide(&self, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).123)(::std::mem::transmute_copy(self), ::std::mem::transmute(entry), ::std::mem::transmute(which), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSourceEntryOffsetRegions(&self, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).124)(::std::mem::transmute_copy(self), ::std::mem::transmute(entry), ::std::mem::transmute(flags), ::std::mem::transmute(regions), ::std::mem::transmute(regionscount), ::std::mem::transmute(regionsavail)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSourceEntryBySourceEntry(&self, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32) -> ::windows::runtime::Result<DEBUG_SYMBOL_SOURCE_ENTRY> {
        let mut result__: <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).125)(::std::mem::transmute_copy(self), ::std::mem::transmute(fromentry), ::std::mem::transmute(flags), &mut result__).from_abi::<DEBUG_SYMBOL_SOURCE_ENTRY>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDebugSymbols3 {
    type Vtable = IDebugSymbols3_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4029660876, 20652, 20278, [154, 217, 201, 117, 232, 243, 47, 248]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugSymbols3_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, line: u32, file: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, loaded: *mut u32, unloaded: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PSTR, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, name: super::super::super::Foundation::PSTR, typeid: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, size: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR, offset: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, module: u64, typeid: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, module: u64, typeid: u32, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, module: u64, typeid: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, module: u64, typeid: u32, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, update: ::windows::runtime::RawPtr, symbols: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, group: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pattern: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, base: u64, item: super::super::super::Foundation::PSTR, buffer: *mut ::std::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, line: u32, file: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PWSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PWSTR, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, name: super::super::super::Foundation::PWSTR, typeid: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, field: super::super::super::Foundation::PWSTR, offset: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PWSTR, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, update: ::windows::runtime::RawPtr, symbols: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, group: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pattern: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, startelement: u32, file: super::super::super::Foundation::PWSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PWSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, base: u64, item: super::super::super::Foundation::PWSTR, buffer: *mut ::std::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, base: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PWSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, base: u64, size: u32, imagepath: super::super::super::Foundation::PSTR, modulename: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, base: u64, size: u32, imagepath: super::super::super::Foundation::PWSTR, modulename: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, base: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, infooffset: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32, offset: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, flags: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, containertypeid: u32, field: super::super::super::Foundation::PSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, containertypeid: u32, field: super::super::super::Foundation::PWSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, size: u32, name: super::super::super::Foundation::PSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, size: u32, name: super::super::super::Foundation::PWSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *const DEBUG_MODULE_AND_ID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PWSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, modulebase: u64, token: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *const DEBUG_MODULE_AND_ID, info: *mut DEBUG_SYMBOL_ENTRY) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fromid: *const DEBUG_MODULE_AND_ID, flags: u32, toid: *mut DEBUG_MODULE_AND_ID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, line: u32, file: super::super::super::Foundation::PSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, line: u32, file: super::super::super::Foundation::PWSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, toentry: *mut DEBUG_SYMBOL_SOURCE_ENTRY) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugSymbols4(::windows::runtime::IUnknown);
impl IDebugSymbols4 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddSymbolOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveSymbolOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetSymbolOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNameByOffset(&self, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOffsetByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, symbol: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), symbol.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNearNameByOffset(&self, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(delta), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLineByOffset(&self, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(line), ::std::mem::transmute(filebuffer), ::std::mem::transmute(filebuffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOffsetByLine<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, line: u32, file: Param1) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(line), file.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberModules(&self, loaded: *mut u32, unloaded: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(loaded), ::std::mem::transmute(unloaded)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetModuleByIndex(&self, index: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleByModuleName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, name: Param0, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), name.into_param().abi(), ::std::mem::transmute(startindex), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetModuleByOffset(&self, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(startindex), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleNames(&self, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(index),
            ::std::mem::transmute(base),
            ::std::mem::transmute(imagenamebuffer),
            ::std::mem::transmute(imagenamebuffersize),
            ::std::mem::transmute(imagenamesize),
            ::std::mem::transmute(modulenamebuffer),
            ::std::mem::transmute(modulenamebuffersize),
            ::std::mem::transmute(modulenamesize),
            ::std::mem::transmute(loadedimagenamebuffer),
            ::std::mem::transmute(loadedimagenamebuffersize),
            ::std::mem::transmute(loadedimagenamesize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetModuleParameters(&self, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(bases), ::std::mem::transmute(start), ::std::mem::transmute(params)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolModule<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, symbol: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), symbol.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTypeName(&self, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTypeId<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, module: u64, name: Param1) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), name.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTypeSize(&self, module: u64, typeid: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetFieldOffset<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, module: u64, typeid: u32, field: Param2) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), field.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolTypeId<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, symbol: Param0, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), symbol.into_param().abi(), ::std::mem::transmute(typeid), ::std::mem::transmute(module)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOffsetTypeId(&self, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(typeid), ::std::mem::transmute(module)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadTypedDataVirtual(&self, offset: u64, module: u64, typeid: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteTypedDataVirtual(&self, offset: u64, module: u64, typeid: u32, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputTypedDataVirtual(&self, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadTypedDataPhysical(&self, offset: u64, module: u64, typeid: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteTypedDataPhysical(&self, offset: u64, module: u64, typeid: u32, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputTypedDataPhysical(&self, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetScope(&self, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(scopeframe), ::std::mem::transmute(scopecontext), ::std::mem::transmute(scopecontextsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetScope(&self, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(scopeframe), ::std::mem::transmute(scopecontext), ::std::mem::transmute(scopecontextsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ResetScope(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetScopeSymbolGroup<'a, Param1: ::windows::runtime::IntoParam<'a, IDebugSymbolGroup>>(&self, flags: u32, update: Param1) -> ::windows::runtime::Result<IDebugSymbolGroup> {
        let mut result__: <IDebugSymbolGroup as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), update.into_param().abi(), &mut result__).from_abi::<IDebugSymbolGroup>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateSymbolGroup(&self) -> ::windows::runtime::Result<IDebugSymbolGroup> {
        let mut result__: <IDebugSymbolGroup as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugSymbolGroup>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartSymbolMatch<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, pattern: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), pattern.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNextSymbolMatch(&self, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).37)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(matchsize), ::std::mem::transmute(offset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EndSymbolMatch(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Reload<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, module: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).39)(::std::mem::transmute_copy(self), module.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolPath(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSymbolPath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).41)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendSymbolPath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetImagePath(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetImagePath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).44)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendImagePath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).45)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourcePath(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourcePathElement(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).47)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(elementsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSourcePath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).48)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendSourcePath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).49)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FindSourceFile<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, startelement: u32, file: Param1, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).50)(::std::mem::transmute_copy(self), ::std::mem::transmute(startelement), file.into_param().abi(), ::std::mem::transmute(flags), ::std::mem::transmute(foundelement), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(foundsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceFileLineOffsets<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, file: Param0, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).51)(::std::mem::transmute_copy(self), file.into_param().abi(), ::std::mem::transmute(buffer), ::std::mem::transmute(bufferlines), ::std::mem::transmute(filelines)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleVersionInformation<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, base: u64, item: Param2, buffer: *mut ::std::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).52)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(base), item.into_param().abi(), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(verinfosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleNameString(&self, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).53)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), ::std::mem::transmute(index), ::std::mem::transmute(base), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetConstantName(&self, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).54)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(value), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetFieldName(&self, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).55)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(fieldindex), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTypeOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).56)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddTypeOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).57)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveTypeOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).58)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetTypeOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).59)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNameByOffsetWide(&self, offset: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).60)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOffsetByNameWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, symbol: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).61)(::std::mem::transmute_copy(self), symbol.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNearNameByOffsetWide(&self, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).62)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(delta), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLineByOffsetWide(&self, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).63)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(line), ::std::mem::transmute(filebuffer), ::std::mem::transmute(filebuffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOffsetByLineWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, line: u32, file: Param1) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).64)(::std::mem::transmute_copy(self), ::std::mem::transmute(line), file.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleByModuleNameWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, name: Param0, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).65)(::std::mem::transmute_copy(self), name.into_param().abi(), ::std::mem::transmute(startindex), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolModuleWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, symbol: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).66)(::std::mem::transmute_copy(self), symbol.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTypeNameWide(&self, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).67)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTypeIdWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, module: u64, name: Param1) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).68)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), name.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetFieldOffsetWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, module: u64, typeid: u32, field: Param2) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).69)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), field.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolTypeIdWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, symbol: Param0, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).70)(::std::mem::transmute_copy(self), symbol.into_param().abi(), ::std::mem::transmute(typeid), ::std::mem::transmute(module)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetScopeSymbolGroup2<'a, Param1: ::windows::runtime::IntoParam<'a, IDebugSymbolGroup2>>(&self, flags: u32, update: Param1) -> ::windows::runtime::Result<IDebugSymbolGroup2> {
        let mut result__: <IDebugSymbolGroup2 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).71)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), update.into_param().abi(), &mut result__).from_abi::<IDebugSymbolGroup2>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateSymbolGroup2(&self) -> ::windows::runtime::Result<IDebugSymbolGroup2> {
        let mut result__: <IDebugSymbolGroup2 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).72)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugSymbolGroup2>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartSymbolMatchWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pattern: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).73)(::std::mem::transmute_copy(self), pattern.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNextSymbolMatchWide(&self, handle: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).74)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(matchsize), ::std::mem::transmute(offset)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ReloadWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, module: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).75)(::std::mem::transmute_copy(self), module.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolPathWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).76)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSymbolPathWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).77)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendSymbolPathWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).78)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetImagePathWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).79)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetImagePathWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).80)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendImagePathWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).81)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourcePathWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).82)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourcePathElementWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).83)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(elementsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSourcePathWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).84)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendSourcePathWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).85)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FindSourceFileWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, startelement: u32, file: Param1, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).86)(::std::mem::transmute_copy(self), ::std::mem::transmute(startelement), file.into_param().abi(), ::std::mem::transmute(flags), ::std::mem::transmute(foundelement), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(foundsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceFileLineOffsetsWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, file: Param0, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).87)(::std::mem::transmute_copy(self), file.into_param().abi(), ::std::mem::transmute(buffer), ::std::mem::transmute(bufferlines), ::std::mem::transmute(filelines)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleVersionInformationWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, index: u32, base: u64, item: Param2, buffer: *mut ::std::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).88)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(base), item.into_param().abi(), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(verinfosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleNameStringWide(&self, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).89)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), ::std::mem::transmute(index), ::std::mem::transmute(base), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetConstantNameWide(&self, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).90)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(value), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetFieldNameWide(&self, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).91)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(fieldindex), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsManagedModule(&self, index: u32, base: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).92)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleByModuleName2<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, name: Param0, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).93)(::std::mem::transmute_copy(self), name.into_param().abi(), ::std::mem::transmute(startindex), ::std::mem::transmute(flags), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleByModuleName2Wide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, name: Param0, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).94)(::std::mem::transmute_copy(self), name.into_param().abi(), ::std::mem::transmute(startindex), ::std::mem::transmute(flags), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetModuleByOffset2(&self, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).95)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(startindex), ::std::mem::transmute(flags), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddSyntheticModule<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, base: u64, size: u32, imagepath: Param2, modulename: Param3, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).96)(::std::mem::transmute_copy(self), ::std::mem::transmute(base), ::std::mem::transmute(size), imagepath.into_param().abi(), modulename.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddSyntheticModuleWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, base: u64, size: u32, imagepath: Param2, modulename: Param3, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).97)(::std::mem::transmute_copy(self), ::std::mem::transmute(base), ::std::mem::transmute(size), imagepath.into_param().abi(), modulename.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveSyntheticModule(&self, base: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).98)(::std::mem::transmute_copy(self), ::std::mem::transmute(base)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentScopeFrameIndex(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).99)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetScopeFrameByIndex(&self, index: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).100)(::std::mem::transmute_copy(self), ::std::mem::transmute(index)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetScopeFromJitDebugInfo(&self, outputcontrol: u32, infooffset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).101)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(infooffset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetScopeFromStoredEvent(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).102)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputSymbolByOffset(&self, outputcontrol: u32, flags: u32, offset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).103)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags), ::std::mem::transmute(offset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetFunctionEntryByOffset(&self, offset: u64, flags: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).104)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(flags), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bufferneeded)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetFieldTypeAndOffset<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, module: u64, containertypeid: u32, field: Param2, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).105)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(containertypeid), field.into_param().abi(), ::std::mem::transmute(fieldtypeid), ::std::mem::transmute(offset)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetFieldTypeAndOffsetWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, module: u64, containertypeid: u32, field: Param2, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).106)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(containertypeid), field.into_param().abi(), ::std::mem::transmute(fieldtypeid), ::std::mem::transmute(offset)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddSyntheticSymbol<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, offset: u64, size: u32, name: Param2, flags: u32) -> ::windows::runtime::Result<DEBUG_MODULE_AND_ID> {
        let mut result__: <DEBUG_MODULE_AND_ID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).107)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(size), name.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<DEBUG_MODULE_AND_ID>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddSyntheticSymbolWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, offset: u64, size: u32, name: Param2, flags: u32) -> ::windows::runtime::Result<DEBUG_MODULE_AND_ID> {
        let mut result__: <DEBUG_MODULE_AND_ID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).108)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(size), name.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<DEBUG_MODULE_AND_ID>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveSyntheticSymbol(&self, id: *const DEBUG_MODULE_AND_ID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).109)(::std::mem::transmute_copy(self), ::std::mem::transmute(id)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolEntriesByOffset(&self, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).110)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(flags), ::std::mem::transmute(ids), ::std::mem::transmute(displacements), ::std::mem::transmute(idscount), ::std::mem::transmute(entries)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolEntriesByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, symbol: Param0, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).111)(::std::mem::transmute_copy(self), symbol.into_param().abi(), ::std::mem::transmute(flags), ::std::mem::transmute(ids), ::std::mem::transmute(idscount), ::std::mem::transmute(entries)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolEntriesByNameWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, symbol: Param0, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).112)(::std::mem::transmute_copy(self), symbol.into_param().abi(), ::std::mem::transmute(flags), ::std::mem::transmute(ids), ::std::mem::transmute(idscount), ::std::mem::transmute(entries)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolEntryByToken(&self, modulebase: u64, token: u32) -> ::windows::runtime::Result<DEBUG_MODULE_AND_ID> {
        let mut result__: <DEBUG_MODULE_AND_ID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).113)(::std::mem::transmute_copy(self), ::std::mem::transmute(modulebase), ::std::mem::transmute(token), &mut result__).from_abi::<DEBUG_MODULE_AND_ID>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolEntryInformation(&self, id: *const DEBUG_MODULE_AND_ID) -> ::windows::runtime::Result<DEBUG_SYMBOL_ENTRY> {
        let mut result__: <DEBUG_SYMBOL_ENTRY as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).114)(::std::mem::transmute_copy(self), ::std::mem::transmute(id), &mut result__).from_abi::<DEBUG_SYMBOL_ENTRY>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolEntryString(&self, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).115)(::std::mem::transmute_copy(self), ::std::mem::transmute(id), ::std::mem::transmute(which), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolEntryStringWide(&self, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).116)(::std::mem::transmute_copy(self), ::std::mem::transmute(id), ::std::mem::transmute(which), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolEntryOffsetRegions(&self, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).117)(::std::mem::transmute_copy(self), ::std::mem::transmute(id), ::std::mem::transmute(flags), ::std::mem::transmute(regions), ::std::mem::transmute(regionscount), ::std::mem::transmute(regionsavail)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolEntryBySymbolEntry(&self, fromid: *const DEBUG_MODULE_AND_ID, flags: u32) -> ::windows::runtime::Result<DEBUG_MODULE_AND_ID> {
        let mut result__: <DEBUG_MODULE_AND_ID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).118)(::std::mem::transmute_copy(self), ::std::mem::transmute(fromid), ::std::mem::transmute(flags), &mut result__).from_abi::<DEBUG_MODULE_AND_ID>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSourceEntriesByOffset(&self, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).119)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(flags), ::std::mem::transmute(entries), ::std::mem::transmute(entriescount), ::std::mem::transmute(entriesavail)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceEntriesByLine<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, line: u32, file: Param1, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).120)(::std::mem::transmute_copy(self), ::std::mem::transmute(line), file.into_param().abi(), ::std::mem::transmute(flags), ::std::mem::transmute(entries), ::std::mem::transmute(entriescount), ::std::mem::transmute(entriesavail)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceEntriesByLineWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, line: u32, file: Param1, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).121)(::std::mem::transmute_copy(self), ::std::mem::transmute(line), file.into_param().abi(), ::std::mem::transmute(flags), ::std::mem::transmute(entries), ::std::mem::transmute(entriescount), ::std::mem::transmute(entriesavail)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceEntryString(&self, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).122)(::std::mem::transmute_copy(self), ::std::mem::transmute(entry), ::std::mem::transmute(which), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceEntryStringWide(&self, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).123)(::std::mem::transmute_copy(self), ::std::mem::transmute(entry), ::std::mem::transmute(which), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSourceEntryOffsetRegions(&self, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).124)(::std::mem::transmute_copy(self), ::std::mem::transmute(entry), ::std::mem::transmute(flags), ::std::mem::transmute(regions), ::std::mem::transmute(regionscount), ::std::mem::transmute(regionsavail)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSourceEntryBySourceEntry(&self, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32) -> ::windows::runtime::Result<DEBUG_SYMBOL_SOURCE_ENTRY> {
        let mut result__: <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).125)(::std::mem::transmute_copy(self), ::std::mem::transmute(fromentry), ::std::mem::transmute(flags), &mut result__).from_abi::<DEBUG_SYMBOL_SOURCE_ENTRY>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetScopeEx(&self, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME_EX, scopecontext: *mut ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).126)(::std::mem::transmute_copy(self), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(scopeframe), ::std::mem::transmute(scopecontext), ::std::mem::transmute(scopecontextsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetScopeEx(&self, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME_EX, scopecontext: *const ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).127)(::std::mem::transmute_copy(self), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(scopeframe), ::std::mem::transmute(scopecontext), ::std::mem::transmute(scopecontextsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNameByInlineContext(&self, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).128)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(inlinecontext), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNameByInlineContextWide(&self, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).129)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(inlinecontext), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLineByInlineContext(&self, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).130)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(inlinecontext), ::std::mem::transmute(line), ::std::mem::transmute(filebuffer), ::std::mem::transmute(filebuffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLineByInlineContextWide(&self, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).131)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(inlinecontext), ::std::mem::transmute(line), ::std::mem::transmute(filebuffer), ::std::mem::transmute(filebuffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(displacement)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputSymbolByInlineContext(&self, outputcontrol: u32, flags: u32, offset: u64, inlinecontext: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).132)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags), ::std::mem::transmute(offset), ::std::mem::transmute(inlinecontext)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugSymbols4 {
    type Vtable = IDebugSymbols4_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3817978840, 40332, 17432, [132, 11, 192, 6, 89, 42, 23, 82]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugSymbols4_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, line: u32, file: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, loaded: *mut u32, unloaded: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PSTR, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, name: super::super::super::Foundation::PSTR, typeid: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, size: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR, offset: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, module: u64, typeid: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, module: u64, typeid: u32, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, module: u64, typeid: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, module: u64, typeid: u32, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, update: ::windows::runtime::RawPtr, symbols: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, group: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pattern: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, base: u64, item: super::super::super::Foundation::PSTR, buffer: *mut ::std::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, line: u32, file: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PWSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PWSTR, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, name: super::super::super::Foundation::PWSTR, typeid: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, field: super::super::super::Foundation::PWSTR, offset: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PWSTR, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, update: ::windows::runtime::RawPtr, symbols: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, group: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pattern: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, startelement: u32, file: super::super::super::Foundation::PWSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PWSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, base: u64, item: super::super::super::Foundation::PWSTR, buffer: *mut ::std::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, base: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PWSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, base: u64, size: u32, imagepath: super::super::super::Foundation::PSTR, modulename: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, base: u64, size: u32, imagepath: super::super::super::Foundation::PWSTR, modulename: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, base: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, infooffset: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32, offset: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, flags: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, containertypeid: u32, field: super::super::super::Foundation::PSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, containertypeid: u32, field: super::super::super::Foundation::PWSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, size: u32, name: super::super::super::Foundation::PSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, size: u32, name: super::super::super::Foundation::PWSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *const DEBUG_MODULE_AND_ID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PWSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, modulebase: u64, token: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *const DEBUG_MODULE_AND_ID, info: *mut DEBUG_SYMBOL_ENTRY) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fromid: *const DEBUG_MODULE_AND_ID, flags: u32, toid: *mut DEBUG_MODULE_AND_ID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, line: u32, file: super::super::super::Foundation::PSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, line: u32, file: super::super::super::Foundation::PWSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, toentry: *mut DEBUG_SYMBOL_SOURCE_ENTRY) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME_EX, scopecontext: *mut ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME_EX, scopecontext: *const ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32, offset: u64, inlinecontext: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugSymbols5(::windows::runtime::IUnknown);
impl IDebugSymbols5 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddSymbolOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveSymbolOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetSymbolOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNameByOffset(&self, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOffsetByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, symbol: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), symbol.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNearNameByOffset(&self, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(delta), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLineByOffset(&self, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(line), ::std::mem::transmute(filebuffer), ::std::mem::transmute(filebuffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOffsetByLine<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, line: u32, file: Param1) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(line), file.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberModules(&self, loaded: *mut u32, unloaded: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(loaded), ::std::mem::transmute(unloaded)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetModuleByIndex(&self, index: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleByModuleName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, name: Param0, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), name.into_param().abi(), ::std::mem::transmute(startindex), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetModuleByOffset(&self, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(startindex), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleNames(&self, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(index),
            ::std::mem::transmute(base),
            ::std::mem::transmute(imagenamebuffer),
            ::std::mem::transmute(imagenamebuffersize),
            ::std::mem::transmute(imagenamesize),
            ::std::mem::transmute(modulenamebuffer),
            ::std::mem::transmute(modulenamebuffersize),
            ::std::mem::transmute(modulenamesize),
            ::std::mem::transmute(loadedimagenamebuffer),
            ::std::mem::transmute(loadedimagenamebuffersize),
            ::std::mem::transmute(loadedimagenamesize),
        )
        .ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetModuleParameters(&self, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(bases), ::std::mem::transmute(start), ::std::mem::transmute(params)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolModule<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, symbol: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), symbol.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTypeName(&self, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTypeId<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, module: u64, name: Param1) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), name.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTypeSize(&self, module: u64, typeid: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetFieldOffset<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, module: u64, typeid: u32, field: Param2) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), field.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolTypeId<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, symbol: Param0, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), symbol.into_param().abi(), ::std::mem::transmute(typeid), ::std::mem::transmute(module)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOffsetTypeId(&self, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(typeid), ::std::mem::transmute(module)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadTypedDataVirtual(&self, offset: u64, module: u64, typeid: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteTypedDataVirtual(&self, offset: u64, module: u64, typeid: u32, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputTypedDataVirtual(&self, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadTypedDataPhysical(&self, offset: u64, module: u64, typeid: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteTypedDataPhysical(&self, offset: u64, module: u64, typeid: u32, buffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputTypedDataPhysical(&self, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(offset), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetScope(&self, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(scopeframe), ::std::mem::transmute(scopecontext), ::std::mem::transmute(scopecontextsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetScope(&self, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(scopeframe), ::std::mem::transmute(scopecontext), ::std::mem::transmute(scopecontextsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ResetScope(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetScopeSymbolGroup<'a, Param1: ::windows::runtime::IntoParam<'a, IDebugSymbolGroup>>(&self, flags: u32, update: Param1) -> ::windows::runtime::Result<IDebugSymbolGroup> {
        let mut result__: <IDebugSymbolGroup as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), update.into_param().abi(), &mut result__).from_abi::<IDebugSymbolGroup>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateSymbolGroup(&self) -> ::windows::runtime::Result<IDebugSymbolGroup> {
        let mut result__: <IDebugSymbolGroup as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugSymbolGroup>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartSymbolMatch<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, pattern: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), pattern.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNextSymbolMatch(&self, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).37)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(matchsize), ::std::mem::transmute(offset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EndSymbolMatch(&self, handle: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Reload<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, module: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).39)(::std::mem::transmute_copy(self), module.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolPath(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).40)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSymbolPath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).41)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendSymbolPath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetImagePath(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).43)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetImagePath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).44)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendImagePath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).45)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourcePath(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourcePathElement(&self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).47)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(elementsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSourcePath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).48)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendSourcePath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).49)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FindSourceFile<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, startelement: u32, file: Param1, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).50)(::std::mem::transmute_copy(self), ::std::mem::transmute(startelement), file.into_param().abi(), ::std::mem::transmute(flags), ::std::mem::transmute(foundelement), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(foundsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceFileLineOffsets<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, file: Param0, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).51)(::std::mem::transmute_copy(self), file.into_param().abi(), ::std::mem::transmute(buffer), ::std::mem::transmute(bufferlines), ::std::mem::transmute(filelines)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleVersionInformation<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, index: u32, base: u64, item: Param2, buffer: *mut ::std::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).52)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(base), item.into_param().abi(), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(verinfosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleNameString(&self, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).53)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), ::std::mem::transmute(index), ::std::mem::transmute(base), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetConstantName(&self, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).54)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(value), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetFieldName(&self, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).55)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(fieldindex), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTypeOptions(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).56)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddTypeOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).57)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveTypeOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).58)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetTypeOptions(&self, options: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).59)(::std::mem::transmute_copy(self), ::std::mem::transmute(options)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNameByOffsetWide(&self, offset: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).60)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOffsetByNameWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, symbol: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).61)(::std::mem::transmute_copy(self), symbol.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNearNameByOffsetWide(&self, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).62)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(delta), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLineByOffsetWide(&self, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).63)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(line), ::std::mem::transmute(filebuffer), ::std::mem::transmute(filebuffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetOffsetByLineWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, line: u32, file: Param1) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).64)(::std::mem::transmute_copy(self), ::std::mem::transmute(line), file.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleByModuleNameWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, name: Param0, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).65)(::std::mem::transmute_copy(self), name.into_param().abi(), ::std::mem::transmute(startindex), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolModuleWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, symbol: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).66)(::std::mem::transmute_copy(self), symbol.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTypeNameWide(&self, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).67)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetTypeIdWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, module: u64, name: Param1) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).68)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), name.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetFieldOffsetWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, module: u64, typeid: u32, field: Param2) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).69)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), field.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolTypeIdWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, symbol: Param0, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).70)(::std::mem::transmute_copy(self), symbol.into_param().abi(), ::std::mem::transmute(typeid), ::std::mem::transmute(module)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetScopeSymbolGroup2<'a, Param1: ::windows::runtime::IntoParam<'a, IDebugSymbolGroup2>>(&self, flags: u32, update: Param1) -> ::windows::runtime::Result<IDebugSymbolGroup2> {
        let mut result__: <IDebugSymbolGroup2 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).71)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), update.into_param().abi(), &mut result__).from_abi::<IDebugSymbolGroup2>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateSymbolGroup2(&self) -> ::windows::runtime::Result<IDebugSymbolGroup2> {
        let mut result__: <IDebugSymbolGroup2 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).72)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugSymbolGroup2>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn StartSymbolMatchWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pattern: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).73)(::std::mem::transmute_copy(self), pattern.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNextSymbolMatchWide(&self, handle: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).74)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(matchsize), ::std::mem::transmute(offset)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ReloadWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, module: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).75)(::std::mem::transmute_copy(self), module.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolPathWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).76)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSymbolPathWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).77)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendSymbolPathWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).78)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetImagePathWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).79)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetImagePathWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).80)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendImagePathWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).81)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourcePathWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).82)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(pathsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourcePathElementWide(&self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).83)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(elementsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSourcePathWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, path: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).84)(::std::mem::transmute_copy(self), path.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AppendSourcePathWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, addition: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).85)(::std::mem::transmute_copy(self), addition.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn FindSourceFileWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, startelement: u32, file: Param1, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).86)(::std::mem::transmute_copy(self), ::std::mem::transmute(startelement), file.into_param().abi(), ::std::mem::transmute(flags), ::std::mem::transmute(foundelement), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(foundsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceFileLineOffsetsWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, file: Param0, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).87)(::std::mem::transmute_copy(self), file.into_param().abi(), ::std::mem::transmute(buffer), ::std::mem::transmute(bufferlines), ::std::mem::transmute(filelines)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleVersionInformationWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, index: u32, base: u64, item: Param2, buffer: *mut ::std::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).88)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(base), item.into_param().abi(), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(verinfosize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleNameStringWide(&self, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).89)(::std::mem::transmute_copy(self), ::std::mem::transmute(which), ::std::mem::transmute(index), ::std::mem::transmute(base), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetConstantNameWide(&self, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).90)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(value), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetFieldNameWide(&self, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).91)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(typeid), ::std::mem::transmute(fieldindex), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsManagedModule(&self, index: u32, base: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).92)(::std::mem::transmute_copy(self), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleByModuleName2<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, name: Param0, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).93)(::std::mem::transmute_copy(self), name.into_param().abi(), ::std::mem::transmute(startindex), ::std::mem::transmute(flags), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetModuleByModuleName2Wide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, name: Param0, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).94)(::std::mem::transmute_copy(self), name.into_param().abi(), ::std::mem::transmute(startindex), ::std::mem::transmute(flags), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetModuleByOffset2(&self, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).95)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(startindex), ::std::mem::transmute(flags), ::std::mem::transmute(index), ::std::mem::transmute(base)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddSyntheticModule<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, base: u64, size: u32, imagepath: Param2, modulename: Param3, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).96)(::std::mem::transmute_copy(self), ::std::mem::transmute(base), ::std::mem::transmute(size), imagepath.into_param().abi(), modulename.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddSyntheticModuleWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, base: u64, size: u32, imagepath: Param2, modulename: Param3, flags: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).97)(::std::mem::transmute_copy(self), ::std::mem::transmute(base), ::std::mem::transmute(size), imagepath.into_param().abi(), modulename.into_param().abi(), ::std::mem::transmute(flags)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveSyntheticModule(&self, base: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).98)(::std::mem::transmute_copy(self), ::std::mem::transmute(base)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentScopeFrameIndex(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).99)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetScopeFrameByIndex(&self, index: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).100)(::std::mem::transmute_copy(self), ::std::mem::transmute(index)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetScopeFromJitDebugInfo(&self, outputcontrol: u32, infooffset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).101)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(infooffset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetScopeFromStoredEvent(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).102)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputSymbolByOffset(&self, outputcontrol: u32, flags: u32, offset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).103)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags), ::std::mem::transmute(offset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetFunctionEntryByOffset(&self, offset: u64, flags: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).104)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(flags), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(bufferneeded)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetFieldTypeAndOffset<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, module: u64, containertypeid: u32, field: Param2, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).105)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(containertypeid), field.into_param().abi(), ::std::mem::transmute(fieldtypeid), ::std::mem::transmute(offset)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetFieldTypeAndOffsetWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, module: u64, containertypeid: u32, field: Param2, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).106)(::std::mem::transmute_copy(self), ::std::mem::transmute(module), ::std::mem::transmute(containertypeid), field.into_param().abi(), ::std::mem::transmute(fieldtypeid), ::std::mem::transmute(offset)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddSyntheticSymbol<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, offset: u64, size: u32, name: Param2, flags: u32) -> ::windows::runtime::Result<DEBUG_MODULE_AND_ID> {
        let mut result__: <DEBUG_MODULE_AND_ID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).107)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(size), name.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<DEBUG_MODULE_AND_ID>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AddSyntheticSymbolWide<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, offset: u64, size: u32, name: Param2, flags: u32) -> ::windows::runtime::Result<DEBUG_MODULE_AND_ID> {
        let mut result__: <DEBUG_MODULE_AND_ID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).108)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(size), name.into_param().abi(), ::std::mem::transmute(flags), &mut result__).from_abi::<DEBUG_MODULE_AND_ID>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveSyntheticSymbol(&self, id: *const DEBUG_MODULE_AND_ID) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).109)(::std::mem::transmute_copy(self), ::std::mem::transmute(id)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolEntriesByOffset(&self, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).110)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(flags), ::std::mem::transmute(ids), ::std::mem::transmute(displacements), ::std::mem::transmute(idscount), ::std::mem::transmute(entries)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolEntriesByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, symbol: Param0, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).111)(::std::mem::transmute_copy(self), symbol.into_param().abi(), ::std::mem::transmute(flags), ::std::mem::transmute(ids), ::std::mem::transmute(idscount), ::std::mem::transmute(entries)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolEntriesByNameWide<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, symbol: Param0, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).112)(::std::mem::transmute_copy(self), symbol.into_param().abi(), ::std::mem::transmute(flags), ::std::mem::transmute(ids), ::std::mem::transmute(idscount), ::std::mem::transmute(entries)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolEntryByToken(&self, modulebase: u64, token: u32) -> ::windows::runtime::Result<DEBUG_MODULE_AND_ID> {
        let mut result__: <DEBUG_MODULE_AND_ID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).113)(::std::mem::transmute_copy(self), ::std::mem::transmute(modulebase), ::std::mem::transmute(token), &mut result__).from_abi::<DEBUG_MODULE_AND_ID>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolEntryInformation(&self, id: *const DEBUG_MODULE_AND_ID) -> ::windows::runtime::Result<DEBUG_SYMBOL_ENTRY> {
        let mut result__: <DEBUG_SYMBOL_ENTRY as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).114)(::std::mem::transmute_copy(self), ::std::mem::transmute(id), &mut result__).from_abi::<DEBUG_SYMBOL_ENTRY>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolEntryString(&self, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).115)(::std::mem::transmute_copy(self), ::std::mem::transmute(id), ::std::mem::transmute(which), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSymbolEntryStringWide(&self, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).116)(::std::mem::transmute_copy(self), ::std::mem::transmute(id), ::std::mem::transmute(which), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolEntryOffsetRegions(&self, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).117)(::std::mem::transmute_copy(self), ::std::mem::transmute(id), ::std::mem::transmute(flags), ::std::mem::transmute(regions), ::std::mem::transmute(regionscount), ::std::mem::transmute(regionsavail)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSymbolEntryBySymbolEntry(&self, fromid: *const DEBUG_MODULE_AND_ID, flags: u32) -> ::windows::runtime::Result<DEBUG_MODULE_AND_ID> {
        let mut result__: <DEBUG_MODULE_AND_ID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).118)(::std::mem::transmute_copy(self), ::std::mem::transmute(fromid), ::std::mem::transmute(flags), &mut result__).from_abi::<DEBUG_MODULE_AND_ID>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSourceEntriesByOffset(&self, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).119)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(flags), ::std::mem::transmute(entries), ::std::mem::transmute(entriescount), ::std::mem::transmute(entriesavail)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceEntriesByLine<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(&self, line: u32, file: Param1, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).120)(::std::mem::transmute_copy(self), ::std::mem::transmute(line), file.into_param().abi(), ::std::mem::transmute(flags), ::std::mem::transmute(entries), ::std::mem::transmute(entriescount), ::std::mem::transmute(entriesavail)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceEntriesByLineWide<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, line: u32, file: Param1, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).121)(::std::mem::transmute_copy(self), ::std::mem::transmute(line), file.into_param().abi(), ::std::mem::transmute(flags), ::std::mem::transmute(entries), ::std::mem::transmute(entriescount), ::std::mem::transmute(entriesavail)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceEntryString(&self, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).122)(::std::mem::transmute_copy(self), ::std::mem::transmute(entry), ::std::mem::transmute(which), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSourceEntryStringWide(&self, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).123)(::std::mem::transmute_copy(self), ::std::mem::transmute(entry), ::std::mem::transmute(which), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(stringsize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSourceEntryOffsetRegions(&self, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).124)(::std::mem::transmute_copy(self), ::std::mem::transmute(entry), ::std::mem::transmute(flags), ::std::mem::transmute(regions), ::std::mem::transmute(regionscount), ::std::mem::transmute(regionsavail)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSourceEntryBySourceEntry(&self, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32) -> ::windows::runtime::Result<DEBUG_SYMBOL_SOURCE_ENTRY> {
        let mut result__: <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).125)(::std::mem::transmute_copy(self), ::std::mem::transmute(fromentry), ::std::mem::transmute(flags), &mut result__).from_abi::<DEBUG_SYMBOL_SOURCE_ENTRY>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetScopeEx(&self, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME_EX, scopecontext: *mut ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).126)(::std::mem::transmute_copy(self), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(scopeframe), ::std::mem::transmute(scopecontext), ::std::mem::transmute(scopecontextsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetScopeEx(&self, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME_EX, scopecontext: *const ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).127)(::std::mem::transmute_copy(self), ::std::mem::transmute(instructionoffset), ::std::mem::transmute(scopeframe), ::std::mem::transmute(scopecontext), ::std::mem::transmute(scopecontextsize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNameByInlineContext(&self, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).128)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(inlinecontext), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNameByInlineContextWide(&self, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).129)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(inlinecontext), ::std::mem::transmute(namebuffer), ::std::mem::transmute(namebuffersize), ::std::mem::transmute(namesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLineByInlineContext(&self, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).130)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(inlinecontext), ::std::mem::transmute(line), ::std::mem::transmute(filebuffer), ::std::mem::transmute(filebuffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(displacement)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLineByInlineContextWide(&self, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).131)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), ::std::mem::transmute(inlinecontext), ::std::mem::transmute(line), ::std::mem::transmute(filebuffer), ::std::mem::transmute(filebuffersize), ::std::mem::transmute(filesize), ::std::mem::transmute(displacement)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OutputSymbolByInlineContext(&self, outputcontrol: u32, flags: u32, offset: u64, inlinecontext: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).132)(::std::mem::transmute_copy(self), ::std::mem::transmute(outputcontrol), ::std::mem::transmute(flags), ::std::mem::transmute(offset), ::std::mem::transmute(inlinecontext)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentScopeFrameIndexEx(&self, flags: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).133)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetScopeFrameByIndexEx(&self, flags: u32, index: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).134)(::std::mem::transmute_copy(self), ::std::mem::transmute(flags), ::std::mem::transmute(index)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugSymbols5 {
    type Vtable = IDebugSymbols5_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3328157758, 7785, 18270, [142, 14, 181, 215, 158, 156, 193, 126]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugSymbols5_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, line: u32, file: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, loaded: *mut u32, unloaded: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PSTR, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, name: super::super::super::Foundation::PSTR, typeid: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, size: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR, offset: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, module: u64, typeid: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, module: u64, typeid: u32, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, module: u64, typeid: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, module: u64, typeid: u32, buffer: *const ::std::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, update: ::windows::runtime::RawPtr, symbols: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, group: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pattern: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, base: u64, item: super::super::super::Foundation::PSTR, buffer: *mut ::std::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, options: u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, line: u32, file: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PWSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PWSTR, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, name: super::super::super::Foundation::PWSTR, typeid: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, field: super::super::super::Foundation::PWSTR, offset: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PWSTR, typeid: *mut u32, module: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, update: ::windows::runtime::RawPtr, symbols: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, group: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pattern: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, path: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, addition: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, startelement: u32, file: super::super::super::Foundation::PWSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, file: super::super::super::Foundation::PWSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, base: u64, item: super::super::super::Foundation::PWSTR, buffer: *mut ::std::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32, base: u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: super::super::super::Foundation::PWSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, base: u64, size: u32, imagepath: super::super::super::Foundation::PSTR, modulename: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, base: u64, size: u32, imagepath: super::super::super::Foundation::PWSTR, modulename: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, base: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, index: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, infooffset: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32, offset: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, flags: u32, buffer: *mut ::std::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, containertypeid: u32, field: super::super::super::Foundation::PSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, module: u64, containertypeid: u32, field: super::super::super::Foundation::PWSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, size: u32, name: super::super::super::Foundation::PSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, size: u32, name: super::super::super::Foundation::PWSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *const DEBUG_MODULE_AND_ID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, symbol: super::super::super::Foundation::PWSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, modulebase: u64, token: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *const DEBUG_MODULE_AND_ID, info: *mut DEBUG_SYMBOL_ENTRY) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fromid: *const DEBUG_MODULE_AND_ID, flags: u32, toid: *mut DEBUG_MODULE_AND_ID) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, line: u32, file: super::super::super::Foundation::PSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, line: u32, file: super::super::super::Foundation::PWSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, toentry: *mut DEBUG_SYMBOL_SOURCE_ENTRY) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME_EX, scopecontext: *mut ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME_EX, scopecontext: *const ::std::ffi::c_void, scopecontextsize: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, outputcontrol: u32, flags: u32, offset: u64, inlinecontext: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, index: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, flags: u32, index: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugSyncOperation(::windows::runtime::IUnknown);
impl IDebugSyncOperation {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTargetThread(&self) -> ::windows::runtime::Result<IDebugApplicationThread> {
        let mut result__: <IDebugApplicationThread as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugApplicationThread>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Execute(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn InProgressAbort(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugSyncOperation {
    type Vtable = IDebugSyncOperation_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865818, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugSyncOperation_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppattarget: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppunkresult: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugSystemObjects(::windows::runtime::IUnknown);
impl IDebugSystemObjects {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventThread(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventProcess(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentThreadId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetCurrentThreadId(&self, id: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(id)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentProcessId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetCurrentProcessId(&self, id: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(id)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberThreads(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTotalNumberThreads(&self, total: *mut u32, largestprocess: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(total), ::std::mem::transmute(largestprocess)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdsByIndex(&self, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(ids), ::std::mem::transmute(sysids)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdByProcessor(&self, processor: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(processor), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentThreadDataOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdByDataOffset(&self, offset: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentThreadTeb(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdByTeb(&self, offset: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentThreadSystemId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdBySystemId(&self, sysid: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(sysid), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentThreadHandle(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdByHandle(&self, handle: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberProcesses(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessIdsByIndex(&self, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(ids), ::std::mem::transmute(sysids)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentProcessDataOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessIdByDataOffset(&self, offset: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentProcessPeb(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessIdByPeb(&self, offset: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentProcessSystemId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessIdBySystemId(&self, sysid: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(sysid), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentProcessHandle(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessIdByHandle(&self, handle: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetCurrentProcessExecutableName(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(exesize)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugSystemObjects {
    type Vtable = IDebugSystemObjects_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1804009004, 11343, 20236, [157, 162, 23, 67, 17, 172, 195, 39]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugSystemObjects_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, total: *mut u32, largestprocess: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, processor: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sysid: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sysid: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sysid: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sysid: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugSystemObjects2(::windows::runtime::IUnknown);
impl IDebugSystemObjects2 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventThread(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventProcess(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentThreadId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetCurrentThreadId(&self, id: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(id)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentProcessId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetCurrentProcessId(&self, id: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(id)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberThreads(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTotalNumberThreads(&self, total: *mut u32, largestprocess: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(total), ::std::mem::transmute(largestprocess)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdsByIndex(&self, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(ids), ::std::mem::transmute(sysids)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdByProcessor(&self, processor: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(processor), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentThreadDataOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdByDataOffset(&self, offset: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentThreadTeb(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdByTeb(&self, offset: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentThreadSystemId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdBySystemId(&self, sysid: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(sysid), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentThreadHandle(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdByHandle(&self, handle: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberProcesses(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessIdsByIndex(&self, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(ids), ::std::mem::transmute(sysids)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentProcessDataOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessIdByDataOffset(&self, offset: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentProcessPeb(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessIdByPeb(&self, offset: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentProcessSystemId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessIdBySystemId(&self, sysid: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(sysid), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentProcessHandle(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessIdByHandle(&self, handle: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetCurrentProcessExecutableName(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(exesize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentProcessUpTime(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetImplicitThreadDataOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetImplicitThreadDataOffset(&self, offset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetImplicitProcessDataOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetImplicitProcessDataOffset(&self, offset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugSystemObjects2 {
    type Vtable = IDebugSystemObjects2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(183105023, 6226, 18041, [176, 85, 73, 75, 238, 100, 7, 238]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugSystemObjects2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, total: *mut u32, largestprocess: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, processor: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sysid: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sysid: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sysid: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sysid: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, uptime: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugSystemObjects3(::windows::runtime::IUnknown);
impl IDebugSystemObjects3 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventThread(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventProcess(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentThreadId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetCurrentThreadId(&self, id: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(id)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentProcessId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetCurrentProcessId(&self, id: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(id)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberThreads(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTotalNumberThreads(&self, total: *mut u32, largestprocess: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(total), ::std::mem::transmute(largestprocess)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdsByIndex(&self, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(ids), ::std::mem::transmute(sysids)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdByProcessor(&self, processor: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(processor), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentThreadDataOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdByDataOffset(&self, offset: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentThreadTeb(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdByTeb(&self, offset: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentThreadSystemId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdBySystemId(&self, sysid: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(sysid), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentThreadHandle(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdByHandle(&self, handle: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberProcesses(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessIdsByIndex(&self, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(ids), ::std::mem::transmute(sysids)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentProcessDataOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessIdByDataOffset(&self, offset: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentProcessPeb(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessIdByPeb(&self, offset: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentProcessSystemId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessIdBySystemId(&self, sysid: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(sysid), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentProcessHandle(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessIdByHandle(&self, handle: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetCurrentProcessExecutableName(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(exesize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentProcessUpTime(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetImplicitThreadDataOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetImplicitThreadDataOffset(&self, offset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetImplicitProcessDataOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetImplicitProcessDataOffset(&self, offset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventSystem(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).37)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentSystemId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).38)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetCurrentSystemId(&self, id: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).39)(::std::mem::transmute_copy(self), ::std::mem::transmute(id)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberSystems(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).40)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSystemIdsByIndex(&self, start: u32, count: u32, ids: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).41)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(ids)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTotalNumberThreadsAndProcesses(&self, totalthreads: *mut u32, totalprocesses: *mut u32, largestprocessthreads: *mut u32, largestsystemthreads: *mut u32, largestsystemprocesses: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::std::mem::transmute_copy(self), ::std::mem::transmute(totalthreads), ::std::mem::transmute(totalprocesses), ::std::mem::transmute(largestprocessthreads), ::std::mem::transmute(largestsystemthreads), ::std::mem::transmute(largestsystemprocesses)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentSystemServer(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).43)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSystemByServer(&self, server: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).44)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetCurrentSystemServerName(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).45)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugSystemObjects3 {
    type Vtable = IDebugSystemObjects3_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3915869743, 57990, 20131, [176, 249, 223, 229, 217, 252, 51, 14]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugSystemObjects3_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, total: *mut u32, largestprocess: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, processor: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sysid: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sysid: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sysid: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sysid: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, uptime: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, ids: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, totalthreads: *mut u32, totalprocesses: *mut u32, largestprocessthreads: *mut u32, largestsystemthreads: *mut u32, largestsystemprocesses: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugSystemObjects4(::windows::runtime::IUnknown);
impl IDebugSystemObjects4 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventThread(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventProcess(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentThreadId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetCurrentThreadId(&self, id: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(id)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentProcessId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetCurrentProcessId(&self, id: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(id)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberThreads(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTotalNumberThreads(&self, total: *mut u32, largestprocess: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(total), ::std::mem::transmute(largestprocess)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdsByIndex(&self, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(ids), ::std::mem::transmute(sysids)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdByProcessor(&self, processor: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(processor), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentThreadDataOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdByDataOffset(&self, offset: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentThreadTeb(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdByTeb(&self, offset: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentThreadSystemId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdBySystemId(&self, sysid: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), ::std::mem::transmute(sysid), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentThreadHandle(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadIdByHandle(&self, handle: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberProcesses(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessIdsByIndex(&self, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(ids), ::std::mem::transmute(sysids)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentProcessDataOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessIdByDataOffset(&self, offset: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentProcessPeb(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessIdByPeb(&self, offset: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentProcessSystemId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessIdBySystemId(&self, sysid: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(sysid), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentProcessHandle(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetProcessIdByHandle(&self, handle: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), ::std::mem::transmute(handle), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetCurrentProcessExecutableName(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(exesize)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentProcessUpTime(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetImplicitThreadDataOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetImplicitThreadDataOffset(&self, offset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetImplicitProcessDataOffset(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetImplicitProcessDataOffset(&self, offset: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).36)(::std::mem::transmute_copy(self), ::std::mem::transmute(offset)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventSystem(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).37)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentSystemId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).38)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetCurrentSystemId(&self, id: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).39)(::std::mem::transmute_copy(self), ::std::mem::transmute(id)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberSystems(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).40)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSystemIdsByIndex(&self, start: u32, count: u32, ids: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).41)(::std::mem::transmute_copy(self), ::std::mem::transmute(start), ::std::mem::transmute(count), ::std::mem::transmute(ids)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTotalNumberThreadsAndProcesses(&self, totalthreads: *mut u32, totalprocesses: *mut u32, largestprocessthreads: *mut u32, largestsystemthreads: *mut u32, largestsystemprocesses: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).42)(::std::mem::transmute_copy(self), ::std::mem::transmute(totalthreads), ::std::mem::transmute(totalprocesses), ::std::mem::transmute(largestprocessthreads), ::std::mem::transmute(largestsystemthreads), ::std::mem::transmute(largestsystemprocesses)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentSystemServer(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).43)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSystemByServer(&self, server: u64) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).44)(::std::mem::transmute_copy(self), ::std::mem::transmute(server), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetCurrentSystemServerName(&self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).45)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetCurrentProcessExecutableNameWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, exesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).46)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(exesize)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetCurrentSystemServerNameWide(&self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).47)(::std::mem::transmute_copy(self), ::std::mem::transmute(buffer), ::std::mem::transmute(buffersize), ::std::mem::transmute(namesize)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugSystemObjects4 {
    type Vtable = IDebugSystemObjects4_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1217685734, 32015, 19189, [135, 171, 37, 32, 116, 84, 213, 83]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugSystemObjects4_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, total: *mut u32, largestprocess: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, processor: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sysid: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sysid: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sysid: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, sysid: u32, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, handle: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, uptime: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, offset: u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, id: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, number: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, start: u32, count: u32, ids: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, totalthreads: *mut u32, totalprocesses: *mut u32, largestprocessthreads: *mut u32, largestsystemthreads: *mut u32, largestsystemprocesses: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, server: u64, id: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, exesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugThreadCall32(::windows::runtime::IUnknown);
impl IDebugThreadCall32 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ThreadCallHandler(&self, dwparam1: u32, dwparam2: u32, dwparam3: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwparam1), ::std::mem::transmute(dwparam2), ::std::mem::transmute(dwparam3)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugThreadCall32 {
    type Vtable = IDebugThreadCall32_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865846, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugThreadCall32_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwparam1: u32, dwparam2: u32, dwparam3: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDebugThreadCall64(::windows::runtime::IUnknown);
impl IDebugThreadCall64 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ThreadCallHandler(&self, dwparam1: u64, dwparam2: u64, dwparam3: u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwparam1), ::std::mem::transmute(dwparam2), ::std::mem::transmute(dwparam3)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDebugThreadCall64 {
    type Vtable = IDebugThreadCall64_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3409945397, 59769, 17149, [159, 207, 167, 84, 106, 15, 57, 5]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugThreadCall64_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwparam1: u64, dwparam2: u64, dwparam3: u64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDynamicConceptProviderConcept(::windows::runtime::IUnknown);
impl IDynamicConceptProviderConcept {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetConcept<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, contextobject: Param0, conceptid: *const ::windows::runtime::GUID, conceptinterface: *mut ::std::option::Option<::windows::runtime::IUnknown>, conceptmetadata: *mut ::std::option::Option<IKeyStore>, hasconcept: *mut bool) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), contextobject.into_param().abi(), ::std::mem::transmute(conceptid), ::std::mem::transmute(conceptinterface), ::std::mem::transmute(conceptmetadata), ::std::mem::transmute(hasconcept)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetConcept<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>, Param2: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>, Param3: ::windows::runtime::IntoParam<'a, IKeyStore>>(&self, contextobject: Param0, conceptid: *const ::windows::runtime::GUID, conceptinterface: Param2, conceptmetadata: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), contextobject.into_param().abi(), ::std::mem::transmute(conceptid), conceptinterface.into_param().abi(), conceptmetadata.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn NotifyParent<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, parentmodel: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), parentmodel.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn NotifyParentChange<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, parentmodel: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), parentmodel.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn NotifyDestruct(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IDynamicConceptProviderConcept {
    type Vtable = IDynamicConceptProviderConcept_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2510813149, 24622, 18495, [157, 6, 161, 92, 14, 225, 49, 116]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDynamicConceptProviderConcept_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, contextobject: ::windows::runtime::RawPtr, conceptid: *const ::windows::runtime::GUID, conceptinterface: *mut ::windows::runtime::RawPtr, conceptmetadata: *mut ::windows::runtime::RawPtr, hasconcept: *mut bool) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, contextobject: ::windows::runtime::RawPtr, conceptid: *const ::windows::runtime::GUID, conceptinterface: ::windows::runtime::RawPtr, conceptmetadata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, parentmodel: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, parentmodel: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IDynamicKeyProviderConcept(::windows::runtime::IUnknown);
impl IDynamicKeyProviderConcept {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetKey<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, contextobject: Param0, key: Param1, keyvalue: *mut ::std::option::Option<IModelObject>, metadata: *mut ::std::option::Option<IKeyStore>, haskey: *mut bool) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), contextobject.into_param().abi(), key.into_param().abi(), ::std::mem::transmute(keyvalue), ::std::mem::transmute(metadata), ::std::mem::transmute(haskey)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetKey<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, IModelObject>, Param3: ::windows::runtime::IntoParam<'a, IKeyStore>>(&self, contextobject: Param0, key: Param1, keyvalue: Param2, metadata: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), contextobject.into_param().abi(), key.into_param().abi(), keyvalue.into_param().abi(), metadata.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumerateKeys<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, contextobject: Param0) -> ::windows::runtime::Result<IKeyEnumerator> {
        let mut result__: <IKeyEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), contextobject.into_param().abi(), &mut result__).from_abi::<IKeyEnumerator>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IDynamicKeyProviderConcept {
    type Vtable = IDynamicKeyProviderConcept_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3885514657, 32935, 18828, [152, 143, 81, 141, 220, 93, 64, 37]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDynamicKeyProviderConcept_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, contextobject: ::windows::runtime::RawPtr, key: super::super::super::Foundation::PWSTR, keyvalue: *mut ::windows::runtime::RawPtr, metadata: *mut ::windows::runtime::RawPtr, haskey: *mut bool) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, contextobject: ::windows::runtime::RawPtr, key: super::super::super::Foundation::PWSTR, keyvalue: ::windows::runtime::RawPtr, metadata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, contextobject: ::windows::runtime::RawPtr, ppenumerator: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IEnumDebugApplicationNodes(::windows::runtime::IUnknown);
impl IEnumDebugApplicationNodes {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Next(&self, celt: u32, pprddp: *mut ::std::option::Option<IDebugApplicationNode>, pceltfetched: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(celt), ::std::mem::transmute(pprddp), ::std::mem::transmute(pceltfetched)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(celt)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IEnumDebugApplicationNodes> {
        let mut result__: <IEnumDebugApplicationNodes as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumDebugApplicationNodes>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEnumDebugApplicationNodes {
    type Vtable = IEnumDebugApplicationNodes_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865850, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumDebugApplicationNodes_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, celt: u32, pprddp: *mut ::windows::runtime::RawPtr, pceltfetched: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, celt: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pperddp: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IEnumDebugCodeContexts(::windows::runtime::IUnknown);
impl IEnumDebugCodeContexts {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Next(&self, celt: u32, pscc: *mut ::std::option::Option<IDebugCodeContext>, pceltfetched: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(celt), ::std::mem::transmute(pscc), ::std::mem::transmute(pceltfetched)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(celt)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IEnumDebugCodeContexts> {
        let mut result__: <IEnumDebugCodeContexts as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumDebugCodeContexts>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEnumDebugCodeContexts {
    type Vtable = IEnumDebugCodeContexts_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865821, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumDebugCodeContexts_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, celt: u32, pscc: *mut ::windows::runtime::RawPtr, pceltfetched: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, celt: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppescc: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IEnumDebugExpressionContexts(::windows::runtime::IUnknown);
impl IEnumDebugExpressionContexts {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Next(&self, celt: u32, ppdec: *mut ::std::option::Option<IDebugExpressionContext>, pceltfetched: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(celt), ::std::mem::transmute(ppdec), ::std::mem::transmute(pceltfetched)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(celt)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IEnumDebugExpressionContexts> {
        let mut result__: <IEnumDebugExpressionContexts as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumDebugExpressionContexts>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEnumDebugExpressionContexts {
    type Vtable = IEnumDebugExpressionContexts_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865856, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumDebugExpressionContexts_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, celt: u32, ppdec: *mut ::windows::runtime::RawPtr, pceltfetched: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, celt: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppedec: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IEnumDebugExtendedPropertyInfo(::windows::runtime::IUnknown);
impl IEnumDebugExtendedPropertyInfo {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Com_StructuredStorage`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn Next(&self, celt: u32, rgextendedpropertyinfo: *mut ExtendedDebugPropertyInfo, pceltfetched: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(celt), ::std::mem::transmute(rgextendedpropertyinfo), ::std::mem::transmute(pceltfetched)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(celt)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IEnumDebugExtendedPropertyInfo> {
        let mut result__: <IEnumDebugExtendedPropertyInfo as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumDebugExtendedPropertyInfo>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEnumDebugExtendedPropertyInfo {
    type Vtable = IEnumDebugExtendedPropertyInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865875, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumDebugExtendedPropertyInfo_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, celt: u32, rgextendedpropertyinfo: *mut ::std::mem::ManuallyDrop<ExtendedDebugPropertyInfo>, pceltfetched: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole_Automation")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, celt: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pedpe: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcelt: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IEnumDebugPropertyInfo(::windows::runtime::IUnknown);
impl IEnumDebugPropertyInfo {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Next(&self, celt: u32, pi: *mut DebugPropertyInfo, pceltsfetched: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(celt), ::std::mem::transmute(pi), ::std::mem::transmute(pceltsfetched)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(celt)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IEnumDebugPropertyInfo> {
        let mut result__: <IEnumDebugPropertyInfo as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumDebugPropertyInfo>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEnumDebugPropertyInfo {
    type Vtable = IEnumDebugPropertyInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865873, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumDebugPropertyInfo_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, celt: u32, pi: *mut ::std::mem::ManuallyDrop<DebugPropertyInfo>, pceltsfetched: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, celt: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppepi: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcelt: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IEnumDebugStackFrames(::windows::runtime::IUnknown);
impl IEnumDebugStackFrames {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Next(&self, celt: u32, prgdsfd: *mut DebugStackFrameDescriptor, pceltfetched: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(celt), ::std::mem::transmute(prgdsfd), ::std::mem::transmute(pceltfetched)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(celt)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IEnumDebugStackFrames> {
        let mut result__: <IEnumDebugStackFrames as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumDebugStackFrames>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEnumDebugStackFrames {
    type Vtable = IEnumDebugStackFrames_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865822, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumDebugStackFrames_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, celt: u32, prgdsfd: *mut ::std::mem::ManuallyDrop<DebugStackFrameDescriptor>, pceltfetched: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, celt: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppedsf: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IEnumDebugStackFrames64(::windows::runtime::IUnknown);
impl IEnumDebugStackFrames64 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Next(&self, celt: u32, prgdsfd: *mut DebugStackFrameDescriptor, pceltfetched: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(celt), ::std::mem::transmute(prgdsfd), ::std::mem::transmute(pceltfetched)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(celt)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IEnumDebugStackFrames> {
        let mut result__: <IEnumDebugStackFrames as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumDebugStackFrames>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Next64(&self, celt: u32, prgdsfd: *mut DebugStackFrameDescriptor64, pceltfetched: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(celt), ::std::mem::transmute(prgdsfd), ::std::mem::transmute(pceltfetched)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IEnumDebugStackFrames64 {
    type Vtable = IEnumDebugStackFrames64_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(230918227, 49584, 16758, [169, 132, 178, 152, 54, 16, 39, 175]);
}
impl ::std::convert::From<IEnumDebugStackFrames64> for IEnumDebugStackFrames {
    fn from(value: IEnumDebugStackFrames64) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IEnumDebugStackFrames64> for IEnumDebugStackFrames {
    fn from(value: &IEnumDebugStackFrames64) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IEnumDebugStackFrames> for IEnumDebugStackFrames64 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IEnumDebugStackFrames> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IEnumDebugStackFrames>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IEnumDebugStackFrames> for &IEnumDebugStackFrames64 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IEnumDebugStackFrames> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IEnumDebugStackFrames>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumDebugStackFrames64_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, celt: u32, prgdsfd: *mut ::std::mem::ManuallyDrop<DebugStackFrameDescriptor>, pceltfetched: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, celt: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppedsf: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, celt: u32, prgdsfd: *mut ::std::mem::ManuallyDrop<DebugStackFrameDescriptor64>, pceltfetched: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IEnumJsStackFrames(::windows::runtime::IUnknown);
impl IEnumJsStackFrames {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Next(&self, cframecount: u32, pframes: *mut __MIDL___MIDL_itf_jscript9diag_0000_0007_0001, pcfetched: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(cframecount), ::std::mem::transmute(pframes), ::std::mem::transmute(pcfetched)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IEnumJsStackFrames {
    type Vtable = IEnumJsStackFrames_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1585292107, 64337, 18321, [171, 231, 203, 91, 223, 65, 151, 85]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumJsStackFrames_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, cframecount: u32, pframes: *mut __MIDL___MIDL_itf_jscript9diag_0000_0007_0001, pcfetched: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IEnumRemoteDebugApplicationThreads(::windows::runtime::IUnknown);
impl IEnumRemoteDebugApplicationThreads {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Next(&self, celt: u32, pprdat: *mut ::std::option::Option<IRemoteDebugApplicationThread>, pceltfetched: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(celt), ::std::mem::transmute(pprdat), ::std::mem::transmute(pceltfetched)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(celt)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IEnumRemoteDebugApplicationThreads> {
        let mut result__: <IEnumRemoteDebugApplicationThreads as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumRemoteDebugApplicationThreads>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEnumRemoteDebugApplicationThreads {
    type Vtable = IEnumRemoteDebugApplicationThreads_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865852, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumRemoteDebugApplicationThreads_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, celt: u32, pprdat: *mut ::windows::runtime::RawPtr, pceltfetched: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, celt: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pperdat: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IEnumRemoteDebugApplications(::windows::runtime::IUnknown);
impl IEnumRemoteDebugApplications {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Next(&self, celt: u32, ppda: *mut ::std::option::Option<IRemoteDebugApplication>, pceltfetched: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(celt), ::std::mem::transmute(ppda), ::std::mem::transmute(pceltfetched)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(celt)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Clone(&self) -> ::windows::runtime::Result<IEnumRemoteDebugApplications> {
        let mut result__: <IEnumRemoteDebugApplications as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumRemoteDebugApplications>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEnumRemoteDebugApplications {
    type Vtable = IEnumRemoteDebugApplications_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865851, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumRemoteDebugApplications_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, celt: u32, ppda: *mut ::windows::runtime::RawPtr, pceltfetched: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, celt: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppessd: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IEquatableConcept(::windows::runtime::IUnknown);
impl IEquatableConcept {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AreObjectsEqual<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>, Param1: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, contextobject: Param0, otherobject: Param1) -> ::windows::runtime::Result<bool> {
        let mut result__: <bool as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), contextobject.into_param().abi(), otherobject.into_param().abi(), &mut result__).from_abi::<bool>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IEquatableConcept {
    type Vtable = IEquatableConcept_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3308084541, 24733, 19805, [138, 130, 70, 176, 172, 222, 196, 244]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEquatableConcept_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, contextobject: ::windows::runtime::RawPtr, otherobject: ::windows::runtime::RawPtr, isequal: *mut bool) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_DISASSEMBLE_BUFFER: u32 = 44u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_DUMP_SYMBOL_INFO: u32 = 22u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_FIND_FILE: u32 = 40u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_GET_ANY_MODULE_IN_RANGE: u32 = 45u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_GET_BUS_DATA: u32 = 20u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_GET_CACHE_SIZE: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_GET_CLR_DATA_INTERFACE: u32 = 38u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_GET_CONTEXT_EX: u32 = 48u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_GET_CURRENT_PROCESS: u32 = 26u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_GET_CURRENT_PROCESS_HANDLE: u32 = 28u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_GET_CURRENT_THREAD: u32 = 25u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_GET_DEBUGGER_DATA: u32 = 14u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_GET_EXCEPTION_RECORD: u32 = 18u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_GET_EXPRESSION_EX: u32 = 30u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_GET_INPUT_LINE: u32 = 29u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_GET_KERNEL_VERSION: u32 = 15u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_GET_PEB_ADDRESS: u32 = 129u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_GET_SET_SYMPATH: u32 = 17u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_GET_TEB_ADDRESS: u32 = 128u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_GET_THREAD_OS_INFO: u32 = 37u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_GET_TYPE_SIZE: u32 = 27u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_IS_PTR64: u32 = 19u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_KD_CONTEXT: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_KSTACK_HELP: u32 = 10u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_LOWMEM_CHECK: u32 = 23u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_MATCH_PATTERN_A: u32 = 39u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_OBSOLETE_PLACEHOLDER_36: u32 = 36u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_PHYSICAL_TO_VIRTUAL: u32 = 47u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_POINTER_SEARCH_PHYSICAL: u32 = 35u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_QUERY_TARGET_INTERFACE: u32 = 42u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_READ_CONTROL_SPACE: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_READ_IO_SPACE: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_READ_IO_SPACE_EX: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_READ_MSR: u32 = 12u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_READ_PHYSICAL: u32 = 6u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_READ_PHYSICAL_WITH_FLAGS: u32 = 33u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_RELOAD_SYMBOLS: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_SEARCH_MEMORY: u32 = 24u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_SET_BUS_DATA: u32 = 21u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_SET_THREAD: u32 = 11u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_TRANSLATE_VIRTUAL_TO_PHYSICAL: u32 = 31u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_TYPED_DATA: u32 = 43u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_TYPED_DATA_OBSOLETE: u32 = 41u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_VIRTUAL_TO_PHYSICAL: u32 = 46u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_WRITE_CONTROL_SPACE: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_WRITE_IO_SPACE: u32 = 5u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_WRITE_IO_SPACE_EX: u32 = 9u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_WRITE_MSR: u32 = 13u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_WRITE_PHYSICAL: u32 = 7u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IG_WRITE_PHYSICAL_WITH_FLAGS: u32 = 34u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IHostDataModelAccess(::windows::runtime::IUnknown);
impl IHostDataModelAccess {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDataModel(&self, manager: *mut ::std::option::Option<IDataModelManager>, host: *mut ::std::option::Option<IDebugHost>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(manager), ::std::mem::transmute(host)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IHostDataModelAccess {
    type Vtable = IHostDataModelAccess_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4072465742, 18485, 20362, [131, 110, 121, 129, 226, 153, 4, 209]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IHostDataModelAccess_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, manager: *mut ::windows::runtime::RawPtr, host: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IIndexableConcept(::windows::runtime::IUnknown);
impl IIndexableConcept {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDimensionality<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, contextobject: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), contextobject.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetAt<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, contextobject: Param0, indexercount: u64, indexers: *const ::std::option::Option<IModelObject>, object: *mut ::std::option::Option<IModelObject>, metadata: *mut ::std::option::Option<IKeyStore>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), contextobject.into_param().abi(), ::std::mem::transmute(indexercount), ::std::mem::transmute(indexers), ::std::mem::transmute(object), ::std::mem::transmute(metadata)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetAt<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>, Param3: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, contextobject: Param0, indexercount: u64, indexers: *const ::std::option::Option<IModelObject>, value: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), contextobject.into_param().abi(), ::std::mem::transmute(indexercount), ::std::mem::transmute(indexers), value.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IIndexableConcept {
    type Vtable = IIndexableConcept_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3522877855, 16211, 17495, [133, 12, 128, 81, 223, 45, 63, 181]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IIndexableConcept_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, contextobject: ::windows::runtime::RawPtr, dimensionality: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, contextobject: ::windows::runtime::RawPtr, indexercount: u64, indexers: *const ::windows::runtime::RawPtr, object: *mut ::windows::runtime::RawPtr, metadata: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, contextobject: ::windows::runtime::RawPtr, indexercount: u64, indexers: *const ::windows::runtime::RawPtr, value: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IIterableConcept(::windows::runtime::IUnknown);
impl IIterableConcept {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDefaultIndexDimensionality<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, contextobject: Param0) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), contextobject.into_param().abi(), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetIterator<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, contextobject: Param0) -> ::windows::runtime::Result<IModelIterator> {
        let mut result__: <IModelIterator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), contextobject.into_param().abi(), &mut result__).from_abi::<IModelIterator>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IIterableConcept {
    type Vtable = IIterableConcept_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4124351756, 2818, 17153, [156, 155, 179, 166, 3, 118, 40, 243]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IIterableConcept_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, contextobject: ::windows::runtime::RawPtr, dimensionality: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, contextobject: ::windows::runtime::RawPtr, iterator: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IJsDebug(::windows::runtime::IUnknown);
impl IJsDebug {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OpenVirtualProcess<'a, Param2: ::windows::runtime::IntoParam<'a, IJsDebugDataTarget>>(&self, processid: u32, runtimejsbaseaddress: u64, pdatatarget: Param2) -> ::windows::runtime::Result<IJsDebugProcess> {
        let mut result__: <IJsDebugProcess as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(processid), ::std::mem::transmute(runtimejsbaseaddress), pdatatarget.into_param().abi(), &mut result__).from_abi::<IJsDebugProcess>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IJsDebug {
    type Vtable = IJsDebug_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3188623834, 10949, 19460, [172, 94, 89, 149, 106, 174, 54, 19]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IJsDebug_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, processid: u32, runtimejsbaseaddress: u64, pdatatarget: ::windows::runtime::RawPtr, ppprocess: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IJsDebugBreakPoint(::windows::runtime::IUnknown);
impl IJsDebugBreakPoint {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn IsEnabled(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BOOL> {
        let mut result__: <super::super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BOOL>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Enable(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Disable(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Delete(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDocumentPosition(&self, pdocumentid: *mut u64, pcharacteroffset: *mut u32, pstatementcharcount: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(pdocumentid), ::std::mem::transmute(pcharacteroffset), ::std::mem::transmute(pstatementcharcount)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IJsDebugBreakPoint {
    type Vtable = IJsDebugBreakPoint_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3748099043, 60813, 18571, [138, 62, 88, 18, 87, 125, 21, 66]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IJsDebugBreakPoint_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pisenabled: *mut super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdocumentid: *mut u64, pcharacteroffset: *mut u32, pstatementcharcount: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IJsDebugDataTarget(::windows::runtime::IUnknown);
impl IJsDebugDataTarget {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ReadMemory(&self, address: u64, flags: JsDebugReadMemoryFlags, pbuffer: *mut u8, size: u32, pbytesread: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(address), ::std::mem::transmute(flags), ::std::mem::transmute(pbuffer), ::std::mem::transmute(size), ::std::mem::transmute(pbytesread)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn WriteMemory(&self, address: u64, pmemory: *const u8, size: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(address), ::std::mem::transmute(pmemory), ::std::mem::transmute(size)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AllocateVirtualMemory(&self, address: u64, size: u32, allocationtype: u32, pageprotection: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(address), ::std::mem::transmute(size), ::std::mem::transmute(allocationtype), ::std::mem::transmute(pageprotection), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn FreeVirtualMemory(&self, address: u64, size: u32, freetype: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(address), ::std::mem::transmute(size), ::std::mem::transmute(freetype)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTlsValue(&self, threadid: u32, tlsindex: u32) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(threadid), ::std::mem::transmute(tlsindex), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ReadBSTR(&self, address: u64) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(address), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ReadNullTerminatedString(&self, address: u64, charactersize: u16, maxcharacters: u32) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(address), ::std::mem::transmute(charactersize), ::std::mem::transmute(maxcharacters), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateStackFrameEnumerator(&self, threadid: u32) -> ::windows::runtime::Result<IEnumJsStackFrames> {
        let mut result__: <IEnumJsStackFrames as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(threadid), &mut result__).from_abi::<IEnumJsStackFrames>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetThreadContext(&self, threadid: u32, contextflags: u32, contextsize: u32, pcontext: *mut ::std::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(threadid), ::std::mem::transmute(contextflags), ::std::mem::transmute(contextsize), ::std::mem::transmute(pcontext)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IJsDebugDataTarget {
    type Vtable = IJsDebugDataTarget_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1404209527, 21409, 18661, [144, 0, 93, 13, 250, 137, 57, 49]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IJsDebugDataTarget_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, address: u64, flags: JsDebugReadMemoryFlags, pbuffer: *mut u8, size: u32, pbytesread: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, address: u64, pmemory: *const u8, size: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, address: u64, size: u32, allocationtype: u32, pageprotection: u32, pallocatedaddress: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, address: u64, size: u32, freetype: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, threadid: u32, tlsindex: u32, pvalue: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, address: u64, pstring: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, address: u64, charactersize: u16, maxcharacters: u32, pstring: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, threadid: u32, ppenumerator: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, threadid: u32, contextflags: u32, contextsize: u32, pcontext: *mut ::std::ffi::c_void) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IJsDebugFrame(::windows::runtime::IUnknown);
impl IJsDebugFrame {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetStackRange(&self, pstart: *mut u64, pend: *mut u64) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(pstart), ::std::mem::transmute(pend)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDocumentPositionWithId(&self, pdocumentid: *mut u64, pcharacteroffset: *mut u32, pstatementcharcount: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(pdocumentid), ::std::mem::transmute(pcharacteroffset), ::std::mem::transmute(pstatementcharcount)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDocumentPositionWithName(&self, pdocumentname: *mut super::super::super::Foundation::BSTR, pline: *mut u32, pcolumn: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(pdocumentname), ::std::mem::transmute(pline), ::std::mem::transmute(pcolumn)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDebugProperty(&self) -> ::windows::runtime::Result<IJsDebugProperty> {
        let mut result__: <IJsDebugProperty as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IJsDebugProperty>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetReturnAddress(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Evaluate<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pexpressiontext: Param0, ppdebugproperty: *mut ::std::option::Option<IJsDebugProperty>, perror: *mut super::super::super::Foundation::BSTR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), pexpressiontext.into_param().abi(), ::std::mem::transmute(ppdebugproperty), ::std::mem::transmute(perror)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IJsDebugFrame {
    type Vtable = IJsDebugFrame_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3373884983, 43933, 17586, [186, 210, 19, 185, 91, 63, 57, 14]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IJsDebugFrame_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstart: *mut u64, pend: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdocumentid: *mut u64, pcharacteroffset: *mut u32, pstatementcharcount: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdocumentname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, pline: *mut u32, pcolumn: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppdebugproperty: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, preturnaddress: *mut u64) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pexpressiontext: super::super::super::Foundation::PWSTR, ppdebugproperty: *mut ::windows::runtime::RawPtr, perror: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IJsDebugProcess(::windows::runtime::IUnknown);
impl IJsDebugProcess {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateStackWalker(&self, threadid: u32) -> ::windows::runtime::Result<IJsDebugStackWalker> {
        let mut result__: <IJsDebugStackWalker as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(threadid), &mut result__).from_abi::<IJsDebugStackWalker>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateBreakPoint<'a, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(&self, documentid: u64, characteroffset: u32, charactercount: u32, isenabled: Param3) -> ::windows::runtime::Result<IJsDebugBreakPoint> {
        let mut result__: <IJsDebugBreakPoint as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(documentid), ::std::mem::transmute(characteroffset), ::std::mem::transmute(charactercount), isenabled.into_param().abi(), &mut result__).from_abi::<IJsDebugBreakPoint>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn PerformAsyncBreak(&self, threadid: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(threadid)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetExternalStepAddress(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IJsDebugProcess {
    type Vtable = IJsDebugProcess_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1029206376, 27181, 16449, [189, 59, 13, 230, 116, 80, 40, 98]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IJsDebugProcess_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, threadid: u32, ppstackwalker: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, documentid: u64, characteroffset: u32, charactercount: u32, isenabled: super::super::super::Foundation::BOOL, ppdebugbreakpoint: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, threadid: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcodeaddress: *mut u64) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IJsDebugProperty(::windows::runtime::IUnknown);
impl IJsDebugProperty {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetPropertyInfo(&self, nradix: u32) -> ::windows::runtime::Result<JsDebugPropertyInfo> {
        let mut result__: <JsDebugPropertyInfo as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(nradix), &mut result__).from_abi::<JsDebugPropertyInfo>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetMembers(&self, members: JS_PROPERTY_MEMBERS) -> ::windows::runtime::Result<IJsEnumDebugProperty> {
        let mut result__: <IJsEnumDebugProperty as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(members), &mut result__).from_abi::<IJsEnumDebugProperty>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IJsDebugProperty {
    type Vtable = IJsDebugProperty_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(4177514283, 15012, 17184, [133, 195, 82, 163, 18, 186, 150, 51]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IJsDebugProperty_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, nradix: u32, ppropertyinfo: *mut ::std::mem::ManuallyDrop<JsDebugPropertyInfo>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, members: JS_PROPERTY_MEMBERS, ppenum: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IJsDebugStackWalker(::windows::runtime::IUnknown);
impl IJsDebugStackWalker {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNext(&self) -> ::windows::runtime::Result<IJsDebugFrame> {
        let mut result__: <IJsDebugFrame as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IJsDebugFrame>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IJsDebugStackWalker {
    type Vtable = IJsDebugStackWalker_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3676614804, 29636, 17772, [164, 236, 233, 14, 160, 11, 223, 227]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IJsDebugStackWalker_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppframe: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IJsEnumDebugProperty(::windows::runtime::IUnknown);
impl IJsEnumDebugProperty {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Next(&self, count: u32, ppdebugproperty: *mut ::std::option::Option<IJsDebugProperty>, pactualcount: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(count), ::std::mem::transmute(ppdebugproperty), ::std::mem::transmute(pactualcount)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IJsEnumDebugProperty {
    type Vtable = IJsEnumDebugProperty_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1083327279, 12047, 20449, [182, 56, 91, 116, 165, 44, 220, 190]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IJsEnumDebugProperty_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, count: u32, ppdebugproperty: *mut ::windows::runtime::RawPtr, pactualcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcount: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IKeyEnumerator(::windows::runtime::IUnknown);
impl IKeyEnumerator {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNext(&self, key: *mut super::super::super::Foundation::BSTR, value: *mut ::std::option::Option<IModelObject>, metadata: *mut ::std::option::Option<IKeyStore>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(key), ::std::mem::transmute(value), ::std::mem::transmute(metadata)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IKeyEnumerator {
    type Vtable = IKeyEnumerator_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(878684462, 24064, 17177, [156, 174, 151, 31, 118, 1, 205, 207]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IKeyEnumerator_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, key: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, value: *mut ::windows::runtime::RawPtr, metadata: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IKeyStore(::windows::runtime::IUnknown);
impl IKeyStore {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetKey<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, key: Param0, object: *mut ::std::option::Option<IModelObject>, metadata: *mut ::std::option::Option<IKeyStore>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), key.into_param().abi(), ::std::mem::transmute(object), ::std::mem::transmute(metadata)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetKey<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, IModelObject>, Param2: ::windows::runtime::IntoParam<'a, IKeyStore>>(&self, key: Param0, object: Param1, metadata: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), key.into_param().abi(), object.into_param().abi(), metadata.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetKeyValue<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, key: Param0, object: *mut ::std::option::Option<IModelObject>, metadata: *mut ::std::option::Option<IKeyStore>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), key.into_param().abi(), ::std::mem::transmute(object), ::std::mem::transmute(metadata)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetKeyValue<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, key: Param0, object: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), key.into_param().abi(), object.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ClearKeys(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IKeyStore {
    type Vtable = IKeyStore_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(264721789, 16413, 20426, [147, 101, 218, 30, 152, 80, 105, 124]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IKeyStore_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, key: super::super::super::Foundation::PWSTR, object: *mut ::windows::runtime::RawPtr, metadata: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, key: super::super::super::Foundation::PWSTR, object: ::windows::runtime::RawPtr, metadata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, key: super::super::super::Foundation::PWSTR, object: *mut ::windows::runtime::RawPtr, metadata: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, key: super::super::super::Foundation::PWSTR, object: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct IMAGEHLP_CBA_EVENT {
    pub severity: IMAGEHLP_CBA_EVENT_SEVERITY,
    pub code: u32,
    pub desc: super::super::super::Foundation::PSTR,
    pub object: *mut ::std::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl IMAGEHLP_CBA_EVENT {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for IMAGEHLP_CBA_EVENT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for IMAGEHLP_CBA_EVENT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_CBA_EVENT").field("severity", &self.severity).field("code", &self.code).field("desc", &self.desc).field("object", &self.object).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for IMAGEHLP_CBA_EVENT {
    fn eq(&self, other: &Self) -> bool {
        self.severity == other.severity && self.code == other.code && self.desc == other.desc && self.object == other.object
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for IMAGEHLP_CBA_EVENT {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for IMAGEHLP_CBA_EVENT {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct IMAGEHLP_CBA_EVENTW {
    pub severity: IMAGEHLP_CBA_EVENT_SEVERITY,
    pub code: u32,
    pub desc: super::super::super::Foundation::PWSTR,
    pub object: *mut ::std::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl IMAGEHLP_CBA_EVENTW {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for IMAGEHLP_CBA_EVENTW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for IMAGEHLP_CBA_EVENTW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_CBA_EVENTW").field("severity", &self.severity).field("code", &self.code).field("desc", &self.desc).field("object", &self.object).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for IMAGEHLP_CBA_EVENTW {
    fn eq(&self, other: &Self) -> bool {
        self.severity == other.severity && self.code == other.code && self.desc == other.desc && self.object == other.object
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for IMAGEHLP_CBA_EVENTW {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for IMAGEHLP_CBA_EVENTW {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct IMAGEHLP_CBA_EVENT_SEVERITY(pub u32);
pub const sevInfo: IMAGEHLP_CBA_EVENT_SEVERITY = IMAGEHLP_CBA_EVENT_SEVERITY(0u32);
pub const sevProblem: IMAGEHLP_CBA_EVENT_SEVERITY = IMAGEHLP_CBA_EVENT_SEVERITY(1u32);
pub const sevAttn: IMAGEHLP_CBA_EVENT_SEVERITY = IMAGEHLP_CBA_EVENT_SEVERITY(2u32);
pub const sevFatal: IMAGEHLP_CBA_EVENT_SEVERITY = IMAGEHLP_CBA_EVENT_SEVERITY(3u32);
impl ::std::convert::From<u32> for IMAGEHLP_CBA_EVENT_SEVERITY {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for IMAGEHLP_CBA_EVENT_SEVERITY {
    type Abi = Self;
}
impl ::std::ops::BitOr for IMAGEHLP_CBA_EVENT_SEVERITY {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for IMAGEHLP_CBA_EVENT_SEVERITY {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for IMAGEHLP_CBA_EVENT_SEVERITY {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for IMAGEHLP_CBA_EVENT_SEVERITY {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for IMAGEHLP_CBA_EVENT_SEVERITY {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IMAGEHLP_CBA_READ_MEMORY {
    pub addr: u64,
    pub buf: *mut ::std::ffi::c_void,
    pub bytes: u32,
    pub bytesread: *mut u32,
}
impl IMAGEHLP_CBA_READ_MEMORY {}
impl ::std::default::Default for IMAGEHLP_CBA_READ_MEMORY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for IMAGEHLP_CBA_READ_MEMORY {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_CBA_READ_MEMORY").field("addr", &self.addr).field("buf", &self.buf).field("bytes", &self.bytes).field("bytesread", &self.bytesread).finish()
    }
}
impl ::std::cmp::PartialEq for IMAGEHLP_CBA_READ_MEMORY {
    fn eq(&self, other: &Self) -> bool {
        self.addr == other.addr && self.buf == other.buf && self.bytes == other.bytes && self.bytesread == other.bytesread
    }
}
impl ::std::cmp::Eq for IMAGEHLP_CBA_READ_MEMORY {}
unsafe impl ::windows::runtime::Abi for IMAGEHLP_CBA_READ_MEMORY {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct IMAGEHLP_DEFERRED_SYMBOL_LOAD {
    pub SizeOfStruct: u32,
    pub BaseOfImage: u32,
    pub CheckSum: u32,
    pub TimeDateStamp: u32,
    pub FileName: [super::super::super::Foundation::CHAR; 260],
    pub Reparse: super::super::super::Foundation::BOOLEAN,
    pub hFile: super::super::super::Foundation::HANDLE,
}
#[cfg(feature = "Win32_Foundation")]
impl IMAGEHLP_DEFERRED_SYMBOL_LOAD {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for IMAGEHLP_DEFERRED_SYMBOL_LOAD {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for IMAGEHLP_DEFERRED_SYMBOL_LOAD {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_DEFERRED_SYMBOL_LOAD")
            .field("SizeOfStruct", &self.SizeOfStruct)
            .field("BaseOfImage", &self.BaseOfImage)
            .field("CheckSum", &self.CheckSum)
            .field("TimeDateStamp", &self.TimeDateStamp)
            .field("FileName", &self.FileName)
            .field("Reparse", &self.Reparse)
            .field("hFile", &self.hFile)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for IMAGEHLP_DEFERRED_SYMBOL_LOAD {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct && self.BaseOfImage == other.BaseOfImage && self.CheckSum == other.CheckSum && self.TimeDateStamp == other.TimeDateStamp && self.FileName == other.FileName && self.Reparse == other.Reparse && self.hFile == other.hFile
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for IMAGEHLP_DEFERRED_SYMBOL_LOAD {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for IMAGEHLP_DEFERRED_SYMBOL_LOAD {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct IMAGEHLP_DEFERRED_SYMBOL_LOAD64 {
    pub SizeOfStruct: u32,
    pub BaseOfImage: u64,
    pub CheckSum: u32,
    pub TimeDateStamp: u32,
    pub FileName: [super::super::super::Foundation::CHAR; 260],
    pub Reparse: super::super::super::Foundation::BOOLEAN,
    pub hFile: super::super::super::Foundation::HANDLE,
    pub Flags: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl IMAGEHLP_DEFERRED_SYMBOL_LOAD64 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for IMAGEHLP_DEFERRED_SYMBOL_LOAD64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for IMAGEHLP_DEFERRED_SYMBOL_LOAD64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_DEFERRED_SYMBOL_LOAD64")
            .field("SizeOfStruct", &self.SizeOfStruct)
            .field("BaseOfImage", &self.BaseOfImage)
            .field("CheckSum", &self.CheckSum)
            .field("TimeDateStamp", &self.TimeDateStamp)
            .field("FileName", &self.FileName)
            .field("Reparse", &self.Reparse)
            .field("hFile", &self.hFile)
            .field("Flags", &self.Flags)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for IMAGEHLP_DEFERRED_SYMBOL_LOAD64 {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct && self.BaseOfImage == other.BaseOfImage && self.CheckSum == other.CheckSum && self.TimeDateStamp == other.TimeDateStamp && self.FileName == other.FileName && self.Reparse == other.Reparse && self.hFile == other.hFile && self.Flags == other.Flags
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for IMAGEHLP_DEFERRED_SYMBOL_LOAD64 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for IMAGEHLP_DEFERRED_SYMBOL_LOAD64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct IMAGEHLP_DEFERRED_SYMBOL_LOADW64 {
    pub SizeOfStruct: u32,
    pub BaseOfImage: u64,
    pub CheckSum: u32,
    pub TimeDateStamp: u32,
    pub FileName: [u16; 261],
    pub Reparse: super::super::super::Foundation::BOOLEAN,
    pub hFile: super::super::super::Foundation::HANDLE,
    pub Flags: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl IMAGEHLP_DEFERRED_SYMBOL_LOADW64 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for IMAGEHLP_DEFERRED_SYMBOL_LOADW64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for IMAGEHLP_DEFERRED_SYMBOL_LOADW64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_DEFERRED_SYMBOL_LOADW64")
            .field("SizeOfStruct", &self.SizeOfStruct)
            .field("BaseOfImage", &self.BaseOfImage)
            .field("CheckSum", &self.CheckSum)
            .field("TimeDateStamp", &self.TimeDateStamp)
            .field("FileName", &self.FileName)
            .field("Reparse", &self.Reparse)
            .field("hFile", &self.hFile)
            .field("Flags", &self.Flags)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for IMAGEHLP_DEFERRED_SYMBOL_LOADW64 {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct && self.BaseOfImage == other.BaseOfImage && self.CheckSum == other.CheckSum && self.TimeDateStamp == other.TimeDateStamp && self.FileName == other.FileName && self.Reparse == other.Reparse && self.hFile == other.hFile && self.Flags == other.Flags
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for IMAGEHLP_DEFERRED_SYMBOL_LOADW64 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for IMAGEHLP_DEFERRED_SYMBOL_LOADW64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct IMAGEHLP_DUPLICATE_SYMBOL {
    pub SizeOfStruct: u32,
    pub NumberOfDups: u32,
    pub Symbol: *mut IMAGEHLP_SYMBOL,
    pub SelectedSymbol: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl IMAGEHLP_DUPLICATE_SYMBOL {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for IMAGEHLP_DUPLICATE_SYMBOL {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for IMAGEHLP_DUPLICATE_SYMBOL {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_DUPLICATE_SYMBOL").field("SizeOfStruct", &self.SizeOfStruct).field("NumberOfDups", &self.NumberOfDups).field("Symbol", &self.Symbol).field("SelectedSymbol", &self.SelectedSymbol).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for IMAGEHLP_DUPLICATE_SYMBOL {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct && self.NumberOfDups == other.NumberOfDups && self.Symbol == other.Symbol && self.SelectedSymbol == other.SelectedSymbol
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for IMAGEHLP_DUPLICATE_SYMBOL {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for IMAGEHLP_DUPLICATE_SYMBOL {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct IMAGEHLP_DUPLICATE_SYMBOL64 {
    pub SizeOfStruct: u32,
    pub NumberOfDups: u32,
    pub Symbol: *mut IMAGEHLP_SYMBOL64,
    pub SelectedSymbol: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl IMAGEHLP_DUPLICATE_SYMBOL64 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for IMAGEHLP_DUPLICATE_SYMBOL64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for IMAGEHLP_DUPLICATE_SYMBOL64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_DUPLICATE_SYMBOL64").field("SizeOfStruct", &self.SizeOfStruct).field("NumberOfDups", &self.NumberOfDups).field("Symbol", &self.Symbol).field("SelectedSymbol", &self.SelectedSymbol).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for IMAGEHLP_DUPLICATE_SYMBOL64 {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct && self.NumberOfDups == other.NumberOfDups && self.Symbol == other.Symbol && self.SelectedSymbol == other.SelectedSymbol
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for IMAGEHLP_DUPLICATE_SYMBOL64 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for IMAGEHLP_DUPLICATE_SYMBOL64 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct IMAGEHLP_EXTENDED_OPTIONS(pub i32);
pub const SYMOPT_EX_DISABLEACCESSTIMEUPDATE: IMAGEHLP_EXTENDED_OPTIONS = IMAGEHLP_EXTENDED_OPTIONS(0i32);
pub const SYMOPT_EX_LASTVALIDDEBUGDIRECTORY: IMAGEHLP_EXTENDED_OPTIONS = IMAGEHLP_EXTENDED_OPTIONS(1i32);
pub const SYMOPT_EX_NOIMPLICITPATTERNSEARCH: IMAGEHLP_EXTENDED_OPTIONS = IMAGEHLP_EXTENDED_OPTIONS(2i32);
pub const SYMOPT_EX_NEVERLOADSYMBOLS: IMAGEHLP_EXTENDED_OPTIONS = IMAGEHLP_EXTENDED_OPTIONS(3i32);
pub const SYMOPT_EX_MAX: IMAGEHLP_EXTENDED_OPTIONS = IMAGEHLP_EXTENDED_OPTIONS(4i32);
impl ::std::convert::From<i32> for IMAGEHLP_EXTENDED_OPTIONS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for IMAGEHLP_EXTENDED_OPTIONS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct IMAGEHLP_GET_TYPE_INFO_FLAGS(pub u32);
pub const IMAGEHLP_GET_TYPE_INFO_CHILDREN: IMAGEHLP_GET_TYPE_INFO_FLAGS = IMAGEHLP_GET_TYPE_INFO_FLAGS(2u32);
pub const IMAGEHLP_GET_TYPE_INFO_UNCACHED: IMAGEHLP_GET_TYPE_INFO_FLAGS = IMAGEHLP_GET_TYPE_INFO_FLAGS(1u32);
impl ::std::convert::From<u32> for IMAGEHLP_GET_TYPE_INFO_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for IMAGEHLP_GET_TYPE_INFO_FLAGS {
    type Abi = Self;
}
impl ::std::ops::BitOr for IMAGEHLP_GET_TYPE_INFO_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for IMAGEHLP_GET_TYPE_INFO_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for IMAGEHLP_GET_TYPE_INFO_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for IMAGEHLP_GET_TYPE_INFO_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for IMAGEHLP_GET_TYPE_INFO_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IMAGEHLP_GET_TYPE_INFO_PARAMS {
    pub SizeOfStruct: u32,
    pub Flags: IMAGEHLP_GET_TYPE_INFO_FLAGS,
    pub NumIds: u32,
    pub TypeIds: *mut u32,
    pub TagFilter: u64,
    pub NumReqs: u32,
    pub ReqKinds: *mut IMAGEHLP_SYMBOL_TYPE_INFO,
    pub ReqOffsets: *mut usize,
    pub ReqSizes: *mut u32,
    pub ReqStride: usize,
    pub BufferSize: usize,
    pub Buffer: *mut ::std::ffi::c_void,
    pub EntriesMatched: u32,
    pub EntriesFilled: u32,
    pub TagsFound: u64,
    pub AllReqsValid: u64,
    pub NumReqsValid: u32,
    pub ReqsValid: *mut u64,
}
impl IMAGEHLP_GET_TYPE_INFO_PARAMS {}
impl ::std::default::Default for IMAGEHLP_GET_TYPE_INFO_PARAMS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for IMAGEHLP_GET_TYPE_INFO_PARAMS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_GET_TYPE_INFO_PARAMS")
            .field("SizeOfStruct", &self.SizeOfStruct)
            .field("Flags", &self.Flags)
            .field("NumIds", &self.NumIds)
            .field("TypeIds", &self.TypeIds)
            .field("TagFilter", &self.TagFilter)
            .field("NumReqs", &self.NumReqs)
            .field("ReqKinds", &self.ReqKinds)
            .field("ReqOffsets", &self.ReqOffsets)
            .field("ReqSizes", &self.ReqSizes)
            .field("ReqStride", &self.ReqStride)
            .field("BufferSize", &self.BufferSize)
            .field("Buffer", &self.Buffer)
            .field("EntriesMatched", &self.EntriesMatched)
            .field("EntriesFilled", &self.EntriesFilled)
            .field("TagsFound", &self.TagsFound)
            .field("AllReqsValid", &self.AllReqsValid)
            .field("NumReqsValid", &self.NumReqsValid)
            .field("ReqsValid", &self.ReqsValid)
            .finish()
    }
}
impl ::std::cmp::PartialEq for IMAGEHLP_GET_TYPE_INFO_PARAMS {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct
            && self.Flags == other.Flags
            && self.NumIds == other.NumIds
            && self.TypeIds == other.TypeIds
            && self.TagFilter == other.TagFilter
            && self.NumReqs == other.NumReqs
            && self.ReqKinds == other.ReqKinds
            && self.ReqOffsets == other.ReqOffsets
            && self.ReqSizes == other.ReqSizes
            && self.ReqStride == other.ReqStride
            && self.BufferSize == other.BufferSize
            && self.Buffer == other.Buffer
            && self.EntriesMatched == other.EntriesMatched
            && self.EntriesFilled == other.EntriesFilled
            && self.TagsFound == other.TagsFound
            && self.AllReqsValid == other.AllReqsValid
            && self.NumReqsValid == other.NumReqsValid
            && self.ReqsValid == other.ReqsValid
    }
}
impl ::std::cmp::Eq for IMAGEHLP_GET_TYPE_INFO_PARAMS {}
unsafe impl ::windows::runtime::Abi for IMAGEHLP_GET_TYPE_INFO_PARAMS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct IMAGEHLP_HD_TYPE(pub i32);
pub const hdBase: IMAGEHLP_HD_TYPE = IMAGEHLP_HD_TYPE(0i32);
pub const hdSym: IMAGEHLP_HD_TYPE = IMAGEHLP_HD_TYPE(1i32);
pub const hdSrc: IMAGEHLP_HD_TYPE = IMAGEHLP_HD_TYPE(2i32);
pub const hdMax: IMAGEHLP_HD_TYPE = IMAGEHLP_HD_TYPE(3i32);
impl ::std::convert::From<i32> for IMAGEHLP_HD_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for IMAGEHLP_HD_TYPE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct IMAGEHLP_LINE {
    pub SizeOfStruct: u32,
    pub Key: *mut ::std::ffi::c_void,
    pub LineNumber: u32,
    pub FileName: super::super::super::Foundation::PSTR,
    pub Address: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl IMAGEHLP_LINE {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for IMAGEHLP_LINE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for IMAGEHLP_LINE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_LINE").field("SizeOfStruct", &self.SizeOfStruct).field("Key", &self.Key).field("LineNumber", &self.LineNumber).field("FileName", &self.FileName).field("Address", &self.Address).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for IMAGEHLP_LINE {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct && self.Key == other.Key && self.LineNumber == other.LineNumber && self.FileName == other.FileName && self.Address == other.Address
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for IMAGEHLP_LINE {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for IMAGEHLP_LINE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct IMAGEHLP_LINE64 {
    pub SizeOfStruct: u32,
    pub Key: *mut ::std::ffi::c_void,
    pub LineNumber: u32,
    pub FileName: super::super::super::Foundation::PSTR,
    pub Address: u64,
}
#[cfg(feature = "Win32_Foundation")]
impl IMAGEHLP_LINE64 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for IMAGEHLP_LINE64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for IMAGEHLP_LINE64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_LINE64").field("SizeOfStruct", &self.SizeOfStruct).field("Key", &self.Key).field("LineNumber", &self.LineNumber).field("FileName", &self.FileName).field("Address", &self.Address).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for IMAGEHLP_LINE64 {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct && self.Key == other.Key && self.LineNumber == other.LineNumber && self.FileName == other.FileName && self.Address == other.Address
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for IMAGEHLP_LINE64 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for IMAGEHLP_LINE64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct IMAGEHLP_LINEW {
    pub SizeOfStruct: u32,
    pub Key: *mut ::std::ffi::c_void,
    pub LineNumber: u32,
    pub FileName: super::super::super::Foundation::PSTR,
    pub Address: u64,
}
#[cfg(feature = "Win32_Foundation")]
impl IMAGEHLP_LINEW {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for IMAGEHLP_LINEW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for IMAGEHLP_LINEW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_LINEW").field("SizeOfStruct", &self.SizeOfStruct).field("Key", &self.Key).field("LineNumber", &self.LineNumber).field("FileName", &self.FileName).field("Address", &self.Address).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for IMAGEHLP_LINEW {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct && self.Key == other.Key && self.LineNumber == other.LineNumber && self.FileName == other.FileName && self.Address == other.Address
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for IMAGEHLP_LINEW {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for IMAGEHLP_LINEW {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct IMAGEHLP_LINEW64 {
    pub SizeOfStruct: u32,
    pub Key: *mut ::std::ffi::c_void,
    pub LineNumber: u32,
    pub FileName: super::super::super::Foundation::PWSTR,
    pub Address: u64,
}
#[cfg(feature = "Win32_Foundation")]
impl IMAGEHLP_LINEW64 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for IMAGEHLP_LINEW64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for IMAGEHLP_LINEW64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_LINEW64").field("SizeOfStruct", &self.SizeOfStruct).field("Key", &self.Key).field("LineNumber", &self.LineNumber).field("FileName", &self.FileName).field("Address", &self.Address).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for IMAGEHLP_LINEW64 {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct && self.Key == other.Key && self.LineNumber == other.LineNumber && self.FileName == other.FileName && self.Address == other.Address
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for IMAGEHLP_LINEW64 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for IMAGEHLP_LINEW64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct IMAGEHLP_MODULE {
    pub SizeOfStruct: u32,
    pub BaseOfImage: u32,
    pub ImageSize: u32,
    pub TimeDateStamp: u32,
    pub CheckSum: u32,
    pub NumSyms: u32,
    pub SymType: SYM_TYPE,
    pub ModuleName: [super::super::super::Foundation::CHAR; 32],
    pub ImageName: [super::super::super::Foundation::CHAR; 256],
    pub LoadedImageName: [super::super::super::Foundation::CHAR; 256],
}
#[cfg(feature = "Win32_Foundation")]
impl IMAGEHLP_MODULE {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for IMAGEHLP_MODULE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for IMAGEHLP_MODULE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_MODULE")
            .field("SizeOfStruct", &self.SizeOfStruct)
            .field("BaseOfImage", &self.BaseOfImage)
            .field("ImageSize", &self.ImageSize)
            .field("TimeDateStamp", &self.TimeDateStamp)
            .field("CheckSum", &self.CheckSum)
            .field("NumSyms", &self.NumSyms)
            .field("SymType", &self.SymType)
            .field("ModuleName", &self.ModuleName)
            .field("ImageName", &self.ImageName)
            .field("LoadedImageName", &self.LoadedImageName)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for IMAGEHLP_MODULE {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct && self.BaseOfImage == other.BaseOfImage && self.ImageSize == other.ImageSize && self.TimeDateStamp == other.TimeDateStamp && self.CheckSum == other.CheckSum && self.NumSyms == other.NumSyms && self.SymType == other.SymType && self.ModuleName == other.ModuleName && self.ImageName == other.ImageName && self.LoadedImageName == other.LoadedImageName
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for IMAGEHLP_MODULE {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for IMAGEHLP_MODULE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct IMAGEHLP_MODULE64 {
    pub SizeOfStruct: u32,
    pub BaseOfImage: u64,
    pub ImageSize: u32,
    pub TimeDateStamp: u32,
    pub CheckSum: u32,
    pub NumSyms: u32,
    pub SymType: SYM_TYPE,
    pub ModuleName: [super::super::super::Foundation::CHAR; 32],
    pub ImageName: [super::super::super::Foundation::CHAR; 256],
    pub LoadedImageName: [super::super::super::Foundation::CHAR; 256],
    pub LoadedPdbName: [super::super::super::Foundation::CHAR; 256],
    pub CVSig: u32,
    pub CVData: [super::super::super::Foundation::CHAR; 780],
    pub PdbSig: u32,
    pub PdbSig70: ::windows::runtime::GUID,
    pub PdbAge: u32,
    pub PdbUnmatched: super::super::super::Foundation::BOOL,
    pub DbgUnmatched: super::super::super::Foundation::BOOL,
    pub LineNumbers: super::super::super::Foundation::BOOL,
    pub GlobalSymbols: super::super::super::Foundation::BOOL,
    pub TypeInfo: super::super::super::Foundation::BOOL,
    pub SourceIndexed: super::super::super::Foundation::BOOL,
    pub Publics: super::super::super::Foundation::BOOL,
    pub MachineType: u32,
    pub Reserved: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl IMAGEHLP_MODULE64 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for IMAGEHLP_MODULE64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for IMAGEHLP_MODULE64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_MODULE64")
            .field("SizeOfStruct", &self.SizeOfStruct)
            .field("BaseOfImage", &self.BaseOfImage)
            .field("ImageSize", &self.ImageSize)
            .field("TimeDateStamp", &self.TimeDateStamp)
            .field("CheckSum", &self.CheckSum)
            .field("NumSyms", &self.NumSyms)
            .field("SymType", &self.SymType)
            .field("ModuleName", &self.ModuleName)
            .field("ImageName", &self.ImageName)
            .field("LoadedImageName", &self.LoadedImageName)
            .field("LoadedPdbName", &self.LoadedPdbName)
            .field("CVSig", &self.CVSig)
            .field("CVData", &self.CVData)
            .field("PdbSig", &self.PdbSig)
            .field("PdbSig70", &self.PdbSig70)
            .field("PdbAge", &self.PdbAge)
            .field("PdbUnmatched", &self.PdbUnmatched)
            .field("DbgUnmatched", &self.DbgUnmatched)
            .field("LineNumbers", &self.LineNumbers)
            .field("GlobalSymbols", &self.GlobalSymbols)
            .field("TypeInfo", &self.TypeInfo)
            .field("SourceIndexed", &self.SourceIndexed)
            .field("Publics", &self.Publics)
            .field("MachineType", &self.MachineType)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for IMAGEHLP_MODULE64 {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct
            && self.BaseOfImage == other.BaseOfImage
            && self.ImageSize == other.ImageSize
            && self.TimeDateStamp == other.TimeDateStamp
            && self.CheckSum == other.CheckSum
            && self.NumSyms == other.NumSyms
            && self.SymType == other.SymType
            && self.ModuleName == other.ModuleName
            && self.ImageName == other.ImageName
            && self.LoadedImageName == other.LoadedImageName
            && self.LoadedPdbName == other.LoadedPdbName
            && self.CVSig == other.CVSig
            && self.CVData == other.CVData
            && self.PdbSig == other.PdbSig
            && self.PdbSig70 == other.PdbSig70
            && self.PdbAge == other.PdbAge
            && self.PdbUnmatched == other.PdbUnmatched
            && self.DbgUnmatched == other.DbgUnmatched
            && self.LineNumbers == other.LineNumbers
            && self.GlobalSymbols == other.GlobalSymbols
            && self.TypeInfo == other.TypeInfo
            && self.SourceIndexed == other.SourceIndexed
            && self.Publics == other.Publics
            && self.MachineType == other.MachineType
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for IMAGEHLP_MODULE64 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for IMAGEHLP_MODULE64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct IMAGEHLP_MODULE64_EX {
    pub Module: IMAGEHLP_MODULE64,
    pub RegionFlags: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl IMAGEHLP_MODULE64_EX {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for IMAGEHLP_MODULE64_EX {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for IMAGEHLP_MODULE64_EX {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_MODULE64_EX").field("Module", &self.Module).field("RegionFlags", &self.RegionFlags).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for IMAGEHLP_MODULE64_EX {
    fn eq(&self, other: &Self) -> bool {
        self.Module == other.Module && self.RegionFlags == other.RegionFlags
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for IMAGEHLP_MODULE64_EX {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for IMAGEHLP_MODULE64_EX {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IMAGEHLP_MODULEW {
    pub SizeOfStruct: u32,
    pub BaseOfImage: u32,
    pub ImageSize: u32,
    pub TimeDateStamp: u32,
    pub CheckSum: u32,
    pub NumSyms: u32,
    pub SymType: SYM_TYPE,
    pub ModuleName: [u16; 32],
    pub ImageName: [u16; 256],
    pub LoadedImageName: [u16; 256],
}
impl IMAGEHLP_MODULEW {}
impl ::std::default::Default for IMAGEHLP_MODULEW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for IMAGEHLP_MODULEW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_MODULEW")
            .field("SizeOfStruct", &self.SizeOfStruct)
            .field("BaseOfImage", &self.BaseOfImage)
            .field("ImageSize", &self.ImageSize)
            .field("TimeDateStamp", &self.TimeDateStamp)
            .field("CheckSum", &self.CheckSum)
            .field("NumSyms", &self.NumSyms)
            .field("SymType", &self.SymType)
            .field("ModuleName", &self.ModuleName)
            .field("ImageName", &self.ImageName)
            .field("LoadedImageName", &self.LoadedImageName)
            .finish()
    }
}
impl ::std::cmp::PartialEq for IMAGEHLP_MODULEW {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct && self.BaseOfImage == other.BaseOfImage && self.ImageSize == other.ImageSize && self.TimeDateStamp == other.TimeDateStamp && self.CheckSum == other.CheckSum && self.NumSyms == other.NumSyms && self.SymType == other.SymType && self.ModuleName == other.ModuleName && self.ImageName == other.ImageName && self.LoadedImageName == other.LoadedImageName
    }
}
impl ::std::cmp::Eq for IMAGEHLP_MODULEW {}
unsafe impl ::windows::runtime::Abi for IMAGEHLP_MODULEW {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct IMAGEHLP_MODULEW64 {
    pub SizeOfStruct: u32,
    pub BaseOfImage: u64,
    pub ImageSize: u32,
    pub TimeDateStamp: u32,
    pub CheckSum: u32,
    pub NumSyms: u32,
    pub SymType: SYM_TYPE,
    pub ModuleName: [u16; 32],
    pub ImageName: [u16; 256],
    pub LoadedImageName: [u16; 256],
    pub LoadedPdbName: [u16; 256],
    pub CVSig: u32,
    pub CVData: [u16; 780],
    pub PdbSig: u32,
    pub PdbSig70: ::windows::runtime::GUID,
    pub PdbAge: u32,
    pub PdbUnmatched: super::super::super::Foundation::BOOL,
    pub DbgUnmatched: super::super::super::Foundation::BOOL,
    pub LineNumbers: super::super::super::Foundation::BOOL,
    pub GlobalSymbols: super::super::super::Foundation::BOOL,
    pub TypeInfo: super::super::super::Foundation::BOOL,
    pub SourceIndexed: super::super::super::Foundation::BOOL,
    pub Publics: super::super::super::Foundation::BOOL,
    pub MachineType: u32,
    pub Reserved: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl IMAGEHLP_MODULEW64 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for IMAGEHLP_MODULEW64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for IMAGEHLP_MODULEW64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_MODULEW64")
            .field("SizeOfStruct", &self.SizeOfStruct)
            .field("BaseOfImage", &self.BaseOfImage)
            .field("ImageSize", &self.ImageSize)
            .field("TimeDateStamp", &self.TimeDateStamp)
            .field("CheckSum", &self.CheckSum)
            .field("NumSyms", &self.NumSyms)
            .field("SymType", &self.SymType)
            .field("ModuleName", &self.ModuleName)
            .field("ImageName", &self.ImageName)
            .field("LoadedImageName", &self.LoadedImageName)
            .field("LoadedPdbName", &self.LoadedPdbName)
            .field("CVSig", &self.CVSig)
            .field("CVData", &self.CVData)
            .field("PdbSig", &self.PdbSig)
            .field("PdbSig70", &self.PdbSig70)
            .field("PdbAge", &self.PdbAge)
            .field("PdbUnmatched", &self.PdbUnmatched)
            .field("DbgUnmatched", &self.DbgUnmatched)
            .field("LineNumbers", &self.LineNumbers)
            .field("GlobalSymbols", &self.GlobalSymbols)
            .field("TypeInfo", &self.TypeInfo)
            .field("SourceIndexed", &self.SourceIndexed)
            .field("Publics", &self.Publics)
            .field("MachineType", &self.MachineType)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for IMAGEHLP_MODULEW64 {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct
            && self.BaseOfImage == other.BaseOfImage
            && self.ImageSize == other.ImageSize
            && self.TimeDateStamp == other.TimeDateStamp
            && self.CheckSum == other.CheckSum
            && self.NumSyms == other.NumSyms
            && self.SymType == other.SymType
            && self.ModuleName == other.ModuleName
            && self.ImageName == other.ImageName
            && self.LoadedImageName == other.LoadedImageName
            && self.LoadedPdbName == other.LoadedPdbName
            && self.CVSig == other.CVSig
            && self.CVData == other.CVData
            && self.PdbSig == other.PdbSig
            && self.PdbSig70 == other.PdbSig70
            && self.PdbAge == other.PdbAge
            && self.PdbUnmatched == other.PdbUnmatched
            && self.DbgUnmatched == other.DbgUnmatched
            && self.LineNumbers == other.LineNumbers
            && self.GlobalSymbols == other.GlobalSymbols
            && self.TypeInfo == other.TypeInfo
            && self.SourceIndexed == other.SourceIndexed
            && self.Publics == other.Publics
            && self.MachineType == other.MachineType
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for IMAGEHLP_MODULEW64 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for IMAGEHLP_MODULEW64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct IMAGEHLP_MODULEW64_EX {
    pub Module: IMAGEHLP_MODULEW64,
    pub RegionFlags: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl IMAGEHLP_MODULEW64_EX {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for IMAGEHLP_MODULEW64_EX {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for IMAGEHLP_MODULEW64_EX {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_MODULEW64_EX").field("Module", &self.Module).field("RegionFlags", &self.RegionFlags).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for IMAGEHLP_MODULEW64_EX {
    fn eq(&self, other: &Self) -> bool {
        self.Module == other.Module && self.RegionFlags == other.RegionFlags
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for IMAGEHLP_MODULEW64_EX {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for IMAGEHLP_MODULEW64_EX {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IMAGEHLP_MODULE_REGION_ADDITIONAL: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IMAGEHLP_MODULE_REGION_ALL: u32 = 255u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IMAGEHLP_MODULE_REGION_DLLBASE: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IMAGEHLP_MODULE_REGION_DLLRANGE: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IMAGEHLP_MODULE_REGION_JIT: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IMAGEHLP_RMAP_BIG_ENDIAN: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IMAGEHLP_RMAP_FIXUP_ARM64X: u32 = 268435456u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IMAGEHLP_RMAP_FIXUP_IMAGEBASE: u32 = 2147483648u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IMAGEHLP_RMAP_IGNORE_MISCOMPARE: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IMAGEHLP_RMAP_LOAD_RW_DATA_SECTIONS: u32 = 536870912u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IMAGEHLP_RMAP_MAPPED_FLAT: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IMAGEHLP_RMAP_OMIT_SHARED_RW_DATA_SECTIONS: u32 = 1073741824u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct IMAGEHLP_SF_TYPE(pub i32);
pub const sfImage: IMAGEHLP_SF_TYPE = IMAGEHLP_SF_TYPE(0i32);
pub const sfDbg: IMAGEHLP_SF_TYPE = IMAGEHLP_SF_TYPE(1i32);
pub const sfPdb: IMAGEHLP_SF_TYPE = IMAGEHLP_SF_TYPE(2i32);
pub const sfMpd: IMAGEHLP_SF_TYPE = IMAGEHLP_SF_TYPE(3i32);
pub const sfMax: IMAGEHLP_SF_TYPE = IMAGEHLP_SF_TYPE(4i32);
impl ::std::convert::From<i32> for IMAGEHLP_SF_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for IMAGEHLP_SF_TYPE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct IMAGEHLP_STACK_FRAME {
    pub InstructionOffset: u64,
    pub ReturnOffset: u64,
    pub FrameOffset: u64,
    pub StackOffset: u64,
    pub BackingStoreOffset: u64,
    pub FuncTableEntry: u64,
    pub Params: [u64; 4],
    pub Reserved: [u64; 5],
    pub Virtual: super::super::super::Foundation::BOOL,
    pub Reserved2: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl IMAGEHLP_STACK_FRAME {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for IMAGEHLP_STACK_FRAME {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for IMAGEHLP_STACK_FRAME {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_STACK_FRAME")
            .field("InstructionOffset", &self.InstructionOffset)
            .field("ReturnOffset", &self.ReturnOffset)
            .field("FrameOffset", &self.FrameOffset)
            .field("StackOffset", &self.StackOffset)
            .field("BackingStoreOffset", &self.BackingStoreOffset)
            .field("FuncTableEntry", &self.FuncTableEntry)
            .field("Params", &self.Params)
            .field("Reserved", &self.Reserved)
            .field("Virtual", &self.Virtual)
            .field("Reserved2", &self.Reserved2)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for IMAGEHLP_STACK_FRAME {
    fn eq(&self, other: &Self) -> bool {
        self.InstructionOffset == other.InstructionOffset && self.ReturnOffset == other.ReturnOffset && self.FrameOffset == other.FrameOffset && self.StackOffset == other.StackOffset && self.BackingStoreOffset == other.BackingStoreOffset && self.FuncTableEntry == other.FuncTableEntry && self.Params == other.Params && self.Reserved == other.Reserved && self.Virtual == other.Virtual && self.Reserved2 == other.Reserved2
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for IMAGEHLP_STACK_FRAME {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for IMAGEHLP_STACK_FRAME {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct IMAGEHLP_STATUS_REASON(pub i32);
pub const BindOutOfMemory: IMAGEHLP_STATUS_REASON = IMAGEHLP_STATUS_REASON(0i32);
pub const BindRvaToVaFailed: IMAGEHLP_STATUS_REASON = IMAGEHLP_STATUS_REASON(1i32);
pub const BindNoRoomInImage: IMAGEHLP_STATUS_REASON = IMAGEHLP_STATUS_REASON(2i32);
pub const BindImportModuleFailed: IMAGEHLP_STATUS_REASON = IMAGEHLP_STATUS_REASON(3i32);
pub const BindImportProcedureFailed: IMAGEHLP_STATUS_REASON = IMAGEHLP_STATUS_REASON(4i32);
pub const BindImportModule: IMAGEHLP_STATUS_REASON = IMAGEHLP_STATUS_REASON(5i32);
pub const BindImportProcedure: IMAGEHLP_STATUS_REASON = IMAGEHLP_STATUS_REASON(6i32);
pub const BindForwarder: IMAGEHLP_STATUS_REASON = IMAGEHLP_STATUS_REASON(7i32);
pub const BindForwarderNOT: IMAGEHLP_STATUS_REASON = IMAGEHLP_STATUS_REASON(8i32);
pub const BindImageModified: IMAGEHLP_STATUS_REASON = IMAGEHLP_STATUS_REASON(9i32);
pub const BindExpandFileHeaders: IMAGEHLP_STATUS_REASON = IMAGEHLP_STATUS_REASON(10i32);
pub const BindImageComplete: IMAGEHLP_STATUS_REASON = IMAGEHLP_STATUS_REASON(11i32);
pub const BindMismatchedSymbols: IMAGEHLP_STATUS_REASON = IMAGEHLP_STATUS_REASON(12i32);
pub const BindSymbolsNotUpdated: IMAGEHLP_STATUS_REASON = IMAGEHLP_STATUS_REASON(13i32);
pub const BindImportProcedure32: IMAGEHLP_STATUS_REASON = IMAGEHLP_STATUS_REASON(14i32);
pub const BindImportProcedure64: IMAGEHLP_STATUS_REASON = IMAGEHLP_STATUS_REASON(15i32);
pub const BindForwarder32: IMAGEHLP_STATUS_REASON = IMAGEHLP_STATUS_REASON(16i32);
pub const BindForwarder64: IMAGEHLP_STATUS_REASON = IMAGEHLP_STATUS_REASON(17i32);
pub const BindForwarderNOT32: IMAGEHLP_STATUS_REASON = IMAGEHLP_STATUS_REASON(18i32);
pub const BindForwarderNOT64: IMAGEHLP_STATUS_REASON = IMAGEHLP_STATUS_REASON(19i32);
impl ::std::convert::From<i32> for IMAGEHLP_STATUS_REASON {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for IMAGEHLP_STATUS_REASON {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct IMAGEHLP_SYMBOL {
    pub SizeOfStruct: u32,
    pub Address: u32,
    pub Size: u32,
    pub Flags: u32,
    pub MaxNameLength: u32,
    pub Name: [super::super::super::Foundation::CHAR; 1],
}
#[cfg(feature = "Win32_Foundation")]
impl IMAGEHLP_SYMBOL {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for IMAGEHLP_SYMBOL {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for IMAGEHLP_SYMBOL {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_SYMBOL").field("SizeOfStruct", &self.SizeOfStruct).field("Address", &self.Address).field("Size", &self.Size).field("Flags", &self.Flags).field("MaxNameLength", &self.MaxNameLength).field("Name", &self.Name).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for IMAGEHLP_SYMBOL {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct && self.Address == other.Address && self.Size == other.Size && self.Flags == other.Flags && self.MaxNameLength == other.MaxNameLength && self.Name == other.Name
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for IMAGEHLP_SYMBOL {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for IMAGEHLP_SYMBOL {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct IMAGEHLP_SYMBOL64 {
    pub SizeOfStruct: u32,
    pub Address: u64,
    pub Size: u32,
    pub Flags: u32,
    pub MaxNameLength: u32,
    pub Name: [super::super::super::Foundation::CHAR; 1],
}
#[cfg(feature = "Win32_Foundation")]
impl IMAGEHLP_SYMBOL64 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for IMAGEHLP_SYMBOL64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for IMAGEHLP_SYMBOL64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_SYMBOL64").field("SizeOfStruct", &self.SizeOfStruct).field("Address", &self.Address).field("Size", &self.Size).field("Flags", &self.Flags).field("MaxNameLength", &self.MaxNameLength).field("Name", &self.Name).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for IMAGEHLP_SYMBOL64 {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct && self.Address == other.Address && self.Size == other.Size && self.Flags == other.Flags && self.MaxNameLength == other.MaxNameLength && self.Name == other.Name
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for IMAGEHLP_SYMBOL64 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for IMAGEHLP_SYMBOL64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct IMAGEHLP_SYMBOL64_PACKAGE {
    pub sym: IMAGEHLP_SYMBOL64,
    pub name: [super::super::super::Foundation::CHAR; 2001],
}
#[cfg(feature = "Win32_Foundation")]
impl IMAGEHLP_SYMBOL64_PACKAGE {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for IMAGEHLP_SYMBOL64_PACKAGE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for IMAGEHLP_SYMBOL64_PACKAGE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_SYMBOL64_PACKAGE").field("sym", &self.sym).field("name", &self.name).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for IMAGEHLP_SYMBOL64_PACKAGE {
    fn eq(&self, other: &Self) -> bool {
        self.sym == other.sym && self.name == other.name
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for IMAGEHLP_SYMBOL64_PACKAGE {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for IMAGEHLP_SYMBOL64_PACKAGE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IMAGEHLP_SYMBOLW {
    pub SizeOfStruct: u32,
    pub Address: u32,
    pub Size: u32,
    pub Flags: u32,
    pub MaxNameLength: u32,
    pub Name: [u16; 1],
}
impl IMAGEHLP_SYMBOLW {}
impl ::std::default::Default for IMAGEHLP_SYMBOLW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for IMAGEHLP_SYMBOLW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_SYMBOLW").field("SizeOfStruct", &self.SizeOfStruct).field("Address", &self.Address).field("Size", &self.Size).field("Flags", &self.Flags).field("MaxNameLength", &self.MaxNameLength).field("Name", &self.Name).finish()
    }
}
impl ::std::cmp::PartialEq for IMAGEHLP_SYMBOLW {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct && self.Address == other.Address && self.Size == other.Size && self.Flags == other.Flags && self.MaxNameLength == other.MaxNameLength && self.Name == other.Name
    }
}
impl ::std::cmp::Eq for IMAGEHLP_SYMBOLW {}
unsafe impl ::windows::runtime::Abi for IMAGEHLP_SYMBOLW {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IMAGEHLP_SYMBOLW64 {
    pub SizeOfStruct: u32,
    pub Address: u64,
    pub Size: u32,
    pub Flags: u32,
    pub MaxNameLength: u32,
    pub Name: [u16; 1],
}
impl IMAGEHLP_SYMBOLW64 {}
impl ::std::default::Default for IMAGEHLP_SYMBOLW64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for IMAGEHLP_SYMBOLW64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_SYMBOLW64").field("SizeOfStruct", &self.SizeOfStruct).field("Address", &self.Address).field("Size", &self.Size).field("Flags", &self.Flags).field("MaxNameLength", &self.MaxNameLength).field("Name", &self.Name).finish()
    }
}
impl ::std::cmp::PartialEq for IMAGEHLP_SYMBOLW64 {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct && self.Address == other.Address && self.Size == other.Size && self.Flags == other.Flags && self.MaxNameLength == other.MaxNameLength && self.Name == other.Name
    }
}
impl ::std::cmp::Eq for IMAGEHLP_SYMBOLW64 {}
unsafe impl ::windows::runtime::Abi for IMAGEHLP_SYMBOLW64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IMAGEHLP_SYMBOLW64_PACKAGE {
    pub sym: IMAGEHLP_SYMBOLW64,
    pub name: [u16; 2001],
}
impl IMAGEHLP_SYMBOLW64_PACKAGE {}
impl ::std::default::Default for IMAGEHLP_SYMBOLW64_PACKAGE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for IMAGEHLP_SYMBOLW64_PACKAGE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_SYMBOLW64_PACKAGE").field("sym", &self.sym).field("name", &self.name).finish()
    }
}
impl ::std::cmp::PartialEq for IMAGEHLP_SYMBOLW64_PACKAGE {
    fn eq(&self, other: &Self) -> bool {
        self.sym == other.sym && self.name == other.name
    }
}
impl ::std::cmp::Eq for IMAGEHLP_SYMBOLW64_PACKAGE {}
unsafe impl ::windows::runtime::Abi for IMAGEHLP_SYMBOLW64_PACKAGE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IMAGEHLP_SYMBOLW_PACKAGE {
    pub sym: IMAGEHLP_SYMBOLW,
    pub name: [u16; 2001],
}
impl IMAGEHLP_SYMBOLW_PACKAGE {}
impl ::std::default::Default for IMAGEHLP_SYMBOLW_PACKAGE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for IMAGEHLP_SYMBOLW_PACKAGE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_SYMBOLW_PACKAGE").field("sym", &self.sym).field("name", &self.name).finish()
    }
}
impl ::std::cmp::PartialEq for IMAGEHLP_SYMBOLW_PACKAGE {
    fn eq(&self, other: &Self) -> bool {
        self.sym == other.sym && self.name == other.name
    }
}
impl ::std::cmp::Eq for IMAGEHLP_SYMBOLW_PACKAGE {}
unsafe impl ::windows::runtime::Abi for IMAGEHLP_SYMBOLW_PACKAGE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IMAGEHLP_SYMBOL_FUNCTION: u32 = 2048u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IMAGEHLP_SYMBOL_INFO_CONSTANT: u32 = 256u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IMAGEHLP_SYMBOL_INFO_FRAMERELATIVE: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IMAGEHLP_SYMBOL_INFO_LOCAL: u32 = 128u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IMAGEHLP_SYMBOL_INFO_PARAMETER: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IMAGEHLP_SYMBOL_INFO_REGISTER: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IMAGEHLP_SYMBOL_INFO_REGRELATIVE: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IMAGEHLP_SYMBOL_INFO_TLSRELATIVE: u32 = 16384u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IMAGEHLP_SYMBOL_INFO_VALUEPRESENT: u32 = 1u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct IMAGEHLP_SYMBOL_PACKAGE {
    pub sym: IMAGEHLP_SYMBOL,
    pub name: [super::super::super::Foundation::CHAR; 2001],
}
#[cfg(feature = "Win32_Foundation")]
impl IMAGEHLP_SYMBOL_PACKAGE {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for IMAGEHLP_SYMBOL_PACKAGE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for IMAGEHLP_SYMBOL_PACKAGE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_SYMBOL_PACKAGE").field("sym", &self.sym).field("name", &self.name).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for IMAGEHLP_SYMBOL_PACKAGE {
    fn eq(&self, other: &Self) -> bool {
        self.sym == other.sym && self.name == other.name
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for IMAGEHLP_SYMBOL_PACKAGE {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for IMAGEHLP_SYMBOL_PACKAGE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct IMAGEHLP_SYMBOL_SRC {
    pub sizeofstruct: u32,
    pub r#type: u32,
    pub file: [super::super::super::Foundation::CHAR; 260],
}
#[cfg(feature = "Win32_Foundation")]
impl IMAGEHLP_SYMBOL_SRC {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for IMAGEHLP_SYMBOL_SRC {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for IMAGEHLP_SYMBOL_SRC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGEHLP_SYMBOL_SRC").field("sizeofstruct", &self.sizeofstruct).field("r#type", &self.r#type).field("file", &self.file).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for IMAGEHLP_SYMBOL_SRC {
    fn eq(&self, other: &Self) -> bool {
        self.sizeofstruct == other.sizeofstruct && self.r#type == other.r#type && self.file == other.file
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for IMAGEHLP_SYMBOL_SRC {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for IMAGEHLP_SYMBOL_SRC {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IMAGEHLP_SYMBOL_THUNK: u32 = 8192u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct IMAGEHLP_SYMBOL_TYPE_INFO(pub i32);
pub const TI_GET_SYMTAG: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(0i32);
pub const TI_GET_SYMNAME: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(1i32);
pub const TI_GET_LENGTH: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(2i32);
pub const TI_GET_TYPE: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(3i32);
pub const TI_GET_TYPEID: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(4i32);
pub const TI_GET_BASETYPE: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(5i32);
pub const TI_GET_ARRAYINDEXTYPEID: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(6i32);
pub const TI_FINDCHILDREN: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(7i32);
pub const TI_GET_DATAKIND: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(8i32);
pub const TI_GET_ADDRESSOFFSET: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(9i32);
pub const TI_GET_OFFSET: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(10i32);
pub const TI_GET_VALUE: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(11i32);
pub const TI_GET_COUNT: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(12i32);
pub const TI_GET_CHILDRENCOUNT: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(13i32);
pub const TI_GET_BITPOSITION: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(14i32);
pub const TI_GET_VIRTUALBASECLASS: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(15i32);
pub const TI_GET_VIRTUALTABLESHAPEID: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(16i32);
pub const TI_GET_VIRTUALBASEPOINTEROFFSET: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(17i32);
pub const TI_GET_CLASSPARENTID: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(18i32);
pub const TI_GET_NESTED: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(19i32);
pub const TI_GET_SYMINDEX: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(20i32);
pub const TI_GET_LEXICALPARENT: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(21i32);
pub const TI_GET_ADDRESS: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(22i32);
pub const TI_GET_THISADJUST: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(23i32);
pub const TI_GET_UDTKIND: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(24i32);
pub const TI_IS_EQUIV_TO: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(25i32);
pub const TI_GET_CALLING_CONVENTION: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(26i32);
pub const TI_IS_CLOSE_EQUIV_TO: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(27i32);
pub const TI_GTIEX_REQS_VALID: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(28i32);
pub const TI_GET_VIRTUALBASEOFFSET: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(29i32);
pub const TI_GET_VIRTUALBASEDISPINDEX: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(30i32);
pub const TI_GET_IS_REFERENCE: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(31i32);
pub const TI_GET_INDIRECTVIRTUALBASECLASS: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(32i32);
pub const TI_GET_VIRTUALBASETABLETYPE: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(33i32);
pub const TI_GET_OBJECTPOINTERTYPE: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(34i32);
pub const IMAGEHLP_SYMBOL_TYPE_INFO_MAX: IMAGEHLP_SYMBOL_TYPE_INFO = IMAGEHLP_SYMBOL_TYPE_INFO(35i32);
impl ::std::convert::From<i32> for IMAGEHLP_SYMBOL_TYPE_INFO {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for IMAGEHLP_SYMBOL_TYPE_INFO {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IMAGEHLP_SYMBOL_VIRTUAL: u32 = 4096u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IMAGE_COFF_SYMBOLS_HEADER {
    pub NumberOfSymbols: u32,
    pub LvaToFirstSymbol: u32,
    pub NumberOfLinenumbers: u32,
    pub LvaToFirstLinenumber: u32,
    pub RvaToFirstByteOfCode: u32,
    pub RvaToLastByteOfCode: u32,
    pub RvaToFirstByteOfData: u32,
    pub RvaToLastByteOfData: u32,
}
impl IMAGE_COFF_SYMBOLS_HEADER {}
impl ::std::default::Default for IMAGE_COFF_SYMBOLS_HEADER {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for IMAGE_COFF_SYMBOLS_HEADER {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGE_COFF_SYMBOLS_HEADER")
            .field("NumberOfSymbols", &self.NumberOfSymbols)
            .field("LvaToFirstSymbol", &self.LvaToFirstSymbol)
            .field("NumberOfLinenumbers", &self.NumberOfLinenumbers)
            .field("LvaToFirstLinenumber", &self.LvaToFirstLinenumber)
            .field("RvaToFirstByteOfCode", &self.RvaToFirstByteOfCode)
            .field("RvaToLastByteOfCode", &self.RvaToLastByteOfCode)
            .field("RvaToFirstByteOfData", &self.RvaToFirstByteOfData)
            .field("RvaToLastByteOfData", &self.RvaToLastByteOfData)
            .finish()
    }
}
impl ::std::cmp::PartialEq for IMAGE_COFF_SYMBOLS_HEADER {
    fn eq(&self, other: &Self) -> bool {
        self.NumberOfSymbols == other.NumberOfSymbols && self.LvaToFirstSymbol == other.LvaToFirstSymbol && self.NumberOfLinenumbers == other.NumberOfLinenumbers && self.LvaToFirstLinenumber == other.LvaToFirstLinenumber && self.RvaToFirstByteOfCode == other.RvaToFirstByteOfCode && self.RvaToLastByteOfCode == other.RvaToLastByteOfCode && self.RvaToFirstByteOfData == other.RvaToFirstByteOfData && self.RvaToLastByteOfData == other.RvaToLastByteOfData
    }
}
impl ::std::cmp::Eq for IMAGE_COFF_SYMBOLS_HEADER {}
unsafe impl ::windows::runtime::Abi for IMAGE_COFF_SYMBOLS_HEADER {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IMAGE_DATA_DIRECTORY {
    pub VirtualAddress: u32,
    pub Size: u32,
}
impl IMAGE_DATA_DIRECTORY {}
impl ::std::default::Default for IMAGE_DATA_DIRECTORY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for IMAGE_DATA_DIRECTORY {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGE_DATA_DIRECTORY").field("VirtualAddress", &self.VirtualAddress).field("Size", &self.Size).finish()
    }
}
impl ::std::cmp::PartialEq for IMAGE_DATA_DIRECTORY {
    fn eq(&self, other: &Self) -> bool {
        self.VirtualAddress == other.VirtualAddress && self.Size == other.Size
    }
}
impl ::std::cmp::Eq for IMAGE_DATA_DIRECTORY {}
unsafe impl ::windows::runtime::Abi for IMAGE_DATA_DIRECTORY {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IMAGE_DEBUG_DIRECTORY {
    pub Characteristics: u32,
    pub TimeDateStamp: u32,
    pub MajorVersion: u16,
    pub MinorVersion: u16,
    pub Type: IMAGE_DEBUG_TYPE,
    pub SizeOfData: u32,
    pub AddressOfRawData: u32,
    pub PointerToRawData: u32,
}
impl IMAGE_DEBUG_DIRECTORY {}
impl ::std::default::Default for IMAGE_DEBUG_DIRECTORY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for IMAGE_DEBUG_DIRECTORY {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGE_DEBUG_DIRECTORY")
            .field("Characteristics", &self.Characteristics)
            .field("TimeDateStamp", &self.TimeDateStamp)
            .field("MajorVersion", &self.MajorVersion)
            .field("MinorVersion", &self.MinorVersion)
            .field("Type", &self.Type)
            .field("SizeOfData", &self.SizeOfData)
            .field("AddressOfRawData", &self.AddressOfRawData)
            .field("PointerToRawData", &self.PointerToRawData)
            .finish()
    }
}
impl ::std::cmp::PartialEq for IMAGE_DEBUG_DIRECTORY {
    fn eq(&self, other: &Self) -> bool {
        self.Characteristics == other.Characteristics && self.TimeDateStamp == other.TimeDateStamp && self.MajorVersion == other.MajorVersion && self.MinorVersion == other.MinorVersion && self.Type == other.Type && self.SizeOfData == other.SizeOfData && self.AddressOfRawData == other.AddressOfRawData && self.PointerToRawData == other.PointerToRawData
    }
}
impl ::std::cmp::Eq for IMAGE_DEBUG_DIRECTORY {}
unsafe impl ::windows::runtime::Abi for IMAGE_DEBUG_DIRECTORY {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Kernel`*"]
pub struct IMAGE_DEBUG_INFORMATION {
    pub List: super::super::Kernel::LIST_ENTRY,
    pub ReservedSize: u32,
    pub ReservedMappedBase: *mut ::std::ffi::c_void,
    pub ReservedMachine: u16,
    pub ReservedCharacteristics: u16,
    pub ReservedCheckSum: u32,
    pub ImageBase: u32,
    pub SizeOfImage: u32,
    pub ReservedNumberOfSections: u32,
    pub ReservedSections: *mut IMAGE_SECTION_HEADER,
    pub ReservedExportedNamesSize: u32,
    pub ReservedExportedNames: super::super::super::Foundation::PSTR,
    pub ReservedNumberOfFunctionTableEntries: u32,
    pub ReservedFunctionTableEntries: *mut IMAGE_FUNCTION_ENTRY,
    pub ReservedLowestFunctionStartingAddress: u32,
    pub ReservedHighestFunctionEndingAddress: u32,
    pub ReservedNumberOfFpoTableEntries: u32,
    pub ReservedFpoTableEntries: *mut FPO_DATA,
    pub SizeOfCoffSymbols: u32,
    pub CoffSymbols: *mut IMAGE_COFF_SYMBOLS_HEADER,
    pub ReservedSizeOfCodeViewSymbols: u32,
    pub ReservedCodeViewSymbols: *mut ::std::ffi::c_void,
    pub ImageFilePath: super::super::super::Foundation::PSTR,
    pub ImageFileName: super::super::super::Foundation::PSTR,
    pub ReservedDebugFilePath: super::super::super::Foundation::PSTR,
    pub ReservedTimeDateStamp: u32,
    pub ReservedRomImage: super::super::super::Foundation::BOOL,
    pub ReservedDebugDirectory: *mut IMAGE_DEBUG_DIRECTORY,
    pub ReservedNumberOfDebugDirectories: u32,
    pub ReservedOriginalFunctionTableBaseAddress: u32,
    pub Reserved: [u32; 2],
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl IMAGE_DEBUG_INFORMATION {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl ::std::default::Default for IMAGE_DEBUG_INFORMATION {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl ::std::fmt::Debug for IMAGE_DEBUG_INFORMATION {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGE_DEBUG_INFORMATION")
            .field("List", &self.List)
            .field("ReservedSize", &self.ReservedSize)
            .field("ReservedMappedBase", &self.ReservedMappedBase)
            .field("ReservedMachine", &self.ReservedMachine)
            .field("ReservedCharacteristics", &self.ReservedCharacteristics)
            .field("ReservedCheckSum", &self.ReservedCheckSum)
            .field("ImageBase", &self.ImageBase)
            .field("SizeOfImage", &self.SizeOfImage)
            .field("ReservedNumberOfSections", &self.ReservedNumberOfSections)
            .field("ReservedSections", &self.ReservedSections)
            .field("ReservedExportedNamesSize", &self.ReservedExportedNamesSize)
            .field("ReservedExportedNames", &self.ReservedExportedNames)
            .field("ReservedNumberOfFunctionTableEntries", &self.ReservedNumberOfFunctionTableEntries)
            .field("ReservedFunctionTableEntries", &self.ReservedFunctionTableEntries)
            .field("ReservedLowestFunctionStartingAddress", &self.ReservedLowestFunctionStartingAddress)
            .field("ReservedHighestFunctionEndingAddress", &self.ReservedHighestFunctionEndingAddress)
            .field("ReservedNumberOfFpoTableEntries", &self.ReservedNumberOfFpoTableEntries)
            .field("ReservedFpoTableEntries", &self.ReservedFpoTableEntries)
            .field("SizeOfCoffSymbols", &self.SizeOfCoffSymbols)
            .field("CoffSymbols", &self.CoffSymbols)
            .field("ReservedSizeOfCodeViewSymbols", &self.ReservedSizeOfCodeViewSymbols)
            .field("ReservedCodeViewSymbols", &self.ReservedCodeViewSymbols)
            .field("ImageFilePath", &self.ImageFilePath)
            .field("ImageFileName", &self.ImageFileName)
            .field("ReservedDebugFilePath", &self.ReservedDebugFilePath)
            .field("ReservedTimeDateStamp", &self.ReservedTimeDateStamp)
            .field("ReservedRomImage", &self.ReservedRomImage)
            .field("ReservedDebugDirectory", &self.ReservedDebugDirectory)
            .field("ReservedNumberOfDebugDirectories", &self.ReservedNumberOfDebugDirectories)
            .field("ReservedOriginalFunctionTableBaseAddress", &self.ReservedOriginalFunctionTableBaseAddress)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl ::std::cmp::PartialEq for IMAGE_DEBUG_INFORMATION {
    fn eq(&self, other: &Self) -> bool {
        self.List == other.List
            && self.ReservedSize == other.ReservedSize
            && self.ReservedMappedBase == other.ReservedMappedBase
            && self.ReservedMachine == other.ReservedMachine
            && self.ReservedCharacteristics == other.ReservedCharacteristics
            && self.ReservedCheckSum == other.ReservedCheckSum
            && self.ImageBase == other.ImageBase
            && self.SizeOfImage == other.SizeOfImage
            && self.ReservedNumberOfSections == other.ReservedNumberOfSections
            && self.ReservedSections == other.ReservedSections
            && self.ReservedExportedNamesSize == other.ReservedExportedNamesSize
            && self.ReservedExportedNames == other.ReservedExportedNames
            && self.ReservedNumberOfFunctionTableEntries == other.ReservedNumberOfFunctionTableEntries
            && self.ReservedFunctionTableEntries == other.ReservedFunctionTableEntries
            && self.ReservedLowestFunctionStartingAddress == other.ReservedLowestFunctionStartingAddress
            && self.ReservedHighestFunctionEndingAddress == other.ReservedHighestFunctionEndingAddress
            && self.ReservedNumberOfFpoTableEntries == other.ReservedNumberOfFpoTableEntries
            && self.ReservedFpoTableEntries == other.ReservedFpoTableEntries
            && self.SizeOfCoffSymbols == other.SizeOfCoffSymbols
            && self.CoffSymbols == other.CoffSymbols
            && self.ReservedSizeOfCodeViewSymbols == other.ReservedSizeOfCodeViewSymbols
            && self.ReservedCodeViewSymbols == other.ReservedCodeViewSymbols
            && self.ImageFilePath == other.ImageFilePath
            && self.ImageFileName == other.ImageFileName
            && self.ReservedDebugFilePath == other.ReservedDebugFilePath
            && self.ReservedTimeDateStamp == other.ReservedTimeDateStamp
            && self.ReservedRomImage == other.ReservedRomImage
            && self.ReservedDebugDirectory == other.ReservedDebugDirectory
            && self.ReservedNumberOfDebugDirectories == other.ReservedNumberOfDebugDirectories
            && self.ReservedOriginalFunctionTableBaseAddress == other.ReservedOriginalFunctionTableBaseAddress
            && self.Reserved == other.Reserved
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl ::std::cmp::Eq for IMAGE_DEBUG_INFORMATION {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
unsafe impl ::windows::runtime::Abi for IMAGE_DEBUG_INFORMATION {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct IMAGE_DEBUG_TYPE(pub u32);
pub const IMAGE_DEBUG_TYPE_UNKNOWN: IMAGE_DEBUG_TYPE = IMAGE_DEBUG_TYPE(0u32);
pub const IMAGE_DEBUG_TYPE_COFF: IMAGE_DEBUG_TYPE = IMAGE_DEBUG_TYPE(1u32);
pub const IMAGE_DEBUG_TYPE_CODEVIEW: IMAGE_DEBUG_TYPE = IMAGE_DEBUG_TYPE(2u32);
pub const IMAGE_DEBUG_TYPE_FPO: IMAGE_DEBUG_TYPE = IMAGE_DEBUG_TYPE(3u32);
pub const IMAGE_DEBUG_TYPE_MISC: IMAGE_DEBUG_TYPE = IMAGE_DEBUG_TYPE(4u32);
pub const IMAGE_DEBUG_TYPE_EXCEPTION: IMAGE_DEBUG_TYPE = IMAGE_DEBUG_TYPE(5u32);
pub const IMAGE_DEBUG_TYPE_FIXUP: IMAGE_DEBUG_TYPE = IMAGE_DEBUG_TYPE(6u32);
pub const IMAGE_DEBUG_TYPE_BORLAND: IMAGE_DEBUG_TYPE = IMAGE_DEBUG_TYPE(9u32);
impl ::std::convert::From<u32> for IMAGE_DEBUG_TYPE {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for IMAGE_DEBUG_TYPE {
    type Abi = Self;
}
impl ::std::ops::BitOr for IMAGE_DEBUG_TYPE {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for IMAGE_DEBUG_TYPE {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for IMAGE_DEBUG_TYPE {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for IMAGE_DEBUG_TYPE {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for IMAGE_DEBUG_TYPE {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct IMAGE_DIRECTORY_ENTRY(pub u32);
pub const IMAGE_DIRECTORY_ENTRY_ARCHITECTURE: IMAGE_DIRECTORY_ENTRY = IMAGE_DIRECTORY_ENTRY(7u32);
pub const IMAGE_DIRECTORY_ENTRY_BASERELOC: IMAGE_DIRECTORY_ENTRY = IMAGE_DIRECTORY_ENTRY(5u32);
pub const IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT: IMAGE_DIRECTORY_ENTRY = IMAGE_DIRECTORY_ENTRY(11u32);
pub const IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR: IMAGE_DIRECTORY_ENTRY = IMAGE_DIRECTORY_ENTRY(14u32);
pub const IMAGE_DIRECTORY_ENTRY_DEBUG: IMAGE_DIRECTORY_ENTRY = IMAGE_DIRECTORY_ENTRY(6u32);
pub const IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT: IMAGE_DIRECTORY_ENTRY = IMAGE_DIRECTORY_ENTRY(13u32);
pub const IMAGE_DIRECTORY_ENTRY_EXCEPTION: IMAGE_DIRECTORY_ENTRY = IMAGE_DIRECTORY_ENTRY(3u32);
pub const IMAGE_DIRECTORY_ENTRY_EXPORT: IMAGE_DIRECTORY_ENTRY = IMAGE_DIRECTORY_ENTRY(0u32);
pub const IMAGE_DIRECTORY_ENTRY_GLOBALPTR: IMAGE_DIRECTORY_ENTRY = IMAGE_DIRECTORY_ENTRY(8u32);
pub const IMAGE_DIRECTORY_ENTRY_IAT: IMAGE_DIRECTORY_ENTRY = IMAGE_DIRECTORY_ENTRY(12u32);
pub const IMAGE_DIRECTORY_ENTRY_IMPORT: IMAGE_DIRECTORY_ENTRY = IMAGE_DIRECTORY_ENTRY(1u32);
pub const IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG: IMAGE_DIRECTORY_ENTRY = IMAGE_DIRECTORY_ENTRY(10u32);
pub const IMAGE_DIRECTORY_ENTRY_RESOURCE: IMAGE_DIRECTORY_ENTRY = IMAGE_DIRECTORY_ENTRY(2u32);
pub const IMAGE_DIRECTORY_ENTRY_SECURITY: IMAGE_DIRECTORY_ENTRY = IMAGE_DIRECTORY_ENTRY(4u32);
pub const IMAGE_DIRECTORY_ENTRY_TLS: IMAGE_DIRECTORY_ENTRY = IMAGE_DIRECTORY_ENTRY(9u32);
impl ::std::convert::From<u32> for IMAGE_DIRECTORY_ENTRY {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for IMAGE_DIRECTORY_ENTRY {
    type Abi = Self;
}
impl ::std::ops::BitOr for IMAGE_DIRECTORY_ENTRY {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for IMAGE_DIRECTORY_ENTRY {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for IMAGE_DIRECTORY_ENTRY {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for IMAGE_DIRECTORY_ENTRY {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for IMAGE_DIRECTORY_ENTRY {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct IMAGE_DLL_CHARACTERISTICS(pub u16);
pub const IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA: IMAGE_DLL_CHARACTERISTICS = IMAGE_DLL_CHARACTERISTICS(32u16);
pub const IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE: IMAGE_DLL_CHARACTERISTICS = IMAGE_DLL_CHARACTERISTICS(64u16);
pub const IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY: IMAGE_DLL_CHARACTERISTICS = IMAGE_DLL_CHARACTERISTICS(128u16);
pub const IMAGE_DLLCHARACTERISTICS_NX_COMPAT: IMAGE_DLL_CHARACTERISTICS = IMAGE_DLL_CHARACTERISTICS(256u16);
pub const IMAGE_DLLCHARACTERISTICS_NO_ISOLATION: IMAGE_DLL_CHARACTERISTICS = IMAGE_DLL_CHARACTERISTICS(512u16);
pub const IMAGE_DLLCHARACTERISTICS_NO_SEH: IMAGE_DLL_CHARACTERISTICS = IMAGE_DLL_CHARACTERISTICS(1024u16);
pub const IMAGE_DLLCHARACTERISTICS_NO_BIND: IMAGE_DLL_CHARACTERISTICS = IMAGE_DLL_CHARACTERISTICS(2048u16);
pub const IMAGE_DLLCHARACTERISTICS_APPCONTAINER: IMAGE_DLL_CHARACTERISTICS = IMAGE_DLL_CHARACTERISTICS(4096u16);
pub const IMAGE_DLLCHARACTERISTICS_WDM_DRIVER: IMAGE_DLL_CHARACTERISTICS = IMAGE_DLL_CHARACTERISTICS(8192u16);
pub const IMAGE_DLLCHARACTERISTICS_GUARD_CF: IMAGE_DLL_CHARACTERISTICS = IMAGE_DLL_CHARACTERISTICS(16384u16);
pub const IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE: IMAGE_DLL_CHARACTERISTICS = IMAGE_DLL_CHARACTERISTICS(32768u16);
pub const IMAGE_DLLCHARACTERISTICS_EX_CET_COMPAT: IMAGE_DLL_CHARACTERISTICS = IMAGE_DLL_CHARACTERISTICS(1u16);
pub const IMAGE_DLLCHARACTERISTICS_EX_CET_COMPAT_STRICT_MODE: IMAGE_DLL_CHARACTERISTICS = IMAGE_DLL_CHARACTERISTICS(2u16);
pub const IMAGE_DLLCHARACTERISTICS_EX_CET_SET_CONTEXT_IP_VALIDATION_RELAXED_MODE: IMAGE_DLL_CHARACTERISTICS = IMAGE_DLL_CHARACTERISTICS(4u16);
pub const IMAGE_DLLCHARACTERISTICS_EX_CET_DYNAMIC_APIS_ALLOW_IN_PROC: IMAGE_DLL_CHARACTERISTICS = IMAGE_DLL_CHARACTERISTICS(8u16);
pub const IMAGE_DLLCHARACTERISTICS_EX_CET_RESERVED_1: IMAGE_DLL_CHARACTERISTICS = IMAGE_DLL_CHARACTERISTICS(16u16);
pub const IMAGE_DLLCHARACTERISTICS_EX_CET_RESERVED_2: IMAGE_DLL_CHARACTERISTICS = IMAGE_DLL_CHARACTERISTICS(32u16);
impl ::std::convert::From<u16> for IMAGE_DLL_CHARACTERISTICS {
    fn from(value: u16) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for IMAGE_DLL_CHARACTERISTICS {
    type Abi = Self;
}
impl ::std::ops::BitOr for IMAGE_DLL_CHARACTERISTICS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for IMAGE_DLL_CHARACTERISTICS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for IMAGE_DLL_CHARACTERISTICS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for IMAGE_DLL_CHARACTERISTICS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for IMAGE_DLL_CHARACTERISTICS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct IMAGE_FILE_CHARACTERISTICS(pub u16);
pub const IMAGE_FILE_RELOCS_STRIPPED: IMAGE_FILE_CHARACTERISTICS = IMAGE_FILE_CHARACTERISTICS(1u16);
pub const IMAGE_FILE_EXECUTABLE_IMAGE: IMAGE_FILE_CHARACTERISTICS = IMAGE_FILE_CHARACTERISTICS(2u16);
pub const IMAGE_FILE_LINE_NUMS_STRIPPED: IMAGE_FILE_CHARACTERISTICS = IMAGE_FILE_CHARACTERISTICS(4u16);
pub const IMAGE_FILE_LOCAL_SYMS_STRIPPED: IMAGE_FILE_CHARACTERISTICS = IMAGE_FILE_CHARACTERISTICS(8u16);
pub const IMAGE_FILE_AGGRESIVE_WS_TRIM: IMAGE_FILE_CHARACTERISTICS = IMAGE_FILE_CHARACTERISTICS(16u16);
pub const IMAGE_FILE_LARGE_ADDRESS_AWARE: IMAGE_FILE_CHARACTERISTICS = IMAGE_FILE_CHARACTERISTICS(32u16);
pub const IMAGE_FILE_BYTES_REVERSED_LO: IMAGE_FILE_CHARACTERISTICS = IMAGE_FILE_CHARACTERISTICS(128u16);
pub const IMAGE_FILE_32BIT_MACHINE: IMAGE_FILE_CHARACTERISTICS = IMAGE_FILE_CHARACTERISTICS(256u16);
pub const IMAGE_FILE_DEBUG_STRIPPED: IMAGE_FILE_CHARACTERISTICS = IMAGE_FILE_CHARACTERISTICS(512u16);
pub const IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP: IMAGE_FILE_CHARACTERISTICS = IMAGE_FILE_CHARACTERISTICS(1024u16);
pub const IMAGE_FILE_NET_RUN_FROM_SWAP: IMAGE_FILE_CHARACTERISTICS = IMAGE_FILE_CHARACTERISTICS(2048u16);
pub const IMAGE_FILE_SYSTEM: IMAGE_FILE_CHARACTERISTICS = IMAGE_FILE_CHARACTERISTICS(4096u16);
pub const IMAGE_FILE_DLL: IMAGE_FILE_CHARACTERISTICS = IMAGE_FILE_CHARACTERISTICS(8192u16);
pub const IMAGE_FILE_UP_SYSTEM_ONLY: IMAGE_FILE_CHARACTERISTICS = IMAGE_FILE_CHARACTERISTICS(16384u16);
pub const IMAGE_FILE_BYTES_REVERSED_HI: IMAGE_FILE_CHARACTERISTICS = IMAGE_FILE_CHARACTERISTICS(32768u16);
impl ::std::convert::From<u16> for IMAGE_FILE_CHARACTERISTICS {
    fn from(value: u16) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for IMAGE_FILE_CHARACTERISTICS {
    type Abi = Self;
}
impl ::std::ops::BitOr for IMAGE_FILE_CHARACTERISTICS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for IMAGE_FILE_CHARACTERISTICS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for IMAGE_FILE_CHARACTERISTICS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for IMAGE_FILE_CHARACTERISTICS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for IMAGE_FILE_CHARACTERISTICS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct IMAGE_FILE_CHARACTERISTICS2(pub u32);
pub const IMAGE_FILE_RELOCS_STRIPPED2: IMAGE_FILE_CHARACTERISTICS2 = IMAGE_FILE_CHARACTERISTICS2(1u32);
pub const IMAGE_FILE_EXECUTABLE_IMAGE2: IMAGE_FILE_CHARACTERISTICS2 = IMAGE_FILE_CHARACTERISTICS2(2u32);
pub const IMAGE_FILE_LINE_NUMS_STRIPPED2: IMAGE_FILE_CHARACTERISTICS2 = IMAGE_FILE_CHARACTERISTICS2(4u32);
pub const IMAGE_FILE_LOCAL_SYMS_STRIPPED2: IMAGE_FILE_CHARACTERISTICS2 = IMAGE_FILE_CHARACTERISTICS2(8u32);
pub const IMAGE_FILE_AGGRESIVE_WS_TRIM2: IMAGE_FILE_CHARACTERISTICS2 = IMAGE_FILE_CHARACTERISTICS2(16u32);
pub const IMAGE_FILE_LARGE_ADDRESS_AWARE2: IMAGE_FILE_CHARACTERISTICS2 = IMAGE_FILE_CHARACTERISTICS2(32u32);
pub const IMAGE_FILE_BYTES_REVERSED_LO2: IMAGE_FILE_CHARACTERISTICS2 = IMAGE_FILE_CHARACTERISTICS2(128u32);
pub const IMAGE_FILE_32BIT_MACHINE2: IMAGE_FILE_CHARACTERISTICS2 = IMAGE_FILE_CHARACTERISTICS2(256u32);
pub const IMAGE_FILE_DEBUG_STRIPPED2: IMAGE_FILE_CHARACTERISTICS2 = IMAGE_FILE_CHARACTERISTICS2(512u32);
pub const IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP2: IMAGE_FILE_CHARACTERISTICS2 = IMAGE_FILE_CHARACTERISTICS2(1024u32);
pub const IMAGE_FILE_NET_RUN_FROM_SWAP2: IMAGE_FILE_CHARACTERISTICS2 = IMAGE_FILE_CHARACTERISTICS2(2048u32);
pub const IMAGE_FILE_SYSTEM_2: IMAGE_FILE_CHARACTERISTICS2 = IMAGE_FILE_CHARACTERISTICS2(4096u32);
pub const IMAGE_FILE_DLL_2: IMAGE_FILE_CHARACTERISTICS2 = IMAGE_FILE_CHARACTERISTICS2(8192u32);
pub const IMAGE_FILE_UP_SYSTEM_ONLY_2: IMAGE_FILE_CHARACTERISTICS2 = IMAGE_FILE_CHARACTERISTICS2(16384u32);
pub const IMAGE_FILE_BYTES_REVERSED_HI_2: IMAGE_FILE_CHARACTERISTICS2 = IMAGE_FILE_CHARACTERISTICS2(32768u32);
impl ::std::convert::From<u32> for IMAGE_FILE_CHARACTERISTICS2 {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for IMAGE_FILE_CHARACTERISTICS2 {
    type Abi = Self;
}
impl ::std::ops::BitOr for IMAGE_FILE_CHARACTERISTICS2 {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for IMAGE_FILE_CHARACTERISTICS2 {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for IMAGE_FILE_CHARACTERISTICS2 {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for IMAGE_FILE_CHARACTERISTICS2 {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for IMAGE_FILE_CHARACTERISTICS2 {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IMAGE_FILE_HEADER {
    pub Machine: IMAGE_FILE_MACHINE,
    pub NumberOfSections: u16,
    pub TimeDateStamp: u32,
    pub PointerToSymbolTable: u32,
    pub NumberOfSymbols: u32,
    pub SizeOfOptionalHeader: u16,
    pub Characteristics: IMAGE_FILE_CHARACTERISTICS,
}
impl IMAGE_FILE_HEADER {}
impl ::std::default::Default for IMAGE_FILE_HEADER {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for IMAGE_FILE_HEADER {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGE_FILE_HEADER")
            .field("Machine", &self.Machine)
            .field("NumberOfSections", &self.NumberOfSections)
            .field("TimeDateStamp", &self.TimeDateStamp)
            .field("PointerToSymbolTable", &self.PointerToSymbolTable)
            .field("NumberOfSymbols", &self.NumberOfSymbols)
            .field("SizeOfOptionalHeader", &self.SizeOfOptionalHeader)
            .field("Characteristics", &self.Characteristics)
            .finish()
    }
}
impl ::std::cmp::PartialEq for IMAGE_FILE_HEADER {
    fn eq(&self, other: &Self) -> bool {
        self.Machine == other.Machine && self.NumberOfSections == other.NumberOfSections && self.TimeDateStamp == other.TimeDateStamp && self.PointerToSymbolTable == other.PointerToSymbolTable && self.NumberOfSymbols == other.NumberOfSymbols && self.SizeOfOptionalHeader == other.SizeOfOptionalHeader && self.Characteristics == other.Characteristics
    }
}
impl ::std::cmp::Eq for IMAGE_FILE_HEADER {}
unsafe impl ::windows::runtime::Abi for IMAGE_FILE_HEADER {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct IMAGE_FILE_MACHINE(pub u16);
pub const IMAGE_FILE_MACHINE_AXP64: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(644u16);
pub const IMAGE_FILE_MACHINE_I386: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(332u16);
pub const IMAGE_FILE_MACHINE_IA64: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(512u16);
pub const IMAGE_FILE_MACHINE_AMD64: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(34404u16);
pub const IMAGE_FILE_MACHINE_UNKNOWN: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(0u16);
pub const IMAGE_FILE_MACHINE_TARGET_HOST: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(1u16);
pub const IMAGE_FILE_MACHINE_R3000: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(354u16);
pub const IMAGE_FILE_MACHINE_R4000: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(358u16);
pub const IMAGE_FILE_MACHINE_R10000: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(360u16);
pub const IMAGE_FILE_MACHINE_WCEMIPSV2: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(361u16);
pub const IMAGE_FILE_MACHINE_ALPHA: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(388u16);
pub const IMAGE_FILE_MACHINE_SH3: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(418u16);
pub const IMAGE_FILE_MACHINE_SH3DSP: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(419u16);
pub const IMAGE_FILE_MACHINE_SH3E: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(420u16);
pub const IMAGE_FILE_MACHINE_SH4: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(422u16);
pub const IMAGE_FILE_MACHINE_SH5: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(424u16);
pub const IMAGE_FILE_MACHINE_ARM: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(448u16);
pub const IMAGE_FILE_MACHINE_THUMB: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(450u16);
pub const IMAGE_FILE_MACHINE_ARMNT: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(452u16);
pub const IMAGE_FILE_MACHINE_AM33: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(467u16);
pub const IMAGE_FILE_MACHINE_POWERPC: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(496u16);
pub const IMAGE_FILE_MACHINE_POWERPCFP: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(497u16);
pub const IMAGE_FILE_MACHINE_MIPS16: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(614u16);
pub const IMAGE_FILE_MACHINE_ALPHA64: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(644u16);
pub const IMAGE_FILE_MACHINE_MIPSFPU: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(870u16);
pub const IMAGE_FILE_MACHINE_MIPSFPU16: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(1126u16);
pub const IMAGE_FILE_MACHINE_TRICORE: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(1312u16);
pub const IMAGE_FILE_MACHINE_CEF: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(3311u16);
pub const IMAGE_FILE_MACHINE_EBC: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(3772u16);
pub const IMAGE_FILE_MACHINE_M32R: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(36929u16);
pub const IMAGE_FILE_MACHINE_ARM64: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(43620u16);
pub const IMAGE_FILE_MACHINE_CEE: IMAGE_FILE_MACHINE = IMAGE_FILE_MACHINE(49390u16);
impl ::std::convert::From<u16> for IMAGE_FILE_MACHINE {
    fn from(value: u16) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for IMAGE_FILE_MACHINE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IMAGE_FUNCTION_ENTRY {
    pub StartingAddress: u32,
    pub EndingAddress: u32,
    pub EndOfPrologue: u32,
}
impl IMAGE_FUNCTION_ENTRY {}
impl ::std::default::Default for IMAGE_FUNCTION_ENTRY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for IMAGE_FUNCTION_ENTRY {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGE_FUNCTION_ENTRY").field("StartingAddress", &self.StartingAddress).field("EndingAddress", &self.EndingAddress).field("EndOfPrologue", &self.EndOfPrologue).finish()
    }
}
impl ::std::cmp::PartialEq for IMAGE_FUNCTION_ENTRY {
    fn eq(&self, other: &Self) -> bool {
        self.StartingAddress == other.StartingAddress && self.EndingAddress == other.EndingAddress && self.EndOfPrologue == other.EndOfPrologue
    }
}
impl ::std::cmp::Eq for IMAGE_FUNCTION_ENTRY {}
unsafe impl ::windows::runtime::Abi for IMAGE_FUNCTION_ENTRY {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IMAGE_FUNCTION_ENTRY64 {
    pub StartingAddress: u64,
    pub EndingAddress: u64,
    pub Anonymous: IMAGE_FUNCTION_ENTRY64_0,
}
impl IMAGE_FUNCTION_ENTRY64 {}
impl ::std::default::Default for IMAGE_FUNCTION_ENTRY64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for IMAGE_FUNCTION_ENTRY64 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for IMAGE_FUNCTION_ENTRY64 {}
unsafe impl ::windows::runtime::Abi for IMAGE_FUNCTION_ENTRY64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union IMAGE_FUNCTION_ENTRY64_0 {
    pub EndOfPrologue: u64,
    pub UnwindInfoAddress: u64,
}
impl IMAGE_FUNCTION_ENTRY64_0 {}
impl ::std::default::Default for IMAGE_FUNCTION_ENTRY64_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for IMAGE_FUNCTION_ENTRY64_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for IMAGE_FUNCTION_ENTRY64_0 {}
unsafe impl ::windows::runtime::Abi for IMAGE_FUNCTION_ENTRY64_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_System_SystemServices")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_SystemServices`*"]
pub struct IMAGE_LOAD_CONFIG_DIRECTORY32 {
    pub Size: u32,
    pub TimeDateStamp: u32,
    pub MajorVersion: u16,
    pub MinorVersion: u16,
    pub GlobalFlagsClear: u32,
    pub GlobalFlagsSet: u32,
    pub CriticalSectionDefaultTimeout: u32,
    pub DeCommitFreeBlockThreshold: u32,
    pub DeCommitTotalFreeThreshold: u32,
    pub LockPrefixTable: u32,
    pub MaximumAllocationSize: u32,
    pub VirtualMemoryThreshold: u32,
    pub ProcessHeapFlags: u32,
    pub ProcessAffinityMask: u32,
    pub CSDVersion: u16,
    pub DependentLoadFlags: u16,
    pub EditList: u32,
    pub SecurityCookie: u32,
    pub SEHandlerTable: u32,
    pub SEHandlerCount: u32,
    pub GuardCFCheckFunctionPointer: u32,
    pub GuardCFDispatchFunctionPointer: u32,
    pub GuardCFFunctionTable: u32,
    pub GuardCFFunctionCount: u32,
    pub GuardFlags: u32,
    pub CodeIntegrity: super::super::SystemServices::IMAGE_LOAD_CONFIG_CODE_INTEGRITY,
    pub GuardAddressTakenIatEntryTable: u32,
    pub GuardAddressTakenIatEntryCount: u32,
    pub GuardLongJumpTargetTable: u32,
    pub GuardLongJumpTargetCount: u32,
    pub DynamicValueRelocTable: u32,
    pub CHPEMetadataPointer: u32,
    pub GuardRFFailureRoutine: u32,
    pub GuardRFFailureRoutineFunctionPointer: u32,
    pub DynamicValueRelocTableOffset: u32,
    pub DynamicValueRelocTableSection: u16,
    pub Reserved2: u16,
    pub GuardRFVerifyStackPointerFunctionPointer: u32,
    pub HotPatchTableOffset: u32,
    pub Reserved3: u32,
    pub EnclaveConfigurationPointer: u32,
    pub VolatileMetadataPointer: u32,
    pub GuardEHContinuationTable: u32,
    pub GuardEHContinuationCount: u32,
    pub GuardXFGCheckFunctionPointer: u32,
    pub GuardXFGDispatchFunctionPointer: u32,
    pub GuardXFGTableDispatchFunctionPointer: u32,
    pub CastGuardOsDeterminedFailureMode: u32,
}
#[cfg(feature = "Win32_System_SystemServices")]
impl IMAGE_LOAD_CONFIG_DIRECTORY32 {}
#[cfg(feature = "Win32_System_SystemServices")]
impl ::std::default::Default for IMAGE_LOAD_CONFIG_DIRECTORY32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_SystemServices")]
impl ::std::fmt::Debug for IMAGE_LOAD_CONFIG_DIRECTORY32 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGE_LOAD_CONFIG_DIRECTORY32")
            .field("Size", &self.Size)
            .field("TimeDateStamp", &self.TimeDateStamp)
            .field("MajorVersion", &self.MajorVersion)
            .field("MinorVersion", &self.MinorVersion)
            .field("GlobalFlagsClear", &self.GlobalFlagsClear)
            .field("GlobalFlagsSet", &self.GlobalFlagsSet)
            .field("CriticalSectionDefaultTimeout", &self.CriticalSectionDefaultTimeout)
            .field("DeCommitFreeBlockThreshold", &self.DeCommitFreeBlockThreshold)
            .field("DeCommitTotalFreeThreshold", &self.DeCommitTotalFreeThreshold)
            .field("LockPrefixTable", &self.LockPrefixTable)
            .field("MaximumAllocationSize", &self.MaximumAllocationSize)
            .field("VirtualMemoryThreshold", &self.VirtualMemoryThreshold)
            .field("ProcessHeapFlags", &self.ProcessHeapFlags)
            .field("ProcessAffinityMask", &self.ProcessAffinityMask)
            .field("CSDVersion", &self.CSDVersion)
            .field("DependentLoadFlags", &self.DependentLoadFlags)
            .field("EditList", &self.EditList)
            .field("SecurityCookie", &self.SecurityCookie)
            .field("SEHandlerTable", &self.SEHandlerTable)
            .field("SEHandlerCount", &self.SEHandlerCount)
            .field("GuardCFCheckFunctionPointer", &self.GuardCFCheckFunctionPointer)
            .field("GuardCFDispatchFunctionPointer", &self.GuardCFDispatchFunctionPointer)
            .field("GuardCFFunctionTable", &self.GuardCFFunctionTable)
            .field("GuardCFFunctionCount", &self.GuardCFFunctionCount)
            .field("GuardFlags", &self.GuardFlags)
            .field("CodeIntegrity", &self.CodeIntegrity)
            .field("GuardAddressTakenIatEntryTable", &self.GuardAddressTakenIatEntryTable)
            .field("GuardAddressTakenIatEntryCount", &self.GuardAddressTakenIatEntryCount)
            .field("GuardLongJumpTargetTable", &self.GuardLongJumpTargetTable)
            .field("GuardLongJumpTargetCount", &self.GuardLongJumpTargetCount)
            .field("DynamicValueRelocTable", &self.DynamicValueRelocTable)
            .field("CHPEMetadataPointer", &self.CHPEMetadataPointer)
            .field("GuardRFFailureRoutine", &self.GuardRFFailureRoutine)
            .field("GuardRFFailureRoutineFunctionPointer", &self.GuardRFFailureRoutineFunctionPointer)
            .field("DynamicValueRelocTableOffset", &self.DynamicValueRelocTableOffset)
            .field("DynamicValueRelocTableSection", &self.DynamicValueRelocTableSection)
            .field("Reserved2", &self.Reserved2)
            .field("GuardRFVerifyStackPointerFunctionPointer", &self.GuardRFVerifyStackPointerFunctionPointer)
            .field("HotPatchTableOffset", &self.HotPatchTableOffset)
            .field("Reserved3", &self.Reserved3)
            .field("EnclaveConfigurationPointer", &self.EnclaveConfigurationPointer)
            .field("VolatileMetadataPointer", &self.VolatileMetadataPointer)
            .field("GuardEHContinuationTable", &self.GuardEHContinuationTable)
            .field("GuardEHContinuationCount", &self.GuardEHContinuationCount)
            .field("GuardXFGCheckFunctionPointer", &self.GuardXFGCheckFunctionPointer)
            .field("GuardXFGDispatchFunctionPointer", &self.GuardXFGDispatchFunctionPointer)
            .field("GuardXFGTableDispatchFunctionPointer", &self.GuardXFGTableDispatchFunctionPointer)
            .field("CastGuardOsDeterminedFailureMode", &self.CastGuardOsDeterminedFailureMode)
            .finish()
    }
}
#[cfg(feature = "Win32_System_SystemServices")]
impl ::std::cmp::PartialEq for IMAGE_LOAD_CONFIG_DIRECTORY32 {
    fn eq(&self, other: &Self) -> bool {
        self.Size == other.Size
            && self.TimeDateStamp == other.TimeDateStamp
            && self.MajorVersion == other.MajorVersion
            && self.MinorVersion == other.MinorVersion
            && self.GlobalFlagsClear == other.GlobalFlagsClear
            && self.GlobalFlagsSet == other.GlobalFlagsSet
            && self.CriticalSectionDefaultTimeout == other.CriticalSectionDefaultTimeout
            && self.DeCommitFreeBlockThreshold == other.DeCommitFreeBlockThreshold
            && self.DeCommitTotalFreeThreshold == other.DeCommitTotalFreeThreshold
            && self.LockPrefixTable == other.LockPrefixTable
            && self.MaximumAllocationSize == other.MaximumAllocationSize
            && self.VirtualMemoryThreshold == other.VirtualMemoryThreshold
            && self.ProcessHeapFlags == other.ProcessHeapFlags
            && self.ProcessAffinityMask == other.ProcessAffinityMask
            && self.CSDVersion == other.CSDVersion
            && self.DependentLoadFlags == other.DependentLoadFlags
            && self.EditList == other.EditList
            && self.SecurityCookie == other.SecurityCookie
            && self.SEHandlerTable == other.SEHandlerTable
            && self.SEHandlerCount == other.SEHandlerCount
            && self.GuardCFCheckFunctionPointer == other.GuardCFCheckFunctionPointer
            && self.GuardCFDispatchFunctionPointer == other.GuardCFDispatchFunctionPointer
            && self.GuardCFFunctionTable == other.GuardCFFunctionTable
            && self.GuardCFFunctionCount == other.GuardCFFunctionCount
            && self.GuardFlags == other.GuardFlags
            && self.CodeIntegrity == other.CodeIntegrity
            && self.GuardAddressTakenIatEntryTable == other.GuardAddressTakenIatEntryTable
            && self.GuardAddressTakenIatEntryCount == other.GuardAddressTakenIatEntryCount
            && self.GuardLongJumpTargetTable == other.GuardLongJumpTargetTable
            && self.GuardLongJumpTargetCount == other.GuardLongJumpTargetCount
            && self.DynamicValueRelocTable == other.DynamicValueRelocTable
            && self.CHPEMetadataPointer == other.CHPEMetadataPointer
            && self.GuardRFFailureRoutine == other.GuardRFFailureRoutine
            && self.GuardRFFailureRoutineFunctionPointer == other.GuardRFFailureRoutineFunctionPointer
            && self.DynamicValueRelocTableOffset == other.DynamicValueRelocTableOffset
            && self.DynamicValueRelocTableSection == other.DynamicValueRelocTableSection
            && self.Reserved2 == other.Reserved2
            && self.GuardRFVerifyStackPointerFunctionPointer == other.GuardRFVerifyStackPointerFunctionPointer
            && self.HotPatchTableOffset == other.HotPatchTableOffset
            && self.Reserved3 == other.Reserved3
            && self.EnclaveConfigurationPointer == other.EnclaveConfigurationPointer
            && self.VolatileMetadataPointer == other.VolatileMetadataPointer
            && self.GuardEHContinuationTable == other.GuardEHContinuationTable
            && self.GuardEHContinuationCount == other.GuardEHContinuationCount
            && self.GuardXFGCheckFunctionPointer == other.GuardXFGCheckFunctionPointer
            && self.GuardXFGDispatchFunctionPointer == other.GuardXFGDispatchFunctionPointer
            && self.GuardXFGTableDispatchFunctionPointer == other.GuardXFGTableDispatchFunctionPointer
            && self.CastGuardOsDeterminedFailureMode == other.CastGuardOsDeterminedFailureMode
    }
}
#[cfg(feature = "Win32_System_SystemServices")]
impl ::std::cmp::Eq for IMAGE_LOAD_CONFIG_DIRECTORY32 {}
#[cfg(feature = "Win32_System_SystemServices")]
unsafe impl ::windows::runtime::Abi for IMAGE_LOAD_CONFIG_DIRECTORY32 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[cfg(feature = "Win32_System_SystemServices")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_SystemServices`*"]
pub struct IMAGE_LOAD_CONFIG_DIRECTORY64 {
    pub Size: u32,
    pub TimeDateStamp: u32,
    pub MajorVersion: u16,
    pub MinorVersion: u16,
    pub GlobalFlagsClear: u32,
    pub GlobalFlagsSet: u32,
    pub CriticalSectionDefaultTimeout: u32,
    pub DeCommitFreeBlockThreshold: u64,
    pub DeCommitTotalFreeThreshold: u64,
    pub LockPrefixTable: u64,
    pub MaximumAllocationSize: u64,
    pub VirtualMemoryThreshold: u64,
    pub ProcessAffinityMask: u64,
    pub ProcessHeapFlags: u32,
    pub CSDVersion: u16,
    pub DependentLoadFlags: u16,
    pub EditList: u64,
    pub SecurityCookie: u64,
    pub SEHandlerTable: u64,
    pub SEHandlerCount: u64,
    pub GuardCFCheckFunctionPointer: u64,
    pub GuardCFDispatchFunctionPointer: u64,
    pub GuardCFFunctionTable: u64,
    pub GuardCFFunctionCount: u64,
    pub GuardFlags: u32,
    pub CodeIntegrity: super::super::SystemServices::IMAGE_LOAD_CONFIG_CODE_INTEGRITY,
    pub GuardAddressTakenIatEntryTable: u64,
    pub GuardAddressTakenIatEntryCount: u64,
    pub GuardLongJumpTargetTable: u64,
    pub GuardLongJumpTargetCount: u64,
    pub DynamicValueRelocTable: u64,
    pub CHPEMetadataPointer: u64,
    pub GuardRFFailureRoutine: u64,
    pub GuardRFFailureRoutineFunctionPointer: u64,
    pub DynamicValueRelocTableOffset: u32,
    pub DynamicValueRelocTableSection: u16,
    pub Reserved2: u16,
    pub GuardRFVerifyStackPointerFunctionPointer: u64,
    pub HotPatchTableOffset: u32,
    pub Reserved3: u32,
    pub EnclaveConfigurationPointer: u64,
    pub VolatileMetadataPointer: u64,
    pub GuardEHContinuationTable: u64,
    pub GuardEHContinuationCount: u64,
    pub GuardXFGCheckFunctionPointer: u64,
    pub GuardXFGDispatchFunctionPointer: u64,
    pub GuardXFGTableDispatchFunctionPointer: u64,
    pub CastGuardOsDeterminedFailureMode: u64,
}
#[cfg(feature = "Win32_System_SystemServices")]
impl IMAGE_LOAD_CONFIG_DIRECTORY64 {}
#[cfg(feature = "Win32_System_SystemServices")]
impl ::std::default::Default for IMAGE_LOAD_CONFIG_DIRECTORY64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_SystemServices")]
impl ::std::cmp::PartialEq for IMAGE_LOAD_CONFIG_DIRECTORY64 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_System_SystemServices")]
impl ::std::cmp::Eq for IMAGE_LOAD_CONFIG_DIRECTORY64 {}
#[cfg(feature = "Win32_System_SystemServices")]
unsafe impl ::windows::runtime::Abi for IMAGE_LOAD_CONFIG_DIRECTORY64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IMAGE_NT_HEADERS32 {
    pub Signature: u32,
    pub FileHeader: IMAGE_FILE_HEADER,
    pub OptionalHeader: IMAGE_OPTIONAL_HEADER32,
}
impl IMAGE_NT_HEADERS32 {}
impl ::std::default::Default for IMAGE_NT_HEADERS32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for IMAGE_NT_HEADERS32 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGE_NT_HEADERS32").field("Signature", &self.Signature).field("FileHeader", &self.FileHeader).field("OptionalHeader", &self.OptionalHeader).finish()
    }
}
impl ::std::cmp::PartialEq for IMAGE_NT_HEADERS32 {
    fn eq(&self, other: &Self) -> bool {
        self.Signature == other.Signature && self.FileHeader == other.FileHeader && self.OptionalHeader == other.OptionalHeader
    }
}
impl ::std::cmp::Eq for IMAGE_NT_HEADERS32 {}
unsafe impl ::windows::runtime::Abi for IMAGE_NT_HEADERS32 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IMAGE_NT_HEADERS64 {
    pub Signature: u32,
    pub FileHeader: IMAGE_FILE_HEADER,
    pub OptionalHeader: IMAGE_OPTIONAL_HEADER64,
}
impl IMAGE_NT_HEADERS64 {}
impl ::std::default::Default for IMAGE_NT_HEADERS64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for IMAGE_NT_HEADERS64 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for IMAGE_NT_HEADERS64 {}
unsafe impl ::windows::runtime::Abi for IMAGE_NT_HEADERS64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IMAGE_OPTIONAL_HEADER32 {
    pub Magic: IMAGE_OPTIONAL_HEADER_MAGIC,
    pub MajorLinkerVersion: u8,
    pub MinorLinkerVersion: u8,
    pub SizeOfCode: u32,
    pub SizeOfInitializedData: u32,
    pub SizeOfUninitializedData: u32,
    pub AddressOfEntryPoint: u32,
    pub BaseOfCode: u32,
    pub BaseOfData: u32,
    pub ImageBase: u32,
    pub SectionAlignment: u32,
    pub FileAlignment: u32,
    pub MajorOperatingSystemVersion: u16,
    pub MinorOperatingSystemVersion: u16,
    pub MajorImageVersion: u16,
    pub MinorImageVersion: u16,
    pub MajorSubsystemVersion: u16,
    pub MinorSubsystemVersion: u16,
    pub Win32VersionValue: u32,
    pub SizeOfImage: u32,
    pub SizeOfHeaders: u32,
    pub CheckSum: u32,
    pub Subsystem: IMAGE_SUBSYSTEM,
    pub DllCharacteristics: IMAGE_DLL_CHARACTERISTICS,
    pub SizeOfStackReserve: u32,
    pub SizeOfStackCommit: u32,
    pub SizeOfHeapReserve: u32,
    pub SizeOfHeapCommit: u32,
    pub LoaderFlags: u32,
    pub NumberOfRvaAndSizes: u32,
    pub DataDirectory: [IMAGE_DATA_DIRECTORY; 16],
}
impl IMAGE_OPTIONAL_HEADER32 {}
impl ::std::default::Default for IMAGE_OPTIONAL_HEADER32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for IMAGE_OPTIONAL_HEADER32 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IMAGE_OPTIONAL_HEADER32")
            .field("Magic", &self.Magic)
            .field("MajorLinkerVersion", &self.MajorLinkerVersion)
            .field("MinorLinkerVersion", &self.MinorLinkerVersion)
            .field("SizeOfCode", &self.SizeOfCode)
            .field("SizeOfInitializedData", &self.SizeOfInitializedData)
            .field("SizeOfUninitializedData", &self.SizeOfUninitializedData)
            .field("AddressOfEntryPoint", &self.AddressOfEntryPoint)
            .field("BaseOfCode", &self.BaseOfCode)
            .field("BaseOfData", &self.BaseOfData)
            .field("ImageBase", &self.ImageBase)
            .field("SectionAlignment", &self.SectionAlignment)
            .field("FileAlignment", &self.FileAlignment)
            .field("MajorOperatingSystemVersion", &self.MajorOperatingSystemVersion)
            .field("MinorOperatingSystemVersion", &self.MinorOperatingSystemVersion)
            .field("MajorImageVersion", &self.MajorImageVersion)
            .field("MinorImageVersion", &self.MinorImageVersion)
            .field("MajorSubsystemVersion", &self.MajorSubsystemVersion)
            .field("MinorSubsystemVersion", &self.MinorSubsystemVersion)
            .field("Win32VersionValue", &self.Win32VersionValue)
            .field("SizeOfImage", &self.SizeOfImage)
            .field("SizeOfHeaders", &self.SizeOfHeaders)
            .field("CheckSum", &self.CheckSum)
            .field("Subsystem", &self.Subsystem)
            .field("DllCharacteristics", &self.DllCharacteristics)
            .field("SizeOfStackReserve", &self.SizeOfStackReserve)
            .field("SizeOfStackCommit", &self.SizeOfStackCommit)
            .field("SizeOfHeapReserve", &self.SizeOfHeapReserve)
            .field("SizeOfHeapCommit", &self.SizeOfHeapCommit)
            .field("LoaderFlags", &self.LoaderFlags)
            .field("NumberOfRvaAndSizes", &self.NumberOfRvaAndSizes)
            .field("DataDirectory", &self.DataDirectory)
            .finish()
    }
}
impl ::std::cmp::PartialEq for IMAGE_OPTIONAL_HEADER32 {
    fn eq(&self, other: &Self) -> bool {
        self.Magic == other.Magic
            && self.MajorLinkerVersion == other.MajorLinkerVersion
            && self.MinorLinkerVersion == other.MinorLinkerVersion
            && self.SizeOfCode == other.SizeOfCode
            && self.SizeOfInitializedData == other.SizeOfInitializedData
            && self.SizeOfUninitializedData == other.SizeOfUninitializedData
            && self.AddressOfEntryPoint == other.AddressOfEntryPoint
            && self.BaseOfCode == other.BaseOfCode
            && self.BaseOfData == other.BaseOfData
            && self.ImageBase == other.ImageBase
            && self.SectionAlignment == other.SectionAlignment
            && self.FileAlignment == other.FileAlignment
            && self.MajorOperatingSystemVersion == other.MajorOperatingSystemVersion
            && self.MinorOperatingSystemVersion == other.MinorOperatingSystemVersion
            && self.MajorImageVersion == other.MajorImageVersion
            && self.MinorImageVersion == other.MinorImageVersion
            && self.MajorSubsystemVersion == other.MajorSubsystemVersion
            && self.MinorSubsystemVersion == other.MinorSubsystemVersion
            && self.Win32VersionValue == other.Win32VersionValue
            && self.SizeOfImage == other.SizeOfImage
            && self.SizeOfHeaders == other.SizeOfHeaders
            && self.CheckSum == other.CheckSum
            && self.Subsystem == other.Subsystem
            && self.DllCharacteristics == other.DllCharacteristics
            && self.SizeOfStackReserve == other.SizeOfStackReserve
            && self.SizeOfStackCommit == other.SizeOfStackCommit
            && self.SizeOfHeapReserve == other.SizeOfHeapReserve
            && self.SizeOfHeapCommit == other.SizeOfHeapCommit
            && self.LoaderFlags == other.LoaderFlags
            && self.NumberOfRvaAndSizes == other.NumberOfRvaAndSizes
            && self.DataDirectory == other.DataDirectory
    }
}
impl ::std::cmp::Eq for IMAGE_OPTIONAL_HEADER32 {}
unsafe impl ::windows::runtime::Abi for IMAGE_OPTIONAL_HEADER32 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IMAGE_OPTIONAL_HEADER64 {
    pub Magic: IMAGE_OPTIONAL_HEADER_MAGIC,
    pub MajorLinkerVersion: u8,
    pub MinorLinkerVersion: u8,
    pub SizeOfCode: u32,
    pub SizeOfInitializedData: u32,
    pub SizeOfUninitializedData: u32,
    pub AddressOfEntryPoint: u32,
    pub BaseOfCode: u32,
    pub ImageBase: u64,
    pub SectionAlignment: u32,
    pub FileAlignment: u32,
    pub MajorOperatingSystemVersion: u16,
    pub MinorOperatingSystemVersion: u16,
    pub MajorImageVersion: u16,
    pub MinorImageVersion: u16,
    pub MajorSubsystemVersion: u16,
    pub MinorSubsystemVersion: u16,
    pub Win32VersionValue: u32,
    pub SizeOfImage: u32,
    pub SizeOfHeaders: u32,
    pub CheckSum: u32,
    pub Subsystem: IMAGE_SUBSYSTEM,
    pub DllCharacteristics: IMAGE_DLL_CHARACTERISTICS,
    pub SizeOfStackReserve: u64,
    pub SizeOfStackCommit: u64,
    pub SizeOfHeapReserve: u64,
    pub SizeOfHeapCommit: u64,
    pub LoaderFlags: u32,
    pub NumberOfRvaAndSizes: u32,
    pub DataDirectory: [IMAGE_DATA_DIRECTORY; 16],
}
impl IMAGE_OPTIONAL_HEADER64 {}
impl ::std::default::Default for IMAGE_OPTIONAL_HEADER64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for IMAGE_OPTIONAL_HEADER64 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for IMAGE_OPTIONAL_HEADER64 {}
unsafe impl ::windows::runtime::Abi for IMAGE_OPTIONAL_HEADER64 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct IMAGE_OPTIONAL_HEADER_MAGIC(pub u16);
pub const IMAGE_NT_OPTIONAL_HDR_MAGIC: IMAGE_OPTIONAL_HEADER_MAGIC = IMAGE_OPTIONAL_HEADER_MAGIC(523u16);
pub const IMAGE_NT_OPTIONAL_HDR32_MAGIC: IMAGE_OPTIONAL_HEADER_MAGIC = IMAGE_OPTIONAL_HEADER_MAGIC(267u16);
pub const IMAGE_NT_OPTIONAL_HDR64_MAGIC: IMAGE_OPTIONAL_HEADER_MAGIC = IMAGE_OPTIONAL_HEADER_MAGIC(523u16);
pub const IMAGE_ROM_OPTIONAL_HDR_MAGIC: IMAGE_OPTIONAL_HEADER_MAGIC = IMAGE_OPTIONAL_HEADER_MAGIC(263u16);
impl ::std::convert::From<u16> for IMAGE_OPTIONAL_HEADER_MAGIC {
    fn from(value: u16) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for IMAGE_OPTIONAL_HEADER_MAGIC {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct IMAGE_SECTION_CHARACTERISTICS(pub u32);
pub const IMAGE_SCN_TYPE_NO_PAD: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(8u32);
pub const IMAGE_SCN_CNT_CODE: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(32u32);
pub const IMAGE_SCN_CNT_INITIALIZED_DATA: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(64u32);
pub const IMAGE_SCN_CNT_UNINITIALIZED_DATA: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(128u32);
pub const IMAGE_SCN_LNK_OTHER: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(256u32);
pub const IMAGE_SCN_LNK_INFO: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(512u32);
pub const IMAGE_SCN_LNK_REMOVE: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(2048u32);
pub const IMAGE_SCN_LNK_COMDAT: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(4096u32);
pub const IMAGE_SCN_NO_DEFER_SPEC_EXC: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(16384u32);
pub const IMAGE_SCN_GPREL: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(32768u32);
pub const IMAGE_SCN_MEM_FARDATA: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(32768u32);
pub const IMAGE_SCN_MEM_PURGEABLE: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(131072u32);
pub const IMAGE_SCN_MEM_16BIT: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(131072u32);
pub const IMAGE_SCN_MEM_LOCKED: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(262144u32);
pub const IMAGE_SCN_MEM_PRELOAD: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(524288u32);
pub const IMAGE_SCN_ALIGN_1BYTES: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(1048576u32);
pub const IMAGE_SCN_ALIGN_2BYTES: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(2097152u32);
pub const IMAGE_SCN_ALIGN_4BYTES: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(3145728u32);
pub const IMAGE_SCN_ALIGN_8BYTES: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(4194304u32);
pub const IMAGE_SCN_ALIGN_16BYTES: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(5242880u32);
pub const IMAGE_SCN_ALIGN_32BYTES: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(6291456u32);
pub const IMAGE_SCN_ALIGN_64BYTES: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(7340032u32);
pub const IMAGE_SCN_ALIGN_128BYTES: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(8388608u32);
pub const IMAGE_SCN_ALIGN_256BYTES: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(9437184u32);
pub const IMAGE_SCN_ALIGN_512BYTES: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(10485760u32);
pub const IMAGE_SCN_ALIGN_1024BYTES: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(11534336u32);
pub const IMAGE_SCN_ALIGN_2048BYTES: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(12582912u32);
pub const IMAGE_SCN_ALIGN_4096BYTES: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(13631488u32);
pub const IMAGE_SCN_ALIGN_8192BYTES: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(14680064u32);
pub const IMAGE_SCN_ALIGN_MASK: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(15728640u32);
pub const IMAGE_SCN_LNK_NRELOC_OVFL: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(16777216u32);
pub const IMAGE_SCN_MEM_DISCARDABLE: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(33554432u32);
pub const IMAGE_SCN_MEM_NOT_CACHED: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(67108864u32);
pub const IMAGE_SCN_MEM_NOT_PAGED: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(134217728u32);
pub const IMAGE_SCN_MEM_SHARED: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(268435456u32);
pub const IMAGE_SCN_MEM_EXECUTE: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(536870912u32);
pub const IMAGE_SCN_MEM_READ: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(1073741824u32);
pub const IMAGE_SCN_MEM_WRITE: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(2147483648u32);
pub const IMAGE_SCN_SCALE_INDEX: IMAGE_SECTION_CHARACTERISTICS = IMAGE_SECTION_CHARACTERISTICS(1u32);
impl ::std::convert::From<u32> for IMAGE_SECTION_CHARACTERISTICS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for IMAGE_SECTION_CHARACTERISTICS {
    type Abi = Self;
}
impl ::std::ops::BitOr for IMAGE_SECTION_CHARACTERISTICS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for IMAGE_SECTION_CHARACTERISTICS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for IMAGE_SECTION_CHARACTERISTICS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for IMAGE_SECTION_CHARACTERISTICS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for IMAGE_SECTION_CHARACTERISTICS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IMAGE_SECTION_HEADER {
    pub Name: [u8; 8],
    pub Misc: IMAGE_SECTION_HEADER_0,
    pub VirtualAddress: u32,
    pub SizeOfRawData: u32,
    pub PointerToRawData: u32,
    pub PointerToRelocations: u32,
    pub PointerToLinenumbers: u32,
    pub NumberOfRelocations: u16,
    pub NumberOfLinenumbers: u16,
    pub Characteristics: IMAGE_SECTION_CHARACTERISTICS,
}
impl IMAGE_SECTION_HEADER {}
impl ::std::default::Default for IMAGE_SECTION_HEADER {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for IMAGE_SECTION_HEADER {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for IMAGE_SECTION_HEADER {}
unsafe impl ::windows::runtime::Abi for IMAGE_SECTION_HEADER {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union IMAGE_SECTION_HEADER_0 {
    pub PhysicalAddress: u32,
    pub VirtualSize: u32,
}
impl IMAGE_SECTION_HEADER_0 {}
impl ::std::default::Default for IMAGE_SECTION_HEADER_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for IMAGE_SECTION_HEADER_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for IMAGE_SECTION_HEADER_0 {}
unsafe impl ::windows::runtime::Abi for IMAGE_SECTION_HEADER_0 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct IMAGE_SUBSYSTEM(pub u16);
pub const IMAGE_SUBSYSTEM_UNKNOWN: IMAGE_SUBSYSTEM = IMAGE_SUBSYSTEM(0u16);
pub const IMAGE_SUBSYSTEM_NATIVE: IMAGE_SUBSYSTEM = IMAGE_SUBSYSTEM(1u16);
pub const IMAGE_SUBSYSTEM_WINDOWS_GUI: IMAGE_SUBSYSTEM = IMAGE_SUBSYSTEM(2u16);
pub const IMAGE_SUBSYSTEM_WINDOWS_CUI: IMAGE_SUBSYSTEM = IMAGE_SUBSYSTEM(3u16);
pub const IMAGE_SUBSYSTEM_OS2_CUI: IMAGE_SUBSYSTEM = IMAGE_SUBSYSTEM(5u16);
pub const IMAGE_SUBSYSTEM_POSIX_CUI: IMAGE_SUBSYSTEM = IMAGE_SUBSYSTEM(7u16);
pub const IMAGE_SUBSYSTEM_NATIVE_WINDOWS: IMAGE_SUBSYSTEM = IMAGE_SUBSYSTEM(8u16);
pub const IMAGE_SUBSYSTEM_WINDOWS_CE_GUI: IMAGE_SUBSYSTEM = IMAGE_SUBSYSTEM(9u16);
pub const IMAGE_SUBSYSTEM_EFI_APPLICATION: IMAGE_SUBSYSTEM = IMAGE_SUBSYSTEM(10u16);
pub const IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER: IMAGE_SUBSYSTEM = IMAGE_SUBSYSTEM(11u16);
pub const IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER: IMAGE_SUBSYSTEM = IMAGE_SUBSYSTEM(12u16);
pub const IMAGE_SUBSYSTEM_EFI_ROM: IMAGE_SUBSYSTEM = IMAGE_SUBSYSTEM(13u16);
pub const IMAGE_SUBSYSTEM_XBOX: IMAGE_SUBSYSTEM = IMAGE_SUBSYSTEM(14u16);
pub const IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION: IMAGE_SUBSYSTEM = IMAGE_SUBSYSTEM(16u16);
pub const IMAGE_SUBSYSTEM_XBOX_CODE_CATALOG: IMAGE_SUBSYSTEM = IMAGE_SUBSYSTEM(17u16);
impl ::std::convert::From<u16> for IMAGE_SUBSYSTEM {
    fn from(value: u16) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for IMAGE_SUBSYSTEM {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IMachineDebugManager(::windows::runtime::IUnknown);
impl IMachineDebugManager {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddApplication<'a, Param0: ::windows::runtime::IntoParam<'a, IRemoteDebugApplication>>(&self, pda: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), pda.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveApplication(&self, dwappcookie: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwappcookie)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumApplications(&self) -> ::windows::runtime::Result<IEnumRemoteDebugApplications> {
        let mut result__: <IEnumRemoteDebugApplications as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumRemoteDebugApplications>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMachineDebugManager {
    type Vtable = IMachineDebugManager_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865836, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IMachineDebugManager_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pda: ::windows::runtime::RawPtr, pdwappcookie: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwappcookie: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppeda: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IMachineDebugManagerCookie(::windows::runtime::IUnknown);
impl IMachineDebugManagerCookie {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddApplication<'a, Param0: ::windows::runtime::IntoParam<'a, IRemoteDebugApplication>>(&self, pda: Param0, dwdebugappcookie: u32) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), pda.into_param().abi(), ::std::mem::transmute(dwdebugappcookie), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveApplication(&self, dwdebugappcookie: u32, dwappcookie: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwdebugappcookie), ::std::mem::transmute(dwappcookie)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumApplications(&self) -> ::windows::runtime::Result<IEnumRemoteDebugApplications> {
        let mut result__: <IEnumRemoteDebugApplications as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumRemoteDebugApplications>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IMachineDebugManagerCookie {
    type Vtable = IMachineDebugManagerCookie_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865837, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IMachineDebugManagerCookie_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pda: ::windows::runtime::RawPtr, dwdebugappcookie: u32, pdwappcookie: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwdebugappcookie: u32, dwappcookie: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppeda: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IMachineDebugManagerEvents(::windows::runtime::IUnknown);
impl IMachineDebugManagerEvents {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn onAddApplication<'a, Param0: ::windows::runtime::IntoParam<'a, IRemoteDebugApplication>>(&self, pda: Param0, dwappcookie: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), pda.into_param().abi(), ::std::mem::transmute(dwappcookie)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn onRemoveApplication<'a, Param0: ::windows::runtime::IntoParam<'a, IRemoteDebugApplication>>(&self, pda: Param0, dwappcookie: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), pda.into_param().abi(), ::std::mem::transmute(dwappcookie)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IMachineDebugManagerEvents {
    type Vtable = IMachineDebugManagerEvents_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865838, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IMachineDebugManagerEvents_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pda: ::windows::runtime::RawPtr, dwappcookie: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pda: ::windows::runtime::RawPtr, dwappcookie: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IModelIterator(::windows::runtime::IUnknown);
impl IModelIterator {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNext(&self, object: *mut ::std::option::Option<IModelObject>, dimensions: u64, indexers: *mut ::std::option::Option<IModelObject>, metadata: *mut ::std::option::Option<IKeyStore>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(object), ::std::mem::transmute(dimensions), ::std::mem::transmute(indexers), ::std::mem::transmute(metadata)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IModelIterator {
    type Vtable = IModelIterator_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3831636278, 37501, 17552, [135, 79, 88, 31, 62, 78, 54, 136]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IModelIterator_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, object: *mut ::windows::runtime::RawPtr, dimensions: u64, indexers: *mut ::windows::runtime::RawPtr, metadata: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IModelKeyReference(::windows::runtime::IUnknown);
impl IModelKeyReference {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetKeyName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOriginalObject(&self) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContextObject(&self) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetKey(&self, object: *mut ::std::option::Option<IModelObject>, metadata: *mut ::std::option::Option<IKeyStore>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(object), ::std::mem::transmute(metadata)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetKeyValue(&self, object: *mut ::std::option::Option<IModelObject>, metadata: *mut ::std::option::Option<IKeyStore>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(object), ::std::mem::transmute(metadata)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetKey<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>, Param1: ::windows::runtime::IntoParam<'a, IKeyStore>>(&self, object: Param0, metadata: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), object.into_param().abi(), metadata.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetKeyValue<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, object: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), object.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IModelKeyReference {
    type Vtable = IModelKeyReference_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1381227768, 23295, 19554, [179, 2, 86, 162, 137, 224, 9, 152]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IModelKeyReference_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, keyname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, originalobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, containingobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, object: *mut ::windows::runtime::RawPtr, metadata: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, object: *mut ::windows::runtime::RawPtr, metadata: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, object: ::windows::runtime::RawPtr, metadata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, object: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IModelKeyReference2(::windows::runtime::IUnknown);
impl IModelKeyReference2 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetKeyName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetOriginalObject(&self) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContextObject(&self) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetKey(&self, object: *mut ::std::option::Option<IModelObject>, metadata: *mut ::std::option::Option<IKeyStore>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(object), ::std::mem::transmute(metadata)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetKeyValue(&self, object: *mut ::std::option::Option<IModelObject>, metadata: *mut ::std::option::Option<IKeyStore>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(object), ::std::mem::transmute(metadata)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetKey<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>, Param1: ::windows::runtime::IntoParam<'a, IKeyStore>>(&self, object: Param0, metadata: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), object.into_param().abi(), metadata.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetKeyValue<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, object: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), object.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OverrideContextObject<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, newcontextobject: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), newcontextobject.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IModelKeyReference2 {
    type Vtable = IModelKeyReference2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2162358213, 29017, 20114, [136, 126, 126, 3, 71, 232, 132, 6]);
}
impl ::std::convert::From<IModelKeyReference2> for IModelKeyReference {
    fn from(value: IModelKeyReference2) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IModelKeyReference2> for IModelKeyReference {
    fn from(value: &IModelKeyReference2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IModelKeyReference> for IModelKeyReference2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IModelKeyReference> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IModelKeyReference>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IModelKeyReference> for &IModelKeyReference2 {
    fn into_param(self) -> ::windows::runtime::Param<'a, IModelKeyReference> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IModelKeyReference>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IModelKeyReference2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, keyname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, originalobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, containingobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, object: *mut ::windows::runtime::RawPtr, metadata: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, object: *mut ::windows::runtime::RawPtr, metadata: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, object: ::windows::runtime::RawPtr, metadata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, object: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, newcontextobject: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IModelMethod(::windows::runtime::IUnknown);
impl IModelMethod {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Call<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, pcontextobject: Param0, argcount: u64, pparguments: *const ::std::option::Option<IModelObject>, ppresult: *mut ::std::option::Option<IModelObject>, ppmetadata: *mut ::std::option::Option<IKeyStore>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), pcontextobject.into_param().abi(), ::std::mem::transmute(argcount), ::std::mem::transmute(pparguments), ::std::mem::transmute(ppresult), ::std::mem::transmute(ppmetadata)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IModelMethod {
    type Vtable = IModelMethod_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2153778207, 47371, 18582, [130, 173, 28, 0, 32, 121, 9, 232]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IModelMethod_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcontextobject: ::windows::runtime::RawPtr, argcount: u64, pparguments: *const ::windows::runtime::RawPtr, ppresult: *mut ::windows::runtime::RawPtr, ppmetadata: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IModelObject(::windows::runtime::IUnknown);
impl IModelObject {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContext(&self) -> ::windows::runtime::Result<IDebugHostContext> {
        let mut result__: <IDebugHostContext as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostContext>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetKind(&self) -> ::windows::runtime::Result<ModelObjectKind> {
        let mut result__: <ModelObjectKind as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<ModelObjectKind>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetIntrinsicValue(&self) -> ::windows::runtime::Result<super::super::Com::VARIANT> {
        let mut result__: <super::super::Com::VARIANT as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::Com::VARIANT>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetIntrinsicValueAs(&self, vt: u16) -> ::windows::runtime::Result<super::super::Com::VARIANT> {
        let mut result__: <super::super::Com::VARIANT as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(vt), &mut result__).from_abi::<super::super::Com::VARIANT>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetKeyValue<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, key: Param0, object: *mut ::std::option::Option<IModelObject>, metadata: *mut ::std::option::Option<IKeyStore>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), key.into_param().abi(), ::std::mem::transmute(object), ::std::mem::transmute(metadata)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetKeyValue<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, key: Param0, object: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), key.into_param().abi(), object.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumerateKeyValues(&self) -> ::windows::runtime::Result<IKeyEnumerator> {
        let mut result__: <IKeyEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IKeyEnumerator>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRawValue<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, kind: SymbolKind, name: Param1, searchflags: u32) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), ::std::mem::transmute(kind), name.into_param().abi(), ::std::mem::transmute(searchflags), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumerateRawValues(&self, kind: SymbolKind, searchflags: u32) -> ::windows::runtime::Result<IRawEnumerator> {
        let mut result__: <IRawEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(kind), ::std::mem::transmute(searchflags), &mut result__).from_abi::<IRawEnumerator>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Dereference(&self) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn TryCastToRuntimeType(&self) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetConcept(&self, conceptid: *const ::windows::runtime::GUID, conceptinterface: *mut ::std::option::Option<::windows::runtime::IUnknown>, conceptmetadata: *mut ::std::option::Option<IKeyStore>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), ::std::mem::transmute(conceptid), ::std::mem::transmute(conceptinterface), ::std::mem::transmute(conceptmetadata)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetLocation(&self) -> ::windows::runtime::Result<Location> {
        let mut result__: <Location as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), &mut result__).from_abi::<Location>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTypeInfo(&self) -> ::windows::runtime::Result<IDebugHostType> {
        let mut result__: <IDebugHostType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugHostType>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetTargetInfo(&self, location: *mut Location, r#type: *mut ::std::option::Option<IDebugHostType>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), ::std::mem::transmute(location), ::std::mem::transmute(r#type)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberOfParentModels(&self) -> ::windows::runtime::Result<u64> {
        let mut result__: <u64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetParentModel(&self, i: u64, model: *mut ::std::option::Option<IModelObject>, contextobject: *mut ::std::option::Option<IModelObject>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), ::std::mem::transmute(i), ::std::mem::transmute(model), ::std::mem::transmute(contextobject)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddParentModel<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>, Param1: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, model: Param0, contextobject: Param1, r#override: u8) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), model.into_param().abi(), contextobject.into_param().abi(), ::std::mem::transmute(r#override)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveParentModel<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, model: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), model.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetKey<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, key: Param0, object: *mut ::std::option::Option<IModelObject>, metadata: *mut ::std::option::Option<IKeyStore>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), key.into_param().abi(), ::std::mem::transmute(object), ::std::mem::transmute(metadata)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetKeyReference<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, key: Param0, objectreference: *mut ::std::option::Option<IModelObject>, metadata: *mut ::std::option::Option<IKeyStore>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), key.into_param().abi(), ::std::mem::transmute(objectreference), ::std::mem::transmute(metadata)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetKey<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, IModelObject>, Param2: ::windows::runtime::IntoParam<'a, IKeyStore>>(&self, key: Param0, object: Param1, metadata: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), key.into_param().abi(), object.into_param().abi(), metadata.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ClearKeys(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumerateKeys(&self) -> ::windows::runtime::Result<IKeyEnumerator> {
        let mut result__: <IKeyEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IKeyEnumerator>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumerateKeyReferences(&self) -> ::windows::runtime::Result<IKeyEnumerator> {
        let mut result__: <IKeyEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IKeyEnumerator>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetConcept<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>, Param2: ::windows::runtime::IntoParam<'a, IKeyStore>>(&self, conceptid: *const ::windows::runtime::GUID, conceptinterface: Param1, conceptmetadata: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), ::std::mem::transmute(conceptid), conceptinterface.into_param().abi(), conceptmetadata.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ClearConcepts(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetRawReference<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, kind: SymbolKind, name: Param1, searchflags: u32) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(::std::mem::transmute_copy(self), ::std::mem::transmute(kind), name.into_param().abi(), ::std::mem::transmute(searchflags), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumerateRawReferences(&self, kind: SymbolKind, searchflags: u32) -> ::windows::runtime::Result<IRawEnumerator> {
        let mut result__: <IRawEnumerator as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).31)(::std::mem::transmute_copy(self), ::std::mem::transmute(kind), ::std::mem::transmute(searchflags), &mut result__).from_abi::<IRawEnumerator>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetContextForDataModel<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, datamodelobject: Param0, context: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).32)(::std::mem::transmute_copy(self), datamodelobject.into_param().abi(), context.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContextForDataModel<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, datamodelobject: Param0) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(::std::mem::transmute_copy(self), datamodelobject.into_param().abi(), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Compare<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, other: Param0) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).34)(::std::mem::transmute_copy(self), other.into_param().abi(), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn IsEqualTo<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, other: Param0) -> ::windows::runtime::Result<bool> {
        let mut result__: <bool as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(::std::mem::transmute_copy(self), other.into_param().abi(), &mut result__).from_abi::<bool>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IModelObject {
    type Vtable = IModelObject_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3800856723, 16203, 19350, [186, 202, 41, 60, 220, 85, 244, 93]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IModelObject_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, context: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: *mut ModelObjectKind) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, intrinsicdata: *mut ::std::mem::ManuallyDrop<super::super::Com::VARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, vt: u16, intrinsicdata: *mut ::std::mem::ManuallyDrop<super::super::Com::VARIANT>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, key: super::super::super::Foundation::PWSTR, object: *mut ::windows::runtime::RawPtr, metadata: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, key: super::super::super::Foundation::PWSTR, object: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, enumerator: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, searchflags: u32, object: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: SymbolKind, searchflags: u32, enumerator: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, object: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, runtimetypedobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, conceptid: *const ::windows::runtime::GUID, conceptinterface: *mut ::windows::runtime::RawPtr, conceptmetadata: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, location: *mut Location) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, r#type: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, location: *mut Location, r#type: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, nummodels: *mut u64) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, i: u64, model: *mut ::windows::runtime::RawPtr, contextobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, model: ::windows::runtime::RawPtr, contextobject: ::windows::runtime::RawPtr, r#override: u8) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, model: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, key: super::super::super::Foundation::PWSTR, object: *mut ::windows::runtime::RawPtr, metadata: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, key: super::super::super::Foundation::PWSTR, objectreference: *mut ::windows::runtime::RawPtr, metadata: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, key: super::super::super::Foundation::PWSTR, object: ::windows::runtime::RawPtr, metadata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, enumerator: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, enumerator: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, conceptid: *const ::windows::runtime::GUID, conceptinterface: ::windows::runtime::RawPtr, conceptmetadata: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, searchflags: u32, object: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, kind: SymbolKind, searchflags: u32, enumerator: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, datamodelobject: ::windows::runtime::RawPtr, context: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, datamodelobject: ::windows::runtime::RawPtr, context: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, other: ::windows::runtime::RawPtr, ppresult: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, other: ::windows::runtime::RawPtr, equal: *mut bool) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IModelPropertyAccessor(::windows::runtime::IUnknown);
impl IModelPropertyAccessor {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetValue<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, key: Param0, contextobject: Param1) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), key.into_param().abi(), contextobject.into_param().abi(), &mut result__).from_abi::<IModelObject>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetValue<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, IModelObject>, Param2: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, key: Param0, contextobject: Param1, value: Param2) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), key.into_param().abi(), contextobject.into_param().abi(), value.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IModelPropertyAccessor {
    type Vtable = IModelPropertyAccessor_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1510761433, 1318, 17080, [150, 12, 149, 22, 163, 37, 76, 133]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IModelPropertyAccessor_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, key: super::super::super::Foundation::PWSTR, contextobject: ::windows::runtime::RawPtr, value: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, key: super::super::super::Foundation::PWSTR, contextobject: ::windows::runtime::RawPtr, value: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const INCORRECT_VERSION_INFO: u32 = 7u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union INLINE_FRAME_CONTEXT {
    pub ContextValue: u32,
    pub Anonymous: INLINE_FRAME_CONTEXT_0,
}
impl INLINE_FRAME_CONTEXT {}
impl ::std::default::Default for INLINE_FRAME_CONTEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for INLINE_FRAME_CONTEXT {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for INLINE_FRAME_CONTEXT {}
unsafe impl ::windows::runtime::Abi for INLINE_FRAME_CONTEXT {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct INLINE_FRAME_CONTEXT_0 {
    pub FrameId: u8,
    pub FrameType: u8,
    pub FrameSignature: u16,
}
impl INLINE_FRAME_CONTEXT_0 {}
impl ::std::default::Default for INLINE_FRAME_CONTEXT_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for INLINE_FRAME_CONTEXT_0 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_Anonymous_e__Struct").field("FrameId", &self.FrameId).field("FrameType", &self.FrameType).field("FrameSignature", &self.FrameSignature).finish()
    }
}
impl ::std::cmp::PartialEq for INLINE_FRAME_CONTEXT_0 {
    fn eq(&self, other: &Self) -> bool {
        self.FrameId == other.FrameId && self.FrameType == other.FrameType && self.FrameSignature == other.FrameSignature
    }
}
impl ::std::cmp::Eq for INLINE_FRAME_CONTEXT_0 {}
unsafe impl ::windows::runtime::Abi for INLINE_FRAME_CONTEXT_0 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const INLINE_FRAME_CONTEXT_IGNORE: u32 = 4294967295u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const INLINE_FRAME_CONTEXT_INIT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const INSUFFICIENT_SPACE_TO_COPY: u32 = 10u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const INTERFACESAFE_FOR_UNTRUSTED_CALLER: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const INTERFACESAFE_FOR_UNTRUSTED_DATA: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const INTERFACE_USES_DISPEX: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const INTERFACE_USES_SECURITY_MANAGER: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IOCTL_IPMI_INTERNAL_RECORD_SEL_EVENT: u32 = 2232320u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IOSPACE {
    pub Address: u32,
    pub Length: u32,
    pub Data: u32,
}
impl IOSPACE {}
impl ::std::default::Default for IOSPACE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for IOSPACE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IOSPACE").field("Address", &self.Address).field("Length", &self.Length).field("Data", &self.Data).finish()
    }
}
impl ::std::cmp::PartialEq for IOSPACE {
    fn eq(&self, other: &Self) -> bool {
        self.Address == other.Address && self.Length == other.Length && self.Data == other.Data
    }
}
impl ::std::cmp::Eq for IOSPACE {}
unsafe impl ::windows::runtime::Abi for IOSPACE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IOSPACE32 {
    pub Address: u32,
    pub Length: u32,
    pub Data: u32,
}
impl IOSPACE32 {}
impl ::std::default::Default for IOSPACE32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for IOSPACE32 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IOSPACE32").field("Address", &self.Address).field("Length", &self.Length).field("Data", &self.Data).finish()
    }
}
impl ::std::cmp::PartialEq for IOSPACE32 {
    fn eq(&self, other: &Self) -> bool {
        self.Address == other.Address && self.Length == other.Length && self.Data == other.Data
    }
}
impl ::std::cmp::Eq for IOSPACE32 {}
unsafe impl ::windows::runtime::Abi for IOSPACE32 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IOSPACE64 {
    pub Address: u64,
    pub Length: u32,
    pub Data: u32,
}
impl IOSPACE64 {}
impl ::std::default::Default for IOSPACE64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for IOSPACE64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IOSPACE64").field("Address", &self.Address).field("Length", &self.Length).field("Data", &self.Data).finish()
    }
}
impl ::std::cmp::PartialEq for IOSPACE64 {
    fn eq(&self, other: &Self) -> bool {
        self.Address == other.Address && self.Length == other.Length && self.Data == other.Data
    }
}
impl ::std::cmp::Eq for IOSPACE64 {}
unsafe impl ::windows::runtime::Abi for IOSPACE64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IOSPACE_EX {
    pub Address: u32,
    pub Length: u32,
    pub Data: u32,
    pub InterfaceType: u32,
    pub BusNumber: u32,
    pub AddressSpace: u32,
}
impl IOSPACE_EX {}
impl ::std::default::Default for IOSPACE_EX {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for IOSPACE_EX {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IOSPACE_EX").field("Address", &self.Address).field("Length", &self.Length).field("Data", &self.Data).field("InterfaceType", &self.InterfaceType).field("BusNumber", &self.BusNumber).field("AddressSpace", &self.AddressSpace).finish()
    }
}
impl ::std::cmp::PartialEq for IOSPACE_EX {
    fn eq(&self, other: &Self) -> bool {
        self.Address == other.Address && self.Length == other.Length && self.Data == other.Data && self.InterfaceType == other.InterfaceType && self.BusNumber == other.BusNumber && self.AddressSpace == other.AddressSpace
    }
}
impl ::std::cmp::Eq for IOSPACE_EX {}
unsafe impl ::windows::runtime::Abi for IOSPACE_EX {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IOSPACE_EX32 {
    pub Address: u32,
    pub Length: u32,
    pub Data: u32,
    pub InterfaceType: u32,
    pub BusNumber: u32,
    pub AddressSpace: u32,
}
impl IOSPACE_EX32 {}
impl ::std::default::Default for IOSPACE_EX32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for IOSPACE_EX32 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IOSPACE_EX32").field("Address", &self.Address).field("Length", &self.Length).field("Data", &self.Data).field("InterfaceType", &self.InterfaceType).field("BusNumber", &self.BusNumber).field("AddressSpace", &self.AddressSpace).finish()
    }
}
impl ::std::cmp::PartialEq for IOSPACE_EX32 {
    fn eq(&self, other: &Self) -> bool {
        self.Address == other.Address && self.Length == other.Length && self.Data == other.Data && self.InterfaceType == other.InterfaceType && self.BusNumber == other.BusNumber && self.AddressSpace == other.AddressSpace
    }
}
impl ::std::cmp::Eq for IOSPACE_EX32 {}
unsafe impl ::windows::runtime::Abi for IOSPACE_EX32 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IOSPACE_EX64 {
    pub Address: u64,
    pub Length: u32,
    pub Data: u32,
    pub InterfaceType: u32,
    pub BusNumber: u32,
    pub AddressSpace: u32,
}
impl IOSPACE_EX64 {}
impl ::std::default::Default for IOSPACE_EX64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for IOSPACE_EX64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("IOSPACE_EX64").field("Address", &self.Address).field("Length", &self.Length).field("Data", &self.Data).field("InterfaceType", &self.InterfaceType).field("BusNumber", &self.BusNumber).field("AddressSpace", &self.AddressSpace).finish()
    }
}
impl ::std::cmp::PartialEq for IOSPACE_EX64 {
    fn eq(&self, other: &Self) -> bool {
        self.Address == other.Address && self.Length == other.Length && self.Data == other.Data && self.InterfaceType == other.InterfaceType && self.BusNumber == other.BusNumber && self.AddressSpace == other.AddressSpace
    }
}
impl ::std::cmp::Eq for IOSPACE_EX64 {}
unsafe impl ::windows::runtime::Abi for IOSPACE_EX64 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IObjectSafety(::windows::runtime::IUnknown);
impl IObjectSafety {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetInterfaceSafetyOptions(&self, riid: *const ::windows::runtime::GUID, pdwsupportedoptions: *mut u32, pdwenabledoptions: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(riid), ::std::mem::transmute(pdwsupportedoptions), ::std::mem::transmute(pdwenabledoptions)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetInterfaceSafetyOptions(&self, riid: *const ::windows::runtime::GUID, dwoptionsetmask: u32, dwenabledoptions: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(riid), ::std::mem::transmute(dwoptionsetmask), ::std::mem::transmute(dwenabledoptions)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IObjectSafety {
    type Vtable = IObjectSafety_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3411795073, 37825, 4559, [143, 32, 0, 128, 95, 44, 208, 100]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IObjectSafety_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, pdwsupportedoptions: *mut u32, pdwenabledoptions: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, riid: *const ::windows::runtime::GUID, dwoptionsetmask: u32, dwenabledoptions: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IPMI_IOCTL_INDEX: u32 = 1024u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct IPMI_OS_SEL_RECORD {
    pub Signature: u32,
    pub Version: u32,
    pub Length: u32,
    pub RecordType: IPMI_OS_SEL_RECORD_TYPE,
    pub DataLength: u32,
    pub Data: [u8; 1],
}
impl IPMI_OS_SEL_RECORD {}
impl ::std::default::Default for IPMI_OS_SEL_RECORD {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for IPMI_OS_SEL_RECORD {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for IPMI_OS_SEL_RECORD {}
unsafe impl ::windows::runtime::Abi for IPMI_OS_SEL_RECORD {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IPMI_OS_SEL_RECORD_MASK: u32 = 65535u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct IPMI_OS_SEL_RECORD_TYPE(pub i32);
pub const IpmiOsSelRecordTypeWhea: IPMI_OS_SEL_RECORD_TYPE = IPMI_OS_SEL_RECORD_TYPE(0i32);
pub const IpmiOsSelRecordTypeOther: IPMI_OS_SEL_RECORD_TYPE = IPMI_OS_SEL_RECORD_TYPE(1i32);
pub const IpmiOsSelRecordTypeWheaErrorXpfMca: IPMI_OS_SEL_RECORD_TYPE = IPMI_OS_SEL_RECORD_TYPE(2i32);
pub const IpmiOsSelRecordTypeWheaErrorPci: IPMI_OS_SEL_RECORD_TYPE = IPMI_OS_SEL_RECORD_TYPE(3i32);
pub const IpmiOsSelRecordTypeWheaErrorNmi: IPMI_OS_SEL_RECORD_TYPE = IPMI_OS_SEL_RECORD_TYPE(4i32);
pub const IpmiOsSelRecordTypeWheaErrorOther: IPMI_OS_SEL_RECORD_TYPE = IPMI_OS_SEL_RECORD_TYPE(5i32);
pub const IpmiOsSelRecordTypeRaw: IPMI_OS_SEL_RECORD_TYPE = IPMI_OS_SEL_RECORD_TYPE(6i32);
pub const IpmiOsSelRecordTypeDriver: IPMI_OS_SEL_RECORD_TYPE = IPMI_OS_SEL_RECORD_TYPE(7i32);
pub const IpmiOsSelRecordTypeBugcheckRecovery: IPMI_OS_SEL_RECORD_TYPE = IPMI_OS_SEL_RECORD_TYPE(8i32);
pub const IpmiOsSelRecordTypeBugcheckData: IPMI_OS_SEL_RECORD_TYPE = IPMI_OS_SEL_RECORD_TYPE(9i32);
pub const IpmiOsSelRecordTypeMax: IPMI_OS_SEL_RECORD_TYPE = IPMI_OS_SEL_RECORD_TYPE(10i32);
impl ::std::convert::From<i32> for IPMI_OS_SEL_RECORD_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for IPMI_OS_SEL_RECORD_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IPMI_OS_SEL_RECORD_VERSION: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const IPMI_OS_SEL_RECORD_VERSION_1: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IPerPropertyBrowsing2(::windows::runtime::IUnknown);
impl IPerPropertyBrowsing2 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDisplayString(&self, dispid: i32) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(dispid), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn MapPropertyToPage(&self, dispid: i32) -> ::windows::runtime::Result<::windows::runtime::GUID> {
        let mut result__: <::windows::runtime::GUID as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(dispid), &mut result__).from_abi::<::windows::runtime::GUID>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Ole`*"]
    pub unsafe fn GetPredefinedStrings(&self, dispid: i32, pcastrings: *mut super::super::Ole::CALPOLESTR, pcacookies: *mut super::super::Ole::CADWORD) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), ::std::mem::transmute(dispid), ::std::mem::transmute(pcastrings), ::std::mem::transmute(pcacookies)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetPredefinedValue(&self, dispid: i32, dwcookie: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(dispid), ::std::mem::transmute(dwcookie)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IPerPropertyBrowsing2 {
    type Vtable = IPerPropertyBrowsing2_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865876, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPerPropertyBrowsing2_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dispid: i32, pbstr: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dispid: i32, pclsidproppage: *mut ::windows::runtime::GUID) -> ::windows::runtime::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dispid: i32, pcastrings: *mut super::super::Ole::CALPOLESTR, pcacookies: *mut super::super::Ole::CADWORD) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dispid: i32, dwcookie: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IPreferredRuntimeTypeConcept(::windows::runtime::IUnknown);
impl IPreferredRuntimeTypeConcept {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CastToPreferredRuntimeType<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>>(&self, contextobject: Param0) -> ::windows::runtime::Result<IModelObject> {
        let mut result__: <IModelObject as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), contextobject.into_param().abi(), &mut result__).from_abi::<IModelObject>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IPreferredRuntimeTypeConcept {
    type Vtable = IPreferredRuntimeTypeConcept_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2641108347, 42863, 17944, [128, 104, 95, 118, 189, 154, 78, 138]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPreferredRuntimeTypeConcept_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, contextobject: ::windows::runtime::RawPtr, object: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IProcessDebugManager32(::windows::runtime::IUnknown);
impl IProcessDebugManager32 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateApplication(&self) -> ::windows::runtime::Result<IDebugApplication32> {
        let mut result__: <IDebugApplication32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugApplication32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDefaultApplication(&self) -> ::windows::runtime::Result<IDebugApplication32> {
        let mut result__: <IDebugApplication32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugApplication32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddApplication<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugApplication32>>(&self, pda: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), pda.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveApplication(&self, dwappcookie: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwappcookie)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateDebugDocumentHelper<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, punkouter: Param0) -> ::windows::runtime::Result<IDebugDocumentHelper32> {
        let mut result__: <IDebugDocumentHelper32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), punkouter.into_param().abi(), &mut result__).from_abi::<IDebugDocumentHelper32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IProcessDebugManager32 {
    type Vtable = IProcessDebugManager32_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865839, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IProcessDebugManager32_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppda: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppda: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pda: ::windows::runtime::RawPtr, pdwappcookie: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwappcookie: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, punkouter: ::windows::runtime::RawPtr, pddh: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IProcessDebugManager64(::windows::runtime::IUnknown);
impl IProcessDebugManager64 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateApplication(&self) -> ::windows::runtime::Result<IDebugApplication64> {
        let mut result__: <IDebugApplication64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugApplication64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDefaultApplication(&self) -> ::windows::runtime::Result<IDebugApplication64> {
        let mut result__: <IDebugApplication64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugApplication64>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn AddApplication<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugApplication64>>(&self, pda: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), pda.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn RemoveApplication(&self, dwappcookie: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwappcookie)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateDebugDocumentHelper<'a, Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, punkouter: Param0) -> ::windows::runtime::Result<IDebugDocumentHelper64> {
        let mut result__: <IDebugDocumentHelper64 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), punkouter.into_param().abi(), &mut result__).from_abi::<IDebugDocumentHelper64>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IProcessDebugManager64 {
    type Vtable = IProcessDebugManager64_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1455029276, 25513, 19649, [172, 33, 8, 125, 105, 161, 127, 171]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IProcessDebugManager64_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppda: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppda: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pda: ::windows::runtime::RawPtr, pdwappcookie: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwappcookie: u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, punkouter: ::windows::runtime::RawPtr, pddh: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IProvideExpressionContexts(::windows::runtime::IUnknown);
impl IProvideExpressionContexts {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumExpressionContexts(&self) -> ::windows::runtime::Result<IEnumDebugExpressionContexts> {
        let mut result__: <IEnumDebugExpressionContexts as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumDebugExpressionContexts>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IProvideExpressionContexts {
    type Vtable = IProvideExpressionContexts_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865857, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IProvideExpressionContexts_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppedec: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IRawEnumerator(::windows::runtime::IUnknown);
impl IRawEnumerator {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Reset(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetNext(&self, name: *mut super::super::super::Foundation::BSTR, kind: *mut SymbolKind, value: *mut ::std::option::Option<IModelObject>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(name), ::std::mem::transmute(kind), ::std::mem::transmute(value)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IRawEnumerator {
    type Vtable = IRawEnumerator_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3778417657, 14908, 16565, [143, 72, 30, 94, 191, 185, 178, 27]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRawEnumerator_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, name: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, kind: *mut SymbolKind, value: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IRemoteDebugApplication(::windows::runtime::IUnknown);
impl IRemoteDebugApplication {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ResumeFromBreakPoint<'a, Param0: ::windows::runtime::IntoParam<'a, IRemoteDebugApplicationThread>>(&self, prptfocus: Param0, bra: BREAKRESUME_ACTION, era: ERRORRESUMEACTION) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), prptfocus.into_param().abi(), ::std::mem::transmute(bra), ::std::mem::transmute(era)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CauseBreak(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn ConnectDebugger<'a, Param0: ::windows::runtime::IntoParam<'a, IApplicationDebugger>>(&self, pad: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), pad.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DisconnectDebugger(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetDebugger(&self) -> ::windows::runtime::Result<IApplicationDebugger> {
        let mut result__: <IApplicationDebugger as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IApplicationDebugger>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateInstanceAtApplication<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, rclsid: *const ::windows::runtime::GUID, punkouter: Param1, dwclscontext: u32, riid: *const ::windows::runtime::GUID) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), ::std::mem::transmute(rclsid), punkouter.into_param().abi(), ::std::mem::transmute(dwclscontext), ::std::mem::transmute(riid), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn QueryAlive(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumThreads(&self) -> ::windows::runtime::Result<IEnumRemoteDebugApplicationThreads> {
        let mut result__: <IEnumRemoteDebugApplicationThreads as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumRemoteDebugApplicationThreads>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRootNode(&self) -> ::windows::runtime::Result<IDebugApplicationNode> {
        let mut result__: <IDebugApplicationNode as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IDebugApplicationNode>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumGlobalExpressionContexts(&self) -> ::windows::runtime::Result<IEnumDebugExpressionContexts> {
        let mut result__: <IEnumDebugExpressionContexts as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumDebugExpressionContexts>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IRemoteDebugApplication {
    type Vtable = IRemoteDebugApplication_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865840, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRemoteDebugApplication_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prptfocus: ::windows::runtime::RawPtr, bra: BREAKRESUME_ACTION, era: ERRORRESUMEACTION) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pad: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pad: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, rclsid: *const ::windows::runtime::GUID, punkouter: ::windows::runtime::RawPtr, dwclscontext: u32, riid: *const ::windows::runtime::GUID, ppvobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pperdat: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstrname: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppdanroot: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppedec: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IRemoteDebugApplication110(::windows::runtime::IUnknown);
impl IRemoteDebugApplication110 {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetDebuggerOptions(&self, mask: SCRIPT_DEBUGGER_OPTIONS, value: SCRIPT_DEBUGGER_OPTIONS) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(mask), ::std::mem::transmute(value)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCurrentDebuggerOptions(&self) -> ::windows::runtime::Result<SCRIPT_DEBUGGER_OPTIONS> {
        let mut result__: <SCRIPT_DEBUGGER_OPTIONS as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<SCRIPT_DEBUGGER_OPTIONS>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetMainThread(&self) -> ::windows::runtime::Result<IRemoteDebugApplicationThread> {
        let mut result__: <IRemoteDebugApplicationThread as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IRemoteDebugApplicationThread>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IRemoteDebugApplication110 {
    type Vtable = IRemoteDebugApplication110_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3590193243, 10294, 18526, [177, 249, 137, 217, 26, 162, 79, 212]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRemoteDebugApplication110_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, mask: SCRIPT_DEBUGGER_OPTIONS, value: SCRIPT_DEBUGGER_OPTIONS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcurrentoptions: *mut SCRIPT_DEBUGGER_OPTIONS) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppthread: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IRemoteDebugApplicationEvents(::windows::runtime::IUnknown);
impl IRemoteDebugApplicationEvents {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnConnectDebugger<'a, Param0: ::windows::runtime::IntoParam<'a, IApplicationDebugger>>(&self, pad: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), pad.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnDisconnectDebugger(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OnSetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pstrname: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), pstrname.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn OnDebugOutput<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pstr: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), pstr.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnClose(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnEnterBreakPoint<'a, Param0: ::windows::runtime::IntoParam<'a, IRemoteDebugApplicationThread>>(&self, prdat: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), prdat.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnLeaveBreakPoint<'a, Param0: ::windows::runtime::IntoParam<'a, IRemoteDebugApplicationThread>>(&self, prdat: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), prdat.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnCreateThread<'a, Param0: ::windows::runtime::IntoParam<'a, IRemoteDebugApplicationThread>>(&self, prdat: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), prdat.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnDestroyThread<'a, Param0: ::windows::runtime::IntoParam<'a, IRemoteDebugApplicationThread>>(&self, prdat: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), prdat.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnBreakFlagChange<'a, Param1: ::windows::runtime::IntoParam<'a, IRemoteDebugApplicationThread>>(&self, abf: u32, prdatsteppingthread: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self), ::std::mem::transmute(abf), prdatsteppingthread.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IRemoteDebugApplicationEvents {
    type Vtable = IRemoteDebugApplicationEvents_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865843, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRemoteDebugApplicationEvents_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pad: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstrname: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstr: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prdat: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prdat: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prdat: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, prdat: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, abf: u32, prdatsteppingthread: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IRemoteDebugApplicationThread(::windows::runtime::IUnknown);
impl IRemoteDebugApplicationThread {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSystemThreadId(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetApplication(&self) -> ::windows::runtime::Result<IRemoteDebugApplication> {
        let mut result__: <IRemoteDebugApplication as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IRemoteDebugApplication>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn EnumStackFrames(&self) -> ::windows::runtime::Result<IEnumDebugStackFrames> {
        let mut result__: <IEnumDebugStackFrames as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IEnumDebugStackFrames>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetDescription(&self, pbstrdescription: *mut super::super::super::Foundation::BSTR, pbstrstate: *mut super::super::super::Foundation::BSTR) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(pbstrdescription), ::std::mem::transmute(pbstrstate)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SetNextStatement<'a, Param0: ::windows::runtime::IntoParam<'a, IDebugStackFrame>, Param1: ::windows::runtime::IntoParam<'a, IDebugCodeContext>>(&self, pstackframe: Param0, pcodecontext: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), pstackframe.into_param().abi(), pcodecontext.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetState(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Suspend(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Resume(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetSuspendCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IRemoteDebugApplicationThread {
    type Vtable = IRemoteDebugApplicationThread_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865847, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRemoteDebugApplicationThread_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwthreadid: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pprda: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppedsf: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstrdescription: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, pbstrstate: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstackframe: ::windows::runtime::RawPtr, pcodecontext: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstate: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcount: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcount: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IRemoteDebugCriticalErrorEvent110(::windows::runtime::IUnknown);
impl IRemoteDebugCriticalErrorEvent110 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetErrorInfo(&self, pbstrsource: *mut super::super::super::Foundation::BSTR, pmessageid: *mut i32, pbstrmessage: *mut super::super::super::Foundation::BSTR, pplocation: *mut ::std::option::Option<IDebugDocumentContext>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(pbstrsource), ::std::mem::transmute(pmessageid), ::std::mem::transmute(pbstrmessage), ::std::mem::transmute(pplocation)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IRemoteDebugCriticalErrorEvent110 {
    type Vtable = IRemoteDebugCriticalErrorEvent110_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(795461137, 27412, 18408, [146, 96, 75, 183, 197, 47, 80, 75]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRemoteDebugCriticalErrorEvent110_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstrsource: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, pmessageid: *mut i32, pbstrmessage: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, pplocation: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IRemoteDebugInfoEvent110(::windows::runtime::IUnknown);
impl IRemoteDebugInfoEvent110 {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventInfo(&self, pmessagetype: *mut DEBUG_EVENT_INFO_TYPE, pbstrmessage: *mut super::super::super::Foundation::BSTR, pbstrurl: *mut super::super::super::Foundation::BSTR, pplocation: *mut ::std::option::Option<IDebugDocumentContext>) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(pmessagetype), ::std::mem::transmute(pbstrmessage), ::std::mem::transmute(pbstrurl), ::std::mem::transmute(pplocation)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IRemoteDebugInfoEvent110 {
    type Vtable = IRemoteDebugInfoEvent110_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2683661238, 60297, 19471, [136, 35, 204, 42, 76, 11, 127, 38]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRemoteDebugInfoEvent110_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pmessagetype: *mut DEBUG_EVENT_INFO_TYPE, pbstrmessage: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, pbstrurl: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, pplocation: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IScriptEntry(::windows::runtime::IUnknown);
impl IScriptEntry {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Alive(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Delete(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetParent(&self) -> ::windows::runtime::Result<IScriptNode> {
        let mut result__: <IScriptNode as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IScriptNode>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetIndexInParent(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCookie(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberOfChildren(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetChild(&self, isn: u32) -> ::windows::runtime::Result<IScriptNode> {
        let mut result__: <IScriptNode as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(isn), &mut result__).from_abi::<IScriptNode>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLanguage(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateChildEntry<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, isn: u32, dwcookie: u32, pszdelimiter: Param2) -> ::windows::runtime::Result<IScriptEntry> {
        let mut result__: <IScriptEntry as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(isn), ::std::mem::transmute(dwcookie), pszdelimiter.into_param().abi(), &mut result__).from_abi::<IScriptEntry>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CreateChildHandler<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::Ole::Automation::ITypeInfo>>(
        &self,
        pszdefaultname: Param0,
        prgpsznames: *const super::super::super::Foundation::PWSTR,
        cpsznames: u32,
        pszevent: Param3,
        pszdelimiter: Param4,
        ptisignature: Param5,
        imethodsignature: u32,
        isn: u32,
        dwcookie: u32,
    ) -> ::windows::runtime::Result<IScriptEntry> {
        let mut result__: <IScriptEntry as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            pszdefaultname.into_param().abi(),
            ::std::mem::transmute(prgpsznames),
            ::std::mem::transmute(cpsznames),
            pszevent.into_param().abi(),
            pszdelimiter.into_param().abi(),
            ptisignature.into_param().abi(),
            ::std::mem::transmute(imethodsignature),
            ::std::mem::transmute(isn),
            ::std::mem::transmute(dwcookie),
            &mut result__,
        )
        .from_abi::<IScriptEntry>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetText(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetText<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, psz: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), psz.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetBody(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetBody<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, psz: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), psz.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, psz: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), psz.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetItemName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetItemName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, psz: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), psz.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetSignature(&self, ppti: *mut ::std::option::Option<super::super::Ole::Automation::ITypeInfo>, pimethod: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(ppti), ::std::mem::transmute(pimethod)).ok()
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetSignature<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Ole::Automation::ITypeInfo>>(&self, pti: Param0, imethod: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), pti.into_param().abi(), ::std::mem::transmute(imethod)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRange(&self, pichmin: *mut u32, pcch: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), ::std::mem::transmute(pichmin), ::std::mem::transmute(pcch)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IScriptEntry {
    type Vtable = IScriptEntry_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(183380629, 48315, 4560, [140, 114, 0, 192, 79, 194, 176, 133]);
}
impl ::std::convert::From<IScriptEntry> for IScriptNode {
    fn from(value: IScriptEntry) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IScriptEntry> for IScriptNode {
    fn from(value: &IScriptEntry) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IScriptNode> for IScriptEntry {
    fn into_param(self) -> ::windows::runtime::Param<'a, IScriptNode> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IScriptNode>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IScriptNode> for &IScriptEntry {
    fn into_param(self) -> ::windows::runtime::Param<'a, IScriptNode> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IScriptNode>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IScriptEntry_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppsnparent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pisn: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcookie: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcsn: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, isn: u32, ppsn: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstr: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, isn: u32, dwcookie: u32, pszdelimiter: super::super::super::Foundation::PWSTR, ppse: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    pub  unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszdefaultname: super::super::super::Foundation::PWSTR, prgpsznames: *const super::super::super::Foundation::PWSTR, cpsznames: u32, pszevent: super::super::super::Foundation::PWSTR, pszdelimiter: super::super::super::Foundation::PWSTR, ptisignature: ::windows::runtime::RawPtr, imethodsignature: u32, isn: u32, dwcookie: u32, ppse: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstr: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psz: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstr: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psz: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstr: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psz: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstr: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psz: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_System_Ole_Automation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppti: *mut ::windows::runtime::RawPtr, pimethod: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_System_Ole_Automation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pti: ::windows::runtime::RawPtr, imethod: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pichmin: *mut u32, pcch: *mut u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IScriptInvocationContext(::windows::runtime::IUnknown);
impl IScriptInvocationContext {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContextType(&self) -> ::windows::runtime::Result<SCRIPT_INVOCATION_CONTEXT_TYPE> {
        let mut result__: <SCRIPT_INVOCATION_CONTEXT_TYPE as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<SCRIPT_INVOCATION_CONTEXT_TYPE>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetContextDescription(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetContextObject(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<::windows::runtime::IUnknown>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IScriptInvocationContext {
    type Vtable = IScriptInvocationContext_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1568096695, 44926, 18986, [133, 229, 199, 127, 77, 6, 89, 251]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IScriptInvocationContext_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pinvocationcontexttype: *mut SCRIPT_INVOCATION_CONTEXT_TYPE) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdescription: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppcontextobject: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IScriptNode(::windows::runtime::IUnknown);
impl IScriptNode {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Alive(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Delete(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetParent(&self) -> ::windows::runtime::Result<IScriptNode> {
        let mut result__: <IScriptNode as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IScriptNode>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetIndexInParent(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCookie(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberOfChildren(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetChild(&self, isn: u32) -> ::windows::runtime::Result<IScriptNode> {
        let mut result__: <IScriptNode as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(isn), &mut result__).from_abi::<IScriptNode>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLanguage(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateChildEntry<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, isn: u32, dwcookie: u32, pszdelimiter: Param2) -> ::windows::runtime::Result<IScriptEntry> {
        let mut result__: <IScriptEntry as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(isn), ::std::mem::transmute(dwcookie), pszdelimiter.into_param().abi(), &mut result__).from_abi::<IScriptEntry>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CreateChildHandler<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::Ole::Automation::ITypeInfo>>(
        &self,
        pszdefaultname: Param0,
        prgpsznames: *const super::super::super::Foundation::PWSTR,
        cpsznames: u32,
        pszevent: Param3,
        pszdelimiter: Param4,
        ptisignature: Param5,
        imethodsignature: u32,
        isn: u32,
        dwcookie: u32,
    ) -> ::windows::runtime::Result<IScriptEntry> {
        let mut result__: <IScriptEntry as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            pszdefaultname.into_param().abi(),
            ::std::mem::transmute(prgpsznames),
            ::std::mem::transmute(cpsznames),
            pszevent.into_param().abi(),
            pszdelimiter.into_param().abi(),
            ptisignature.into_param().abi(),
            ::std::mem::transmute(imethodsignature),
            ::std::mem::transmute(isn),
            ::std::mem::transmute(dwcookie),
            &mut result__,
        )
        .from_abi::<IScriptEntry>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IScriptNode {
    type Vtable = IScriptNode_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(183380628, 48315, 4560, [140, 114, 0, 192, 79, 194, 176, 133]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IScriptNode_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppsnparent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pisn: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcookie: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcsn: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, isn: u32, ppsn: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstr: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, isn: u32, dwcookie: u32, pszdelimiter: super::super::super::Foundation::PWSTR, ppse: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    pub  unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszdefaultname: super::super::super::Foundation::PWSTR, prgpsznames: *const super::super::super::Foundation::PWSTR, cpsznames: u32, pszevent: super::super::super::Foundation::PWSTR, pszdelimiter: super::super::super::Foundation::PWSTR, ptisignature: ::windows::runtime::RawPtr, imethodsignature: u32, isn: u32, dwcookie: u32, ppse: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IScriptScriptlet(::windows::runtime::IUnknown);
impl IScriptScriptlet {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Alive(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Delete(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetParent(&self) -> ::windows::runtime::Result<IScriptNode> {
        let mut result__: <IScriptNode as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), &mut result__).from_abi::<IScriptNode>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetIndexInParent(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetCookie(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetNumberOfChildren(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetChild(&self, isn: u32) -> ::windows::runtime::Result<IScriptNode> {
        let mut result__: <IScriptNode as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self), ::std::mem::transmute(isn), &mut result__).from_abi::<IScriptNode>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetLanguage(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn CreateChildEntry<'a, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, isn: u32, dwcookie: u32, pszdelimiter: Param2) -> ::windows::runtime::Result<IScriptEntry> {
        let mut result__: <IScriptEntry as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(::std::mem::transmute_copy(self), ::std::mem::transmute(isn), ::std::mem::transmute(dwcookie), pszdelimiter.into_param().abi(), &mut result__).from_abi::<IScriptEntry>(result__)
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn CreateChildHandler<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param5: ::windows::runtime::IntoParam<'a, super::super::Ole::Automation::ITypeInfo>>(
        &self,
        pszdefaultname: Param0,
        prgpsznames: *const super::super::super::Foundation::PWSTR,
        cpsznames: u32,
        pszevent: Param3,
        pszdelimiter: Param4,
        ptisignature: Param5,
        imethodsignature: u32,
        isn: u32,
        dwcookie: u32,
    ) -> ::windows::runtime::Result<IScriptEntry> {
        let mut result__: <IScriptEntry as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            pszdefaultname.into_param().abi(),
            ::std::mem::transmute(prgpsznames),
            ::std::mem::transmute(cpsznames),
            pszevent.into_param().abi(),
            pszdelimiter.into_param().abi(),
            ptisignature.into_param().abi(),
            ::std::mem::transmute(imethodsignature),
            ::std::mem::transmute(isn),
            ::std::mem::transmute(dwcookie),
            &mut result__,
        )
        .from_abi::<IScriptEntry>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetText(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetText<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, psz: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self), psz.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetBody(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetBody<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, psz: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self), psz.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, psz: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self), psz.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetItemName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetItemName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, psz: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).20)(::std::mem::transmute_copy(self), psz.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn GetSignature(&self, ppti: *mut ::std::option::Option<super::super::Ole::Automation::ITypeInfo>, pimethod: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self), ::std::mem::transmute(ppti), ::std::mem::transmute(pimethod)).ok()
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn SetSignature<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Ole::Automation::ITypeInfo>>(&self, pti: Param0, imethod: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(::std::mem::transmute_copy(self), pti.into_param().abi(), ::std::mem::transmute(imethod)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetRange(&self, pichmin: *mut u32, pcch: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(::std::mem::transmute_copy(self), ::std::mem::transmute(pichmin), ::std::mem::transmute(pcch)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSubItemName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).24)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSubItemName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, psz: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).25)(::std::mem::transmute_copy(self), psz.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetEventName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).26)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetEventName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, psz: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).27)(::std::mem::transmute_copy(self), psz.into_param().abi()).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn GetSimpleEventName(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).28)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn SetSimpleEventName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, psz: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).29)(::std::mem::transmute_copy(self), psz.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IScriptScriptlet {
    type Vtable = IScriptScriptlet_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(183380630, 48315, 4560, [140, 114, 0, 192, 79, 194, 176, 133]);
}
impl ::std::convert::From<IScriptScriptlet> for IScriptEntry {
    fn from(value: IScriptScriptlet) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IScriptScriptlet> for IScriptEntry {
    fn from(value: &IScriptScriptlet) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IScriptEntry> for IScriptScriptlet {
    fn into_param(self) -> ::windows::runtime::Param<'a, IScriptEntry> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IScriptEntry>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IScriptEntry> for &IScriptScriptlet {
    fn into_param(self) -> ::windows::runtime::Param<'a, IScriptEntry> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IScriptEntry>::into(::std::clone::Clone::clone(self)))
    }
}
impl ::std::convert::From<IScriptScriptlet> for IScriptNode {
    fn from(value: IScriptScriptlet) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IScriptScriptlet> for IScriptNode {
    fn from(value: &IScriptScriptlet) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IScriptNode> for IScriptScriptlet {
    fn into_param(self) -> ::windows::runtime::Param<'a, IScriptNode> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IScriptNode>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, IScriptNode> for &IScriptScriptlet {
    fn into_param(self) -> ::windows::runtime::Param<'a, IScriptNode> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<IScriptNode>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IScriptScriptlet_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppsnparent: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pisn: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdwcookie: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pcsn: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, isn: u32, ppsn: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstr: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, isn: u32, dwcookie: u32, pszdelimiter: super::super::super::Foundation::PWSTR, ppse: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation"))]
    pub  unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pszdefaultname: super::super::super::Foundation::PWSTR, prgpsznames: *const super::super::super::Foundation::PWSTR, cpsznames: u32, pszevent: super::super::super::Foundation::PWSTR, pszdelimiter: super::super::super::Foundation::PWSTR, ptisignature: ::windows::runtime::RawPtr, imethodsignature: u32, isn: u32, dwcookie: u32, ppse: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole_Automation")))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstr: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psz: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstr: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psz: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstr: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psz: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstr: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psz: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_System_Ole_Automation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ppti: *mut ::windows::runtime::RawPtr, pimethod: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_System_Ole_Automation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pti: ::windows::runtime::RawPtr, imethod: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pichmin: *mut u32, pcch: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstr: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psz: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstr: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psz: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pbstr: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, psz: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct ISimpleConnectionPoint(::windows::runtime::IUnknown);
impl ISimpleConnectionPoint {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn GetEventCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn DescribeEvents(&self, ievent: u32, cevents: u32, prgid: *mut i32, prgbstr: *mut super::super::super::Foundation::BSTR, pceventsfetched: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(ievent), ::std::mem::transmute(cevents), ::std::mem::transmute(prgid), ::std::mem::transmute(prgbstr), ::std::mem::transmute(pceventsfetched)).ok()
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn Advise<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::Ole::Automation::IDispatch>>(&self, pdisp: Param0) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), pdisp.into_param().abi(), &mut result__).from_abi::<u32>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Unadvise(&self, dwcookie: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(dwcookie)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for ISimpleConnectionPoint {
    type Vtable = ISimpleConnectionPoint_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1368865854, 51980, 4560, [181, 201, 0, 160, 36, 74, 14, 122]);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISimpleConnectionPoint_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pulcount: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, ievent: u32, cevents: u32, prgid: *mut i32, prgbstr: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, pceventsfetched: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_System_Ole_Automation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pdisp: ::windows::runtime::RawPtr, pdwcookie: *mut u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, dwcookie: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IStringDisplayableConcept(::windows::runtime::IUnknown);
impl IStringDisplayableConcept {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn ToDisplayString<'a, Param0: ::windows::runtime::IntoParam<'a, IModelObject>, Param1: ::windows::runtime::IntoParam<'a, IKeyStore>>(&self, contextobject: Param0, metadata: Param1) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), contextobject.into_param().abi(), metadata.into_param().abi(), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IStringDisplayableConcept {
    type Vtable = IStringDisplayableConcept_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3532557680, 27648, 16901, [148, 13, 80, 16, 22, 96, 30, 163]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStringDisplayableConcept_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, contextobject: ::windows::runtime::RawPtr, metadata: ::windows::runtime::RawPtr, displaystring: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct ITridentEventSink(::windows::runtime::IUnknown);
impl ITridentEventSink {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Com`, `Win32_System_Ole_Automation`*"]
    pub unsafe fn FireEvent<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, pstrevent: Param0, pdp: *const super::super::Ole::Automation::DISPPARAMS, pvarres: *mut super::super::Com::VARIANT, pei: *mut super::super::Ole::Automation::EXCEPINFO) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), pstrevent.into_param().abi(), ::std::mem::transmute(pdp), ::std::mem::transmute(pvarres), ::std::mem::transmute(pei)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for ITridentEventSink {
    type Vtable = ITridentEventSink_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(499763792, 1775, 4562, [132, 21, 0, 96, 8, 195, 251, 252]);
}
#[repr(C)]
#[doc(hidden)]
pub struct ITridentEventSink_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pstrevent: super::super::super::Foundation::PWSTR, pdp: *const super::super::Ole::Automation::DISPPARAMS, pvarres: *mut ::std::mem::ManuallyDrop<super::super::Com::VARIANT>, pei: *mut ::std::mem::ManuallyDrop<super::super::Ole::Automation::EXCEPINFO>) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole_Automation")))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IWebAppDiagnosticsObjectInitialization(::windows::runtime::IUnknown);
impl IWebAppDiagnosticsObjectInitialization {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn Initialize<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE_PTR>, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, hpassedhandle: Param0, pdebugapplication: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), hpassedhandle.into_param().abi(), pdebugapplication.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWebAppDiagnosticsObjectInitialization {
    type Vtable = IWebAppDiagnosticsObjectInitialization_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(385825346, 42485, 17195, [182, 37, 142, 142, 22, 245, 126, 21]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebAppDiagnosticsObjectInitialization_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hpassedhandle: super::super::super::Foundation::HANDLE_PTR, pdebugapplication: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IWebAppDiagnosticsSetup(::windows::runtime::IUnknown);
impl IWebAppDiagnosticsSetup {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DiagnosticsSupported(&self) -> ::windows::runtime::Result<i16> {
        let mut result__: <i16 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), &mut result__).from_abi::<i16>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CreateObjectWithSiteAtWebApp(&self, rclsid: *const ::windows::runtime::GUID, dwclscontext: u32, riid: *const ::windows::runtime::GUID, hpasstoobject: usize) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), ::std::mem::transmute(rclsid), ::std::mem::transmute(dwclscontext), ::std::mem::transmute(riid), ::std::mem::transmute(hpasstoobject)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWebAppDiagnosticsSetup {
    type Vtable = IWebAppDiagnosticsSetup_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(932969441, 50889, 17194, [147, 225, 109, 23, 101, 108, 83, 140]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebAppDiagnosticsSetup_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, pretval: *mut i16) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, rclsid: *const ::windows::runtime::GUID, dwclscontext: u32, riid: *const ::windows::runtime::GUID, hpasstoobject: usize) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IWebApplicationActivation(::windows::runtime::IUnknown);
impl IWebApplicationActivation {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn CancelPendingActivation(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWebApplicationActivation {
    type Vtable = IWebApplicationActivation_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3168587998, 13070, 18459, [184, 67, 72, 152, 166, 168, 235, 172]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebApplicationActivation_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IWebApplicationAuthoringMode(::windows::runtime::IUnknown);
impl IWebApplicationAuthoringMode {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn QueryService(&self, guidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::std::ffi::c_void) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(guidservice), ::std::mem::transmute(riid), ::std::mem::transmute(ppvobject)).ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn AuthoringClientBinary(&self) -> ::windows::runtime::Result<super::super::super::Foundation::BSTR> {
        let mut result__: <super::super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Foundation::BSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for IWebApplicationAuthoringMode {
    type Vtable = IWebApplicationAuthoringMode_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1913318035, 6500, 19888, [176, 5, 41, 235, 158, 43, 24, 169]);
}
#[cfg(feature = "Win32_System_Com")]
impl ::std::convert::From<IWebApplicationAuthoringMode> for super::super::Com::IServiceProvider {
    fn from(value: IWebApplicationAuthoringMode) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::std::convert::From<&IWebApplicationAuthoringMode> for super::super::Com::IServiceProvider {
    fn from(value: &IWebApplicationAuthoringMode) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Com")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Com::IServiceProvider> for IWebApplicationAuthoringMode {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Com::IServiceProvider> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<super::super::Com::IServiceProvider>::into(self))
    }
}
#[cfg(feature = "Win32_System_Com")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::Com::IServiceProvider> for &IWebApplicationAuthoringMode {
    fn into_param(self) -> ::windows::runtime::Param<'a, super::super::Com::IServiceProvider> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<super::super::Com::IServiceProvider>::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebApplicationAuthoringMode_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, guidservice: *const ::windows::runtime::GUID, riid: *const ::windows::runtime::GUID, ppvobject: *mut *mut ::std::ffi::c_void) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, designmodedllpath: *mut ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IWebApplicationHost(::windows::runtime::IUnknown);
impl IWebApplicationHost {
    #[cfg(feature = "Win32_Foundation")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
    pub unsafe fn HWND(&self, hwnd: *mut super::super::super::Foundation::HWND) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(hwnd)).ok()
    }
    #[cfg(feature = "Win32_Web_MsHtml")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Web_MsHtml`*"]
    pub unsafe fn Document(&self) -> ::windows::runtime::Result<super::super::super::Web::MsHtml::IHTMLDocument2> {
        let mut result__: <super::super::super::Web::MsHtml::IHTMLDocument2 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), &mut result__).from_abi::<super::super::super::Web::MsHtml::IHTMLDocument2>(result__)
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Refresh(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Advise<'a, Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>>(&self, interfaceid: *const ::windows::runtime::GUID, callback: Param1, cookie: *mut u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), ::std::mem::transmute(interfaceid), callback.into_param().abi(), ::std::mem::transmute(cookie)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn Unadvise(&self, cookie: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self), ::std::mem::transmute(cookie)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWebApplicationHost {
    type Vtable = IWebApplicationHost_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3469464259, 41893, 18249, [150, 129, 32, 233, 22, 28, 103, 148]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebApplicationHost_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, hwnd: *mut super::super::super::Foundation::HWND) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Web_MsHtml")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, htmldocument: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Web_MsHtml"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, interfaceid: *const ::windows::runtime::GUID, callback: ::windows::runtime::RawPtr, cookie: *mut u32) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, cookie: u32) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IWebApplicationNavigationEvents(::windows::runtime::IUnknown);
impl IWebApplicationNavigationEvents {
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Web_MsHtml"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_Web_MsHtml`*"]
    pub unsafe fn BeforeNavigate<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Web::MsHtml::IHTMLWindow2>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, htmlwindow: Param0, url: Param1, navigationflags: u32, targetframename: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), htmlwindow.into_param().abi(), url.into_param().abi(), ::std::mem::transmute(navigationflags), targetframename.into_param().abi()).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Web_MsHtml"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_Web_MsHtml`*"]
    pub unsafe fn NavigateComplete<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Web::MsHtml::IHTMLWindow2>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, htmlwindow: Param0, url: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), htmlwindow.into_param().abi(), url.into_param().abi()).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Web_MsHtml"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_Web_MsHtml`*"]
    pub unsafe fn NavigateError<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Web::MsHtml::IHTMLWindow2>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, htmlwindow: Param0, url: Param1, targetframename: Param2, statuscode: u32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(::std::mem::transmute_copy(self), htmlwindow.into_param().abi(), url.into_param().abi(), targetframename.into_param().abi(), ::std::mem::transmute(statuscode)).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Web_MsHtml"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_Web_MsHtml`*"]
    pub unsafe fn DocumentComplete<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Web::MsHtml::IHTMLWindow2>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(&self, htmlwindow: Param0, url: Param1) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(::std::mem::transmute_copy(self), htmlwindow.into_param().abi(), url.into_param().abi()).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DownloadBegin(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).7)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn DownloadComplete(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWebApplicationNavigationEvents {
    type Vtable = IWebApplicationNavigationEvents_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(3257275858, 54040, 19874, [132, 34, 31, 202, 247, 123, 16, 228]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebApplicationNavigationEvents_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Web_MsHtml"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, htmlwindow: ::windows::runtime::RawPtr, url: super::super::super::Foundation::PWSTR, navigationflags: u32, targetframename: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Web_MsHtml")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Web_MsHtml"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, htmlwindow: ::windows::runtime::RawPtr, url: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Web_MsHtml")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Web_MsHtml"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, htmlwindow: ::windows::runtime::RawPtr, url: super::super::super::Foundation::PWSTR, targetframename: super::super::super::Foundation::PWSTR, statuscode: u32) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Web_MsHtml")))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Web_MsHtml"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, htmlwindow: ::windows::runtime::RawPtr, url: super::super::super::Foundation::PWSTR) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Web_MsHtml")))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IWebApplicationScriptEvents(::windows::runtime::IUnknown);
impl IWebApplicationScriptEvents {
    #[cfg(feature = "Win32_Web_MsHtml")]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Web_MsHtml`*"]
    pub unsafe fn BeforeScriptExecute<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Web::MsHtml::IHTMLWindow2>>(&self, htmlwindow: Param0) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), htmlwindow.into_param().abi()).ok()
    }
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Web_MsHtml"))]
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_Web_MsHtml`*"]
    pub unsafe fn ScriptError<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Web::MsHtml::IHTMLWindow2>, Param1: ::windows::runtime::IntoParam<'a, IActiveScriptError>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(&self, htmlwindow: Param0, scripterror: Param1, url: Param2, errorhandled: Param3) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self), htmlwindow.into_param().abi(), scripterror.into_param().abi(), url.into_param().abi(), errorhandled.into_param().abi()).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWebApplicationScriptEvents {
    type Vtable = IWebApplicationScriptEvents_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2084530584, 5479, 19386, [181, 43, 72, 211, 33, 65, 214, 19]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebApplicationScriptEvents_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Web_MsHtml")] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, htmlwindow: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Web_MsHtml"))] usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Web_MsHtml"))] pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, htmlwindow: ::windows::runtime::RawPtr, scripterror: ::windows::runtime::RawPtr, url: super::super::super::Foundation::PWSTR, errorhandled: super::super::super::Foundation::BOOL) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Web_MsHtml")))] usize,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IWebApplicationUIEvents(::windows::runtime::IUnknown);
impl IWebApplicationUIEvents {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn SecurityProblem(&self, securityproblem: u32, result: *mut ::windows::runtime::HRESULT) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self), ::std::mem::transmute(securityproblem), ::std::mem::transmute(result)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWebApplicationUIEvents {
    type Vtable = IWebApplicationUIEvents_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1529560985, 12940, 16853, [166, 247, 116, 131, 237, 142, 113, 221]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebApplicationUIEvents_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, securityproblem: u32, result: *mut ::windows::runtime::HRESULT) -> ::windows::runtime::HRESULT,
);
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[repr(transparent)]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: clone :: Clone, :: std :: fmt :: Debug, :: windows :: runtime :: DeriveInterface)]
pub struct IWebApplicationUpdateEvents(::windows::runtime::IUnknown);
impl IWebApplicationUpdateEvents {
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnPaint(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(::std::mem::transmute_copy(self)).ok()
    }
    #[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
    pub unsafe fn OnCssChanged(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWebApplicationUpdateEvents {
    type Vtable = IWebApplicationUpdateEvents_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1046079159, 50770, 19887, [173, 94, 22, 254, 179, 80, 205, 227]);
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebApplicationUpdateEvents_abi(
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, iid: &::windows::runtime::GUID, interface: *mut ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Security_WinTrust"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_Security_WinTrust`*"]
#[inline]
pub unsafe fn ImageAddCertificate<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(filehandle: Param0, certificate: *const super::super::super::Security::WinTrust::WIN_CERTIFICATE, index: *mut u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ImageAddCertificate(filehandle: super::super::super::Foundation::HANDLE, certificate: *const super::super::super::Security::WinTrust::WIN_CERTIFICATE, index: *mut u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(ImageAddCertificate(filehandle.into_param().abi(), ::std::mem::transmute(certificate), ::std::mem::transmute(index)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn ImageDirectoryEntryToData<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOLEAN>>(base: *const ::std::ffi::c_void, mappedasimage: Param1, directoryentry: IMAGE_DIRECTORY_ENTRY, size: *mut u32) -> *mut ::std::ffi::c_void {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ImageDirectoryEntryToData(base: *const ::std::ffi::c_void, mappedasimage: super::super::super::Foundation::BOOLEAN, directoryentry: IMAGE_DIRECTORY_ENTRY, size: *mut u32) -> *mut ::std::ffi::c_void;
        }
        ::std::mem::transmute(ImageDirectoryEntryToData(::std::mem::transmute(base), mappedasimage.into_param().abi(), ::std::mem::transmute(directoryentry), ::std::mem::transmute(size)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn ImageDirectoryEntryToDataEx<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOLEAN>>(base: *const ::std::ffi::c_void, mappedasimage: Param1, directoryentry: IMAGE_DIRECTORY_ENTRY, size: *mut u32, foundheader: *mut *mut IMAGE_SECTION_HEADER) -> *mut ::std::ffi::c_void {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ImageDirectoryEntryToDataEx(base: *const ::std::ffi::c_void, mappedasimage: super::super::super::Foundation::BOOLEAN, directoryentry: IMAGE_DIRECTORY_ENTRY, size: *mut u32, foundheader: *mut *mut IMAGE_SECTION_HEADER) -> *mut ::std::ffi::c_void;
        }
        ::std::mem::transmute(ImageDirectoryEntryToDataEx(::std::mem::transmute(base), mappedasimage.into_param().abi(), ::std::mem::transmute(directoryentry), ::std::mem::transmute(size), ::std::mem::transmute(foundheader)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn ImageEnumerateCertificates<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(filehandle: Param0, typefilter: u16, certificatecount: *mut u32, indices: *mut u32, indexcount: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ImageEnumerateCertificates(filehandle: super::super::super::Foundation::HANDLE, typefilter: u16, certificatecount: *mut u32, indices: *mut u32, indexcount: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(ImageEnumerateCertificates(filehandle.into_param().abi(), ::std::mem::transmute(typefilter), ::std::mem::transmute(certificatecount), ::std::mem::transmute(indices), ::std::mem::transmute(indexcount)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Security_WinTrust"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_Security_WinTrust`*"]
#[inline]
pub unsafe fn ImageGetCertificateData<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(filehandle: Param0, certificateindex: u32, certificate: *mut super::super::super::Security::WinTrust::WIN_CERTIFICATE, requiredlength: *mut u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ImageGetCertificateData(filehandle: super::super::super::Foundation::HANDLE, certificateindex: u32, certificate: *mut super::super::super::Security::WinTrust::WIN_CERTIFICATE, requiredlength: *mut u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(ImageGetCertificateData(filehandle.into_param().abi(), ::std::mem::transmute(certificateindex), ::std::mem::transmute(certificate), ::std::mem::transmute(requiredlength)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Security_WinTrust"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_Security_WinTrust`*"]
#[inline]
pub unsafe fn ImageGetCertificateHeader<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(filehandle: Param0, certificateindex: u32, certificateheader: *mut super::super::super::Security::WinTrust::WIN_CERTIFICATE) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ImageGetCertificateHeader(filehandle: super::super::super::Foundation::HANDLE, certificateindex: u32, certificateheader: *mut super::super::super::Security::WinTrust::WIN_CERTIFICATE) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(ImageGetCertificateHeader(filehandle.into_param().abi(), ::std::mem::transmute(certificateindex), ::std::mem::transmute(certificateheader)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn ImageGetDigestStream<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(filehandle: Param0, digestlevel: u32, digestfunction: ::std::option::Option<DIGEST_FUNCTION>, digesthandle: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ImageGetDigestStream(filehandle: super::super::super::Foundation::HANDLE, digestlevel: u32, digestfunction: ::windows::runtime::RawPtr, digesthandle: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(ImageGetDigestStream(filehandle.into_param().abi(), ::std::mem::transmute(digestlevel), ::std::mem::transmute(digestfunction), ::std::mem::transmute(digesthandle)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Kernel`*"]
#[inline]
pub unsafe fn ImageLoad<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(dllname: Param0, dllpath: Param1) -> *mut LOADED_IMAGE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ImageLoad(dllname: super::super::super::Foundation::PSTR, dllpath: super::super::super::Foundation::PSTR) -> *mut LOADED_IMAGE;
        }
        ::std::mem::transmute(ImageLoad(dllname.into_param().abi(), dllpath.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn ImageNtHeader(base: *const ::std::ffi::c_void) -> *mut IMAGE_NT_HEADERS64 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ImageNtHeader(base: *const ::std::ffi::c_void) -> *mut IMAGE_NT_HEADERS64;
        }
        ::std::mem::transmute(ImageNtHeader(::std::mem::transmute(base)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn ImageRemoveCertificate<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(filehandle: Param0, index: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ImageRemoveCertificate(filehandle: super::super::super::Foundation::HANDLE, index: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(ImageRemoveCertificate(filehandle.into_param().abi(), ::std::mem::transmute(index)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn ImageRvaToSection(ntheaders: *const IMAGE_NT_HEADERS64, base: *const ::std::ffi::c_void, rva: u32) -> *mut IMAGE_SECTION_HEADER {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ImageRvaToSection(ntheaders: *const IMAGE_NT_HEADERS64, base: *const ::std::ffi::c_void, rva: u32) -> *mut IMAGE_SECTION_HEADER;
        }
        ::std::mem::transmute(ImageRvaToSection(::std::mem::transmute(ntheaders), ::std::mem::transmute(base), ::std::mem::transmute(rva)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn ImageRvaToVa(ntheaders: *const IMAGE_NT_HEADERS64, base: *const ::std::ffi::c_void, rva: u32, lastrvasection: *const *const IMAGE_SECTION_HEADER) -> *mut ::std::ffi::c_void {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ImageRvaToVa(ntheaders: *const IMAGE_NT_HEADERS64, base: *const ::std::ffi::c_void, rva: u32, lastrvasection: *const *const IMAGE_SECTION_HEADER) -> *mut ::std::ffi::c_void;
        }
        ::std::mem::transmute(ImageRvaToVa(::std::mem::transmute(ntheaders), ::std::mem::transmute(base), ::std::mem::transmute(rva), ::std::mem::transmute(lastrvasection)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Kernel`*"]
#[inline]
pub unsafe fn ImageUnload(loadedimage: *mut LOADED_IMAGE) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ImageUnload(loadedimage: *mut LOADED_IMAGE) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(ImageUnload(::std::mem::transmute(loadedimage)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn ImagehlpApiVersion() -> *mut API_VERSION {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ImagehlpApiVersion() -> *mut API_VERSION;
        }
        ::std::mem::transmute(ImagehlpApiVersion())
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn ImagehlpApiVersionEx(appversion: *const API_VERSION) -> *mut API_VERSION {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ImagehlpApiVersionEx(appversion: *const API_VERSION) -> *mut API_VERSION;
        }
        ::std::mem::transmute(ImagehlpApiVersionEx(::std::mem::transmute(appversion)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn InitializeContext(buffer: *mut ::std::ffi::c_void, contextflags: u32, context: *mut *mut CONTEXT, contextlength: *mut u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn InitializeContext(buffer: *mut ::std::ffi::c_void, contextflags: u32, context: *mut *mut CONTEXT, contextlength: *mut u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(InitializeContext(::std::mem::transmute(buffer), ::std::mem::transmute(contextflags), ::std::mem::transmute(context), ::std::mem::transmute(contextlength)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct IntrinsicKind(pub i32);
pub const IntrinsicVoid: IntrinsicKind = IntrinsicKind(0i32);
pub const IntrinsicBool: IntrinsicKind = IntrinsicKind(1i32);
pub const IntrinsicChar: IntrinsicKind = IntrinsicKind(2i32);
pub const IntrinsicWChar: IntrinsicKind = IntrinsicKind(3i32);
pub const IntrinsicInt: IntrinsicKind = IntrinsicKind(4i32);
pub const IntrinsicUInt: IntrinsicKind = IntrinsicKind(5i32);
pub const IntrinsicLong: IntrinsicKind = IntrinsicKind(6i32);
pub const IntrinsicULong: IntrinsicKind = IntrinsicKind(7i32);
pub const IntrinsicFloat: IntrinsicKind = IntrinsicKind(8i32);
pub const IntrinsicHRESULT: IntrinsicKind = IntrinsicKind(9i32);
pub const IntrinsicChar16: IntrinsicKind = IntrinsicKind(10i32);
pub const IntrinsicChar32: IntrinsicKind = IntrinsicKind(11i32);
impl ::std::convert::From<i32> for IntrinsicKind {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for IntrinsicKind {
    type Abi = Self;
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn IsDebuggerPresent() -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn IsDebuggerPresent() -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(IsDebuggerPresent())
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct JS_PROPERTY_ATTRIBUTES(pub i32);
pub const JS_PROPERTY_ATTRIBUTE_NONE: JS_PROPERTY_ATTRIBUTES = JS_PROPERTY_ATTRIBUTES(0i32);
pub const JS_PROPERTY_HAS_CHILDREN: JS_PROPERTY_ATTRIBUTES = JS_PROPERTY_ATTRIBUTES(1i32);
pub const JS_PROPERTY_FAKE: JS_PROPERTY_ATTRIBUTES = JS_PROPERTY_ATTRIBUTES(2i32);
pub const JS_PROPERTY_METHOD: JS_PROPERTY_ATTRIBUTES = JS_PROPERTY_ATTRIBUTES(4i32);
pub const JS_PROPERTY_READONLY: JS_PROPERTY_ATTRIBUTES = JS_PROPERTY_ATTRIBUTES(8i32);
pub const JS_PROPERTY_NATIVE_WINRT_POINTER: JS_PROPERTY_ATTRIBUTES = JS_PROPERTY_ATTRIBUTES(16i32);
pub const JS_PROPERTY_FRAME_INTRYBLOCK: JS_PROPERTY_ATTRIBUTES = JS_PROPERTY_ATTRIBUTES(32i32);
pub const JS_PROPERTY_FRAME_INCATCHBLOCK: JS_PROPERTY_ATTRIBUTES = JS_PROPERTY_ATTRIBUTES(64i32);
pub const JS_PROPERTY_FRAME_INFINALLYBLOCK: JS_PROPERTY_ATTRIBUTES = JS_PROPERTY_ATTRIBUTES(128i32);
impl ::std::convert::From<i32> for JS_PROPERTY_ATTRIBUTES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for JS_PROPERTY_ATTRIBUTES {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct JS_PROPERTY_MEMBERS(pub i32);
pub const JS_PROPERTY_MEMBERS_ALL: JS_PROPERTY_MEMBERS = JS_PROPERTY_MEMBERS(0i32);
pub const JS_PROPERTY_MEMBERS_ARGUMENTS: JS_PROPERTY_MEMBERS = JS_PROPERTY_MEMBERS(1i32);
impl ::std::convert::From<i32> for JS_PROPERTY_MEMBERS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for JS_PROPERTY_MEMBERS {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct JsDebugPropertyInfo {
    pub name: super::super::super::Foundation::BSTR,
    pub r#type: super::super::super::Foundation::BSTR,
    pub value: super::super::super::Foundation::BSTR,
    pub fullName: super::super::super::Foundation::BSTR,
    pub attr: JS_PROPERTY_ATTRIBUTES,
}
#[cfg(feature = "Win32_Foundation")]
impl JsDebugPropertyInfo {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for JsDebugPropertyInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for JsDebugPropertyInfo {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("JsDebugPropertyInfo").field("name", &self.name).field("r#type", &self.r#type).field("value", &self.value).field("fullName", &self.fullName).field("attr", &self.attr).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for JsDebugPropertyInfo {
    fn eq(&self, other: &Self) -> bool {
        self.name == other.name && self.r#type == other.r#type && self.value == other.value && self.fullName == other.fullName && self.attr == other.attr
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for JsDebugPropertyInfo {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for JsDebugPropertyInfo {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct JsDebugReadMemoryFlags(pub i32);
pub const None: JsDebugReadMemoryFlags = JsDebugReadMemoryFlags(0i32);
pub const JsDebugAllowPartialRead: JsDebugReadMemoryFlags = JsDebugReadMemoryFlags(1i32);
impl ::std::convert::From<i32> for JsDebugReadMemoryFlags {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for JsDebugReadMemoryFlags {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_System_Kernel")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_Kernel`*"]
pub struct KDDEBUGGER_DATA32 {
    pub Header: DBGKD_DEBUG_DATA_HEADER32,
    pub KernBase: u32,
    pub BreakpointWithStatus: u32,
    pub SavedContext: u32,
    pub ThCallbackStack: u16,
    pub NextCallback: u16,
    pub FramePointer: u16,
    pub _bitfield: u16,
    pub KiCallUserMode: u32,
    pub KeUserCallbackDispatcher: u32,
    pub PsLoadedModuleList: u32,
    pub PsActiveProcessHead: u32,
    pub PspCidTable: u32,
    pub ExpSystemResourcesList: u32,
    pub ExpPagedPoolDescriptor: u32,
    pub ExpNumberOfPagedPools: u32,
    pub KeTimeIncrement: u32,
    pub KeBugCheckCallbackListHead: u32,
    pub KiBugcheckData: u32,
    pub IopErrorLogListHead: u32,
    pub ObpRootDirectoryObject: u32,
    pub ObpTypeObjectType: u32,
    pub MmSystemCacheStart: u32,
    pub MmSystemCacheEnd: u32,
    pub MmSystemCacheWs: u32,
    pub MmPfnDatabase: u32,
    pub MmSystemPtesStart: u32,
    pub MmSystemPtesEnd: u32,
    pub MmSubsectionBase: u32,
    pub MmNumberOfPagingFiles: u32,
    pub MmLowestPhysicalPage: u32,
    pub MmHighestPhysicalPage: u32,
    pub MmNumberOfPhysicalPages: u32,
    pub MmMaximumNonPagedPoolInBytes: u32,
    pub MmNonPagedSystemStart: u32,
    pub MmNonPagedPoolStart: u32,
    pub MmNonPagedPoolEnd: u32,
    pub MmPagedPoolStart: u32,
    pub MmPagedPoolEnd: u32,
    pub MmPagedPoolInformation: u32,
    pub MmPageSize: u32,
    pub MmSizeOfPagedPoolInBytes: u32,
    pub MmTotalCommitLimit: u32,
    pub MmTotalCommittedPages: u32,
    pub MmSharedCommit: u32,
    pub MmDriverCommit: u32,
    pub MmProcessCommit: u32,
    pub MmPagedPoolCommit: u32,
    pub MmExtendedCommit: u32,
    pub MmZeroedPageListHead: u32,
    pub MmFreePageListHead: u32,
    pub MmStandbyPageListHead: u32,
    pub MmModifiedPageListHead: u32,
    pub MmModifiedNoWritePageListHead: u32,
    pub MmAvailablePages: u32,
    pub MmResidentAvailablePages: u32,
    pub PoolTrackTable: u32,
    pub NonPagedPoolDescriptor: u32,
    pub MmHighestUserAddress: u32,
    pub MmSystemRangeStart: u32,
    pub MmUserProbeAddress: u32,
    pub KdPrintCircularBuffer: u32,
    pub KdPrintCircularBufferEnd: u32,
    pub KdPrintWritePointer: u32,
    pub KdPrintRolloverCount: u32,
    pub MmLoadedUserImageList: u32,
}
#[cfg(feature = "Win32_System_Kernel")]
impl KDDEBUGGER_DATA32 {}
#[cfg(feature = "Win32_System_Kernel")]
impl ::std::default::Default for KDDEBUGGER_DATA32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_Kernel")]
impl ::std::fmt::Debug for KDDEBUGGER_DATA32 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("KDDEBUGGER_DATA32")
            .field("Header", &self.Header)
            .field("KernBase", &self.KernBase)
            .field("BreakpointWithStatus", &self.BreakpointWithStatus)
            .field("SavedContext", &self.SavedContext)
            .field("ThCallbackStack", &self.ThCallbackStack)
            .field("NextCallback", &self.NextCallback)
            .field("FramePointer", &self.FramePointer)
            .field("_bitfield", &self._bitfield)
            .field("KiCallUserMode", &self.KiCallUserMode)
            .field("KeUserCallbackDispatcher", &self.KeUserCallbackDispatcher)
            .field("PsLoadedModuleList", &self.PsLoadedModuleList)
            .field("PsActiveProcessHead", &self.PsActiveProcessHead)
            .field("PspCidTable", &self.PspCidTable)
            .field("ExpSystemResourcesList", &self.ExpSystemResourcesList)
            .field("ExpPagedPoolDescriptor", &self.ExpPagedPoolDescriptor)
            .field("ExpNumberOfPagedPools", &self.ExpNumberOfPagedPools)
            .field("KeTimeIncrement", &self.KeTimeIncrement)
            .field("KeBugCheckCallbackListHead", &self.KeBugCheckCallbackListHead)
            .field("KiBugcheckData", &self.KiBugcheckData)
            .field("IopErrorLogListHead", &self.IopErrorLogListHead)
            .field("ObpRootDirectoryObject", &self.ObpRootDirectoryObject)
            .field("ObpTypeObjectType", &self.ObpTypeObjectType)
            .field("MmSystemCacheStart", &self.MmSystemCacheStart)
            .field("MmSystemCacheEnd", &self.MmSystemCacheEnd)
            .field("MmSystemCacheWs", &self.MmSystemCacheWs)
            .field("MmPfnDatabase", &self.MmPfnDatabase)
            .field("MmSystemPtesStart", &self.MmSystemPtesStart)
            .field("MmSystemPtesEnd", &self.MmSystemPtesEnd)
            .field("MmSubsectionBase", &self.MmSubsectionBase)
            .field("MmNumberOfPagingFiles", &self.MmNumberOfPagingFiles)
            .field("MmLowestPhysicalPage", &self.MmLowestPhysicalPage)
            .field("MmHighestPhysicalPage", &self.MmHighestPhysicalPage)
            .field("MmNumberOfPhysicalPages", &self.MmNumberOfPhysicalPages)
            .field("MmMaximumNonPagedPoolInBytes", &self.MmMaximumNonPagedPoolInBytes)
            .field("MmNonPagedSystemStart", &self.MmNonPagedSystemStart)
            .field("MmNonPagedPoolStart", &self.MmNonPagedPoolStart)
            .field("MmNonPagedPoolEnd", &self.MmNonPagedPoolEnd)
            .field("MmPagedPoolStart", &self.MmPagedPoolStart)
            .field("MmPagedPoolEnd", &self.MmPagedPoolEnd)
            .field("MmPagedPoolInformation", &self.MmPagedPoolInformation)
            .field("MmPageSize", &self.MmPageSize)
            .field("MmSizeOfPagedPoolInBytes", &self.MmSizeOfPagedPoolInBytes)
            .field("MmTotalCommitLimit", &self.MmTotalCommitLimit)
            .field("MmTotalCommittedPages", &self.MmTotalCommittedPages)
            .field("MmSharedCommit", &self.MmSharedCommit)
            .field("MmDriverCommit", &self.MmDriverCommit)
            .field("MmProcessCommit", &self.MmProcessCommit)
            .field("MmPagedPoolCommit", &self.MmPagedPoolCommit)
            .field("MmExtendedCommit", &self.MmExtendedCommit)
            .field("MmZeroedPageListHead", &self.MmZeroedPageListHead)
            .field("MmFreePageListHead", &self.MmFreePageListHead)
            .field("MmStandbyPageListHead", &self.MmStandbyPageListHead)
            .field("MmModifiedPageListHead", &self.MmModifiedPageListHead)
            .field("MmModifiedNoWritePageListHead", &self.MmModifiedNoWritePageListHead)
            .field("MmAvailablePages", &self.MmAvailablePages)
            .field("MmResidentAvailablePages", &self.MmResidentAvailablePages)
            .field("PoolTrackTable", &self.PoolTrackTable)
            .field("NonPagedPoolDescriptor", &self.NonPagedPoolDescriptor)
            .field("MmHighestUserAddress", &self.MmHighestUserAddress)
            .field("MmSystemRangeStart", &self.MmSystemRangeStart)
            .field("MmUserProbeAddress", &self.MmUserProbeAddress)
            .field("KdPrintCircularBuffer", &self.KdPrintCircularBuffer)
            .field("KdPrintCircularBufferEnd", &self.KdPrintCircularBufferEnd)
            .field("KdPrintWritePointer", &self.KdPrintWritePointer)
            .field("KdPrintRolloverCount", &self.KdPrintRolloverCount)
            .field("MmLoadedUserImageList", &self.MmLoadedUserImageList)
            .finish()
    }
}
#[cfg(feature = "Win32_System_Kernel")]
impl ::std::cmp::PartialEq for KDDEBUGGER_DATA32 {
    fn eq(&self, other: &Self) -> bool {
        self.Header == other.Header
            && self.KernBase == other.KernBase
            && self.BreakpointWithStatus == other.BreakpointWithStatus
            && self.SavedContext == other.SavedContext
            && self.ThCallbackStack == other.ThCallbackStack
            && self.NextCallback == other.NextCallback
            && self.FramePointer == other.FramePointer
            && self._bitfield == other._bitfield
            && self.KiCallUserMode == other.KiCallUserMode
            && self.KeUserCallbackDispatcher == other.KeUserCallbackDispatcher
            && self.PsLoadedModuleList == other.PsLoadedModuleList
            && self.PsActiveProcessHead == other.PsActiveProcessHead
            && self.PspCidTable == other.PspCidTable
            && self.ExpSystemResourcesList == other.ExpSystemResourcesList
            && self.ExpPagedPoolDescriptor == other.ExpPagedPoolDescriptor
            && self.ExpNumberOfPagedPools == other.ExpNumberOfPagedPools
            && self.KeTimeIncrement == other.KeTimeIncrement
            && self.KeBugCheckCallbackListHead == other.KeBugCheckCallbackListHead
            && self.KiBugcheckData == other.KiBugcheckData
            && self.IopErrorLogListHead == other.IopErrorLogListHead
            && self.ObpRootDirectoryObject == other.ObpRootDirectoryObject
            && self.ObpTypeObjectType == other.ObpTypeObjectType
            && self.MmSystemCacheStart == other.MmSystemCacheStart
            && self.MmSystemCacheEnd == other.MmSystemCacheEnd
            && self.MmSystemCacheWs == other.MmSystemCacheWs
            && self.MmPfnDatabase == other.MmPfnDatabase
            && self.MmSystemPtesStart == other.MmSystemPtesStart
            && self.MmSystemPtesEnd == other.MmSystemPtesEnd
            && self.MmSubsectionBase == other.MmSubsectionBase
            && self.MmNumberOfPagingFiles == other.MmNumberOfPagingFiles
            && self.MmLowestPhysicalPage == other.MmLowestPhysicalPage
            && self.MmHighestPhysicalPage == other.MmHighestPhysicalPage
            && self.MmNumberOfPhysicalPages == other.MmNumberOfPhysicalPages
            && self.MmMaximumNonPagedPoolInBytes == other.MmMaximumNonPagedPoolInBytes
            && self.MmNonPagedSystemStart == other.MmNonPagedSystemStart
            && self.MmNonPagedPoolStart == other.MmNonPagedPoolStart
            && self.MmNonPagedPoolEnd == other.MmNonPagedPoolEnd
            && self.MmPagedPoolStart == other.MmPagedPoolStart
            && self.MmPagedPoolEnd == other.MmPagedPoolEnd
            && self.MmPagedPoolInformation == other.MmPagedPoolInformation
            && self.MmPageSize == other.MmPageSize
            && self.MmSizeOfPagedPoolInBytes == other.MmSizeOfPagedPoolInBytes
            && self.MmTotalCommitLimit == other.MmTotalCommitLimit
            && self.MmTotalCommittedPages == other.MmTotalCommittedPages
            && self.MmSharedCommit == other.MmSharedCommit
            && self.MmDriverCommit == other.MmDriverCommit
            && self.MmProcessCommit == other.MmProcessCommit
            && self.MmPagedPoolCommit == other.MmPagedPoolCommit
            && self.MmExtendedCommit == other.MmExtendedCommit
            && self.MmZeroedPageListHead == other.MmZeroedPageListHead
            && self.MmFreePageListHead == other.MmFreePageListHead
            && self.MmStandbyPageListHead == other.MmStandbyPageListHead
            && self.MmModifiedPageListHead == other.MmModifiedPageListHead
            && self.MmModifiedNoWritePageListHead == other.MmModifiedNoWritePageListHead
            && self.MmAvailablePages == other.MmAvailablePages
            && self.MmResidentAvailablePages == other.MmResidentAvailablePages
            && self.PoolTrackTable == other.PoolTrackTable
            && self.NonPagedPoolDescriptor == other.NonPagedPoolDescriptor
            && self.MmHighestUserAddress == other.MmHighestUserAddress
            && self.MmSystemRangeStart == other.MmSystemRangeStart
            && self.MmUserProbeAddress == other.MmUserProbeAddress
            && self.KdPrintCircularBuffer == other.KdPrintCircularBuffer
            && self.KdPrintCircularBufferEnd == other.KdPrintCircularBufferEnd
            && self.KdPrintWritePointer == other.KdPrintWritePointer
            && self.KdPrintRolloverCount == other.KdPrintRolloverCount
            && self.MmLoadedUserImageList == other.MmLoadedUserImageList
    }
}
#[cfg(feature = "Win32_System_Kernel")]
impl ::std::cmp::Eq for KDDEBUGGER_DATA32 {}
#[cfg(feature = "Win32_System_Kernel")]
unsafe impl ::windows::runtime::Abi for KDDEBUGGER_DATA32 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_System_Kernel")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_Kernel`*"]
pub struct KDDEBUGGER_DATA64 {
    pub Header: DBGKD_DEBUG_DATA_HEADER64,
    pub KernBase: u64,
    pub BreakpointWithStatus: u64,
    pub SavedContext: u64,
    pub ThCallbackStack: u16,
    pub NextCallback: u16,
    pub FramePointer: u16,
    pub _bitfield: u16,
    pub KiCallUserMode: u64,
    pub KeUserCallbackDispatcher: u64,
    pub PsLoadedModuleList: u64,
    pub PsActiveProcessHead: u64,
    pub PspCidTable: u64,
    pub ExpSystemResourcesList: u64,
    pub ExpPagedPoolDescriptor: u64,
    pub ExpNumberOfPagedPools: u64,
    pub KeTimeIncrement: u64,
    pub KeBugCheckCallbackListHead: u64,
    pub KiBugcheckData: u64,
    pub IopErrorLogListHead: u64,
    pub ObpRootDirectoryObject: u64,
    pub ObpTypeObjectType: u64,
    pub MmSystemCacheStart: u64,
    pub MmSystemCacheEnd: u64,
    pub MmSystemCacheWs: u64,
    pub MmPfnDatabase: u64,
    pub MmSystemPtesStart: u64,
    pub MmSystemPtesEnd: u64,
    pub MmSubsectionBase: u64,
    pub MmNumberOfPagingFiles: u64,
    pub MmLowestPhysicalPage: u64,
    pub MmHighestPhysicalPage: u64,
    pub MmNumberOfPhysicalPages: u64,
    pub MmMaximumNonPagedPoolInBytes: u64,
    pub MmNonPagedSystemStart: u64,
    pub MmNonPagedPoolStart: u64,
    pub MmNonPagedPoolEnd: u64,
    pub MmPagedPoolStart: u64,
    pub MmPagedPoolEnd: u64,
    pub MmPagedPoolInformation: u64,
    pub MmPageSize: u64,
    pub MmSizeOfPagedPoolInBytes: u64,
    pub MmTotalCommitLimit: u64,
    pub MmTotalCommittedPages: u64,
    pub MmSharedCommit: u64,
    pub MmDriverCommit: u64,
    pub MmProcessCommit: u64,
    pub MmPagedPoolCommit: u64,
    pub MmExtendedCommit: u64,
    pub MmZeroedPageListHead: u64,
    pub MmFreePageListHead: u64,
    pub MmStandbyPageListHead: u64,
    pub MmModifiedPageListHead: u64,
    pub MmModifiedNoWritePageListHead: u64,
    pub MmAvailablePages: u64,
    pub MmResidentAvailablePages: u64,
    pub PoolTrackTable: u64,
    pub NonPagedPoolDescriptor: u64,
    pub MmHighestUserAddress: u64,
    pub MmSystemRangeStart: u64,
    pub MmUserProbeAddress: u64,
    pub KdPrintCircularBuffer: u64,
    pub KdPrintCircularBufferEnd: u64,
    pub KdPrintWritePointer: u64,
    pub KdPrintRolloverCount: u64,
    pub MmLoadedUserImageList: u64,
    pub NtBuildLab: u64,
    pub KiNormalSystemCall: u64,
    pub KiProcessorBlock: u64,
    pub MmUnloadedDrivers: u64,
    pub MmLastUnloadedDriver: u64,
    pub MmTriageActionTaken: u64,
    pub MmSpecialPoolTag: u64,
    pub KernelVerifier: u64,
    pub MmVerifierData: u64,
    pub MmAllocatedNonPagedPool: u64,
    pub MmPeakCommitment: u64,
    pub MmTotalCommitLimitMaximum: u64,
    pub CmNtCSDVersion: u64,
    pub MmPhysicalMemoryBlock: u64,
    pub MmSessionBase: u64,
    pub MmSessionSize: u64,
    pub MmSystemParentTablePage: u64,
    pub MmVirtualTranslationBase: u64,
    pub OffsetKThreadNextProcessor: u16,
    pub OffsetKThreadTeb: u16,
    pub OffsetKThreadKernelStack: u16,
    pub OffsetKThreadInitialStack: u16,
    pub OffsetKThreadApcProcess: u16,
    pub OffsetKThreadState: u16,
    pub OffsetKThreadBStore: u16,
    pub OffsetKThreadBStoreLimit: u16,
    pub SizeEProcess: u16,
    pub OffsetEprocessPeb: u16,
    pub OffsetEprocessParentCID: u16,
    pub OffsetEprocessDirectoryTableBase: u16,
    pub SizePrcb: u16,
    pub OffsetPrcbDpcRoutine: u16,
    pub OffsetPrcbCurrentThread: u16,
    pub OffsetPrcbMhz: u16,
    pub OffsetPrcbCpuType: u16,
    pub OffsetPrcbVendorString: u16,
    pub OffsetPrcbProcStateContext: u16,
    pub OffsetPrcbNumber: u16,
    pub SizeEThread: u16,
    pub L1tfHighPhysicalBitIndex: u8,
    pub L1tfSwizzleBitIndex: u8,
    pub Padding0: u32,
    pub KdPrintCircularBufferPtr: u64,
    pub KdPrintBufferSize: u64,
    pub KeLoaderBlock: u64,
    pub SizePcr: u16,
    pub OffsetPcrSelfPcr: u16,
    pub OffsetPcrCurrentPrcb: u16,
    pub OffsetPcrContainedPrcb: u16,
    pub OffsetPcrInitialBStore: u16,
    pub OffsetPcrBStoreLimit: u16,
    pub OffsetPcrInitialStack: u16,
    pub OffsetPcrStackLimit: u16,
    pub OffsetPrcbPcrPage: u16,
    pub OffsetPrcbProcStateSpecialReg: u16,
    pub GdtR0Code: u16,
    pub GdtR0Data: u16,
    pub GdtR0Pcr: u16,
    pub GdtR3Code: u16,
    pub GdtR3Data: u16,
    pub GdtR3Teb: u16,
    pub GdtLdt: u16,
    pub GdtTss: u16,
    pub Gdt64R3CmCode: u16,
    pub Gdt64R3CmTeb: u16,
    pub IopNumTriageDumpDataBlocks: u64,
    pub IopTriageDumpDataBlocks: u64,
    pub VfCrashDataBlock: u64,
    pub MmBadPagesDetected: u64,
    pub MmZeroedPageSingleBitErrorsDetected: u64,
    pub EtwpDebuggerData: u64,
    pub OffsetPrcbContext: u16,
    pub OffsetPrcbMaxBreakpoints: u16,
    pub OffsetPrcbMaxWatchpoints: u16,
    pub OffsetKThreadStackLimit: u32,
    pub OffsetKThreadStackBase: u32,
    pub OffsetKThreadQueueListEntry: u32,
    pub OffsetEThreadIrpList: u32,
    pub OffsetPrcbIdleThread: u16,
    pub OffsetPrcbNormalDpcState: u16,
    pub OffsetPrcbDpcStack: u16,
    pub OffsetPrcbIsrStack: u16,
    pub SizeKDPC_STACK_FRAME: u16,
    pub OffsetKPriQueueThreadListHead: u16,
    pub OffsetKThreadWaitReason: u16,
    pub Padding1: u16,
    pub PteBase: u64,
    pub RetpolineStubFunctionTable: u64,
    pub RetpolineStubFunctionTableSize: u32,
    pub RetpolineStubOffset: u32,
    pub RetpolineStubSize: u32,
    pub OffsetEProcessMmHotPatchContext: u16,
}
#[cfg(feature = "Win32_System_Kernel")]
impl KDDEBUGGER_DATA64 {}
#[cfg(feature = "Win32_System_Kernel")]
impl ::std::default::Default for KDDEBUGGER_DATA64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_Kernel")]
impl ::std::fmt::Debug for KDDEBUGGER_DATA64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("KDDEBUGGER_DATA64")
            .field("Header", &self.Header)
            .field("KernBase", &self.KernBase)
            .field("BreakpointWithStatus", &self.BreakpointWithStatus)
            .field("SavedContext", &self.SavedContext)
            .field("ThCallbackStack", &self.ThCallbackStack)
            .field("NextCallback", &self.NextCallback)
            .field("FramePointer", &self.FramePointer)
            .field("_bitfield", &self._bitfield)
            .field("KiCallUserMode", &self.KiCallUserMode)
            .field("KeUserCallbackDispatcher", &self.KeUserCallbackDispatcher)
            .field("PsLoadedModuleList", &self.PsLoadedModuleList)
            .field("PsActiveProcessHead", &self.PsActiveProcessHead)
            .field("PspCidTable", &self.PspCidTable)
            .field("ExpSystemResourcesList", &self.ExpSystemResourcesList)
            .field("ExpPagedPoolDescriptor", &self.ExpPagedPoolDescriptor)
            .field("ExpNumberOfPagedPools", &self.ExpNumberOfPagedPools)
            .field("KeTimeIncrement", &self.KeTimeIncrement)
            .field("KeBugCheckCallbackListHead", &self.KeBugCheckCallbackListHead)
            .field("KiBugcheckData", &self.KiBugcheckData)
            .field("IopErrorLogListHead", &self.IopErrorLogListHead)
            .field("ObpRootDirectoryObject", &self.ObpRootDirectoryObject)
            .field("ObpTypeObjectType", &self.ObpTypeObjectType)
            .field("MmSystemCacheStart", &self.MmSystemCacheStart)
            .field("MmSystemCacheEnd", &self.MmSystemCacheEnd)
            .field("MmSystemCacheWs", &self.MmSystemCacheWs)
            .field("MmPfnDatabase", &self.MmPfnDatabase)
            .field("MmSystemPtesStart", &self.MmSystemPtesStart)
            .field("MmSystemPtesEnd", &self.MmSystemPtesEnd)
            .field("MmSubsectionBase", &self.MmSubsectionBase)
            .field("MmNumberOfPagingFiles", &self.MmNumberOfPagingFiles)
            .field("MmLowestPhysicalPage", &self.MmLowestPhysicalPage)
            .field("MmHighestPhysicalPage", &self.MmHighestPhysicalPage)
            .field("MmNumberOfPhysicalPages", &self.MmNumberOfPhysicalPages)
            .field("MmMaximumNonPagedPoolInBytes", &self.MmMaximumNonPagedPoolInBytes)
            .field("MmNonPagedSystemStart", &self.MmNonPagedSystemStart)
            .field("MmNonPagedPoolStart", &self.MmNonPagedPoolStart)
            .field("MmNonPagedPoolEnd", &self.MmNonPagedPoolEnd)
            .field("MmPagedPoolStart", &self.MmPagedPoolStart)
            .field("MmPagedPoolEnd", &self.MmPagedPoolEnd)
            .field("MmPagedPoolInformation", &self.MmPagedPoolInformation)
            .field("MmPageSize", &self.MmPageSize)
            .field("MmSizeOfPagedPoolInBytes", &self.MmSizeOfPagedPoolInBytes)
            .field("MmTotalCommitLimit", &self.MmTotalCommitLimit)
            .field("MmTotalCommittedPages", &self.MmTotalCommittedPages)
            .field("MmSharedCommit", &self.MmSharedCommit)
            .field("MmDriverCommit", &self.MmDriverCommit)
            .field("MmProcessCommit", &self.MmProcessCommit)
            .field("MmPagedPoolCommit", &self.MmPagedPoolCommit)
            .field("MmExtendedCommit", &self.MmExtendedCommit)
            .field("MmZeroedPageListHead", &self.MmZeroedPageListHead)
            .field("MmFreePageListHead", &self.MmFreePageListHead)
            .field("MmStandbyPageListHead", &self.MmStandbyPageListHead)
            .field("MmModifiedPageListHead", &self.MmModifiedPageListHead)
            .field("MmModifiedNoWritePageListHead", &self.MmModifiedNoWritePageListHead)
            .field("MmAvailablePages", &self.MmAvailablePages)
            .field("MmResidentAvailablePages", &self.MmResidentAvailablePages)
            .field("PoolTrackTable", &self.PoolTrackTable)
            .field("NonPagedPoolDescriptor", &self.NonPagedPoolDescriptor)
            .field("MmHighestUserAddress", &self.MmHighestUserAddress)
            .field("MmSystemRangeStart", &self.MmSystemRangeStart)
            .field("MmUserProbeAddress", &self.MmUserProbeAddress)
            .field("KdPrintCircularBuffer", &self.KdPrintCircularBuffer)
            .field("KdPrintCircularBufferEnd", &self.KdPrintCircularBufferEnd)
            .field("KdPrintWritePointer", &self.KdPrintWritePointer)
            .field("KdPrintRolloverCount", &self.KdPrintRolloverCount)
            .field("MmLoadedUserImageList", &self.MmLoadedUserImageList)
            .field("NtBuildLab", &self.NtBuildLab)
            .field("KiNormalSystemCall", &self.KiNormalSystemCall)
            .field("KiProcessorBlock", &self.KiProcessorBlock)
            .field("MmUnloadedDrivers", &self.MmUnloadedDrivers)
            .field("MmLastUnloadedDriver", &self.MmLastUnloadedDriver)
            .field("MmTriageActionTaken", &self.MmTriageActionTaken)
            .field("MmSpecialPoolTag", &self.MmSpecialPoolTag)
            .field("KernelVerifier", &self.KernelVerifier)
            .field("MmVerifierData", &self.MmVerifierData)
            .field("MmAllocatedNonPagedPool", &self.MmAllocatedNonPagedPool)
            .field("MmPeakCommitment", &self.MmPeakCommitment)
            .field("MmTotalCommitLimitMaximum", &self.MmTotalCommitLimitMaximum)
            .field("CmNtCSDVersion", &self.CmNtCSDVersion)
            .field("MmPhysicalMemoryBlock", &self.MmPhysicalMemoryBlock)
            .field("MmSessionBase", &self.MmSessionBase)
            .field("MmSessionSize", &self.MmSessionSize)
            .field("MmSystemParentTablePage", &self.MmSystemParentTablePage)
            .field("MmVirtualTranslationBase", &self.MmVirtualTranslationBase)
            .field("OffsetKThreadNextProcessor", &self.OffsetKThreadNextProcessor)
            .field("OffsetKThreadTeb", &self.OffsetKThreadTeb)
            .field("OffsetKThreadKernelStack", &self.OffsetKThreadKernelStack)
            .field("OffsetKThreadInitialStack", &self.OffsetKThreadInitialStack)
            .field("OffsetKThreadApcProcess", &self.OffsetKThreadApcProcess)
            .field("OffsetKThreadState", &self.OffsetKThreadState)
            .field("OffsetKThreadBStore", &self.OffsetKThreadBStore)
            .field("OffsetKThreadBStoreLimit", &self.OffsetKThreadBStoreLimit)
            .field("SizeEProcess", &self.SizeEProcess)
            .field("OffsetEprocessPeb", &self.OffsetEprocessPeb)
            .field("OffsetEprocessParentCID", &self.OffsetEprocessParentCID)
            .field("OffsetEprocessDirectoryTableBase", &self.OffsetEprocessDirectoryTableBase)
            .field("SizePrcb", &self.SizePrcb)
            .field("OffsetPrcbDpcRoutine", &self.OffsetPrcbDpcRoutine)
            .field("OffsetPrcbCurrentThread", &self.OffsetPrcbCurrentThread)
            .field("OffsetPrcbMhz", &self.OffsetPrcbMhz)
            .field("OffsetPrcbCpuType", &self.OffsetPrcbCpuType)
            .field("OffsetPrcbVendorString", &self.OffsetPrcbVendorString)
            .field("OffsetPrcbProcStateContext", &self.OffsetPrcbProcStateContext)
            .field("OffsetPrcbNumber", &self.OffsetPrcbNumber)
            .field("SizeEThread", &self.SizeEThread)
            .field("L1tfHighPhysicalBitIndex", &self.L1tfHighPhysicalBitIndex)
            .field("L1tfSwizzleBitIndex", &self.L1tfSwizzleBitIndex)
            .field("Padding0", &self.Padding0)
            .field("KdPrintCircularBufferPtr", &self.KdPrintCircularBufferPtr)
            .field("KdPrintBufferSize", &self.KdPrintBufferSize)
            .field("KeLoaderBlock", &self.KeLoaderBlock)
            .field("SizePcr", &self.SizePcr)
            .field("OffsetPcrSelfPcr", &self.OffsetPcrSelfPcr)
            .field("OffsetPcrCurrentPrcb", &self.OffsetPcrCurrentPrcb)
            .field("OffsetPcrContainedPrcb", &self.OffsetPcrContainedPrcb)
            .field("OffsetPcrInitialBStore", &self.OffsetPcrInitialBStore)
            .field("OffsetPcrBStoreLimit", &self.OffsetPcrBStoreLimit)
            .field("OffsetPcrInitialStack", &self.OffsetPcrInitialStack)
            .field("OffsetPcrStackLimit", &self.OffsetPcrStackLimit)
            .field("OffsetPrcbPcrPage", &self.OffsetPrcbPcrPage)
            .field("OffsetPrcbProcStateSpecialReg", &self.OffsetPrcbProcStateSpecialReg)
            .field("GdtR0Code", &self.GdtR0Code)
            .field("GdtR0Data", &self.GdtR0Data)
            .field("GdtR0Pcr", &self.GdtR0Pcr)
            .field("GdtR3Code", &self.GdtR3Code)
            .field("GdtR3Data", &self.GdtR3Data)
            .field("GdtR3Teb", &self.GdtR3Teb)
            .field("GdtLdt", &self.GdtLdt)
            .field("GdtTss", &self.GdtTss)
            .field("Gdt64R3CmCode", &self.Gdt64R3CmCode)
            .field("Gdt64R3CmTeb", &self.Gdt64R3CmTeb)
            .field("IopNumTriageDumpDataBlocks", &self.IopNumTriageDumpDataBlocks)
            .field("IopTriageDumpDataBlocks", &self.IopTriageDumpDataBlocks)
            .field("VfCrashDataBlock", &self.VfCrashDataBlock)
            .field("MmBadPagesDetected", &self.MmBadPagesDetected)
            .field("MmZeroedPageSingleBitErrorsDetected", &self.MmZeroedPageSingleBitErrorsDetected)
            .field("EtwpDebuggerData", &self.EtwpDebuggerData)
            .field("OffsetPrcbContext", &self.OffsetPrcbContext)
            .field("OffsetPrcbMaxBreakpoints", &self.OffsetPrcbMaxBreakpoints)
            .field("OffsetPrcbMaxWatchpoints", &self.OffsetPrcbMaxWatchpoints)
            .field("OffsetKThreadStackLimit", &self.OffsetKThreadStackLimit)
            .field("OffsetKThreadStackBase", &self.OffsetKThreadStackBase)
            .field("OffsetKThreadQueueListEntry", &self.OffsetKThreadQueueListEntry)
            .field("OffsetEThreadIrpList", &self.OffsetEThreadIrpList)
            .field("OffsetPrcbIdleThread", &self.OffsetPrcbIdleThread)
            .field("OffsetPrcbNormalDpcState", &self.OffsetPrcbNormalDpcState)
            .field("OffsetPrcbDpcStack", &self.OffsetPrcbDpcStack)
            .field("OffsetPrcbIsrStack", &self.OffsetPrcbIsrStack)
            .field("SizeKDPC_STACK_FRAME", &self.SizeKDPC_STACK_FRAME)
            .field("OffsetKPriQueueThreadListHead", &self.OffsetKPriQueueThreadListHead)
            .field("OffsetKThreadWaitReason", &self.OffsetKThreadWaitReason)
            .field("Padding1", &self.Padding1)
            .field("PteBase", &self.PteBase)
            .field("RetpolineStubFunctionTable", &self.RetpolineStubFunctionTable)
            .field("RetpolineStubFunctionTableSize", &self.RetpolineStubFunctionTableSize)
            .field("RetpolineStubOffset", &self.RetpolineStubOffset)
            .field("RetpolineStubSize", &self.RetpolineStubSize)
            .field("OffsetEProcessMmHotPatchContext", &self.OffsetEProcessMmHotPatchContext)
            .finish()
    }
}
#[cfg(feature = "Win32_System_Kernel")]
impl ::std::cmp::PartialEq for KDDEBUGGER_DATA64 {
    fn eq(&self, other: &Self) -> bool {
        self.Header == other.Header
            && self.KernBase == other.KernBase
            && self.BreakpointWithStatus == other.BreakpointWithStatus
            && self.SavedContext == other.SavedContext
            && self.ThCallbackStack == other.ThCallbackStack
            && self.NextCallback == other.NextCallback
            && self.FramePointer == other.FramePointer
            && self._bitfield == other._bitfield
            && self.KiCallUserMode == other.KiCallUserMode
            && self.KeUserCallbackDispatcher == other.KeUserCallbackDispatcher
            && self.PsLoadedModuleList == other.PsLoadedModuleList
            && self.PsActiveProcessHead == other.PsActiveProcessHead
            && self.PspCidTable == other.PspCidTable
            && self.ExpSystemResourcesList == other.ExpSystemResourcesList
            && self.ExpPagedPoolDescriptor == other.ExpPagedPoolDescriptor
            && self.ExpNumberOfPagedPools == other.ExpNumberOfPagedPools
            && self.KeTimeIncrement == other.KeTimeIncrement
            && self.KeBugCheckCallbackListHead == other.KeBugCheckCallbackListHead
            && self.KiBugcheckData == other.KiBugcheckData
            && self.IopErrorLogListHead == other.IopErrorLogListHead
            && self.ObpRootDirectoryObject == other.ObpRootDirectoryObject
            && self.ObpTypeObjectType == other.ObpTypeObjectType
            && self.MmSystemCacheStart == other.MmSystemCacheStart
            && self.MmSystemCacheEnd == other.MmSystemCacheEnd
            && self.MmSystemCacheWs == other.MmSystemCacheWs
            && self.MmPfnDatabase == other.MmPfnDatabase
            && self.MmSystemPtesStart == other.MmSystemPtesStart
            && self.MmSystemPtesEnd == other.MmSystemPtesEnd
            && self.MmSubsectionBase == other.MmSubsectionBase
            && self.MmNumberOfPagingFiles == other.MmNumberOfPagingFiles
            && self.MmLowestPhysicalPage == other.MmLowestPhysicalPage
            && self.MmHighestPhysicalPage == other.MmHighestPhysicalPage
            && self.MmNumberOfPhysicalPages == other.MmNumberOfPhysicalPages
            && self.MmMaximumNonPagedPoolInBytes == other.MmMaximumNonPagedPoolInBytes
            && self.MmNonPagedSystemStart == other.MmNonPagedSystemStart
            && self.MmNonPagedPoolStart == other.MmNonPagedPoolStart
            && self.MmNonPagedPoolEnd == other.MmNonPagedPoolEnd
            && self.MmPagedPoolStart == other.MmPagedPoolStart
            && self.MmPagedPoolEnd == other.MmPagedPoolEnd
            && self.MmPagedPoolInformation == other.MmPagedPoolInformation
            && self.MmPageSize == other.MmPageSize
            && self.MmSizeOfPagedPoolInBytes == other.MmSizeOfPagedPoolInBytes
            && self.MmTotalCommitLimit == other.MmTotalCommitLimit
            && self.MmTotalCommittedPages == other.MmTotalCommittedPages
            && self.MmSharedCommit == other.MmSharedCommit
            && self.MmDriverCommit == other.MmDriverCommit
            && self.MmProcessCommit == other.MmProcessCommit
            && self.MmPagedPoolCommit == other.MmPagedPoolCommit
            && self.MmExtendedCommit == other.MmExtendedCommit
            && self.MmZeroedPageListHead == other.MmZeroedPageListHead
            && self.MmFreePageListHead == other.MmFreePageListHead
            && self.MmStandbyPageListHead == other.MmStandbyPageListHead
            && self.MmModifiedPageListHead == other.MmModifiedPageListHead
            && self.MmModifiedNoWritePageListHead == other.MmModifiedNoWritePageListHead
            && self.MmAvailablePages == other.MmAvailablePages
            && self.MmResidentAvailablePages == other.MmResidentAvailablePages
            && self.PoolTrackTable == other.PoolTrackTable
            && self.NonPagedPoolDescriptor == other.NonPagedPoolDescriptor
            && self.MmHighestUserAddress == other.MmHighestUserAddress
            && self.MmSystemRangeStart == other.MmSystemRangeStart
            && self.MmUserProbeAddress == other.MmUserProbeAddress
            && self.KdPrintCircularBuffer == other.KdPrintCircularBuffer
            && self.KdPrintCircularBufferEnd == other.KdPrintCircularBufferEnd
            && self.KdPrintWritePointer == other.KdPrintWritePointer
            && self.KdPrintRolloverCount == other.KdPrintRolloverCount
            && self.MmLoadedUserImageList == other.MmLoadedUserImageList
            && self.NtBuildLab == other.NtBuildLab
            && self.KiNormalSystemCall == other.KiNormalSystemCall
            && self.KiProcessorBlock == other.KiProcessorBlock
            && self.MmUnloadedDrivers == other.MmUnloadedDrivers
            && self.MmLastUnloadedDriver == other.MmLastUnloadedDriver
            && self.MmTriageActionTaken == other.MmTriageActionTaken
            && self.MmSpecialPoolTag == other.MmSpecialPoolTag
            && self.KernelVerifier == other.KernelVerifier
            && self.MmVerifierData == other.MmVerifierData
            && self.MmAllocatedNonPagedPool == other.MmAllocatedNonPagedPool
            && self.MmPeakCommitment == other.MmPeakCommitment
            && self.MmTotalCommitLimitMaximum == other.MmTotalCommitLimitMaximum
            && self.CmNtCSDVersion == other.CmNtCSDVersion
            && self.MmPhysicalMemoryBlock == other.MmPhysicalMemoryBlock
            && self.MmSessionBase == other.MmSessionBase
            && self.MmSessionSize == other.MmSessionSize
            && self.MmSystemParentTablePage == other.MmSystemParentTablePage
            && self.MmVirtualTranslationBase == other.MmVirtualTranslationBase
            && self.OffsetKThreadNextProcessor == other.OffsetKThreadNextProcessor
            && self.OffsetKThreadTeb == other.OffsetKThreadTeb
            && self.OffsetKThreadKernelStack == other.OffsetKThreadKernelStack
            && self.OffsetKThreadInitialStack == other.OffsetKThreadInitialStack
            && self.OffsetKThreadApcProcess == other.OffsetKThreadApcProcess
            && self.OffsetKThreadState == other.OffsetKThreadState
            && self.OffsetKThreadBStore == other.OffsetKThreadBStore
            && self.OffsetKThreadBStoreLimit == other.OffsetKThreadBStoreLimit
            && self.SizeEProcess == other.SizeEProcess
            && self.OffsetEprocessPeb == other.OffsetEprocessPeb
            && self.OffsetEprocessParentCID == other.OffsetEprocessParentCID
            && self.OffsetEprocessDirectoryTableBase == other.OffsetEprocessDirectoryTableBase
            && self.SizePrcb == other.SizePrcb
            && self.OffsetPrcbDpcRoutine == other.OffsetPrcbDpcRoutine
            && self.OffsetPrcbCurrentThread == other.OffsetPrcbCurrentThread
            && self.OffsetPrcbMhz == other.OffsetPrcbMhz
            && self.OffsetPrcbCpuType == other.OffsetPrcbCpuType
            && self.OffsetPrcbVendorString == other.OffsetPrcbVendorString
            && self.OffsetPrcbProcStateContext == other.OffsetPrcbProcStateContext
            && self.OffsetPrcbNumber == other.OffsetPrcbNumber
            && self.SizeEThread == other.SizeEThread
            && self.L1tfHighPhysicalBitIndex == other.L1tfHighPhysicalBitIndex
            && self.L1tfSwizzleBitIndex == other.L1tfSwizzleBitIndex
            && self.Padding0 == other.Padding0
            && self.KdPrintCircularBufferPtr == other.KdPrintCircularBufferPtr
            && self.KdPrintBufferSize == other.KdPrintBufferSize
            && self.KeLoaderBlock == other.KeLoaderBlock
            && self.SizePcr == other.SizePcr
            && self.OffsetPcrSelfPcr == other.OffsetPcrSelfPcr
            && self.OffsetPcrCurrentPrcb == other.OffsetPcrCurrentPrcb
            && self.OffsetPcrContainedPrcb == other.OffsetPcrContainedPrcb
            && self.OffsetPcrInitialBStore == other.OffsetPcrInitialBStore
            && self.OffsetPcrBStoreLimit == other.OffsetPcrBStoreLimit
            && self.OffsetPcrInitialStack == other.OffsetPcrInitialStack
            && self.OffsetPcrStackLimit == other.OffsetPcrStackLimit
            && self.OffsetPrcbPcrPage == other.OffsetPrcbPcrPage
            && self.OffsetPrcbProcStateSpecialReg == other.OffsetPrcbProcStateSpecialReg
            && self.GdtR0Code == other.GdtR0Code
            && self.GdtR0Data == other.GdtR0Data
            && self.GdtR0Pcr == other.GdtR0Pcr
            && self.GdtR3Code == other.GdtR3Code
            && self.GdtR3Data == other.GdtR3Data
            && self.GdtR3Teb == other.GdtR3Teb
            && self.GdtLdt == other.GdtLdt
            && self.GdtTss == other.GdtTss
            && self.Gdt64R3CmCode == other.Gdt64R3CmCode
            && self.Gdt64R3CmTeb == other.Gdt64R3CmTeb
            && self.IopNumTriageDumpDataBlocks == other.IopNumTriageDumpDataBlocks
            && self.IopTriageDumpDataBlocks == other.IopTriageDumpDataBlocks
            && self.VfCrashDataBlock == other.VfCrashDataBlock
            && self.MmBadPagesDetected == other.MmBadPagesDetected
            && self.MmZeroedPageSingleBitErrorsDetected == other.MmZeroedPageSingleBitErrorsDetected
            && self.EtwpDebuggerData == other.EtwpDebuggerData
            && self.OffsetPrcbContext == other.OffsetPrcbContext
            && self.OffsetPrcbMaxBreakpoints == other.OffsetPrcbMaxBreakpoints
            && self.OffsetPrcbMaxWatchpoints == other.OffsetPrcbMaxWatchpoints
            && self.OffsetKThreadStackLimit == other.OffsetKThreadStackLimit
            && self.OffsetKThreadStackBase == other.OffsetKThreadStackBase
            && self.OffsetKThreadQueueListEntry == other.OffsetKThreadQueueListEntry
            && self.OffsetEThreadIrpList == other.OffsetEThreadIrpList
            && self.OffsetPrcbIdleThread == other.OffsetPrcbIdleThread
            && self.OffsetPrcbNormalDpcState == other.OffsetPrcbNormalDpcState
            && self.OffsetPrcbDpcStack == other.OffsetPrcbDpcStack
            && self.OffsetPrcbIsrStack == other.OffsetPrcbIsrStack
            && self.SizeKDPC_STACK_FRAME == other.SizeKDPC_STACK_FRAME
            && self.OffsetKPriQueueThreadListHead == other.OffsetKPriQueueThreadListHead
            && self.OffsetKThreadWaitReason == other.OffsetKThreadWaitReason
            && self.Padding1 == other.Padding1
            && self.PteBase == other.PteBase
            && self.RetpolineStubFunctionTable == other.RetpolineStubFunctionTable
            && self.RetpolineStubFunctionTableSize == other.RetpolineStubFunctionTableSize
            && self.RetpolineStubOffset == other.RetpolineStubOffset
            && self.RetpolineStubSize == other.RetpolineStubSize
            && self.OffsetEProcessMmHotPatchContext == other.OffsetEProcessMmHotPatchContext
    }
}
#[cfg(feature = "Win32_System_Kernel")]
impl ::std::cmp::Eq for KDDEBUGGER_DATA64 {}
#[cfg(feature = "Win32_System_Kernel")]
unsafe impl ::windows::runtime::Abi for KDDEBUGGER_DATA64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct KDHELP {
    pub Thread: u32,
    pub ThCallbackStack: u32,
    pub NextCallback: u32,
    pub FramePointer: u32,
    pub KiCallUserMode: u32,
    pub KeUserCallbackDispatcher: u32,
    pub SystemRangeStart: u32,
    pub ThCallbackBStore: u32,
    pub KiUserExceptionDispatcher: u32,
    pub StackBase: u32,
    pub StackLimit: u32,
    pub Reserved: [u32; 5],
}
impl KDHELP {}
impl ::std::default::Default for KDHELP {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for KDHELP {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("KDHELP")
            .field("Thread", &self.Thread)
            .field("ThCallbackStack", &self.ThCallbackStack)
            .field("NextCallback", &self.NextCallback)
            .field("FramePointer", &self.FramePointer)
            .field("KiCallUserMode", &self.KiCallUserMode)
            .field("KeUserCallbackDispatcher", &self.KeUserCallbackDispatcher)
            .field("SystemRangeStart", &self.SystemRangeStart)
            .field("ThCallbackBStore", &self.ThCallbackBStore)
            .field("KiUserExceptionDispatcher", &self.KiUserExceptionDispatcher)
            .field("StackBase", &self.StackBase)
            .field("StackLimit", &self.StackLimit)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl ::std::cmp::PartialEq for KDHELP {
    fn eq(&self, other: &Self) -> bool {
        self.Thread == other.Thread
            && self.ThCallbackStack == other.ThCallbackStack
            && self.NextCallback == other.NextCallback
            && self.FramePointer == other.FramePointer
            && self.KiCallUserMode == other.KiCallUserMode
            && self.KeUserCallbackDispatcher == other.KeUserCallbackDispatcher
            && self.SystemRangeStart == other.SystemRangeStart
            && self.ThCallbackBStore == other.ThCallbackBStore
            && self.KiUserExceptionDispatcher == other.KiUserExceptionDispatcher
            && self.StackBase == other.StackBase
            && self.StackLimit == other.StackLimit
            && self.Reserved == other.Reserved
    }
}
impl ::std::cmp::Eq for KDHELP {}
unsafe impl ::windows::runtime::Abi for KDHELP {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct KDHELP64 {
    pub Thread: u64,
    pub ThCallbackStack: u32,
    pub ThCallbackBStore: u32,
    pub NextCallback: u32,
    pub FramePointer: u32,
    pub KiCallUserMode: u64,
    pub KeUserCallbackDispatcher: u64,
    pub SystemRangeStart: u64,
    pub KiUserExceptionDispatcher: u64,
    pub StackBase: u64,
    pub StackLimit: u64,
    pub BuildVersion: u32,
    pub RetpolineStubFunctionTableSize: u32,
    pub RetpolineStubFunctionTable: u64,
    pub RetpolineStubOffset: u32,
    pub RetpolineStubSize: u32,
    pub Reserved0: [u64; 2],
}
impl KDHELP64 {}
impl ::std::default::Default for KDHELP64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for KDHELP64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("KDHELP64")
            .field("Thread", &self.Thread)
            .field("ThCallbackStack", &self.ThCallbackStack)
            .field("ThCallbackBStore", &self.ThCallbackBStore)
            .field("NextCallback", &self.NextCallback)
            .field("FramePointer", &self.FramePointer)
            .field("KiCallUserMode", &self.KiCallUserMode)
            .field("KeUserCallbackDispatcher", &self.KeUserCallbackDispatcher)
            .field("SystemRangeStart", &self.SystemRangeStart)
            .field("KiUserExceptionDispatcher", &self.KiUserExceptionDispatcher)
            .field("StackBase", &self.StackBase)
            .field("StackLimit", &self.StackLimit)
            .field("BuildVersion", &self.BuildVersion)
            .field("RetpolineStubFunctionTableSize", &self.RetpolineStubFunctionTableSize)
            .field("RetpolineStubFunctionTable", &self.RetpolineStubFunctionTable)
            .field("RetpolineStubOffset", &self.RetpolineStubOffset)
            .field("RetpolineStubSize", &self.RetpolineStubSize)
            .field("Reserved0", &self.Reserved0)
            .finish()
    }
}
impl ::std::cmp::PartialEq for KDHELP64 {
    fn eq(&self, other: &Self) -> bool {
        self.Thread == other.Thread
            && self.ThCallbackStack == other.ThCallbackStack
            && self.ThCallbackBStore == other.ThCallbackBStore
            && self.NextCallback == other.NextCallback
            && self.FramePointer == other.FramePointer
            && self.KiCallUserMode == other.KiCallUserMode
            && self.KeUserCallbackDispatcher == other.KeUserCallbackDispatcher
            && self.SystemRangeStart == other.SystemRangeStart
            && self.KiUserExceptionDispatcher == other.KiUserExceptionDispatcher
            && self.StackBase == other.StackBase
            && self.StackLimit == other.StackLimit
            && self.BuildVersion == other.BuildVersion
            && self.RetpolineStubFunctionTableSize == other.RetpolineStubFunctionTableSize
            && self.RetpolineStubFunctionTable == other.RetpolineStubFunctionTable
            && self.RetpolineStubOffset == other.RetpolineStubOffset
            && self.RetpolineStubSize == other.RetpolineStubSize
            && self.Reserved0 == other.Reserved0
    }
}
impl ::std::cmp::Eq for KDHELP64 {}
unsafe impl ::windows::runtime::Abi for KDHELP64 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const KD_SECONDARY_VERSION_AMD64_CONTEXT: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const KD_SECONDARY_VERSION_AMD64_OBSOLETE_CONTEXT_1: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const KD_SECONDARY_VERSION_AMD64_OBSOLETE_CONTEXT_2: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const KD_SECONDARY_VERSION_DEFAULT: u32 = 0u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct LDT_ENTRY {
    pub LimitLow: u16,
    pub BaseLow: u16,
    pub HighWord: LDT_ENTRY_0,
}
impl LDT_ENTRY {}
impl ::std::default::Default for LDT_ENTRY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for LDT_ENTRY {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for LDT_ENTRY {}
unsafe impl ::windows::runtime::Abi for LDT_ENTRY {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union LDT_ENTRY_0 {
    pub Bytes: LDT_ENTRY_0_1,
    pub Bits: LDT_ENTRY_0_0,
}
impl LDT_ENTRY_0 {}
impl ::std::default::Default for LDT_ENTRY_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for LDT_ENTRY_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for LDT_ENTRY_0 {}
unsafe impl ::windows::runtime::Abi for LDT_ENTRY_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct LDT_ENTRY_0_0 {
    pub _bitfield: u32,
}
impl LDT_ENTRY_0_0 {}
impl ::std::default::Default for LDT_ENTRY_0_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for LDT_ENTRY_0_0 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_Bits_e__Struct").field("_bitfield", &self._bitfield).finish()
    }
}
impl ::std::cmp::PartialEq for LDT_ENTRY_0_0 {
    fn eq(&self, other: &Self) -> bool {
        self._bitfield == other._bitfield
    }
}
impl ::std::cmp::Eq for LDT_ENTRY_0_0 {}
unsafe impl ::windows::runtime::Abi for LDT_ENTRY_0_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct LDT_ENTRY_0_1 {
    pub BaseMid: u8,
    pub Flags1: u8,
    pub Flags2: u8,
    pub BaseHi: u8,
}
impl LDT_ENTRY_0_1 {}
impl ::std::default::Default for LDT_ENTRY_0_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for LDT_ENTRY_0_1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_Bytes_e__Struct").field("BaseMid", &self.BaseMid).field("Flags1", &self.Flags1).field("Flags2", &self.Flags2).field("BaseHi", &self.BaseHi).finish()
    }
}
impl ::std::cmp::PartialEq for LDT_ENTRY_0_1 {
    fn eq(&self, other: &Self) -> bool {
        self.BaseMid == other.BaseMid && self.Flags1 == other.Flags1 && self.Flags2 == other.Flags2 && self.BaseHi == other.BaseHi
    }
}
impl ::std::cmp::Eq for LDT_ENTRY_0_1 {}
unsafe impl ::windows::runtime::Abi for LDT_ENTRY_0_1 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Kernel`*"]
pub struct LOADED_IMAGE {
    pub ModuleName: super::super::super::Foundation::PSTR,
    pub hFile: super::super::super::Foundation::HANDLE,
    pub MappedAddress: *mut u8,
    pub FileHeader: *mut IMAGE_NT_HEADERS64,
    pub LastRvaSection: *mut IMAGE_SECTION_HEADER,
    pub NumberOfSections: u32,
    pub Sections: *mut IMAGE_SECTION_HEADER,
    pub Characteristics: IMAGE_FILE_CHARACTERISTICS2,
    pub fSystemImage: super::super::super::Foundation::BOOLEAN,
    pub fDOSImage: super::super::super::Foundation::BOOLEAN,
    pub fReadOnly: super::super::super::Foundation::BOOLEAN,
    pub Version: u8,
    pub Links: super::super::Kernel::LIST_ENTRY,
    pub SizeOfImage: u32,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl LOADED_IMAGE {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl ::std::default::Default for LOADED_IMAGE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl ::std::fmt::Debug for LOADED_IMAGE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("LOADED_IMAGE")
            .field("ModuleName", &self.ModuleName)
            .field("hFile", &self.hFile)
            .field("MappedAddress", &self.MappedAddress)
            .field("FileHeader", &self.FileHeader)
            .field("LastRvaSection", &self.LastRvaSection)
            .field("NumberOfSections", &self.NumberOfSections)
            .field("Sections", &self.Sections)
            .field("Characteristics", &self.Characteristics)
            .field("fSystemImage", &self.fSystemImage)
            .field("fDOSImage", &self.fDOSImage)
            .field("fReadOnly", &self.fReadOnly)
            .field("Version", &self.Version)
            .field("Links", &self.Links)
            .field("SizeOfImage", &self.SizeOfImage)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl ::std::cmp::PartialEq for LOADED_IMAGE {
    fn eq(&self, other: &Self) -> bool {
        self.ModuleName == other.ModuleName
            && self.hFile == other.hFile
            && self.MappedAddress == other.MappedAddress
            && self.FileHeader == other.FileHeader
            && self.LastRvaSection == other.LastRvaSection
            && self.NumberOfSections == other.NumberOfSections
            && self.Sections == other.Sections
            && self.Characteristics == other.Characteristics
            && self.fSystemImage == other.fSystemImage
            && self.fDOSImage == other.fDOSImage
            && self.fReadOnly == other.fReadOnly
            && self.Version == other.Version
            && self.Links == other.Links
            && self.SizeOfImage == other.SizeOfImage
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl ::std::cmp::Eq for LOADED_IMAGE {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
unsafe impl ::windows::runtime::Abi for LOADED_IMAGE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct LOAD_DLL_DEBUG_INFO {
    pub hFile: super::super::super::Foundation::HANDLE,
    pub lpBaseOfDll: *mut ::std::ffi::c_void,
    pub dwDebugInfoFileOffset: u32,
    pub nDebugInfoSize: u32,
    pub lpImageName: *mut ::std::ffi::c_void,
    pub fUnicode: u16,
}
#[cfg(feature = "Win32_Foundation")]
impl LOAD_DLL_DEBUG_INFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for LOAD_DLL_DEBUG_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for LOAD_DLL_DEBUG_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("LOAD_DLL_DEBUG_INFO").field("hFile", &self.hFile).field("lpBaseOfDll", &self.lpBaseOfDll).field("dwDebugInfoFileOffset", &self.dwDebugInfoFileOffset).field("nDebugInfoSize", &self.nDebugInfoSize).field("lpImageName", &self.lpImageName).field("fUnicode", &self.fUnicode).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for LOAD_DLL_DEBUG_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.hFile == other.hFile && self.lpBaseOfDll == other.lpBaseOfDll && self.dwDebugInfoFileOffset == other.dwDebugInfoFileOffset && self.nDebugInfoSize == other.nDebugInfoSize && self.lpImageName == other.lpImageName && self.fUnicode == other.fUnicode
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for LOAD_DLL_DEBUG_INFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for LOAD_DLL_DEBUG_INFO {
    type Abi = Self;
}
pub type LPCALL_BACK_USER_INTERRUPT_ROUTINE = unsafe extern "system" fn() -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
pub type LPTOP_LEVEL_EXCEPTION_FILTER = unsafe extern "system" fn(exceptioninfo: *const EXCEPTION_POINTERS) -> i32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct LanguageKind(pub i32);
pub const LanguageUnknown: LanguageKind = LanguageKind(0i32);
pub const LanguageC: LanguageKind = LanguageKind(1i32);
pub const LanguageCPP: LanguageKind = LanguageKind(2i32);
pub const LanguageAssembly: LanguageKind = LanguageKind(3i32);
impl ::std::convert::From<i32> for LanguageKind {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for LanguageKind {
    type Abi = Self;
}
#[cfg(feature = "Win32_System_SystemServices")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn LocateXStateFeature(context: *const CONTEXT, featureid: u32, length: *mut u32) -> *mut ::std::ffi::c_void {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn LocateXStateFeature(context: *const CONTEXT, featureid: u32, length: *mut u32) -> *mut ::std::ffi::c_void;
        }
        ::std::mem::transmute(LocateXStateFeature(::std::mem::transmute(context), ::std::mem::transmute(featureid), ::std::mem::transmute(length)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct Location {
    pub HostDefined: u64,
    pub Offset: u64,
}
impl Location {}
impl ::std::default::Default for Location {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for Location {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("Location").field("HostDefined", &self.HostDefined).field("Offset", &self.Offset).finish()
    }
}
impl ::std::cmp::PartialEq for Location {
    fn eq(&self, other: &Self) -> bool {
        self.HostDefined == other.HostDefined && self.Offset == other.Offset
    }
}
impl ::std::cmp::Eq for Location {}
unsafe impl ::windows::runtime::Abi for Location {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct LocationKind(pub i32);
pub const LocationMember: LocationKind = LocationKind(0i32);
pub const LocationStatic: LocationKind = LocationKind(1i32);
pub const LocationConstant: LocationKind = LocationKind(2i32);
pub const LocationNone: LocationKind = LocationKind(3i32);
impl ::std::convert::From<i32> for LocationKind {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for LocationKind {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const MAX_SYM_NAME: u32 = 2000u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const MEMORY_READ_ERROR: u32 = 1u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_System_Memory", feature = "Win32_System_SystemServices"))]
impl ::std::clone::Clone for MINIDUMP_CALLBACK_INFORMATION {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C, packed(4))]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_System_Memory", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_Storage_FileSystem`, `Win32_System_Memory`, `Win32_System_SystemServices`*"]
pub struct MINIDUMP_CALLBACK_INFORMATION {
    pub CallbackRoutine: ::std::option::Option<MINIDUMP_CALLBACK_ROUTINE>,
    pub CallbackParam: *mut ::std::ffi::c_void,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_System_Memory", feature = "Win32_System_SystemServices"))]
impl MINIDUMP_CALLBACK_INFORMATION {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_System_Memory", feature = "Win32_System_SystemServices"))]
impl ::std::default::Default for MINIDUMP_CALLBACK_INFORMATION {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_System_Memory", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::PartialEq for MINIDUMP_CALLBACK_INFORMATION {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_System_Memory", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::Eq for MINIDUMP_CALLBACK_INFORMATION {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_System_Memory", feature = "Win32_System_SystemServices"))]
unsafe impl ::windows::runtime::Abi for MINIDUMP_CALLBACK_INFORMATION {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_Storage_FileSystem`, `Win32_System_SystemServices`*"]
pub struct MINIDUMP_CALLBACK_INPUT {
    pub ProcessId: u32,
    pub ProcessHandle: super::super::super::Foundation::HANDLE,
    pub CallbackType: u32,
    pub Anonymous: MINIDUMP_CALLBACK_INPUT_0,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_System_SystemServices"))]
impl MINIDUMP_CALLBACK_INPUT {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_System_SystemServices"))]
impl ::std::default::Default for MINIDUMP_CALLBACK_INPUT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::PartialEq for MINIDUMP_CALLBACK_INPUT {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::Eq for MINIDUMP_CALLBACK_INPUT {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_System_SystemServices"))]
unsafe impl ::windows::runtime::Abi for MINIDUMP_CALLBACK_INPUT {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_Storage_FileSystem`, `Win32_System_SystemServices`*"]
pub union MINIDUMP_CALLBACK_INPUT_0 {
    pub Status: ::windows::runtime::HRESULT,
    pub Thread: MINIDUMP_THREAD_CALLBACK,
    pub ThreadEx: MINIDUMP_THREAD_EX_CALLBACK,
    pub Module: MINIDUMP_MODULE_CALLBACK,
    pub IncludeThread: MINIDUMP_INCLUDE_THREAD_CALLBACK,
    pub IncludeModule: MINIDUMP_INCLUDE_MODULE_CALLBACK,
    pub Io: MINIDUMP_IO_CALLBACK,
    pub ReadMemoryFailure: MINIDUMP_READ_MEMORY_FAILURE_CALLBACK,
    pub SecondaryFlags: u32,
    pub VmQuery: MINIDUMP_VM_QUERY_CALLBACK,
    pub VmPreRead: MINIDUMP_VM_PRE_READ_CALLBACK,
    pub VmPostRead: MINIDUMP_VM_POST_READ_CALLBACK,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_System_SystemServices"))]
impl MINIDUMP_CALLBACK_INPUT_0 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_System_SystemServices"))]
impl ::std::default::Default for MINIDUMP_CALLBACK_INPUT_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::PartialEq for MINIDUMP_CALLBACK_INPUT_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::Eq for MINIDUMP_CALLBACK_INPUT_0 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_System_SystemServices"))]
unsafe impl ::windows::runtime::Abi for MINIDUMP_CALLBACK_INPUT_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Memory"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Memory`*"]
pub struct MINIDUMP_CALLBACK_OUTPUT {
    pub Anonymous: MINIDUMP_CALLBACK_OUTPUT_0,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Memory"))]
impl MINIDUMP_CALLBACK_OUTPUT {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Memory"))]
impl ::std::default::Default for MINIDUMP_CALLBACK_OUTPUT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Memory"))]
impl ::std::cmp::PartialEq for MINIDUMP_CALLBACK_OUTPUT {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Memory"))]
impl ::std::cmp::Eq for MINIDUMP_CALLBACK_OUTPUT {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Memory"))]
unsafe impl ::windows::runtime::Abi for MINIDUMP_CALLBACK_OUTPUT {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Memory"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Memory`*"]
pub union MINIDUMP_CALLBACK_OUTPUT_0 {
    pub ModuleWriteFlags: u32,
    pub ThreadWriteFlags: u32,
    pub SecondaryFlags: u32,
    pub Anonymous1: MINIDUMP_CALLBACK_OUTPUT_0_0,
    pub Anonymous2: MINIDUMP_CALLBACK_OUTPUT_0_1,
    pub Handle: super::super::super::Foundation::HANDLE,
    pub Anonymous3: MINIDUMP_CALLBACK_OUTPUT_0_2,
    pub Anonymous4: MINIDUMP_CALLBACK_OUTPUT_0_3,
    pub Anonymous5: MINIDUMP_CALLBACK_OUTPUT_0_4,
    pub Status: ::windows::runtime::HRESULT,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Memory"))]
impl MINIDUMP_CALLBACK_OUTPUT_0 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Memory"))]
impl ::std::default::Default for MINIDUMP_CALLBACK_OUTPUT_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Memory"))]
impl ::std::cmp::PartialEq for MINIDUMP_CALLBACK_OUTPUT_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Memory"))]
impl ::std::cmp::Eq for MINIDUMP_CALLBACK_OUTPUT_0 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Memory"))]
unsafe impl ::windows::runtime::Abi for MINIDUMP_CALLBACK_OUTPUT_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_CALLBACK_OUTPUT_0_0 {
    pub MemoryBase: u64,
    pub MemorySize: u32,
}
impl MINIDUMP_CALLBACK_OUTPUT_0_0 {}
impl ::std::default::Default for MINIDUMP_CALLBACK_OUTPUT_0_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_CALLBACK_OUTPUT_0_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_CALLBACK_OUTPUT_0_0 {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_CALLBACK_OUTPUT_0_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct MINIDUMP_CALLBACK_OUTPUT_0_1 {
    pub CheckCancel: super::super::super::Foundation::BOOL,
    pub Cancel: super::super::super::Foundation::BOOL,
}
#[cfg(feature = "Win32_Foundation")]
impl MINIDUMP_CALLBACK_OUTPUT_0_1 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for MINIDUMP_CALLBACK_OUTPUT_0_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for MINIDUMP_CALLBACK_OUTPUT_0_1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_Anonymous2_e__Struct").field("CheckCancel", &self.CheckCancel).field("Cancel", &self.Cancel).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for MINIDUMP_CALLBACK_OUTPUT_0_1 {
    fn eq(&self, other: &Self) -> bool {
        self.CheckCancel == other.CheckCancel && self.Cancel == other.Cancel
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for MINIDUMP_CALLBACK_OUTPUT_0_1 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for MINIDUMP_CALLBACK_OUTPUT_0_1 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Memory"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Memory`*"]
pub struct MINIDUMP_CALLBACK_OUTPUT_0_2 {
    pub VmRegion: MINIDUMP_MEMORY_INFO,
    pub Continue: super::super::super::Foundation::BOOL,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Memory"))]
impl MINIDUMP_CALLBACK_OUTPUT_0_2 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Memory"))]
impl ::std::default::Default for MINIDUMP_CALLBACK_OUTPUT_0_2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Memory"))]
impl ::std::cmp::PartialEq for MINIDUMP_CALLBACK_OUTPUT_0_2 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Memory"))]
impl ::std::cmp::Eq for MINIDUMP_CALLBACK_OUTPUT_0_2 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Memory"))]
unsafe impl ::windows::runtime::Abi for MINIDUMP_CALLBACK_OUTPUT_0_2 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_System_Memory")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_Memory`*"]
pub struct MINIDUMP_CALLBACK_OUTPUT_0_3 {
    pub VmQueryStatus: ::windows::runtime::HRESULT,
    pub VmQueryResult: MINIDUMP_MEMORY_INFO,
}
#[cfg(feature = "Win32_System_Memory")]
impl MINIDUMP_CALLBACK_OUTPUT_0_3 {}
#[cfg(feature = "Win32_System_Memory")]
impl ::std::default::Default for MINIDUMP_CALLBACK_OUTPUT_0_3 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_Memory")]
impl ::std::cmp::PartialEq for MINIDUMP_CALLBACK_OUTPUT_0_3 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_System_Memory")]
impl ::std::cmp::Eq for MINIDUMP_CALLBACK_OUTPUT_0_3 {}
#[cfg(feature = "Win32_System_Memory")]
unsafe impl ::windows::runtime::Abi for MINIDUMP_CALLBACK_OUTPUT_0_3 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_CALLBACK_OUTPUT_0_4 {
    pub VmReadStatus: ::windows::runtime::HRESULT,
    pub VmReadBytesCompleted: u32,
}
impl MINIDUMP_CALLBACK_OUTPUT_0_4 {}
impl ::std::default::Default for MINIDUMP_CALLBACK_OUTPUT_0_4 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for MINIDUMP_CALLBACK_OUTPUT_0_4 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_Anonymous5_e__Struct").field("VmReadStatus", &self.VmReadStatus).field("VmReadBytesCompleted", &self.VmReadBytesCompleted).finish()
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_CALLBACK_OUTPUT_0_4 {
    fn eq(&self, other: &Self) -> bool {
        self.VmReadStatus == other.VmReadStatus && self.VmReadBytesCompleted == other.VmReadBytesCompleted
    }
}
impl ::std::cmp::Eq for MINIDUMP_CALLBACK_OUTPUT_0_4 {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_CALLBACK_OUTPUT_0_4 {
    type Abi = Self;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_System_Memory", feature = "Win32_System_SystemServices"))]
pub type MINIDUMP_CALLBACK_ROUTINE = unsafe extern "system" fn(callbackparam: *mut ::std::ffi::c_void, callbackinput: *const MINIDUMP_CALLBACK_INPUT, callbackoutput: *mut MINIDUMP_CALLBACK_OUTPUT) -> super::super::super::Foundation::BOOL;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct MINIDUMP_CALLBACK_TYPE(pub i32);
pub const ModuleCallback: MINIDUMP_CALLBACK_TYPE = MINIDUMP_CALLBACK_TYPE(0i32);
pub const ThreadCallback: MINIDUMP_CALLBACK_TYPE = MINIDUMP_CALLBACK_TYPE(1i32);
pub const ThreadExCallback: MINIDUMP_CALLBACK_TYPE = MINIDUMP_CALLBACK_TYPE(2i32);
pub const IncludeThreadCallback: MINIDUMP_CALLBACK_TYPE = MINIDUMP_CALLBACK_TYPE(3i32);
pub const IncludeModuleCallback: MINIDUMP_CALLBACK_TYPE = MINIDUMP_CALLBACK_TYPE(4i32);
pub const MemoryCallback: MINIDUMP_CALLBACK_TYPE = MINIDUMP_CALLBACK_TYPE(5i32);
pub const CancelCallback: MINIDUMP_CALLBACK_TYPE = MINIDUMP_CALLBACK_TYPE(6i32);
pub const WriteKernelMinidumpCallback: MINIDUMP_CALLBACK_TYPE = MINIDUMP_CALLBACK_TYPE(7i32);
pub const KernelMinidumpStatusCallback: MINIDUMP_CALLBACK_TYPE = MINIDUMP_CALLBACK_TYPE(8i32);
pub const RemoveMemoryCallback: MINIDUMP_CALLBACK_TYPE = MINIDUMP_CALLBACK_TYPE(9i32);
pub const IncludeVmRegionCallback: MINIDUMP_CALLBACK_TYPE = MINIDUMP_CALLBACK_TYPE(10i32);
pub const IoStartCallback: MINIDUMP_CALLBACK_TYPE = MINIDUMP_CALLBACK_TYPE(11i32);
pub const IoWriteAllCallback: MINIDUMP_CALLBACK_TYPE = MINIDUMP_CALLBACK_TYPE(12i32);
pub const IoFinishCallback: MINIDUMP_CALLBACK_TYPE = MINIDUMP_CALLBACK_TYPE(13i32);
pub const ReadMemoryFailureCallback: MINIDUMP_CALLBACK_TYPE = MINIDUMP_CALLBACK_TYPE(14i32);
pub const SecondaryFlagsCallback: MINIDUMP_CALLBACK_TYPE = MINIDUMP_CALLBACK_TYPE(15i32);
pub const IsProcessSnapshotCallback: MINIDUMP_CALLBACK_TYPE = MINIDUMP_CALLBACK_TYPE(16i32);
pub const VmStartCallback: MINIDUMP_CALLBACK_TYPE = MINIDUMP_CALLBACK_TYPE(17i32);
pub const VmQueryCallback: MINIDUMP_CALLBACK_TYPE = MINIDUMP_CALLBACK_TYPE(18i32);
pub const VmPreReadCallback: MINIDUMP_CALLBACK_TYPE = MINIDUMP_CALLBACK_TYPE(19i32);
pub const VmPostReadCallback: MINIDUMP_CALLBACK_TYPE = MINIDUMP_CALLBACK_TYPE(20i32);
impl ::std::convert::From<i32> for MINIDUMP_CALLBACK_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MINIDUMP_CALLBACK_TYPE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_DIRECTORY {
    pub StreamType: u32,
    pub Location: MINIDUMP_LOCATION_DESCRIPTOR,
}
impl MINIDUMP_DIRECTORY {}
impl ::std::default::Default for MINIDUMP_DIRECTORY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for MINIDUMP_DIRECTORY {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("MINIDUMP_DIRECTORY").field("StreamType", &self.StreamType).field("Location", &self.Location).finish()
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_DIRECTORY {
    fn eq(&self, other: &Self) -> bool {
        self.StreamType == other.StreamType && self.Location == other.Location
    }
}
impl ::std::cmp::Eq for MINIDUMP_DIRECTORY {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_DIRECTORY {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_EXCEPTION {
    pub ExceptionCode: u32,
    pub ExceptionFlags: u32,
    pub ExceptionRecord: u64,
    pub ExceptionAddress: u64,
    pub NumberParameters: u32,
    pub __unusedAlignment: u32,
    pub ExceptionInformation: [u64; 15],
}
impl MINIDUMP_EXCEPTION {}
impl ::std::default::Default for MINIDUMP_EXCEPTION {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_EXCEPTION {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_EXCEPTION {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_EXCEPTION {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
pub struct MINIDUMP_EXCEPTION_INFORMATION {
    pub ThreadId: u32,
    pub ExceptionPointers: *mut EXCEPTION_POINTERS,
    pub ClientPointers: super::super::super::Foundation::BOOL,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl MINIDUMP_EXCEPTION_INFORMATION {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::default::Default for MINIDUMP_EXCEPTION_INFORMATION {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::PartialEq for MINIDUMP_EXCEPTION_INFORMATION {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::Eq for MINIDUMP_EXCEPTION_INFORMATION {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
unsafe impl ::windows::runtime::Abi for MINIDUMP_EXCEPTION_INFORMATION {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct MINIDUMP_EXCEPTION_INFORMATION64 {
    pub ThreadId: u32,
    pub ExceptionRecord: u64,
    pub ContextRecord: u64,
    pub ClientPointers: super::super::super::Foundation::BOOL,
}
#[cfg(feature = "Win32_Foundation")]
impl MINIDUMP_EXCEPTION_INFORMATION64 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for MINIDUMP_EXCEPTION_INFORMATION64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for MINIDUMP_EXCEPTION_INFORMATION64 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for MINIDUMP_EXCEPTION_INFORMATION64 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for MINIDUMP_EXCEPTION_INFORMATION64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_EXCEPTION_STREAM {
    pub ThreadId: u32,
    pub __alignment: u32,
    pub ExceptionRecord: MINIDUMP_EXCEPTION,
    pub ThreadContext: MINIDUMP_LOCATION_DESCRIPTOR,
}
impl MINIDUMP_EXCEPTION_STREAM {}
impl ::std::default::Default for MINIDUMP_EXCEPTION_STREAM {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_EXCEPTION_STREAM {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_EXCEPTION_STREAM {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_EXCEPTION_STREAM {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_FUNCTION_TABLE_DESCRIPTOR {
    pub MinimumAddress: u64,
    pub MaximumAddress: u64,
    pub BaseAddress: u64,
    pub EntryCount: u32,
    pub SizeOfAlignPad: u32,
}
impl MINIDUMP_FUNCTION_TABLE_DESCRIPTOR {}
impl ::std::default::Default for MINIDUMP_FUNCTION_TABLE_DESCRIPTOR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_FUNCTION_TABLE_DESCRIPTOR {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_FUNCTION_TABLE_DESCRIPTOR {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_FUNCTION_TABLE_DESCRIPTOR {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_FUNCTION_TABLE_STREAM {
    pub SizeOfHeader: u32,
    pub SizeOfDescriptor: u32,
    pub SizeOfNativeDescriptor: u32,
    pub SizeOfFunctionEntry: u32,
    pub NumberOfDescriptors: u32,
    pub SizeOfAlignPad: u32,
}
impl MINIDUMP_FUNCTION_TABLE_STREAM {}
impl ::std::default::Default for MINIDUMP_FUNCTION_TABLE_STREAM {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for MINIDUMP_FUNCTION_TABLE_STREAM {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("MINIDUMP_FUNCTION_TABLE_STREAM")
            .field("SizeOfHeader", &self.SizeOfHeader)
            .field("SizeOfDescriptor", &self.SizeOfDescriptor)
            .field("SizeOfNativeDescriptor", &self.SizeOfNativeDescriptor)
            .field("SizeOfFunctionEntry", &self.SizeOfFunctionEntry)
            .field("NumberOfDescriptors", &self.NumberOfDescriptors)
            .field("SizeOfAlignPad", &self.SizeOfAlignPad)
            .finish()
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_FUNCTION_TABLE_STREAM {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfHeader == other.SizeOfHeader && self.SizeOfDescriptor == other.SizeOfDescriptor && self.SizeOfNativeDescriptor == other.SizeOfNativeDescriptor && self.SizeOfFunctionEntry == other.SizeOfFunctionEntry && self.NumberOfDescriptors == other.NumberOfDescriptors && self.SizeOfAlignPad == other.SizeOfAlignPad
    }
}
impl ::std::cmp::Eq for MINIDUMP_FUNCTION_TABLE_STREAM {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_FUNCTION_TABLE_STREAM {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_HANDLE_DATA_STREAM {
    pub SizeOfHeader: u32,
    pub SizeOfDescriptor: u32,
    pub NumberOfDescriptors: u32,
    pub Reserved: u32,
}
impl MINIDUMP_HANDLE_DATA_STREAM {}
impl ::std::default::Default for MINIDUMP_HANDLE_DATA_STREAM {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for MINIDUMP_HANDLE_DATA_STREAM {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("MINIDUMP_HANDLE_DATA_STREAM").field("SizeOfHeader", &self.SizeOfHeader).field("SizeOfDescriptor", &self.SizeOfDescriptor).field("NumberOfDescriptors", &self.NumberOfDescriptors).field("Reserved", &self.Reserved).finish()
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_HANDLE_DATA_STREAM {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfHeader == other.SizeOfHeader && self.SizeOfDescriptor == other.SizeOfDescriptor && self.NumberOfDescriptors == other.NumberOfDescriptors && self.Reserved == other.Reserved
    }
}
impl ::std::cmp::Eq for MINIDUMP_HANDLE_DATA_STREAM {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_HANDLE_DATA_STREAM {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_HANDLE_DESCRIPTOR {
    pub Handle: u64,
    pub TypeNameRva: u32,
    pub ObjectNameRva: u32,
    pub Attributes: u32,
    pub GrantedAccess: u32,
    pub HandleCount: u32,
    pub PointerCount: u32,
}
impl MINIDUMP_HANDLE_DESCRIPTOR {}
impl ::std::default::Default for MINIDUMP_HANDLE_DESCRIPTOR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_HANDLE_DESCRIPTOR {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_HANDLE_DESCRIPTOR {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_HANDLE_DESCRIPTOR {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_HANDLE_DESCRIPTOR_2 {
    pub Handle: u64,
    pub TypeNameRva: u32,
    pub ObjectNameRva: u32,
    pub Attributes: u32,
    pub GrantedAccess: u32,
    pub HandleCount: u32,
    pub PointerCount: u32,
    pub ObjectInfoRva: u32,
    pub Reserved0: u32,
}
impl MINIDUMP_HANDLE_DESCRIPTOR_2 {}
impl ::std::default::Default for MINIDUMP_HANDLE_DESCRIPTOR_2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_HANDLE_DESCRIPTOR_2 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_HANDLE_DESCRIPTOR_2 {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_HANDLE_DESCRIPTOR_2 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_HANDLE_OBJECT_INFORMATION {
    pub NextInfoRva: u32,
    pub InfoType: u32,
    pub SizeOfInfo: u32,
}
impl MINIDUMP_HANDLE_OBJECT_INFORMATION {}
impl ::std::default::Default for MINIDUMP_HANDLE_OBJECT_INFORMATION {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for MINIDUMP_HANDLE_OBJECT_INFORMATION {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("MINIDUMP_HANDLE_OBJECT_INFORMATION").field("NextInfoRva", &self.NextInfoRva).field("InfoType", &self.InfoType).field("SizeOfInfo", &self.SizeOfInfo).finish()
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_HANDLE_OBJECT_INFORMATION {
    fn eq(&self, other: &Self) -> bool {
        self.NextInfoRva == other.NextInfoRva && self.InfoType == other.InfoType && self.SizeOfInfo == other.SizeOfInfo
    }
}
impl ::std::cmp::Eq for MINIDUMP_HANDLE_OBJECT_INFORMATION {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_HANDLE_OBJECT_INFORMATION {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE(pub i32);
pub const MiniHandleObjectInformationNone: MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE = MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE(0i32);
pub const MiniThreadInformation1: MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE = MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE(1i32);
pub const MiniMutantInformation1: MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE = MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE(2i32);
pub const MiniMutantInformation2: MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE = MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE(3i32);
pub const MiniProcessInformation1: MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE = MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE(4i32);
pub const MiniProcessInformation2: MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE = MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE(5i32);
pub const MiniEventInformation1: MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE = MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE(6i32);
pub const MiniSectionInformation1: MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE = MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE(7i32);
pub const MiniSemaphoreInformation1: MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE = MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE(8i32);
pub const MiniHandleObjectInformationTypeMax: MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE = MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE(9i32);
impl ::std::convert::From<i32> for MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_HANDLE_OPERATION_LIST {
    pub SizeOfHeader: u32,
    pub SizeOfEntry: u32,
    pub NumberOfEntries: u32,
    pub Reserved: u32,
}
impl MINIDUMP_HANDLE_OPERATION_LIST {}
impl ::std::default::Default for MINIDUMP_HANDLE_OPERATION_LIST {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for MINIDUMP_HANDLE_OPERATION_LIST {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("MINIDUMP_HANDLE_OPERATION_LIST").field("SizeOfHeader", &self.SizeOfHeader).field("SizeOfEntry", &self.SizeOfEntry).field("NumberOfEntries", &self.NumberOfEntries).field("Reserved", &self.Reserved).finish()
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_HANDLE_OPERATION_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfHeader == other.SizeOfHeader && self.SizeOfEntry == other.SizeOfEntry && self.NumberOfEntries == other.NumberOfEntries && self.Reserved == other.Reserved
    }
}
impl ::std::cmp::Eq for MINIDUMP_HANDLE_OPERATION_LIST {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_HANDLE_OPERATION_LIST {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_HEADER {
    pub Signature: u32,
    pub Version: u32,
    pub NumberOfStreams: u32,
    pub StreamDirectoryRva: u32,
    pub CheckSum: u32,
    pub Anonymous: MINIDUMP_HEADER_0,
    pub Flags: u64,
}
impl MINIDUMP_HEADER {}
impl ::std::default::Default for MINIDUMP_HEADER {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_HEADER {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_HEADER {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_HEADER {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union MINIDUMP_HEADER_0 {
    pub Reserved: u32,
    pub TimeDateStamp: u32,
}
impl MINIDUMP_HEADER_0 {}
impl ::std::default::Default for MINIDUMP_HEADER_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_HEADER_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_HEADER_0 {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_HEADER_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_INCLUDE_MODULE_CALLBACK {
    pub BaseOfImage: u64,
}
impl MINIDUMP_INCLUDE_MODULE_CALLBACK {}
impl ::std::default::Default for MINIDUMP_INCLUDE_MODULE_CALLBACK {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_INCLUDE_MODULE_CALLBACK {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_INCLUDE_MODULE_CALLBACK {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_INCLUDE_MODULE_CALLBACK {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_INCLUDE_THREAD_CALLBACK {
    pub ThreadId: u32,
}
impl MINIDUMP_INCLUDE_THREAD_CALLBACK {}
impl ::std::default::Default for MINIDUMP_INCLUDE_THREAD_CALLBACK {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for MINIDUMP_INCLUDE_THREAD_CALLBACK {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("MINIDUMP_INCLUDE_THREAD_CALLBACK").field("ThreadId", &self.ThreadId).finish()
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_INCLUDE_THREAD_CALLBACK {
    fn eq(&self, other: &Self) -> bool {
        self.ThreadId == other.ThreadId
    }
}
impl ::std::cmp::Eq for MINIDUMP_INCLUDE_THREAD_CALLBACK {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_INCLUDE_THREAD_CALLBACK {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct MINIDUMP_IO_CALLBACK {
    pub Handle: super::super::super::Foundation::HANDLE,
    pub Offset: u64,
    pub Buffer: *mut ::std::ffi::c_void,
    pub BufferBytes: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl MINIDUMP_IO_CALLBACK {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for MINIDUMP_IO_CALLBACK {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for MINIDUMP_IO_CALLBACK {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for MINIDUMP_IO_CALLBACK {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for MINIDUMP_IO_CALLBACK {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_LOCATION_DESCRIPTOR {
    pub DataSize: u32,
    pub Rva: u32,
}
impl MINIDUMP_LOCATION_DESCRIPTOR {}
impl ::std::default::Default for MINIDUMP_LOCATION_DESCRIPTOR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for MINIDUMP_LOCATION_DESCRIPTOR {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("MINIDUMP_LOCATION_DESCRIPTOR").field("DataSize", &self.DataSize).field("Rva", &self.Rva).finish()
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_LOCATION_DESCRIPTOR {
    fn eq(&self, other: &Self) -> bool {
        self.DataSize == other.DataSize && self.Rva == other.Rva
    }
}
impl ::std::cmp::Eq for MINIDUMP_LOCATION_DESCRIPTOR {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_LOCATION_DESCRIPTOR {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_LOCATION_DESCRIPTOR64 {
    pub DataSize: u64,
    pub Rva: u64,
}
impl MINIDUMP_LOCATION_DESCRIPTOR64 {}
impl ::std::default::Default for MINIDUMP_LOCATION_DESCRIPTOR64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_LOCATION_DESCRIPTOR64 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_LOCATION_DESCRIPTOR64 {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_LOCATION_DESCRIPTOR64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_MEMORY64_LIST {
    pub NumberOfMemoryRanges: u64,
    pub BaseRva: u64,
    pub MemoryRanges: [MINIDUMP_MEMORY_DESCRIPTOR64; 1],
}
impl MINIDUMP_MEMORY64_LIST {}
impl ::std::default::Default for MINIDUMP_MEMORY64_LIST {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_MEMORY64_LIST {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_MEMORY64_LIST {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_MEMORY64_LIST {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_MEMORY_DESCRIPTOR {
    pub StartOfMemoryRange: u64,
    pub Memory: MINIDUMP_LOCATION_DESCRIPTOR,
}
impl MINIDUMP_MEMORY_DESCRIPTOR {}
impl ::std::default::Default for MINIDUMP_MEMORY_DESCRIPTOR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_MEMORY_DESCRIPTOR {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_MEMORY_DESCRIPTOR {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_MEMORY_DESCRIPTOR {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_MEMORY_DESCRIPTOR64 {
    pub StartOfMemoryRange: u64,
    pub DataSize: u64,
}
impl MINIDUMP_MEMORY_DESCRIPTOR64 {}
impl ::std::default::Default for MINIDUMP_MEMORY_DESCRIPTOR64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_MEMORY_DESCRIPTOR64 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_MEMORY_DESCRIPTOR64 {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_MEMORY_DESCRIPTOR64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[cfg(feature = "Win32_System_Memory")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_Memory`*"]
pub struct MINIDUMP_MEMORY_INFO {
    pub BaseAddress: u64,
    pub AllocationBase: u64,
    pub AllocationProtect: u32,
    pub __alignment1: u32,
    pub RegionSize: u64,
    pub State: super::super::Memory::VIRTUAL_ALLOCATION_TYPE,
    pub Protect: u32,
    pub Type: u32,
    pub __alignment2: u32,
}
#[cfg(feature = "Win32_System_Memory")]
impl MINIDUMP_MEMORY_INFO {}
#[cfg(feature = "Win32_System_Memory")]
impl ::std::default::Default for MINIDUMP_MEMORY_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_Memory")]
impl ::std::cmp::PartialEq for MINIDUMP_MEMORY_INFO {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_System_Memory")]
impl ::std::cmp::Eq for MINIDUMP_MEMORY_INFO {}
#[cfg(feature = "Win32_System_Memory")]
unsafe impl ::windows::runtime::Abi for MINIDUMP_MEMORY_INFO {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_MEMORY_INFO_LIST {
    pub SizeOfHeader: u32,
    pub SizeOfEntry: u32,
    pub NumberOfEntries: u64,
}
impl MINIDUMP_MEMORY_INFO_LIST {}
impl ::std::default::Default for MINIDUMP_MEMORY_INFO_LIST {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_MEMORY_INFO_LIST {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_MEMORY_INFO_LIST {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_MEMORY_INFO_LIST {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_MEMORY_LIST {
    pub NumberOfMemoryRanges: u32,
    pub MemoryRanges: [MINIDUMP_MEMORY_DESCRIPTOR; 1],
}
impl MINIDUMP_MEMORY_LIST {}
impl ::std::default::Default for MINIDUMP_MEMORY_LIST {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_MEMORY_LIST {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_MEMORY_LIST {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_MEMORY_LIST {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const MINIDUMP_MISC1_PROCESSOR_POWER_INFO: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const MINIDUMP_MISC3_PROCESS_EXECUTE_FLAGS: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const MINIDUMP_MISC3_PROCESS_INTEGRITY: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const MINIDUMP_MISC3_PROTECTED_PROCESS: u32 = 128u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const MINIDUMP_MISC3_TIMEZONE: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const MINIDUMP_MISC4_BUILDSTRING: u32 = 256u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const MINIDUMP_MISC5_PROCESS_COOKIE: u32 = 512u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_MISC_INFO {
    pub SizeOfInfo: u32,
    pub Flags1: MINIDUMP_MISC_INFO_FLAGS,
    pub ProcessId: u32,
    pub ProcessCreateTime: u32,
    pub ProcessUserTime: u32,
    pub ProcessKernelTime: u32,
}
impl MINIDUMP_MISC_INFO {}
impl ::std::default::Default for MINIDUMP_MISC_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for MINIDUMP_MISC_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("MINIDUMP_MISC_INFO")
            .field("SizeOfInfo", &self.SizeOfInfo)
            .field("Flags1", &self.Flags1)
            .field("ProcessId", &self.ProcessId)
            .field("ProcessCreateTime", &self.ProcessCreateTime)
            .field("ProcessUserTime", &self.ProcessUserTime)
            .field("ProcessKernelTime", &self.ProcessKernelTime)
            .finish()
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_MISC_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfInfo == other.SizeOfInfo && self.Flags1 == other.Flags1 && self.ProcessId == other.ProcessId && self.ProcessCreateTime == other.ProcessCreateTime && self.ProcessUserTime == other.ProcessUserTime && self.ProcessKernelTime == other.ProcessKernelTime
    }
}
impl ::std::cmp::Eq for MINIDUMP_MISC_INFO {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_MISC_INFO {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_MISC_INFO_2 {
    pub SizeOfInfo: u32,
    pub Flags1: u32,
    pub ProcessId: u32,
    pub ProcessCreateTime: u32,
    pub ProcessUserTime: u32,
    pub ProcessKernelTime: u32,
    pub ProcessorMaxMhz: u32,
    pub ProcessorCurrentMhz: u32,
    pub ProcessorMhzLimit: u32,
    pub ProcessorMaxIdleState: u32,
    pub ProcessorCurrentIdleState: u32,
}
impl MINIDUMP_MISC_INFO_2 {}
impl ::std::default::Default for MINIDUMP_MISC_INFO_2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for MINIDUMP_MISC_INFO_2 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("MINIDUMP_MISC_INFO_2")
            .field("SizeOfInfo", &self.SizeOfInfo)
            .field("Flags1", &self.Flags1)
            .field("ProcessId", &self.ProcessId)
            .field("ProcessCreateTime", &self.ProcessCreateTime)
            .field("ProcessUserTime", &self.ProcessUserTime)
            .field("ProcessKernelTime", &self.ProcessKernelTime)
            .field("ProcessorMaxMhz", &self.ProcessorMaxMhz)
            .field("ProcessorCurrentMhz", &self.ProcessorCurrentMhz)
            .field("ProcessorMhzLimit", &self.ProcessorMhzLimit)
            .field("ProcessorMaxIdleState", &self.ProcessorMaxIdleState)
            .field("ProcessorCurrentIdleState", &self.ProcessorCurrentIdleState)
            .finish()
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_MISC_INFO_2 {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfInfo == other.SizeOfInfo
            && self.Flags1 == other.Flags1
            && self.ProcessId == other.ProcessId
            && self.ProcessCreateTime == other.ProcessCreateTime
            && self.ProcessUserTime == other.ProcessUserTime
            && self.ProcessKernelTime == other.ProcessKernelTime
            && self.ProcessorMaxMhz == other.ProcessorMaxMhz
            && self.ProcessorCurrentMhz == other.ProcessorCurrentMhz
            && self.ProcessorMhzLimit == other.ProcessorMhzLimit
            && self.ProcessorMaxIdleState == other.ProcessorMaxIdleState
            && self.ProcessorCurrentIdleState == other.ProcessorCurrentIdleState
    }
}
impl ::std::cmp::Eq for MINIDUMP_MISC_INFO_2 {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_MISC_INFO_2 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Time"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Time`*"]
pub struct MINIDUMP_MISC_INFO_3 {
    pub SizeOfInfo: u32,
    pub Flags1: u32,
    pub ProcessId: u32,
    pub ProcessCreateTime: u32,
    pub ProcessUserTime: u32,
    pub ProcessKernelTime: u32,
    pub ProcessorMaxMhz: u32,
    pub ProcessorCurrentMhz: u32,
    pub ProcessorMhzLimit: u32,
    pub ProcessorMaxIdleState: u32,
    pub ProcessorCurrentIdleState: u32,
    pub ProcessIntegrityLevel: u32,
    pub ProcessExecuteFlags: u32,
    pub ProtectedProcess: u32,
    pub TimeZoneId: u32,
    pub TimeZone: super::super::Time::TIME_ZONE_INFORMATION,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Time"))]
impl MINIDUMP_MISC_INFO_3 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Time"))]
impl ::std::default::Default for MINIDUMP_MISC_INFO_3 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Time"))]
impl ::std::fmt::Debug for MINIDUMP_MISC_INFO_3 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("MINIDUMP_MISC_INFO_3")
            .field("SizeOfInfo", &self.SizeOfInfo)
            .field("Flags1", &self.Flags1)
            .field("ProcessId", &self.ProcessId)
            .field("ProcessCreateTime", &self.ProcessCreateTime)
            .field("ProcessUserTime", &self.ProcessUserTime)
            .field("ProcessKernelTime", &self.ProcessKernelTime)
            .field("ProcessorMaxMhz", &self.ProcessorMaxMhz)
            .field("ProcessorCurrentMhz", &self.ProcessorCurrentMhz)
            .field("ProcessorMhzLimit", &self.ProcessorMhzLimit)
            .field("ProcessorMaxIdleState", &self.ProcessorMaxIdleState)
            .field("ProcessorCurrentIdleState", &self.ProcessorCurrentIdleState)
            .field("ProcessIntegrityLevel", &self.ProcessIntegrityLevel)
            .field("ProcessExecuteFlags", &self.ProcessExecuteFlags)
            .field("ProtectedProcess", &self.ProtectedProcess)
            .field("TimeZoneId", &self.TimeZoneId)
            .field("TimeZone", &self.TimeZone)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Time"))]
impl ::std::cmp::PartialEq for MINIDUMP_MISC_INFO_3 {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfInfo == other.SizeOfInfo
            && self.Flags1 == other.Flags1
            && self.ProcessId == other.ProcessId
            && self.ProcessCreateTime == other.ProcessCreateTime
            && self.ProcessUserTime == other.ProcessUserTime
            && self.ProcessKernelTime == other.ProcessKernelTime
            && self.ProcessorMaxMhz == other.ProcessorMaxMhz
            && self.ProcessorCurrentMhz == other.ProcessorCurrentMhz
            && self.ProcessorMhzLimit == other.ProcessorMhzLimit
            && self.ProcessorMaxIdleState == other.ProcessorMaxIdleState
            && self.ProcessorCurrentIdleState == other.ProcessorCurrentIdleState
            && self.ProcessIntegrityLevel == other.ProcessIntegrityLevel
            && self.ProcessExecuteFlags == other.ProcessExecuteFlags
            && self.ProtectedProcess == other.ProtectedProcess
            && self.TimeZoneId == other.TimeZoneId
            && self.TimeZone == other.TimeZone
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Time"))]
impl ::std::cmp::Eq for MINIDUMP_MISC_INFO_3 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Time"))]
unsafe impl ::windows::runtime::Abi for MINIDUMP_MISC_INFO_3 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Time"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Time`*"]
pub struct MINIDUMP_MISC_INFO_4 {
    pub SizeOfInfo: u32,
    pub Flags1: u32,
    pub ProcessId: u32,
    pub ProcessCreateTime: u32,
    pub ProcessUserTime: u32,
    pub ProcessKernelTime: u32,
    pub ProcessorMaxMhz: u32,
    pub ProcessorCurrentMhz: u32,
    pub ProcessorMhzLimit: u32,
    pub ProcessorMaxIdleState: u32,
    pub ProcessorCurrentIdleState: u32,
    pub ProcessIntegrityLevel: u32,
    pub ProcessExecuteFlags: u32,
    pub ProtectedProcess: u32,
    pub TimeZoneId: u32,
    pub TimeZone: super::super::Time::TIME_ZONE_INFORMATION,
    pub BuildString: [u16; 260],
    pub DbgBldStr: [u16; 40],
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Time"))]
impl MINIDUMP_MISC_INFO_4 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Time"))]
impl ::std::default::Default for MINIDUMP_MISC_INFO_4 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Time"))]
impl ::std::fmt::Debug for MINIDUMP_MISC_INFO_4 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("MINIDUMP_MISC_INFO_4")
            .field("SizeOfInfo", &self.SizeOfInfo)
            .field("Flags1", &self.Flags1)
            .field("ProcessId", &self.ProcessId)
            .field("ProcessCreateTime", &self.ProcessCreateTime)
            .field("ProcessUserTime", &self.ProcessUserTime)
            .field("ProcessKernelTime", &self.ProcessKernelTime)
            .field("ProcessorMaxMhz", &self.ProcessorMaxMhz)
            .field("ProcessorCurrentMhz", &self.ProcessorCurrentMhz)
            .field("ProcessorMhzLimit", &self.ProcessorMhzLimit)
            .field("ProcessorMaxIdleState", &self.ProcessorMaxIdleState)
            .field("ProcessorCurrentIdleState", &self.ProcessorCurrentIdleState)
            .field("ProcessIntegrityLevel", &self.ProcessIntegrityLevel)
            .field("ProcessExecuteFlags", &self.ProcessExecuteFlags)
            .field("ProtectedProcess", &self.ProtectedProcess)
            .field("TimeZoneId", &self.TimeZoneId)
            .field("TimeZone", &self.TimeZone)
            .field("BuildString", &self.BuildString)
            .field("DbgBldStr", &self.DbgBldStr)
            .finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Time"))]
impl ::std::cmp::PartialEq for MINIDUMP_MISC_INFO_4 {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfInfo == other.SizeOfInfo
            && self.Flags1 == other.Flags1
            && self.ProcessId == other.ProcessId
            && self.ProcessCreateTime == other.ProcessCreateTime
            && self.ProcessUserTime == other.ProcessUserTime
            && self.ProcessKernelTime == other.ProcessKernelTime
            && self.ProcessorMaxMhz == other.ProcessorMaxMhz
            && self.ProcessorCurrentMhz == other.ProcessorCurrentMhz
            && self.ProcessorMhzLimit == other.ProcessorMhzLimit
            && self.ProcessorMaxIdleState == other.ProcessorMaxIdleState
            && self.ProcessorCurrentIdleState == other.ProcessorCurrentIdleState
            && self.ProcessIntegrityLevel == other.ProcessIntegrityLevel
            && self.ProcessExecuteFlags == other.ProcessExecuteFlags
            && self.ProtectedProcess == other.ProtectedProcess
            && self.TimeZoneId == other.TimeZoneId
            && self.TimeZone == other.TimeZone
            && self.BuildString == other.BuildString
            && self.DbgBldStr == other.DbgBldStr
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Time"))]
impl ::std::cmp::Eq for MINIDUMP_MISC_INFO_4 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Time"))]
unsafe impl ::windows::runtime::Abi for MINIDUMP_MISC_INFO_4 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices", feature = "Win32_System_Time"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`, `Win32_System_Time`*"]
pub struct MINIDUMP_MISC_INFO_5 {
    pub SizeOfInfo: u32,
    pub Flags1: u32,
    pub ProcessId: u32,
    pub ProcessCreateTime: u32,
    pub ProcessUserTime: u32,
    pub ProcessKernelTime: u32,
    pub ProcessorMaxMhz: u32,
    pub ProcessorCurrentMhz: u32,
    pub ProcessorMhzLimit: u32,
    pub ProcessorMaxIdleState: u32,
    pub ProcessorCurrentIdleState: u32,
    pub ProcessIntegrityLevel: u32,
    pub ProcessExecuteFlags: u32,
    pub ProtectedProcess: u32,
    pub TimeZoneId: u32,
    pub TimeZone: super::super::Time::TIME_ZONE_INFORMATION,
    pub BuildString: [u16; 260],
    pub DbgBldStr: [u16; 40],
    pub XStateData: XSTATE_CONFIG_FEATURE_MSC_INFO,
    pub ProcessCookie: u32,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices", feature = "Win32_System_Time"))]
impl MINIDUMP_MISC_INFO_5 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices", feature = "Win32_System_Time"))]
impl ::std::default::Default for MINIDUMP_MISC_INFO_5 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices", feature = "Win32_System_Time"))]
impl ::std::cmp::PartialEq for MINIDUMP_MISC_INFO_5 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices", feature = "Win32_System_Time"))]
impl ::std::cmp::Eq for MINIDUMP_MISC_INFO_5 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices", feature = "Win32_System_Time"))]
unsafe impl ::windows::runtime::Abi for MINIDUMP_MISC_INFO_5 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct MINIDUMP_MISC_INFO_FLAGS(pub u32);
pub const MINIDUMP_MISC1_PROCESS_ID: MINIDUMP_MISC_INFO_FLAGS = MINIDUMP_MISC_INFO_FLAGS(1u32);
pub const MINIDUMP_MISC1_PROCESS_TIMES: MINIDUMP_MISC_INFO_FLAGS = MINIDUMP_MISC_INFO_FLAGS(2u32);
impl ::std::convert::From<u32> for MINIDUMP_MISC_INFO_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MINIDUMP_MISC_INFO_FLAGS {
    type Abi = Self;
}
impl ::std::ops::BitOr for MINIDUMP_MISC_INFO_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for MINIDUMP_MISC_INFO_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for MINIDUMP_MISC_INFO_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for MINIDUMP_MISC_INFO_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for MINIDUMP_MISC_INFO_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[cfg(feature = "Win32_Storage_FileSystem")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Storage_FileSystem`*"]
pub struct MINIDUMP_MODULE {
    pub BaseOfImage: u64,
    pub SizeOfImage: u32,
    pub CheckSum: u32,
    pub TimeDateStamp: u32,
    pub ModuleNameRva: u32,
    pub VersionInfo: super::super::super::Storage::FileSystem::VS_FIXEDFILEINFO,
    pub CvRecord: MINIDUMP_LOCATION_DESCRIPTOR,
    pub MiscRecord: MINIDUMP_LOCATION_DESCRIPTOR,
    pub Reserved0: u64,
    pub Reserved1: u64,
}
#[cfg(feature = "Win32_Storage_FileSystem")]
impl MINIDUMP_MODULE {}
#[cfg(feature = "Win32_Storage_FileSystem")]
impl ::std::default::Default for MINIDUMP_MODULE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Storage_FileSystem")]
impl ::std::cmp::PartialEq for MINIDUMP_MODULE {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Storage_FileSystem")]
impl ::std::cmp::Eq for MINIDUMP_MODULE {}
#[cfg(feature = "Win32_Storage_FileSystem")]
unsafe impl ::windows::runtime::Abi for MINIDUMP_MODULE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_Storage_FileSystem`*"]
pub struct MINIDUMP_MODULE_CALLBACK {
    pub FullPath: super::super::super::Foundation::PWSTR,
    pub BaseOfImage: u64,
    pub SizeOfImage: u32,
    pub CheckSum: u32,
    pub TimeDateStamp: u32,
    pub VersionInfo: super::super::super::Storage::FileSystem::VS_FIXEDFILEINFO,
    pub CvRecord: *mut ::std::ffi::c_void,
    pub SizeOfCvRecord: u32,
    pub MiscRecord: *mut ::std::ffi::c_void,
    pub SizeOfMiscRecord: u32,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem"))]
impl MINIDUMP_MODULE_CALLBACK {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem"))]
impl ::std::default::Default for MINIDUMP_MODULE_CALLBACK {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem"))]
impl ::std::cmp::PartialEq for MINIDUMP_MODULE_CALLBACK {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem"))]
impl ::std::cmp::Eq for MINIDUMP_MODULE_CALLBACK {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem"))]
unsafe impl ::windows::runtime::Abi for MINIDUMP_MODULE_CALLBACK {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Storage_FileSystem")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Storage_FileSystem`*"]
pub struct MINIDUMP_MODULE_LIST {
    pub NumberOfModules: u32,
    pub Modules: [MINIDUMP_MODULE; 1],
}
#[cfg(feature = "Win32_Storage_FileSystem")]
impl MINIDUMP_MODULE_LIST {}
#[cfg(feature = "Win32_Storage_FileSystem")]
impl ::std::default::Default for MINIDUMP_MODULE_LIST {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Storage_FileSystem")]
impl ::std::cmp::PartialEq for MINIDUMP_MODULE_LIST {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Storage_FileSystem")]
impl ::std::cmp::Eq for MINIDUMP_MODULE_LIST {}
#[cfg(feature = "Win32_Storage_FileSystem")]
unsafe impl ::windows::runtime::Abi for MINIDUMP_MODULE_LIST {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const MINIDUMP_PROCESS_VM_COUNTERS: u32 = 1u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_PROCESS_VM_COUNTERS_1 {
    pub Revision: u16,
    pub PageFaultCount: u32,
    pub PeakWorkingSetSize: u64,
    pub WorkingSetSize: u64,
    pub QuotaPeakPagedPoolUsage: u64,
    pub QuotaPagedPoolUsage: u64,
    pub QuotaPeakNonPagedPoolUsage: u64,
    pub QuotaNonPagedPoolUsage: u64,
    pub PagefileUsage: u64,
    pub PeakPagefileUsage: u64,
    pub PrivateUsage: u64,
}
impl MINIDUMP_PROCESS_VM_COUNTERS_1 {}
impl ::std::default::Default for MINIDUMP_PROCESS_VM_COUNTERS_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_PROCESS_VM_COUNTERS_1 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_PROCESS_VM_COUNTERS_1 {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_PROCESS_VM_COUNTERS_1 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_PROCESS_VM_COUNTERS_2 {
    pub Revision: u16,
    pub Flags: u16,
    pub PageFaultCount: u32,
    pub PeakWorkingSetSize: u64,
    pub WorkingSetSize: u64,
    pub QuotaPeakPagedPoolUsage: u64,
    pub QuotaPagedPoolUsage: u64,
    pub QuotaPeakNonPagedPoolUsage: u64,
    pub QuotaNonPagedPoolUsage: u64,
    pub PagefileUsage: u64,
    pub PeakPagefileUsage: u64,
    pub PeakVirtualSize: u64,
    pub VirtualSize: u64,
    pub PrivateUsage: u64,
    pub PrivateWorkingSetSize: u64,
    pub SharedCommitUsage: u64,
    pub JobSharedCommitUsage: u64,
    pub JobPrivateCommitUsage: u64,
    pub JobPeakPrivateCommitUsage: u64,
    pub JobPrivateCommitLimit: u64,
    pub JobTotalCommitLimit: u64,
}
impl MINIDUMP_PROCESS_VM_COUNTERS_2 {}
impl ::std::default::Default for MINIDUMP_PROCESS_VM_COUNTERS_2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_PROCESS_VM_COUNTERS_2 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_PROCESS_VM_COUNTERS_2 {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_PROCESS_VM_COUNTERS_2 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const MINIDUMP_PROCESS_VM_COUNTERS_EX: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const MINIDUMP_PROCESS_VM_COUNTERS_EX2: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const MINIDUMP_PROCESS_VM_COUNTERS_JOB: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const MINIDUMP_PROCESS_VM_COUNTERS_VIRTUALSIZE: u32 = 2u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_READ_MEMORY_FAILURE_CALLBACK {
    pub Offset: u64,
    pub Bytes: u32,
    pub FailureStatus: ::windows::runtime::HRESULT,
}
impl MINIDUMP_READ_MEMORY_FAILURE_CALLBACK {}
impl ::std::default::Default for MINIDUMP_READ_MEMORY_FAILURE_CALLBACK {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_READ_MEMORY_FAILURE_CALLBACK {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_READ_MEMORY_FAILURE_CALLBACK {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_READ_MEMORY_FAILURE_CALLBACK {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct MINIDUMP_SECONDARY_FLAGS(pub i32);
pub const MiniSecondaryWithoutPowerInfo: MINIDUMP_SECONDARY_FLAGS = MINIDUMP_SECONDARY_FLAGS(1i32);
pub const MiniSecondaryValidFlags: MINIDUMP_SECONDARY_FLAGS = MINIDUMP_SECONDARY_FLAGS(1i32);
impl ::std::convert::From<i32> for MINIDUMP_SECONDARY_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MINIDUMP_SECONDARY_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct MINIDUMP_STREAM_TYPE(pub i32);
pub const UnusedStream: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(0i32);
pub const ReservedStream0: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(1i32);
pub const ReservedStream1: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(2i32);
pub const ThreadListStream: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(3i32);
pub const ModuleListStream: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(4i32);
pub const MemoryListStream: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(5i32);
pub const ExceptionStream: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(6i32);
pub const SystemInfoStream: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(7i32);
pub const ThreadExListStream: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(8i32);
pub const Memory64ListStream: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(9i32);
pub const CommentStreamA: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(10i32);
pub const CommentStreamW: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(11i32);
pub const HandleDataStream: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(12i32);
pub const FunctionTableStream: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(13i32);
pub const UnloadedModuleListStream: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(14i32);
pub const MiscInfoStream: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(15i32);
pub const MemoryInfoListStream: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(16i32);
pub const ThreadInfoListStream: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(17i32);
pub const HandleOperationListStream: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(18i32);
pub const TokenStream: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(19i32);
pub const JavaScriptDataStream: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(20i32);
pub const SystemMemoryInfoStream: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(21i32);
pub const ProcessVmCountersStream: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(22i32);
pub const IptTraceStream: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(23i32);
pub const ThreadNamesStream: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(24i32);
pub const ceStreamNull: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(32768i32);
pub const ceStreamSystemInfo: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(32769i32);
pub const ceStreamException: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(32770i32);
pub const ceStreamModuleList: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(32771i32);
pub const ceStreamProcessList: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(32772i32);
pub const ceStreamThreadList: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(32773i32);
pub const ceStreamThreadContextList: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(32774i32);
pub const ceStreamThreadCallStackList: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(32775i32);
pub const ceStreamMemoryVirtualList: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(32776i32);
pub const ceStreamMemoryPhysicalList: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(32777i32);
pub const ceStreamBucketParameters: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(32778i32);
pub const ceStreamProcessModuleMap: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(32779i32);
pub const ceStreamDiagnosisList: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(32780i32);
pub const LastReservedStream: MINIDUMP_STREAM_TYPE = MINIDUMP_STREAM_TYPE(65535i32);
impl ::std::convert::From<i32> for MINIDUMP_STREAM_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MINIDUMP_STREAM_TYPE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_STRING {
    pub Length: u32,
    pub Buffer: [u16; 1],
}
impl MINIDUMP_STRING {}
impl ::std::default::Default for MINIDUMP_STRING {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for MINIDUMP_STRING {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("MINIDUMP_STRING").field("Length", &self.Length).field("Buffer", &self.Buffer).finish()
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_STRING {
    fn eq(&self, other: &Self) -> bool {
        self.Length == other.Length && self.Buffer == other.Buffer
    }
}
impl ::std::cmp::Eq for MINIDUMP_STRING {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_STRING {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const MINIDUMP_SYSMEMINFO1_BASICPERF: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const MINIDUMP_SYSMEMINFO1_FILECACHE_TRANSITIONREPURPOSECOUNT_FLAGS: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const MINIDUMP_SYSMEMINFO1_PERF_CCTOTALDIRTYPAGES_CCDIRTYPAGETHRESHOLD: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const MINIDUMP_SYSMEMINFO1_PERF_RESIDENTAVAILABLEPAGES_SHAREDCOMMITPAGES: u32 = 8u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_SYSTEM_BASIC_INFORMATION {
    pub TimerResolution: u32,
    pub PageSize: u32,
    pub NumberOfPhysicalPages: u32,
    pub LowestPhysicalPageNumber: u32,
    pub HighestPhysicalPageNumber: u32,
    pub AllocationGranularity: u32,
    pub MinimumUserModeAddress: u64,
    pub MaximumUserModeAddress: u64,
    pub ActiveProcessorsAffinityMask: u64,
    pub NumberOfProcessors: u32,
}
impl MINIDUMP_SYSTEM_BASIC_INFORMATION {}
impl ::std::default::Default for MINIDUMP_SYSTEM_BASIC_INFORMATION {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_SYSTEM_BASIC_INFORMATION {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_SYSTEM_BASIC_INFORMATION {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_SYSTEM_BASIC_INFORMATION {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION {
    pub AvailablePages: u64,
    pub CommittedPages: u64,
    pub CommitLimit: u64,
    pub PeakCommitment: u64,
}
impl MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION {}
impl ::std::default::Default for MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_SYSTEM_FILECACHE_INFORMATION {
    pub CurrentSize: u64,
    pub PeakSize: u64,
    pub PageFaultCount: u32,
    pub MinimumWorkingSet: u64,
    pub MaximumWorkingSet: u64,
    pub CurrentSizeIncludingTransitionInPages: u64,
    pub PeakSizeIncludingTransitionInPages: u64,
    pub TransitionRePurposeCount: u32,
    pub Flags: u32,
}
impl MINIDUMP_SYSTEM_FILECACHE_INFORMATION {}
impl ::std::default::Default for MINIDUMP_SYSTEM_FILECACHE_INFORMATION {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_SYSTEM_FILECACHE_INFORMATION {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_SYSTEM_FILECACHE_INFORMATION {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_SYSTEM_FILECACHE_INFORMATION {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_SYSTEM_INFO {
    pub ProcessorArchitecture: PROCESSOR_ARCHITECTURE,
    pub ProcessorLevel: u16,
    pub ProcessorRevision: u16,
    pub Anonymous1: MINIDUMP_SYSTEM_INFO_0,
    pub MajorVersion: u32,
    pub MinorVersion: u32,
    pub BuildNumber: u32,
    pub PlatformId: VER_PLATFORM,
    pub CSDVersionRva: u32,
    pub Anonymous2: MINIDUMP_SYSTEM_INFO_1,
    pub Cpu: CPU_INFORMATION,
}
impl MINIDUMP_SYSTEM_INFO {}
impl ::std::default::Default for MINIDUMP_SYSTEM_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_SYSTEM_INFO {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_SYSTEM_INFO {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_SYSTEM_INFO {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union MINIDUMP_SYSTEM_INFO_0 {
    pub Reserved0: u16,
    pub Anonymous: MINIDUMP_SYSTEM_INFO_0_0,
}
impl MINIDUMP_SYSTEM_INFO_0 {}
impl ::std::default::Default for MINIDUMP_SYSTEM_INFO_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_SYSTEM_INFO_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_SYSTEM_INFO_0 {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_SYSTEM_INFO_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_SYSTEM_INFO_0_0 {
    pub NumberOfProcessors: u8,
    pub ProductType: u8,
}
impl MINIDUMP_SYSTEM_INFO_0_0 {}
impl ::std::default::Default for MINIDUMP_SYSTEM_INFO_0_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for MINIDUMP_SYSTEM_INFO_0_0 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_Anonymous_e__Struct").field("NumberOfProcessors", &self.NumberOfProcessors).field("ProductType", &self.ProductType).finish()
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_SYSTEM_INFO_0_0 {
    fn eq(&self, other: &Self) -> bool {
        self.NumberOfProcessors == other.NumberOfProcessors && self.ProductType == other.ProductType
    }
}
impl ::std::cmp::Eq for MINIDUMP_SYSTEM_INFO_0_0 {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_SYSTEM_INFO_0_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union MINIDUMP_SYSTEM_INFO_1 {
    pub Reserved1: u32,
    pub Anonymous: MINIDUMP_SYSTEM_INFO_1_0,
}
impl MINIDUMP_SYSTEM_INFO_1 {}
impl ::std::default::Default for MINIDUMP_SYSTEM_INFO_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_SYSTEM_INFO_1 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_SYSTEM_INFO_1 {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_SYSTEM_INFO_1 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_SYSTEM_INFO_1_0 {
    pub SuiteMask: u16,
    pub Reserved2: u16,
}
impl MINIDUMP_SYSTEM_INFO_1_0 {}
impl ::std::default::Default for MINIDUMP_SYSTEM_INFO_1_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for MINIDUMP_SYSTEM_INFO_1_0 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_Anonymous_e__Struct").field("SuiteMask", &self.SuiteMask).field("Reserved2", &self.Reserved2).finish()
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_SYSTEM_INFO_1_0 {
    fn eq(&self, other: &Self) -> bool {
        self.SuiteMask == other.SuiteMask && self.Reserved2 == other.Reserved2
    }
}
impl ::std::cmp::Eq for MINIDUMP_SYSTEM_INFO_1_0 {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_SYSTEM_INFO_1_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_SYSTEM_MEMORY_INFO_1 {
    pub Revision: u16,
    pub Flags: u16,
    pub BasicInfo: MINIDUMP_SYSTEM_BASIC_INFORMATION,
    pub FileCacheInfo: MINIDUMP_SYSTEM_FILECACHE_INFORMATION,
    pub BasicPerfInfo: MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION,
    pub PerfInfo: MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION,
}
impl MINIDUMP_SYSTEM_MEMORY_INFO_1 {}
impl ::std::default::Default for MINIDUMP_SYSTEM_MEMORY_INFO_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_SYSTEM_MEMORY_INFO_1 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_SYSTEM_MEMORY_INFO_1 {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_SYSTEM_MEMORY_INFO_1 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION {
    pub IdleProcessTime: u64,
    pub IoReadTransferCount: u64,
    pub IoWriteTransferCount: u64,
    pub IoOtherTransferCount: u64,
    pub IoReadOperationCount: u32,
    pub IoWriteOperationCount: u32,
    pub IoOtherOperationCount: u32,
    pub AvailablePages: u32,
    pub CommittedPages: u32,
    pub CommitLimit: u32,
    pub PeakCommitment: u32,
    pub PageFaultCount: u32,
    pub CopyOnWriteCount: u32,
    pub TransitionCount: u32,
    pub CacheTransitionCount: u32,
    pub DemandZeroCount: u32,
    pub PageReadCount: u32,
    pub PageReadIoCount: u32,
    pub CacheReadCount: u32,
    pub CacheIoCount: u32,
    pub DirtyPagesWriteCount: u32,
    pub DirtyWriteIoCount: u32,
    pub MappedPagesWriteCount: u32,
    pub MappedWriteIoCount: u32,
    pub PagedPoolPages: u32,
    pub NonPagedPoolPages: u32,
    pub PagedPoolAllocs: u32,
    pub PagedPoolFrees: u32,
    pub NonPagedPoolAllocs: u32,
    pub NonPagedPoolFrees: u32,
    pub FreeSystemPtes: u32,
    pub ResidentSystemCodePage: u32,
    pub TotalSystemDriverPages: u32,
    pub TotalSystemCodePages: u32,
    pub NonPagedPoolLookasideHits: u32,
    pub PagedPoolLookasideHits: u32,
    pub AvailablePagedPoolPages: u32,
    pub ResidentSystemCachePage: u32,
    pub ResidentPagedPoolPage: u32,
    pub ResidentSystemDriverPage: u32,
    pub CcFastReadNoWait: u32,
    pub CcFastReadWait: u32,
    pub CcFastReadResourceMiss: u32,
    pub CcFastReadNotPossible: u32,
    pub CcFastMdlReadNoWait: u32,
    pub CcFastMdlReadWait: u32,
    pub CcFastMdlReadResourceMiss: u32,
    pub CcFastMdlReadNotPossible: u32,
    pub CcMapDataNoWait: u32,
    pub CcMapDataWait: u32,
    pub CcMapDataNoWaitMiss: u32,
    pub CcMapDataWaitMiss: u32,
    pub CcPinMappedDataCount: u32,
    pub CcPinReadNoWait: u32,
    pub CcPinReadWait: u32,
    pub CcPinReadNoWaitMiss: u32,
    pub CcPinReadWaitMiss: u32,
    pub CcCopyReadNoWait: u32,
    pub CcCopyReadWait: u32,
    pub CcCopyReadNoWaitMiss: u32,
    pub CcCopyReadWaitMiss: u32,
    pub CcMdlReadNoWait: u32,
    pub CcMdlReadWait: u32,
    pub CcMdlReadNoWaitMiss: u32,
    pub CcMdlReadWaitMiss: u32,
    pub CcReadAheadIos: u32,
    pub CcLazyWriteIos: u32,
    pub CcLazyWritePages: u32,
    pub CcDataFlushes: u32,
    pub CcDataPages: u32,
    pub ContextSwitches: u32,
    pub FirstLevelTbFills: u32,
    pub SecondLevelTbFills: u32,
    pub SystemCalls: u32,
    pub CcTotalDirtyPages: u64,
    pub CcDirtyPageThreshold: u64,
    pub ResidentAvailablePages: i64,
    pub SharedCommittedPages: u64,
}
impl MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION {}
impl ::std::default::Default for MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_THREAD {
    pub ThreadId: u32,
    pub SuspendCount: u32,
    pub PriorityClass: u32,
    pub Priority: u32,
    pub Teb: u64,
    pub Stack: MINIDUMP_MEMORY_DESCRIPTOR,
    pub ThreadContext: MINIDUMP_LOCATION_DESCRIPTOR,
}
impl MINIDUMP_THREAD {}
impl ::std::default::Default for MINIDUMP_THREAD {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_THREAD {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_THREAD {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_THREAD {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
pub struct MINIDUMP_THREAD_CALLBACK {
    pub ThreadId: u32,
    pub ThreadHandle: super::super::super::Foundation::HANDLE,
    pub Pad: u32,
    pub Context: CONTEXT,
    pub SizeOfContext: u32,
    pub StackBase: u64,
    pub StackEnd: u64,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl MINIDUMP_THREAD_CALLBACK {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::default::Default for MINIDUMP_THREAD_CALLBACK {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::PartialEq for MINIDUMP_THREAD_CALLBACK {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::Eq for MINIDUMP_THREAD_CALLBACK {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
unsafe impl ::windows::runtime::Abi for MINIDUMP_THREAD_CALLBACK {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_THREAD_EX {
    pub ThreadId: u32,
    pub SuspendCount: u32,
    pub PriorityClass: u32,
    pub Priority: u32,
    pub Teb: u64,
    pub Stack: MINIDUMP_MEMORY_DESCRIPTOR,
    pub ThreadContext: MINIDUMP_LOCATION_DESCRIPTOR,
    pub BackingStore: MINIDUMP_MEMORY_DESCRIPTOR,
}
impl MINIDUMP_THREAD_EX {}
impl ::std::default::Default for MINIDUMP_THREAD_EX {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_THREAD_EX {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_THREAD_EX {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_THREAD_EX {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
pub struct MINIDUMP_THREAD_EX_CALLBACK {
    pub ThreadId: u32,
    pub ThreadHandle: super::super::super::Foundation::HANDLE,
    pub Pad: u32,
    pub Context: CONTEXT,
    pub SizeOfContext: u32,
    pub StackBase: u64,
    pub StackEnd: u64,
    pub BackingStoreBase: u64,
    pub BackingStoreEnd: u64,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl MINIDUMP_THREAD_EX_CALLBACK {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::default::Default for MINIDUMP_THREAD_EX_CALLBACK {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::PartialEq for MINIDUMP_THREAD_EX_CALLBACK {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::Eq for MINIDUMP_THREAD_EX_CALLBACK {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
unsafe impl ::windows::runtime::Abi for MINIDUMP_THREAD_EX_CALLBACK {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_THREAD_EX_LIST {
    pub NumberOfThreads: u32,
    pub Threads: [MINIDUMP_THREAD_EX; 1],
}
impl MINIDUMP_THREAD_EX_LIST {}
impl ::std::default::Default for MINIDUMP_THREAD_EX_LIST {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_THREAD_EX_LIST {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_THREAD_EX_LIST {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_THREAD_EX_LIST {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_THREAD_INFO {
    pub ThreadId: u32,
    pub DumpFlags: MINIDUMP_THREAD_INFO_DUMP_FLAGS,
    pub DumpError: u32,
    pub ExitStatus: u32,
    pub CreateTime: u64,
    pub ExitTime: u64,
    pub KernelTime: u64,
    pub UserTime: u64,
    pub StartAddress: u64,
    pub Affinity: u64,
}
impl MINIDUMP_THREAD_INFO {}
impl ::std::default::Default for MINIDUMP_THREAD_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_THREAD_INFO {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_THREAD_INFO {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_THREAD_INFO {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct MINIDUMP_THREAD_INFO_DUMP_FLAGS(pub u32);
pub const MINIDUMP_THREAD_INFO_ERROR_THREAD: MINIDUMP_THREAD_INFO_DUMP_FLAGS = MINIDUMP_THREAD_INFO_DUMP_FLAGS(1u32);
pub const MINIDUMP_THREAD_INFO_EXITED_THREAD: MINIDUMP_THREAD_INFO_DUMP_FLAGS = MINIDUMP_THREAD_INFO_DUMP_FLAGS(4u32);
pub const MINIDUMP_THREAD_INFO_INVALID_CONTEXT: MINIDUMP_THREAD_INFO_DUMP_FLAGS = MINIDUMP_THREAD_INFO_DUMP_FLAGS(16u32);
pub const MINIDUMP_THREAD_INFO_INVALID_INFO: MINIDUMP_THREAD_INFO_DUMP_FLAGS = MINIDUMP_THREAD_INFO_DUMP_FLAGS(8u32);
pub const MINIDUMP_THREAD_INFO_INVALID_TEB: MINIDUMP_THREAD_INFO_DUMP_FLAGS = MINIDUMP_THREAD_INFO_DUMP_FLAGS(32u32);
pub const MINIDUMP_THREAD_INFO_WRITING_THREAD: MINIDUMP_THREAD_INFO_DUMP_FLAGS = MINIDUMP_THREAD_INFO_DUMP_FLAGS(2u32);
impl ::std::convert::From<u32> for MINIDUMP_THREAD_INFO_DUMP_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MINIDUMP_THREAD_INFO_DUMP_FLAGS {
    type Abi = Self;
}
impl ::std::ops::BitOr for MINIDUMP_THREAD_INFO_DUMP_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for MINIDUMP_THREAD_INFO_DUMP_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for MINIDUMP_THREAD_INFO_DUMP_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for MINIDUMP_THREAD_INFO_DUMP_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for MINIDUMP_THREAD_INFO_DUMP_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_THREAD_INFO_LIST {
    pub SizeOfHeader: u32,
    pub SizeOfEntry: u32,
    pub NumberOfEntries: u32,
}
impl MINIDUMP_THREAD_INFO_LIST {}
impl ::std::default::Default for MINIDUMP_THREAD_INFO_LIST {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for MINIDUMP_THREAD_INFO_LIST {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("MINIDUMP_THREAD_INFO_LIST").field("SizeOfHeader", &self.SizeOfHeader).field("SizeOfEntry", &self.SizeOfEntry).field("NumberOfEntries", &self.NumberOfEntries).finish()
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_THREAD_INFO_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfHeader == other.SizeOfHeader && self.SizeOfEntry == other.SizeOfEntry && self.NumberOfEntries == other.NumberOfEntries
    }
}
impl ::std::cmp::Eq for MINIDUMP_THREAD_INFO_LIST {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_THREAD_INFO_LIST {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_THREAD_LIST {
    pub NumberOfThreads: u32,
    pub Threads: [MINIDUMP_THREAD; 1],
}
impl MINIDUMP_THREAD_LIST {}
impl ::std::default::Default for MINIDUMP_THREAD_LIST {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_THREAD_LIST {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_THREAD_LIST {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_THREAD_LIST {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_THREAD_NAME {
    pub ThreadId: u32,
    pub RvaOfThreadName: u64,
}
impl MINIDUMP_THREAD_NAME {}
impl ::std::default::Default for MINIDUMP_THREAD_NAME {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_THREAD_NAME {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_THREAD_NAME {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_THREAD_NAME {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_THREAD_NAME_LIST {
    pub NumberOfThreadNames: u32,
    pub ThreadNames: [MINIDUMP_THREAD_NAME; 1],
}
impl MINIDUMP_THREAD_NAME_LIST {}
impl ::std::default::Default for MINIDUMP_THREAD_NAME_LIST {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_THREAD_NAME_LIST {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_THREAD_NAME_LIST {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_THREAD_NAME_LIST {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_TOKEN_INFO_HEADER {
    pub TokenSize: u32,
    pub TokenId: u32,
    pub TokenHandle: u64,
}
impl MINIDUMP_TOKEN_INFO_HEADER {}
impl ::std::default::Default for MINIDUMP_TOKEN_INFO_HEADER {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_TOKEN_INFO_HEADER {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_TOKEN_INFO_HEADER {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_TOKEN_INFO_HEADER {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_TOKEN_INFO_LIST {
    pub TokenListSize: u32,
    pub TokenListEntries: u32,
    pub ListHeaderSize: u32,
    pub ElementHeaderSize: u32,
}
impl MINIDUMP_TOKEN_INFO_LIST {}
impl ::std::default::Default for MINIDUMP_TOKEN_INFO_LIST {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for MINIDUMP_TOKEN_INFO_LIST {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("MINIDUMP_TOKEN_INFO_LIST").field("TokenListSize", &self.TokenListSize).field("TokenListEntries", &self.TokenListEntries).field("ListHeaderSize", &self.ListHeaderSize).field("ElementHeaderSize", &self.ElementHeaderSize).finish()
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_TOKEN_INFO_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.TokenListSize == other.TokenListSize && self.TokenListEntries == other.TokenListEntries && self.ListHeaderSize == other.ListHeaderSize && self.ElementHeaderSize == other.ElementHeaderSize
    }
}
impl ::std::cmp::Eq for MINIDUMP_TOKEN_INFO_LIST {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_TOKEN_INFO_LIST {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct MINIDUMP_TYPE(pub u32);
pub const MiniDumpNormal: MINIDUMP_TYPE = MINIDUMP_TYPE(0u32);
pub const MiniDumpWithDataSegs: MINIDUMP_TYPE = MINIDUMP_TYPE(1u32);
pub const MiniDumpWithFullMemory: MINIDUMP_TYPE = MINIDUMP_TYPE(2u32);
pub const MiniDumpWithHandleData: MINIDUMP_TYPE = MINIDUMP_TYPE(4u32);
pub const MiniDumpFilterMemory: MINIDUMP_TYPE = MINIDUMP_TYPE(8u32);
pub const MiniDumpScanMemory: MINIDUMP_TYPE = MINIDUMP_TYPE(16u32);
pub const MiniDumpWithUnloadedModules: MINIDUMP_TYPE = MINIDUMP_TYPE(32u32);
pub const MiniDumpWithIndirectlyReferencedMemory: MINIDUMP_TYPE = MINIDUMP_TYPE(64u32);
pub const MiniDumpFilterModulePaths: MINIDUMP_TYPE = MINIDUMP_TYPE(128u32);
pub const MiniDumpWithProcessThreadData: MINIDUMP_TYPE = MINIDUMP_TYPE(256u32);
pub const MiniDumpWithPrivateReadWriteMemory: MINIDUMP_TYPE = MINIDUMP_TYPE(512u32);
pub const MiniDumpWithoutOptionalData: MINIDUMP_TYPE = MINIDUMP_TYPE(1024u32);
pub const MiniDumpWithFullMemoryInfo: MINIDUMP_TYPE = MINIDUMP_TYPE(2048u32);
pub const MiniDumpWithThreadInfo: MINIDUMP_TYPE = MINIDUMP_TYPE(4096u32);
pub const MiniDumpWithCodeSegs: MINIDUMP_TYPE = MINIDUMP_TYPE(8192u32);
pub const MiniDumpWithoutAuxiliaryState: MINIDUMP_TYPE = MINIDUMP_TYPE(16384u32);
pub const MiniDumpWithFullAuxiliaryState: MINIDUMP_TYPE = MINIDUMP_TYPE(32768u32);
pub const MiniDumpWithPrivateWriteCopyMemory: MINIDUMP_TYPE = MINIDUMP_TYPE(65536u32);
pub const MiniDumpIgnoreInaccessibleMemory: MINIDUMP_TYPE = MINIDUMP_TYPE(131072u32);
pub const MiniDumpWithTokenInformation: MINIDUMP_TYPE = MINIDUMP_TYPE(262144u32);
pub const MiniDumpWithModuleHeaders: MINIDUMP_TYPE = MINIDUMP_TYPE(524288u32);
pub const MiniDumpFilterTriage: MINIDUMP_TYPE = MINIDUMP_TYPE(1048576u32);
pub const MiniDumpWithAvxXStateContext: MINIDUMP_TYPE = MINIDUMP_TYPE(2097152u32);
pub const MiniDumpWithIptTrace: MINIDUMP_TYPE = MINIDUMP_TYPE(4194304u32);
pub const MiniDumpScanInaccessiblePartialPages: MINIDUMP_TYPE = MINIDUMP_TYPE(8388608u32);
pub const MiniDumpFilterWriteCombinedMemory: MINIDUMP_TYPE = MINIDUMP_TYPE(16777216u32);
pub const MiniDumpValidTypeFlags: MINIDUMP_TYPE = MINIDUMP_TYPE(33554431u32);
impl ::std::convert::From<u32> for MINIDUMP_TYPE {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MINIDUMP_TYPE {
    type Abi = Self;
}
impl ::std::ops::BitOr for MINIDUMP_TYPE {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for MINIDUMP_TYPE {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for MINIDUMP_TYPE {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for MINIDUMP_TYPE {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for MINIDUMP_TYPE {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_UNLOADED_MODULE {
    pub BaseOfImage: u64,
    pub SizeOfImage: u32,
    pub CheckSum: u32,
    pub TimeDateStamp: u32,
    pub ModuleNameRva: u32,
}
impl MINIDUMP_UNLOADED_MODULE {}
impl ::std::default::Default for MINIDUMP_UNLOADED_MODULE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_UNLOADED_MODULE {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_UNLOADED_MODULE {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_UNLOADED_MODULE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_UNLOADED_MODULE_LIST {
    pub SizeOfHeader: u32,
    pub SizeOfEntry: u32,
    pub NumberOfEntries: u32,
}
impl MINIDUMP_UNLOADED_MODULE_LIST {}
impl ::std::default::Default for MINIDUMP_UNLOADED_MODULE_LIST {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for MINIDUMP_UNLOADED_MODULE_LIST {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("MINIDUMP_UNLOADED_MODULE_LIST").field("SizeOfHeader", &self.SizeOfHeader).field("SizeOfEntry", &self.SizeOfEntry).field("NumberOfEntries", &self.NumberOfEntries).finish()
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_UNLOADED_MODULE_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfHeader == other.SizeOfHeader && self.SizeOfEntry == other.SizeOfEntry && self.NumberOfEntries == other.NumberOfEntries
    }
}
impl ::std::cmp::Eq for MINIDUMP_UNLOADED_MODULE_LIST {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_UNLOADED_MODULE_LIST {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_USER_RECORD {
    pub Type: u32,
    pub Memory: MINIDUMP_LOCATION_DESCRIPTOR,
}
impl MINIDUMP_USER_RECORD {}
impl ::std::default::Default for MINIDUMP_USER_RECORD {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for MINIDUMP_USER_RECORD {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("MINIDUMP_USER_RECORD").field("Type", &self.Type).field("Memory", &self.Memory).finish()
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_USER_RECORD {
    fn eq(&self, other: &Self) -> bool {
        self.Type == other.Type && self.Memory == other.Memory
    }
}
impl ::std::cmp::Eq for MINIDUMP_USER_RECORD {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_USER_RECORD {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_USER_STREAM {
    pub Type: u32,
    pub BufferSize: u32,
    pub Buffer: *mut ::std::ffi::c_void,
}
impl MINIDUMP_USER_STREAM {}
impl ::std::default::Default for MINIDUMP_USER_STREAM {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_USER_STREAM {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_USER_STREAM {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_USER_STREAM {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_USER_STREAM_INFORMATION {
    pub UserStreamCount: u32,
    pub UserStreamArray: *mut MINIDUMP_USER_STREAM,
}
impl MINIDUMP_USER_STREAM_INFORMATION {}
impl ::std::default::Default for MINIDUMP_USER_STREAM_INFORMATION {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_USER_STREAM_INFORMATION {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_USER_STREAM_INFORMATION {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_USER_STREAM_INFORMATION {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const MINIDUMP_VERSION: u32 = 42899u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_VM_POST_READ_CALLBACK {
    pub Offset: u64,
    pub Buffer: *mut ::std::ffi::c_void,
    pub Size: u32,
    pub Completed: u32,
    pub Status: ::windows::runtime::HRESULT,
}
impl MINIDUMP_VM_POST_READ_CALLBACK {}
impl ::std::default::Default for MINIDUMP_VM_POST_READ_CALLBACK {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_VM_POST_READ_CALLBACK {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_VM_POST_READ_CALLBACK {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_VM_POST_READ_CALLBACK {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_VM_PRE_READ_CALLBACK {
    pub Offset: u64,
    pub Buffer: *mut ::std::ffi::c_void,
    pub Size: u32,
}
impl MINIDUMP_VM_PRE_READ_CALLBACK {}
impl ::std::default::Default for MINIDUMP_VM_PRE_READ_CALLBACK {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_VM_PRE_READ_CALLBACK {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_VM_PRE_READ_CALLBACK {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_VM_PRE_READ_CALLBACK {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MINIDUMP_VM_QUERY_CALLBACK {
    pub Offset: u64,
}
impl MINIDUMP_VM_QUERY_CALLBACK {}
impl ::std::default::Default for MINIDUMP_VM_QUERY_CALLBACK {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for MINIDUMP_VM_QUERY_CALLBACK {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for MINIDUMP_VM_QUERY_CALLBACK {}
unsafe impl ::windows::runtime::Abi for MINIDUMP_VM_QUERY_CALLBACK {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MODLOAD_CVMISC {
    pub oCV: u32,
    pub cCV: usize,
    pub oMisc: u32,
    pub cMisc: usize,
    pub dtImage: u32,
    pub cImage: u32,
}
impl MODLOAD_CVMISC {}
impl ::std::default::Default for MODLOAD_CVMISC {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for MODLOAD_CVMISC {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("MODLOAD_CVMISC").field("oCV", &self.oCV).field("cCV", &self.cCV).field("oMisc", &self.oMisc).field("cMisc", &self.cMisc).field("dtImage", &self.dtImage).field("cImage", &self.cImage).finish()
    }
}
impl ::std::cmp::PartialEq for MODLOAD_CVMISC {
    fn eq(&self, other: &Self) -> bool {
        self.oCV == other.oCV && self.cCV == other.cCV && self.oMisc == other.oMisc && self.cMisc == other.cMisc && self.dtImage == other.dtImage && self.cImage == other.cImage
    }
}
impl ::std::cmp::Eq for MODLOAD_CVMISC {}
unsafe impl ::windows::runtime::Abi for MODLOAD_CVMISC {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MODLOAD_DATA {
    pub ssize: u32,
    pub ssig: MODLOAD_DATA_TYPE,
    pub data: *mut ::std::ffi::c_void,
    pub size: u32,
    pub flags: u32,
}
impl MODLOAD_DATA {}
impl ::std::default::Default for MODLOAD_DATA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for MODLOAD_DATA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("MODLOAD_DATA").field("ssize", &self.ssize).field("ssig", &self.ssig).field("data", &self.data).field("size", &self.size).field("flags", &self.flags).finish()
    }
}
impl ::std::cmp::PartialEq for MODLOAD_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.ssize == other.ssize && self.ssig == other.ssig && self.data == other.data && self.size == other.size && self.flags == other.flags
    }
}
impl ::std::cmp::Eq for MODLOAD_DATA {}
unsafe impl ::windows::runtime::Abi for MODLOAD_DATA {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct MODLOAD_DATA_TYPE(pub u32);
pub const DBHHEADER_DEBUGDIRS: MODLOAD_DATA_TYPE = MODLOAD_DATA_TYPE(1u32);
pub const DBHHEADER_CVMISC: MODLOAD_DATA_TYPE = MODLOAD_DATA_TYPE(2u32);
impl ::std::convert::From<u32> for MODLOAD_DATA_TYPE {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MODLOAD_DATA_TYPE {
    type Abi = Self;
}
impl ::std::ops::BitOr for MODLOAD_DATA_TYPE {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for MODLOAD_DATA_TYPE {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for MODLOAD_DATA_TYPE {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for MODLOAD_DATA_TYPE {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for MODLOAD_DATA_TYPE {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MODLOAD_PDBGUID_PDBAGE {
    pub PdbGuid: ::windows::runtime::GUID,
    pub PdbAge: u32,
}
impl MODLOAD_PDBGUID_PDBAGE {}
impl ::std::default::Default for MODLOAD_PDBGUID_PDBAGE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for MODLOAD_PDBGUID_PDBAGE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("MODLOAD_PDBGUID_PDBAGE").field("PdbGuid", &self.PdbGuid).field("PdbAge", &self.PdbAge).finish()
    }
}
impl ::std::cmp::PartialEq for MODLOAD_PDBGUID_PDBAGE {
    fn eq(&self, other: &Self) -> bool {
        self.PdbGuid == other.PdbGuid && self.PdbAge == other.PdbAge
    }
}
impl ::std::cmp::Eq for MODLOAD_PDBGUID_PDBAGE {}
unsafe impl ::windows::runtime::Abi for MODLOAD_PDBGUID_PDBAGE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const MODULE_ORDERS_LOADTIME: u32 = 268435456u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const MODULE_ORDERS_MASK: u32 = 4026531840u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const MODULE_ORDERS_MODULENAME: u32 = 536870912u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct MODULE_TYPE_INFO {
    pub dataLength: u16,
    pub leaf: u16,
    pub data: [u8; 1],
}
impl MODULE_TYPE_INFO {}
impl ::std::default::Default for MODULE_TYPE_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for MODULE_TYPE_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("MODULE_TYPE_INFO").field("dataLength", &self.dataLength).field("leaf", &self.leaf).field("data", &self.data).finish()
    }
}
impl ::std::cmp::PartialEq for MODULE_TYPE_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.dataLength == other.dataLength && self.leaf == other.leaf && self.data == other.data
    }
}
impl ::std::cmp::Eq for MODULE_TYPE_INFO {}
unsafe impl ::windows::runtime::Abi for MODULE_TYPE_INFO {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct MODULE_WRITE_FLAGS(pub i32);
pub const ModuleWriteModule: MODULE_WRITE_FLAGS = MODULE_WRITE_FLAGS(1i32);
pub const ModuleWriteDataSeg: MODULE_WRITE_FLAGS = MODULE_WRITE_FLAGS(2i32);
pub const ModuleWriteMiscRecord: MODULE_WRITE_FLAGS = MODULE_WRITE_FLAGS(4i32);
pub const ModuleWriteCvRecord: MODULE_WRITE_FLAGS = MODULE_WRITE_FLAGS(8i32);
pub const ModuleReferencedByMemory: MODULE_WRITE_FLAGS = MODULE_WRITE_FLAGS(16i32);
pub const ModuleWriteTlsData: MODULE_WRITE_FLAGS = MODULE_WRITE_FLAGS(32i32);
pub const ModuleWriteCodeSegs: MODULE_WRITE_FLAGS = MODULE_WRITE_FLAGS(64i32);
impl ::std::convert::From<i32> for MODULE_WRITE_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MODULE_WRITE_FLAGS {
    type Abi = Self;
}
pub const MachineDebugManager_DEBUG: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(1232510188, 14933, 19376, [182, 151, 136, 254, 222, 119, 232, 234]);
pub const MachineDebugManager_RETAIL: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(201995878, 12489, 4560, [143, 32, 0, 128, 95, 44, 208, 100]);
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn MakeSureDirectoryPathExists<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(dirpath: Param0) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MakeSureDirectoryPathExists(dirpath: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(MakeSureDirectoryPathExists(dirpath.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Kernel`*"]
#[inline]
pub unsafe fn MapAndLoad<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(
    imagename: Param0,
    dllpath: Param1,
    loadedimage: *mut LOADED_IMAGE,
    dotdll: Param3,
    readonly: Param4,
) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MapAndLoad(imagename: super::super::super::Foundation::PSTR, dllpath: super::super::super::Foundation::PSTR, loadedimage: *mut LOADED_IMAGE, dotdll: super::super::super::Foundation::BOOL, readonly: super::super::super::Foundation::BOOL) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(MapAndLoad(imagename.into_param().abi(), dllpath.into_param().abi(), ::std::mem::transmute(loadedimage), dotdll.into_param().abi(), readonly.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn MapFileAndCheckSumA<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(filename: Param0, headersum: *mut u32, checksum: *mut u32) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MapFileAndCheckSumA(filename: super::super::super::Foundation::PSTR, headersum: *mut u32, checksum: *mut u32) -> u32;
        }
        ::std::mem::transmute(MapFileAndCheckSumA(filename.into_param().abi(), ::std::mem::transmute(headersum), ::std::mem::transmute(checksum)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn MapFileAndCheckSumW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(filename: Param0, headersum: *mut u32, checksum: *mut u32) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MapFileAndCheckSumW(filename: super::super::super::Foundation::PWSTR, headersum: *mut u32, checksum: *mut u32) -> u32;
        }
        ::std::mem::transmute(MapFileAndCheckSumW(filename.into_param().abi(), ::std::mem::transmute(headersum), ::std::mem::transmute(checksum)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn MessageBeep(utype: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MessageBeep(utype: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(MessageBeep(::std::mem::transmute(utype)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn MiniDumpReadDumpStream(baseofdump: *const ::std::ffi::c_void, streamnumber: u32, dir: *mut *mut MINIDUMP_DIRECTORY, streampointer: *mut *mut ::std::ffi::c_void, streamsize: *mut u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MiniDumpReadDumpStream(baseofdump: *const ::std::ffi::c_void, streamnumber: u32, dir: *mut *mut MINIDUMP_DIRECTORY, streampointer: *mut *mut ::std::ffi::c_void, streamsize: *mut u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(MiniDumpReadDumpStream(::std::mem::transmute(baseofdump), ::std::mem::transmute(streamnumber), ::std::mem::transmute(dir), ::std::mem::transmute(streampointer), ::std::mem::transmute(streamsize)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_System_Memory", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_Storage_FileSystem`, `Win32_System_Memory`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn MiniDumpWriteDump<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, processid: u32, hfile: Param2, dumptype: MINIDUMP_TYPE, exceptionparam: *const MINIDUMP_EXCEPTION_INFORMATION, userstreamparam: *const MINIDUMP_USER_STREAM_INFORMATION, callbackparam: *const MINIDUMP_CALLBACK_INFORMATION) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MiniDumpWriteDump(hprocess: super::super::super::Foundation::HANDLE, processid: u32, hfile: super::super::super::Foundation::HANDLE, dumptype: MINIDUMP_TYPE, exceptionparam: *const MINIDUMP_EXCEPTION_INFORMATION, userstreamparam: *const MINIDUMP_USER_STREAM_INFORMATION, callbackparam: *const ::std::mem::ManuallyDrop<MINIDUMP_CALLBACK_INFORMATION>) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(MiniDumpWriteDump(hprocess.into_param().abi(), ::std::mem::transmute(processid), hfile.into_param().abi(), ::std::mem::transmute(dumptype), ::std::mem::transmute(exceptionparam), ::std::mem::transmute(userstreamparam), ::std::mem::transmute(callbackparam)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct ModelObjectKind(pub i32);
pub const ObjectPropertyAccessor: ModelObjectKind = ModelObjectKind(0i32);
pub const ObjectContext: ModelObjectKind = ModelObjectKind(1i32);
pub const ObjectTargetObject: ModelObjectKind = ModelObjectKind(2i32);
pub const ObjectTargetObjectReference: ModelObjectKind = ModelObjectKind(3i32);
pub const ObjectSynthetic: ModelObjectKind = ModelObjectKind(4i32);
pub const ObjectNoValue: ModelObjectKind = ModelObjectKind(5i32);
pub const ObjectError: ModelObjectKind = ModelObjectKind(6i32);
pub const ObjectIntrinsic: ModelObjectKind = ModelObjectKind(7i32);
pub const ObjectMethod: ModelObjectKind = ModelObjectKind(8i32);
pub const ObjectKeyReference: ModelObjectKind = ModelObjectKind(9i32);
impl ::std::convert::From<i32> for ModelObjectKind {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for ModelObjectKind {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const NULL_FIELD_NAME: u32 = 6u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const NULL_SYM_DUMP_PARAM: u32 = 5u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const NUM_SSRVOPTS: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct OBJECT_ATTRIB_FLAG(pub u32);
pub const OBJECT_ATTRIB_NO_ATTRIB: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(0u32);
pub const OBJECT_ATTRIB_NO_NAME: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(1u32);
pub const OBJECT_ATTRIB_NO_TYPE: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(2u32);
pub const OBJECT_ATTRIB_NO_VALUE: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(4u32);
pub const OBJECT_ATTRIB_VALUE_IS_INVALID: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(8u32);
pub const OBJECT_ATTRIB_VALUE_IS_OBJECT: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(16u32);
pub const OBJECT_ATTRIB_VALUE_IS_ENUM: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(32u32);
pub const OBJECT_ATTRIB_VALUE_IS_CUSTOM: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(64u32);
pub const OBJECT_ATTRIB_OBJECT_IS_EXPANDABLE: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(112u32);
pub const OBJECT_ATTRIB_VALUE_HAS_CODE: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(128u32);
pub const OBJECT_ATTRIB_TYPE_IS_OBJECT: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(256u32);
pub const OBJECT_ATTRIB_TYPE_HAS_CODE: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(512u32);
pub const OBJECT_ATTRIB_TYPE_IS_EXPANDABLE: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(256u32);
pub const OBJECT_ATTRIB_SLOT_IS_CATEGORY: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(1024u32);
pub const OBJECT_ATTRIB_VALUE_READONLY: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(2048u32);
pub const OBJECT_ATTRIB_ACCESS_PUBLIC: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(4096u32);
pub const OBJECT_ATTRIB_ACCESS_PRIVATE: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(8192u32);
pub const OBJECT_ATTRIB_ACCESS_PROTECTED: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(16384u32);
pub const OBJECT_ATTRIB_ACCESS_FINAL: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(32768u32);
pub const OBJECT_ATTRIB_STORAGE_GLOBAL: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(65536u32);
pub const OBJECT_ATTRIB_STORAGE_STATIC: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(131072u32);
pub const OBJECT_ATTRIB_STORAGE_FIELD: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(262144u32);
pub const OBJECT_ATTRIB_STORAGE_VIRTUAL: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(524288u32);
pub const OBJECT_ATTRIB_TYPE_IS_CONSTANT: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(1048576u32);
pub const OBJECT_ATTRIB_TYPE_IS_SYNCHRONIZED: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(2097152u32);
pub const OBJECT_ATTRIB_TYPE_IS_VOLATILE: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(4194304u32);
pub const OBJECT_ATTRIB_HAS_EXTENDED_ATTRIBS: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(8388608u32);
pub const OBJECT_ATTRIB_IS_CLASS: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(16777216u32);
pub const OBJECT_ATTRIB_IS_FUNCTION: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(33554432u32);
pub const OBJECT_ATTRIB_IS_VARIABLE: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(67108864u32);
pub const OBJECT_ATTRIB_IS_PROPERTY: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(134217728u32);
pub const OBJECT_ATTRIB_IS_MACRO: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(268435456u32);
pub const OBJECT_ATTRIB_IS_TYPE: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(536870912u32);
pub const OBJECT_ATTRIB_IS_INHERITED: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(1073741824u32);
pub const OBJECT_ATTRIB_IS_INTERFACE: OBJECT_ATTRIB_FLAG = OBJECT_ATTRIB_FLAG(2147483648u32);
impl ::std::convert::From<u32> for OBJECT_ATTRIB_FLAG {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OBJECT_ATTRIB_FLAG {
    type Abi = Self;
}
impl ::std::ops::BitOr for OBJECT_ATTRIB_FLAG {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for OBJECT_ATTRIB_FLAG {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for OBJECT_ATTRIB_FLAG {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for OBJECT_ATTRIB_FLAG {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for OBJECT_ATTRIB_FLAG {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
pub const OID_JSSIP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(113893392, 14542, 4564, [162, 163, 0, 16, 75, 211, 80, 144]);
pub const OID_VBSSIP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(371847246, 10137, 19893, [143, 229, 172, 225, 15, 23, 235, 171]);
pub const OID_WSFSIP: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(442566000, 14542, 4564, [162, 163, 0, 16, 75, 211, 80, 144]);
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct OMAP {
    pub rva: u32,
    pub rvaTo: u32,
}
impl OMAP {}
impl ::std::default::Default for OMAP {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for OMAP {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OMAP").field("rva", &self.rva).field("rvaTo", &self.rvaTo).finish()
    }
}
impl ::std::cmp::PartialEq for OMAP {
    fn eq(&self, other: &Self) -> bool {
        self.rva == other.rva && self.rvaTo == other.rvaTo
    }
}
impl ::std::cmp::Eq for OMAP {}
unsafe impl ::windows::runtime::Abi for OMAP {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct OPEN_THREAD_WAIT_CHAIN_SESSION_FLAGS(pub u32);
pub const WCT_ASYNC_OPEN_FLAG: OPEN_THREAD_WAIT_CHAIN_SESSION_FLAGS = OPEN_THREAD_WAIT_CHAIN_SESSION_FLAGS(1u32);
impl ::std::convert::From<u32> for OPEN_THREAD_WAIT_CHAIN_SESSION_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for OPEN_THREAD_WAIT_CHAIN_SESSION_FLAGS {
    type Abi = Self;
}
impl ::std::ops::BitOr for OPEN_THREAD_WAIT_CHAIN_SESSION_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for OPEN_THREAD_WAIT_CHAIN_SESSION_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for OPEN_THREAD_WAIT_CHAIN_SESSION_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for OPEN_THREAD_WAIT_CHAIN_SESSION_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for OPEN_THREAD_WAIT_CHAIN_SESSION_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct OUTPUT_DEBUG_STRING_INFO {
    pub lpDebugStringData: super::super::super::Foundation::PSTR,
    pub fUnicode: u16,
    pub nDebugStringLength: u16,
}
#[cfg(feature = "Win32_Foundation")]
impl OUTPUT_DEBUG_STRING_INFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for OUTPUT_DEBUG_STRING_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for OUTPUT_DEBUG_STRING_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("OUTPUT_DEBUG_STRING_INFO").field("lpDebugStringData", &self.lpDebugStringData).field("fUnicode", &self.fUnicode).field("nDebugStringLength", &self.nDebugStringLength).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for OUTPUT_DEBUG_STRING_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.lpDebugStringData == other.lpDebugStringData && self.fUnicode == other.fUnicode && self.nDebugStringLength == other.nDebugStringLength
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for OUTPUT_DEBUG_STRING_INFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for OUTPUT_DEBUG_STRING_INFO {
    type Abi = Self;
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn OpenThreadWaitChainSession(flags: OPEN_THREAD_WAIT_CHAIN_SESSION_FLAGS, callback: ::std::option::Option<PWAITCHAINCALLBACK>) -> *mut ::std::ffi::c_void {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OpenThreadWaitChainSession(flags: OPEN_THREAD_WAIT_CHAIN_SESSION_FLAGS, callback: ::windows::runtime::RawPtr) -> *mut ::std::ffi::c_void;
        }
        ::std::mem::transmute(OpenThreadWaitChainSession(::std::mem::transmute(flags), ::std::mem::transmute(callback)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn OutputDebugStringA<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(lpoutputstring: Param0) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OutputDebugStringA(lpoutputstring: super::super::super::Foundation::PSTR);
        }
        ::std::mem::transmute(OutputDebugStringA(lpoutputstring.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn OutputDebugStringW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(lpoutputstring: Param0) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OutputDebugStringW(lpoutputstring: super::super::super::Foundation::PWSTR);
        }
        ::std::mem::transmute(OutputDebugStringW(lpoutputstring.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub type PCOGETACTIVATIONSTATE = unsafe extern "system" fn(param0: ::windows::runtime::GUID, param1: u32, param2: *mut u32) -> ::windows::runtime::HRESULT;
pub type PCOGETCALLSTATE = unsafe extern "system" fn(param0: i32, param1: *mut u32) -> ::windows::runtime::HRESULT;
#[cfg(feature = "Win32_Foundation")]
pub type PDBGHELP_CREATE_USER_DUMP_CALLBACK = unsafe extern "system" fn(datatype: u32, data: *const *const ::std::ffi::c_void, datalength: *mut u32, userdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PDEBUG_EXTENSION_CALL = unsafe extern "system" fn(client: ::windows::runtime::RawPtr, args: super::super::super::Foundation::PSTR) -> ::windows::runtime::HRESULT;
pub type PDEBUG_EXTENSION_CANUNLOAD = unsafe extern "system" fn() -> ::windows::runtime::HRESULT;
pub type PDEBUG_EXTENSION_INITIALIZE = unsafe extern "system" fn(version: *mut u32, flags: *mut u32) -> ::windows::runtime::HRESULT;
#[cfg(feature = "Win32_Foundation")]
pub type PDEBUG_EXTENSION_KNOWN_STRUCT = unsafe extern "system" fn(flags: u32, offset: u64, typename: super::super::super::Foundation::PSTR, buffer: super::super::super::Foundation::PSTR, bufferchars: *mut u32) -> ::windows::runtime::HRESULT;
#[cfg(feature = "Win32_Foundation")]
pub type PDEBUG_EXTENSION_KNOWN_STRUCT_EX = unsafe extern "system" fn(client: ::windows::runtime::RawPtr, flags: u32, offset: u64, typename: super::super::super::Foundation::PSTR, buffer: super::super::super::Foundation::PSTR, bufferchars: *mut u32) -> ::windows::runtime::HRESULT;
pub type PDEBUG_EXTENSION_NOTIFY = unsafe extern "system" fn(notify: u32, argument: u64);
#[cfg(feature = "Win32_Foundation")]
pub type PDEBUG_EXTENSION_PROVIDE_VALUE = unsafe extern "system" fn(client: ::windows::runtime::RawPtr, flags: u32, name: super::super::super::Foundation::PWSTR, value: *mut u64, typemodbase: *mut u64, typeid: *mut u32, typeflags: *mut u32) -> ::windows::runtime::HRESULT;
#[cfg(feature = "Win32_Foundation")]
pub type PDEBUG_EXTENSION_QUERY_VALUE_NAMES = unsafe extern "system" fn(client: ::windows::runtime::RawPtr, flags: u32, buffer: super::super::super::Foundation::PWSTR, bufferchars: u32, bufferneeded: *mut u32) -> ::windows::runtime::HRESULT;
pub type PDEBUG_EXTENSION_UNINITIALIZE = unsafe extern "system" fn();
pub type PDEBUG_EXTENSION_UNLOAD = unsafe extern "system" fn();
pub type PDEBUG_STACK_PROVIDER_BEGINTHREADSTACKRECONSTRUCTION = unsafe extern "system" fn(streamtype: u32, minidumpstreambuffer: *const ::std::ffi::c_void, buffersize: u32) -> ::windows::runtime::HRESULT;
pub type PDEBUG_STACK_PROVIDER_ENDTHREADSTACKRECONSTRUCTION = unsafe extern "system" fn() -> ::windows::runtime::HRESULT;
#[cfg(feature = "Win32_Foundation")]
pub type PDEBUG_STACK_PROVIDER_FREESTACKSYMFRAMES = unsafe extern "system" fn(stacksymframes: *const STACK_SYM_FRAME_INFO) -> ::windows::runtime::HRESULT;
#[cfg(feature = "Win32_Foundation")]
pub type PDEBUG_STACK_PROVIDER_RECONSTRUCTSTACK = unsafe extern "system" fn(systemthreadid: u32, nativeframes: *const DEBUG_STACK_FRAME_EX, countnativeframes: u32, stacksymframes: *mut *mut STACK_SYM_FRAME_INFO, stacksymframesfilled: *mut u32) -> ::windows::runtime::HRESULT;
#[cfg(feature = "Win32_Foundation")]
pub type PENUMDIRTREE_CALLBACK = unsafe extern "system" fn(filepath: super::super::super::Foundation::PSTR, callerdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PENUMDIRTREE_CALLBACKW = unsafe extern "system" fn(filepath: super::super::super::Foundation::PWSTR, callerdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PENUMLOADED_MODULES_CALLBACK = unsafe extern "system" fn(modulename: super::super::super::Foundation::PSTR, modulebase: u32, modulesize: u32, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PENUMLOADED_MODULES_CALLBACK64 = unsafe extern "system" fn(modulename: super::super::super::Foundation::PSTR, modulebase: u64, modulesize: u32, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PENUMLOADED_MODULES_CALLBACKW64 = unsafe extern "system" fn(modulename: super::super::super::Foundation::PWSTR, modulebase: u64, modulesize: u32, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PENUMSOURCEFILETOKENSCALLBACK = unsafe extern "system" fn(token: *const ::std::ffi::c_void, size: usize) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PFINDFILEINPATHCALLBACK = unsafe extern "system" fn(filename: super::super::super::Foundation::PSTR, context: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PFINDFILEINPATHCALLBACKW = unsafe extern "system" fn(filename: super::super::super::Foundation::PWSTR, context: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PFIND_DEBUG_FILE_CALLBACK = unsafe extern "system" fn(filehandle: super::super::super::Foundation::HANDLE, filename: super::super::super::Foundation::PSTR, callerdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PFIND_DEBUG_FILE_CALLBACKW = unsafe extern "system" fn(filehandle: super::super::super::Foundation::HANDLE, filename: super::super::super::Foundation::PWSTR, callerdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PFIND_EXE_FILE_CALLBACK = unsafe extern "system" fn(filehandle: super::super::super::Foundation::HANDLE, filename: super::super::super::Foundation::PSTR, callerdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PFIND_EXE_FILE_CALLBACKW = unsafe extern "system" fn(filehandle: super::super::super::Foundation::HANDLE, filename: super::super::super::Foundation::PWSTR, callerdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PFUNCTION_TABLE_ACCESS_ROUTINE = unsafe extern "system" fn(hprocess: super::super::super::Foundation::HANDLE, addrbase: u32) -> *mut ::std::ffi::c_void;
#[cfg(feature = "Win32_Foundation")]
pub type PFUNCTION_TABLE_ACCESS_ROUTINE64 = unsafe extern "system" fn(ahprocess: super::super::super::Foundation::HANDLE, addrbase: u64) -> *mut ::std::ffi::c_void;
#[cfg(feature = "Win32_Foundation")]
pub type PGET_MODULE_BASE_ROUTINE = unsafe extern "system" fn(hprocess: super::super::super::Foundation::HANDLE, address: u32) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PGET_MODULE_BASE_ROUTINE64 = unsafe extern "system" fn(hprocess: super::super::super::Foundation::HANDLE, address: u64) -> u64;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct PHYSICAL {
    pub Address: u64,
    pub BufLen: u32,
    pub Buf: [u8; 1],
}
impl PHYSICAL {}
impl ::std::default::Default for PHYSICAL {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for PHYSICAL {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("PHYSICAL").field("Address", &self.Address).field("BufLen", &self.BufLen).field("Buf", &self.Buf).finish()
    }
}
impl ::std::cmp::PartialEq for PHYSICAL {
    fn eq(&self, other: &Self) -> bool {
        self.Address == other.Address && self.BufLen == other.BufLen && self.Buf == other.Buf
    }
}
impl ::std::cmp::Eq for PHYSICAL {}
unsafe impl ::windows::runtime::Abi for PHYSICAL {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct PHYSICAL_MEMORY_DESCRIPTOR32 {
    pub NumberOfRuns: u32,
    pub NumberOfPages: u32,
    pub Run: [PHYSICAL_MEMORY_RUN32; 1],
}
impl PHYSICAL_MEMORY_DESCRIPTOR32 {}
impl ::std::default::Default for PHYSICAL_MEMORY_DESCRIPTOR32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for PHYSICAL_MEMORY_DESCRIPTOR32 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("PHYSICAL_MEMORY_DESCRIPTOR32").field("NumberOfRuns", &self.NumberOfRuns).field("NumberOfPages", &self.NumberOfPages).field("Run", &self.Run).finish()
    }
}
impl ::std::cmp::PartialEq for PHYSICAL_MEMORY_DESCRIPTOR32 {
    fn eq(&self, other: &Self) -> bool {
        self.NumberOfRuns == other.NumberOfRuns && self.NumberOfPages == other.NumberOfPages && self.Run == other.Run
    }
}
impl ::std::cmp::Eq for PHYSICAL_MEMORY_DESCRIPTOR32 {}
unsafe impl ::windows::runtime::Abi for PHYSICAL_MEMORY_DESCRIPTOR32 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct PHYSICAL_MEMORY_DESCRIPTOR64 {
    pub NumberOfRuns: u32,
    pub NumberOfPages: u64,
    pub Run: [PHYSICAL_MEMORY_RUN64; 1],
}
impl PHYSICAL_MEMORY_DESCRIPTOR64 {}
impl ::std::default::Default for PHYSICAL_MEMORY_DESCRIPTOR64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for PHYSICAL_MEMORY_DESCRIPTOR64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("PHYSICAL_MEMORY_DESCRIPTOR64").field("NumberOfRuns", &self.NumberOfRuns).field("NumberOfPages", &self.NumberOfPages).field("Run", &self.Run).finish()
    }
}
impl ::std::cmp::PartialEq for PHYSICAL_MEMORY_DESCRIPTOR64 {
    fn eq(&self, other: &Self) -> bool {
        self.NumberOfRuns == other.NumberOfRuns && self.NumberOfPages == other.NumberOfPages && self.Run == other.Run
    }
}
impl ::std::cmp::Eq for PHYSICAL_MEMORY_DESCRIPTOR64 {}
unsafe impl ::windows::runtime::Abi for PHYSICAL_MEMORY_DESCRIPTOR64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct PHYSICAL_MEMORY_RUN32 {
    pub BasePage: u32,
    pub PageCount: u32,
}
impl PHYSICAL_MEMORY_RUN32 {}
impl ::std::default::Default for PHYSICAL_MEMORY_RUN32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for PHYSICAL_MEMORY_RUN32 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("PHYSICAL_MEMORY_RUN32").field("BasePage", &self.BasePage).field("PageCount", &self.PageCount).finish()
    }
}
impl ::std::cmp::PartialEq for PHYSICAL_MEMORY_RUN32 {
    fn eq(&self, other: &Self) -> bool {
        self.BasePage == other.BasePage && self.PageCount == other.PageCount
    }
}
impl ::std::cmp::Eq for PHYSICAL_MEMORY_RUN32 {}
unsafe impl ::windows::runtime::Abi for PHYSICAL_MEMORY_RUN32 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct PHYSICAL_MEMORY_RUN64 {
    pub BasePage: u64,
    pub PageCount: u64,
}
impl PHYSICAL_MEMORY_RUN64 {}
impl ::std::default::Default for PHYSICAL_MEMORY_RUN64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for PHYSICAL_MEMORY_RUN64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("PHYSICAL_MEMORY_RUN64").field("BasePage", &self.BasePage).field("PageCount", &self.PageCount).finish()
    }
}
impl ::std::cmp::PartialEq for PHYSICAL_MEMORY_RUN64 {
    fn eq(&self, other: &Self) -> bool {
        self.BasePage == other.BasePage && self.PageCount == other.PageCount
    }
}
impl ::std::cmp::Eq for PHYSICAL_MEMORY_RUN64 {}
unsafe impl ::windows::runtime::Abi for PHYSICAL_MEMORY_RUN64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct PHYSICAL_TO_VIRTUAL {
    pub Status: u32,
    pub Size: u32,
    pub PdeAddress: u64,
}
impl PHYSICAL_TO_VIRTUAL {}
impl ::std::default::Default for PHYSICAL_TO_VIRTUAL {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for PHYSICAL_TO_VIRTUAL {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("PHYSICAL_TO_VIRTUAL").field("Status", &self.Status).field("Size", &self.Size).field("PdeAddress", &self.PdeAddress).finish()
    }
}
impl ::std::cmp::PartialEq for PHYSICAL_TO_VIRTUAL {
    fn eq(&self, other: &Self) -> bool {
        self.Status == other.Status && self.Size == other.Size && self.PdeAddress == other.PdeAddress
    }
}
impl ::std::cmp::Eq for PHYSICAL_TO_VIRTUAL {}
unsafe impl ::windows::runtime::Abi for PHYSICAL_TO_VIRTUAL {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct PHYSICAL_WITH_FLAGS {
    pub Address: u64,
    pub BufLen: u32,
    pub Flags: u32,
    pub Buf: [u8; 1],
}
impl PHYSICAL_WITH_FLAGS {}
impl ::std::default::Default for PHYSICAL_WITH_FLAGS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for PHYSICAL_WITH_FLAGS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("PHYSICAL_WITH_FLAGS").field("Address", &self.Address).field("BufLen", &self.BufLen).field("Flags", &self.Flags).field("Buf", &self.Buf).finish()
    }
}
impl ::std::cmp::PartialEq for PHYSICAL_WITH_FLAGS {
    fn eq(&self, other: &Self) -> bool {
        self.Address == other.Address && self.BufLen == other.BufLen && self.Flags == other.Flags && self.Buf == other.Buf
    }
}
impl ::std::cmp::Eq for PHYSICAL_WITH_FLAGS {}
unsafe impl ::windows::runtime::Abi for PHYSICAL_WITH_FLAGS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const PHYS_FLAG_CACHED: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const PHYS_FLAG_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const PHYS_FLAG_UNCACHED: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const PHYS_FLAG_WRITE_COMBINED: u32 = 3u32;
#[cfg(feature = "Win32_Foundation")]
pub type PIMAGEHLP_STATUS_ROUTINE = unsafe extern "system" fn(reason: IMAGEHLP_STATUS_REASON, imagename: super::super::super::Foundation::PSTR, dllname: super::super::super::Foundation::PSTR, va: usize, parameter: usize) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PIMAGEHLP_STATUS_ROUTINE32 = unsafe extern "system" fn(reason: IMAGEHLP_STATUS_REASON, imagename: super::super::super::Foundation::PSTR, dllname: super::super::super::Foundation::PSTR, va: u32, parameter: usize) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PIMAGEHLP_STATUS_ROUTINE64 = unsafe extern "system" fn(reason: IMAGEHLP_STATUS_REASON, imagename: super::super::super::Foundation::PSTR, dllname: super::super::super::Foundation::PSTR, va: u64, parameter: usize) -> super::super::super::Foundation::BOOL;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct POINTER_SEARCH_PHYSICAL {
    pub Offset: u64,
    pub Length: u64,
    pub PointerMin: u64,
    pub PointerMax: u64,
    pub Flags: u32,
    pub MatchOffsets: *mut u64,
    pub MatchOffsetsSize: u32,
    pub MatchOffsetsCount: u32,
}
impl POINTER_SEARCH_PHYSICAL {}
impl ::std::default::Default for POINTER_SEARCH_PHYSICAL {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for POINTER_SEARCH_PHYSICAL {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("POINTER_SEARCH_PHYSICAL")
            .field("Offset", &self.Offset)
            .field("Length", &self.Length)
            .field("PointerMin", &self.PointerMin)
            .field("PointerMax", &self.PointerMax)
            .field("Flags", &self.Flags)
            .field("MatchOffsets", &self.MatchOffsets)
            .field("MatchOffsetsSize", &self.MatchOffsetsSize)
            .field("MatchOffsetsCount", &self.MatchOffsetsCount)
            .finish()
    }
}
impl ::std::cmp::PartialEq for POINTER_SEARCH_PHYSICAL {
    fn eq(&self, other: &Self) -> bool {
        self.Offset == other.Offset && self.Length == other.Length && self.PointerMin == other.PointerMin && self.PointerMax == other.PointerMax && self.Flags == other.Flags && self.MatchOffsets == other.MatchOffsets && self.MatchOffsetsSize == other.MatchOffsetsSize && self.MatchOffsetsCount == other.MatchOffsetsCount
    }
}
impl ::std::cmp::Eq for POINTER_SEARCH_PHYSICAL {}
unsafe impl ::windows::runtime::Abi for POINTER_SEARCH_PHYSICAL {
    type Abi = Self;
}
#[cfg(feature = "Win32_Foundation")]
pub type PREAD_PROCESS_MEMORY_ROUTINE = unsafe extern "system" fn(hprocess: super::super::super::Foundation::HANDLE, lpbaseaddress: u32, lpbuffer: *mut ::std::ffi::c_void, nsize: u32, lpnumberofbytesread: *mut u32) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PREAD_PROCESS_MEMORY_ROUTINE64 = unsafe extern "system" fn(hprocess: super::super::super::Foundation::HANDLE, qwbaseaddress: u64, lpbuffer: *mut ::std::ffi::c_void, nsize: u32, lpnumberofbytesread: *mut u32) -> super::super::super::Foundation::BOOL;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct PROCESSORINFO {
    pub Processor: u16,
    pub NumberProcessors: u16,
}
impl PROCESSORINFO {}
impl ::std::default::Default for PROCESSORINFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for PROCESSORINFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("PROCESSORINFO").field("Processor", &self.Processor).field("NumberProcessors", &self.NumberProcessors).finish()
    }
}
impl ::std::cmp::PartialEq for PROCESSORINFO {
    fn eq(&self, other: &Self) -> bool {
        self.Processor == other.Processor && self.NumberProcessors == other.NumberProcessors
    }
}
impl ::std::cmp::Eq for PROCESSORINFO {}
unsafe impl ::windows::runtime::Abi for PROCESSORINFO {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct PROCESSOR_ARCHITECTURE(pub u16);
pub const PROCESSOR_ARCHITECTURE_AMD64: PROCESSOR_ARCHITECTURE = PROCESSOR_ARCHITECTURE(9u16);
pub const PROCESSOR_ARCHITECTURE_IA64: PROCESSOR_ARCHITECTURE = PROCESSOR_ARCHITECTURE(6u16);
pub const PROCESSOR_ARCHITECTURE_INTEL: PROCESSOR_ARCHITECTURE = PROCESSOR_ARCHITECTURE(0u16);
pub const PROCESSOR_ARCHITECTURE_ARM: PROCESSOR_ARCHITECTURE = PROCESSOR_ARCHITECTURE(5u16);
pub const PROCESSOR_ARCHITECTURE_UNKNOWN: PROCESSOR_ARCHITECTURE = PROCESSOR_ARCHITECTURE(65535u16);
impl ::std::convert::From<u16> for PROCESSOR_ARCHITECTURE {
    fn from(value: u16) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PROCESSOR_ARCHITECTURE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct PROCESS_NAME_ENTRY {
    pub ProcessId: u32,
    pub NameOffset: u32,
    pub NameSize: u32,
    pub NextEntry: u32,
}
impl PROCESS_NAME_ENTRY {}
impl ::std::default::Default for PROCESS_NAME_ENTRY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for PROCESS_NAME_ENTRY {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("PROCESS_NAME_ENTRY").field("ProcessId", &self.ProcessId).field("NameOffset", &self.NameOffset).field("NameSize", &self.NameSize).field("NextEntry", &self.NextEntry).finish()
    }
}
impl ::std::cmp::PartialEq for PROCESS_NAME_ENTRY {
    fn eq(&self, other: &Self) -> bool {
        self.ProcessId == other.ProcessId && self.NameOffset == other.NameOffset && self.NameSize == other.NameSize && self.NextEntry == other.NextEntry
    }
}
impl ::std::cmp::Eq for PROCESS_NAME_ENTRY {}
unsafe impl ::windows::runtime::Abi for PROCESS_NAME_ENTRY {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct PROFILER_EVENT_MASK(pub u32);
pub const PROFILER_EVENT_MASK_TRACE_SCRIPT_FUNCTION_CALL: PROFILER_EVENT_MASK = PROFILER_EVENT_MASK(1u32);
pub const PROFILER_EVENT_MASK_TRACE_NATIVE_FUNCTION_CALL: PROFILER_EVENT_MASK = PROFILER_EVENT_MASK(2u32);
pub const PROFILER_EVENT_MASK_TRACE_DOM_FUNCTION_CALL: PROFILER_EVENT_MASK = PROFILER_EVENT_MASK(4u32);
pub const PROFILER_EVENT_MASK_TRACE_ALL: PROFILER_EVENT_MASK = PROFILER_EVENT_MASK(3u32);
pub const PROFILER_EVENT_MASK_TRACE_ALL_WITH_DOM: PROFILER_EVENT_MASK = PROFILER_EVENT_MASK(7u32);
impl ::std::convert::From<u32> for PROFILER_EVENT_MASK {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PROFILER_EVENT_MASK {
    type Abi = Self;
}
impl ::std::ops::BitOr for PROFILER_EVENT_MASK {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for PROFILER_EVENT_MASK {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for PROFILER_EVENT_MASK {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for PROFILER_EVENT_MASK {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for PROFILER_EVENT_MASK {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct PROFILER_HEAP_ENUM_FLAGS(pub u32);
pub const PROFILER_HEAP_ENUM_FLAGS_NONE: PROFILER_HEAP_ENUM_FLAGS = PROFILER_HEAP_ENUM_FLAGS(0u32);
pub const PROFILER_HEAP_ENUM_FLAGS_STORE_RELATIONSHIP_FLAGS: PROFILER_HEAP_ENUM_FLAGS = PROFILER_HEAP_ENUM_FLAGS(1u32);
pub const PROFILER_HEAP_ENUM_FLAGS_SUBSTRINGS: PROFILER_HEAP_ENUM_FLAGS = PROFILER_HEAP_ENUM_FLAGS(2u32);
pub const PROFILER_HEAP_ENUM_FLAGS_RELATIONSHIP_SUBSTRINGS: PROFILER_HEAP_ENUM_FLAGS = PROFILER_HEAP_ENUM_FLAGS(3u32);
impl ::std::convert::From<u32> for PROFILER_HEAP_ENUM_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PROFILER_HEAP_ENUM_FLAGS {
    type Abi = Self;
}
impl ::std::ops::BitOr for PROFILER_HEAP_ENUM_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for PROFILER_HEAP_ENUM_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for PROFILER_HEAP_ENUM_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for PROFILER_HEAP_ENUM_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for PROFILER_HEAP_ENUM_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct PROFILER_HEAP_OBJECT {
    pub size: u32,
    pub Anonymous: PROFILER_HEAP_OBJECT_0,
    pub typeNameId: u32,
    pub flags: u32,
    pub unused: u16,
    pub optionalInfoCount: u16,
}
impl PROFILER_HEAP_OBJECT {}
impl ::std::default::Default for PROFILER_HEAP_OBJECT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for PROFILER_HEAP_OBJECT {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for PROFILER_HEAP_OBJECT {}
unsafe impl ::windows::runtime::Abi for PROFILER_HEAP_OBJECT {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union PROFILER_HEAP_OBJECT_0 {
    pub objectId: usize,
    pub externalObjectAddress: *mut ::std::ffi::c_void,
}
impl PROFILER_HEAP_OBJECT_0 {}
impl ::std::default::Default for PROFILER_HEAP_OBJECT_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for PROFILER_HEAP_OBJECT_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for PROFILER_HEAP_OBJECT_0 {}
unsafe impl ::windows::runtime::Abi for PROFILER_HEAP_OBJECT_0 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct PROFILER_HEAP_OBJECT_FLAGS(pub u32);
pub const PROFILER_HEAP_OBJECT_FLAGS_NEW_OBJECT: PROFILER_HEAP_OBJECT_FLAGS = PROFILER_HEAP_OBJECT_FLAGS(1u32);
pub const PROFILER_HEAP_OBJECT_FLAGS_IS_ROOT: PROFILER_HEAP_OBJECT_FLAGS = PROFILER_HEAP_OBJECT_FLAGS(2u32);
pub const PROFILER_HEAP_OBJECT_FLAGS_SITE_CLOSED: PROFILER_HEAP_OBJECT_FLAGS = PROFILER_HEAP_OBJECT_FLAGS(4u32);
pub const PROFILER_HEAP_OBJECT_FLAGS_EXTERNAL: PROFILER_HEAP_OBJECT_FLAGS = PROFILER_HEAP_OBJECT_FLAGS(8u32);
pub const PROFILER_HEAP_OBJECT_FLAGS_EXTERNAL_UNKNOWN: PROFILER_HEAP_OBJECT_FLAGS = PROFILER_HEAP_OBJECT_FLAGS(16u32);
pub const PROFILER_HEAP_OBJECT_FLAGS_EXTERNAL_DISPATCH: PROFILER_HEAP_OBJECT_FLAGS = PROFILER_HEAP_OBJECT_FLAGS(32u32);
pub const PROFILER_HEAP_OBJECT_FLAGS_SIZE_APPROXIMATE: PROFILER_HEAP_OBJECT_FLAGS = PROFILER_HEAP_OBJECT_FLAGS(64u32);
pub const PROFILER_HEAP_OBJECT_FLAGS_SIZE_UNAVAILABLE: PROFILER_HEAP_OBJECT_FLAGS = PROFILER_HEAP_OBJECT_FLAGS(128u32);
pub const PROFILER_HEAP_OBJECT_FLAGS_NEW_STATE_UNAVAILABLE: PROFILER_HEAP_OBJECT_FLAGS = PROFILER_HEAP_OBJECT_FLAGS(256u32);
pub const PROFILER_HEAP_OBJECT_FLAGS_WINRT_INSTANCE: PROFILER_HEAP_OBJECT_FLAGS = PROFILER_HEAP_OBJECT_FLAGS(512u32);
pub const PROFILER_HEAP_OBJECT_FLAGS_WINRT_RUNTIMECLASS: PROFILER_HEAP_OBJECT_FLAGS = PROFILER_HEAP_OBJECT_FLAGS(1024u32);
pub const PROFILER_HEAP_OBJECT_FLAGS_WINRT_DELEGATE: PROFILER_HEAP_OBJECT_FLAGS = PROFILER_HEAP_OBJECT_FLAGS(2048u32);
pub const PROFILER_HEAP_OBJECT_FLAGS_WINRT_NAMESPACE: PROFILER_HEAP_OBJECT_FLAGS = PROFILER_HEAP_OBJECT_FLAGS(4096u32);
impl ::std::convert::From<u32> for PROFILER_HEAP_OBJECT_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PROFILER_HEAP_OBJECT_FLAGS {
    type Abi = Self;
}
impl ::std::ops::BitOr for PROFILER_HEAP_OBJECT_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for PROFILER_HEAP_OBJECT_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for PROFILER_HEAP_OBJECT_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for PROFILER_HEAP_OBJECT_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for PROFILER_HEAP_OBJECT_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const PROFILER_HEAP_OBJECT_NAME_ID_UNAVAILABLE: u32 = 4294967295u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct PROFILER_HEAP_OBJECT_OPTIONAL_INFO {
    pub infoType: PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE,
    pub Anonymous: PROFILER_HEAP_OBJECT_OPTIONAL_INFO_0,
}
#[cfg(feature = "Win32_Foundation")]
impl PROFILER_HEAP_OBJECT_OPTIONAL_INFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for PROFILER_HEAP_OBJECT_OPTIONAL_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for PROFILER_HEAP_OBJECT_OPTIONAL_INFO {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for PROFILER_HEAP_OBJECT_OPTIONAL_INFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for PROFILER_HEAP_OBJECT_OPTIONAL_INFO {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub union PROFILER_HEAP_OBJECT_OPTIONAL_INFO_0 {
    pub prototype: usize,
    pub functionName: super::super::super::Foundation::PWSTR,
    pub elementAttributesSize: u32,
    pub elementTextChildrenSize: u32,
    pub scopeList: *mut PROFILER_HEAP_OBJECT_SCOPE_LIST,
    pub internalProperty: *mut ::std::mem::ManuallyDrop<PROFILER_HEAP_OBJECT_RELATIONSHIP>,
    pub namePropertyList: *mut ::std::mem::ManuallyDrop<PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST>,
    pub indexPropertyList: *mut ::std::mem::ManuallyDrop<PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST>,
    pub relationshipList: *mut ::std::mem::ManuallyDrop<PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST>,
    pub eventList: *mut ::std::mem::ManuallyDrop<PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST>,
    pub weakMapCollectionList: *mut ::std::mem::ManuallyDrop<PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST>,
    pub mapCollectionList: *mut ::std::mem::ManuallyDrop<PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST>,
    pub setCollectionList: *mut ::std::mem::ManuallyDrop<PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST>,
}
#[cfg(feature = "Win32_Foundation")]
impl PROFILER_HEAP_OBJECT_OPTIONAL_INFO_0 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for PROFILER_HEAP_OBJECT_OPTIONAL_INFO_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for PROFILER_HEAP_OBJECT_OPTIONAL_INFO_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for PROFILER_HEAP_OBJECT_OPTIONAL_INFO_0 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for PROFILER_HEAP_OBJECT_OPTIONAL_INFO_0 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE(pub i32);
pub const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_PROTOTYPE: PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE = PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE(1i32);
pub const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_FUNCTION_NAME: PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE = PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE(2i32);
pub const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_SCOPE_LIST: PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE = PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE(3i32);
pub const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_INTERNAL_PROPERTY: PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE = PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE(4i32);
pub const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_NAME_PROPERTIES: PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE = PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE(5i32);
pub const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_INDEX_PROPERTIES: PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE = PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE(6i32);
pub const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_ELEMENT_ATTRIBUTES_SIZE: PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE = PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE(7i32);
pub const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_ELEMENT_TEXT_CHILDREN_SIZE: PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE = PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE(8i32);
pub const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_RELATIONSHIPS: PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE = PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE(9i32);
pub const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_WINRTEVENTS: PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE = PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE(10i32);
pub const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_WEAKMAP_COLLECTION_LIST: PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE = PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE(11i32);
pub const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_MAP_COLLECTION_LIST: PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE = PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE(12i32);
pub const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_SET_COLLECTION_LIST: PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE = PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE(13i32);
pub const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_MAX_VALUE: PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE = PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE(13i32);
impl ::std::convert::From<i32> for PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE {
    type Abi = Self;
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::clone::Clone for PROFILER_HEAP_OBJECT_RELATIONSHIP {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct PROFILER_HEAP_OBJECT_RELATIONSHIP {
    pub relationshipId: u32,
    pub relationshipInfo: PROFILER_RELATIONSHIP_INFO,
    pub Anonymous: PROFILER_HEAP_OBJECT_RELATIONSHIP_0,
}
#[cfg(feature = "Win32_Foundation")]
impl PROFILER_HEAP_OBJECT_RELATIONSHIP {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for PROFILER_HEAP_OBJECT_RELATIONSHIP {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for PROFILER_HEAP_OBJECT_RELATIONSHIP {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for PROFILER_HEAP_OBJECT_RELATIONSHIP {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for PROFILER_HEAP_OBJECT_RELATIONSHIP {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::clone::Clone for PROFILER_HEAP_OBJECT_RELATIONSHIP_0 {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub union PROFILER_HEAP_OBJECT_RELATIONSHIP_0 {
    pub numberValue: f64,
    pub stringValue: super::super::super::Foundation::PWSTR,
    pub bstrValue: ::std::mem::ManuallyDrop<super::super::super::Foundation::BSTR>,
    pub objectId: usize,
    pub externalObjectAddress: *mut ::std::ffi::c_void,
    pub subString: *mut PROFILER_PROPERTY_TYPE_SUBSTRING_INFO,
}
#[cfg(feature = "Win32_Foundation")]
impl PROFILER_HEAP_OBJECT_RELATIONSHIP_0 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for PROFILER_HEAP_OBJECT_RELATIONSHIP_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for PROFILER_HEAP_OBJECT_RELATIONSHIP_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for PROFILER_HEAP_OBJECT_RELATIONSHIP_0 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for PROFILER_HEAP_OBJECT_RELATIONSHIP_0 {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS(pub u32);
pub const PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_NONE: PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS = PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS(0u32);
pub const PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_IS_GET_ACCESSOR: PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS = PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS(65536u32);
pub const PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_IS_SET_ACCESSOR: PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS = PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS(131072u32);
pub const PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_LET_VARIABLE: PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS = PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS(262144u32);
pub const PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_CONST_VARIABLE: PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS = PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS(524288u32);
impl ::std::convert::From<u32> for PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS {
    type Abi = Self;
}
impl ::std::ops::BitOr for PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::clone::Clone for PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST {
    pub count: u32,
    pub elements: [PROFILER_HEAP_OBJECT_RELATIONSHIP; 1],
}
#[cfg(feature = "Win32_Foundation")]
impl PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct PROFILER_HEAP_OBJECT_SCOPE_LIST {
    pub count: u32,
    pub scopes: [usize; 1],
}
impl PROFILER_HEAP_OBJECT_SCOPE_LIST {}
impl ::std::default::Default for PROFILER_HEAP_OBJECT_SCOPE_LIST {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for PROFILER_HEAP_OBJECT_SCOPE_LIST {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("PROFILER_HEAP_OBJECT_SCOPE_LIST").field("count", &self.count).field("scopes", &self.scopes).finish()
    }
}
impl ::std::cmp::PartialEq for PROFILER_HEAP_OBJECT_SCOPE_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.count == other.count && self.scopes == other.scopes
    }
}
impl ::std::cmp::Eq for PROFILER_HEAP_OBJECT_SCOPE_LIST {}
unsafe impl ::windows::runtime::Abi for PROFILER_HEAP_OBJECT_SCOPE_LIST {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct PROFILER_HEAP_SUMMARY {
    pub version: PROFILER_HEAP_SUMMARY_VERSION,
    pub totalHeapSize: u32,
}
impl PROFILER_HEAP_SUMMARY {}
impl ::std::default::Default for PROFILER_HEAP_SUMMARY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for PROFILER_HEAP_SUMMARY {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("PROFILER_HEAP_SUMMARY").field("version", &self.version).field("totalHeapSize", &self.totalHeapSize).finish()
    }
}
impl ::std::cmp::PartialEq for PROFILER_HEAP_SUMMARY {
    fn eq(&self, other: &Self) -> bool {
        self.version == other.version && self.totalHeapSize == other.totalHeapSize
    }
}
impl ::std::cmp::Eq for PROFILER_HEAP_SUMMARY {}
unsafe impl ::windows::runtime::Abi for PROFILER_HEAP_SUMMARY {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct PROFILER_HEAP_SUMMARY_VERSION(pub i32);
pub const PROFILER_HEAP_SUMMARY_VERSION_1: PROFILER_HEAP_SUMMARY_VERSION = PROFILER_HEAP_SUMMARY_VERSION(1i32);
impl ::std::convert::From<i32> for PROFILER_HEAP_SUMMARY_VERSION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PROFILER_HEAP_SUMMARY_VERSION {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct PROFILER_PROPERTY_TYPE_SUBSTRING_INFO {
    pub length: u32,
    pub value: super::super::super::Foundation::PWSTR,
}
#[cfg(feature = "Win32_Foundation")]
impl PROFILER_PROPERTY_TYPE_SUBSTRING_INFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for PROFILER_PROPERTY_TYPE_SUBSTRING_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for PROFILER_PROPERTY_TYPE_SUBSTRING_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("PROFILER_PROPERTY_TYPE_SUBSTRING_INFO").field("length", &self.length).field("value", &self.value).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for PROFILER_PROPERTY_TYPE_SUBSTRING_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.length == other.length && self.value == other.value
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for PROFILER_PROPERTY_TYPE_SUBSTRING_INFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for PROFILER_PROPERTY_TYPE_SUBSTRING_INFO {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct PROFILER_RELATIONSHIP_INFO(pub i32);
pub const PROFILER_PROPERTY_TYPE_NUMBER: PROFILER_RELATIONSHIP_INFO = PROFILER_RELATIONSHIP_INFO(1i32);
pub const PROFILER_PROPERTY_TYPE_STRING: PROFILER_RELATIONSHIP_INFO = PROFILER_RELATIONSHIP_INFO(2i32);
pub const PROFILER_PROPERTY_TYPE_HEAP_OBJECT: PROFILER_RELATIONSHIP_INFO = PROFILER_RELATIONSHIP_INFO(3i32);
pub const PROFILER_PROPERTY_TYPE_EXTERNAL_OBJECT: PROFILER_RELATIONSHIP_INFO = PROFILER_RELATIONSHIP_INFO(4i32);
pub const PROFILER_PROPERTY_TYPE_BSTR: PROFILER_RELATIONSHIP_INFO = PROFILER_RELATIONSHIP_INFO(5i32);
pub const PROFILER_PROPERTY_TYPE_SUBSTRING: PROFILER_RELATIONSHIP_INFO = PROFILER_RELATIONSHIP_INFO(6i32);
impl ::std::convert::From<i32> for PROFILER_RELATIONSHIP_INFO {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PROFILER_RELATIONSHIP_INFO {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct PROFILER_SCRIPT_TYPE(pub i32);
pub const PROFILER_SCRIPT_TYPE_USER: PROFILER_SCRIPT_TYPE = PROFILER_SCRIPT_TYPE(0i32);
pub const PROFILER_SCRIPT_TYPE_DYNAMIC: PROFILER_SCRIPT_TYPE = PROFILER_SCRIPT_TYPE(1i32);
pub const PROFILER_SCRIPT_TYPE_NATIVE: PROFILER_SCRIPT_TYPE = PROFILER_SCRIPT_TYPE(2i32);
pub const PROFILER_SCRIPT_TYPE_DOM: PROFILER_SCRIPT_TYPE = PROFILER_SCRIPT_TYPE(3i32);
impl ::std::convert::From<i32> for PROFILER_SCRIPT_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PROFILER_SCRIPT_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct PROP_INFO_FLAGS(pub i32);
pub const PROP_INFO_NAME: PROP_INFO_FLAGS = PROP_INFO_FLAGS(1i32);
pub const PROP_INFO_TYPE: PROP_INFO_FLAGS = PROP_INFO_FLAGS(2i32);
pub const PROP_INFO_VALUE: PROP_INFO_FLAGS = PROP_INFO_FLAGS(4i32);
pub const PROP_INFO_FULLNAME: PROP_INFO_FLAGS = PROP_INFO_FLAGS(32i32);
pub const PROP_INFO_ATTRIBUTES: PROP_INFO_FLAGS = PROP_INFO_FLAGS(8i32);
pub const PROP_INFO_DEBUGPROP: PROP_INFO_FLAGS = PROP_INFO_FLAGS(16i32);
pub const PROP_INFO_AUTOEXPAND: PROP_INFO_FLAGS = PROP_INFO_FLAGS(134217728i32);
impl ::std::convert::From<i32> for PROP_INFO_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PROP_INFO_FLAGS {
    type Abi = Self;
}
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERBYINDEXPROC = unsafe extern "system" fn(param0: super::super::super::Foundation::PSTR, param1: super::super::super::Foundation::PSTR, param2: super::super::super::Foundation::PSTR, param3: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERBYINDEXPROCA = unsafe extern "system" fn(param0: super::super::super::Foundation::PSTR, param1: super::super::super::Foundation::PSTR, param2: super::super::super::Foundation::PSTR, param3: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERBYINDEXPROCW = unsafe extern "system" fn(param0: super::super::super::Foundation::PWSTR, param1: super::super::super::Foundation::PWSTR, param2: super::super::super::Foundation::PWSTR, param3: super::super::super::Foundation::PWSTR) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERCALLBACKPROC = unsafe extern "system" fn(action: usize, data: u64, context: u64) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERCLOSEPROC = unsafe extern "system" fn() -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERDELTANAME = unsafe extern "system" fn(param0: super::super::super::Foundation::PSTR, param1: *mut ::std::ffi::c_void, param2: u32, param3: u32, param4: *mut ::std::ffi::c_void, param5: u32, param6: u32, param7: super::super::super::Foundation::PSTR, param8: usize) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERDELTANAMEW = unsafe extern "system" fn(param0: super::super::super::Foundation::PWSTR, param1: *mut ::std::ffi::c_void, param2: u32, param3: u32, param4: *mut ::std::ffi::c_void, param5: u32, param6: u32, param7: super::super::super::Foundation::PWSTR, param8: usize) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERGETINDEXSTRING = unsafe extern "system" fn(param0: *mut ::std::ffi::c_void, param1: u32, param2: u32, param3: super::super::super::Foundation::PSTR, param4: usize) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERGETINDEXSTRINGW = unsafe extern "system" fn(param0: *mut ::std::ffi::c_void, param1: u32, param2: u32, param3: super::super::super::Foundation::PWSTR, param4: usize) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERGETOPTIONDATAPROC = unsafe extern "system" fn(param0: usize, param1: *mut u64) -> super::super::super::Foundation::BOOL;
pub type PSYMBOLSERVERGETOPTIONSPROC = unsafe extern "system" fn() -> usize;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERGETSUPPLEMENT = unsafe extern "system" fn(param0: super::super::super::Foundation::PSTR, param1: super::super::super::Foundation::PSTR, param2: super::super::super::Foundation::PSTR, param3: super::super::super::Foundation::PSTR, param4: usize) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERGETSUPPLEMENTW = unsafe extern "system" fn(param0: super::super::super::Foundation::PWSTR, param1: super::super::super::Foundation::PWSTR, param2: super::super::super::Foundation::PWSTR, param3: super::super::super::Foundation::PWSTR, param4: usize) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERGETVERSION = unsafe extern "system" fn(param0: *mut API_VERSION) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERISSTORE = unsafe extern "system" fn(param0: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERISSTOREW = unsafe extern "system" fn(param0: super::super::super::Foundation::PWSTR) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERMESSAGEPROC = unsafe extern "system" fn(action: usize, data: u64, context: u64) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVEROPENPROC = unsafe extern "system" fn() -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERPINGPROC = unsafe extern "system" fn(param0: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERPINGPROCA = unsafe extern "system" fn(param0: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERPINGPROCW = unsafe extern "system" fn(param0: super::super::super::Foundation::PWSTR) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERPINGPROCWEX = unsafe extern "system" fn(param0: super::super::super::Foundation::PWSTR) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERPROC = unsafe extern "system" fn(param0: super::super::super::Foundation::PSTR, param1: super::super::super::Foundation::PSTR, param2: *mut ::std::ffi::c_void, param3: u32, param4: u32, param5: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERPROCA = unsafe extern "system" fn(param0: super::super::super::Foundation::PSTR, param1: super::super::super::Foundation::PSTR, param2: *mut ::std::ffi::c_void, param3: u32, param4: u32, param5: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERPROCW = unsafe extern "system" fn(param0: super::super::super::Foundation::PWSTR, param1: super::super::super::Foundation::PWSTR, param2: *mut ::std::ffi::c_void, param3: u32, param4: u32, param5: super::super::super::Foundation::PWSTR) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERSETHTTPAUTHHEADER = unsafe extern "system" fn(pszauthheader: super::super::super::Foundation::PWSTR) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERSETOPTIONSPROC = unsafe extern "system" fn(param0: usize, param1: u64) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERSETOPTIONSWPROC = unsafe extern "system" fn(param0: usize, param1: u64) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERSTOREFILE = unsafe extern "system" fn(param0: super::super::super::Foundation::PSTR, param1: super::super::super::Foundation::PSTR, param2: *mut ::std::ffi::c_void, param3: u32, param4: u32, param5: super::super::super::Foundation::PSTR, param6: usize, param7: u32) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERSTOREFILEW = unsafe extern "system" fn(param0: super::super::super::Foundation::PWSTR, param1: super::super::super::Foundation::PWSTR, param2: *mut ::std::ffi::c_void, param3: u32, param4: u32, param5: super::super::super::Foundation::PWSTR, param6: usize, param7: u32) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERSTORESUPPLEMENT = unsafe extern "system" fn(param0: super::super::super::Foundation::PSTR, param1: super::super::super::Foundation::PSTR, param2: super::super::super::Foundation::PSTR, param3: super::super::super::Foundation::PSTR, param4: usize, param5: u32) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERSTORESUPPLEMENTW = unsafe extern "system" fn(param0: super::super::super::Foundation::PWSTR, param1: super::super::super::Foundation::PWSTR, param2: super::super::super::Foundation::PWSTR, param3: super::super::super::Foundation::PWSTR, param4: usize, param5: u32) -> super::super::super::Foundation::BOOL;
pub type PSYMBOLSERVERVERSION = unsafe extern "system" fn() -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOLSERVERWEXPROC = unsafe extern "system" fn(param0: super::super::super::Foundation::PWSTR, param1: super::super::super::Foundation::PWSTR, param2: *mut ::std::ffi::c_void, param3: u32, param4: u32, param5: super::super::super::Foundation::PWSTR, param6: *mut SYMSRV_EXTENDED_OUTPUT_DATA) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOL_FUNCENTRY_CALLBACK = unsafe extern "system" fn(hprocess: super::super::super::Foundation::HANDLE, addrbase: u32, usercontext: *const ::std::ffi::c_void) -> *mut ::std::ffi::c_void;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOL_FUNCENTRY_CALLBACK64 = unsafe extern "system" fn(hprocess: super::super::super::Foundation::HANDLE, addrbase: u64, usercontext: u64) -> *mut ::std::ffi::c_void;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOL_REGISTERED_CALLBACK = unsafe extern "system" fn(hprocess: super::super::super::Foundation::HANDLE, actioncode: u32, callbackdata: *const ::std::ffi::c_void, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYMBOL_REGISTERED_CALLBACK64 = unsafe extern "system" fn(hprocess: super::super::super::Foundation::HANDLE, actioncode: u32, callbackdata: u64, usercontext: u64) -> super::super::super::Foundation::BOOL;
pub type PSYM_DUMP_FIELD_CALLBACK = unsafe extern "system" fn(pfield: *mut FIELD_INFO, usercontext: *mut ::std::ffi::c_void) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PSYM_ENUMERATESYMBOLS_CALLBACK = unsafe extern "system" fn(psyminfo: *const SYMBOL_INFO, symbolsize: u32, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYM_ENUMERATESYMBOLS_CALLBACKW = unsafe extern "system" fn(psyminfo: *const SYMBOL_INFOW, symbolsize: u32, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYM_ENUMLINES_CALLBACK = unsafe extern "system" fn(lineinfo: *const SRCCODEINFO, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYM_ENUMLINES_CALLBACKW = unsafe extern "system" fn(lineinfo: *const SRCCODEINFOW, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYM_ENUMMODULES_CALLBACK = unsafe extern "system" fn(modulename: super::super::super::Foundation::PSTR, baseofdll: u32, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYM_ENUMMODULES_CALLBACK64 = unsafe extern "system" fn(modulename: super::super::super::Foundation::PSTR, baseofdll: u64, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYM_ENUMMODULES_CALLBACKW64 = unsafe extern "system" fn(modulename: super::super::super::Foundation::PWSTR, baseofdll: u64, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYM_ENUMPROCESSES_CALLBACK = unsafe extern "system" fn(hprocess: super::super::super::Foundation::HANDLE, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYM_ENUMSOURCEFILES_CALLBACK = unsafe extern "system" fn(psourcefile: *const SOURCEFILE, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYM_ENUMSOURCEFILES_CALLBACKW = unsafe extern "system" fn(psourcefile: *const SOURCEFILEW, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYM_ENUMSYMBOLS_CALLBACK = unsafe extern "system" fn(symbolname: super::super::super::Foundation::PSTR, symboladdress: u32, symbolsize: u32, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYM_ENUMSYMBOLS_CALLBACK64 = unsafe extern "system" fn(symbolname: super::super::super::Foundation::PSTR, symboladdress: u64, symbolsize: u32, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYM_ENUMSYMBOLS_CALLBACK64W = unsafe extern "system" fn(symbolname: super::super::super::Foundation::PWSTR, symboladdress: u64, symbolsize: u32, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PSYM_ENUMSYMBOLS_CALLBACKW = unsafe extern "system" fn(symbolname: super::super::super::Foundation::PWSTR, symboladdress: u32, symbolsize: u32, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PTRANSLATE_ADDRESS_ROUTINE = unsafe extern "system" fn(hprocess: super::super::super::Foundation::HANDLE, hthread: super::super::super::Foundation::HANDLE, lpaddr: *mut ADDRESS) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PTRANSLATE_ADDRESS_ROUTINE64 = unsafe extern "system" fn(hprocess: super::super::super::Foundation::HANDLE, hthread: super::super::super::Foundation::HANDLE, lpaddr: *const ADDRESS64) -> u64;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const PTR_SEARCH_NO_SYMBOL_CHECK: u32 = 2147483648u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const PTR_SEARCH_PHYS_ALL_HITS: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const PTR_SEARCH_PHYS_PTE: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const PTR_SEARCH_PHYS_RANGE_CHECK_ONLY: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const PTR_SEARCH_PHYS_SIZE_SHIFT: u32 = 3u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
pub type PVECTORED_EXCEPTION_HANDLER = unsafe extern "system" fn(exceptioninfo: *mut EXCEPTION_POINTERS) -> i32;
#[cfg(feature = "Win32_Foundation")]
pub type PWAITCHAINCALLBACK = unsafe extern "system" fn(wcthandle: *mut ::std::ffi::c_void, context: usize, callbackstatus: u32, nodecount: *mut u32, nodeinfoarray: *mut WAITCHAIN_NODE_INFO, iscycle: *mut i32);
pub type PWINDBG_CHECK_CONTROL_C = unsafe extern "system" fn() -> u32;
pub type PWINDBG_CHECK_VERSION = unsafe extern "system" fn() -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PWINDBG_DISASM = unsafe extern "system" fn(lpoffset: *mut usize, lpbuffer: super::super::super::Foundation::PSTR, fshoweffectiveaddress: u32) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PWINDBG_DISASM32 = unsafe extern "system" fn(lpoffset: *mut u32, lpbuffer: super::super::super::Foundation::PSTR, fshoweffectiveaddress: u32) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PWINDBG_DISASM64 = unsafe extern "system" fn(lpoffset: *mut u64, lpbuffer: super::super::super::Foundation::PSTR, fshoweffectiveaddress: u32) -> u32;
pub type PWINDBG_EXTENSION_API_VERSION = unsafe extern "system" fn() -> *mut EXT_API_VERSION;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
pub type PWINDBG_EXTENSION_DLL_INIT = unsafe extern "system" fn(lpextensionapis: *mut ::std::mem::ManuallyDrop<WINDBG_EXTENSION_APIS>, majorversion: u16, minorversion: u16);
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
pub type PWINDBG_EXTENSION_DLL_INIT32 = unsafe extern "system" fn(lpextensionapis: *mut ::std::mem::ManuallyDrop<WINDBG_EXTENSION_APIS32>, majorversion: u16, minorversion: u16);
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
pub type PWINDBG_EXTENSION_DLL_INIT64 = unsafe extern "system" fn(lpextensionapis: *mut ::std::mem::ManuallyDrop<WINDBG_EXTENSION_APIS64>, majorversion: u16, minorversion: u16);
#[cfg(feature = "Win32_Foundation")]
pub type PWINDBG_EXTENSION_ROUTINE = unsafe extern "system" fn(hcurrentprocess: super::super::super::Foundation::HANDLE, hcurrentthread: super::super::super::Foundation::HANDLE, dwcurrentpc: u32, dwprocessor: u32, lpargumentstring: super::super::super::Foundation::PSTR);
#[cfg(feature = "Win32_Foundation")]
pub type PWINDBG_EXTENSION_ROUTINE32 = unsafe extern "system" fn(hcurrentprocess: super::super::super::Foundation::HANDLE, hcurrentthread: super::super::super::Foundation::HANDLE, dwcurrentpc: u32, dwprocessor: u32, lpargumentstring: super::super::super::Foundation::PSTR);
#[cfg(feature = "Win32_Foundation")]
pub type PWINDBG_EXTENSION_ROUTINE64 = unsafe extern "system" fn(hcurrentprocess: super::super::super::Foundation::HANDLE, hcurrentthread: super::super::super::Foundation::HANDLE, dwcurrentpc: u64, dwprocessor: u32, lpargumentstring: super::super::super::Foundation::PSTR);
#[cfg(feature = "Win32_Foundation")]
pub type PWINDBG_GET_EXPRESSION = unsafe extern "system" fn(lpexpression: super::super::super::Foundation::PSTR) -> usize;
#[cfg(feature = "Win32_Foundation")]
pub type PWINDBG_GET_EXPRESSION32 = unsafe extern "system" fn(lpexpression: super::super::super::Foundation::PSTR) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PWINDBG_GET_EXPRESSION64 = unsafe extern "system" fn(lpexpression: super::super::super::Foundation::PSTR) -> u64;
#[cfg(feature = "Win32_Foundation")]
pub type PWINDBG_GET_SYMBOL = unsafe extern "system" fn(offset: *mut ::std::ffi::c_void, pchbuffer: super::super::super::Foundation::PSTR, pdisplacement: *mut usize);
#[cfg(feature = "Win32_Foundation")]
pub type PWINDBG_GET_SYMBOL32 = unsafe extern "system" fn(offset: u32, pchbuffer: super::super::super::Foundation::PSTR, pdisplacement: *mut u32);
#[cfg(feature = "Win32_Foundation")]
pub type PWINDBG_GET_SYMBOL64 = unsafe extern "system" fn(offset: u64, pchbuffer: super::super::super::Foundation::PSTR, pdisplacement: *mut u64);
#[cfg(feature = "Win32_System_SystemServices")]
pub type PWINDBG_GET_THREAD_CONTEXT_ROUTINE = unsafe extern "system" fn(processor: u32, lpcontext: *mut CONTEXT, cbsizeofcontext: u32) -> u32;
pub type PWINDBG_IOCTL_ROUTINE = unsafe extern "system" fn(ioctltype: u16, lpvdata: *mut ::std::ffi::c_void, cbsize: u32) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PWINDBG_OLDKD_EXTENSION_ROUTINE = unsafe extern "system" fn(dwcurrentpc: u32, lpextensionapis: *mut ::std::mem::ManuallyDrop<WINDBG_OLDKD_EXTENSION_APIS>, lpargumentstring: super::super::super::Foundation::PSTR);
pub type PWINDBG_OLDKD_READ_PHYSICAL_MEMORY = unsafe extern "system" fn(address: u64, buffer: *mut ::std::ffi::c_void, count: u32, bytesread: *mut u32) -> u32;
pub type PWINDBG_OLDKD_WRITE_PHYSICAL_MEMORY = unsafe extern "system" fn(address: u64, buffer: *mut ::std::ffi::c_void, length: u32, byteswritten: *mut u32) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
pub type PWINDBG_OLD_EXTENSION_ROUTINE = unsafe extern "system" fn(dwcurrentpc: u32, lpextensionapis: *mut ::std::mem::ManuallyDrop<WINDBG_EXTENSION_APIS>, lpargumentstring: super::super::super::Foundation::PSTR);
#[cfg(feature = "Win32_Foundation")]
pub type PWINDBG_OUTPUT_ROUTINE = unsafe extern "system" fn(lpformat: super::super::super::Foundation::PSTR);
pub type PWINDBG_READ_PROCESS_MEMORY_ROUTINE = unsafe extern "system" fn(offset: usize, lpbuffer: *mut ::std::ffi::c_void, cb: u32, lpcbbytesread: *mut u32) -> u32;
pub type PWINDBG_READ_PROCESS_MEMORY_ROUTINE32 = unsafe extern "system" fn(offset: u32, lpbuffer: *mut ::std::ffi::c_void, cb: u32, lpcbbytesread: *mut u32) -> u32;
pub type PWINDBG_READ_PROCESS_MEMORY_ROUTINE64 = unsafe extern "system" fn(offset: u64, lpbuffer: *mut ::std::ffi::c_void, cb: u32, lpcbbytesread: *mut u32) -> u32;
#[cfg(feature = "Win32_System_SystemServices")]
pub type PWINDBG_SET_THREAD_CONTEXT_ROUTINE = unsafe extern "system" fn(processor: u32, lpcontext: *mut CONTEXT, cbsizeofcontext: u32) -> u32;
pub type PWINDBG_STACKTRACE_ROUTINE = unsafe extern "system" fn(framepointer: u32, stackpointer: u32, programcounter: u32, stackframes: *mut EXTSTACKTRACE, frames: u32) -> u32;
pub type PWINDBG_STACKTRACE_ROUTINE32 = unsafe extern "system" fn(framepointer: u32, stackpointer: u32, programcounter: u32, stackframes: *mut EXTSTACKTRACE32, frames: u32) -> u32;
pub type PWINDBG_STACKTRACE_ROUTINE64 = unsafe extern "system" fn(framepointer: u64, stackpointer: u64, programcounter: u64, stackframes: *mut EXTSTACKTRACE64, frames: u32) -> u32;
pub type PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE = unsafe extern "system" fn(offset: usize, lpbuffer: *const ::std::ffi::c_void, cb: u32, lpcbbyteswritten: *mut u32) -> u32;
pub type PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE32 = unsafe extern "system" fn(offset: u32, lpbuffer: *const ::std::ffi::c_void, cb: u32, lpcbbyteswritten: *mut u32) -> u32;
pub type PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE64 = unsafe extern "system" fn(offset: u64, lpbuffer: *const ::std::ffi::c_void, cb: u32, lpcbbyteswritten: *mut u32) -> u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct PointerKind(pub i32);
pub const PointerStandard: PointerKind = PointerKind(0i32);
pub const PointerReference: PointerKind = PointerKind(1i32);
pub const PointerRValueReference: PointerKind = PointerKind(2i32);
pub const PointerCXHat: PointerKind = PointerKind(3i32);
pub const PointerManagedReference: PointerKind = PointerKind(4i32);
impl ::std::convert::From<i32> for PointerKind {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PointerKind {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct PreferredFormat(pub i32);
pub const FormatNone: PreferredFormat = PreferredFormat(0i32);
pub const FormatSingleCharacter: PreferredFormat = PreferredFormat(1i32);
pub const FormatQuotedString: PreferredFormat = PreferredFormat(2i32);
pub const FormatString: PreferredFormat = PreferredFormat(3i32);
pub const FormatQuotedUnicodeString: PreferredFormat = PreferredFormat(4i32);
pub const FormatUnicodeString: PreferredFormat = PreferredFormat(5i32);
pub const FormatQuotedUTF8String: PreferredFormat = PreferredFormat(6i32);
pub const FormatUTF8String: PreferredFormat = PreferredFormat(7i32);
pub const FormatBSTRString: PreferredFormat = PreferredFormat(8i32);
pub const FormatQuotedHString: PreferredFormat = PreferredFormat(9i32);
pub const FormatHString: PreferredFormat = PreferredFormat(10i32);
pub const FormatRaw: PreferredFormat = PreferredFormat(11i32);
pub const FormatEnumNameOnly: PreferredFormat = PreferredFormat(12i32);
pub const FormatEscapedStringWithQuote: PreferredFormat = PreferredFormat(13i32);
pub const FormatUTF32String: PreferredFormat = PreferredFormat(14i32);
pub const FormatQuotedUTF32String: PreferredFormat = PreferredFormat(15i32);
impl ::std::convert::From<i32> for PreferredFormat {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PreferredFormat {
    type Abi = Self;
}
pub const ProcessDebugManager: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(2024085538, 20980, 4560, [143, 32, 0, 128, 95, 44, 208, 100]);
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct READCONTROLSPACE {
    pub Processor: u16,
    pub Address: u32,
    pub BufLen: u32,
    pub Buf: [u8; 1],
}
impl READCONTROLSPACE {}
impl ::std::default::Default for READCONTROLSPACE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for READCONTROLSPACE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("READCONTROLSPACE").field("Processor", &self.Processor).field("Address", &self.Address).field("BufLen", &self.BufLen).field("Buf", &self.Buf).finish()
    }
}
impl ::std::cmp::PartialEq for READCONTROLSPACE {
    fn eq(&self, other: &Self) -> bool {
        self.Processor == other.Processor && self.Address == other.Address && self.BufLen == other.BufLen && self.Buf == other.Buf
    }
}
impl ::std::cmp::Eq for READCONTROLSPACE {}
unsafe impl ::windows::runtime::Abi for READCONTROLSPACE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct READCONTROLSPACE32 {
    pub Processor: u16,
    pub Address: u32,
    pub BufLen: u32,
    pub Buf: [u8; 1],
}
impl READCONTROLSPACE32 {}
impl ::std::default::Default for READCONTROLSPACE32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for READCONTROLSPACE32 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("READCONTROLSPACE32").field("Processor", &self.Processor).field("Address", &self.Address).field("BufLen", &self.BufLen).field("Buf", &self.Buf).finish()
    }
}
impl ::std::cmp::PartialEq for READCONTROLSPACE32 {
    fn eq(&self, other: &Self) -> bool {
        self.Processor == other.Processor && self.Address == other.Address && self.BufLen == other.BufLen && self.Buf == other.Buf
    }
}
impl ::std::cmp::Eq for READCONTROLSPACE32 {}
unsafe impl ::windows::runtime::Abi for READCONTROLSPACE32 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct READCONTROLSPACE64 {
    pub Processor: u16,
    pub Address: u64,
    pub BufLen: u32,
    pub Buf: [u8; 1],
}
impl READCONTROLSPACE64 {}
impl ::std::default::Default for READCONTROLSPACE64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for READCONTROLSPACE64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("READCONTROLSPACE64").field("Processor", &self.Processor).field("Address", &self.Address).field("BufLen", &self.BufLen).field("Buf", &self.Buf).finish()
    }
}
impl ::std::cmp::PartialEq for READCONTROLSPACE64 {
    fn eq(&self, other: &Self) -> bool {
        self.Processor == other.Processor && self.Address == other.Address && self.BufLen == other.BufLen && self.Buf == other.Buf
    }
}
impl ::std::cmp::Eq for READCONTROLSPACE64 {}
unsafe impl ::windows::runtime::Abi for READCONTROLSPACE64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct READ_WRITE_MSR {
    pub Msr: u32,
    pub Value: i64,
}
impl READ_WRITE_MSR {}
impl ::std::default::Default for READ_WRITE_MSR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for READ_WRITE_MSR {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("READ_WRITE_MSR").field("Msr", &self.Msr).field("Value", &self.Value).finish()
    }
}
impl ::std::cmp::PartialEq for READ_WRITE_MSR {
    fn eq(&self, other: &Self) -> bool {
        self.Msr == other.Msr && self.Value == other.Value
    }
}
impl ::std::cmp::Eq for READ_WRITE_MSR {}
unsafe impl ::windows::runtime::Abi for READ_WRITE_MSR {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct RIP_INFO {
    pub dwError: u32,
    pub dwType: RIP_INFO_TYPE,
}
impl RIP_INFO {}
impl ::std::default::Default for RIP_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for RIP_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("RIP_INFO").field("dwError", &self.dwError).field("dwType", &self.dwType).finish()
    }
}
impl ::std::cmp::PartialEq for RIP_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.dwError == other.dwError && self.dwType == other.dwType
    }
}
impl ::std::cmp::Eq for RIP_INFO {}
unsafe impl ::windows::runtime::Abi for RIP_INFO {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct RIP_INFO_TYPE(pub u32);
pub const SLE_ERROR: RIP_INFO_TYPE = RIP_INFO_TYPE(1u32);
pub const SLE_MINORERROR: RIP_INFO_TYPE = RIP_INFO_TYPE(2u32);
pub const SLE_WARNING: RIP_INFO_TYPE = RIP_INFO_TYPE(3u32);
impl ::std::convert::From<u32> for RIP_INFO_TYPE {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for RIP_INFO_TYPE {
    type Abi = Self;
}
impl ::std::ops::BitOr for RIP_INFO_TYPE {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for RIP_INFO_TYPE {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for RIP_INFO_TYPE {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for RIP_INFO_TYPE {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for RIP_INFO_TYPE {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct RTL_VIRTUAL_UNWIND_HANDLER_TYPE(pub u32);
pub const UNW_FLAG_NHANDLER: RTL_VIRTUAL_UNWIND_HANDLER_TYPE = RTL_VIRTUAL_UNWIND_HANDLER_TYPE(0u32);
pub const UNW_FLAG_EHANDLER: RTL_VIRTUAL_UNWIND_HANDLER_TYPE = RTL_VIRTUAL_UNWIND_HANDLER_TYPE(1u32);
pub const UNW_FLAG_UHANDLER: RTL_VIRTUAL_UNWIND_HANDLER_TYPE = RTL_VIRTUAL_UNWIND_HANDLER_TYPE(2u32);
pub const UNW_FLAG_CHAININFO: RTL_VIRTUAL_UNWIND_HANDLER_TYPE = RTL_VIRTUAL_UNWIND_HANDLER_TYPE(4u32);
impl ::std::convert::From<u32> for RTL_VIRTUAL_UNWIND_HANDLER_TYPE {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for RTL_VIRTUAL_UNWIND_HANDLER_TYPE {
    type Abi = Self;
}
impl ::std::ops::BitOr for RTL_VIRTUAL_UNWIND_HANDLER_TYPE {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for RTL_VIRTUAL_UNWIND_HANDLER_TYPE {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for RTL_VIRTUAL_UNWIND_HANDLER_TYPE {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for RTL_VIRTUAL_UNWIND_HANDLER_TYPE {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for RTL_VIRTUAL_UNWIND_HANDLER_TYPE {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn RaiseException(dwexceptioncode: u32, dwexceptionflags: u32, nnumberofarguments: u32, lparguments: *const usize) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RaiseException(dwexceptioncode: u32, dwexceptionflags: u32, nnumberofarguments: u32, lparguments: *const usize);
        }
        ::std::mem::transmute(RaiseException(::std::mem::transmute(dwexceptioncode), ::std::mem::transmute(dwexceptionflags), ::std::mem::transmute(nnumberofarguments), ::std::mem::transmute(lparguments)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn RaiseFailFastException(pexceptionrecord: *const EXCEPTION_RECORD, pcontextrecord: *const CONTEXT, dwflags: u32) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RaiseFailFastException(pexceptionrecord: *const EXCEPTION_RECORD, pcontextrecord: *const CONTEXT, dwflags: u32);
        }
        ::std::mem::transmute(RaiseFailFastException(::std::mem::transmute(pexceptionrecord), ::std::mem::transmute(pcontextrecord), ::std::mem::transmute(dwflags)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn RangeMapAddPeImageSections<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(rmaphandle: *const ::std::ffi::c_void, imagename: Param1, mappedimage: *const ::std::ffi::c_void, mappingbytes: u32, imagebase: u64, usertag: u64, mappingflags: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RangeMapAddPeImageSections(rmaphandle: *const ::std::ffi::c_void, imagename: super::super::super::Foundation::PWSTR, mappedimage: *const ::std::ffi::c_void, mappingbytes: u32, imagebase: u64, usertag: u64, mappingflags: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(RangeMapAddPeImageSections(::std::mem::transmute(rmaphandle), imagename.into_param().abi(), ::std::mem::transmute(mappedimage), ::std::mem::transmute(mappingbytes), ::std::mem::transmute(imagebase), ::std::mem::transmute(usertag), ::std::mem::transmute(mappingflags)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn RangeMapCreate() -> *mut ::std::ffi::c_void {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RangeMapCreate() -> *mut ::std::ffi::c_void;
        }
        ::std::mem::transmute(RangeMapCreate())
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn RangeMapFree(rmaphandle: *const ::std::ffi::c_void) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RangeMapFree(rmaphandle: *const ::std::ffi::c_void);
        }
        ::std::mem::transmute(RangeMapFree(::std::mem::transmute(rmaphandle)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn RangeMapRead(rmaphandle: *const ::std::ffi::c_void, offset: u64, buffer: *mut ::std::ffi::c_void, requestbytes: u32, flags: u32, donebytes: *mut u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RangeMapRead(rmaphandle: *const ::std::ffi::c_void, offset: u64, buffer: *mut ::std::ffi::c_void, requestbytes: u32, flags: u32, donebytes: *mut u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(RangeMapRead(::std::mem::transmute(rmaphandle), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(requestbytes), ::std::mem::transmute(flags), ::std::mem::transmute(donebytes)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn RangeMapRemove(rmaphandle: *const ::std::ffi::c_void, usertag: u64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RangeMapRemove(rmaphandle: *const ::std::ffi::c_void, usertag: u64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(RangeMapRemove(::std::mem::transmute(rmaphandle), ::std::mem::transmute(usertag)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn RangeMapWrite(rmaphandle: *const ::std::ffi::c_void, offset: u64, buffer: *const ::std::ffi::c_void, requestbytes: u32, flags: u32, donebytes: *mut u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RangeMapWrite(rmaphandle: *const ::std::ffi::c_void, offset: u64, buffer: *const ::std::ffi::c_void, requestbytes: u32, flags: u32, donebytes: *mut u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(RangeMapWrite(::std::mem::transmute(rmaphandle), ::std::mem::transmute(offset), ::std::mem::transmute(buffer), ::std::mem::transmute(requestbytes), ::std::mem::transmute(flags), ::std::mem::transmute(donebytes)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct RawSearchFlags(pub i32);
pub const RawSearchNone: RawSearchFlags = RawSearchFlags(0i32);
pub const RawSearchNoBases: RawSearchFlags = RawSearchFlags(1i32);
impl ::std::convert::From<i32> for RawSearchFlags {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for RawSearchFlags {
    type Abi = Self;
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn ReBaseImage<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(
    currentimagename: Param0,
    symbolpath: Param1,
    frebase: Param2,
    frebasesysfileok: Param3,
    fgoingdown: Param4,
    checkimagesize: u32,
    oldimagesize: *mut u32,
    oldimagebase: *mut usize,
    newimagesize: *mut u32,
    newimagebase: *mut usize,
    timestamp: u32,
) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ReBaseImage(currentimagename: super::super::super::Foundation::PSTR, symbolpath: super::super::super::Foundation::PSTR, frebase: super::super::super::Foundation::BOOL, frebasesysfileok: super::super::super::Foundation::BOOL, fgoingdown: super::super::super::Foundation::BOOL, checkimagesize: u32, oldimagesize: *mut u32, oldimagebase: *mut usize, newimagesize: *mut u32, newimagebase: *mut usize, timestamp: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(ReBaseImage(
            currentimagename.into_param().abi(),
            symbolpath.into_param().abi(),
            frebase.into_param().abi(),
            frebasesysfileok.into_param().abi(),
            fgoingdown.into_param().abi(),
            ::std::mem::transmute(checkimagesize),
            ::std::mem::transmute(oldimagesize),
            ::std::mem::transmute(oldimagebase),
            ::std::mem::transmute(newimagesize),
            ::std::mem::transmute(newimagebase),
            ::std::mem::transmute(timestamp),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn ReBaseImage64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(
    currentimagename: Param0,
    symbolpath: Param1,
    frebase: Param2,
    frebasesysfileok: Param3,
    fgoingdown: Param4,
    checkimagesize: u32,
    oldimagesize: *mut u32,
    oldimagebase: *mut u64,
    newimagesize: *mut u32,
    newimagebase: *mut u64,
    timestamp: u32,
) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ReBaseImage64(currentimagename: super::super::super::Foundation::PSTR, symbolpath: super::super::super::Foundation::PSTR, frebase: super::super::super::Foundation::BOOL, frebasesysfileok: super::super::super::Foundation::BOOL, fgoingdown: super::super::super::Foundation::BOOL, checkimagesize: u32, oldimagesize: *mut u32, oldimagebase: *mut u64, newimagesize: *mut u32, newimagebase: *mut u64, timestamp: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(ReBaseImage64(
            currentimagename.into_param().abi(),
            symbolpath.into_param().abi(),
            frebase.into_param().abi(),
            frebasesysfileok.into_param().abi(),
            fgoingdown.into_param().abi(),
            ::std::mem::transmute(checkimagesize),
            ::std::mem::transmute(oldimagesize),
            ::std::mem::transmute(oldimagebase),
            ::std::mem::transmute(newimagesize),
            ::std::mem::transmute(newimagebase),
            ::std::mem::transmute(timestamp),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn ReadProcessMemory<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, lpbaseaddress: *const ::std::ffi::c_void, lpbuffer: *mut ::std::ffi::c_void, nsize: usize, lpnumberofbytesread: *mut usize) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ReadProcessMemory(hprocess: super::super::super::Foundation::HANDLE, lpbaseaddress: *const ::std::ffi::c_void, lpbuffer: *mut ::std::ffi::c_void, nsize: usize, lpnumberofbytesread: *mut usize) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(ReadProcessMemory(hprocess.into_param().abi(), ::std::mem::transmute(lpbaseaddress), ::std::mem::transmute(lpbuffer), ::std::mem::transmute(nsize), ::std::mem::transmute(lpnumberofbytesread)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub type RegisterAuthoringClientFunctionType = unsafe extern "system" fn(authoringmodeobject: ::windows::runtime::RawPtr, host: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn RegisterWaitChainCOMCallback(callstatecallback: ::std::option::Option<PCOGETCALLSTATE>, activationstatecallback: ::std::option::Option<PCOGETACTIVATIONSTATE>) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RegisterWaitChainCOMCallback(callstatecallback: ::windows::runtime::RawPtr, activationstatecallback: ::windows::runtime::RawPtr);
        }
        ::std::mem::transmute(RegisterWaitChainCOMCallback(::std::mem::transmute(callstatecallback), ::std::mem::transmute(activationstatecallback)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn RemoveInvalidModuleList<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RemoveInvalidModuleList(hprocess: super::super::super::Foundation::HANDLE);
        }
        ::std::mem::transmute(RemoveInvalidModuleList(hprocess.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn RemoveVectoredContinueHandler(handle: *const ::std::ffi::c_void) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RemoveVectoredContinueHandler(handle: *const ::std::ffi::c_void) -> u32;
        }
        ::std::mem::transmute(RemoveVectoredContinueHandler(::std::mem::transmute(handle)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn RemoveVectoredExceptionHandler(handle: *const ::std::ffi::c_void) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RemoveVectoredExceptionHandler(handle: *const ::std::ffi::c_void) -> u32;
        }
        ::std::mem::transmute(RemoveVectoredExceptionHandler(::std::mem::transmute(handle)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn ReportSymbolLoadSummary<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, ploadmodule: Param1, psymboldata: *const DBGHELP_DATA_REPORT_STRUCT) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ReportSymbolLoadSummary(hprocess: super::super::super::Foundation::HANDLE, ploadmodule: super::super::super::Foundation::PWSTR, psymboldata: *const DBGHELP_DATA_REPORT_STRUCT) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(ReportSymbolLoadSummary(hprocess.into_param().abi(), ploadmodule.into_param().abi(), ::std::mem::transmute(psymboldata)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "aarch64")]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn RtlAddFunctionTable(functiontable: *const super::super::SystemServices::IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY, entrycount: u32, baseaddress: usize) -> super::super::super::Foundation::BOOLEAN {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RtlAddFunctionTable(functiontable: *const super::super::SystemServices::IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY, entrycount: u32, baseaddress: usize) -> super::super::super::Foundation::BOOLEAN;
        }
        ::std::mem::transmute(RtlAddFunctionTable(::std::mem::transmute(functiontable), ::std::mem::transmute(entrycount), ::std::mem::transmute(baseaddress)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "aarch64")]
#[cfg(feature = "Win32_System_SystemServices")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn RtlAddGrowableFunctionTable(dynamictable: *mut *mut ::std::ffi::c_void, functiontable: *const super::super::SystemServices::IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY, entrycount: u32, maximumentrycount: u32, rangebase: usize, rangeend: usize) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RtlAddGrowableFunctionTable(dynamictable: *mut *mut ::std::ffi::c_void, functiontable: *const super::super::SystemServices::IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY, entrycount: u32, maximumentrycount: u32, rangebase: usize, rangeend: usize) -> u32;
        }
        ::std::mem::transmute(RtlAddGrowableFunctionTable(::std::mem::transmute(dynamictable), ::std::mem::transmute(functiontable), ::std::mem::transmute(entrycount), ::std::mem::transmute(maximumentrycount), ::std::mem::transmute(rangebase), ::std::mem::transmute(rangeend)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_System_SystemServices")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn RtlCaptureContext(contextrecord: *mut CONTEXT) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RtlCaptureContext(contextrecord: *mut CONTEXT);
        }
        ::std::mem::transmute(RtlCaptureContext(::std::mem::transmute(contextrecord)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "x86_64")]
#[cfg(feature = "Win32_System_SystemServices")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn RtlCaptureContext2(contextrecord: *mut CONTEXT) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RtlCaptureContext2(contextrecord: *mut CONTEXT);
        }
        ::std::mem::transmute(RtlCaptureContext2(::std::mem::transmute(contextrecord)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn RtlCaptureStackBackTrace(framestoskip: u32, framestocapture: u32, backtrace: *mut *mut ::std::ffi::c_void, backtracehash: *mut u32) -> u16 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RtlCaptureStackBackTrace(framestoskip: u32, framestocapture: u32, backtrace: *mut *mut ::std::ffi::c_void, backtracehash: *mut u32) -> u16;
        }
        ::std::mem::transmute(RtlCaptureStackBackTrace(::std::mem::transmute(framestoskip), ::std::mem::transmute(framestocapture), ::std::mem::transmute(backtrace), ::std::mem::transmute(backtracehash)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "aarch64")]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn RtlDeleteFunctionTable(functiontable: *const super::super::SystemServices::IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY) -> super::super::super::Foundation::BOOLEAN {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RtlDeleteFunctionTable(functiontable: *const super::super::SystemServices::IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY) -> super::super::super::Foundation::BOOLEAN;
        }
        ::std::mem::transmute(RtlDeleteFunctionTable(::std::mem::transmute(functiontable)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn RtlDeleteGrowableFunctionTable(dynamictable: *const ::std::ffi::c_void) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RtlDeleteGrowableFunctionTable(dynamictable: *const ::std::ffi::c_void);
        }
        ::std::mem::transmute(RtlDeleteGrowableFunctionTable(::std::mem::transmute(dynamictable)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn RtlGrowFunctionTable(dynamictable: *mut ::std::ffi::c_void, newentrycount: u32) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RtlGrowFunctionTable(dynamictable: *mut ::std::ffi::c_void, newentrycount: u32);
        }
        ::std::mem::transmute(RtlGrowFunctionTable(::std::mem::transmute(dynamictable), ::std::mem::transmute(newentrycount)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn RtlInstallFunctionTableCallback<'a, Param5: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(tableidentifier: u64, baseaddress: u64, length: u32, callback: ::std::option::Option<super::super::SystemServices::PGET_RUNTIME_FUNCTION_CALLBACK>, context: *const ::std::ffi::c_void, outofprocesscallbackdll: Param5) -> super::super::super::Foundation::BOOLEAN {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RtlInstallFunctionTableCallback(tableidentifier: u64, baseaddress: u64, length: u32, callback: ::windows::runtime::RawPtr, context: *const ::std::ffi::c_void, outofprocesscallbackdll: super::super::super::Foundation::PWSTR) -> super::super::super::Foundation::BOOLEAN;
        }
        ::std::mem::transmute(RtlInstallFunctionTableCallback(::std::mem::transmute(tableidentifier), ::std::mem::transmute(baseaddress), ::std::mem::transmute(length), ::std::mem::transmute(callback), ::std::mem::transmute(context), outofprocesscallbackdll.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "aarch64")]
#[cfg(feature = "Win32_System_SystemServices")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn RtlLookupFunctionEntry(controlpc: usize, imagebase: *mut usize, historytable: *mut super::super::SystemServices::UNWIND_HISTORY_TABLE) -> *mut super::super::SystemServices::IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RtlLookupFunctionEntry(controlpc: usize, imagebase: *mut usize, historytable: *mut super::super::SystemServices::UNWIND_HISTORY_TABLE) -> *mut super::super::SystemServices::IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;
        }
        ::std::mem::transmute(RtlLookupFunctionEntry(::std::mem::transmute(controlpc), ::std::mem::transmute(imagebase), ::std::mem::transmute(historytable)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn RtlPcToFileHeader(pcvalue: *const ::std::ffi::c_void, baseofimage: *mut *mut ::std::ffi::c_void) -> *mut ::std::ffi::c_void {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RtlPcToFileHeader(pcvalue: *const ::std::ffi::c_void, baseofimage: *mut *mut ::std::ffi::c_void) -> *mut ::std::ffi::c_void;
        }
        ::std::mem::transmute(RtlPcToFileHeader(::std::mem::transmute(pcvalue), ::std::mem::transmute(baseofimage)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn RtlRestoreContext(contextrecord: *const CONTEXT, exceptionrecord: *const EXCEPTION_RECORD) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RtlRestoreContext(contextrecord: *const CONTEXT, exceptionrecord: *const EXCEPTION_RECORD);
        }
        ::std::mem::transmute(RtlRestoreContext(::std::mem::transmute(contextrecord), ::std::mem::transmute(exceptionrecord)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn RtlUnwind(targetframe: *const ::std::ffi::c_void, targetip: *const ::std::ffi::c_void, exceptionrecord: *const EXCEPTION_RECORD, returnvalue: *const ::std::ffi::c_void) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RtlUnwind(targetframe: *const ::std::ffi::c_void, targetip: *const ::std::ffi::c_void, exceptionrecord: *const EXCEPTION_RECORD, returnvalue: *const ::std::ffi::c_void);
        }
        ::std::mem::transmute(RtlUnwind(::std::mem::transmute(targetframe), ::std::mem::transmute(targetip), ::std::mem::transmute(exceptionrecord), ::std::mem::transmute(returnvalue)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn RtlUnwindEx(targetframe: *const ::std::ffi::c_void, targetip: *const ::std::ffi::c_void, exceptionrecord: *const EXCEPTION_RECORD, returnvalue: *const ::std::ffi::c_void, contextrecord: *const CONTEXT, historytable: *const super::super::SystemServices::UNWIND_HISTORY_TABLE) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RtlUnwindEx(targetframe: *const ::std::ffi::c_void, targetip: *const ::std::ffi::c_void, exceptionrecord: *const EXCEPTION_RECORD, returnvalue: *const ::std::ffi::c_void, contextrecord: *const CONTEXT, historytable: *const super::super::SystemServices::UNWIND_HISTORY_TABLE);
        }
        ::std::mem::transmute(RtlUnwindEx(::std::mem::transmute(targetframe), ::std::mem::transmute(targetip), ::std::mem::transmute(exceptionrecord), ::std::mem::transmute(returnvalue), ::std::mem::transmute(contextrecord), ::std::mem::transmute(historytable)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "aarch64")]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Kernel`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn RtlVirtualUnwind(handlertype: RTL_VIRTUAL_UNWIND_HANDLER_TYPE, imagebase: usize, controlpc: usize, functionentry: *const super::super::SystemServices::IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY, contextrecord: *mut CONTEXT, handlerdata: *mut *mut ::std::ffi::c_void, establisherframe: *mut usize, contextpointers: *mut super::super::SystemServices::KNONVOLATILE_CONTEXT_POINTERS_ARM64) -> ::std::option::Option<super::super::Kernel::EXCEPTION_ROUTINE> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RtlVirtualUnwind(handlertype: RTL_VIRTUAL_UNWIND_HANDLER_TYPE, imagebase: usize, controlpc: usize, functionentry: *const super::super::SystemServices::IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY, contextrecord: *mut CONTEXT, handlerdata: *mut *mut ::std::ffi::c_void, establisherframe: *mut usize, contextpointers: *mut super::super::SystemServices::KNONVOLATILE_CONTEXT_POINTERS_ARM64) -> ::std::option::Option<super::super::Kernel::EXCEPTION_ROUTINE>;
        }
        ::std::mem::transmute(RtlVirtualUnwind(
            ::std::mem::transmute(handlertype),
            ::std::mem::transmute(imagebase),
            ::std::mem::transmute(controlpc),
            ::std::mem::transmute(functionentry),
            ::std::mem::transmute(contextrecord),
            ::std::mem::transmute(handlerdata),
            ::std::mem::transmute(establisherframe),
            ::std::mem::transmute(contextpointers),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct SCRIPTGCTYPE(pub i32);
pub const SCRIPTGCTYPE_NORMAL: SCRIPTGCTYPE = SCRIPTGCTYPE(0i32);
pub const SCRIPTGCTYPE_EXHAUSTIVE: SCRIPTGCTYPE = SCRIPTGCTYPE(1i32);
impl ::std::convert::From<i32> for SCRIPTGCTYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SCRIPTGCTYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTINFO_ITYPEINFO: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTINFO_IUNKNOWN: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTINTERRUPT_DEBUG: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTINTERRUPT_RAISEEXCEPTION: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTITEM_CODEONLY: u32 = 512u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTITEM_GLOBALMEMBERS: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTITEM_ISPERSISTENT: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTITEM_ISSOURCE: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTITEM_ISVISIBLE: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTITEM_NOCODE: u32 = 1024u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct SCRIPTLANGUAGEVERSION(pub i32);
pub const SCRIPTLANGUAGEVERSION_DEFAULT: SCRIPTLANGUAGEVERSION = SCRIPTLANGUAGEVERSION(0i32);
pub const SCRIPTLANGUAGEVERSION_5_7: SCRIPTLANGUAGEVERSION = SCRIPTLANGUAGEVERSION(1i32);
pub const SCRIPTLANGUAGEVERSION_5_8: SCRIPTLANGUAGEVERSION = SCRIPTLANGUAGEVERSION(2i32);
pub const SCRIPTLANGUAGEVERSION_MAX: SCRIPTLANGUAGEVERSION = SCRIPTLANGUAGEVERSION(255i32);
impl ::std::convert::From<i32> for SCRIPTLANGUAGEVERSION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SCRIPTLANGUAGEVERSION {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROC_HOSTMANAGESSOURCE: u32 = 128u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROC_IMPLICIT_PARENTS: u32 = 512u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROC_IMPLICIT_THIS: u32 = 256u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROC_ISEXPRESSION: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROC_ISXDOMAIN: u32 = 1024u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROP_ABBREVIATE_GLOBALNAME_RESOLUTION: u32 = 1879048194u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROP_BUILDNUMBER: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROP_CATCHEXCEPTION: u32 = 4097u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROP_CONVERSIONLCID: u32 = 4098u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROP_DEBUGGER: u32 = 4352u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROP_DELAYEDEVENTSINKING: u32 = 4096u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROP_GCCONTROLSOFTCLOSE: u32 = 8192u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROP_HACK_FIBERSUPPORT: u32 = 1879048192u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROP_HACK_TRIDENTEVENTSINK: u32 = 1879048193u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROP_HOSTKEEPALIVE: u32 = 1879048196u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROP_HOSTSTACKREQUIRED: u32 = 4099u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROP_INTEGERMODE: u32 = 12288u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROP_INVOKEVERSIONING: u32 = 16384u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROP_JITDEBUG: u32 = 4353u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROP_MAJORVERSION: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROP_MINORVERSION: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROP_NAME: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROP_SCRIPTSAREFULLYTRUSTED: u32 = 4100u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTPROP_STRINGCOMPAREINSTANCE: u32 = 12289u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct SCRIPTSTATE(pub i32);
pub const SCRIPTSTATE_UNINITIALIZED: SCRIPTSTATE = SCRIPTSTATE(0i32);
pub const SCRIPTSTATE_INITIALIZED: SCRIPTSTATE = SCRIPTSTATE(5i32);
pub const SCRIPTSTATE_STARTED: SCRIPTSTATE = SCRIPTSTATE(1i32);
pub const SCRIPTSTATE_CONNECTED: SCRIPTSTATE = SCRIPTSTATE(2i32);
pub const SCRIPTSTATE_DISCONNECTED: SCRIPTSTATE = SCRIPTSTATE(3i32);
pub const SCRIPTSTATE_CLOSED: SCRIPTSTATE = SCRIPTSTATE(4i32);
impl ::std::convert::From<i32> for SCRIPTSTATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SCRIPTSTATE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTSTAT_INSTRUCTION_COUNT: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTSTAT_INTSTRUCTION_TIME: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTSTAT_STATEMENT_COUNT: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTSTAT_TOTAL_TIME: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTTEXT_DELAYEXECUTION: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTTEXT_HOSTMANAGESSOURCE: u32 = 128u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTTEXT_ISEXPRESSION: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTTEXT_ISNONUSERCODE: u32 = 512u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTTEXT_ISPERSISTENT: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTTEXT_ISVISIBLE: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTTEXT_ISXDOMAIN: u32 = 256u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct SCRIPTTHREADSTATE(pub i32);
pub const SCRIPTTHREADSTATE_NOTINSCRIPT: SCRIPTTHREADSTATE = SCRIPTTHREADSTATE(0i32);
pub const SCRIPTTHREADSTATE_RUNNING: SCRIPTTHREADSTATE = SCRIPTTHREADSTATE(1i32);
impl ::std::convert::From<i32> for SCRIPTTHREADSTATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SCRIPTTHREADSTATE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct SCRIPTTRACEINFO(pub i32);
pub const SCRIPTTRACEINFO_SCRIPTSTART: SCRIPTTRACEINFO = SCRIPTTRACEINFO(0i32);
pub const SCRIPTTRACEINFO_SCRIPTEND: SCRIPTTRACEINFO = SCRIPTTRACEINFO(1i32);
pub const SCRIPTTRACEINFO_COMCALLSTART: SCRIPTTRACEINFO = SCRIPTTRACEINFO(2i32);
pub const SCRIPTTRACEINFO_COMCALLEND: SCRIPTTRACEINFO = SCRIPTTRACEINFO(3i32);
pub const SCRIPTTRACEINFO_CREATEOBJSTART: SCRIPTTRACEINFO = SCRIPTTRACEINFO(4i32);
pub const SCRIPTTRACEINFO_CREATEOBJEND: SCRIPTTRACEINFO = SCRIPTTRACEINFO(5i32);
pub const SCRIPTTRACEINFO_GETOBJSTART: SCRIPTTRACEINFO = SCRIPTTRACEINFO(6i32);
pub const SCRIPTTRACEINFO_GETOBJEND: SCRIPTTRACEINFO = SCRIPTTRACEINFO(7i32);
impl ::std::convert::From<i32> for SCRIPTTRACEINFO {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SCRIPTTRACEINFO {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTTYPELIB_ISCONTROL: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPTTYPELIB_ISPERSISTENT: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct SCRIPTUICHANDLING(pub i32);
pub const SCRIPTUICHANDLING_ALLOW: SCRIPTUICHANDLING = SCRIPTUICHANDLING(0i32);
pub const SCRIPTUICHANDLING_NOUIERROR: SCRIPTUICHANDLING = SCRIPTUICHANDLING(1i32);
pub const SCRIPTUICHANDLING_NOUIDEFAULT: SCRIPTUICHANDLING = SCRIPTUICHANDLING(2i32);
impl ::std::convert::From<i32> for SCRIPTUICHANDLING {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SCRIPTUICHANDLING {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct SCRIPTUICITEM(pub i32);
pub const SCRIPTUICITEM_INPUTBOX: SCRIPTUICITEM = SCRIPTUICITEM(1i32);
pub const SCRIPTUICITEM_MSGBOX: SCRIPTUICITEM = SCRIPTUICITEM(2i32);
impl ::std::convert::From<i32> for SCRIPTUICITEM {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SCRIPTUICITEM {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPT_CMPL_COMMIT: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPT_CMPL_ENUMLIST: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPT_CMPL_ENUM_TRIGGER: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPT_CMPL_GLOBALLIST: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPT_CMPL_MEMBERLIST: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPT_CMPL_MEMBER_TRIGGER: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPT_CMPL_NOLIST: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPT_CMPL_PARAMTIP: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPT_CMPL_PARAM_TRIGGER: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct SCRIPT_DEBUGGER_OPTIONS(pub i32);
pub const SDO_NONE: SCRIPT_DEBUGGER_OPTIONS = SCRIPT_DEBUGGER_OPTIONS(0i32);
pub const SDO_ENABLE_FIRST_CHANCE_EXCEPTIONS: SCRIPT_DEBUGGER_OPTIONS = SCRIPT_DEBUGGER_OPTIONS(1i32);
pub const SDO_ENABLE_WEB_WORKER_SUPPORT: SCRIPT_DEBUGGER_OPTIONS = SCRIPT_DEBUGGER_OPTIONS(2i32);
pub const SDO_ENABLE_NONUSER_CODE_SUPPORT: SCRIPT_DEBUGGER_OPTIONS = SCRIPT_DEBUGGER_OPTIONS(4i32);
pub const SDO_ENABLE_LIBRARY_STACK_FRAME: SCRIPT_DEBUGGER_OPTIONS = SCRIPT_DEBUGGER_OPTIONS(8i32);
impl ::std::convert::From<i32> for SCRIPT_DEBUGGER_OPTIONS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SCRIPT_DEBUGGER_OPTIONS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPT_ENCODE_DEFAULT_LANGUAGE: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPT_ENCODE_NO_ASP_LANGUAGE: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPT_ENCODE_SECTION: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND(pub i32);
pub const ETK_FIRST_CHANCE: SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND = SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND(0i32);
pub const ETK_USER_UNHANDLED: SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND = SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND(1i32);
pub const ETK_UNHANDLED: SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND = SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND(2i32);
impl ::std::convert::From<i32> for SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPT_E_PROPAGATE: i32 = -2147352318i32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPT_E_RECORDED: i32 = -2040119292i32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SCRIPT_E_REPORTED: i32 = -2147352319i32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct SCRIPT_INVOCATION_CONTEXT_TYPE(pub i32);
pub const SICT_Event: SCRIPT_INVOCATION_CONTEXT_TYPE = SCRIPT_INVOCATION_CONTEXT_TYPE(0i32);
pub const SICT_SetTimeout: SCRIPT_INVOCATION_CONTEXT_TYPE = SCRIPT_INVOCATION_CONTEXT_TYPE(1i32);
pub const SICT_SetInterval: SCRIPT_INVOCATION_CONTEXT_TYPE = SCRIPT_INVOCATION_CONTEXT_TYPE(2i32);
pub const SICT_SetImmediate: SCRIPT_INVOCATION_CONTEXT_TYPE = SCRIPT_INVOCATION_CONTEXT_TYPE(3i32);
pub const SICT_RequestAnimationFrame: SCRIPT_INVOCATION_CONTEXT_TYPE = SCRIPT_INVOCATION_CONTEXT_TYPE(4i32);
pub const SICT_ToString: SCRIPT_INVOCATION_CONTEXT_TYPE = SCRIPT_INVOCATION_CONTEXT_TYPE(5i32);
pub const SICT_MutationObserverCheckpoint: SCRIPT_INVOCATION_CONTEXT_TYPE = SCRIPT_INVOCATION_CONTEXT_TYPE(6i32);
pub const SICT_WWAExecUnsafeLocalFunction: SCRIPT_INVOCATION_CONTEXT_TYPE = SCRIPT_INVOCATION_CONTEXT_TYPE(7i32);
pub const SICT_WWAExecAtPriority: SCRIPT_INVOCATION_CONTEXT_TYPE = SCRIPT_INVOCATION_CONTEXT_TYPE(8i32);
impl ::std::convert::From<i32> for SCRIPT_INVOCATION_CONTEXT_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SCRIPT_INVOCATION_CONTEXT_TYPE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct SEARCHMEMORY {
    pub SearchAddress: u64,
    pub SearchLength: u64,
    pub FoundAddress: u64,
    pub PatternLength: u32,
    pub Pattern: *mut ::std::ffi::c_void,
}
impl SEARCHMEMORY {}
impl ::std::default::Default for SEARCHMEMORY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for SEARCHMEMORY {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SEARCHMEMORY").field("SearchAddress", &self.SearchAddress).field("SearchLength", &self.SearchLength).field("FoundAddress", &self.FoundAddress).field("PatternLength", &self.PatternLength).field("Pattern", &self.Pattern).finish()
    }
}
impl ::std::cmp::PartialEq for SEARCHMEMORY {
    fn eq(&self, other: &Self) -> bool {
        self.SearchAddress == other.SearchAddress && self.SearchLength == other.SearchLength && self.FoundAddress == other.FoundAddress && self.PatternLength == other.PatternLength && self.Pattern == other.Pattern
    }
}
impl ::std::cmp::Eq for SEARCHMEMORY {}
unsafe impl ::windows::runtime::Abi for SEARCHMEMORY {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct SOURCEFILE {
    pub ModBase: u64,
    pub FileName: super::super::super::Foundation::PSTR,
}
#[cfg(feature = "Win32_Foundation")]
impl SOURCEFILE {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for SOURCEFILE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for SOURCEFILE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SOURCEFILE").field("ModBase", &self.ModBase).field("FileName", &self.FileName).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for SOURCEFILE {
    fn eq(&self, other: &Self) -> bool {
        self.ModBase == other.ModBase && self.FileName == other.FileName
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for SOURCEFILE {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for SOURCEFILE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct SOURCEFILEW {
    pub ModBase: u64,
    pub FileName: super::super::super::Foundation::PWSTR,
}
#[cfg(feature = "Win32_Foundation")]
impl SOURCEFILEW {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for SOURCEFILEW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for SOURCEFILEW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SOURCEFILEW").field("ModBase", &self.ModBase).field("FileName", &self.FileName).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for SOURCEFILEW {
    fn eq(&self, other: &Self) -> bool {
        self.ModBase == other.ModBase && self.FileName == other.FileName
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for SOURCEFILEW {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for SOURCEFILEW {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SOURCETEXT_ATTR_COMMENT: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SOURCETEXT_ATTR_FUNCTION_START: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SOURCETEXT_ATTR_HUMANTEXT: u32 = 32768u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SOURCETEXT_ATTR_IDENTIFIER: u32 = 256u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SOURCETEXT_ATTR_KEYWORD: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SOURCETEXT_ATTR_MEMBERLOOKUP: u32 = 512u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SOURCETEXT_ATTR_NONSOURCE: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SOURCETEXT_ATTR_NUMBER: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SOURCETEXT_ATTR_OPERATOR: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SOURCETEXT_ATTR_STRING: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SOURCETEXT_ATTR_THIS: u32 = 1024u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SPLITSYM_EXTRACT_ALL: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SPLITSYM_REMOVE_PRIVATE: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SPLITSYM_SYMBOLPATH_IS_SRC: u32 = 4u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct SRCCODEINFO {
    pub SizeOfStruct: u32,
    pub Key: *mut ::std::ffi::c_void,
    pub ModBase: u64,
    pub Obj: [super::super::super::Foundation::CHAR; 261],
    pub FileName: [super::super::super::Foundation::CHAR; 261],
    pub LineNumber: u32,
    pub Address: u64,
}
#[cfg(feature = "Win32_Foundation")]
impl SRCCODEINFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for SRCCODEINFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for SRCCODEINFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SRCCODEINFO").field("SizeOfStruct", &self.SizeOfStruct).field("Key", &self.Key).field("ModBase", &self.ModBase).field("Obj", &self.Obj).field("FileName", &self.FileName).field("LineNumber", &self.LineNumber).field("Address", &self.Address).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for SRCCODEINFO {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct && self.Key == other.Key && self.ModBase == other.ModBase && self.Obj == other.Obj && self.FileName == other.FileName && self.LineNumber == other.LineNumber && self.Address == other.Address
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for SRCCODEINFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for SRCCODEINFO {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct SRCCODEINFOW {
    pub SizeOfStruct: u32,
    pub Key: *mut ::std::ffi::c_void,
    pub ModBase: u64,
    pub Obj: [u16; 261],
    pub FileName: [u16; 261],
    pub LineNumber: u32,
    pub Address: u64,
}
impl SRCCODEINFOW {}
impl ::std::default::Default for SRCCODEINFOW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for SRCCODEINFOW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SRCCODEINFOW").field("SizeOfStruct", &self.SizeOfStruct).field("Key", &self.Key).field("ModBase", &self.ModBase).field("Obj", &self.Obj).field("FileName", &self.FileName).field("LineNumber", &self.LineNumber).field("Address", &self.Address).finish()
    }
}
impl ::std::cmp::PartialEq for SRCCODEINFOW {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct && self.Key == other.Key && self.ModBase == other.ModBase && self.Obj == other.Obj && self.FileName == other.FileName && self.LineNumber == other.LineNumber && self.Address == other.Address
    }
}
impl ::std::cmp::Eq for SRCCODEINFOW {}
unsafe impl ::windows::runtime::Abi for SRCCODEINFOW {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVACTION_CHECKSUMSTATUS: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVACTION_EVENT: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVACTION_EVENTW: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVACTION_HTTPSTATUS: u32 = 6u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVACTION_QUERYCANCEL: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVACTION_SIZE: u32 = 5u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVACTION_TRACE: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVACTION_XMLOUTPUT: u32 = 7u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_CALLBACK: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_CALLBACKW: u32 = 65536u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_DISABLE_PING_HOST: u32 = 67108864u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_DISABLE_TIMEOUT: u32 = 134217728u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_DONT_UNCOMPRESS: u32 = 33554432u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_DOWNSTREAM_STORE: u32 = 8192u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_ENABLE_COMM_MSG: u32 = 268435456u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_FAVOR_COMPRESSED: u32 = 2097152u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_FLAT_DEFAULT_STORE: u32 = 131072u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_GETPATH: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_MAX: u32 = 2147483648u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_MESSAGE: u32 = 524288u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_NOCOPY: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_OLDGUIDPTR: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_OVERWRITE: u32 = 16384u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_PARAMTYPE: u32 = 256u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_PARENTWIN: u32 = 128u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_PROXY: u32 = 4096u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_PROXYW: u32 = 262144u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_RESETTOU: u32 = 32768u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_RETRY_APP_HANG: u32 = 2147483648u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_SECURE: u32 = 512u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_SERVICE: u32 = 1048576u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_SETCONTEXT: u32 = 2048u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_STRING: u32 = 4194304u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_TRACE: u32 = 1024u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_UNATTENDED: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_URI_FILTER: u32 = 536870912u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_URI_TIERS: u32 = 1073741824u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_WINHTTP: u32 = 8388608u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVOPT_WININET: u32 = 16777216u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVURI_ALL: u32 = 255u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVURI_COMPRESSED: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVURI_FILEPTR: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVURI_HTTP_COMPRESSED: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVURI_HTTP_FILEPTR: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVURI_HTTP_MASK: u32 = 15u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVURI_HTTP_NORMAL: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVURI_NORMAL: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVURI_UNC_COMPRESSED: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVURI_UNC_FILEPTR: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVURI_UNC_MASK: u32 = 240u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SSRVURI_UNC_NORMAL: u32 = 16u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct STACKFRAME {
    pub AddrPC: ADDRESS,
    pub AddrReturn: ADDRESS,
    pub AddrFrame: ADDRESS,
    pub AddrStack: ADDRESS,
    pub FuncTableEntry: *mut ::std::ffi::c_void,
    pub Params: [u32; 4],
    pub Far: super::super::super::Foundation::BOOL,
    pub Virtual: super::super::super::Foundation::BOOL,
    pub Reserved: [u32; 3],
    pub KdHelp: KDHELP,
    pub AddrBStore: ADDRESS,
}
#[cfg(feature = "Win32_Foundation")]
impl STACKFRAME {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for STACKFRAME {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for STACKFRAME {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("STACKFRAME")
            .field("AddrPC", &self.AddrPC)
            .field("AddrReturn", &self.AddrReturn)
            .field("AddrFrame", &self.AddrFrame)
            .field("AddrStack", &self.AddrStack)
            .field("FuncTableEntry", &self.FuncTableEntry)
            .field("Params", &self.Params)
            .field("Far", &self.Far)
            .field("Virtual", &self.Virtual)
            .field("Reserved", &self.Reserved)
            .field("KdHelp", &self.KdHelp)
            .field("AddrBStore", &self.AddrBStore)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for STACKFRAME {
    fn eq(&self, other: &Self) -> bool {
        self.AddrPC == other.AddrPC && self.AddrReturn == other.AddrReturn && self.AddrFrame == other.AddrFrame && self.AddrStack == other.AddrStack && self.FuncTableEntry == other.FuncTableEntry && self.Params == other.Params && self.Far == other.Far && self.Virtual == other.Virtual && self.Reserved == other.Reserved && self.KdHelp == other.KdHelp && self.AddrBStore == other.AddrBStore
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for STACKFRAME {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for STACKFRAME {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct STACKFRAME64 {
    pub AddrPC: ADDRESS64,
    pub AddrReturn: ADDRESS64,
    pub AddrFrame: ADDRESS64,
    pub AddrStack: ADDRESS64,
    pub AddrBStore: ADDRESS64,
    pub FuncTableEntry: *mut ::std::ffi::c_void,
    pub Params: [u64; 4],
    pub Far: super::super::super::Foundation::BOOL,
    pub Virtual: super::super::super::Foundation::BOOL,
    pub Reserved: [u64; 3],
    pub KdHelp: KDHELP64,
}
#[cfg(feature = "Win32_Foundation")]
impl STACKFRAME64 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for STACKFRAME64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for STACKFRAME64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("STACKFRAME64")
            .field("AddrPC", &self.AddrPC)
            .field("AddrReturn", &self.AddrReturn)
            .field("AddrFrame", &self.AddrFrame)
            .field("AddrStack", &self.AddrStack)
            .field("AddrBStore", &self.AddrBStore)
            .field("FuncTableEntry", &self.FuncTableEntry)
            .field("Params", &self.Params)
            .field("Far", &self.Far)
            .field("Virtual", &self.Virtual)
            .field("Reserved", &self.Reserved)
            .field("KdHelp", &self.KdHelp)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for STACKFRAME64 {
    fn eq(&self, other: &Self) -> bool {
        self.AddrPC == other.AddrPC && self.AddrReturn == other.AddrReturn && self.AddrFrame == other.AddrFrame && self.AddrStack == other.AddrStack && self.AddrBStore == other.AddrBStore && self.FuncTableEntry == other.FuncTableEntry && self.Params == other.Params && self.Far == other.Far && self.Virtual == other.Virtual && self.Reserved == other.Reserved && self.KdHelp == other.KdHelp
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for STACKFRAME64 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for STACKFRAME64 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct STACKFRAME_EX {
    pub AddrPC: ADDRESS64,
    pub AddrReturn: ADDRESS64,
    pub AddrFrame: ADDRESS64,
    pub AddrStack: ADDRESS64,
    pub AddrBStore: ADDRESS64,
    pub FuncTableEntry: *mut ::std::ffi::c_void,
    pub Params: [u64; 4],
    pub Far: super::super::super::Foundation::BOOL,
    pub Virtual: super::super::super::Foundation::BOOL,
    pub Reserved: [u64; 3],
    pub KdHelp: KDHELP64,
    pub StackFrameSize: u32,
    pub InlineFrameContext: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl STACKFRAME_EX {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for STACKFRAME_EX {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for STACKFRAME_EX {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("STACKFRAME_EX")
            .field("AddrPC", &self.AddrPC)
            .field("AddrReturn", &self.AddrReturn)
            .field("AddrFrame", &self.AddrFrame)
            .field("AddrStack", &self.AddrStack)
            .field("AddrBStore", &self.AddrBStore)
            .field("FuncTableEntry", &self.FuncTableEntry)
            .field("Params", &self.Params)
            .field("Far", &self.Far)
            .field("Virtual", &self.Virtual)
            .field("Reserved", &self.Reserved)
            .field("KdHelp", &self.KdHelp)
            .field("StackFrameSize", &self.StackFrameSize)
            .field("InlineFrameContext", &self.InlineFrameContext)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for STACKFRAME_EX {
    fn eq(&self, other: &Self) -> bool {
        self.AddrPC == other.AddrPC && self.AddrReturn == other.AddrReturn && self.AddrFrame == other.AddrFrame && self.AddrStack == other.AddrStack && self.AddrBStore == other.AddrBStore && self.FuncTableEntry == other.FuncTableEntry && self.Params == other.Params && self.Far == other.Far && self.Virtual == other.Virtual && self.Reserved == other.Reserved && self.KdHelp == other.KdHelp && self.StackFrameSize == other.StackFrameSize && self.InlineFrameContext == other.InlineFrameContext
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for STACKFRAME_EX {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for STACKFRAME_EX {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const STACK_FRAME_TYPE_IGNORE: u32 = 255u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const STACK_FRAME_TYPE_INIT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const STACK_FRAME_TYPE_INLINE: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const STACK_FRAME_TYPE_RA: u32 = 128u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const STACK_FRAME_TYPE_STACK: u32 = 1u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct STACK_SRC_INFO {
    pub ImagePath: super::super::super::Foundation::PWSTR,
    pub ModuleName: super::super::super::Foundation::PWSTR,
    pub Function: super::super::super::Foundation::PWSTR,
    pub Displacement: u32,
    pub Row: u32,
    pub Column: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl STACK_SRC_INFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for STACK_SRC_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for STACK_SRC_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("STACK_SRC_INFO").field("ImagePath", &self.ImagePath).field("ModuleName", &self.ModuleName).field("Function", &self.Function).field("Displacement", &self.Displacement).field("Row", &self.Row).field("Column", &self.Column).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for STACK_SRC_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.ImagePath == other.ImagePath && self.ModuleName == other.ModuleName && self.Function == other.Function && self.Displacement == other.Displacement && self.Row == other.Row && self.Column == other.Column
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for STACK_SRC_INFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for STACK_SRC_INFO {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct STACK_SYM_FRAME_INFO {
    pub StackFrameEx: DEBUG_STACK_FRAME_EX,
    pub SrcInfo: STACK_SRC_INFO,
}
#[cfg(feature = "Win32_Foundation")]
impl STACK_SYM_FRAME_INFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for STACK_SYM_FRAME_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for STACK_SYM_FRAME_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("STACK_SYM_FRAME_INFO").field("StackFrameEx", &self.StackFrameEx).field("SrcInfo", &self.SrcInfo).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for STACK_SYM_FRAME_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.StackFrameEx == other.StackFrameEx && self.SrcInfo == other.SrcInfo
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for STACK_SYM_FRAME_INFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for STACK_SYM_FRAME_INFO {
    type Abi = Self;
}
#[cfg(feature = "Win32_Foundation")]
pub type SYMADDSOURCESTREAM = unsafe extern "system" fn(param0: super::super::super::Foundation::HANDLE, param1: u64, param2: super::super::super::Foundation::PSTR, param3: *mut u8, param4: usize) -> super::super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type SYMADDSOURCESTREAMA = unsafe extern "system" fn(param0: super::super::super::Foundation::HANDLE, param1: u64, param2: super::super::super::Foundation::PSTR, param3: *mut u8, param4: usize) -> super::super::super::Foundation::BOOL;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct SYMBOL_INFO {
    pub SizeOfStruct: u32,
    pub TypeIndex: u32,
    pub Reserved: [u64; 2],
    pub Index: u32,
    pub Size: u32,
    pub ModBase: u64,
    pub Flags: SYMBOL_INFO_FLAGS,
    pub Value: u64,
    pub Address: u64,
    pub Register: u32,
    pub Scope: u32,
    pub Tag: u32,
    pub NameLen: u32,
    pub MaxNameLen: u32,
    pub Name: [super::super::super::Foundation::CHAR; 1],
}
#[cfg(feature = "Win32_Foundation")]
impl SYMBOL_INFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for SYMBOL_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for SYMBOL_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SYMBOL_INFO")
            .field("SizeOfStruct", &self.SizeOfStruct)
            .field("TypeIndex", &self.TypeIndex)
            .field("Reserved", &self.Reserved)
            .field("Index", &self.Index)
            .field("Size", &self.Size)
            .field("ModBase", &self.ModBase)
            .field("Flags", &self.Flags)
            .field("Value", &self.Value)
            .field("Address", &self.Address)
            .field("Register", &self.Register)
            .field("Scope", &self.Scope)
            .field("Tag", &self.Tag)
            .field("NameLen", &self.NameLen)
            .field("MaxNameLen", &self.MaxNameLen)
            .field("Name", &self.Name)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for SYMBOL_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct && self.TypeIndex == other.TypeIndex && self.Reserved == other.Reserved && self.Index == other.Index && self.Size == other.Size && self.ModBase == other.ModBase && self.Flags == other.Flags && self.Value == other.Value && self.Address == other.Address && self.Register == other.Register && self.Scope == other.Scope && self.Tag == other.Tag && self.NameLen == other.NameLen && self.MaxNameLen == other.MaxNameLen && self.Name == other.Name
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for SYMBOL_INFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for SYMBOL_INFO {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct SYMBOL_INFOW {
    pub SizeOfStruct: u32,
    pub TypeIndex: u32,
    pub Reserved: [u64; 2],
    pub Index: u32,
    pub Size: u32,
    pub ModBase: u64,
    pub Flags: SYMBOL_INFO_FLAGS,
    pub Value: u64,
    pub Address: u64,
    pub Register: u32,
    pub Scope: u32,
    pub Tag: u32,
    pub NameLen: u32,
    pub MaxNameLen: u32,
    pub Name: [u16; 1],
}
impl SYMBOL_INFOW {}
impl ::std::default::Default for SYMBOL_INFOW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for SYMBOL_INFOW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SYMBOL_INFOW")
            .field("SizeOfStruct", &self.SizeOfStruct)
            .field("TypeIndex", &self.TypeIndex)
            .field("Reserved", &self.Reserved)
            .field("Index", &self.Index)
            .field("Size", &self.Size)
            .field("ModBase", &self.ModBase)
            .field("Flags", &self.Flags)
            .field("Value", &self.Value)
            .field("Address", &self.Address)
            .field("Register", &self.Register)
            .field("Scope", &self.Scope)
            .field("Tag", &self.Tag)
            .field("NameLen", &self.NameLen)
            .field("MaxNameLen", &self.MaxNameLen)
            .field("Name", &self.Name)
            .finish()
    }
}
impl ::std::cmp::PartialEq for SYMBOL_INFOW {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct && self.TypeIndex == other.TypeIndex && self.Reserved == other.Reserved && self.Index == other.Index && self.Size == other.Size && self.ModBase == other.ModBase && self.Flags == other.Flags && self.Value == other.Value && self.Address == other.Address && self.Register == other.Register && self.Scope == other.Scope && self.Tag == other.Tag && self.NameLen == other.NameLen && self.MaxNameLen == other.MaxNameLen && self.Name == other.Name
    }
}
impl ::std::cmp::Eq for SYMBOL_INFOW {}
unsafe impl ::windows::runtime::Abi for SYMBOL_INFOW {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct SYMBOL_INFO_EX {
    pub SizeOfStruct: u32,
    pub TypeOfInfo: u32,
    pub Offset: u64,
    pub Line: u32,
    pub Displacement: u32,
    pub Reserved: [u32; 4],
}
impl SYMBOL_INFO_EX {}
impl ::std::default::Default for SYMBOL_INFO_EX {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for SYMBOL_INFO_EX {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SYMBOL_INFO_EX").field("SizeOfStruct", &self.SizeOfStruct).field("TypeOfInfo", &self.TypeOfInfo).field("Offset", &self.Offset).field("Line", &self.Line).field("Displacement", &self.Displacement).field("Reserved", &self.Reserved).finish()
    }
}
impl ::std::cmp::PartialEq for SYMBOL_INFO_EX {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct && self.TypeOfInfo == other.TypeOfInfo && self.Offset == other.Offset && self.Line == other.Line && self.Displacement == other.Displacement && self.Reserved == other.Reserved
    }
}
impl ::std::cmp::Eq for SYMBOL_INFO_EX {}
unsafe impl ::windows::runtime::Abi for SYMBOL_INFO_EX {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct SYMBOL_INFO_FLAGS(pub u32);
pub const SYMFLAG_CLR_TOKEN: SYMBOL_INFO_FLAGS = SYMBOL_INFO_FLAGS(262144u32);
pub const SYMFLAG_CONSTANT: SYMBOL_INFO_FLAGS = SYMBOL_INFO_FLAGS(256u32);
pub const SYMFLAG_EXPORT: SYMBOL_INFO_FLAGS = SYMBOL_INFO_FLAGS(512u32);
pub const SYMFLAG_FORWARDER: SYMBOL_INFO_FLAGS = SYMBOL_INFO_FLAGS(1024u32);
pub const SYMFLAG_FRAMEREL: SYMBOL_INFO_FLAGS = SYMBOL_INFO_FLAGS(32u32);
pub const SYMFLAG_FUNCTION: SYMBOL_INFO_FLAGS = SYMBOL_INFO_FLAGS(2048u32);
pub const SYMFLAG_ILREL: SYMBOL_INFO_FLAGS = SYMBOL_INFO_FLAGS(65536u32);
pub const SYMFLAG_LOCAL: SYMBOL_INFO_FLAGS = SYMBOL_INFO_FLAGS(128u32);
pub const SYMFLAG_METADATA: SYMBOL_INFO_FLAGS = SYMBOL_INFO_FLAGS(131072u32);
pub const SYMFLAG_PARAMETER: SYMBOL_INFO_FLAGS = SYMBOL_INFO_FLAGS(64u32);
pub const SYMFLAG_REGISTER: SYMBOL_INFO_FLAGS = SYMBOL_INFO_FLAGS(8u32);
pub const SYMFLAG_REGREL: SYMBOL_INFO_FLAGS = SYMBOL_INFO_FLAGS(16u32);
pub const SYMFLAG_SLOT: SYMBOL_INFO_FLAGS = SYMBOL_INFO_FLAGS(32768u32);
pub const SYMFLAG_THUNK: SYMBOL_INFO_FLAGS = SYMBOL_INFO_FLAGS(8192u32);
pub const SYMFLAG_TLSREL: SYMBOL_INFO_FLAGS = SYMBOL_INFO_FLAGS(16384u32);
pub const SYMFLAG_VALUEPRESENT: SYMBOL_INFO_FLAGS = SYMBOL_INFO_FLAGS(1u32);
pub const SYMFLAG_VIRTUAL: SYMBOL_INFO_FLAGS = SYMBOL_INFO_FLAGS(4096u32);
impl ::std::convert::From<u32> for SYMBOL_INFO_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SYMBOL_INFO_FLAGS {
    type Abi = Self;
}
impl ::std::ops::BitOr for SYMBOL_INFO_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for SYMBOL_INFO_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for SYMBOL_INFO_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for SYMBOL_INFO_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for SYMBOL_INFO_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct SYMBOL_INFO_PACKAGE {
    pub si: SYMBOL_INFO,
    pub name: [super::super::super::Foundation::CHAR; 2001],
}
#[cfg(feature = "Win32_Foundation")]
impl SYMBOL_INFO_PACKAGE {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for SYMBOL_INFO_PACKAGE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for SYMBOL_INFO_PACKAGE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SYMBOL_INFO_PACKAGE").field("si", &self.si).field("name", &self.name).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for SYMBOL_INFO_PACKAGE {
    fn eq(&self, other: &Self) -> bool {
        self.si == other.si && self.name == other.name
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for SYMBOL_INFO_PACKAGE {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for SYMBOL_INFO_PACKAGE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct SYMBOL_INFO_PACKAGEW {
    pub si: SYMBOL_INFOW,
    pub name: [u16; 2001],
}
impl SYMBOL_INFO_PACKAGEW {}
impl ::std::default::Default for SYMBOL_INFO_PACKAGEW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for SYMBOL_INFO_PACKAGEW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SYMBOL_INFO_PACKAGEW").field("si", &self.si).field("name", &self.name).finish()
    }
}
impl ::std::cmp::PartialEq for SYMBOL_INFO_PACKAGEW {
    fn eq(&self, other: &Self) -> bool {
        self.si == other.si && self.name == other.name
    }
}
impl ::std::cmp::Eq for SYMBOL_INFO_PACKAGEW {}
unsafe impl ::windows::runtime::Abi for SYMBOL_INFO_PACKAGEW {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMBOL_TYPE_INDEX_NOT_FOUND: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMBOL_TYPE_INFO_NOT_FOUND: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMENUM_OPTIONS_DEFAULT: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMENUM_OPTIONS_INLINE: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMFLAG_FIXUP_ARM64X: u32 = 16777216u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMFLAG_FUNC_NO_RETURN: u32 = 1048576u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMFLAG_GLOBAL: u32 = 33554432u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMFLAG_NULL: u32 = 524288u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMFLAG_PUBLIC_CODE: u32 = 4194304u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMFLAG_REGREL_ALIASINDIR: u32 = 8388608u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMFLAG_RESET: u32 = 2147483648u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMFLAG_SYNTHETIC_ZEROBASE: u32 = 2097152u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMF_CONSTANT: u32 = 256u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMF_EXPORT: u32 = 512u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMF_FORWARDER: u32 = 1024u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMF_FRAMEREL: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMF_FUNCTION: u32 = 2048u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMF_LOCAL: u32 = 128u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMF_OMAP_GENERATED: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMF_OMAP_MODIFIED: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMF_PARAMETER: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMF_REGISTER: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMF_REGREL: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMF_THUNK: u32 = 8192u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMF_TLSREL: u32 = 16384u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMF_VIRTUAL: u32 = 4096u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_ALLOW_ABSOLUTE_SYMBOLS: u32 = 2048u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_ALLOW_ZERO_ADDRESS: u32 = 16777216u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_AUTO_PUBLICS: u32 = 65536u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_CASE_INSENSITIVE: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_DEBUG: u32 = 2147483648u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_DEFERRED_LOADS: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_DISABLE_FAST_SYMBOLS: u32 = 268435456u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_DISABLE_SRVSTAR_ON_STARTUP: u32 = 1073741824u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_DISABLE_SYMSRV_AUTODETECT: u32 = 33554432u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_DISABLE_SYMSRV_TIMEOUT: u32 = 536870912u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_EXACT_SYMBOLS: u32 = 1024u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_FAIL_CRITICAL_ERRORS: u32 = 512u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_FAVOR_COMPRESSED: u32 = 8388608u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_FLAT_DIRECTORY: u32 = 4194304u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_IGNORE_CVREC: u32 = 128u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_IGNORE_IMAGEDIR: u32 = 2097152u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_IGNORE_NT_SYMPATH: u32 = 4096u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_INCLUDE_32BIT_MODULES: u32 = 8192u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_LOAD_ANYTHING: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_LOAD_LINES: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_NO_CPP: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_NO_IMAGE_SEARCH: u32 = 131072u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_NO_PROMPTS: u32 = 524288u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_NO_PUBLICS: u32 = 32768u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_NO_UNQUALIFIED_LOADS: u32 = 256u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_OMAP_FIND_NEAREST: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_OVERWRITE: u32 = 1048576u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_PUBLICS_ONLY: u32 = 16384u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_READONLY_CACHE: u32 = 67108864u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_SECURE: u32 = 262144u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_SYMPATH_LAST: u32 = 134217728u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMOPT_UNDNAME: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMSEARCH_ALLITEMS: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMSEARCH_GLOBALSONLY: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMSEARCH_MASKOBJS: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMSEARCH_RECURSE: u32 = 2u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct SYMSRV_EXTENDED_OUTPUT_DATA {
    pub sizeOfStruct: u32,
    pub version: u32,
    pub filePtrMsg: [u16; 261],
}
impl SYMSRV_EXTENDED_OUTPUT_DATA {}
impl ::std::default::Default for SYMSRV_EXTENDED_OUTPUT_DATA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for SYMSRV_EXTENDED_OUTPUT_DATA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SYMSRV_EXTENDED_OUTPUT_DATA").field("sizeOfStruct", &self.sizeOfStruct).field("version", &self.version).field("filePtrMsg", &self.filePtrMsg).finish()
    }
}
impl ::std::cmp::PartialEq for SYMSRV_EXTENDED_OUTPUT_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.sizeOfStruct == other.sizeOfStruct && self.version == other.version && self.filePtrMsg == other.filePtrMsg
    }
}
impl ::std::cmp::Eq for SYMSRV_EXTENDED_OUTPUT_DATA {}
unsafe impl ::windows::runtime::Abi for SYMSRV_EXTENDED_OUTPUT_DATA {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct SYMSRV_INDEX_INFO {
    pub sizeofstruct: u32,
    pub file: [super::super::super::Foundation::CHAR; 261],
    pub stripped: super::super::super::Foundation::BOOL,
    pub timestamp: u32,
    pub size: u32,
    pub dbgfile: [super::super::super::Foundation::CHAR; 261],
    pub pdbfile: [super::super::super::Foundation::CHAR; 261],
    pub guid: ::windows::runtime::GUID,
    pub sig: u32,
    pub age: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl SYMSRV_INDEX_INFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for SYMSRV_INDEX_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for SYMSRV_INDEX_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SYMSRV_INDEX_INFO")
            .field("sizeofstruct", &self.sizeofstruct)
            .field("file", &self.file)
            .field("stripped", &self.stripped)
            .field("timestamp", &self.timestamp)
            .field("size", &self.size)
            .field("dbgfile", &self.dbgfile)
            .field("pdbfile", &self.pdbfile)
            .field("guid", &self.guid)
            .field("sig", &self.sig)
            .field("age", &self.age)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for SYMSRV_INDEX_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.sizeofstruct == other.sizeofstruct && self.file == other.file && self.stripped == other.stripped && self.timestamp == other.timestamp && self.size == other.size && self.dbgfile == other.dbgfile && self.pdbfile == other.pdbfile && self.guid == other.guid && self.sig == other.sig && self.age == other.age
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for SYMSRV_INDEX_INFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for SYMSRV_INDEX_INFO {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct SYMSRV_INDEX_INFOW {
    pub sizeofstruct: u32,
    pub file: [u16; 261],
    pub stripped: super::super::super::Foundation::BOOL,
    pub timestamp: u32,
    pub size: u32,
    pub dbgfile: [u16; 261],
    pub pdbfile: [u16; 261],
    pub guid: ::windows::runtime::GUID,
    pub sig: u32,
    pub age: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl SYMSRV_INDEX_INFOW {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for SYMSRV_INDEX_INFOW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for SYMSRV_INDEX_INFOW {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SYMSRV_INDEX_INFOW")
            .field("sizeofstruct", &self.sizeofstruct)
            .field("file", &self.file)
            .field("stripped", &self.stripped)
            .field("timestamp", &self.timestamp)
            .field("size", &self.size)
            .field("dbgfile", &self.dbgfile)
            .field("pdbfile", &self.pdbfile)
            .field("guid", &self.guid)
            .field("sig", &self.sig)
            .field("age", &self.age)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for SYMSRV_INDEX_INFOW {
    fn eq(&self, other: &Self) -> bool {
        self.sizeofstruct == other.sizeofstruct && self.file == other.file && self.stripped == other.stripped && self.timestamp == other.timestamp && self.size == other.size && self.dbgfile == other.dbgfile && self.pdbfile == other.pdbfile && self.guid == other.guid && self.sig == other.sig && self.age == other.age
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for SYMSRV_INDEX_INFOW {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for SYMSRV_INDEX_INFOW {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMSRV_VERSION: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMSTOREOPT_ALT_INDEX: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYMSTOREOPT_UNICODE: u32 = 32u32;
impl ::std::clone::Clone for SYM_DUMP_PARAM {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct SYM_DUMP_PARAM {
    pub size: u32,
    pub sName: *mut u8,
    pub Options: u32,
    pub addr: u64,
    pub listLink: *mut FIELD_INFO,
    pub Anonymous: SYM_DUMP_PARAM_0,
    pub CallbackRoutine: ::std::option::Option<PSYM_DUMP_FIELD_CALLBACK>,
    pub nFields: u32,
    pub Fields: *mut FIELD_INFO,
    pub ModBase: u64,
    pub TypeId: u32,
    pub TypeSize: u32,
    pub BufferSize: u32,
    pub _bitfield: u32,
}
impl SYM_DUMP_PARAM {}
impl ::std::default::Default for SYM_DUMP_PARAM {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for SYM_DUMP_PARAM {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for SYM_DUMP_PARAM {}
unsafe impl ::windows::runtime::Abi for SYM_DUMP_PARAM {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union SYM_DUMP_PARAM_0 {
    pub Context: *mut ::std::ffi::c_void,
    pub pBuffer: *mut ::std::ffi::c_void,
}
impl SYM_DUMP_PARAM_0 {}
impl ::std::default::Default for SYM_DUMP_PARAM_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for SYM_DUMP_PARAM_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for SYM_DUMP_PARAM_0 {}
unsafe impl ::windows::runtime::Abi for SYM_DUMP_PARAM_0 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct SYM_FIND_ID_OPTION(pub u32);
pub const SSRVOPT_DWORD: SYM_FIND_ID_OPTION = SYM_FIND_ID_OPTION(2u32);
pub const SSRVOPT_DWORDPTR: SYM_FIND_ID_OPTION = SYM_FIND_ID_OPTION(4u32);
pub const SSRVOPT_GUIDPTR: SYM_FIND_ID_OPTION = SYM_FIND_ID_OPTION(8u32);
impl ::std::convert::From<u32> for SYM_FIND_ID_OPTION {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SYM_FIND_ID_OPTION {
    type Abi = Self;
}
impl ::std::ops::BitOr for SYM_FIND_ID_OPTION {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for SYM_FIND_ID_OPTION {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for SYM_FIND_ID_OPTION {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for SYM_FIND_ID_OPTION {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for SYM_FIND_ID_OPTION {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYM_INLINE_COMP_DIFFERENT: u32 = 5u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYM_INLINE_COMP_ERROR: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYM_INLINE_COMP_IDENTICAL: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYM_INLINE_COMP_STEPIN: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYM_INLINE_COMP_STEPOUT: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYM_INLINE_COMP_STEPOVER: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct SYM_LOAD_FLAGS(pub u32);
pub const SLMFLAG_NONE: SYM_LOAD_FLAGS = SYM_LOAD_FLAGS(0u32);
pub const SLMFLAG_VIRTUAL: SYM_LOAD_FLAGS = SYM_LOAD_FLAGS(1u32);
pub const SLMFLAG_ALT_INDEX: SYM_LOAD_FLAGS = SYM_LOAD_FLAGS(2u32);
pub const SLMFLAG_NO_SYMBOLS: SYM_LOAD_FLAGS = SYM_LOAD_FLAGS(4u32);
impl ::std::convert::From<u32> for SYM_LOAD_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SYM_LOAD_FLAGS {
    type Abi = Self;
}
impl ::std::ops::BitOr for SYM_LOAD_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for SYM_LOAD_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for SYM_LOAD_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for SYM_LOAD_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for SYM_LOAD_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct SYM_SRV_STORE_FILE_FLAGS(pub u32);
pub const SYMSTOREOPT_COMPRESS: SYM_SRV_STORE_FILE_FLAGS = SYM_SRV_STORE_FILE_FLAGS(1u32);
pub const SYMSTOREOPT_OVERWRITE: SYM_SRV_STORE_FILE_FLAGS = SYM_SRV_STORE_FILE_FLAGS(2u32);
pub const SYMSTOREOPT_PASS_IF_EXISTS: SYM_SRV_STORE_FILE_FLAGS = SYM_SRV_STORE_FILE_FLAGS(64u32);
pub const SYMSTOREOPT_POINTER: SYM_SRV_STORE_FILE_FLAGS = SYM_SRV_STORE_FILE_FLAGS(8u32);
pub const SYMSTOREOPT_RETURNINDEX: SYM_SRV_STORE_FILE_FLAGS = SYM_SRV_STORE_FILE_FLAGS(4u32);
impl ::std::convert::From<u32> for SYM_SRV_STORE_FILE_FLAGS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SYM_SRV_STORE_FILE_FLAGS {
    type Abi = Self;
}
impl ::std::ops::BitOr for SYM_SRV_STORE_FILE_FLAGS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for SYM_SRV_STORE_FILE_FLAGS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for SYM_SRV_STORE_FILE_FLAGS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for SYM_SRV_STORE_FILE_FLAGS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for SYM_SRV_STORE_FILE_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYM_STKWALK_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYM_STKWALK_FORCE_FRAMEPTR: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const SYM_STKWALK_ZEROEXTEND_PTRS: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct SYM_TYPE(pub i32);
pub const SymNone: SYM_TYPE = SYM_TYPE(0i32);
pub const SymCoff: SYM_TYPE = SYM_TYPE(1i32);
pub const SymCv: SYM_TYPE = SYM_TYPE(2i32);
pub const SymPdb: SYM_TYPE = SYM_TYPE(3i32);
pub const SymExport: SYM_TYPE = SYM_TYPE(4i32);
pub const SymDeferred: SYM_TYPE = SYM_TYPE(5i32);
pub const SymSym: SYM_TYPE = SYM_TYPE(6i32);
pub const SymDia: SYM_TYPE = SYM_TYPE(7i32);
pub const SymVirtual: SYM_TYPE = SYM_TYPE(8i32);
pub const NumSymTypes: SYM_TYPE = SYM_TYPE(9i32);
impl ::std::convert::From<i32> for SYM_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SYM_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct ScriptChangeKind(pub i32);
pub const ScriptRename: ScriptChangeKind = ScriptChangeKind(0i32);
impl ::std::convert::From<i32> for ScriptChangeKind {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for ScriptChangeKind {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct ScriptDebugEvent(pub i32);
pub const ScriptDebugBreakpoint: ScriptDebugEvent = ScriptDebugEvent(0i32);
pub const ScriptDebugStep: ScriptDebugEvent = ScriptDebugEvent(1i32);
pub const ScriptDebugException: ScriptDebugEvent = ScriptDebugEvent(2i32);
pub const ScriptDebugAsyncBreak: ScriptDebugEvent = ScriptDebugEvent(3i32);
impl ::std::convert::From<i32> for ScriptDebugEvent {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for ScriptDebugEvent {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct ScriptDebugEventFilter(pub i32);
pub const ScriptDebugEventFilterEntry: ScriptDebugEventFilter = ScriptDebugEventFilter(0i32);
pub const ScriptDebugEventFilterException: ScriptDebugEventFilter = ScriptDebugEventFilter(1i32);
pub const ScriptDebugEventFilterUnhandledException: ScriptDebugEventFilter = ScriptDebugEventFilter(2i32);
pub const ScriptDebugEventFilterAbort: ScriptDebugEventFilter = ScriptDebugEventFilter(3i32);
impl ::std::convert::From<i32> for ScriptDebugEventFilter {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for ScriptDebugEventFilter {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct ScriptDebugEventInformation {
    pub DebugEvent: ScriptDebugEvent,
    pub EventPosition: ScriptDebugPosition,
    pub EventSpanEnd: ScriptDebugPosition,
    pub u: ScriptDebugEventInformation_0,
}
impl ScriptDebugEventInformation {}
impl ::std::default::Default for ScriptDebugEventInformation {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for ScriptDebugEventInformation {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for ScriptDebugEventInformation {}
unsafe impl ::windows::runtime::Abi for ScriptDebugEventInformation {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union ScriptDebugEventInformation_0 {
    pub ExceptionInformation: ScriptDebugEventInformation_0_1,
    pub BreakpointInformation: ScriptDebugEventInformation_0_0,
}
impl ScriptDebugEventInformation_0 {}
impl ::std::default::Default for ScriptDebugEventInformation_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for ScriptDebugEventInformation_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for ScriptDebugEventInformation_0 {}
unsafe impl ::windows::runtime::Abi for ScriptDebugEventInformation_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct ScriptDebugEventInformation_0_0 {
    pub BreakpointId: u64,
}
impl ScriptDebugEventInformation_0_0 {}
impl ::std::default::Default for ScriptDebugEventInformation_0_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for ScriptDebugEventInformation_0_0 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_BreakpointInformation_e__Struct").field("BreakpointId", &self.BreakpointId).finish()
    }
}
impl ::std::cmp::PartialEq for ScriptDebugEventInformation_0_0 {
    fn eq(&self, other: &Self) -> bool {
        self.BreakpointId == other.BreakpointId
    }
}
impl ::std::cmp::Eq for ScriptDebugEventInformation_0_0 {}
unsafe impl ::windows::runtime::Abi for ScriptDebugEventInformation_0_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct ScriptDebugEventInformation_0_1 {
    pub IsUncaught: bool,
}
impl ScriptDebugEventInformation_0_1 {}
impl ::std::default::Default for ScriptDebugEventInformation_0_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for ScriptDebugEventInformation_0_1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_ExceptionInformation_e__Struct").field("IsUncaught", &self.IsUncaught).finish()
    }
}
impl ::std::cmp::PartialEq for ScriptDebugEventInformation_0_1 {
    fn eq(&self, other: &Self) -> bool {
        self.IsUncaught == other.IsUncaught
    }
}
impl ::std::cmp::Eq for ScriptDebugEventInformation_0_1 {}
unsafe impl ::windows::runtime::Abi for ScriptDebugEventInformation_0_1 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct ScriptDebugPosition {
    pub Line: u32,
    pub Column: u32,
}
impl ScriptDebugPosition {}
impl ::std::default::Default for ScriptDebugPosition {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for ScriptDebugPosition {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("ScriptDebugPosition").field("Line", &self.Line).field("Column", &self.Column).finish()
    }
}
impl ::std::cmp::PartialEq for ScriptDebugPosition {
    fn eq(&self, other: &Self) -> bool {
        self.Line == other.Line && self.Column == other.Column
    }
}
impl ::std::cmp::Eq for ScriptDebugPosition {}
unsafe impl ::windows::runtime::Abi for ScriptDebugPosition {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct ScriptDebugState(pub i32);
pub const ScriptDebugNoDebugger: ScriptDebugState = ScriptDebugState(0i32);
pub const ScriptDebugNotExecuting: ScriptDebugState = ScriptDebugState(1i32);
pub const ScriptDebugExecuting: ScriptDebugState = ScriptDebugState(2i32);
pub const ScriptDebugBreak: ScriptDebugState = ScriptDebugState(3i32);
impl ::std::convert::From<i32> for ScriptDebugState {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for ScriptDebugState {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct ScriptExecutionKind(pub i32);
pub const ScriptExecutionNormal: ScriptExecutionKind = ScriptExecutionKind(0i32);
pub const ScriptExecutionStepIn: ScriptExecutionKind = ScriptExecutionKind(1i32);
pub const ScriptExecutionStepOut: ScriptExecutionKind = ScriptExecutionKind(2i32);
pub const ScriptExecutionStepOver: ScriptExecutionKind = ScriptExecutionKind(3i32);
impl ::std::convert::From<i32> for ScriptExecutionKind {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for ScriptExecutionKind {
    type Abi = Self;
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SearchTreeForFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(rootpath: Param0, inputpathname: Param1, outputpathbuffer: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SearchTreeForFile(rootpath: super::super::super::Foundation::PSTR, inputpathname: super::super::super::Foundation::PSTR, outputpathbuffer: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SearchTreeForFile(rootpath.into_param().abi(), inputpathname.into_param().abi(), ::std::mem::transmute(outputpathbuffer)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SearchTreeForFileW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(rootpath: Param0, inputpathname: Param1, outputpathbuffer: super::super::super::Foundation::PWSTR) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SearchTreeForFileW(rootpath: super::super::super::Foundation::PWSTR, inputpathname: super::super::super::Foundation::PWSTR, outputpathbuffer: super::super::super::Foundation::PWSTR) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SearchTreeForFileW(rootpath.into_param().abi(), inputpathname.into_param().abi(), ::std::mem::transmute(outputpathbuffer)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn SetCheckUserInterruptShared(lpstartaddress: ::std::option::Option<LPCALL_BACK_USER_INTERRUPT_ROUTINE>) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SetCheckUserInterruptShared(lpstartaddress: ::windows::runtime::RawPtr);
        }
        ::std::mem::transmute(SetCheckUserInterruptShared(::std::mem::transmute(lpstartaddress)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn SetErrorMode(umode: THREAD_ERROR_MODE) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SetErrorMode(umode: THREAD_ERROR_MODE) -> u32;
        }
        ::std::mem::transmute(SetErrorMode(::std::mem::transmute(umode)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Kernel`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn SetImageConfigInformation(loadedimage: *mut LOADED_IMAGE, imageconfiginformation: *const IMAGE_LOAD_CONFIG_DIRECTORY64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SetImageConfigInformation(loadedimage: *mut LOADED_IMAGE, imageconfiginformation: *const IMAGE_LOAD_CONFIG_DIRECTORY64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SetImageConfigInformation(::std::mem::transmute(loadedimage), ::std::mem::transmute(imageconfiginformation)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn SetSymLoadError(error: u32) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SetSymLoadError(error: u32);
        }
        ::std::mem::transmute(SetSymLoadError(::std::mem::transmute(error)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn SetThreadContext<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hthread: Param0, lpcontext: *const CONTEXT) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SetThreadContext(hthread: super::super::super::Foundation::HANDLE, lpcontext: *const CONTEXT) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SetThreadContext(hthread.into_param().abi(), ::std::mem::transmute(lpcontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SetThreadErrorMode(dwnewmode: THREAD_ERROR_MODE, lpoldmode: *const THREAD_ERROR_MODE) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SetThreadErrorMode(dwnewmode: THREAD_ERROR_MODE, lpoldmode: *const THREAD_ERROR_MODE) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SetThreadErrorMode(::std::mem::transmute(dwnewmode), ::std::mem::transmute(lpoldmode)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn SetUnhandledExceptionFilter(lptoplevelexceptionfilter: ::std::option::Option<LPTOP_LEVEL_EXCEPTION_FILTER>) -> ::std::option::Option<LPTOP_LEVEL_EXCEPTION_FILTER> {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SetUnhandledExceptionFilter(lptoplevelexceptionfilter: ::windows::runtime::RawPtr) -> ::std::option::Option<LPTOP_LEVEL_EXCEPTION_FILTER>;
        }
        ::std::mem::transmute(SetUnhandledExceptionFilter(::std::mem::transmute(lptoplevelexceptionfilter)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn SetXStateFeaturesMask(context: *mut CONTEXT, featuremask: u64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SetXStateFeaturesMask(context: *mut CONTEXT, featuremask: u64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SetXStateFeaturesMask(::std::mem::transmute(context), ::std::mem::transmute(featuremask)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct SignatureComparison(pub i32);
pub const Unrelated: SignatureComparison = SignatureComparison(0i32);
pub const Ambiguous: SignatureComparison = SignatureComparison(1i32);
pub const LessSpecific: SignatureComparison = SignatureComparison(2i32);
pub const MoreSpecific: SignatureComparison = SignatureComparison(3i32);
pub const Identical: SignatureComparison = SignatureComparison(4i32);
impl ::std::convert::From<i32> for SignatureComparison {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SignatureComparison {
    type Abi = Self;
}
#[cfg(target_arch = "x86")]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn StackWalk<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(
    machinetype: u32,
    hprocess: Param1,
    hthread: Param2,
    stackframe: *mut STACKFRAME,
    contextrecord: *mut ::std::ffi::c_void,
    readmemoryroutine: ::std::option::Option<PREAD_PROCESS_MEMORY_ROUTINE>,
    functiontableaccessroutine: ::std::option::Option<PFUNCTION_TABLE_ACCESS_ROUTINE>,
    getmodulebaseroutine: ::std::option::Option<PGET_MODULE_BASE_ROUTINE>,
    translateaddress: ::std::option::Option<PTRANSLATE_ADDRESS_ROUTINE>,
) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn StackWalk(machinetype: u32, hprocess: super::super::super::Foundation::HANDLE, hthread: super::super::super::Foundation::HANDLE, stackframe: *mut STACKFRAME, contextrecord: *mut ::std::ffi::c_void, readmemoryroutine: ::windows::runtime::RawPtr, functiontableaccessroutine: ::windows::runtime::RawPtr, getmodulebaseroutine: ::windows::runtime::RawPtr, translateaddress: ::windows::runtime::RawPtr) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(StackWalk(
            ::std::mem::transmute(machinetype),
            hprocess.into_param().abi(),
            hthread.into_param().abi(),
            ::std::mem::transmute(stackframe),
            ::std::mem::transmute(contextrecord),
            ::std::mem::transmute(readmemoryroutine),
            ::std::mem::transmute(functiontableaccessroutine),
            ::std::mem::transmute(getmodulebaseroutine),
            ::std::mem::transmute(translateaddress),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn StackWalk64<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(
    machinetype: u32,
    hprocess: Param1,
    hthread: Param2,
    stackframe: *mut STACKFRAME64,
    contextrecord: *mut ::std::ffi::c_void,
    readmemoryroutine: ::std::option::Option<PREAD_PROCESS_MEMORY_ROUTINE64>,
    functiontableaccessroutine: ::std::option::Option<PFUNCTION_TABLE_ACCESS_ROUTINE64>,
    getmodulebaseroutine: ::std::option::Option<PGET_MODULE_BASE_ROUTINE64>,
    translateaddress: ::std::option::Option<PTRANSLATE_ADDRESS_ROUTINE64>,
) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn StackWalk64(machinetype: u32, hprocess: super::super::super::Foundation::HANDLE, hthread: super::super::super::Foundation::HANDLE, stackframe: *mut STACKFRAME64, contextrecord: *mut ::std::ffi::c_void, readmemoryroutine: ::windows::runtime::RawPtr, functiontableaccessroutine: ::windows::runtime::RawPtr, getmodulebaseroutine: ::windows::runtime::RawPtr, translateaddress: ::windows::runtime::RawPtr) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(StackWalk64(
            ::std::mem::transmute(machinetype),
            hprocess.into_param().abi(),
            hthread.into_param().abi(),
            ::std::mem::transmute(stackframe),
            ::std::mem::transmute(contextrecord),
            ::std::mem::transmute(readmemoryroutine),
            ::std::mem::transmute(functiontableaccessroutine),
            ::std::mem::transmute(getmodulebaseroutine),
            ::std::mem::transmute(translateaddress),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn StackWalkEx<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(
    machinetype: u32,
    hprocess: Param1,
    hthread: Param2,
    stackframe: *mut STACKFRAME_EX,
    contextrecord: *mut ::std::ffi::c_void,
    readmemoryroutine: ::std::option::Option<PREAD_PROCESS_MEMORY_ROUTINE64>,
    functiontableaccessroutine: ::std::option::Option<PFUNCTION_TABLE_ACCESS_ROUTINE64>,
    getmodulebaseroutine: ::std::option::Option<PGET_MODULE_BASE_ROUTINE64>,
    translateaddress: ::std::option::Option<PTRANSLATE_ADDRESS_ROUTINE64>,
    flags: u32,
) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn StackWalkEx(machinetype: u32, hprocess: super::super::super::Foundation::HANDLE, hthread: super::super::super::Foundation::HANDLE, stackframe: *mut STACKFRAME_EX, contextrecord: *mut ::std::ffi::c_void, readmemoryroutine: ::windows::runtime::RawPtr, functiontableaccessroutine: ::windows::runtime::RawPtr, getmodulebaseroutine: ::windows::runtime::RawPtr, translateaddress: ::windows::runtime::RawPtr, flags: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(StackWalkEx(
            ::std::mem::transmute(machinetype),
            hprocess.into_param().abi(),
            hthread.into_param().abi(),
            ::std::mem::transmute(stackframe),
            ::std::mem::transmute(contextrecord),
            ::std::mem::transmute(readmemoryroutine),
            ::std::mem::transmute(functiontableaccessroutine),
            ::std::mem::transmute(getmodulebaseroutine),
            ::std::mem::transmute(translateaddress),
            ::std::mem::transmute(flags),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymAddSourceStream<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, base: u64, streamfile: Param2, buffer: *const u8, size: usize) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymAddSourceStream(hprocess: super::super::super::Foundation::HANDLE, base: u64, streamfile: super::super::super::Foundation::PSTR, buffer: *const u8, size: usize) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymAddSourceStream(hprocess.into_param().abi(), ::std::mem::transmute(base), streamfile.into_param().abi(), ::std::mem::transmute(buffer), ::std::mem::transmute(size)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymAddSourceStreamA<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, base: u64, streamfile: Param2, buffer: *const u8, size: usize) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymAddSourceStreamA(hprocess: super::super::super::Foundation::HANDLE, base: u64, streamfile: super::super::super::Foundation::PSTR, buffer: *const u8, size: usize) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymAddSourceStreamA(hprocess.into_param().abi(), ::std::mem::transmute(base), streamfile.into_param().abi(), ::std::mem::transmute(buffer), ::std::mem::transmute(size)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymAddSourceStreamW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, base: u64, filespec: Param2, buffer: *const u8, size: usize) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymAddSourceStreamW(hprocess: super::super::super::Foundation::HANDLE, base: u64, filespec: super::super::super::Foundation::PWSTR, buffer: *const u8, size: usize) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymAddSourceStreamW(hprocess.into_param().abi(), ::std::mem::transmute(base), filespec.into_param().abi(), ::std::mem::transmute(buffer), ::std::mem::transmute(size)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymAddSymbol<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, baseofdll: u64, name: Param2, address: u64, size: u32, flags: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymAddSymbol(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, name: super::super::super::Foundation::PSTR, address: u64, size: u32, flags: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymAddSymbol(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), name.into_param().abi(), ::std::mem::transmute(address), ::std::mem::transmute(size), ::std::mem::transmute(flags)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymAddSymbolW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, baseofdll: u64, name: Param2, address: u64, size: u32, flags: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymAddSymbolW(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, name: super::super::super::Foundation::PWSTR, address: u64, size: u32, flags: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymAddSymbolW(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), name.into_param().abi(), ::std::mem::transmute(address), ::std::mem::transmute(size), ::std::mem::transmute(flags)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymAddrIncludeInlineTrace<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, address: u64) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymAddrIncludeInlineTrace(hprocess: super::super::super::Foundation::HANDLE, address: u64) -> u32;
        }
        ::std::mem::transmute(SymAddrIncludeInlineTrace(hprocess.into_param().abi(), ::std::mem::transmute(address)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymCleanup<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymCleanup(hprocess: super::super::super::Foundation::HANDLE) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymCleanup(hprocess.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymCompareInlineTrace<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, address1: u64, inlinecontext1: u32, retaddress1: u64, address2: u64, retaddress2: u64) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymCompareInlineTrace(hprocess: super::super::super::Foundation::HANDLE, address1: u64, inlinecontext1: u32, retaddress1: u64, address2: u64, retaddress2: u64) -> u32;
        }
        ::std::mem::transmute(SymCompareInlineTrace(hprocess.into_param().abi(), ::std::mem::transmute(address1), ::std::mem::transmute(inlinecontext1), ::std::mem::transmute(retaddress1), ::std::mem::transmute(address2), ::std::mem::transmute(retaddress2)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymDeleteSymbol<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, baseofdll: u64, name: Param2, address: u64, flags: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymDeleteSymbol(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, name: super::super::super::Foundation::PSTR, address: u64, flags: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymDeleteSymbol(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), name.into_param().abi(), ::std::mem::transmute(address), ::std::mem::transmute(flags)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymDeleteSymbolW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, baseofdll: u64, name: Param2, address: u64, flags: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymDeleteSymbolW(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, name: super::super::super::Foundation::PWSTR, address: u64, flags: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymDeleteSymbolW(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), name.into_param().abi(), ::std::mem::transmute(address), ::std::mem::transmute(flags)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumLines<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, base: u64, obj: Param2, file: Param3, enumlinescallback: ::std::option::Option<PSYM_ENUMLINES_CALLBACK>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumLines(hprocess: super::super::super::Foundation::HANDLE, base: u64, obj: super::super::super::Foundation::PSTR, file: super::super::super::Foundation::PSTR, enumlinescallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumLines(hprocess.into_param().abi(), ::std::mem::transmute(base), obj.into_param().abi(), file.into_param().abi(), ::std::mem::transmute(enumlinescallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumLinesW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, base: u64, obj: Param2, file: Param3, enumlinescallback: ::std::option::Option<PSYM_ENUMLINES_CALLBACKW>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumLinesW(hprocess: super::super::super::Foundation::HANDLE, base: u64, obj: super::super::super::Foundation::PWSTR, file: super::super::super::Foundation::PWSTR, enumlinescallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumLinesW(hprocess.into_param().abi(), ::std::mem::transmute(base), obj.into_param().abi(), file.into_param().abi(), ::std::mem::transmute(enumlinescallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumProcesses(enumprocessescallback: ::std::option::Option<PSYM_ENUMPROCESSES_CALLBACK>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumProcesses(enumprocessescallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumProcesses(::std::mem::transmute(enumprocessescallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumSourceFileTokens<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, base: u64, callback: ::std::option::Option<PENUMSOURCEFILETOKENSCALLBACK>) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumSourceFileTokens(hprocess: super::super::super::Foundation::HANDLE, base: u64, callback: ::windows::runtime::RawPtr) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumSourceFileTokens(hprocess.into_param().abi(), ::std::mem::transmute(base), ::std::mem::transmute(callback)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumSourceFiles<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, modbase: u64, mask: Param2, cbsrcfiles: ::std::option::Option<PSYM_ENUMSOURCEFILES_CALLBACK>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumSourceFiles(hprocess: super::super::super::Foundation::HANDLE, modbase: u64, mask: super::super::super::Foundation::PSTR, cbsrcfiles: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumSourceFiles(hprocess.into_param().abi(), ::std::mem::transmute(modbase), mask.into_param().abi(), ::std::mem::transmute(cbsrcfiles), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumSourceFilesW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, modbase: u64, mask: Param2, cbsrcfiles: ::std::option::Option<PSYM_ENUMSOURCEFILES_CALLBACKW>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumSourceFilesW(hprocess: super::super::super::Foundation::HANDLE, modbase: u64, mask: super::super::super::Foundation::PWSTR, cbsrcfiles: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumSourceFilesW(hprocess.into_param().abi(), ::std::mem::transmute(modbase), mask.into_param().abi(), ::std::mem::transmute(cbsrcfiles), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumSourceLines<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(
    hprocess: Param0,
    base: u64,
    obj: Param2,
    file: Param3,
    line: u32,
    flags: u32,
    enumlinescallback: ::std::option::Option<PSYM_ENUMLINES_CALLBACK>,
    usercontext: *const ::std::ffi::c_void,
) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumSourceLines(hprocess: super::super::super::Foundation::HANDLE, base: u64, obj: super::super::super::Foundation::PSTR, file: super::super::super::Foundation::PSTR, line: u32, flags: u32, enumlinescallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumSourceLines(hprocess.into_param().abi(), ::std::mem::transmute(base), obj.into_param().abi(), file.into_param().abi(), ::std::mem::transmute(line), ::std::mem::transmute(flags), ::std::mem::transmute(enumlinescallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumSourceLinesW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(
    hprocess: Param0,
    base: u64,
    obj: Param2,
    file: Param3,
    line: u32,
    flags: u32,
    enumlinescallback: ::std::option::Option<PSYM_ENUMLINES_CALLBACKW>,
    usercontext: *const ::std::ffi::c_void,
) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumSourceLinesW(hprocess: super::super::super::Foundation::HANDLE, base: u64, obj: super::super::super::Foundation::PWSTR, file: super::super::super::Foundation::PWSTR, line: u32, flags: u32, enumlinescallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumSourceLinesW(hprocess.into_param().abi(), ::std::mem::transmute(base), obj.into_param().abi(), file.into_param().abi(), ::std::mem::transmute(line), ::std::mem::transmute(flags), ::std::mem::transmute(enumlinescallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumSym<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, baseofdll: u64, enumsymbolscallback: ::std::option::Option<PSYM_ENUMERATESYMBOLS_CALLBACK>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumSym(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, enumsymbolscallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumSym(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), ::std::mem::transmute(enumsymbolscallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumSymbols<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, baseofdll: u64, mask: Param2, enumsymbolscallback: ::std::option::Option<PSYM_ENUMERATESYMBOLS_CALLBACK>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumSymbols(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, mask: super::super::super::Foundation::PSTR, enumsymbolscallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumSymbols(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), mask.into_param().abi(), ::std::mem::transmute(enumsymbolscallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumSymbolsEx<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, baseofdll: u64, mask: Param2, enumsymbolscallback: ::std::option::Option<PSYM_ENUMERATESYMBOLS_CALLBACK>, usercontext: *const ::std::ffi::c_void, options: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumSymbolsEx(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, mask: super::super::super::Foundation::PSTR, enumsymbolscallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void, options: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumSymbolsEx(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), mask.into_param().abi(), ::std::mem::transmute(enumsymbolscallback), ::std::mem::transmute(usercontext), ::std::mem::transmute(options)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumSymbolsExW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, baseofdll: u64, mask: Param2, enumsymbolscallback: ::std::option::Option<PSYM_ENUMERATESYMBOLS_CALLBACKW>, usercontext: *const ::std::ffi::c_void, options: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumSymbolsExW(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, mask: super::super::super::Foundation::PWSTR, enumsymbolscallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void, options: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumSymbolsExW(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), mask.into_param().abi(), ::std::mem::transmute(enumsymbolscallback), ::std::mem::transmute(usercontext), ::std::mem::transmute(options)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumSymbolsForAddr<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, address: u64, enumsymbolscallback: ::std::option::Option<PSYM_ENUMERATESYMBOLS_CALLBACK>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumSymbolsForAddr(hprocess: super::super::super::Foundation::HANDLE, address: u64, enumsymbolscallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumSymbolsForAddr(hprocess.into_param().abi(), ::std::mem::transmute(address), ::std::mem::transmute(enumsymbolscallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumSymbolsForAddrW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, address: u64, enumsymbolscallback: ::std::option::Option<PSYM_ENUMERATESYMBOLS_CALLBACKW>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumSymbolsForAddrW(hprocess: super::super::super::Foundation::HANDLE, address: u64, enumsymbolscallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumSymbolsForAddrW(hprocess.into_param().abi(), ::std::mem::transmute(address), ::std::mem::transmute(enumsymbolscallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumSymbolsW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, baseofdll: u64, mask: Param2, enumsymbolscallback: ::std::option::Option<PSYM_ENUMERATESYMBOLS_CALLBACKW>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumSymbolsW(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, mask: super::super::super::Foundation::PWSTR, enumsymbolscallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumSymbolsW(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), mask.into_param().abi(), ::std::mem::transmute(enumsymbolscallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumTypes<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, baseofdll: u64, enumsymbolscallback: ::std::option::Option<PSYM_ENUMERATESYMBOLS_CALLBACK>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumTypes(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, enumsymbolscallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumTypes(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), ::std::mem::transmute(enumsymbolscallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumTypesByName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, baseofdll: u64, mask: Param2, enumsymbolscallback: ::std::option::Option<PSYM_ENUMERATESYMBOLS_CALLBACK>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumTypesByName(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, mask: super::super::super::Foundation::PSTR, enumsymbolscallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumTypesByName(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), mask.into_param().abi(), ::std::mem::transmute(enumsymbolscallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumTypesByNameW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, baseofdll: u64, mask: Param2, enumsymbolscallback: ::std::option::Option<PSYM_ENUMERATESYMBOLS_CALLBACKW>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumTypesByNameW(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, mask: super::super::super::Foundation::PWSTR, enumsymbolscallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumTypesByNameW(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), mask.into_param().abi(), ::std::mem::transmute(enumsymbolscallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumTypesW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, baseofdll: u64, enumsymbolscallback: ::std::option::Option<PSYM_ENUMERATESYMBOLS_CALLBACKW>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumTypesW(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, enumsymbolscallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumTypesW(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), ::std::mem::transmute(enumsymbolscallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "x86")]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumerateModules<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, enummodulescallback: ::std::option::Option<PSYM_ENUMMODULES_CALLBACK>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumerateModules(hprocess: super::super::super::Foundation::HANDLE, enummodulescallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumerateModules(hprocess.into_param().abi(), ::std::mem::transmute(enummodulescallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumerateModules64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, enummodulescallback: ::std::option::Option<PSYM_ENUMMODULES_CALLBACK64>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumerateModules64(hprocess: super::super::super::Foundation::HANDLE, enummodulescallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumerateModules64(hprocess.into_param().abi(), ::std::mem::transmute(enummodulescallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumerateModulesW64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, enummodulescallback: ::std::option::Option<PSYM_ENUMMODULES_CALLBACKW64>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumerateModulesW64(hprocess: super::super::super::Foundation::HANDLE, enummodulescallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumerateModulesW64(hprocess.into_param().abi(), ::std::mem::transmute(enummodulescallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "x86")]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumerateSymbols<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, baseofdll: u32, enumsymbolscallback: ::std::option::Option<PSYM_ENUMSYMBOLS_CALLBACK>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumerateSymbols(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u32, enumsymbolscallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumerateSymbols(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), ::std::mem::transmute(enumsymbolscallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumerateSymbols64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, baseofdll: u64, enumsymbolscallback: ::std::option::Option<PSYM_ENUMSYMBOLS_CALLBACK64>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumerateSymbols64(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, enumsymbolscallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumerateSymbols64(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), ::std::mem::transmute(enumsymbolscallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "x86")]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumerateSymbolsW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, baseofdll: u32, enumsymbolscallback: ::std::option::Option<PSYM_ENUMSYMBOLS_CALLBACKW>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumerateSymbolsW(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u32, enumsymbolscallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumerateSymbolsW(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), ::std::mem::transmute(enumsymbolscallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymEnumerateSymbolsW64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, baseofdll: u64, enumsymbolscallback: ::std::option::Option<PSYM_ENUMSYMBOLS_CALLBACK64W>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymEnumerateSymbolsW64(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, enumsymbolscallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymEnumerateSymbolsW64(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), ::std::mem::transmute(enumsymbolscallback), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymFindDebugInfoFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, filename: Param1, debugfilepath: super::super::super::Foundation::PSTR, callback: ::std::option::Option<PFIND_DEBUG_FILE_CALLBACK>, callerdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::HANDLE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymFindDebugInfoFile(hprocess: super::super::super::Foundation::HANDLE, filename: super::super::super::Foundation::PSTR, debugfilepath: super::super::super::Foundation::PSTR, callback: ::windows::runtime::RawPtr, callerdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::HANDLE;
        }
        ::std::mem::transmute(SymFindDebugInfoFile(hprocess.into_param().abi(), filename.into_param().abi(), ::std::mem::transmute(debugfilepath), ::std::mem::transmute(callback), ::std::mem::transmute(callerdata)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymFindDebugInfoFileW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, filename: Param1, debugfilepath: super::super::super::Foundation::PWSTR, callback: ::std::option::Option<PFIND_DEBUG_FILE_CALLBACKW>, callerdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::HANDLE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymFindDebugInfoFileW(hprocess: super::super::super::Foundation::HANDLE, filename: super::super::super::Foundation::PWSTR, debugfilepath: super::super::super::Foundation::PWSTR, callback: ::windows::runtime::RawPtr, callerdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::HANDLE;
        }
        ::std::mem::transmute(SymFindDebugInfoFileW(hprocess.into_param().abi(), filename.into_param().abi(), ::std::mem::transmute(debugfilepath), ::std::mem::transmute(callback), ::std::mem::transmute(callerdata)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymFindExecutableImage<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, filename: Param1, imagefilepath: super::super::super::Foundation::PSTR, callback: ::std::option::Option<PFIND_EXE_FILE_CALLBACK>, callerdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::HANDLE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymFindExecutableImage(hprocess: super::super::super::Foundation::HANDLE, filename: super::super::super::Foundation::PSTR, imagefilepath: super::super::super::Foundation::PSTR, callback: ::windows::runtime::RawPtr, callerdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::HANDLE;
        }
        ::std::mem::transmute(SymFindExecutableImage(hprocess.into_param().abi(), filename.into_param().abi(), ::std::mem::transmute(imagefilepath), ::std::mem::transmute(callback), ::std::mem::transmute(callerdata)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymFindExecutableImageW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, filename: Param1, imagefilepath: super::super::super::Foundation::PWSTR, callback: ::std::option::Option<PFIND_EXE_FILE_CALLBACKW>, callerdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::HANDLE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymFindExecutableImageW(hprocess: super::super::super::Foundation::HANDLE, filename: super::super::super::Foundation::PWSTR, imagefilepath: super::super::super::Foundation::PWSTR, callback: ::windows::runtime::RawPtr, callerdata: *const ::std::ffi::c_void) -> super::super::super::Foundation::HANDLE;
        }
        ::std::mem::transmute(SymFindExecutableImageW(hprocess.into_param().abi(), filename.into_param().abi(), ::std::mem::transmute(imagefilepath), ::std::mem::transmute(callback), ::std::mem::transmute(callerdata)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymFindFileInPath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(
    hprocess: Param0,
    searchpatha: Param1,
    filename: Param2,
    id: *const ::std::ffi::c_void,
    two: u32,
    three: u32,
    flags: SYM_FIND_ID_OPTION,
    foundfile: super::super::super::Foundation::PSTR,
    callback: ::std::option::Option<PFINDFILEINPATHCALLBACK>,
    context: *const ::std::ffi::c_void,
) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymFindFileInPath(hprocess: super::super::super::Foundation::HANDLE, searchpatha: super::super::super::Foundation::PSTR, filename: super::super::super::Foundation::PSTR, id: *const ::std::ffi::c_void, two: u32, three: u32, flags: SYM_FIND_ID_OPTION, foundfile: super::super::super::Foundation::PSTR, callback: ::windows::runtime::RawPtr, context: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymFindFileInPath(
            hprocess.into_param().abi(),
            searchpatha.into_param().abi(),
            filename.into_param().abi(),
            ::std::mem::transmute(id),
            ::std::mem::transmute(two),
            ::std::mem::transmute(three),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(foundfile),
            ::std::mem::transmute(callback),
            ::std::mem::transmute(context),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymFindFileInPathW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(
    hprocess: Param0,
    searchpatha: Param1,
    filename: Param2,
    id: *const ::std::ffi::c_void,
    two: u32,
    three: u32,
    flags: SYM_FIND_ID_OPTION,
    foundfile: super::super::super::Foundation::PWSTR,
    callback: ::std::option::Option<PFINDFILEINPATHCALLBACKW>,
    context: *const ::std::ffi::c_void,
) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymFindFileInPathW(hprocess: super::super::super::Foundation::HANDLE, searchpatha: super::super::super::Foundation::PWSTR, filename: super::super::super::Foundation::PWSTR, id: *const ::std::ffi::c_void, two: u32, three: u32, flags: SYM_FIND_ID_OPTION, foundfile: super::super::super::Foundation::PWSTR, callback: ::windows::runtime::RawPtr, context: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymFindFileInPathW(
            hprocess.into_param().abi(),
            searchpatha.into_param().abi(),
            filename.into_param().abi(),
            ::std::mem::transmute(id),
            ::std::mem::transmute(two),
            ::std::mem::transmute(three),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(foundfile),
            ::std::mem::transmute(callback),
            ::std::mem::transmute(context),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymFromAddr<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, address: u64, displacement: *mut u64, symbol: *mut SYMBOL_INFO) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymFromAddr(hprocess: super::super::super::Foundation::HANDLE, address: u64, displacement: *mut u64, symbol: *mut SYMBOL_INFO) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymFromAddr(hprocess.into_param().abi(), ::std::mem::transmute(address), ::std::mem::transmute(displacement), ::std::mem::transmute(symbol)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymFromAddrW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, address: u64, displacement: *mut u64, symbol: *mut SYMBOL_INFOW) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymFromAddrW(hprocess: super::super::super::Foundation::HANDLE, address: u64, displacement: *mut u64, symbol: *mut SYMBOL_INFOW) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymFromAddrW(hprocess.into_param().abi(), ::std::mem::transmute(address), ::std::mem::transmute(displacement), ::std::mem::transmute(symbol)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymFromIndex<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, baseofdll: u64, index: u32, symbol: *mut SYMBOL_INFO) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymFromIndex(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, index: u32, symbol: *mut SYMBOL_INFO) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymFromIndex(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), ::std::mem::transmute(index), ::std::mem::transmute(symbol)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymFromIndexW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, baseofdll: u64, index: u32, symbol: *mut SYMBOL_INFOW) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymFromIndexW(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, index: u32, symbol: *mut SYMBOL_INFOW) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymFromIndexW(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), ::std::mem::transmute(index), ::std::mem::transmute(symbol)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymFromInlineContext<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, address: u64, inlinecontext: u32, displacement: *mut u64, symbol: *mut SYMBOL_INFO) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymFromInlineContext(hprocess: super::super::super::Foundation::HANDLE, address: u64, inlinecontext: u32, displacement: *mut u64, symbol: *mut SYMBOL_INFO) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymFromInlineContext(hprocess.into_param().abi(), ::std::mem::transmute(address), ::std::mem::transmute(inlinecontext), ::std::mem::transmute(displacement), ::std::mem::transmute(symbol)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymFromInlineContextW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, address: u64, inlinecontext: u32, displacement: *mut u64, symbol: *mut SYMBOL_INFOW) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymFromInlineContextW(hprocess: super::super::super::Foundation::HANDLE, address: u64, inlinecontext: u32, displacement: *mut u64, symbol: *mut SYMBOL_INFOW) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymFromInlineContextW(hprocess.into_param().abi(), ::std::mem::transmute(address), ::std::mem::transmute(inlinecontext), ::std::mem::transmute(displacement), ::std::mem::transmute(symbol)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymFromName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, name: Param1, symbol: *mut SYMBOL_INFO) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymFromName(hprocess: super::super::super::Foundation::HANDLE, name: super::super::super::Foundation::PSTR, symbol: *mut SYMBOL_INFO) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymFromName(hprocess.into_param().abi(), name.into_param().abi(), ::std::mem::transmute(symbol)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymFromNameW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, name: Param1, symbol: *mut SYMBOL_INFOW) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymFromNameW(hprocess: super::super::super::Foundation::HANDLE, name: super::super::super::Foundation::PWSTR, symbol: *mut SYMBOL_INFOW) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymFromNameW(hprocess.into_param().abi(), name.into_param().abi(), ::std::mem::transmute(symbol)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymFromToken<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, base: u64, token: u32, symbol: *mut SYMBOL_INFO) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymFromToken(hprocess: super::super::super::Foundation::HANDLE, base: u64, token: u32, symbol: *mut SYMBOL_INFO) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymFromToken(hprocess.into_param().abi(), ::std::mem::transmute(base), ::std::mem::transmute(token), ::std::mem::transmute(symbol)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymFromTokenW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, base: u64, token: u32, symbol: *mut SYMBOL_INFOW) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymFromTokenW(hprocess: super::super::super::Foundation::HANDLE, base: u64, token: u32, symbol: *mut SYMBOL_INFOW) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymFromTokenW(hprocess.into_param().abi(), ::std::mem::transmute(base), ::std::mem::transmute(token), ::std::mem::transmute(symbol)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "x86")]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymFunctionTableAccess<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, addrbase: u32) -> *mut ::std::ffi::c_void {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymFunctionTableAccess(hprocess: super::super::super::Foundation::HANDLE, addrbase: u32) -> *mut ::std::ffi::c_void;
        }
        ::std::mem::transmute(SymFunctionTableAccess(hprocess.into_param().abi(), ::std::mem::transmute(addrbase)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymFunctionTableAccess64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, addrbase: u64) -> *mut ::std::ffi::c_void {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymFunctionTableAccess64(hprocess: super::super::super::Foundation::HANDLE, addrbase: u64) -> *mut ::std::ffi::c_void;
        }
        ::std::mem::transmute(SymFunctionTableAccess64(hprocess.into_param().abi(), ::std::mem::transmute(addrbase)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymFunctionTableAccess64AccessRoutines<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, addrbase: u64, readmemoryroutine: ::std::option::Option<PREAD_PROCESS_MEMORY_ROUTINE64>, getmodulebaseroutine: ::std::option::Option<PGET_MODULE_BASE_ROUTINE64>) -> *mut ::std::ffi::c_void {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymFunctionTableAccess64AccessRoutines(hprocess: super::super::super::Foundation::HANDLE, addrbase: u64, readmemoryroutine: ::windows::runtime::RawPtr, getmodulebaseroutine: ::windows::runtime::RawPtr) -> *mut ::std::ffi::c_void;
        }
        ::std::mem::transmute(SymFunctionTableAccess64AccessRoutines(hprocess.into_param().abi(), ::std::mem::transmute(addrbase), ::std::mem::transmute(readmemoryroutine), ::std::mem::transmute(getmodulebaseroutine)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetExtendedOption(option: IMAGEHLP_EXTENDED_OPTIONS) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetExtendedOption(option: IMAGEHLP_EXTENDED_OPTIONS) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetExtendedOption(::std::mem::transmute(option)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetFileLineOffsets64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, modulename: Param1, filename: Param2, buffer: *mut u64, bufferlines: u32) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetFileLineOffsets64(hprocess: super::super::super::Foundation::HANDLE, modulename: super::super::super::Foundation::PSTR, filename: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32) -> u32;
        }
        ::std::mem::transmute(SymGetFileLineOffsets64(hprocess.into_param().abi(), modulename.into_param().abi(), filename.into_param().abi(), ::std::mem::transmute(buffer), ::std::mem::transmute(bufferlines)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetHomeDirectory(r#type: IMAGEHLP_HD_TYPE, dir: super::super::super::Foundation::PSTR, size: usize) -> super::super::super::Foundation::PSTR {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetHomeDirectory(r#type: IMAGEHLP_HD_TYPE, dir: super::super::super::Foundation::PSTR, size: usize) -> super::super::super::Foundation::PSTR;
        }
        ::std::mem::transmute(SymGetHomeDirectory(::std::mem::transmute(r#type), ::std::mem::transmute(dir), ::std::mem::transmute(size)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetHomeDirectoryW(r#type: IMAGEHLP_HD_TYPE, dir: super::super::super::Foundation::PWSTR, size: usize) -> super::super::super::Foundation::PWSTR {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetHomeDirectoryW(r#type: IMAGEHLP_HD_TYPE, dir: super::super::super::Foundation::PWSTR, size: usize) -> super::super::super::Foundation::PWSTR;
        }
        ::std::mem::transmute(SymGetHomeDirectoryW(::std::mem::transmute(r#type), ::std::mem::transmute(dir), ::std::mem::transmute(size)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "x86")]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetLineFromAddr<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, dwaddr: u32, pdwdisplacement: *mut u32, line: *mut IMAGEHLP_LINE) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetLineFromAddr(hprocess: super::super::super::Foundation::HANDLE, dwaddr: u32, pdwdisplacement: *mut u32, line: *mut IMAGEHLP_LINE) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetLineFromAddr(hprocess.into_param().abi(), ::std::mem::transmute(dwaddr), ::std::mem::transmute(pdwdisplacement), ::std::mem::transmute(line)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetLineFromAddr64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, qwaddr: u64, pdwdisplacement: *mut u32, line64: *mut IMAGEHLP_LINE64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetLineFromAddr64(hprocess: super::super::super::Foundation::HANDLE, qwaddr: u64, pdwdisplacement: *mut u32, line64: *mut IMAGEHLP_LINE64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetLineFromAddr64(hprocess.into_param().abi(), ::std::mem::transmute(qwaddr), ::std::mem::transmute(pdwdisplacement), ::std::mem::transmute(line64)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetLineFromAddrW64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, dwaddr: u64, pdwdisplacement: *mut u32, line: *mut IMAGEHLP_LINEW64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetLineFromAddrW64(hprocess: super::super::super::Foundation::HANDLE, dwaddr: u64, pdwdisplacement: *mut u32, line: *mut IMAGEHLP_LINEW64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetLineFromAddrW64(hprocess.into_param().abi(), ::std::mem::transmute(dwaddr), ::std::mem::transmute(pdwdisplacement), ::std::mem::transmute(line)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetLineFromInlineContext<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, qwaddr: u64, inlinecontext: u32, qwmodulebaseaddress: u64, pdwdisplacement: *mut u32, line64: *mut IMAGEHLP_LINE64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetLineFromInlineContext(hprocess: super::super::super::Foundation::HANDLE, qwaddr: u64, inlinecontext: u32, qwmodulebaseaddress: u64, pdwdisplacement: *mut u32, line64: *mut IMAGEHLP_LINE64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetLineFromInlineContext(hprocess.into_param().abi(), ::std::mem::transmute(qwaddr), ::std::mem::transmute(inlinecontext), ::std::mem::transmute(qwmodulebaseaddress), ::std::mem::transmute(pdwdisplacement), ::std::mem::transmute(line64)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetLineFromInlineContextW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, dwaddr: u64, inlinecontext: u32, qwmodulebaseaddress: u64, pdwdisplacement: *mut u32, line: *mut IMAGEHLP_LINEW64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetLineFromInlineContextW(hprocess: super::super::super::Foundation::HANDLE, dwaddr: u64, inlinecontext: u32, qwmodulebaseaddress: u64, pdwdisplacement: *mut u32, line: *mut IMAGEHLP_LINEW64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetLineFromInlineContextW(hprocess.into_param().abi(), ::std::mem::transmute(dwaddr), ::std::mem::transmute(inlinecontext), ::std::mem::transmute(qwmodulebaseaddress), ::std::mem::transmute(pdwdisplacement), ::std::mem::transmute(line)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "x86")]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetLineFromName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, modulename: Param1, filename: Param2, dwlinenumber: u32, pldisplacement: *mut i32, line: *mut IMAGEHLP_LINE) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetLineFromName(hprocess: super::super::super::Foundation::HANDLE, modulename: super::super::super::Foundation::PSTR, filename: super::super::super::Foundation::PSTR, dwlinenumber: u32, pldisplacement: *mut i32, line: *mut IMAGEHLP_LINE) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetLineFromName(hprocess.into_param().abi(), modulename.into_param().abi(), filename.into_param().abi(), ::std::mem::transmute(dwlinenumber), ::std::mem::transmute(pldisplacement), ::std::mem::transmute(line)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetLineFromName64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, modulename: Param1, filename: Param2, dwlinenumber: u32, pldisplacement: *mut i32, line: *mut IMAGEHLP_LINE64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetLineFromName64(hprocess: super::super::super::Foundation::HANDLE, modulename: super::super::super::Foundation::PSTR, filename: super::super::super::Foundation::PSTR, dwlinenumber: u32, pldisplacement: *mut i32, line: *mut IMAGEHLP_LINE64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetLineFromName64(hprocess.into_param().abi(), modulename.into_param().abi(), filename.into_param().abi(), ::std::mem::transmute(dwlinenumber), ::std::mem::transmute(pldisplacement), ::std::mem::transmute(line)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetLineFromNameW64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, modulename: Param1, filename: Param2, dwlinenumber: u32, pldisplacement: *mut i32, line: *mut IMAGEHLP_LINEW64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetLineFromNameW64(hprocess: super::super::super::Foundation::HANDLE, modulename: super::super::super::Foundation::PWSTR, filename: super::super::super::Foundation::PWSTR, dwlinenumber: u32, pldisplacement: *mut i32, line: *mut IMAGEHLP_LINEW64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetLineFromNameW64(hprocess.into_param().abi(), modulename.into_param().abi(), filename.into_param().abi(), ::std::mem::transmute(dwlinenumber), ::std::mem::transmute(pldisplacement), ::std::mem::transmute(line)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "x86")]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetLineNext<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, line: *mut IMAGEHLP_LINE) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetLineNext(hprocess: super::super::super::Foundation::HANDLE, line: *mut IMAGEHLP_LINE) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetLineNext(hprocess.into_param().abi(), ::std::mem::transmute(line)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetLineNext64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, line: *mut IMAGEHLP_LINE64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetLineNext64(hprocess: super::super::super::Foundation::HANDLE, line: *mut IMAGEHLP_LINE64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetLineNext64(hprocess.into_param().abi(), ::std::mem::transmute(line)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetLineNextW64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, line: *mut IMAGEHLP_LINEW64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetLineNextW64(hprocess: super::super::super::Foundation::HANDLE, line: *mut IMAGEHLP_LINEW64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetLineNextW64(hprocess.into_param().abi(), ::std::mem::transmute(line)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "x86")]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetLinePrev<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, line: *mut IMAGEHLP_LINE) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetLinePrev(hprocess: super::super::super::Foundation::HANDLE, line: *mut IMAGEHLP_LINE) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetLinePrev(hprocess.into_param().abi(), ::std::mem::transmute(line)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetLinePrev64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, line: *mut IMAGEHLP_LINE64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetLinePrev64(hprocess: super::super::super::Foundation::HANDLE, line: *mut IMAGEHLP_LINE64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetLinePrev64(hprocess.into_param().abi(), ::std::mem::transmute(line)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetLinePrevW64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, line: *mut IMAGEHLP_LINEW64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetLinePrevW64(hprocess: super::super::super::Foundation::HANDLE, line: *mut IMAGEHLP_LINEW64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetLinePrevW64(hprocess.into_param().abi(), ::std::mem::transmute(line)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "x86")]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetModuleBase<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, dwaddr: u32) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetModuleBase(hprocess: super::super::super::Foundation::HANDLE, dwaddr: u32) -> u32;
        }
        ::std::mem::transmute(SymGetModuleBase(hprocess.into_param().abi(), ::std::mem::transmute(dwaddr)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetModuleBase64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, qwaddr: u64) -> u64 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetModuleBase64(hprocess: super::super::super::Foundation::HANDLE, qwaddr: u64) -> u64;
        }
        ::std::mem::transmute(SymGetModuleBase64(hprocess.into_param().abi(), ::std::mem::transmute(qwaddr)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "x86")]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetModuleInfo<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, dwaddr: u32, moduleinfo: *mut IMAGEHLP_MODULE) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetModuleInfo(hprocess: super::super::super::Foundation::HANDLE, dwaddr: u32, moduleinfo: *mut IMAGEHLP_MODULE) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetModuleInfo(hprocess.into_param().abi(), ::std::mem::transmute(dwaddr), ::std::mem::transmute(moduleinfo)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetModuleInfo64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, qwaddr: u64, moduleinfo: *mut IMAGEHLP_MODULE64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetModuleInfo64(hprocess: super::super::super::Foundation::HANDLE, qwaddr: u64, moduleinfo: *mut IMAGEHLP_MODULE64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetModuleInfo64(hprocess.into_param().abi(), ::std::mem::transmute(qwaddr), ::std::mem::transmute(moduleinfo)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "x86")]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetModuleInfoW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, dwaddr: u32, moduleinfo: *mut IMAGEHLP_MODULEW) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetModuleInfoW(hprocess: super::super::super::Foundation::HANDLE, dwaddr: u32, moduleinfo: *mut IMAGEHLP_MODULEW) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetModuleInfoW(hprocess.into_param().abi(), ::std::mem::transmute(dwaddr), ::std::mem::transmute(moduleinfo)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetModuleInfoW64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, qwaddr: u64, moduleinfo: *mut IMAGEHLP_MODULEW64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetModuleInfoW64(hprocess: super::super::super::Foundation::HANDLE, qwaddr: u64, moduleinfo: *mut IMAGEHLP_MODULEW64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetModuleInfoW64(hprocess.into_param().abi(), ::std::mem::transmute(qwaddr), ::std::mem::transmute(moduleinfo)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetOmaps<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, baseofdll: u64, omapto: *mut *mut OMAP, comapto: *mut u64, omapfrom: *mut *mut OMAP, comapfrom: *mut u64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetOmaps(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, omapto: *mut *mut OMAP, comapto: *mut u64, omapfrom: *mut *mut OMAP, comapfrom: *mut u64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetOmaps(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), ::std::mem::transmute(omapto), ::std::mem::transmute(comapto), ::std::mem::transmute(omapfrom), ::std::mem::transmute(comapfrom)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn SymGetOptions() -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetOptions() -> u32;
        }
        ::std::mem::transmute(SymGetOptions())
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetScope<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, baseofdll: u64, index: u32, symbol: *mut SYMBOL_INFO) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetScope(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, index: u32, symbol: *mut SYMBOL_INFO) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetScope(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), ::std::mem::transmute(index), ::std::mem::transmute(symbol)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetScopeW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, baseofdll: u64, index: u32, symbol: *mut SYMBOL_INFOW) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetScopeW(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, index: u32, symbol: *mut SYMBOL_INFOW) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetScopeW(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), ::std::mem::transmute(index), ::std::mem::transmute(symbol)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSearchPath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, searchpatha: super::super::super::Foundation::PSTR, searchpathlength: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSearchPath(hprocess: super::super::super::Foundation::HANDLE, searchpatha: super::super::super::Foundation::PSTR, searchpathlength: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSearchPath(hprocess.into_param().abi(), ::std::mem::transmute(searchpatha), ::std::mem::transmute(searchpathlength)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSearchPathW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, searchpatha: super::super::super::Foundation::PWSTR, searchpathlength: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSearchPathW(hprocess: super::super::super::Foundation::HANDLE, searchpatha: super::super::super::Foundation::PWSTR, searchpathlength: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSearchPathW(hprocess.into_param().abi(), ::std::mem::transmute(searchpatha), ::std::mem::transmute(searchpathlength)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSourceFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, base: u64, params: Param2, filespec: Param3, filepath: super::super::super::Foundation::PSTR, size: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSourceFile(hprocess: super::super::super::Foundation::HANDLE, base: u64, params: super::super::super::Foundation::PSTR, filespec: super::super::super::Foundation::PSTR, filepath: super::super::super::Foundation::PSTR, size: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSourceFile(hprocess.into_param().abi(), ::std::mem::transmute(base), params.into_param().abi(), filespec.into_param().abi(), ::std::mem::transmute(filepath), ::std::mem::transmute(size)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSourceFileChecksum<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, base: u64, filespec: Param2, pchecksumtype: *mut u32, pchecksum: *mut u8, checksumsize: u32, pactualbyteswritten: *mut u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSourceFileChecksum(hprocess: super::super::super::Foundation::HANDLE, base: u64, filespec: super::super::super::Foundation::PSTR, pchecksumtype: *mut u32, pchecksum: *mut u8, checksumsize: u32, pactualbyteswritten: *mut u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSourceFileChecksum(hprocess.into_param().abi(), ::std::mem::transmute(base), filespec.into_param().abi(), ::std::mem::transmute(pchecksumtype), ::std::mem::transmute(pchecksum), ::std::mem::transmute(checksumsize), ::std::mem::transmute(pactualbyteswritten)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSourceFileChecksumW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, base: u64, filespec: Param2, pchecksumtype: *mut u32, pchecksum: *mut u8, checksumsize: u32, pactualbyteswritten: *mut u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSourceFileChecksumW(hprocess: super::super::super::Foundation::HANDLE, base: u64, filespec: super::super::super::Foundation::PWSTR, pchecksumtype: *mut u32, pchecksum: *mut u8, checksumsize: u32, pactualbyteswritten: *mut u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSourceFileChecksumW(hprocess.into_param().abi(), ::std::mem::transmute(base), filespec.into_param().abi(), ::std::mem::transmute(pchecksumtype), ::std::mem::transmute(pchecksum), ::std::mem::transmute(checksumsize), ::std::mem::transmute(pactualbyteswritten)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSourceFileFromToken<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, token: *const ::std::ffi::c_void, params: Param2, filepath: super::super::super::Foundation::PSTR, size: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSourceFileFromToken(hprocess: super::super::super::Foundation::HANDLE, token: *const ::std::ffi::c_void, params: super::super::super::Foundation::PSTR, filepath: super::super::super::Foundation::PSTR, size: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSourceFileFromToken(hprocess.into_param().abi(), ::std::mem::transmute(token), params.into_param().abi(), ::std::mem::transmute(filepath), ::std::mem::transmute(size)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSourceFileFromTokenByTokenName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, token: *const ::std::ffi::c_void, tokenname: Param2, params: Param3, filepath: super::super::super::Foundation::PSTR, size: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSourceFileFromTokenByTokenName(hprocess: super::super::super::Foundation::HANDLE, token: *const ::std::ffi::c_void, tokenname: super::super::super::Foundation::PSTR, params: super::super::super::Foundation::PSTR, filepath: super::super::super::Foundation::PSTR, size: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSourceFileFromTokenByTokenName(hprocess.into_param().abi(), ::std::mem::transmute(token), tokenname.into_param().abi(), params.into_param().abi(), ::std::mem::transmute(filepath), ::std::mem::transmute(size)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSourceFileFromTokenByTokenNameW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, token: *const ::std::ffi::c_void, tokenname: Param2, params: Param3, filepath: super::super::super::Foundation::PWSTR, size: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSourceFileFromTokenByTokenNameW(hprocess: super::super::super::Foundation::HANDLE, token: *const ::std::ffi::c_void, tokenname: super::super::super::Foundation::PWSTR, params: super::super::super::Foundation::PWSTR, filepath: super::super::super::Foundation::PWSTR, size: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSourceFileFromTokenByTokenNameW(hprocess.into_param().abi(), ::std::mem::transmute(token), tokenname.into_param().abi(), params.into_param().abi(), ::std::mem::transmute(filepath), ::std::mem::transmute(size)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSourceFileFromTokenW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, token: *const ::std::ffi::c_void, params: Param2, filepath: super::super::super::Foundation::PWSTR, size: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSourceFileFromTokenW(hprocess: super::super::super::Foundation::HANDLE, token: *const ::std::ffi::c_void, params: super::super::super::Foundation::PWSTR, filepath: super::super::super::Foundation::PWSTR, size: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSourceFileFromTokenW(hprocess.into_param().abi(), ::std::mem::transmute(token), params.into_param().abi(), ::std::mem::transmute(filepath), ::std::mem::transmute(size)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSourceFileToken<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, base: u64, filespec: Param2, token: *mut *mut ::std::ffi::c_void, size: *mut u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSourceFileToken(hprocess: super::super::super::Foundation::HANDLE, base: u64, filespec: super::super::super::Foundation::PSTR, token: *mut *mut ::std::ffi::c_void, size: *mut u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSourceFileToken(hprocess.into_param().abi(), ::std::mem::transmute(base), filespec.into_param().abi(), ::std::mem::transmute(token), ::std::mem::transmute(size)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSourceFileTokenByTokenName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(
    hprocess: Param0,
    base: u64,
    filespec: Param2,
    tokenname: Param3,
    tokenparameters: Param4,
    token: *mut *mut ::std::ffi::c_void,
    size: *mut u32,
) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSourceFileTokenByTokenName(hprocess: super::super::super::Foundation::HANDLE, base: u64, filespec: super::super::super::Foundation::PSTR, tokenname: super::super::super::Foundation::PSTR, tokenparameters: super::super::super::Foundation::PSTR, token: *mut *mut ::std::ffi::c_void, size: *mut u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSourceFileTokenByTokenName(hprocess.into_param().abi(), ::std::mem::transmute(base), filespec.into_param().abi(), tokenname.into_param().abi(), tokenparameters.into_param().abi(), ::std::mem::transmute(token), ::std::mem::transmute(size)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSourceFileTokenByTokenNameW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(
    hprocess: Param0,
    base: u64,
    filespec: Param2,
    tokenname: Param3,
    tokenparameters: Param4,
    token: *mut *mut ::std::ffi::c_void,
    size: *mut u32,
) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSourceFileTokenByTokenNameW(hprocess: super::super::super::Foundation::HANDLE, base: u64, filespec: super::super::super::Foundation::PWSTR, tokenname: super::super::super::Foundation::PWSTR, tokenparameters: super::super::super::Foundation::PWSTR, token: *mut *mut ::std::ffi::c_void, size: *mut u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSourceFileTokenByTokenNameW(hprocess.into_param().abi(), ::std::mem::transmute(base), filespec.into_param().abi(), tokenname.into_param().abi(), tokenparameters.into_param().abi(), ::std::mem::transmute(token), ::std::mem::transmute(size)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSourceFileTokenW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, base: u64, filespec: Param2, token: *mut *mut ::std::ffi::c_void, size: *mut u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSourceFileTokenW(hprocess: super::super::super::Foundation::HANDLE, base: u64, filespec: super::super::super::Foundation::PWSTR, token: *mut *mut ::std::ffi::c_void, size: *mut u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSourceFileTokenW(hprocess.into_param().abi(), ::std::mem::transmute(base), filespec.into_param().abi(), ::std::mem::transmute(token), ::std::mem::transmute(size)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSourceFileW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, base: u64, params: Param2, filespec: Param3, filepath: super::super::super::Foundation::PWSTR, size: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSourceFileW(hprocess: super::super::super::Foundation::HANDLE, base: u64, params: super::super::super::Foundation::PWSTR, filespec: super::super::super::Foundation::PWSTR, filepath: super::super::super::Foundation::PWSTR, size: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSourceFileW(hprocess.into_param().abi(), ::std::mem::transmute(base), params.into_param().abi(), filespec.into_param().abi(), ::std::mem::transmute(filepath), ::std::mem::transmute(size)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSourceVarFromToken<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, token: *const ::std::ffi::c_void, params: Param2, varname: Param3, value: super::super::super::Foundation::PSTR, size: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSourceVarFromToken(hprocess: super::super::super::Foundation::HANDLE, token: *const ::std::ffi::c_void, params: super::super::super::Foundation::PSTR, varname: super::super::super::Foundation::PSTR, value: super::super::super::Foundation::PSTR, size: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSourceVarFromToken(hprocess.into_param().abi(), ::std::mem::transmute(token), params.into_param().abi(), varname.into_param().abi(), ::std::mem::transmute(value), ::std::mem::transmute(size)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSourceVarFromTokenW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, token: *const ::std::ffi::c_void, params: Param2, varname: Param3, value: super::super::super::Foundation::PWSTR, size: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSourceVarFromTokenW(hprocess: super::super::super::Foundation::HANDLE, token: *const ::std::ffi::c_void, params: super::super::super::Foundation::PWSTR, varname: super::super::super::Foundation::PWSTR, value: super::super::super::Foundation::PWSTR, size: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSourceVarFromTokenW(hprocess.into_param().abi(), ::std::mem::transmute(token), params.into_param().abi(), varname.into_param().abi(), ::std::mem::transmute(value), ::std::mem::transmute(size)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "x86")]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSymFromAddr<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, dwaddr: u32, pdwdisplacement: *mut u32, symbol: *mut IMAGEHLP_SYMBOL) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSymFromAddr(hprocess: super::super::super::Foundation::HANDLE, dwaddr: u32, pdwdisplacement: *mut u32, symbol: *mut IMAGEHLP_SYMBOL) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSymFromAddr(hprocess.into_param().abi(), ::std::mem::transmute(dwaddr), ::std::mem::transmute(pdwdisplacement), ::std::mem::transmute(symbol)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSymFromAddr64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, qwaddr: u64, pdwdisplacement: *mut u64, symbol: *mut IMAGEHLP_SYMBOL64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSymFromAddr64(hprocess: super::super::super::Foundation::HANDLE, qwaddr: u64, pdwdisplacement: *mut u64, symbol: *mut IMAGEHLP_SYMBOL64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSymFromAddr64(hprocess.into_param().abi(), ::std::mem::transmute(qwaddr), ::std::mem::transmute(pdwdisplacement), ::std::mem::transmute(symbol)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "x86")]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSymFromName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, name: Param1, symbol: *mut IMAGEHLP_SYMBOL) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSymFromName(hprocess: super::super::super::Foundation::HANDLE, name: super::super::super::Foundation::PSTR, symbol: *mut IMAGEHLP_SYMBOL) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSymFromName(hprocess.into_param().abi(), name.into_param().abi(), ::std::mem::transmute(symbol)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSymFromName64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, name: Param1, symbol: *mut IMAGEHLP_SYMBOL64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSymFromName64(hprocess: super::super::super::Foundation::HANDLE, name: super::super::super::Foundation::PSTR, symbol: *mut IMAGEHLP_SYMBOL64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSymFromName64(hprocess.into_param().abi(), name.into_param().abi(), ::std::mem::transmute(symbol)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "x86")]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSymNext<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, symbol: *mut IMAGEHLP_SYMBOL) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSymNext(hprocess: super::super::super::Foundation::HANDLE, symbol: *mut IMAGEHLP_SYMBOL) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSymNext(hprocess.into_param().abi(), ::std::mem::transmute(symbol)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSymNext64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, symbol: *mut IMAGEHLP_SYMBOL64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSymNext64(hprocess: super::super::super::Foundation::HANDLE, symbol: *mut IMAGEHLP_SYMBOL64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSymNext64(hprocess.into_param().abi(), ::std::mem::transmute(symbol)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "x86")]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSymPrev<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, symbol: *mut IMAGEHLP_SYMBOL) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSymPrev(hprocess: super::super::super::Foundation::HANDLE, symbol: *mut IMAGEHLP_SYMBOL) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSymPrev(hprocess.into_param().abi(), ::std::mem::transmute(symbol)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSymPrev64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, symbol: *mut IMAGEHLP_SYMBOL64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSymPrev64(hprocess: super::super::super::Foundation::HANDLE, symbol: *mut IMAGEHLP_SYMBOL64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSymPrev64(hprocess.into_param().abi(), ::std::mem::transmute(symbol)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSymbolFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(
    hprocess: Param0,
    sympath: Param1,
    imagefile: Param2,
    r#type: IMAGEHLP_SF_TYPE,
    symbolfile: super::super::super::Foundation::PSTR,
    csymbolfile: usize,
    dbgfile: super::super::super::Foundation::PSTR,
    cdbgfile: usize,
) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSymbolFile(hprocess: super::super::super::Foundation::HANDLE, sympath: super::super::super::Foundation::PSTR, imagefile: super::super::super::Foundation::PSTR, r#type: IMAGEHLP_SF_TYPE, symbolfile: super::super::super::Foundation::PSTR, csymbolfile: usize, dbgfile: super::super::super::Foundation::PSTR, cdbgfile: usize) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSymbolFile(hprocess.into_param().abi(), sympath.into_param().abi(), imagefile.into_param().abi(), ::std::mem::transmute(r#type), ::std::mem::transmute(symbolfile), ::std::mem::transmute(csymbolfile), ::std::mem::transmute(dbgfile), ::std::mem::transmute(cdbgfile)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetSymbolFileW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(
    hprocess: Param0,
    sympath: Param1,
    imagefile: Param2,
    r#type: IMAGEHLP_SF_TYPE,
    symbolfile: super::super::super::Foundation::PWSTR,
    csymbolfile: usize,
    dbgfile: super::super::super::Foundation::PWSTR,
    cdbgfile: usize,
) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetSymbolFileW(hprocess: super::super::super::Foundation::HANDLE, sympath: super::super::super::Foundation::PWSTR, imagefile: super::super::super::Foundation::PWSTR, r#type: IMAGEHLP_SF_TYPE, symbolfile: super::super::super::Foundation::PWSTR, csymbolfile: usize, dbgfile: super::super::super::Foundation::PWSTR, cdbgfile: usize) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetSymbolFileW(hprocess.into_param().abi(), sympath.into_param().abi(), imagefile.into_param().abi(), ::std::mem::transmute(r#type), ::std::mem::transmute(symbolfile), ::std::mem::transmute(csymbolfile), ::std::mem::transmute(dbgfile), ::std::mem::transmute(cdbgfile)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetTypeFromName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, baseofdll: u64, name: Param2, symbol: *mut SYMBOL_INFO) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetTypeFromName(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, name: super::super::super::Foundation::PSTR, symbol: *mut SYMBOL_INFO) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetTypeFromName(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), name.into_param().abi(), ::std::mem::transmute(symbol)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetTypeFromNameW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, baseofdll: u64, name: Param2, symbol: *mut SYMBOL_INFOW) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetTypeFromNameW(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, name: super::super::super::Foundation::PWSTR, symbol: *mut SYMBOL_INFOW) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetTypeFromNameW(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), name.into_param().abi(), ::std::mem::transmute(symbol)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetTypeInfo<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, modbase: u64, typeid: u32, gettype: IMAGEHLP_SYMBOL_TYPE_INFO, pinfo: *mut ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetTypeInfo(hprocess: super::super::super::Foundation::HANDLE, modbase: u64, typeid: u32, gettype: IMAGEHLP_SYMBOL_TYPE_INFO, pinfo: *mut ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetTypeInfo(hprocess.into_param().abi(), ::std::mem::transmute(modbase), ::std::mem::transmute(typeid), ::std::mem::transmute(gettype), ::std::mem::transmute(pinfo)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetTypeInfoEx<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, modbase: u64, params: *mut IMAGEHLP_GET_TYPE_INFO_PARAMS) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetTypeInfoEx(hprocess: super::super::super::Foundation::HANDLE, modbase: u64, params: *mut IMAGEHLP_GET_TYPE_INFO_PARAMS) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetTypeInfoEx(hprocess.into_param().abi(), ::std::mem::transmute(modbase), ::std::mem::transmute(params)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymGetUnwindInfo<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, address: u64, buffer: *mut ::std::ffi::c_void, size: *mut u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymGetUnwindInfo(hprocess: super::super::super::Foundation::HANDLE, address: u64, buffer: *mut ::std::ffi::c_void, size: *mut u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymGetUnwindInfo(hprocess.into_param().abi(), ::std::mem::transmute(address), ::std::mem::transmute(buffer), ::std::mem::transmute(size)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymInitialize<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(hprocess: Param0, usersearchpath: Param1, finvadeprocess: Param2) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymInitialize(hprocess: super::super::super::Foundation::HANDLE, usersearchpath: super::super::super::Foundation::PSTR, finvadeprocess: super::super::super::Foundation::BOOL) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymInitialize(hprocess.into_param().abi(), usersearchpath.into_param().abi(), finvadeprocess.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymInitializeW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(hprocess: Param0, usersearchpath: Param1, finvadeprocess: Param2) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymInitializeW(hprocess: super::super::super::Foundation::HANDLE, usersearchpath: super::super::super::Foundation::PWSTR, finvadeprocess: super::super::super::Foundation::BOOL) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymInitializeW(hprocess.into_param().abi(), usersearchpath.into_param().abi(), finvadeprocess.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "x86")]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymLoadModule<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, hfile: Param1, imagename: Param2, modulename: Param3, baseofdll: u32, sizeofdll: u32) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymLoadModule(hprocess: super::super::super::Foundation::HANDLE, hfile: super::super::super::Foundation::HANDLE, imagename: super::super::super::Foundation::PSTR, modulename: super::super::super::Foundation::PSTR, baseofdll: u32, sizeofdll: u32) -> u32;
        }
        ::std::mem::transmute(SymLoadModule(hprocess.into_param().abi(), hfile.into_param().abi(), imagename.into_param().abi(), modulename.into_param().abi(), ::std::mem::transmute(baseofdll), ::std::mem::transmute(sizeofdll)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymLoadModule64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, hfile: Param1, imagename: Param2, modulename: Param3, baseofdll: u64, sizeofdll: u32) -> u64 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymLoadModule64(hprocess: super::super::super::Foundation::HANDLE, hfile: super::super::super::Foundation::HANDLE, imagename: super::super::super::Foundation::PSTR, modulename: super::super::super::Foundation::PSTR, baseofdll: u64, sizeofdll: u32) -> u64;
        }
        ::std::mem::transmute(SymLoadModule64(hprocess.into_param().abi(), hfile.into_param().abi(), imagename.into_param().abi(), modulename.into_param().abi(), ::std::mem::transmute(baseofdll), ::std::mem::transmute(sizeofdll)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymLoadModuleEx<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(
    hprocess: Param0,
    hfile: Param1,
    imagename: Param2,
    modulename: Param3,
    baseofdll: u64,
    dllsize: u32,
    data: *const MODLOAD_DATA,
    flags: SYM_LOAD_FLAGS,
) -> u64 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymLoadModuleEx(hprocess: super::super::super::Foundation::HANDLE, hfile: super::super::super::Foundation::HANDLE, imagename: super::super::super::Foundation::PSTR, modulename: super::super::super::Foundation::PSTR, baseofdll: u64, dllsize: u32, data: *const MODLOAD_DATA, flags: SYM_LOAD_FLAGS) -> u64;
        }
        ::std::mem::transmute(SymLoadModuleEx(hprocess.into_param().abi(), hfile.into_param().abi(), imagename.into_param().abi(), modulename.into_param().abi(), ::std::mem::transmute(baseofdll), ::std::mem::transmute(dllsize), ::std::mem::transmute(data), ::std::mem::transmute(flags)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymLoadModuleExW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(
    hprocess: Param0,
    hfile: Param1,
    imagename: Param2,
    modulename: Param3,
    baseofdll: u64,
    dllsize: u32,
    data: *const MODLOAD_DATA,
    flags: SYM_LOAD_FLAGS,
) -> u64 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymLoadModuleExW(hprocess: super::super::super::Foundation::HANDLE, hfile: super::super::super::Foundation::HANDLE, imagename: super::super::super::Foundation::PWSTR, modulename: super::super::super::Foundation::PWSTR, baseofdll: u64, dllsize: u32, data: *const MODLOAD_DATA, flags: SYM_LOAD_FLAGS) -> u64;
        }
        ::std::mem::transmute(SymLoadModuleExW(hprocess.into_param().abi(), hfile.into_param().abi(), imagename.into_param().abi(), modulename.into_param().abi(), ::std::mem::transmute(baseofdll), ::std::mem::transmute(dllsize), ::std::mem::transmute(data), ::std::mem::transmute(flags)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymMatchFileName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(filename: Param0, r#match: Param1, filenamestop: *mut super::super::super::Foundation::PSTR, matchstop: *mut super::super::super::Foundation::PSTR) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymMatchFileName(filename: super::super::super::Foundation::PSTR, r#match: super::super::super::Foundation::PSTR, filenamestop: *mut super::super::super::Foundation::PSTR, matchstop: *mut super::super::super::Foundation::PSTR) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymMatchFileName(filename.into_param().abi(), r#match.into_param().abi(), ::std::mem::transmute(filenamestop), ::std::mem::transmute(matchstop)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymMatchFileNameW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(filename: Param0, r#match: Param1, filenamestop: *mut super::super::super::Foundation::PWSTR, matchstop: *mut super::super::super::Foundation::PWSTR) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymMatchFileNameW(filename: super::super::super::Foundation::PWSTR, r#match: super::super::super::Foundation::PWSTR, filenamestop: *mut super::super::super::Foundation::PWSTR, matchstop: *mut super::super::super::Foundation::PWSTR) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymMatchFileNameW(filename.into_param().abi(), r#match.into_param().abi(), ::std::mem::transmute(filenamestop), ::std::mem::transmute(matchstop)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymMatchString<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(string: Param0, expression: Param1, fcase: Param2) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymMatchString(string: super::super::super::Foundation::PSTR, expression: super::super::super::Foundation::PSTR, fcase: super::super::super::Foundation::BOOL) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymMatchString(string.into_param().abi(), expression.into_param().abi(), fcase.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymMatchStringA<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(string: Param0, expression: Param1, fcase: Param2) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymMatchStringA(string: super::super::super::Foundation::PSTR, expression: super::super::super::Foundation::PSTR, fcase: super::super::super::Foundation::BOOL) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymMatchStringA(string.into_param().abi(), expression.into_param().abi(), fcase.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymMatchStringW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(string: Param0, expression: Param1, fcase: Param2) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymMatchStringW(string: super::super::super::Foundation::PWSTR, expression: super::super::super::Foundation::PWSTR, fcase: super::super::super::Foundation::BOOL) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymMatchStringW(string.into_param().abi(), expression.into_param().abi(), fcase.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymNext<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, si: *mut SYMBOL_INFO) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymNext(hprocess: super::super::super::Foundation::HANDLE, si: *mut SYMBOL_INFO) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymNext(hprocess.into_param().abi(), ::std::mem::transmute(si)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymNextW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, siw: *mut SYMBOL_INFOW) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymNextW(hprocess: super::super::super::Foundation::HANDLE, siw: *mut SYMBOL_INFOW) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymNextW(hprocess.into_param().abi(), ::std::mem::transmute(siw)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymPrev<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, si: *mut SYMBOL_INFO) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymPrev(hprocess: super::super::super::Foundation::HANDLE, si: *mut SYMBOL_INFO) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymPrev(hprocess.into_param().abi(), ::std::mem::transmute(si)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymPrevW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, siw: *mut SYMBOL_INFOW) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymPrevW(hprocess: super::super::super::Foundation::HANDLE, siw: *mut SYMBOL_INFOW) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymPrevW(hprocess.into_param().abi(), ::std::mem::transmute(siw)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymQueryInlineTrace<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, startaddress: u64, startcontext: u32, startretaddress: u64, curaddress: u64, curcontext: *mut u32, curframeindex: *mut u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymQueryInlineTrace(hprocess: super::super::super::Foundation::HANDLE, startaddress: u64, startcontext: u32, startretaddress: u64, curaddress: u64, curcontext: *mut u32, curframeindex: *mut u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymQueryInlineTrace(hprocess.into_param().abi(), ::std::mem::transmute(startaddress), ::std::mem::transmute(startcontext), ::std::mem::transmute(startretaddress), ::std::mem::transmute(curaddress), ::std::mem::transmute(curcontext), ::std::mem::transmute(curframeindex)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymRefreshModuleList<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymRefreshModuleList(hprocess: super::super::super::Foundation::HANDLE) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymRefreshModuleList(hprocess.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "x86")]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymRegisterCallback<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, callbackfunction: ::std::option::Option<PSYMBOL_REGISTERED_CALLBACK>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymRegisterCallback(hprocess: super::super::super::Foundation::HANDLE, callbackfunction: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymRegisterCallback(hprocess.into_param().abi(), ::std::mem::transmute(callbackfunction), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymRegisterCallback64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, callbackfunction: ::std::option::Option<PSYMBOL_REGISTERED_CALLBACK64>, usercontext: u64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymRegisterCallback64(hprocess: super::super::super::Foundation::HANDLE, callbackfunction: ::windows::runtime::RawPtr, usercontext: u64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymRegisterCallback64(hprocess.into_param().abi(), ::std::mem::transmute(callbackfunction), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymRegisterCallbackW64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, callbackfunction: ::std::option::Option<PSYMBOL_REGISTERED_CALLBACK64>, usercontext: u64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymRegisterCallbackW64(hprocess: super::super::super::Foundation::HANDLE, callbackfunction: ::windows::runtime::RawPtr, usercontext: u64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymRegisterCallbackW64(hprocess.into_param().abi(), ::std::mem::transmute(callbackfunction), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "x86")]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymRegisterFunctionEntryCallback<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, callbackfunction: ::std::option::Option<PSYMBOL_FUNCENTRY_CALLBACK>, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymRegisterFunctionEntryCallback(hprocess: super::super::super::Foundation::HANDLE, callbackfunction: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymRegisterFunctionEntryCallback(hprocess.into_param().abi(), ::std::mem::transmute(callbackfunction), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymRegisterFunctionEntryCallback64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, callbackfunction: ::std::option::Option<PSYMBOL_FUNCENTRY_CALLBACK64>, usercontext: u64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymRegisterFunctionEntryCallback64(hprocess: super::super::super::Foundation::HANDLE, callbackfunction: ::windows::runtime::RawPtr, usercontext: u64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymRegisterFunctionEntryCallback64(hprocess.into_param().abi(), ::std::mem::transmute(callbackfunction), ::std::mem::transmute(usercontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSearch<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, baseofdll: u64, index: u32, symtag: u32, mask: Param4, address: u64, enumsymbolscallback: ::std::option::Option<PSYM_ENUMERATESYMBOLS_CALLBACK>, usercontext: *const ::std::ffi::c_void, options: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSearch(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, index: u32, symtag: u32, mask: super::super::super::Foundation::PSTR, address: u64, enumsymbolscallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void, options: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymSearch(
            hprocess.into_param().abi(),
            ::std::mem::transmute(baseofdll),
            ::std::mem::transmute(index),
            ::std::mem::transmute(symtag),
            mask.into_param().abi(),
            ::std::mem::transmute(address),
            ::std::mem::transmute(enumsymbolscallback),
            ::std::mem::transmute(usercontext),
            ::std::mem::transmute(options),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSearchW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, baseofdll: u64, index: u32, symtag: u32, mask: Param4, address: u64, enumsymbolscallback: ::std::option::Option<PSYM_ENUMERATESYMBOLS_CALLBACKW>, usercontext: *const ::std::ffi::c_void, options: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSearchW(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, index: u32, symtag: u32, mask: super::super::super::Foundation::PWSTR, address: u64, enumsymbolscallback: ::windows::runtime::RawPtr, usercontext: *const ::std::ffi::c_void, options: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymSearchW(
            hprocess.into_param().abi(),
            ::std::mem::transmute(baseofdll),
            ::std::mem::transmute(index),
            ::std::mem::transmute(symtag),
            mask.into_param().abi(),
            ::std::mem::transmute(address),
            ::std::mem::transmute(enumsymbolscallback),
            ::std::mem::transmute(usercontext),
            ::std::mem::transmute(options),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSetContext<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, stackframe: *const IMAGEHLP_STACK_FRAME, context: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSetContext(hprocess: super::super::super::Foundation::HANDLE, stackframe: *const IMAGEHLP_STACK_FRAME, context: *const ::std::ffi::c_void) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymSetContext(hprocess.into_param().abi(), ::std::mem::transmute(stackframe), ::std::mem::transmute(context)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSetExtendedOption<'a, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::BOOL>>(option: IMAGEHLP_EXTENDED_OPTIONS, value: Param1) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSetExtendedOption(option: IMAGEHLP_EXTENDED_OPTIONS, value: super::super::super::Foundation::BOOL) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymSetExtendedOption(::std::mem::transmute(option), value.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSetHomeDirectory<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, dir: Param1) -> super::super::super::Foundation::PSTR {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSetHomeDirectory(hprocess: super::super::super::Foundation::HANDLE, dir: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::PSTR;
        }
        ::std::mem::transmute(SymSetHomeDirectory(hprocess.into_param().abi(), dir.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSetHomeDirectoryW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, dir: Param1) -> super::super::super::Foundation::PWSTR {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSetHomeDirectoryW(hprocess: super::super::super::Foundation::HANDLE, dir: super::super::super::Foundation::PWSTR) -> super::super::super::Foundation::PWSTR;
        }
        ::std::mem::transmute(SymSetHomeDirectoryW(hprocess.into_param().abi(), dir.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn SymSetOptions(symoptions: u32) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSetOptions(symoptions: u32) -> u32;
        }
        ::std::mem::transmute(SymSetOptions(::std::mem::transmute(symoptions)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSetParentWindow<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HWND>>(hwnd: Param0) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSetParentWindow(hwnd: super::super::super::Foundation::HWND) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymSetParentWindow(hwnd.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSetScopeFromAddr<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, address: u64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSetScopeFromAddr(hprocess: super::super::super::Foundation::HANDLE, address: u64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymSetScopeFromAddr(hprocess.into_param().abi(), ::std::mem::transmute(address)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSetScopeFromIndex<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, baseofdll: u64, index: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSetScopeFromIndex(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64, index: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymSetScopeFromIndex(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll), ::std::mem::transmute(index)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSetScopeFromInlineContext<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, address: u64, inlinecontext: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSetScopeFromInlineContext(hprocess: super::super::super::Foundation::HANDLE, address: u64, inlinecontext: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymSetScopeFromInlineContext(hprocess.into_param().abi(), ::std::mem::transmute(address), ::std::mem::transmute(inlinecontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSetSearchPath<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, searchpatha: Param1) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSetSearchPath(hprocess: super::super::super::Foundation::HANDLE, searchpatha: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymSetSearchPath(hprocess.into_param().abi(), searchpatha.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSetSearchPathW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, searchpatha: Param1) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSetSearchPathW(hprocess: super::super::super::Foundation::HANDLE, searchpatha: super::super::super::Foundation::PWSTR) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymSetSearchPathW(hprocess.into_param().abi(), searchpatha.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSrvDeltaName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(
    hprocess: Param0,
    sympath: Param1,
    r#type: Param2,
    file1: Param3,
    file2: Param4,
) -> super::super::super::Foundation::PSTR {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSrvDeltaName(hprocess: super::super::super::Foundation::HANDLE, sympath: super::super::super::Foundation::PSTR, r#type: super::super::super::Foundation::PSTR, file1: super::super::super::Foundation::PSTR, file2: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::PSTR;
        }
        ::std::mem::transmute(SymSrvDeltaName(hprocess.into_param().abi(), sympath.into_param().abi(), r#type.into_param().abi(), file1.into_param().abi(), file2.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSrvDeltaNameW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param4: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(
    hprocess: Param0,
    sympath: Param1,
    r#type: Param2,
    file1: Param3,
    file2: Param4,
) -> super::super::super::Foundation::PWSTR {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSrvDeltaNameW(hprocess: super::super::super::Foundation::HANDLE, sympath: super::super::super::Foundation::PWSTR, r#type: super::super::super::Foundation::PWSTR, file1: super::super::super::Foundation::PWSTR, file2: super::super::super::Foundation::PWSTR) -> super::super::super::Foundation::PWSTR;
        }
        ::std::mem::transmute(SymSrvDeltaNameW(hprocess.into_param().abi(), sympath.into_param().abi(), r#type.into_param().abi(), file1.into_param().abi(), file2.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSrvGetFileIndexInfo<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(file: Param0, info: *mut SYMSRV_INDEX_INFO, flags: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSrvGetFileIndexInfo(file: super::super::super::Foundation::PSTR, info: *mut SYMSRV_INDEX_INFO, flags: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymSrvGetFileIndexInfo(file.into_param().abi(), ::std::mem::transmute(info), ::std::mem::transmute(flags)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSrvGetFileIndexInfoW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(file: Param0, info: *mut SYMSRV_INDEX_INFOW, flags: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSrvGetFileIndexInfoW(file: super::super::super::Foundation::PWSTR, info: *mut SYMSRV_INDEX_INFOW, flags: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymSrvGetFileIndexInfoW(file.into_param().abi(), ::std::mem::transmute(info), ::std::mem::transmute(flags)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSrvGetFileIndexString<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, srvpath: Param1, file: Param2, index: super::super::super::Foundation::PSTR, size: usize, flags: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSrvGetFileIndexString(hprocess: super::super::super::Foundation::HANDLE, srvpath: super::super::super::Foundation::PSTR, file: super::super::super::Foundation::PSTR, index: super::super::super::Foundation::PSTR, size: usize, flags: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymSrvGetFileIndexString(hprocess.into_param().abi(), srvpath.into_param().abi(), file.into_param().abi(), ::std::mem::transmute(index), ::std::mem::transmute(size), ::std::mem::transmute(flags)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSrvGetFileIndexStringW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, srvpath: Param1, file: Param2, index: super::super::super::Foundation::PWSTR, size: usize, flags: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSrvGetFileIndexStringW(hprocess: super::super::super::Foundation::HANDLE, srvpath: super::super::super::Foundation::PWSTR, file: super::super::super::Foundation::PWSTR, index: super::super::super::Foundation::PWSTR, size: usize, flags: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymSrvGetFileIndexStringW(hprocess.into_param().abi(), srvpath.into_param().abi(), file.into_param().abi(), ::std::mem::transmute(index), ::std::mem::transmute(size), ::std::mem::transmute(flags)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSrvGetFileIndexes<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(file: Param0, id: *mut ::windows::runtime::GUID, val1: *mut u32, val2: *mut u32, flags: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSrvGetFileIndexes(file: super::super::super::Foundation::PSTR, id: *mut ::windows::runtime::GUID, val1: *mut u32, val2: *mut u32, flags: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymSrvGetFileIndexes(file.into_param().abi(), ::std::mem::transmute(id), ::std::mem::transmute(val1), ::std::mem::transmute(val2), ::std::mem::transmute(flags)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSrvGetFileIndexesW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(file: Param0, id: *mut ::windows::runtime::GUID, val1: *mut u32, val2: *mut u32, flags: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSrvGetFileIndexesW(file: super::super::super::Foundation::PWSTR, id: *mut ::windows::runtime::GUID, val1: *mut u32, val2: *mut u32, flags: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymSrvGetFileIndexesW(file.into_param().abi(), ::std::mem::transmute(id), ::std::mem::transmute(val1), ::std::mem::transmute(val2), ::std::mem::transmute(flags)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSrvGetSupplement<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, sympath: Param1, node: Param2, file: Param3) -> super::super::super::Foundation::PSTR {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSrvGetSupplement(hprocess: super::super::super::Foundation::HANDLE, sympath: super::super::super::Foundation::PSTR, node: super::super::super::Foundation::PSTR, file: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::PSTR;
        }
        ::std::mem::transmute(SymSrvGetSupplement(hprocess.into_param().abi(), sympath.into_param().abi(), node.into_param().abi(), file.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSrvGetSupplementW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, sympath: Param1, node: Param2, file: Param3) -> super::super::super::Foundation::PWSTR {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSrvGetSupplementW(hprocess: super::super::super::Foundation::HANDLE, sympath: super::super::super::Foundation::PWSTR, node: super::super::super::Foundation::PWSTR, file: super::super::super::Foundation::PWSTR) -> super::super::super::Foundation::PWSTR;
        }
        ::std::mem::transmute(SymSrvGetSupplementW(hprocess.into_param().abi(), sympath.into_param().abi(), node.into_param().abi(), file.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSrvIsStore<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, path: Param1) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSrvIsStore(hprocess: super::super::super::Foundation::HANDLE, path: super::super::super::Foundation::PSTR) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymSrvIsStore(hprocess.into_param().abi(), path.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSrvIsStoreW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, path: Param1) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSrvIsStoreW(hprocess: super::super::super::Foundation::HANDLE, path: super::super::super::Foundation::PWSTR) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymSrvIsStoreW(hprocess.into_param().abi(), path.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSrvStoreFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, srvpath: Param1, file: Param2, flags: SYM_SRV_STORE_FILE_FLAGS) -> super::super::super::Foundation::PSTR {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSrvStoreFile(hprocess: super::super::super::Foundation::HANDLE, srvpath: super::super::super::Foundation::PSTR, file: super::super::super::Foundation::PSTR, flags: SYM_SRV_STORE_FILE_FLAGS) -> super::super::super::Foundation::PSTR;
        }
        ::std::mem::transmute(SymSrvStoreFile(hprocess.into_param().abi(), srvpath.into_param().abi(), file.into_param().abi(), ::std::mem::transmute(flags)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSrvStoreFileW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, srvpath: Param1, file: Param2, flags: SYM_SRV_STORE_FILE_FLAGS) -> super::super::super::Foundation::PWSTR {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSrvStoreFileW(hprocess: super::super::super::Foundation::HANDLE, srvpath: super::super::super::Foundation::PWSTR, file: super::super::super::Foundation::PWSTR, flags: SYM_SRV_STORE_FILE_FLAGS) -> super::super::super::Foundation::PWSTR;
        }
        ::std::mem::transmute(SymSrvStoreFileW(hprocess.into_param().abi(), srvpath.into_param().abi(), file.into_param().abi(), ::std::mem::transmute(flags)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSrvStoreSupplement<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(hprocess: Param0, srvpath: Param1, node: Param2, file: Param3, flags: u32) -> super::super::super::Foundation::PSTR {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSrvStoreSupplement(hprocess: super::super::super::Foundation::HANDLE, srvpath: super::super::super::Foundation::PSTR, node: super::super::super::Foundation::PSTR, file: super::super::super::Foundation::PSTR, flags: u32) -> super::super::super::Foundation::PSTR;
        }
        ::std::mem::transmute(SymSrvStoreSupplement(hprocess.into_param().abi(), srvpath.into_param().abi(), node.into_param().abi(), file.into_param().abi(), ::std::mem::transmute(flags)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymSrvStoreSupplementW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param2: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>, Param3: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(hprocess: Param0, sympath: Param1, node: Param2, file: Param3, flags: u32) -> super::super::super::Foundation::PWSTR {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymSrvStoreSupplementW(hprocess: super::super::super::Foundation::HANDLE, sympath: super::super::super::Foundation::PWSTR, node: super::super::super::Foundation::PWSTR, file: super::super::super::Foundation::PWSTR, flags: u32) -> super::super::super::Foundation::PWSTR;
        }
        ::std::mem::transmute(SymSrvStoreSupplementW(hprocess.into_param().abi(), sympath.into_param().abi(), node.into_param().abi(), file.into_param().abi(), ::std::mem::transmute(flags)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "x86")]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymUnDName(sym: *const IMAGEHLP_SYMBOL, undecname: super::super::super::Foundation::PSTR, undecnamelength: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymUnDName(sym: *const IMAGEHLP_SYMBOL, undecname: super::super::super::Foundation::PSTR, undecnamelength: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymUnDName(::std::mem::transmute(sym), ::std::mem::transmute(undecname), ::std::mem::transmute(undecnamelength)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymUnDName64(sym: *const IMAGEHLP_SYMBOL64, undecname: super::super::super::Foundation::PSTR, undecnamelength: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymUnDName64(sym: *const IMAGEHLP_SYMBOL64, undecname: super::super::super::Foundation::PSTR, undecnamelength: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymUnDName64(::std::mem::transmute(sym), ::std::mem::transmute(undecname), ::std::mem::transmute(undecnamelength)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(target_arch = "x86")]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymUnloadModule<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, baseofdll: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymUnloadModule(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymUnloadModule(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn SymUnloadModule64<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, baseofdll: u64) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SymUnloadModule64(hprocess: super::super::super::Foundation::HANDLE, baseofdll: u64) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(SymUnloadModule64(hprocess.into_param().abi(), ::std::mem::transmute(baseofdll)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct SymbolKind(pub i32);
pub const Symbol: SymbolKind = SymbolKind(0i32);
pub const SymbolModule: SymbolKind = SymbolKind(1i32);
pub const SymbolType: SymbolKind = SymbolKind(2i32);
pub const SymbolField: SymbolKind = SymbolKind(3i32);
pub const SymbolConstant: SymbolKind = SymbolKind(4i32);
pub const SymbolData: SymbolKind = SymbolKind(5i32);
pub const SymbolBaseClass: SymbolKind = SymbolKind(6i32);
pub const SymbolPublic: SymbolKind = SymbolKind(7i32);
pub const SymbolFunction: SymbolKind = SymbolKind(8i32);
impl ::std::convert::From<i32> for SymbolKind {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SymbolKind {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct SymbolSearchOptions(pub i32);
pub const SymbolSearchNone: SymbolSearchOptions = SymbolSearchOptions(0i32);
pub const SymbolSearchCompletion: SymbolSearchOptions = SymbolSearchOptions(1i32);
pub const SymbolSearchCaseInsensitive: SymbolSearchOptions = SymbolSearchOptions(2i32);
impl ::std::convert::From<i32> for SymbolSearchOptions {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SymbolSearchOptions {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct TEXT_DOCUMENT_ARRAY {
    pub dwCount: u32,
    pub Members: *mut ::std::option::Option<IDebugDocumentText>,
}
impl TEXT_DOCUMENT_ARRAY {}
impl ::std::default::Default for TEXT_DOCUMENT_ARRAY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for TEXT_DOCUMENT_ARRAY {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("TEXT_DOCUMENT_ARRAY").field("dwCount", &self.dwCount).field("Members", &self.Members).finish()
    }
}
impl ::std::cmp::PartialEq for TEXT_DOCUMENT_ARRAY {
    fn eq(&self, other: &Self) -> bool {
        self.dwCount == other.dwCount && self.Members == other.Members
    }
}
impl ::std::cmp::Eq for TEXT_DOCUMENT_ARRAY {}
unsafe impl ::windows::runtime::Abi for TEXT_DOCUMENT_ARRAY {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const TEXT_DOC_ATTR_READONLY: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const TEXT_DOC_ATTR_TYPE_PRIMARY: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const TEXT_DOC_ATTR_TYPE_SCRIPT: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const TEXT_DOC_ATTR_TYPE_WORKER: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const THREAD_BLOCKED: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct THREAD_ERROR_MODE(pub u32);
pub const SEM_ALL_ERRORS: THREAD_ERROR_MODE = THREAD_ERROR_MODE(0u32);
pub const SEM_FAILCRITICALERRORS: THREAD_ERROR_MODE = THREAD_ERROR_MODE(1u32);
pub const SEM_NOGPFAULTERRORBOX: THREAD_ERROR_MODE = THREAD_ERROR_MODE(2u32);
pub const SEM_NOOPENFILEERRORBOX: THREAD_ERROR_MODE = THREAD_ERROR_MODE(32768u32);
pub const SEM_NOALIGNMENTFAULTEXCEPT: THREAD_ERROR_MODE = THREAD_ERROR_MODE(4u32);
impl ::std::convert::From<u32> for THREAD_ERROR_MODE {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for THREAD_ERROR_MODE {
    type Abi = Self;
}
impl ::std::ops::BitOr for THREAD_ERROR_MODE {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for THREAD_ERROR_MODE {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for THREAD_ERROR_MODE {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for THREAD_ERROR_MODE {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for THREAD_ERROR_MODE {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const THREAD_OUT_OF_CONTEXT: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const THREAD_STATE_RUNNING: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const THREAD_STATE_SUSPENDED: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct THREAD_WRITE_FLAGS(pub i32);
pub const ThreadWriteThread: THREAD_WRITE_FLAGS = THREAD_WRITE_FLAGS(1i32);
pub const ThreadWriteStack: THREAD_WRITE_FLAGS = THREAD_WRITE_FLAGS(2i32);
pub const ThreadWriteContext: THREAD_WRITE_FLAGS = THREAD_WRITE_FLAGS(4i32);
pub const ThreadWriteBackingStore: THREAD_WRITE_FLAGS = THREAD_WRITE_FLAGS(8i32);
pub const ThreadWriteInstructionWindow: THREAD_WRITE_FLAGS = THREAD_WRITE_FLAGS(16i32);
pub const ThreadWriteThreadData: THREAD_WRITE_FLAGS = THREAD_WRITE_FLAGS(32i32);
pub const ThreadWriteThreadInfo: THREAD_WRITE_FLAGS = THREAD_WRITE_FLAGS(64i32);
impl ::std::convert::From<i32> for THREAD_WRITE_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for THREAD_WRITE_FLAGS {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct TI_FINDCHILDREN_PARAMS {
    pub Count: u32,
    pub Start: u32,
    pub ChildId: [u32; 1],
}
impl TI_FINDCHILDREN_PARAMS {}
impl ::std::default::Default for TI_FINDCHILDREN_PARAMS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for TI_FINDCHILDREN_PARAMS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("TI_FINDCHILDREN_PARAMS").field("Count", &self.Count).field("Start", &self.Start).field("ChildId", &self.ChildId).finish()
    }
}
impl ::std::cmp::PartialEq for TI_FINDCHILDREN_PARAMS {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Start == other.Start && self.ChildId == other.ChildId
    }
}
impl ::std::cmp::Eq for TI_FINDCHILDREN_PARAMS {}
unsafe impl ::windows::runtime::Abi for TI_FINDCHILDREN_PARAMS {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct TRANSLATE_VIRTUAL_TO_PHYSICAL {
    pub Virtual: u64,
    pub Physical: u64,
}
impl TRANSLATE_VIRTUAL_TO_PHYSICAL {}
impl ::std::default::Default for TRANSLATE_VIRTUAL_TO_PHYSICAL {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for TRANSLATE_VIRTUAL_TO_PHYSICAL {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("TRANSLATE_VIRTUAL_TO_PHYSICAL").field("Virtual", &self.Virtual).field("Physical", &self.Physical).finish()
    }
}
impl ::std::cmp::PartialEq for TRANSLATE_VIRTUAL_TO_PHYSICAL {
    fn eq(&self, other: &Self) -> bool {
        self.Virtual == other.Virtual && self.Physical == other.Physical
    }
}
impl ::std::cmp::Eq for TRANSLATE_VIRTUAL_TO_PHYSICAL {}
unsafe impl ::windows::runtime::Abi for TRANSLATE_VIRTUAL_TO_PHYSICAL {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[inline]
pub unsafe fn TerminateProcessOnMemoryExhaustion(failedallocationsize: usize) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn TerminateProcessOnMemoryExhaustion(failedallocationsize: usize);
        }
        ::std::mem::transmute(TerminateProcessOnMemoryExhaustion(::std::mem::transmute(failedallocationsize)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn TouchFileTimes<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(filehandle: Param0, psystemtime: *const super::super::super::Foundation::SYSTEMTIME) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn TouchFileTimes(filehandle: super::super::super::Foundation::HANDLE, psystemtime: *const super::super::super::Foundation::SYSTEMTIME) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(TouchFileTimes(filehandle.into_param().abi(), ::std::mem::transmute(psystemtime)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct TypeKind(pub i32);
pub const TypeUDT: TypeKind = TypeKind(0i32);
pub const TypePointer: TypeKind = TypeKind(1i32);
pub const TypeMemberPointer: TypeKind = TypeKind(2i32);
pub const TypeArray: TypeKind = TypeKind(3i32);
pub const TypeFunction: TypeKind = TypeKind(4i32);
pub const TypeTypedef: TypeKind = TypeKind(5i32);
pub const TypeEnum: TypeKind = TypeKind(6i32);
pub const TypeIntrinsic: TypeKind = TypeKind(7i32);
pub const TypeExtendedArray: TypeKind = TypeKind(8i32);
impl ::std::convert::From<i32> for TypeKind {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for TypeKind {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const UNAVAILABLE_ERROR: u32 = 12u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const UNDNAME_32_BIT_DECODE: u32 = 2048u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const UNDNAME_COMPLETE: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const UNDNAME_NAME_ONLY: u32 = 4096u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const UNDNAME_NO_ACCESS_SPECIFIERS: u32 = 128u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const UNDNAME_NO_ALLOCATION_LANGUAGE: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const UNDNAME_NO_ALLOCATION_MODEL: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const UNDNAME_NO_ARGUMENTS: u32 = 8192u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const UNDNAME_NO_CV_THISTYPE: u32 = 64u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const UNDNAME_NO_FUNCTION_RETURNS: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const UNDNAME_NO_LEADING_UNDERSCORES: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const UNDNAME_NO_MEMBER_TYPE: u32 = 512u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const UNDNAME_NO_MS_KEYWORDS: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const UNDNAME_NO_MS_THISTYPE: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const UNDNAME_NO_RETURN_UDT_MODEL: u32 = 1024u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const UNDNAME_NO_SPECIAL_SYMS: u32 = 16384u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const UNDNAME_NO_THISTYPE: u32 = 96u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const UNDNAME_NO_THROW_SIGNATURES: u32 = 256u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct UNLOAD_DLL_DEBUG_INFO {
    pub lpBaseOfDll: *mut ::std::ffi::c_void,
}
impl UNLOAD_DLL_DEBUG_INFO {}
impl ::std::default::Default for UNLOAD_DLL_DEBUG_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for UNLOAD_DLL_DEBUG_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("UNLOAD_DLL_DEBUG_INFO").field("lpBaseOfDll", &self.lpBaseOfDll).finish()
    }
}
impl ::std::cmp::PartialEq for UNLOAD_DLL_DEBUG_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.lpBaseOfDll == other.lpBaseOfDll
    }
}
impl ::std::cmp::Eq for UNLOAD_DLL_DEBUG_INFO {}
unsafe impl ::windows::runtime::Abi for UNLOAD_DLL_DEBUG_INFO {
    type Abi = Self;
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn UnDecorateSymbolName<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(name: Param0, outputstring: super::super::super::Foundation::PSTR, maxstringlength: u32, flags: u32) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn UnDecorateSymbolName(name: super::super::super::Foundation::PSTR, outputstring: super::super::super::Foundation::PSTR, maxstringlength: u32, flags: u32) -> u32;
        }
        ::std::mem::transmute(UnDecorateSymbolName(name.into_param().abi(), ::std::mem::transmute(outputstring), ::std::mem::transmute(maxstringlength), ::std::mem::transmute(flags)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn UnDecorateSymbolNameW<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PWSTR>>(name: Param0, outputstring: super::super::super::Foundation::PWSTR, maxstringlength: u32, flags: u32) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn UnDecorateSymbolNameW(name: super::super::super::Foundation::PWSTR, outputstring: super::super::super::Foundation::PWSTR, maxstringlength: u32, flags: u32) -> u32;
        }
        ::std::mem::transmute(UnDecorateSymbolNameW(name.into_param().abi(), ::std::mem::transmute(outputstring), ::std::mem::transmute(maxstringlength), ::std::mem::transmute(flags)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_Kernel`*"]
#[inline]
pub unsafe fn UnMapAndLoad(loadedimage: *mut LOADED_IMAGE) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn UnMapAndLoad(loadedimage: *mut LOADED_IMAGE) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(UnMapAndLoad(::std::mem::transmute(loadedimage)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn UnhandledExceptionFilter(exceptioninfo: *const EXCEPTION_POINTERS) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn UnhandledExceptionFilter(exceptioninfo: *const EXCEPTION_POINTERS) -> i32;
        }
        ::std::mem::transmute(UnhandledExceptionFilter(::std::mem::transmute(exceptioninfo)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub type UnregisterAuthoringClientFunctionType = unsafe extern "system" fn(host: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT;
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn UpdateDebugInfoFile<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(imagefilename: Param0, symbolpath: Param1, debugfilepath: super::super::super::Foundation::PSTR, ntheaders: *const IMAGE_NT_HEADERS32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn UpdateDebugInfoFile(imagefilename: super::super::super::Foundation::PSTR, symbolpath: super::super::super::Foundation::PSTR, debugfilepath: super::super::super::Foundation::PSTR, ntheaders: *const IMAGE_NT_HEADERS32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(UpdateDebugInfoFile(imagefilename.into_param().abi(), symbolpath.into_param().abi(), ::std::mem::transmute(debugfilepath), ::std::mem::transmute(ntheaders)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn UpdateDebugInfoFileEx<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>, Param1: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::PSTR>>(imagefilename: Param0, symbolpath: Param1, debugfilepath: super::super::super::Foundation::PSTR, ntheaders: *const IMAGE_NT_HEADERS32, oldchecksum: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn UpdateDebugInfoFileEx(imagefilename: super::super::super::Foundation::PSTR, symbolpath: super::super::super::Foundation::PSTR, debugfilepath: super::super::super::Foundation::PSTR, ntheaders: *const IMAGE_NT_HEADERS32, oldchecksum: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(UpdateDebugInfoFileEx(imagefilename.into_param().abi(), symbolpath.into_param().abi(), ::std::mem::transmute(debugfilepath), ::std::mem::transmute(ntheaders), ::std::mem::transmute(oldchecksum)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct VER_PLATFORM(pub u32);
pub const VER_PLATFORM_WIN32s: VER_PLATFORM = VER_PLATFORM(0u32);
pub const VER_PLATFORM_WIN32_WINDOWS: VER_PLATFORM = VER_PLATFORM(1u32);
pub const VER_PLATFORM_WIN32_NT: VER_PLATFORM = VER_PLATFORM(2u32);
impl ::std::convert::From<u32> for VER_PLATFORM {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for VER_PLATFORM {
    type Abi = Self;
}
impl ::std::ops::BitOr for VER_PLATFORM {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for VER_PLATFORM {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for VER_PLATFORM {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for VER_PLATFORM {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for VER_PLATFORM {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct VIRTUAL_TO_PHYSICAL {
    pub Status: u32,
    pub Size: u32,
    pub PdeAddress: u64,
    pub Virtual: u64,
    pub Physical: u64,
}
impl VIRTUAL_TO_PHYSICAL {}
impl ::std::default::Default for VIRTUAL_TO_PHYSICAL {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for VIRTUAL_TO_PHYSICAL {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("VIRTUAL_TO_PHYSICAL").field("Status", &self.Status).field("Size", &self.Size).field("PdeAddress", &self.PdeAddress).field("Virtual", &self.Virtual).field("Physical", &self.Physical).finish()
    }
}
impl ::std::cmp::PartialEq for VIRTUAL_TO_PHYSICAL {
    fn eq(&self, other: &Self) -> bool {
        self.Status == other.Status && self.Size == other.Size && self.PdeAddress == other.PdeAddress && self.Virtual == other.Virtual && self.Physical == other.Physical
    }
}
impl ::std::cmp::Eq for VIRTUAL_TO_PHYSICAL {}
unsafe impl ::windows::runtime::Abi for VIRTUAL_TO_PHYSICAL {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct VarArgsKind(pub i32);
pub const VarArgsNone: VarArgsKind = VarArgsKind(0i32);
pub const VarArgsCStyle: VarArgsKind = VarArgsKind(1i32);
impl ::std::convert::From<i32> for VarArgsKind {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for VarArgsKind {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct WAITCHAIN_NODE_INFO {
    pub ObjectType: WCT_OBJECT_TYPE,
    pub ObjectStatus: WCT_OBJECT_STATUS,
    pub Anonymous: WAITCHAIN_NODE_INFO_0,
}
#[cfg(feature = "Win32_Foundation")]
impl WAITCHAIN_NODE_INFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for WAITCHAIN_NODE_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for WAITCHAIN_NODE_INFO {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for WAITCHAIN_NODE_INFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for WAITCHAIN_NODE_INFO {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub union WAITCHAIN_NODE_INFO_0 {
    pub LockObject: WAITCHAIN_NODE_INFO_0_0,
    pub ThreadObject: WAITCHAIN_NODE_INFO_0_1,
}
#[cfg(feature = "Win32_Foundation")]
impl WAITCHAIN_NODE_INFO_0 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for WAITCHAIN_NODE_INFO_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for WAITCHAIN_NODE_INFO_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for WAITCHAIN_NODE_INFO_0 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for WAITCHAIN_NODE_INFO_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct WAITCHAIN_NODE_INFO_0_0 {
    pub ObjectName: [u16; 128],
    pub Timeout: i64,
    pub Alertable: super::super::super::Foundation::BOOL,
}
#[cfg(feature = "Win32_Foundation")]
impl WAITCHAIN_NODE_INFO_0_0 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for WAITCHAIN_NODE_INFO_0_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for WAITCHAIN_NODE_INFO_0_0 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_LockObject_e__Struct").field("ObjectName", &self.ObjectName).field("Timeout", &self.Timeout).field("Alertable", &self.Alertable).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for WAITCHAIN_NODE_INFO_0_0 {
    fn eq(&self, other: &Self) -> bool {
        self.ObjectName == other.ObjectName && self.Timeout == other.Timeout && self.Alertable == other.Alertable
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for WAITCHAIN_NODE_INFO_0_0 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for WAITCHAIN_NODE_INFO_0_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WAITCHAIN_NODE_INFO_0_1 {
    pub ProcessId: u32,
    pub ThreadId: u32,
    pub WaitTime: u32,
    pub ContextSwitches: u32,
}
impl WAITCHAIN_NODE_INFO_0_1 {}
impl ::std::default::Default for WAITCHAIN_NODE_INFO_0_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for WAITCHAIN_NODE_INFO_0_1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_ThreadObject_e__Struct").field("ProcessId", &self.ProcessId).field("ThreadId", &self.ThreadId).field("WaitTime", &self.WaitTime).field("ContextSwitches", &self.ContextSwitches).finish()
    }
}
impl ::std::cmp::PartialEq for WAITCHAIN_NODE_INFO_0_1 {
    fn eq(&self, other: &Self) -> bool {
        self.ProcessId == other.ProcessId && self.ThreadId == other.ThreadId && self.WaitTime == other.WaitTime && self.ContextSwitches == other.ContextSwitches
    }
}
impl ::std::cmp::Eq for WAITCHAIN_NODE_INFO_0_1 {}
unsafe impl ::windows::runtime::Abi for WAITCHAIN_NODE_INFO_0_1 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct WAIT_CHAIN_THREAD_OPTIONS(pub u32);
pub const WCT_OUT_OF_PROC_COM_FLAG: WAIT_CHAIN_THREAD_OPTIONS = WAIT_CHAIN_THREAD_OPTIONS(2u32);
pub const WCT_OUT_OF_PROC_CS_FLAG: WAIT_CHAIN_THREAD_OPTIONS = WAIT_CHAIN_THREAD_OPTIONS(4u32);
pub const WCT_OUT_OF_PROC_FLAG: WAIT_CHAIN_THREAD_OPTIONS = WAIT_CHAIN_THREAD_OPTIONS(1u32);
impl ::std::convert::From<u32> for WAIT_CHAIN_THREAD_OPTIONS {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for WAIT_CHAIN_THREAD_OPTIONS {
    type Abi = Self;
}
impl ::std::ops::BitOr for WAIT_CHAIN_THREAD_OPTIONS {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for WAIT_CHAIN_THREAD_OPTIONS {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for WAIT_CHAIN_THREAD_OPTIONS {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for WAIT_CHAIN_THREAD_OPTIONS {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for WAIT_CHAIN_THREAD_OPTIONS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WCT_MAX_NODE_COUNT: u32 = 16u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WCT_NETWORK_IO_FLAG: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct WCT_OBJECT_STATUS(pub i32);
pub const WctStatusNoAccess: WCT_OBJECT_STATUS = WCT_OBJECT_STATUS(1i32);
pub const WctStatusRunning: WCT_OBJECT_STATUS = WCT_OBJECT_STATUS(2i32);
pub const WctStatusBlocked: WCT_OBJECT_STATUS = WCT_OBJECT_STATUS(3i32);
pub const WctStatusPidOnly: WCT_OBJECT_STATUS = WCT_OBJECT_STATUS(4i32);
pub const WctStatusPidOnlyRpcss: WCT_OBJECT_STATUS = WCT_OBJECT_STATUS(5i32);
pub const WctStatusOwned: WCT_OBJECT_STATUS = WCT_OBJECT_STATUS(6i32);
pub const WctStatusNotOwned: WCT_OBJECT_STATUS = WCT_OBJECT_STATUS(7i32);
pub const WctStatusAbandoned: WCT_OBJECT_STATUS = WCT_OBJECT_STATUS(8i32);
pub const WctStatusUnknown: WCT_OBJECT_STATUS = WCT_OBJECT_STATUS(9i32);
pub const WctStatusError: WCT_OBJECT_STATUS = WCT_OBJECT_STATUS(10i32);
pub const WctStatusMax: WCT_OBJECT_STATUS = WCT_OBJECT_STATUS(11i32);
impl ::std::convert::From<i32> for WCT_OBJECT_STATUS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for WCT_OBJECT_STATUS {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct WCT_OBJECT_TYPE(pub i32);
pub const WctCriticalSectionType: WCT_OBJECT_TYPE = WCT_OBJECT_TYPE(1i32);
pub const WctSendMessageType: WCT_OBJECT_TYPE = WCT_OBJECT_TYPE(2i32);
pub const WctMutexType: WCT_OBJECT_TYPE = WCT_OBJECT_TYPE(3i32);
pub const WctAlpcType: WCT_OBJECT_TYPE = WCT_OBJECT_TYPE(4i32);
pub const WctComType: WCT_OBJECT_TYPE = WCT_OBJECT_TYPE(5i32);
pub const WctThreadWaitType: WCT_OBJECT_TYPE = WCT_OBJECT_TYPE(6i32);
pub const WctProcessWaitType: WCT_OBJECT_TYPE = WCT_OBJECT_TYPE(7i32);
pub const WctThreadType: WCT_OBJECT_TYPE = WCT_OBJECT_TYPE(8i32);
pub const WctComActivationType: WCT_OBJECT_TYPE = WCT_OBJECT_TYPE(9i32);
pub const WctUnknownType: WCT_OBJECT_TYPE = WCT_OBJECT_TYPE(10i32);
pub const WctSocketIoType: WCT_OBJECT_TYPE = WCT_OBJECT_TYPE(11i32);
pub const WctSmbIoType: WCT_OBJECT_TYPE = WCT_OBJECT_TYPE(12i32);
pub const WctMaxType: WCT_OBJECT_TYPE = WCT_OBJECT_TYPE(13i32);
impl ::std::convert::From<i32> for WCT_OBJECT_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for WCT_OBJECT_TYPE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WCT_OBJNAME_LENGTH: u32 = 128u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WDBGEXTS_ADDRESS_DEFAULT: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WDBGEXTS_ADDRESS_RESERVED0: u32 = 2147483648u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WDBGEXTS_ADDRESS_SEG16: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WDBGEXTS_ADDRESS_SEG32: u32 = 2u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WDBGEXTS_CLR_DATA_INTERFACE {
    pub Iid: *mut ::windows::runtime::GUID,
    pub Iface: *mut ::std::ffi::c_void,
}
impl WDBGEXTS_CLR_DATA_INTERFACE {}
impl ::std::default::Default for WDBGEXTS_CLR_DATA_INTERFACE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for WDBGEXTS_CLR_DATA_INTERFACE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("WDBGEXTS_CLR_DATA_INTERFACE").field("Iid", &self.Iid).field("Iface", &self.Iface).finish()
    }
}
impl ::std::cmp::PartialEq for WDBGEXTS_CLR_DATA_INTERFACE {
    fn eq(&self, other: &Self) -> bool {
        self.Iid == other.Iid && self.Iface == other.Iface
    }
}
impl ::std::cmp::Eq for WDBGEXTS_CLR_DATA_INTERFACE {}
unsafe impl ::windows::runtime::Abi for WDBGEXTS_CLR_DATA_INTERFACE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct WDBGEXTS_DISASSEMBLE_BUFFER {
    pub InOffset: u64,
    pub OutOffset: u64,
    pub AddrFlags: u32,
    pub FormatFlags: u32,
    pub DataBufferBytes: u32,
    pub DisasmBufferChars: u32,
    pub DataBuffer: *mut ::std::ffi::c_void,
    pub DisasmBuffer: super::super::super::Foundation::PWSTR,
    pub Reserved0: [u64; 3],
}
#[cfg(feature = "Win32_Foundation")]
impl WDBGEXTS_DISASSEMBLE_BUFFER {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for WDBGEXTS_DISASSEMBLE_BUFFER {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for WDBGEXTS_DISASSEMBLE_BUFFER {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("WDBGEXTS_DISASSEMBLE_BUFFER")
            .field("InOffset", &self.InOffset)
            .field("OutOffset", &self.OutOffset)
            .field("AddrFlags", &self.AddrFlags)
            .field("FormatFlags", &self.FormatFlags)
            .field("DataBufferBytes", &self.DataBufferBytes)
            .field("DisasmBufferChars", &self.DisasmBufferChars)
            .field("DataBuffer", &self.DataBuffer)
            .field("DisasmBuffer", &self.DisasmBuffer)
            .field("Reserved0", &self.Reserved0)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for WDBGEXTS_DISASSEMBLE_BUFFER {
    fn eq(&self, other: &Self) -> bool {
        self.InOffset == other.InOffset && self.OutOffset == other.OutOffset && self.AddrFlags == other.AddrFlags && self.FormatFlags == other.FormatFlags && self.DataBufferBytes == other.DataBufferBytes && self.DisasmBufferChars == other.DisasmBufferChars && self.DataBuffer == other.DataBuffer && self.DisasmBuffer == other.DisasmBuffer && self.Reserved0 == other.Reserved0
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for WDBGEXTS_DISASSEMBLE_BUFFER {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for WDBGEXTS_DISASSEMBLE_BUFFER {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WDBGEXTS_MODULE_IN_RANGE {
    pub Start: u64,
    pub End: u64,
    pub FoundModBase: u64,
    pub FoundModSize: u32,
}
impl WDBGEXTS_MODULE_IN_RANGE {}
impl ::std::default::Default for WDBGEXTS_MODULE_IN_RANGE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for WDBGEXTS_MODULE_IN_RANGE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("WDBGEXTS_MODULE_IN_RANGE").field("Start", &self.Start).field("End", &self.End).field("FoundModBase", &self.FoundModBase).field("FoundModSize", &self.FoundModSize).finish()
    }
}
impl ::std::cmp::PartialEq for WDBGEXTS_MODULE_IN_RANGE {
    fn eq(&self, other: &Self) -> bool {
        self.Start == other.Start && self.End == other.End && self.FoundModBase == other.FoundModBase && self.FoundModSize == other.FoundModSize
    }
}
impl ::std::cmp::Eq for WDBGEXTS_MODULE_IN_RANGE {}
unsafe impl ::windows::runtime::Abi for WDBGEXTS_MODULE_IN_RANGE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WDBGEXTS_QUERY_INTERFACE {
    pub Iid: *mut ::windows::runtime::GUID,
    pub Iface: *mut ::std::ffi::c_void,
}
impl WDBGEXTS_QUERY_INTERFACE {}
impl ::std::default::Default for WDBGEXTS_QUERY_INTERFACE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for WDBGEXTS_QUERY_INTERFACE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("WDBGEXTS_QUERY_INTERFACE").field("Iid", &self.Iid).field("Iface", &self.Iface).finish()
    }
}
impl ::std::cmp::PartialEq for WDBGEXTS_QUERY_INTERFACE {
    fn eq(&self, other: &Self) -> bool {
        self.Iid == other.Iid && self.Iface == other.Iface
    }
}
impl ::std::cmp::Eq for WDBGEXTS_QUERY_INTERFACE {}
unsafe impl ::windows::runtime::Abi for WDBGEXTS_QUERY_INTERFACE {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WDBGEXTS_THREAD_OS_INFO {
    pub ThreadId: u32,
    pub ExitStatus: u32,
    pub PriorityClass: u32,
    pub Priority: u32,
    pub CreateTime: u64,
    pub ExitTime: u64,
    pub KernelTime: u64,
    pub UserTime: u64,
    pub StartOffset: u64,
    pub Affinity: u64,
}
impl WDBGEXTS_THREAD_OS_INFO {}
impl ::std::default::Default for WDBGEXTS_THREAD_OS_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for WDBGEXTS_THREAD_OS_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("WDBGEXTS_THREAD_OS_INFO")
            .field("ThreadId", &self.ThreadId)
            .field("ExitStatus", &self.ExitStatus)
            .field("PriorityClass", &self.PriorityClass)
            .field("Priority", &self.Priority)
            .field("CreateTime", &self.CreateTime)
            .field("ExitTime", &self.ExitTime)
            .field("KernelTime", &self.KernelTime)
            .field("UserTime", &self.UserTime)
            .field("StartOffset", &self.StartOffset)
            .field("Affinity", &self.Affinity)
            .finish()
    }
}
impl ::std::cmp::PartialEq for WDBGEXTS_THREAD_OS_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.ThreadId == other.ThreadId && self.ExitStatus == other.ExitStatus && self.PriorityClass == other.PriorityClass && self.Priority == other.Priority && self.CreateTime == other.CreateTime && self.ExitTime == other.ExitTime && self.KernelTime == other.KernelTime && self.UserTime == other.UserTime && self.StartOffset == other.StartOffset && self.Affinity == other.Affinity
    }
}
impl ::std::cmp::Eq for WDBGEXTS_THREAD_OS_INFO {}
unsafe impl ::windows::runtime::Abi for WDBGEXTS_THREAD_OS_INFO {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct WHEA_AER_BRIDGE_DESCRIPTOR {
    pub Type: u16,
    pub Enabled: super::super::super::Foundation::BOOLEAN,
    pub Reserved: u8,
    pub BusNumber: u32,
    pub Slot: WHEA_PCI_SLOT_NUMBER,
    pub DeviceControl: u16,
    pub Flags: AER_BRIDGE_DESCRIPTOR_FLAGS,
    pub UncorrectableErrorMask: u32,
    pub UncorrectableErrorSeverity: u32,
    pub CorrectableErrorMask: u32,
    pub AdvancedCapsAndControl: u32,
    pub SecondaryUncorrectableErrorMask: u32,
    pub SecondaryUncorrectableErrorSev: u32,
    pub SecondaryCapsAndControl: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl WHEA_AER_BRIDGE_DESCRIPTOR {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for WHEA_AER_BRIDGE_DESCRIPTOR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for WHEA_AER_BRIDGE_DESCRIPTOR {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for WHEA_AER_BRIDGE_DESCRIPTOR {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for WHEA_AER_BRIDGE_DESCRIPTOR {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct WHEA_AER_ENDPOINT_DESCRIPTOR {
    pub Type: u16,
    pub Enabled: super::super::super::Foundation::BOOLEAN,
    pub Reserved: u8,
    pub BusNumber: u32,
    pub Slot: WHEA_PCI_SLOT_NUMBER,
    pub DeviceControl: u16,
    pub Flags: AER_ENDPOINT_DESCRIPTOR_FLAGS,
    pub UncorrectableErrorMask: u32,
    pub UncorrectableErrorSeverity: u32,
    pub CorrectableErrorMask: u32,
    pub AdvancedCapsAndControl: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl WHEA_AER_ENDPOINT_DESCRIPTOR {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for WHEA_AER_ENDPOINT_DESCRIPTOR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for WHEA_AER_ENDPOINT_DESCRIPTOR {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for WHEA_AER_ENDPOINT_DESCRIPTOR {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for WHEA_AER_ENDPOINT_DESCRIPTOR {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct WHEA_AER_ROOTPORT_DESCRIPTOR {
    pub Type: u16,
    pub Enabled: super::super::super::Foundation::BOOLEAN,
    pub Reserved: u8,
    pub BusNumber: u32,
    pub Slot: WHEA_PCI_SLOT_NUMBER,
    pub DeviceControl: u16,
    pub Flags: AER_ROOTPORT_DESCRIPTOR_FLAGS,
    pub UncorrectableErrorMask: u32,
    pub UncorrectableErrorSeverity: u32,
    pub CorrectableErrorMask: u32,
    pub AdvancedCapsAndControl: u32,
    pub RootErrorCommand: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl WHEA_AER_ROOTPORT_DESCRIPTOR {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for WHEA_AER_ROOTPORT_DESCRIPTOR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for WHEA_AER_ROOTPORT_DESCRIPTOR {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for WHEA_AER_ROOTPORT_DESCRIPTOR {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for WHEA_AER_ROOTPORT_DESCRIPTOR {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_BAD_PAGE_LIST_LOCATION: u32 = 15u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_BAD_PAGE_LIST_MAX_SIZE: u32 = 14u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_CMCI_THRESHOLD_COUNT: u32 = 10u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_CMCI_THRESHOLD_POLL_COUNT: u32 = 12u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_CMCI_THRESHOLD_TIME: u32 = 11u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_DEVICE_DRIVER_BUFFER_SET_MAX: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_DEVICE_DRIVER_BUFFER_SET_MIN: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_DEVICE_DRIVER_BUFFER_SET_V1: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_DEVICE_DRIVER_CONFIG_MAX: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_DEVICE_DRIVER_CONFIG_MIN: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_DEVICE_DRIVER_CONFIG_V1: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_DEVICE_DRIVER_CONFIG_V2: u32 = 2u32;
#[cfg(feature = "Win32_Foundation")]
impl ::std::clone::Clone for WHEA_DEVICE_DRIVER_DESCRIPTOR {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C, packed(1))]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct WHEA_DEVICE_DRIVER_DESCRIPTOR {
    pub Type: u16,
    pub Enabled: super::super::super::Foundation::BOOLEAN,
    pub Reserved: u8,
    pub SourceGuid: ::windows::runtime::GUID,
    pub LogTag: u16,
    pub Reserved2: u16,
    pub PacketLength: u32,
    pub PacketCount: u32,
    pub PacketBuffer: *mut u8,
    pub Config: WHEA_ERROR_SOURCE_CONFIGURATION_DD,
    pub CreatorId: ::windows::runtime::GUID,
    pub PartitionId: ::windows::runtime::GUID,
    pub MaxSectionDataLength: u32,
    pub MaxSectionsPerRecord: u32,
    pub PacketStateBuffer: *mut u8,
    pub OpenHandles: i32,
}
#[cfg(feature = "Win32_Foundation")]
impl WHEA_DEVICE_DRIVER_DESCRIPTOR {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for WHEA_DEVICE_DRIVER_DESCRIPTOR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for WHEA_DEVICE_DRIVER_DESCRIPTOR {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for WHEA_DEVICE_DRIVER_DESCRIPTOR {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for WHEA_DEVICE_DRIVER_DESCRIPTOR {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_DISABLE_DUMMY_WRITE: u32 = 6u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_DISABLE_OFFLINE: u32 = 0u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WHEA_DRIVER_BUFFER_SET {
    pub Version: u32,
    pub Data: *mut u8,
    pub DataSize: u32,
    pub SectionTypeGuid: *mut ::windows::runtime::GUID,
    pub SectionFriendlyName: *mut u8,
    pub Flags: *mut u8,
}
impl WHEA_DRIVER_BUFFER_SET {}
impl ::std::default::Default for WHEA_DRIVER_BUFFER_SET {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WHEA_DRIVER_BUFFER_SET {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WHEA_DRIVER_BUFFER_SET {}
unsafe impl ::windows::runtime::Abi for WHEA_DRIVER_BUFFER_SET {
    type Abi = Self;
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::clone::Clone for WHEA_ERROR_SOURCE_CONFIGURATION_DD {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C, packed(1))]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct WHEA_ERROR_SOURCE_CONFIGURATION_DD {
    pub Initialize: ::std::option::Option<WHEA_ERROR_SOURCE_INITIALIZE_DEVICE_DRIVER>,
    pub Uninitialize: ::std::option::Option<WHEA_ERROR_SOURCE_UNINITIALIZE_DEVICE_DRIVER>,
    pub Correct: ::std::option::Option<WHEA_ERROR_SOURCE_CORRECT_DEVICE_DRIVER>,
}
#[cfg(feature = "Win32_Foundation")]
impl WHEA_ERROR_SOURCE_CONFIGURATION_DD {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for WHEA_ERROR_SOURCE_CONFIGURATION_DD {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for WHEA_ERROR_SOURCE_CONFIGURATION_DD {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for WHEA_ERROR_SOURCE_CONFIGURATION_DD {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for WHEA_ERROR_SOURCE_CONFIGURATION_DD {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::clone::Clone for WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C, packed(1))]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER {
    pub Version: u32,
    pub SourceGuid: ::windows::runtime::GUID,
    pub LogTag: u16,
    pub Reserved: [u8; 6],
    pub Initialize: ::std::option::Option<WHEA_ERROR_SOURCE_INITIALIZE_DEVICE_DRIVER>,
    pub Uninitialize: ::std::option::Option<WHEA_ERROR_SOURCE_UNINITIALIZE_DEVICE_DRIVER>,
    pub MaxSectionDataLength: u32,
    pub MaxSectionsPerReport: u32,
    pub CreatorId: ::windows::runtime::GUID,
    pub PartitionId: ::windows::runtime::GUID,
}
#[cfg(feature = "Win32_Foundation")]
impl WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::clone::Clone for WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER_V1 {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C, packed(1))]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER_V1 {
    pub Version: u32,
    pub SourceGuid: ::windows::runtime::GUID,
    pub LogTag: u16,
    pub Reserved: [u8; 6],
    pub Initialize: ::std::option::Option<WHEA_ERROR_SOURCE_INITIALIZE_DEVICE_DRIVER>,
    pub Uninitialize: ::std::option::Option<WHEA_ERROR_SOURCE_UNINITIALIZE_DEVICE_DRIVER>,
}
#[cfg(feature = "Win32_Foundation")]
impl WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER_V1 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER_V1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER_V1 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER_V1 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER_V1 {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[cfg(feature = "Win32_Foundation")]
pub type WHEA_ERROR_SOURCE_CORRECT_DEVICE_DRIVER = unsafe extern "system" fn(errorsourcedesc: *mut ::std::ffi::c_void, maximumsectionlength: *mut u32) -> super::super::super::Foundation::NTSTATUS;
#[cfg(feature = "Win32_Foundation")]
impl ::std::clone::Clone for WHEA_ERROR_SOURCE_DESCRIPTOR {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C, packed(1))]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct WHEA_ERROR_SOURCE_DESCRIPTOR {
    pub Length: u32,
    pub Version: u32,
    pub Type: WHEA_ERROR_SOURCE_TYPE,
    pub State: WHEA_ERROR_SOURCE_STATE,
    pub MaxRawDataLength: u32,
    pub NumRecordsToPreallocate: u32,
    pub MaxSectionsPerRecord: u32,
    pub ErrorSourceId: u32,
    pub PlatformErrorSourceId: u32,
    pub Flags: u32,
    pub Info: WHEA_ERROR_SOURCE_DESCRIPTOR_0,
}
#[cfg(feature = "Win32_Foundation")]
impl WHEA_ERROR_SOURCE_DESCRIPTOR {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for WHEA_ERROR_SOURCE_DESCRIPTOR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for WHEA_ERROR_SOURCE_DESCRIPTOR {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for WHEA_ERROR_SOURCE_DESCRIPTOR {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for WHEA_ERROR_SOURCE_DESCRIPTOR {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::clone::Clone for WHEA_ERROR_SOURCE_DESCRIPTOR_0 {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub union WHEA_ERROR_SOURCE_DESCRIPTOR_0 {
    pub XpfMceDescriptor: WHEA_XPF_MCE_DESCRIPTOR,
    pub XpfCmcDescriptor: WHEA_XPF_CMC_DESCRIPTOR,
    pub XpfNmiDescriptor: WHEA_XPF_NMI_DESCRIPTOR,
    pub IpfMcaDescriptor: WHEA_IPF_MCA_DESCRIPTOR,
    pub IpfCmcDescriptor: WHEA_IPF_CMC_DESCRIPTOR,
    pub IpfCpeDescriptor: WHEA_IPF_CPE_DESCRIPTOR,
    pub AerRootportDescriptor: WHEA_AER_ROOTPORT_DESCRIPTOR,
    pub AerEndpointDescriptor: WHEA_AER_ENDPOINT_DESCRIPTOR,
    pub AerBridgeDescriptor: WHEA_AER_BRIDGE_DESCRIPTOR,
    pub GenErrDescriptor: WHEA_GENERIC_ERROR_DESCRIPTOR,
    pub GenErrDescriptorV2: WHEA_GENERIC_ERROR_DESCRIPTOR_V2,
    pub DeviceDriverDescriptor: ::std::mem::ManuallyDrop<WHEA_DEVICE_DRIVER_DESCRIPTOR>,
}
#[cfg(feature = "Win32_Foundation")]
impl WHEA_ERROR_SOURCE_DESCRIPTOR_0 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for WHEA_ERROR_SOURCE_DESCRIPTOR_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for WHEA_ERROR_SOURCE_DESCRIPTOR_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for WHEA_ERROR_SOURCE_DESCRIPTOR_0 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for WHEA_ERROR_SOURCE_DESCRIPTOR_0 {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_AERBRIDGE: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_AERENDPOINT: u32 = 7u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_AERROOTPORT: u32 = 6u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_GENERIC: u32 = 9u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_GENERIC_V2: u32 = 10u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_IPFCMC: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_IPFCPE: u32 = 5u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_IPFMCA: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_XPFCMC: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_XPFMCE: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_XPFNMI: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_ERROR_SOURCE_DESCRIPTOR_VERSION_10: u32 = 10u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_ERROR_SOURCE_DESCRIPTOR_VERSION_11: u32 = 11u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_ERROR_SOURCE_FLAG_DEFAULTSOURCE: u32 = 2147483648u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_ERROR_SOURCE_FLAG_FIRMWAREFIRST: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_ERROR_SOURCE_FLAG_GHES_ASSIST: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_ERROR_SOURCE_FLAG_GLOBAL: u32 = 2u32;
#[cfg(feature = "Win32_Foundation")]
pub type WHEA_ERROR_SOURCE_INITIALIZE_DEVICE_DRIVER = unsafe extern "system" fn(context: *mut ::std::ffi::c_void, errorsourceid: u32) -> super::super::super::Foundation::NTSTATUS;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_ERROR_SOURCE_INVALID_RELATED_SOURCE: u32 = 65535u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct WHEA_ERROR_SOURCE_STATE(pub i32);
pub const WheaErrSrcStateStopped: WHEA_ERROR_SOURCE_STATE = WHEA_ERROR_SOURCE_STATE(1i32);
pub const WheaErrSrcStateStarted: WHEA_ERROR_SOURCE_STATE = WHEA_ERROR_SOURCE_STATE(2i32);
pub const WheaErrSrcStateRemoved: WHEA_ERROR_SOURCE_STATE = WHEA_ERROR_SOURCE_STATE(3i32);
pub const WheaErrSrcStateRemovePending: WHEA_ERROR_SOURCE_STATE = WHEA_ERROR_SOURCE_STATE(4i32);
impl ::std::convert::From<i32> for WHEA_ERROR_SOURCE_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for WHEA_ERROR_SOURCE_STATE {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct WHEA_ERROR_SOURCE_TYPE(pub i32);
pub const WheaErrSrcTypeMCE: WHEA_ERROR_SOURCE_TYPE = WHEA_ERROR_SOURCE_TYPE(0i32);
pub const WheaErrSrcTypeCMC: WHEA_ERROR_SOURCE_TYPE = WHEA_ERROR_SOURCE_TYPE(1i32);
pub const WheaErrSrcTypeCPE: WHEA_ERROR_SOURCE_TYPE = WHEA_ERROR_SOURCE_TYPE(2i32);
pub const WheaErrSrcTypeNMI: WHEA_ERROR_SOURCE_TYPE = WHEA_ERROR_SOURCE_TYPE(3i32);
pub const WheaErrSrcTypePCIe: WHEA_ERROR_SOURCE_TYPE = WHEA_ERROR_SOURCE_TYPE(4i32);
pub const WheaErrSrcTypeGeneric: WHEA_ERROR_SOURCE_TYPE = WHEA_ERROR_SOURCE_TYPE(5i32);
pub const WheaErrSrcTypeINIT: WHEA_ERROR_SOURCE_TYPE = WHEA_ERROR_SOURCE_TYPE(6i32);
pub const WheaErrSrcTypeBOOT: WHEA_ERROR_SOURCE_TYPE = WHEA_ERROR_SOURCE_TYPE(7i32);
pub const WheaErrSrcTypeSCIGeneric: WHEA_ERROR_SOURCE_TYPE = WHEA_ERROR_SOURCE_TYPE(8i32);
pub const WheaErrSrcTypeIPFMCA: WHEA_ERROR_SOURCE_TYPE = WHEA_ERROR_SOURCE_TYPE(9i32);
pub const WheaErrSrcTypeIPFCMC: WHEA_ERROR_SOURCE_TYPE = WHEA_ERROR_SOURCE_TYPE(10i32);
pub const WheaErrSrcTypeIPFCPE: WHEA_ERROR_SOURCE_TYPE = WHEA_ERROR_SOURCE_TYPE(11i32);
pub const WheaErrSrcTypeGenericV2: WHEA_ERROR_SOURCE_TYPE = WHEA_ERROR_SOURCE_TYPE(12i32);
pub const WheaErrSrcTypeSCIGenericV2: WHEA_ERROR_SOURCE_TYPE = WHEA_ERROR_SOURCE_TYPE(13i32);
pub const WheaErrSrcTypeBMC: WHEA_ERROR_SOURCE_TYPE = WHEA_ERROR_SOURCE_TYPE(14i32);
pub const WheaErrSrcTypePMEM: WHEA_ERROR_SOURCE_TYPE = WHEA_ERROR_SOURCE_TYPE(15i32);
pub const WheaErrSrcTypeDeviceDriver: WHEA_ERROR_SOURCE_TYPE = WHEA_ERROR_SOURCE_TYPE(16i32);
pub const WheaErrSrcTypeMax: WHEA_ERROR_SOURCE_TYPE = WHEA_ERROR_SOURCE_TYPE(17i32);
impl ::std::convert::From<i32> for WHEA_ERROR_SOURCE_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for WHEA_ERROR_SOURCE_TYPE {
    type Abi = Self;
}
pub type WHEA_ERROR_SOURCE_UNINITIALIZE_DEVICE_DRIVER = unsafe extern "system" fn(context: *mut ::std::ffi::c_void);
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WHEA_GENERIC_ERROR_DESCRIPTOR {
    pub Type: u16,
    pub Reserved: u8,
    pub Enabled: u8,
    pub ErrStatusBlockLength: u32,
    pub RelatedErrorSourceId: u32,
    pub ErrStatusAddressSpaceID: u8,
    pub ErrStatusAddressBitWidth: u8,
    pub ErrStatusAddressBitOffset: u8,
    pub ErrStatusAddressAccessSize: u8,
    pub ErrStatusAddress: i64,
    pub Notify: WHEA_NOTIFICATION_DESCRIPTOR,
}
impl WHEA_GENERIC_ERROR_DESCRIPTOR {}
impl ::std::default::Default for WHEA_GENERIC_ERROR_DESCRIPTOR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WHEA_GENERIC_ERROR_DESCRIPTOR {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WHEA_GENERIC_ERROR_DESCRIPTOR {}
unsafe impl ::windows::runtime::Abi for WHEA_GENERIC_ERROR_DESCRIPTOR {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WHEA_GENERIC_ERROR_DESCRIPTOR_V2 {
    pub Type: u16,
    pub Reserved: u8,
    pub Enabled: u8,
    pub ErrStatusBlockLength: u32,
    pub RelatedErrorSourceId: u32,
    pub ErrStatusAddressSpaceID: u8,
    pub ErrStatusAddressBitWidth: u8,
    pub ErrStatusAddressBitOffset: u8,
    pub ErrStatusAddressAccessSize: u8,
    pub ErrStatusAddress: i64,
    pub Notify: WHEA_NOTIFICATION_DESCRIPTOR,
    pub ReadAckAddressSpaceID: u8,
    pub ReadAckAddressBitWidth: u8,
    pub ReadAckAddressBitOffset: u8,
    pub ReadAckAddressAccessSize: u8,
    pub ReadAckAddress: i64,
    pub ReadAckPreserveMask: u64,
    pub ReadAckWriteMask: u64,
}
impl WHEA_GENERIC_ERROR_DESCRIPTOR_V2 {}
impl ::std::default::Default for WHEA_GENERIC_ERROR_DESCRIPTOR_V2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WHEA_GENERIC_ERROR_DESCRIPTOR_V2 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WHEA_GENERIC_ERROR_DESCRIPTOR_V2 {}
unsafe impl ::windows::runtime::Abi for WHEA_GENERIC_ERROR_DESCRIPTOR_V2 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WHEA_IPF_CMC_DESCRIPTOR {
    pub Type: u16,
    pub Enabled: u8,
    pub Reserved: u8,
}
impl WHEA_IPF_CMC_DESCRIPTOR {}
impl ::std::default::Default for WHEA_IPF_CMC_DESCRIPTOR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WHEA_IPF_CMC_DESCRIPTOR {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WHEA_IPF_CMC_DESCRIPTOR {}
unsafe impl ::windows::runtime::Abi for WHEA_IPF_CMC_DESCRIPTOR {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WHEA_IPF_CPE_DESCRIPTOR {
    pub Type: u16,
    pub Enabled: u8,
    pub Reserved: u8,
}
impl WHEA_IPF_CPE_DESCRIPTOR {}
impl ::std::default::Default for WHEA_IPF_CPE_DESCRIPTOR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WHEA_IPF_CPE_DESCRIPTOR {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WHEA_IPF_CPE_DESCRIPTOR {}
unsafe impl ::windows::runtime::Abi for WHEA_IPF_CPE_DESCRIPTOR {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WHEA_IPF_MCA_DESCRIPTOR {
    pub Type: u16,
    pub Enabled: u8,
    pub Reserved: u8,
}
impl WHEA_IPF_MCA_DESCRIPTOR {}
impl ::std::default::Default for WHEA_IPF_MCA_DESCRIPTOR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WHEA_IPF_MCA_DESCRIPTOR {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WHEA_IPF_MCA_DESCRIPTOR {}
unsafe impl ::windows::runtime::Abi for WHEA_IPF_MCA_DESCRIPTOR {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_MAX_MC_BANKS: u32 = 32u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_MEM_PERSISTOFFLINE: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_MEM_PFA_DISABLE: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_MEM_PFA_PAGECOUNT: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_MEM_PFA_THRESHOLD: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_MEM_PFA_TIMEOUT: u32 = 5u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WHEA_NOTIFICATION_DESCRIPTOR {
    pub Type: u8,
    pub Length: u8,
    pub Flags: WHEA_NOTIFICATION_FLAGS,
    pub u: WHEA_NOTIFICATION_DESCRIPTOR_0,
}
impl WHEA_NOTIFICATION_DESCRIPTOR {}
impl ::std::default::Default for WHEA_NOTIFICATION_DESCRIPTOR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WHEA_NOTIFICATION_DESCRIPTOR {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WHEA_NOTIFICATION_DESCRIPTOR {}
unsafe impl ::windows::runtime::Abi for WHEA_NOTIFICATION_DESCRIPTOR {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union WHEA_NOTIFICATION_DESCRIPTOR_0 {
    pub Polled: WHEA_NOTIFICATION_DESCRIPTOR_0_4,
    pub Interrupt: WHEA_NOTIFICATION_DESCRIPTOR_0_1,
    pub LocalInterrupt: WHEA_NOTIFICATION_DESCRIPTOR_0_2,
    pub Sci: WHEA_NOTIFICATION_DESCRIPTOR_0_5,
    pub Nmi: WHEA_NOTIFICATION_DESCRIPTOR_0_3,
    pub Sea: WHEA_NOTIFICATION_DESCRIPTOR_0_6,
    pub Sei: WHEA_NOTIFICATION_DESCRIPTOR_0_7,
    pub Gsiv: WHEA_NOTIFICATION_DESCRIPTOR_0_0,
}
impl WHEA_NOTIFICATION_DESCRIPTOR_0 {}
impl ::std::default::Default for WHEA_NOTIFICATION_DESCRIPTOR_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WHEA_NOTIFICATION_DESCRIPTOR_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WHEA_NOTIFICATION_DESCRIPTOR_0 {}
unsafe impl ::windows::runtime::Abi for WHEA_NOTIFICATION_DESCRIPTOR_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WHEA_NOTIFICATION_DESCRIPTOR_0_0 {
    pub PollInterval: u32,
    pub Vector: u32,
    pub SwitchToPollingThreshold: u32,
    pub SwitchToPollingWindow: u32,
    pub ErrorThreshold: u32,
    pub ErrorThresholdWindow: u32,
}
impl WHEA_NOTIFICATION_DESCRIPTOR_0_0 {}
impl ::std::default::Default for WHEA_NOTIFICATION_DESCRIPTOR_0_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WHEA_NOTIFICATION_DESCRIPTOR_0_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WHEA_NOTIFICATION_DESCRIPTOR_0_0 {}
unsafe impl ::windows::runtime::Abi for WHEA_NOTIFICATION_DESCRIPTOR_0_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WHEA_NOTIFICATION_DESCRIPTOR_0_1 {
    pub PollInterval: u32,
    pub Vector: u32,
    pub SwitchToPollingThreshold: u32,
    pub SwitchToPollingWindow: u32,
    pub ErrorThreshold: u32,
    pub ErrorThresholdWindow: u32,
}
impl WHEA_NOTIFICATION_DESCRIPTOR_0_1 {}
impl ::std::default::Default for WHEA_NOTIFICATION_DESCRIPTOR_0_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WHEA_NOTIFICATION_DESCRIPTOR_0_1 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WHEA_NOTIFICATION_DESCRIPTOR_0_1 {}
unsafe impl ::windows::runtime::Abi for WHEA_NOTIFICATION_DESCRIPTOR_0_1 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WHEA_NOTIFICATION_DESCRIPTOR_0_2 {
    pub PollInterval: u32,
    pub Vector: u32,
    pub SwitchToPollingThreshold: u32,
    pub SwitchToPollingWindow: u32,
    pub ErrorThreshold: u32,
    pub ErrorThresholdWindow: u32,
}
impl WHEA_NOTIFICATION_DESCRIPTOR_0_2 {}
impl ::std::default::Default for WHEA_NOTIFICATION_DESCRIPTOR_0_2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WHEA_NOTIFICATION_DESCRIPTOR_0_2 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WHEA_NOTIFICATION_DESCRIPTOR_0_2 {}
unsafe impl ::windows::runtime::Abi for WHEA_NOTIFICATION_DESCRIPTOR_0_2 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WHEA_NOTIFICATION_DESCRIPTOR_0_3 {
    pub PollInterval: u32,
    pub Vector: u32,
    pub SwitchToPollingThreshold: u32,
    pub SwitchToPollingWindow: u32,
    pub ErrorThreshold: u32,
    pub ErrorThresholdWindow: u32,
}
impl WHEA_NOTIFICATION_DESCRIPTOR_0_3 {}
impl ::std::default::Default for WHEA_NOTIFICATION_DESCRIPTOR_0_3 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WHEA_NOTIFICATION_DESCRIPTOR_0_3 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WHEA_NOTIFICATION_DESCRIPTOR_0_3 {}
unsafe impl ::windows::runtime::Abi for WHEA_NOTIFICATION_DESCRIPTOR_0_3 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WHEA_NOTIFICATION_DESCRIPTOR_0_4 {
    pub PollInterval: u32,
}
impl WHEA_NOTIFICATION_DESCRIPTOR_0_4 {}
impl ::std::default::Default for WHEA_NOTIFICATION_DESCRIPTOR_0_4 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WHEA_NOTIFICATION_DESCRIPTOR_0_4 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WHEA_NOTIFICATION_DESCRIPTOR_0_4 {}
unsafe impl ::windows::runtime::Abi for WHEA_NOTIFICATION_DESCRIPTOR_0_4 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WHEA_NOTIFICATION_DESCRIPTOR_0_5 {
    pub PollInterval: u32,
    pub Vector: u32,
    pub SwitchToPollingThreshold: u32,
    pub SwitchToPollingWindow: u32,
    pub ErrorThreshold: u32,
    pub ErrorThresholdWindow: u32,
}
impl WHEA_NOTIFICATION_DESCRIPTOR_0_5 {}
impl ::std::default::Default for WHEA_NOTIFICATION_DESCRIPTOR_0_5 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WHEA_NOTIFICATION_DESCRIPTOR_0_5 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WHEA_NOTIFICATION_DESCRIPTOR_0_5 {}
unsafe impl ::windows::runtime::Abi for WHEA_NOTIFICATION_DESCRIPTOR_0_5 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WHEA_NOTIFICATION_DESCRIPTOR_0_6 {
    pub PollInterval: u32,
    pub Vector: u32,
    pub SwitchToPollingThreshold: u32,
    pub SwitchToPollingWindow: u32,
    pub ErrorThreshold: u32,
    pub ErrorThresholdWindow: u32,
}
impl WHEA_NOTIFICATION_DESCRIPTOR_0_6 {}
impl ::std::default::Default for WHEA_NOTIFICATION_DESCRIPTOR_0_6 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WHEA_NOTIFICATION_DESCRIPTOR_0_6 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WHEA_NOTIFICATION_DESCRIPTOR_0_6 {}
unsafe impl ::windows::runtime::Abi for WHEA_NOTIFICATION_DESCRIPTOR_0_6 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WHEA_NOTIFICATION_DESCRIPTOR_0_7 {
    pub PollInterval: u32,
    pub Vector: u32,
    pub SwitchToPollingThreshold: u32,
    pub SwitchToPollingWindow: u32,
    pub ErrorThreshold: u32,
    pub ErrorThresholdWindow: u32,
}
impl WHEA_NOTIFICATION_DESCRIPTOR_0_7 {}
impl ::std::default::Default for WHEA_NOTIFICATION_DESCRIPTOR_0_7 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WHEA_NOTIFICATION_DESCRIPTOR_0_7 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WHEA_NOTIFICATION_DESCRIPTOR_0_7 {}
unsafe impl ::windows::runtime::Abi for WHEA_NOTIFICATION_DESCRIPTOR_0_7 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union WHEA_NOTIFICATION_FLAGS {
    pub Anonymous: WHEA_NOTIFICATION_FLAGS_0,
    pub AsUSHORT: u16,
}
impl WHEA_NOTIFICATION_FLAGS {}
impl ::std::default::Default for WHEA_NOTIFICATION_FLAGS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WHEA_NOTIFICATION_FLAGS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WHEA_NOTIFICATION_FLAGS {}
unsafe impl ::windows::runtime::Abi for WHEA_NOTIFICATION_FLAGS {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WHEA_NOTIFICATION_FLAGS_0 {
    pub _bitfield: u16,
}
impl WHEA_NOTIFICATION_FLAGS_0 {}
impl ::std::default::Default for WHEA_NOTIFICATION_FLAGS_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WHEA_NOTIFICATION_FLAGS_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WHEA_NOTIFICATION_FLAGS_0 {}
unsafe impl ::windows::runtime::Abi for WHEA_NOTIFICATION_FLAGS_0 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_NOTIFICATION_TYPE_ARMV8_SEA: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_NOTIFICATION_TYPE_ARMV8_SEI: u32 = 9u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_NOTIFICATION_TYPE_CMCI: u32 = 5u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_NOTIFICATION_TYPE_EXTERNALINTERRUPT: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_NOTIFICATION_TYPE_EXTERNALINTERRUPT_GSIV: u32 = 10u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_NOTIFICATION_TYPE_GPIO_SIGNAL: u32 = 7u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_NOTIFICATION_TYPE_LOCALINTERRUPT: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_NOTIFICATION_TYPE_MCE: u32 = 6u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_NOTIFICATION_TYPE_NMI: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_NOTIFICATION_TYPE_POLLED: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_NOTIFICATION_TYPE_SCI: u32 = 3u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_NOTIFICATION_TYPE_SDEI: u32 = 11u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_NOTIFY_ALL_OFFLINES: u32 = 16u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WHEA_PCI_SLOT_NUMBER {
    pub u: WHEA_PCI_SLOT_NUMBER_0,
}
impl WHEA_PCI_SLOT_NUMBER {}
impl ::std::default::Default for WHEA_PCI_SLOT_NUMBER {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WHEA_PCI_SLOT_NUMBER {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WHEA_PCI_SLOT_NUMBER {}
unsafe impl ::windows::runtime::Abi for WHEA_PCI_SLOT_NUMBER {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union WHEA_PCI_SLOT_NUMBER_0 {
    pub bits: WHEA_PCI_SLOT_NUMBER_0_0,
    pub AsULONG: u32,
}
impl WHEA_PCI_SLOT_NUMBER_0 {}
impl ::std::default::Default for WHEA_PCI_SLOT_NUMBER_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WHEA_PCI_SLOT_NUMBER_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WHEA_PCI_SLOT_NUMBER_0 {}
unsafe impl ::windows::runtime::Abi for WHEA_PCI_SLOT_NUMBER_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WHEA_PCI_SLOT_NUMBER_0_0 {
    pub _bitfield: u32,
}
impl WHEA_PCI_SLOT_NUMBER_0_0 {}
impl ::std::default::Default for WHEA_PCI_SLOT_NUMBER_0_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WHEA_PCI_SLOT_NUMBER_0_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WHEA_PCI_SLOT_NUMBER_0_0 {}
unsafe impl ::windows::runtime::Abi for WHEA_PCI_SLOT_NUMBER_0_0 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_PENDING_PAGE_LIST_SZ: u32 = 13u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_RESTORE_CMCI_ATTEMPTS: u32 = 8u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_RESTORE_CMCI_ENABLED: u32 = 7u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_RESTORE_CMCI_ERR_LIMIT: u32 = 9u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct WHEA_XPF_CMC_DESCRIPTOR {
    pub Type: u16,
    pub Enabled: super::super::super::Foundation::BOOLEAN,
    pub NumberOfBanks: u8,
    pub Reserved: u32,
    pub Notify: WHEA_NOTIFICATION_DESCRIPTOR,
    pub Banks: [WHEA_XPF_MC_BANK_DESCRIPTOR; 32],
}
#[cfg(feature = "Win32_Foundation")]
impl WHEA_XPF_CMC_DESCRIPTOR {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for WHEA_XPF_CMC_DESCRIPTOR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for WHEA_XPF_CMC_DESCRIPTOR {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for WHEA_XPF_CMC_DESCRIPTOR {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for WHEA_XPF_CMC_DESCRIPTOR {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct WHEA_XPF_MCE_DESCRIPTOR {
    pub Type: u16,
    pub Enabled: u8,
    pub NumberOfBanks: u8,
    pub Flags: XPF_MCE_FLAGS,
    pub MCG_Capability: u64,
    pub MCG_GlobalControl: u64,
    pub Banks: [WHEA_XPF_MC_BANK_DESCRIPTOR; 32],
}
#[cfg(feature = "Win32_Foundation")]
impl WHEA_XPF_MCE_DESCRIPTOR {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for WHEA_XPF_MCE_DESCRIPTOR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for WHEA_XPF_MCE_DESCRIPTOR {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for WHEA_XPF_MCE_DESCRIPTOR {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for WHEA_XPF_MCE_DESCRIPTOR {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct WHEA_XPF_MC_BANK_DESCRIPTOR {
    pub BankNumber: u8,
    pub ClearOnInitialization: super::super::super::Foundation::BOOLEAN,
    pub StatusDataFormat: u8,
    pub Flags: XPF_MC_BANK_FLAGS,
    pub ControlMsr: u32,
    pub StatusMsr: u32,
    pub AddressMsr: u32,
    pub MiscMsr: u32,
    pub ControlData: u64,
}
#[cfg(feature = "Win32_Foundation")]
impl WHEA_XPF_MC_BANK_DESCRIPTOR {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for WHEA_XPF_MC_BANK_DESCRIPTOR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for WHEA_XPF_MC_BANK_DESCRIPTOR {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for WHEA_XPF_MC_BANK_DESCRIPTOR {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for WHEA_XPF_MC_BANK_DESCRIPTOR {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_XPF_MC_BANK_STATUSFORMAT_AMD64MCA: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_XPF_MC_BANK_STATUSFORMAT_IA32MCA: u32 = 0u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WHEA_XPF_MC_BANK_STATUSFORMAT_Intel64MCA: u32 = 1u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct WHEA_XPF_NMI_DESCRIPTOR {
    pub Type: u16,
    pub Enabled: super::super::super::Foundation::BOOLEAN,
}
#[cfg(feature = "Win32_Foundation")]
impl WHEA_XPF_NMI_DESCRIPTOR {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for WHEA_XPF_NMI_DESCRIPTOR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for WHEA_XPF_NMI_DESCRIPTOR {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for WHEA_XPF_NMI_DESCRIPTOR {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for WHEA_XPF_NMI_DESCRIPTOR {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
pub struct WINDBG_EXTENSION_APIS {
    pub nSize: u32,
    pub lpOutputRoutine: ::std::option::Option<PWINDBG_OUTPUT_ROUTINE>,
    pub lpGetExpressionRoutine: ::std::option::Option<PWINDBG_GET_EXPRESSION>,
    pub lpGetSymbolRoutine: ::std::option::Option<PWINDBG_GET_SYMBOL>,
    pub lpDisasmRoutine: ::std::option::Option<PWINDBG_DISASM>,
    pub lpCheckControlCRoutine: ::std::option::Option<PWINDBG_CHECK_CONTROL_C>,
    pub lpReadProcessMemoryRoutine: ::std::option::Option<PWINDBG_READ_PROCESS_MEMORY_ROUTINE>,
    pub lpWriteProcessMemoryRoutine: ::std::option::Option<PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE>,
    pub lpGetThreadContextRoutine: ::std::option::Option<PWINDBG_GET_THREAD_CONTEXT_ROUTINE>,
    pub lpSetThreadContextRoutine: ::std::option::Option<PWINDBG_SET_THREAD_CONTEXT_ROUTINE>,
    pub lpIoctlRoutine: ::std::option::Option<PWINDBG_IOCTL_ROUTINE>,
    pub lpStackTraceRoutine: ::std::option::Option<PWINDBG_STACKTRACE_ROUTINE>,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl WINDBG_EXTENSION_APIS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::default::Default for WINDBG_EXTENSION_APIS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::fmt::Debug for WINDBG_EXTENSION_APIS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("WINDBG_EXTENSION_APIS").field("nSize", &self.nSize).finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::PartialEq for WINDBG_EXTENSION_APIS {
    fn eq(&self, other: &Self) -> bool {
        self.nSize == other.nSize
            && self.lpOutputRoutine.map(|f| f as usize) == other.lpOutputRoutine.map(|f| f as usize)
            && self.lpGetExpressionRoutine.map(|f| f as usize) == other.lpGetExpressionRoutine.map(|f| f as usize)
            && self.lpGetSymbolRoutine.map(|f| f as usize) == other.lpGetSymbolRoutine.map(|f| f as usize)
            && self.lpDisasmRoutine.map(|f| f as usize) == other.lpDisasmRoutine.map(|f| f as usize)
            && self.lpCheckControlCRoutine.map(|f| f as usize) == other.lpCheckControlCRoutine.map(|f| f as usize)
            && self.lpReadProcessMemoryRoutine.map(|f| f as usize) == other.lpReadProcessMemoryRoutine.map(|f| f as usize)
            && self.lpWriteProcessMemoryRoutine.map(|f| f as usize) == other.lpWriteProcessMemoryRoutine.map(|f| f as usize)
            && self.lpGetThreadContextRoutine.map(|f| f as usize) == other.lpGetThreadContextRoutine.map(|f| f as usize)
            && self.lpSetThreadContextRoutine.map(|f| f as usize) == other.lpSetThreadContextRoutine.map(|f| f as usize)
            && self.lpIoctlRoutine.map(|f| f as usize) == other.lpIoctlRoutine.map(|f| f as usize)
            && self.lpStackTraceRoutine.map(|f| f as usize) == other.lpStackTraceRoutine.map(|f| f as usize)
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::Eq for WINDBG_EXTENSION_APIS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
unsafe impl ::windows::runtime::Abi for WINDBG_EXTENSION_APIS {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
pub struct WINDBG_EXTENSION_APIS32 {
    pub nSize: u32,
    pub lpOutputRoutine: ::std::option::Option<PWINDBG_OUTPUT_ROUTINE>,
    pub lpGetExpressionRoutine: ::std::option::Option<PWINDBG_GET_EXPRESSION32>,
    pub lpGetSymbolRoutine: ::std::option::Option<PWINDBG_GET_SYMBOL32>,
    pub lpDisasmRoutine: ::std::option::Option<PWINDBG_DISASM32>,
    pub lpCheckControlCRoutine: ::std::option::Option<PWINDBG_CHECK_CONTROL_C>,
    pub lpReadProcessMemoryRoutine: ::std::option::Option<PWINDBG_READ_PROCESS_MEMORY_ROUTINE32>,
    pub lpWriteProcessMemoryRoutine: ::std::option::Option<PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE32>,
    pub lpGetThreadContextRoutine: ::std::option::Option<PWINDBG_GET_THREAD_CONTEXT_ROUTINE>,
    pub lpSetThreadContextRoutine: ::std::option::Option<PWINDBG_SET_THREAD_CONTEXT_ROUTINE>,
    pub lpIoctlRoutine: ::std::option::Option<PWINDBG_IOCTL_ROUTINE>,
    pub lpStackTraceRoutine: ::std::option::Option<PWINDBG_STACKTRACE_ROUTINE32>,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl WINDBG_EXTENSION_APIS32 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::default::Default for WINDBG_EXTENSION_APIS32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::fmt::Debug for WINDBG_EXTENSION_APIS32 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("WINDBG_EXTENSION_APIS32").field("nSize", &self.nSize).finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::PartialEq for WINDBG_EXTENSION_APIS32 {
    fn eq(&self, other: &Self) -> bool {
        self.nSize == other.nSize
            && self.lpOutputRoutine.map(|f| f as usize) == other.lpOutputRoutine.map(|f| f as usize)
            && self.lpGetExpressionRoutine.map(|f| f as usize) == other.lpGetExpressionRoutine.map(|f| f as usize)
            && self.lpGetSymbolRoutine.map(|f| f as usize) == other.lpGetSymbolRoutine.map(|f| f as usize)
            && self.lpDisasmRoutine.map(|f| f as usize) == other.lpDisasmRoutine.map(|f| f as usize)
            && self.lpCheckControlCRoutine.map(|f| f as usize) == other.lpCheckControlCRoutine.map(|f| f as usize)
            && self.lpReadProcessMemoryRoutine.map(|f| f as usize) == other.lpReadProcessMemoryRoutine.map(|f| f as usize)
            && self.lpWriteProcessMemoryRoutine.map(|f| f as usize) == other.lpWriteProcessMemoryRoutine.map(|f| f as usize)
            && self.lpGetThreadContextRoutine.map(|f| f as usize) == other.lpGetThreadContextRoutine.map(|f| f as usize)
            && self.lpSetThreadContextRoutine.map(|f| f as usize) == other.lpSetThreadContextRoutine.map(|f| f as usize)
            && self.lpIoctlRoutine.map(|f| f as usize) == other.lpIoctlRoutine.map(|f| f as usize)
            && self.lpStackTraceRoutine.map(|f| f as usize) == other.lpStackTraceRoutine.map(|f| f as usize)
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::Eq for WINDBG_EXTENSION_APIS32 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
unsafe impl ::windows::runtime::Abi for WINDBG_EXTENSION_APIS32 {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
pub struct WINDBG_EXTENSION_APIS64 {
    pub nSize: u32,
    pub lpOutputRoutine: ::std::option::Option<PWINDBG_OUTPUT_ROUTINE>,
    pub lpGetExpressionRoutine: ::std::option::Option<PWINDBG_GET_EXPRESSION64>,
    pub lpGetSymbolRoutine: ::std::option::Option<PWINDBG_GET_SYMBOL64>,
    pub lpDisasmRoutine: ::std::option::Option<PWINDBG_DISASM64>,
    pub lpCheckControlCRoutine: ::std::option::Option<PWINDBG_CHECK_CONTROL_C>,
    pub lpReadProcessMemoryRoutine: ::std::option::Option<PWINDBG_READ_PROCESS_MEMORY_ROUTINE64>,
    pub lpWriteProcessMemoryRoutine: ::std::option::Option<PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE64>,
    pub lpGetThreadContextRoutine: ::std::option::Option<PWINDBG_GET_THREAD_CONTEXT_ROUTINE>,
    pub lpSetThreadContextRoutine: ::std::option::Option<PWINDBG_SET_THREAD_CONTEXT_ROUTINE>,
    pub lpIoctlRoutine: ::std::option::Option<PWINDBG_IOCTL_ROUTINE>,
    pub lpStackTraceRoutine: ::std::option::Option<PWINDBG_STACKTRACE_ROUTINE64>,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl WINDBG_EXTENSION_APIS64 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::default::Default for WINDBG_EXTENSION_APIS64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::fmt::Debug for WINDBG_EXTENSION_APIS64 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("WINDBG_EXTENSION_APIS64").field("nSize", &self.nSize).finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::PartialEq for WINDBG_EXTENSION_APIS64 {
    fn eq(&self, other: &Self) -> bool {
        self.nSize == other.nSize
            && self.lpOutputRoutine.map(|f| f as usize) == other.lpOutputRoutine.map(|f| f as usize)
            && self.lpGetExpressionRoutine.map(|f| f as usize) == other.lpGetExpressionRoutine.map(|f| f as usize)
            && self.lpGetSymbolRoutine.map(|f| f as usize) == other.lpGetSymbolRoutine.map(|f| f as usize)
            && self.lpDisasmRoutine.map(|f| f as usize) == other.lpDisasmRoutine.map(|f| f as usize)
            && self.lpCheckControlCRoutine.map(|f| f as usize) == other.lpCheckControlCRoutine.map(|f| f as usize)
            && self.lpReadProcessMemoryRoutine.map(|f| f as usize) == other.lpReadProcessMemoryRoutine.map(|f| f as usize)
            && self.lpWriteProcessMemoryRoutine.map(|f| f as usize) == other.lpWriteProcessMemoryRoutine.map(|f| f as usize)
            && self.lpGetThreadContextRoutine.map(|f| f as usize) == other.lpGetThreadContextRoutine.map(|f| f as usize)
            && self.lpSetThreadContextRoutine.map(|f| f as usize) == other.lpSetThreadContextRoutine.map(|f| f as usize)
            && self.lpIoctlRoutine.map(|f| f as usize) == other.lpIoctlRoutine.map(|f| f as usize)
            && self.lpStackTraceRoutine.map(|f| f as usize) == other.lpStackTraceRoutine.map(|f| f as usize)
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::Eq for WINDBG_EXTENSION_APIS64 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
unsafe impl ::windows::runtime::Abi for WINDBG_EXTENSION_APIS64 {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct WINDBG_OLDKD_EXTENSION_APIS {
    pub nSize: u32,
    pub lpOutputRoutine: ::std::option::Option<PWINDBG_OUTPUT_ROUTINE>,
    pub lpGetExpressionRoutine: ::std::option::Option<PWINDBG_GET_EXPRESSION32>,
    pub lpGetSymbolRoutine: ::std::option::Option<PWINDBG_GET_SYMBOL32>,
    pub lpDisasmRoutine: ::std::option::Option<PWINDBG_DISASM32>,
    pub lpCheckControlCRoutine: ::std::option::Option<PWINDBG_CHECK_CONTROL_C>,
    pub lpReadVirtualMemRoutine: ::std::option::Option<PWINDBG_READ_PROCESS_MEMORY_ROUTINE32>,
    pub lpWriteVirtualMemRoutine: ::std::option::Option<PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE32>,
    pub lpReadPhysicalMemRoutine: ::std::option::Option<PWINDBG_OLDKD_READ_PHYSICAL_MEMORY>,
    pub lpWritePhysicalMemRoutine: ::std::option::Option<PWINDBG_OLDKD_WRITE_PHYSICAL_MEMORY>,
}
#[cfg(feature = "Win32_Foundation")]
impl WINDBG_OLDKD_EXTENSION_APIS {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for WINDBG_OLDKD_EXTENSION_APIS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for WINDBG_OLDKD_EXTENSION_APIS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("WINDBG_OLDKD_EXTENSION_APIS").field("nSize", &self.nSize).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for WINDBG_OLDKD_EXTENSION_APIS {
    fn eq(&self, other: &Self) -> bool {
        self.nSize == other.nSize
            && self.lpOutputRoutine.map(|f| f as usize) == other.lpOutputRoutine.map(|f| f as usize)
            && self.lpGetExpressionRoutine.map(|f| f as usize) == other.lpGetExpressionRoutine.map(|f| f as usize)
            && self.lpGetSymbolRoutine.map(|f| f as usize) == other.lpGetSymbolRoutine.map(|f| f as usize)
            && self.lpDisasmRoutine.map(|f| f as usize) == other.lpDisasmRoutine.map(|f| f as usize)
            && self.lpCheckControlCRoutine.map(|f| f as usize) == other.lpCheckControlCRoutine.map(|f| f as usize)
            && self.lpReadVirtualMemRoutine.map(|f| f as usize) == other.lpReadVirtualMemRoutine.map(|f| f as usize)
            && self.lpWriteVirtualMemRoutine.map(|f| f as usize) == other.lpWriteVirtualMemRoutine.map(|f| f as usize)
            && self.lpReadPhysicalMemRoutine.map(|f| f as usize) == other.lpReadPhysicalMemRoutine.map(|f| f as usize)
            && self.lpWritePhysicalMemRoutine.map(|f| f as usize) == other.lpWritePhysicalMemRoutine.map(|f| f as usize)
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for WINDBG_OLDKD_EXTENSION_APIS {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for WINDBG_OLDKD_EXTENSION_APIS {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
pub struct WINDBG_OLD_EXTENSION_APIS {
    pub nSize: u32,
    pub lpOutputRoutine: ::std::option::Option<PWINDBG_OUTPUT_ROUTINE>,
    pub lpGetExpressionRoutine: ::std::option::Option<PWINDBG_GET_EXPRESSION>,
    pub lpGetSymbolRoutine: ::std::option::Option<PWINDBG_GET_SYMBOL>,
    pub lpDisasmRoutine: ::std::option::Option<PWINDBG_DISASM>,
    pub lpCheckControlCRoutine: ::std::option::Option<PWINDBG_CHECK_CONTROL_C>,
}
#[cfg(feature = "Win32_Foundation")]
impl WINDBG_OLD_EXTENSION_APIS {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for WINDBG_OLD_EXTENSION_APIS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for WINDBG_OLD_EXTENSION_APIS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("WINDBG_OLD_EXTENSION_APIS").field("nSize", &self.nSize).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for WINDBG_OLD_EXTENSION_APIS {
    fn eq(&self, other: &Self) -> bool {
        self.nSize == other.nSize
            && self.lpOutputRoutine.map(|f| f as usize) == other.lpOutputRoutine.map(|f| f as usize)
            && self.lpGetExpressionRoutine.map(|f| f as usize) == other.lpGetExpressionRoutine.map(|f| f as usize)
            && self.lpGetSymbolRoutine.map(|f| f as usize) == other.lpGetSymbolRoutine.map(|f| f as usize)
            && self.lpDisasmRoutine.map(|f| f as usize) == other.lpDisasmRoutine.map(|f| f as usize)
            && self.lpCheckControlCRoutine.map(|f| f as usize) == other.lpCheckControlCRoutine.map(|f| f as usize)
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for WINDBG_OLD_EXTENSION_APIS {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for WINDBG_OLD_EXTENSION_APIS {
    type Abi = ::std::mem::ManuallyDrop<Self>;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WOW64_CONTEXT {
    pub ContextFlags: u32,
    pub Dr0: u32,
    pub Dr1: u32,
    pub Dr2: u32,
    pub Dr3: u32,
    pub Dr6: u32,
    pub Dr7: u32,
    pub FloatSave: WOW64_FLOATING_SAVE_AREA,
    pub SegGs: u32,
    pub SegFs: u32,
    pub SegEs: u32,
    pub SegDs: u32,
    pub Edi: u32,
    pub Esi: u32,
    pub Ebx: u32,
    pub Edx: u32,
    pub Ecx: u32,
    pub Eax: u32,
    pub Ebp: u32,
    pub Eip: u32,
    pub SegCs: u32,
    pub EFlags: u32,
    pub Esp: u32,
    pub SegSs: u32,
    pub ExtendedRegisters: [u8; 512],
}
impl WOW64_CONTEXT {}
impl ::std::default::Default for WOW64_CONTEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for WOW64_CONTEXT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("WOW64_CONTEXT")
            .field("ContextFlags", &self.ContextFlags)
            .field("Dr0", &self.Dr0)
            .field("Dr1", &self.Dr1)
            .field("Dr2", &self.Dr2)
            .field("Dr3", &self.Dr3)
            .field("Dr6", &self.Dr6)
            .field("Dr7", &self.Dr7)
            .field("FloatSave", &self.FloatSave)
            .field("SegGs", &self.SegGs)
            .field("SegFs", &self.SegFs)
            .field("SegEs", &self.SegEs)
            .field("SegDs", &self.SegDs)
            .field("Edi", &self.Edi)
            .field("Esi", &self.Esi)
            .field("Ebx", &self.Ebx)
            .field("Edx", &self.Edx)
            .field("Ecx", &self.Ecx)
            .field("Eax", &self.Eax)
            .field("Ebp", &self.Ebp)
            .field("Eip", &self.Eip)
            .field("SegCs", &self.SegCs)
            .field("EFlags", &self.EFlags)
            .field("Esp", &self.Esp)
            .field("SegSs", &self.SegSs)
            .field("ExtendedRegisters", &self.ExtendedRegisters)
            .finish()
    }
}
impl ::std::cmp::PartialEq for WOW64_CONTEXT {
    fn eq(&self, other: &Self) -> bool {
        self.ContextFlags == other.ContextFlags
            && self.Dr0 == other.Dr0
            && self.Dr1 == other.Dr1
            && self.Dr2 == other.Dr2
            && self.Dr3 == other.Dr3
            && self.Dr6 == other.Dr6
            && self.Dr7 == other.Dr7
            && self.FloatSave == other.FloatSave
            && self.SegGs == other.SegGs
            && self.SegFs == other.SegFs
            && self.SegEs == other.SegEs
            && self.SegDs == other.SegDs
            && self.Edi == other.Edi
            && self.Esi == other.Esi
            && self.Ebx == other.Ebx
            && self.Edx == other.Edx
            && self.Ecx == other.Ecx
            && self.Eax == other.Eax
            && self.Ebp == other.Ebp
            && self.Eip == other.Eip
            && self.SegCs == other.SegCs
            && self.EFlags == other.EFlags
            && self.Esp == other.Esp
            && self.SegSs == other.SegSs
            && self.ExtendedRegisters == other.ExtendedRegisters
    }
}
impl ::std::cmp::Eq for WOW64_CONTEXT {}
unsafe impl ::windows::runtime::Abi for WOW64_CONTEXT {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WOW64_CONTEXT_EXCEPTION_ACTIVE: u32 = 134217728u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WOW64_CONTEXT_EXCEPTION_REPORTING: u32 = 2147483648u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WOW64_CONTEXT_EXCEPTION_REQUEST: u32 = 1073741824u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WOW64_CONTEXT_SERVICE_ACTIVE: u32 = 268435456u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WOW64_CONTEXT_i386: u32 = 65536u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WOW64_CONTEXT_i486: u32 = 65536u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WOW64_DESCRIPTOR_TABLE_ENTRY {
    pub Selector: u32,
    pub Descriptor: WOW64_LDT_ENTRY,
}
impl WOW64_DESCRIPTOR_TABLE_ENTRY {}
impl ::std::default::Default for WOW64_DESCRIPTOR_TABLE_ENTRY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WOW64_DESCRIPTOR_TABLE_ENTRY {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WOW64_DESCRIPTOR_TABLE_ENTRY {}
unsafe impl ::windows::runtime::Abi for WOW64_DESCRIPTOR_TABLE_ENTRY {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WOW64_FLOATING_SAVE_AREA {
    pub ControlWord: u32,
    pub StatusWord: u32,
    pub TagWord: u32,
    pub ErrorOffset: u32,
    pub ErrorSelector: u32,
    pub DataOffset: u32,
    pub DataSelector: u32,
    pub RegisterArea: [u8; 80],
    pub Cr0NpxState: u32,
}
impl WOW64_FLOATING_SAVE_AREA {}
impl ::std::default::Default for WOW64_FLOATING_SAVE_AREA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for WOW64_FLOATING_SAVE_AREA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("WOW64_FLOATING_SAVE_AREA")
            .field("ControlWord", &self.ControlWord)
            .field("StatusWord", &self.StatusWord)
            .field("TagWord", &self.TagWord)
            .field("ErrorOffset", &self.ErrorOffset)
            .field("ErrorSelector", &self.ErrorSelector)
            .field("DataOffset", &self.DataOffset)
            .field("DataSelector", &self.DataSelector)
            .field("RegisterArea", &self.RegisterArea)
            .field("Cr0NpxState", &self.Cr0NpxState)
            .finish()
    }
}
impl ::std::cmp::PartialEq for WOW64_FLOATING_SAVE_AREA {
    fn eq(&self, other: &Self) -> bool {
        self.ControlWord == other.ControlWord && self.StatusWord == other.StatusWord && self.TagWord == other.TagWord && self.ErrorOffset == other.ErrorOffset && self.ErrorSelector == other.ErrorSelector && self.DataOffset == other.DataOffset && self.DataSelector == other.DataSelector && self.RegisterArea == other.RegisterArea && self.Cr0NpxState == other.Cr0NpxState
    }
}
impl ::std::cmp::Eq for WOW64_FLOATING_SAVE_AREA {}
unsafe impl ::windows::runtime::Abi for WOW64_FLOATING_SAVE_AREA {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WOW64_LDT_ENTRY {
    pub LimitLow: u16,
    pub BaseLow: u16,
    pub HighWord: WOW64_LDT_ENTRY_0,
}
impl WOW64_LDT_ENTRY {}
impl ::std::default::Default for WOW64_LDT_ENTRY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WOW64_LDT_ENTRY {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WOW64_LDT_ENTRY {}
unsafe impl ::windows::runtime::Abi for WOW64_LDT_ENTRY {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union WOW64_LDT_ENTRY_0 {
    pub Bytes: WOW64_LDT_ENTRY_0_1,
    pub Bits: WOW64_LDT_ENTRY_0_0,
}
impl WOW64_LDT_ENTRY_0 {}
impl ::std::default::Default for WOW64_LDT_ENTRY_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for WOW64_LDT_ENTRY_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for WOW64_LDT_ENTRY_0 {}
unsafe impl ::windows::runtime::Abi for WOW64_LDT_ENTRY_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WOW64_LDT_ENTRY_0_0 {
    pub _bitfield: u32,
}
impl WOW64_LDT_ENTRY_0_0 {}
impl ::std::default::Default for WOW64_LDT_ENTRY_0_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for WOW64_LDT_ENTRY_0_0 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_Bits_e__Struct").field("_bitfield", &self._bitfield).finish()
    }
}
impl ::std::cmp::PartialEq for WOW64_LDT_ENTRY_0_0 {
    fn eq(&self, other: &Self) -> bool {
        self._bitfield == other._bitfield
    }
}
impl ::std::cmp::Eq for WOW64_LDT_ENTRY_0_0 {}
unsafe impl ::windows::runtime::Abi for WOW64_LDT_ENTRY_0_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct WOW64_LDT_ENTRY_0_1 {
    pub BaseMid: u8,
    pub Flags1: u8,
    pub Flags2: u8,
    pub BaseHi: u8,
}
impl WOW64_LDT_ENTRY_0_1 {}
impl ::std::default::Default for WOW64_LDT_ENTRY_0_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for WOW64_LDT_ENTRY_0_1 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_Bytes_e__Struct").field("BaseMid", &self.BaseMid).field("Flags1", &self.Flags1).field("Flags2", &self.Flags2).field("BaseHi", &self.BaseHi).finish()
    }
}
impl ::std::cmp::PartialEq for WOW64_LDT_ENTRY_0_1 {
    fn eq(&self, other: &Self) -> bool {
        self.BaseMid == other.BaseMid && self.Flags1 == other.Flags1 && self.Flags2 == other.Flags2 && self.BaseHi == other.BaseHi
    }
}
impl ::std::cmp::Eq for WOW64_LDT_ENTRY_0_1 {}
unsafe impl ::windows::runtime::Abi for WOW64_LDT_ENTRY_0_1 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WOW64_MAXIMUM_SUPPORTED_EXTENSION: u32 = 512u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const WOW64_SIZE_OF_80387_REGISTERS: u32 = 80u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn WaitForDebugEvent(lpdebugevent: *mut DEBUG_EVENT, dwmilliseconds: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn WaitForDebugEvent(lpdebugevent: *mut ::std::mem::ManuallyDrop<DEBUG_EVENT>, dwmilliseconds: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(WaitForDebugEvent(::std::mem::transmute(lpdebugevent), ::std::mem::transmute(dwmilliseconds)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`, `Win32_System_SystemServices`*"]
#[inline]
pub unsafe fn WaitForDebugEventEx(lpdebugevent: *mut DEBUG_EVENT, dwmilliseconds: u32) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn WaitForDebugEventEx(lpdebugevent: *mut ::std::mem::ManuallyDrop<DEBUG_EVENT>, dwmilliseconds: u32) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(WaitForDebugEventEx(::std::mem::transmute(lpdebugevent), ::std::mem::transmute(dwmilliseconds)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn Wow64GetThreadContext<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hthread: Param0, lpcontext: *mut WOW64_CONTEXT) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn Wow64GetThreadContext(hthread: super::super::super::Foundation::HANDLE, lpcontext: *mut WOW64_CONTEXT) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(Wow64GetThreadContext(hthread.into_param().abi(), ::std::mem::transmute(lpcontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn Wow64GetThreadSelectorEntry<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hthread: Param0, dwselector: u32, lpselectorentry: *mut WOW64_LDT_ENTRY) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn Wow64GetThreadSelectorEntry(hthread: super::super::super::Foundation::HANDLE, dwselector: u32, lpselectorentry: *mut WOW64_LDT_ENTRY) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(Wow64GetThreadSelectorEntry(hthread.into_param().abi(), ::std::mem::transmute(dwselector), ::std::mem::transmute(lpselectorentry)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn Wow64SetThreadContext<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hthread: Param0, lpcontext: *const WOW64_CONTEXT) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn Wow64SetThreadContext(hthread: super::super::super::Foundation::HANDLE, lpcontext: *const WOW64_CONTEXT) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(Wow64SetThreadContext(hthread.into_param().abi(), ::std::mem::transmute(lpcontext)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_Foundation`*"]
#[inline]
pub unsafe fn WriteProcessMemory<'a, Param0: ::windows::runtime::IntoParam<'a, super::super::super::Foundation::HANDLE>>(hprocess: Param0, lpbaseaddress: *const ::std::ffi::c_void, lpbuffer: *const ::std::ffi::c_void, nsize: usize, lpnumberofbyteswritten: *mut usize) -> super::super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn WriteProcessMemory(hprocess: super::super::super::Foundation::HANDLE, lpbaseaddress: *const ::std::ffi::c_void, lpbuffer: *const ::std::ffi::c_void, nsize: usize, lpnumberofbyteswritten: *mut usize) -> super::super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(WriteProcessMemory(hprocess.into_param().abi(), ::std::mem::transmute(lpbaseaddress), ::std::mem::transmute(lpbuffer), ::std::mem::transmute(nsize), ::std::mem::transmute(lpnumberofbyteswritten)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union XPF_MCE_FLAGS {
    pub Anonymous: XPF_MCE_FLAGS_0,
    pub AsULONG: u32,
}
impl XPF_MCE_FLAGS {}
impl ::std::default::Default for XPF_MCE_FLAGS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for XPF_MCE_FLAGS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for XPF_MCE_FLAGS {}
unsafe impl ::windows::runtime::Abi for XPF_MCE_FLAGS {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(1))]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct XPF_MCE_FLAGS_0 {
    pub _bitfield: u32,
}
impl XPF_MCE_FLAGS_0 {}
impl ::std::default::Default for XPF_MCE_FLAGS_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for XPF_MCE_FLAGS_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for XPF_MCE_FLAGS_0 {}
unsafe impl ::windows::runtime::Abi for XPF_MCE_FLAGS_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub union XPF_MC_BANK_FLAGS {
    pub Anonymous: XPF_MC_BANK_FLAGS_0,
    pub AsUCHAR: u8,
}
impl XPF_MC_BANK_FLAGS {}
impl ::std::default::Default for XPF_MC_BANK_FLAGS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for XPF_MC_BANK_FLAGS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for XPF_MC_BANK_FLAGS {}
unsafe impl ::windows::runtime::Abi for XPF_MC_BANK_FLAGS {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct XPF_MC_BANK_FLAGS_0 {
    pub _bitfield: u8,
}
impl XPF_MC_BANK_FLAGS_0 {}
impl ::std::default::Default for XPF_MC_BANK_FLAGS_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for XPF_MC_BANK_FLAGS_0 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_Anonymous_e__Struct").field("_bitfield", &self._bitfield).finish()
    }
}
impl ::std::cmp::PartialEq for XPF_MC_BANK_FLAGS_0 {
    fn eq(&self, other: &Self) -> bool {
        self._bitfield == other._bitfield
    }
}
impl ::std::cmp::Eq for XPF_MC_BANK_FLAGS_0 {}
unsafe impl ::windows::runtime::Abi for XPF_MC_BANK_FLAGS_0 {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C, packed(4))]
#[cfg(feature = "Win32_System_SystemServices")]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`, `Win32_System_SystemServices`*"]
pub struct XSTATE_CONFIG_FEATURE_MSC_INFO {
    pub SizeOfInfo: u32,
    pub ContextSize: u32,
    pub EnabledFeatures: u64,
    pub Features: [super::super::SystemServices::XSTATE_FEATURE; 64],
}
#[cfg(feature = "Win32_System_SystemServices")]
impl XSTATE_CONFIG_FEATURE_MSC_INFO {}
#[cfg(feature = "Win32_System_SystemServices")]
impl ::std::default::Default for XSTATE_CONFIG_FEATURE_MSC_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_SystemServices")]
impl ::std::cmp::PartialEq for XSTATE_CONFIG_FEATURE_MSC_INFO {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_System_SystemServices")]
impl ::std::cmp::Eq for XSTATE_CONFIG_FEATURE_MSC_INFO {}
#[cfg(feature = "Win32_System_SystemServices")]
unsafe impl ::windows::runtime::Abi for XSTATE_CONFIG_FEATURE_MSC_INFO {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
#[derive(:: std :: cmp :: PartialEq, :: std :: cmp :: Eq, :: std :: marker :: Copy, :: std :: clone :: Clone, :: std :: default :: Default, :: std :: fmt :: Debug)]
#[repr(transparent)]
pub struct _DUMP_TYPES(pub i32);
pub const DUMP_TYPE_INVALID: _DUMP_TYPES = _DUMP_TYPES(-1i32);
pub const DUMP_TYPE_UNKNOWN: _DUMP_TYPES = _DUMP_TYPES(0i32);
pub const DUMP_TYPE_FULL: _DUMP_TYPES = _DUMP_TYPES(1i32);
pub const DUMP_TYPE_SUMMARY: _DUMP_TYPES = _DUMP_TYPES(2i32);
pub const DUMP_TYPE_HEADER: _DUMP_TYPES = _DUMP_TYPES(3i32);
pub const DUMP_TYPE_TRIAGE: _DUMP_TYPES = _DUMP_TYPES(4i32);
pub const DUMP_TYPE_BITMAP_FULL: _DUMP_TYPES = _DUMP_TYPES(5i32);
pub const DUMP_TYPE_BITMAP_KERNEL: _DUMP_TYPES = _DUMP_TYPES(6i32);
pub const DUMP_TYPE_AUTOMATIC: _DUMP_TYPES = _DUMP_TYPES(7i32);
impl ::std::convert::From<i32> for _DUMP_TYPES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for _DUMP_TYPES {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct _GETSETBUSDATA {
    pub BusDataType: u32,
    pub BusNumber: u32,
    pub SlotNumber: u32,
    pub Buffer: *mut ::std::ffi::c_void,
    pub Offset: u32,
    pub Length: u32,
}
impl _GETSETBUSDATA {}
impl ::std::default::Default for _GETSETBUSDATA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for _GETSETBUSDATA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_GETSETBUSDATA").field("BusDataType", &self.BusDataType).field("BusNumber", &self.BusNumber).field("SlotNumber", &self.SlotNumber).field("Buffer", &self.Buffer).field("Offset", &self.Offset).field("Length", &self.Length).finish()
    }
}
impl ::std::cmp::PartialEq for _GETSETBUSDATA {
    fn eq(&self, other: &Self) -> bool {
        self.BusDataType == other.BusDataType && self.BusNumber == other.BusNumber && self.SlotNumber == other.SlotNumber && self.Buffer == other.Buffer && self.Offset == other.Offset && self.Length == other.Length
    }
}
impl ::std::cmp::Eq for _GETSETBUSDATA {}
unsafe impl ::windows::runtime::Abi for _GETSETBUSDATA {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct _IMAGEHLP_JIT_SYMBOL_MAP {
    pub SizeOfStruct: u32,
    pub Address: u64,
    pub BaseOfImage: u64,
}
impl _IMAGEHLP_JIT_SYMBOL_MAP {}
impl ::std::default::Default for _IMAGEHLP_JIT_SYMBOL_MAP {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for _IMAGEHLP_JIT_SYMBOL_MAP {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_IMAGEHLP_JIT_SYMBOL_MAP").field("SizeOfStruct", &self.SizeOfStruct).field("Address", &self.Address).field("BaseOfImage", &self.BaseOfImage).finish()
    }
}
impl ::std::cmp::PartialEq for _IMAGEHLP_JIT_SYMBOL_MAP {
    fn eq(&self, other: &Self) -> bool {
        self.SizeOfStruct == other.SizeOfStruct && self.Address == other.Address && self.BaseOfImage == other.BaseOfImage
    }
}
impl ::std::cmp::Eq for _IMAGEHLP_JIT_SYMBOL_MAP {}
unsafe impl ::windows::runtime::Abi for _IMAGEHLP_JIT_SYMBOL_MAP {
    type Abi = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub struct __MIDL___MIDL_itf_jscript9diag_0000_0007_0001 {
    pub InstructionOffset: u64,
    pub ReturnOffset: u64,
    pub FrameOffset: u64,
    pub StackOffset: u64,
}
impl __MIDL___MIDL_itf_jscript9diag_0000_0007_0001 {}
impl ::std::default::Default for __MIDL___MIDL_itf_jscript9diag_0000_0007_0001 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for __MIDL___MIDL_itf_jscript9diag_0000_0007_0001 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("__MIDL___MIDL_itf_jscript9diag_0000_0007_0001").field("InstructionOffset", &self.InstructionOffset).field("ReturnOffset", &self.ReturnOffset).field("FrameOffset", &self.FrameOffset).field("StackOffset", &self.StackOffset).finish()
    }
}
impl ::std::cmp::PartialEq for __MIDL___MIDL_itf_jscript9diag_0000_0007_0001 {
    fn eq(&self, other: &Self) -> bool {
        self.InstructionOffset == other.InstructionOffset && self.ReturnOffset == other.ReturnOffset && self.FrameOffset == other.FrameOffset && self.StackOffset == other.StackOffset
    }
}
impl ::std::cmp::Eq for __MIDL___MIDL_itf_jscript9diag_0000_0007_0001 {}
unsafe impl ::windows::runtime::Abi for __MIDL___MIDL_itf_jscript9diag_0000_0007_0001 {
    type Abi = Self;
}
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const fasaCaseSensitive: u32 = 4u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const fasaPreferInternalHandler: u32 = 1u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const fasaSupportInternalHandler: u32 = 2u32;
#[doc = "*Required features: `Win32_System_Diagnostics_Debug`*"]
pub const sevMax: i32 = 4i32;
