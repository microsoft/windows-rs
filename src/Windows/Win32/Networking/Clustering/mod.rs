#![allow(
    unused_variables,
    non_upper_case_globals,
    non_snake_case,
    unused_unsafe,
    non_camel_case_types,
    dead_code,
    clippy::all
)]
#[inline]
pub unsafe fn AddClusterGroupDependency(
    hdependentgroup: *const _HGROUP,
    hprovidergroup: *const _HGROUP,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn AddClusterGroupDependency(
                hdependentgroup: *const _HGROUP,
                hprovidergroup: *const _HGROUP,
            ) -> u32;
        }
        ::std::mem::transmute(AddClusterGroupDependency(
            ::std::mem::transmute(hdependentgroup),
            ::std::mem::transmute(hprovidergroup),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn AddClusterGroupSetDependency(
    hdependentgroupset: *const _HGROUPSET,
    hprovidergroupset: *const _HGROUPSET,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn AddClusterGroupSetDependency(
                hdependentgroupset: *const _HGROUPSET,
                hprovidergroupset: *const _HGROUPSET,
            ) -> u32;
        }
        ::std::mem::transmute(AddClusterGroupSetDependency(
            ::std::mem::transmute(hdependentgroupset),
            ::std::mem::transmute(hprovidergroupset),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn AddClusterGroupToGroupSetDependency(
    hdependentgroup: *const _HGROUP,
    hprovidergroupset: *const _HGROUPSET,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn AddClusterGroupToGroupSetDependency(
                hdependentgroup: *const _HGROUP,
                hprovidergroupset: *const _HGROUPSET,
            ) -> u32;
        }
        ::std::mem::transmute(AddClusterGroupToGroupSetDependency(
            ::std::mem::transmute(hdependentgroup),
            ::std::mem::transmute(hprovidergroupset),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn AddClusterNode<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpsznodename: Param1,
    pfnprogresscallback: ::std::option::Option<PCLUSTER_SETUP_PROGRESS_CALLBACK>,
    pvcallbackarg: *const ::std::ffi::c_void,
) -> *mut _HNODE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn AddClusterNode(
                hcluster: *const _HCLUSTER,
                lpsznodename: super::super::Foundation::PWSTR,
                pfnprogresscallback: ::windows::runtime::RawPtr,
                pvcallbackarg: *const ::std::ffi::c_void,
            ) -> *mut _HNODE;
        }
        ::std::mem::transmute(AddClusterNode(
            ::std::mem::transmute(hcluster),
            lpsznodename.into_param().abi(),
            ::std::mem::transmute(pfnprogresscallback),
            ::std::mem::transmute(pvcallbackarg),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn AddClusterNodeEx<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpsznodename: Param1,
    dwflags: u32,
    pfnprogresscallback: ::std::option::Option<PCLUSTER_SETUP_PROGRESS_CALLBACK>,
    pvcallbackarg: *const ::std::ffi::c_void,
) -> *mut _HNODE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn AddClusterNodeEx(
                hcluster: *const _HCLUSTER,
                lpsznodename: super::super::Foundation::PWSTR,
                dwflags: u32,
                pfnprogresscallback: ::windows::runtime::RawPtr,
                pvcallbackarg: *const ::std::ffi::c_void,
            ) -> *mut _HNODE;
        }
        ::std::mem::transmute(AddClusterNodeEx(
            ::std::mem::transmute(hcluster),
            lpsznodename.into_param().abi(),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(pfnprogresscallback),
            ::std::mem::transmute(pvcallbackarg),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn AddClusterResourceDependency(
    hresource: *const _HRESOURCE,
    hdependson: *const _HRESOURCE,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn AddClusterResourceDependency(
                hresource: *const _HRESOURCE,
                hdependson: *const _HRESOURCE,
            ) -> u32;
        }
        ::std::mem::transmute(AddClusterResourceDependency(
            ::std::mem::transmute(hresource),
            ::std::mem::transmute(hdependson),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn AddClusterResourceNode(hresource: *const _HRESOURCE, hnode: *const _HNODE) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn AddClusterResourceNode(hresource: *const _HRESOURCE, hnode: *const _HNODE) -> u32;
        }
        ::std::mem::transmute(AddClusterResourceNode(
            ::std::mem::transmute(hresource),
            ::std::mem::transmute(hnode),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn AddClusterStorageNode<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param4: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param5: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpsznodename: Param1,
    pfnprogresscallback: ::std::option::Option<PCLUSTER_SETUP_PROGRESS_CALLBACK>,
    pvcallbackarg: *const ::std::ffi::c_void,
    lpszclusterstoragenodedescription: Param4,
    lpszclusterstoragenodelocation: Param5,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn AddClusterStorageNode(
                hcluster: *const _HCLUSTER,
                lpsznodename: super::super::Foundation::PWSTR,
                pfnprogresscallback: ::windows::runtime::RawPtr,
                pvcallbackarg: *const ::std::ffi::c_void,
                lpszclusterstoragenodedescription: super::super::Foundation::PWSTR,
                lpszclusterstoragenodelocation: super::super::Foundation::PWSTR,
            ) -> u32;
        }
        ::std::mem::transmute(AddClusterStorageNode(
            ::std::mem::transmute(hcluster),
            lpsznodename.into_param().abi(),
            ::std::mem::transmute(pfnprogresscallback),
            ::std::mem::transmute(pvcallbackarg),
            lpszclusterstoragenodedescription.into_param().abi(),
            lpszclusterstoragenodelocation.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn AddCrossClusterGroupSetDependency<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hdependentgroupset: *const _HGROUPSET,
    lpremoteclustername: Param1,
    lpremotegroupsetname: Param2,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn AddCrossClusterGroupSetDependency(
                hdependentgroupset: *const _HGROUPSET,
                lpremoteclustername: super::super::Foundation::PWSTR,
                lpremotegroupsetname: super::super::Foundation::PWSTR,
            ) -> u32;
        }
        ::std::mem::transmute(AddCrossClusterGroupSetDependency(
            ::std::mem::transmute(hdependentgroupset),
            lpremoteclustername.into_param().abi(),
            lpremotegroupsetname.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn AddResourceToClusterSharedVolumes(hresource: *const _HRESOURCE) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn AddResourceToClusterSharedVolumes(hresource: *const _HRESOURCE) -> u32;
        }
        ::std::mem::transmute(AddResourceToClusterSharedVolumes(::std::mem::transmute(
            hresource,
        )))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn BackupClusterDatabase<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpszpathname: Param1,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn BackupClusterDatabase(
                hcluster: *const _HCLUSTER,
                lpszpathname: super::super::Foundation::PWSTR,
            ) -> u32;
        }
        ::std::mem::transmute(BackupClusterDatabase(
            ::std::mem::transmute(hcluster),
            lpszpathname.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const BitLockerDecrypted: i32 = 4i32;
pub const BitLockerDecrypting: i32 = 16i32;
pub const BitLockerEnabled: i32 = 1i32;
pub const BitLockerPaused: i32 = 64i32;
pub const BitLockerStopped: i32 = 128i32;
pub const BitlockerEncrypted: i32 = 8i32;
pub const BitlockerEncrypting: i32 = 32i32;
pub const CA_UPGRADE_VERSION: u32 = 1u32;
pub const CLCTL_CLUSTER_BASE: u32 = 0u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLCTL_CODES(pub i32);
pub const CLCTL_UNKNOWN: CLCTL_CODES = CLCTL_CODES(0i32);
pub const CLCTL_GET_CHARACTERISTICS: CLCTL_CODES = CLCTL_CODES(5i32);
pub const CLCTL_GET_FLAGS: CLCTL_CODES = CLCTL_CODES(9i32);
pub const CLCTL_GET_CLASS_INFO: CLCTL_CODES = CLCTL_CODES(13i32);
pub const CLCTL_GET_REQUIRED_DEPENDENCIES: CLCTL_CODES = CLCTL_CODES(17i32);
pub const CLCTL_GET_ARB_TIMEOUT: CLCTL_CODES = CLCTL_CODES(21i32);
pub const CLCTL_GET_FAILURE_INFO: CLCTL_CODES = CLCTL_CODES(25i32);
pub const CLCTL_GET_NAME: CLCTL_CODES = CLCTL_CODES(41i32);
pub const CLCTL_GET_RESOURCE_TYPE: CLCTL_CODES = CLCTL_CODES(45i32);
pub const CLCTL_GET_NODE: CLCTL_CODES = CLCTL_CODES(49i32);
pub const CLCTL_GET_NETWORK: CLCTL_CODES = CLCTL_CODES(53i32);
pub const CLCTL_GET_ID: CLCTL_CODES = CLCTL_CODES(57i32);
pub const CLCTL_GET_FQDN: CLCTL_CODES = CLCTL_CODES(61i32);
pub const CLCTL_GET_CLUSTER_SERVICE_ACCOUNT_NAME: CLCTL_CODES = CLCTL_CODES(65i32);
pub const CLCTL_CHECK_VOTER_EVICT: CLCTL_CODES = CLCTL_CODES(69i32);
pub const CLCTL_CHECK_VOTER_DOWN: CLCTL_CODES = CLCTL_CODES(73i32);
pub const CLCTL_SHUTDOWN: CLCTL_CODES = CLCTL_CODES(77i32);
pub const CLCTL_ENUM_COMMON_PROPERTIES: CLCTL_CODES = CLCTL_CODES(81i32);
pub const CLCTL_GET_RO_COMMON_PROPERTIES: CLCTL_CODES = CLCTL_CODES(85i32);
pub const CLCTL_GET_COMMON_PROPERTIES: CLCTL_CODES = CLCTL_CODES(89i32);
pub const CLCTL_SET_COMMON_PROPERTIES: CLCTL_CODES = CLCTL_CODES(4194398i32);
pub const CLCTL_VALIDATE_COMMON_PROPERTIES: CLCTL_CODES = CLCTL_CODES(97i32);
pub const CLCTL_GET_COMMON_PROPERTY_FMTS: CLCTL_CODES = CLCTL_CODES(101i32);
pub const CLCTL_GET_COMMON_RESOURCE_PROPERTY_FMTS: CLCTL_CODES = CLCTL_CODES(105i32);
pub const CLCTL_ENUM_PRIVATE_PROPERTIES: CLCTL_CODES = CLCTL_CODES(121i32);
pub const CLCTL_GET_RO_PRIVATE_PROPERTIES: CLCTL_CODES = CLCTL_CODES(125i32);
pub const CLCTL_GET_PRIVATE_PROPERTIES: CLCTL_CODES = CLCTL_CODES(129i32);
pub const CLCTL_SET_PRIVATE_PROPERTIES: CLCTL_CODES = CLCTL_CODES(4194438i32);
pub const CLCTL_VALIDATE_PRIVATE_PROPERTIES: CLCTL_CODES = CLCTL_CODES(137i32);
pub const CLCTL_GET_PRIVATE_PROPERTY_FMTS: CLCTL_CODES = CLCTL_CODES(141i32);
pub const CLCTL_GET_PRIVATE_RESOURCE_PROPERTY_FMTS: CLCTL_CODES = CLCTL_CODES(145i32);
pub const CLCTL_ADD_REGISTRY_CHECKPOINT: CLCTL_CODES = CLCTL_CODES(4194466i32);
pub const CLCTL_DELETE_REGISTRY_CHECKPOINT: CLCTL_CODES = CLCTL_CODES(4194470i32);
pub const CLCTL_GET_REGISTRY_CHECKPOINTS: CLCTL_CODES = CLCTL_CODES(169i32);
pub const CLCTL_ADD_CRYPTO_CHECKPOINT: CLCTL_CODES = CLCTL_CODES(4194478i32);
pub const CLCTL_DELETE_CRYPTO_CHECKPOINT: CLCTL_CODES = CLCTL_CODES(4194482i32);
pub const CLCTL_GET_CRYPTO_CHECKPOINTS: CLCTL_CODES = CLCTL_CODES(181i32);
pub const CLCTL_RESOURCE_UPGRADE_DLL: CLCTL_CODES = CLCTL_CODES(4194490i32);
pub const CLCTL_ADD_REGISTRY_CHECKPOINT_64BIT: CLCTL_CODES = CLCTL_CODES(4194494i32);
pub const CLCTL_ADD_REGISTRY_CHECKPOINT_32BIT: CLCTL_CODES = CLCTL_CODES(4194498i32);
pub const CLCTL_GET_LOADBAL_PROCESS_LIST: CLCTL_CODES = CLCTL_CODES(201i32);
pub const CLCTL_SET_ACCOUNT_ACCESS: CLCTL_CODES = CLCTL_CODES(4194546i32);
pub const CLCTL_GET_NETWORK_NAME: CLCTL_CODES = CLCTL_CODES(361i32);
pub const CLCTL_NETNAME_GET_VIRTUAL_SERVER_TOKEN: CLCTL_CODES = CLCTL_CODES(365i32);
pub const CLCTL_NETNAME_REGISTER_DNS_RECORDS: CLCTL_CODES = CLCTL_CODES(370i32);
pub const CLCTL_GET_DNS_NAME: CLCTL_CODES = CLCTL_CODES(373i32);
pub const CLCTL_NETNAME_SET_PWD_INFO: CLCTL_CODES = CLCTL_CODES(378i32);
pub const CLCTL_NETNAME_DELETE_CO: CLCTL_CODES = CLCTL_CODES(382i32);
pub const CLCTL_NETNAME_VALIDATE_VCO: CLCTL_CODES = CLCTL_CODES(385i32);
pub const CLCTL_NETNAME_RESET_VCO: CLCTL_CODES = CLCTL_CODES(389i32);
pub const CLCTL_NETNAME_REPAIR_VCO: CLCTL_CODES = CLCTL_CODES(397i32);
pub const CLCTL_STORAGE_GET_DISK_INFO: CLCTL_CODES = CLCTL_CODES(401i32);
pub const CLCTL_STORAGE_GET_AVAILABLE_DISKS: CLCTL_CODES = CLCTL_CODES(405i32);
pub const CLCTL_STORAGE_IS_PATH_VALID: CLCTL_CODES = CLCTL_CODES(409i32);
pub const CLCTL_STORAGE_SYNC_CLUSDISK_DB: CLCTL_CODES = CLCTL_CODES(4194718i32);
pub const CLCTL_STORAGE_GET_DISK_NUMBER_INFO: CLCTL_CODES = CLCTL_CODES(417i32);
pub const CLCTL_QUERY_DELETE: CLCTL_CODES = CLCTL_CODES(441i32);
pub const CLCTL_IPADDRESS_RENEW_LEASE: CLCTL_CODES = CLCTL_CODES(4194750i32);
pub const CLCTL_IPADDRESS_RELEASE_LEASE: CLCTL_CODES = CLCTL_CODES(4194754i32);
pub const CLCTL_QUERY_MAINTENANCE_MODE: CLCTL_CODES = CLCTL_CODES(481i32);
pub const CLCTL_SET_MAINTENANCE_MODE: CLCTL_CODES = CLCTL_CODES(4194790i32);
pub const CLCTL_STORAGE_SET_DRIVELETTER: CLCTL_CODES = CLCTL_CODES(4194794i32);
pub const CLCTL_STORAGE_GET_DRIVELETTERS: CLCTL_CODES = CLCTL_CODES(493i32);
pub const CLCTL_STORAGE_GET_DISK_INFO_EX: CLCTL_CODES = CLCTL_CODES(497i32);
pub const CLCTL_STORAGE_GET_AVAILABLE_DISKS_EX: CLCTL_CODES = CLCTL_CODES(501i32);
pub const CLCTL_STORAGE_GET_DISK_INFO_EX2: CLCTL_CODES = CLCTL_CODES(505i32);
pub const CLCTL_STORAGE_GET_CLUSPORT_DISK_COUNT: CLCTL_CODES = CLCTL_CODES(509i32);
pub const CLCTL_STORAGE_REMAP_DRIVELETTER: CLCTL_CODES = CLCTL_CODES(513i32);
pub const CLCTL_STORAGE_GET_DISKID: CLCTL_CODES = CLCTL_CODES(517i32);
pub const CLCTL_STORAGE_IS_CLUSTERABLE: CLCTL_CODES = CLCTL_CODES(521i32);
pub const CLCTL_STORAGE_REMOVE_VM_OWNERSHIP: CLCTL_CODES = CLCTL_CODES(4194830i32);
pub const CLCTL_STORAGE_GET_MOUNTPOINTS: CLCTL_CODES = CLCTL_CODES(529i32);
pub const CLCTL_STORAGE_GET_DIRTY: CLCTL_CODES = CLCTL_CODES(537i32);
pub const CLCTL_STORAGE_GET_SHARED_VOLUME_INFO: CLCTL_CODES = CLCTL_CODES(549i32);
pub const CLCTL_STORAGE_IS_CSV_FILE: CLCTL_CODES = CLCTL_CODES(553i32);
pub const CLCTL_STORAGE_GET_RESOURCEID: CLCTL_CODES = CLCTL_CODES(557i32);
pub const CLCTL_VALIDATE_PATH: CLCTL_CODES = CLCTL_CODES(561i32);
pub const CLCTL_VALIDATE_NETNAME: CLCTL_CODES = CLCTL_CODES(565i32);
pub const CLCTL_VALIDATE_DIRECTORY: CLCTL_CODES = CLCTL_CODES(569i32);
pub const CLCTL_BATCH_BLOCK_KEY: CLCTL_CODES = CLCTL_CODES(574i32);
pub const CLCTL_BATCH_UNBLOCK_KEY: CLCTL_CODES = CLCTL_CODES(577i32);
pub const CLCTL_FILESERVER_SHARE_ADD: CLCTL_CODES = CLCTL_CODES(4194886i32);
pub const CLCTL_FILESERVER_SHARE_DEL: CLCTL_CODES = CLCTL_CODES(4194890i32);
pub const CLCTL_FILESERVER_SHARE_MODIFY: CLCTL_CODES = CLCTL_CODES(4194894i32);
pub const CLCTL_FILESERVER_SHARE_REPORT: CLCTL_CODES = CLCTL_CODES(593i32);
pub const CLCTL_NETNAME_GET_OU_FOR_VCO: CLCTL_CODES = CLCTL_CODES(4194926i32);
pub const CLCTL_ENABLE_SHARED_VOLUME_DIRECTIO: CLCTL_CODES = CLCTL_CODES(4194954i32);
pub const CLCTL_DISABLE_SHARED_VOLUME_DIRECTIO: CLCTL_CODES = CLCTL_CODES(4194958i32);
pub const CLCTL_GET_SHARED_VOLUME_ID: CLCTL_CODES = CLCTL_CODES(657i32);
pub const CLCTL_SET_CSV_MAINTENANCE_MODE: CLCTL_CODES = CLCTL_CODES(4194966i32);
pub const CLCTL_SET_SHARED_VOLUME_BACKUP_MODE: CLCTL_CODES = CLCTL_CODES(4194970i32);
pub const CLCTL_STORAGE_GET_SHARED_VOLUME_PARTITION_NAMES: CLCTL_CODES = CLCTL_CODES(669i32);
pub const CLCTL_STORAGE_GET_SHARED_VOLUME_STATES: CLCTL_CODES = CLCTL_CODES(4194978i32);
pub const CLCTL_STORAGE_IS_SHARED_VOLUME: CLCTL_CODES = CLCTL_CODES(677i32);
pub const CLCTL_GET_CLUSDB_TIMESTAMP: CLCTL_CODES = CLCTL_CODES(681i32);
pub const CLCTL_RW_MODIFY_NOOP: CLCTL_CODES = CLCTL_CODES(4194990i32);
pub const CLCTL_IS_QUORUM_BLOCKED: CLCTL_CODES = CLCTL_CODES(689i32);
pub const CLCTL_POOL_GET_DRIVE_INFO: CLCTL_CODES = CLCTL_CODES(693i32);
pub const CLCTL_GET_GUM_LOCK_OWNER: CLCTL_CODES = CLCTL_CODES(697i32);
pub const CLCTL_GET_STUCK_NODES: CLCTL_CODES = CLCTL_CODES(701i32);
pub const CLCTL_INJECT_GEM_FAULT: CLCTL_CODES = CLCTL_CODES(705i32);
pub const CLCTL_INTRODUCE_GEM_REPAIR_DELAY: CLCTL_CODES = CLCTL_CODES(709i32);
pub const CLCTL_SEND_DUMMY_GEM_MESSAGES: CLCTL_CODES = CLCTL_CODES(713i32);
pub const CLCTL_BLOCK_GEM_SEND_RECV: CLCTL_CODES = CLCTL_CODES(717i32);
pub const CLCTL_GET_GEMID_VECTOR: CLCTL_CODES = CLCTL_CODES(721i32);
pub const CLCTL_ADD_CRYPTO_CHECKPOINT_EX: CLCTL_CODES = CLCTL_CODES(4195030i32);
pub const CLCTL_GROUP_GET_LAST_MOVE_TIME: CLCTL_CODES = CLCTL_CODES(729i32);
pub const CLCTL_SET_STORAGE_CONFIGURATION: CLCTL_CODES = CLCTL_CODES(4195042i32);
pub const CLCTL_GET_STORAGE_CONFIGURATION: CLCTL_CODES = CLCTL_CODES(741i32);
pub const CLCTL_GET_STORAGE_CONFIG_ATTRIBUTES: CLCTL_CODES = CLCTL_CODES(745i32);
pub const CLCTL_REMOVE_NODE: CLCTL_CODES = CLCTL_CODES(4195054i32);
pub const CLCTL_IS_FEATURE_INSTALLED: CLCTL_CODES = CLCTL_CODES(753i32);
pub const CLCTL_IS_S2D_FEATURE_SUPPORTED: CLCTL_CODES = CLCTL_CODES(757i32);
pub const CLCTL_STORAGE_GET_PHYSICAL_DISK_INFO: CLCTL_CODES = CLCTL_CODES(761i32);
pub const CLCTL_STORAGE_GET_CLUSBFLT_PATHS: CLCTL_CODES = CLCTL_CODES(765i32);
pub const CLCTL_STORAGE_GET_CLUSBFLT_PATHINFO: CLCTL_CODES = CLCTL_CODES(769i32);
pub const CLCTL_CLEAR_NODE_CONNECTION_INFO: CLCTL_CODES = CLCTL_CODES(4195078i32);
pub const CLCTL_SET_DNS_DOMAIN: CLCTL_CODES = CLCTL_CODES(4195082i32);
pub const CTCTL_GET_ROUTESTATUS_BASIC: CLCTL_CODES = CLCTL_CODES(781i32);
pub const CTCTL_GET_ROUTESTATUS_EXTENDED: CLCTL_CODES = CLCTL_CODES(785i32);
pub const CTCTL_GET_FAULT_DOMAIN_STATE: CLCTL_CODES = CLCTL_CODES(789i32);
pub const CLCTL_NETNAME_SET_PWD_INFOEX: CLCTL_CODES = CLCTL_CODES(794i32);
pub const CLCTL_STORAGE_GET_AVAILABLE_DISKS_EX2_INT: CLCTL_CODES = CLCTL_CODES(8161i32);
pub const CLCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS: CLCTL_CODES =
    CLCTL_CODES(8417i32);
pub const CLCTL_CLOUD_WITNESS_RESOURCE_UPDATE_TOKEN: CLCTL_CODES = CLCTL_CODES(4202726i32);
pub const CLCTL_RESOURCE_PREPARE_UPGRADE: CLCTL_CODES = CLCTL_CODES(4202730i32);
pub const CLCTL_RESOURCE_UPGRADE_COMPLETED: CLCTL_CODES = CLCTL_CODES(4202734i32);
pub const CLCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS_WITH_KEY: CLCTL_CODES =
    CLCTL_CODES(8433i32);
pub const CLCTL_CLOUD_WITNESS_RESOURCE_UPDATE_KEY: CLCTL_CODES = CLCTL_CODES(4202742i32);
pub const CLCTL_REPLICATION_ADD_REPLICATION_GROUP: CLCTL_CODES = CLCTL_CODES(8514i32);
pub const CLCTL_REPLICATION_GET_LOG_INFO: CLCTL_CODES = CLCTL_CODES(8517i32);
pub const CLCTL_REPLICATION_GET_ELIGIBLE_LOGDISKS: CLCTL_CODES = CLCTL_CODES(8521i32);
pub const CLCTL_REPLICATION_GET_ELIGIBLE_TARGET_DATADISKS: CLCTL_CODES = CLCTL_CODES(8525i32);
pub const CLCTL_REPLICATION_GET_ELIGIBLE_SOURCE_DATADISKS: CLCTL_CODES = CLCTL_CODES(8529i32);
pub const CLCTL_REPLICATION_GET_REPLICATED_DISKS: CLCTL_CODES = CLCTL_CODES(8533i32);
pub const CLCTL_REPLICATION_GET_REPLICA_VOLUMES: CLCTL_CODES = CLCTL_CODES(8537i32);
pub const CLCTL_REPLICATION_GET_LOG_VOLUME: CLCTL_CODES = CLCTL_CODES(8541i32);
pub const CLCTL_REPLICATION_GET_RESOURCE_GROUP: CLCTL_CODES = CLCTL_CODES(8545i32);
pub const CLCTL_REPLICATION_GET_REPLICATED_PARTITION_INFO: CLCTL_CODES = CLCTL_CODES(8549i32);
pub const CLCTL_GET_STATE_CHANGE_TIME: CLCTL_CODES = CLCTL_CODES(11613i32);
pub const CLCTL_SET_CLUSTER_S2D_ENABLED: CLCTL_CODES = CLCTL_CODES(4205922i32);
pub const CLCTL_SET_CLUSTER_S2D_CACHE_METADATA_RESERVE_BYTES: CLCTL_CODES = CLCTL_CODES(4205934i32);
pub const CLCTL_GROUPSET_GET_GROUPS: CLCTL_CODES = CLCTL_CODES(11633i32);
pub const CLCTL_GROUPSET_GET_PROVIDER_GROUPS: CLCTL_CODES = CLCTL_CODES(11637i32);
pub const CLCTL_GROUPSET_GET_PROVIDER_GROUPSETS: CLCTL_CODES = CLCTL_CODES(11641i32);
pub const CLCTL_GROUP_GET_PROVIDER_GROUPS: CLCTL_CODES = CLCTL_CODES(11645i32);
pub const CLCTL_GROUP_GET_PROVIDER_GROUPSETS: CLCTL_CODES = CLCTL_CODES(11649i32);
pub const CLCTL_GROUP_SET_CCF_FROM_MASTER: CLCTL_CODES = CLCTL_CODES(4205958i32);
pub const CLCTL_GET_INFRASTRUCTURE_SOFS_BUFFER: CLCTL_CODES = CLCTL_CODES(11657i32);
pub const CLCTL_SET_INFRASTRUCTURE_SOFS_BUFFER: CLCTL_CODES = CLCTL_CODES(4205966i32);
pub const CLCTL_NOTIFY_INFRASTRUCTURE_SOFS_CHANGED: CLCTL_CODES = CLCTL_CODES(4205970i32);
pub const CLCTL_SCALEOUT_COMMAND: CLCTL_CODES = CLCTL_CODES(4205974i32);
pub const CLCTL_SCALEOUT_CONTROL: CLCTL_CODES = CLCTL_CODES(4205978i32);
pub const CLCTL_SCALEOUT_GET_CLUSTERS: CLCTL_CODES = CLCTL_CODES(4205981i32);
pub const CLCTL_RELOAD_AUTOLOGGER_CONFIG: CLCTL_CODES = CLCTL_CODES(11730i32);
pub const CLCTL_STORAGE_RENAME_SHARED_VOLUME: CLCTL_CODES = CLCTL_CODES(11734i32);
pub const CLCTL_STORAGE_RENAME_SHARED_VOLUME_GUID: CLCTL_CODES = CLCTL_CODES(11738i32);
pub const CLCTL_ENUM_AFFINITY_RULE_NAMES: CLCTL_CODES = CLCTL_CODES(11741i32);
pub const CLCTL_GET_NODES_IN_FD: CLCTL_CODES = CLCTL_CODES(11745i32);
pub const CLCTL_FORCE_DB_FLUSH: CLCTL_CODES = CLCTL_CODES(4206054i32);
pub const CLCTL_DELETE: CLCTL_CODES = CLCTL_CODES(5242886i32);
pub const CLCTL_INSTALL_NODE: CLCTL_CODES = CLCTL_CODES(5242890i32);
pub const CLCTL_EVICT_NODE: CLCTL_CODES = CLCTL_CODES(5242894i32);
pub const CLCTL_ADD_DEPENDENCY: CLCTL_CODES = CLCTL_CODES(5242898i32);
pub const CLCTL_REMOVE_DEPENDENCY: CLCTL_CODES = CLCTL_CODES(5242902i32);
pub const CLCTL_ADD_OWNER: CLCTL_CODES = CLCTL_CODES(5242906i32);
pub const CLCTL_REMOVE_OWNER: CLCTL_CODES = CLCTL_CODES(5242910i32);
pub const CLCTL_SET_NAME: CLCTL_CODES = CLCTL_CODES(5242918i32);
pub const CLCTL_CLUSTER_NAME_CHANGED: CLCTL_CODES = CLCTL_CODES(5242922i32);
pub const CLCTL_CLUSTER_VERSION_CHANGED: CLCTL_CODES = CLCTL_CODES(5242926i32);
pub const CLCTL_FIXUP_ON_UPGRADE: CLCTL_CODES = CLCTL_CODES(5242930i32);
pub const CLCTL_STARTING_PHASE1: CLCTL_CODES = CLCTL_CODES(5242934i32);
pub const CLCTL_STARTING_PHASE2: CLCTL_CODES = CLCTL_CODES(5242938i32);
pub const CLCTL_HOLD_IO: CLCTL_CODES = CLCTL_CODES(5242942i32);
pub const CLCTL_RESUME_IO: CLCTL_CODES = CLCTL_CODES(5242946i32);
pub const CLCTL_FORCE_QUORUM: CLCTL_CODES = CLCTL_CODES(5242950i32);
pub const CLCTL_INITIALIZE: CLCTL_CODES = CLCTL_CODES(5242954i32);
pub const CLCTL_STATE_CHANGE_REASON: CLCTL_CODES = CLCTL_CODES(5242958i32);
pub const CLCTL_PROVIDER_STATE_CHANGE: CLCTL_CODES = CLCTL_CODES(5242962i32);
pub const CLCTL_LEAVING_GROUP: CLCTL_CODES = CLCTL_CODES(5242966i32);
pub const CLCTL_JOINING_GROUP: CLCTL_CODES = CLCTL_CODES(5242970i32);
pub const CLCTL_FSWITNESS_GET_EPOCH_INFO: CLCTL_CODES = CLCTL_CODES(1048669i32);
pub const CLCTL_FSWITNESS_SET_EPOCH_INFO: CLCTL_CODES = CLCTL_CODES(5242978i32);
pub const CLCTL_FSWITNESS_RELEASE_LOCK: CLCTL_CODES = CLCTL_CODES(5242982i32);
pub const CLCTL_NETNAME_CREDS_NOTIFYCAM: CLCTL_CODES = CLCTL_CODES(5242986i32);
pub const CLCTL_NOTIFY_QUORUM_STATUS: CLCTL_CODES = CLCTL_CODES(5243006i32);
pub const CLCTL_NOTIFY_MONITOR_SHUTTING_DOWN: CLCTL_CODES = CLCTL_CODES(1048705i32);
pub const CLCTL_UNDELETE: CLCTL_CODES = CLCTL_CODES(5243014i32);
pub const CLCTL_GET_OPERATION_CONTEXT: CLCTL_CODES = CLCTL_CODES(1057001i32);
pub const CLCTL_NOTIFY_OWNER_CHANGE: CLCTL_CODES = CLCTL_CODES(5251362i32);
pub const CLCTL_VALIDATE_CHANGE_GROUP: CLCTL_CODES = CLCTL_CODES(1057061i32);
pub const CLCTL_CHECK_DRAIN_VETO: CLCTL_CODES = CLCTL_CODES(1057069i32);
pub const CLCTL_NOTIFY_DRAIN_COMPLETE: CLCTL_CODES = CLCTL_CODES(1057073i32);
impl ::std::convert::From<i32> for CLCTL_CODES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLCTL_CODES {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLCTL_GLOBAL_SHIFT: u32 = 23u32;
pub const CLCTL_INTERNAL_SHIFT: u32 = 20u32;
pub const CLCTL_MODIFY_SHIFT: u32 = 22u32;
pub const CLCTL_USER_SHIFT: u32 = 21u32;
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CLRES_CALLBACK_FUNCTION_TABLE {
    pub LogEvent: ::std::option::Option<PLOG_EVENT_ROUTINE>,
    pub SetResourceStatusEx: ::std::option::Option<PSET_RESOURCE_STATUS_ROUTINE_EX>,
    pub SetResourceLockedMode: ::std::option::Option<PSET_RESOURCE_LOCKED_MODE_ROUTINE>,
    pub SignalFailure: ::std::option::Option<PSIGNAL_FAILURE_ROUTINE>,
    pub SetResourceInMemoryNodeLocalProperties:
        ::std::option::Option<PSET_RESOURCE_INMEMORY_NODELOCAL_PROPERTIES_ROUTINE>,
    pub EndControlCall: ::std::option::Option<PEND_CONTROL_CALL>,
    pub EndTypeControlCall: ::std::option::Option<PEND_TYPE_CONTROL_CALL>,
    pub ExtendControlCall: ::std::option::Option<PEXTEND_RES_CONTROL_CALL>,
    pub ExtendTypeControlCall: ::std::option::Option<PEXTEND_RES_TYPE_CONTROL_CALL>,
    pub RaiseResTypeNotification: ::std::option::Option<PRAISE_RES_TYPE_NOTIFICATION>,
    pub ChangeResourceProcessForDumps: ::std::option::Option<PCHANGE_RESOURCE_PROCESS_FOR_DUMPS>,
    pub ChangeResTypeProcessForDumps: ::std::option::Option<PCHANGE_RES_TYPE_PROCESS_FOR_DUMPS>,
    pub SetInternalState: ::std::option::Option<PSET_INTERNAL_STATE>,
    pub SetResourceLockedModeEx: ::std::option::Option<PSET_RESOURCE_LOCKED_MODE_EX_ROUTINE>,
    pub RequestDump: ::std::option::Option<PREQUEST_DUMP_ROUTINE>,
}
#[cfg(feature = "Win32_Foundation")]
impl CLRES_CALLBACK_FUNCTION_TABLE {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CLRES_CALLBACK_FUNCTION_TABLE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CLRES_CALLBACK_FUNCTION_TABLE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLRES_CALLBACK_FUNCTION_TABLE").finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CLRES_CALLBACK_FUNCTION_TABLE {
    fn eq(&self, other: &Self) -> bool {
        self.LogEvent.map(|f| f as usize) == other.LogEvent.map(|f| f as usize)
            && self.SetResourceStatusEx.map(|f| f as usize)
                == other.SetResourceStatusEx.map(|f| f as usize)
            && self.SetResourceLockedMode.map(|f| f as usize)
                == other.SetResourceLockedMode.map(|f| f as usize)
            && self.SignalFailure.map(|f| f as usize) == other.SignalFailure.map(|f| f as usize)
            && self
                .SetResourceInMemoryNodeLocalProperties
                .map(|f| f as usize)
                == other
                    .SetResourceInMemoryNodeLocalProperties
                    .map(|f| f as usize)
            && self.EndControlCall.map(|f| f as usize) == other.EndControlCall.map(|f| f as usize)
            && self.EndTypeControlCall.map(|f| f as usize)
                == other.EndTypeControlCall.map(|f| f as usize)
            && self.ExtendControlCall.map(|f| f as usize)
                == other.ExtendControlCall.map(|f| f as usize)
            && self.ExtendTypeControlCall.map(|f| f as usize)
                == other.ExtendTypeControlCall.map(|f| f as usize)
            && self.RaiseResTypeNotification.map(|f| f as usize)
                == other.RaiseResTypeNotification.map(|f| f as usize)
            && self.ChangeResourceProcessForDumps.map(|f| f as usize)
                == other.ChangeResourceProcessForDumps.map(|f| f as usize)
            && self.ChangeResTypeProcessForDumps.map(|f| f as usize)
                == other.ChangeResTypeProcessForDumps.map(|f| f as usize)
            && self.SetInternalState.map(|f| f as usize)
                == other.SetInternalState.map(|f| f as usize)
            && self.SetResourceLockedModeEx.map(|f| f as usize)
                == other.SetResourceLockedModeEx.map(|f| f as usize)
            && self.RequestDump.map(|f| f as usize) == other.RequestDump.map(|f| f as usize)
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CLRES_CALLBACK_FUNCTION_TABLE {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CLRES_CALLBACK_FUNCTION_TABLE {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::clone::Clone for CLRES_FUNCTION_TABLE {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub struct CLRES_FUNCTION_TABLE {
    pub TableSize: u32,
    pub Version: u32,
    pub Anonymous: CLRES_FUNCTION_TABLE_0,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl CLRES_FUNCTION_TABLE {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::default::Default for CLRES_FUNCTION_TABLE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::cmp::PartialEq for CLRES_FUNCTION_TABLE {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::cmp::Eq for CLRES_FUNCTION_TABLE {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
unsafe impl ::windows::runtime::Abi for CLRES_FUNCTION_TABLE {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::clone::Clone for CLRES_FUNCTION_TABLE_0 {
    fn clone(&self) -> Self {
        unimplemented!()
    }
}
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub union CLRES_FUNCTION_TABLE_0 {
    pub V1Functions: ::std::mem::ManuallyDrop<CLRES_V1_FUNCTIONS>,
    pub V2Functions: ::std::mem::ManuallyDrop<CLRES_V2_FUNCTIONS>,
    pub V3Functions: ::std::mem::ManuallyDrop<CLRES_V3_FUNCTIONS>,
    pub V4Functions: ::std::mem::ManuallyDrop<CLRES_V4_FUNCTIONS>,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl CLRES_FUNCTION_TABLE_0 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::default::Default for CLRES_FUNCTION_TABLE_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::cmp::PartialEq for CLRES_FUNCTION_TABLE_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::cmp::Eq for CLRES_FUNCTION_TABLE_0 {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
unsafe impl ::windows::runtime::Abi for CLRES_FUNCTION_TABLE_0 {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub struct CLRES_V1_FUNCTIONS {
    pub Open: ::std::option::Option<POPEN_ROUTINE>,
    pub Close: ::std::option::Option<PCLOSE_ROUTINE>,
    pub Online: ::std::option::Option<PONLINE_ROUTINE>,
    pub Offline: ::std::option::Option<POFFLINE_ROUTINE>,
    pub Terminate: ::std::option::Option<PTERMINATE_ROUTINE>,
    pub LooksAlive: ::std::option::Option<PLOOKS_ALIVE_ROUTINE>,
    pub IsAlive: ::std::option::Option<PIS_ALIVE_ROUTINE>,
    pub Arbitrate: ::std::option::Option<PARBITRATE_ROUTINE>,
    pub Release: ::std::option::Option<PRELEASE_ROUTINE>,
    pub ResourceControl: ::std::option::Option<PRESOURCE_CONTROL_ROUTINE>,
    pub ResourceTypeControl: ::std::option::Option<PRESOURCE_TYPE_CONTROL_ROUTINE>,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl CLRES_V1_FUNCTIONS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::default::Default for CLRES_V1_FUNCTIONS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::fmt::Debug for CLRES_V1_FUNCTIONS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLRES_V1_FUNCTIONS").finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::cmp::PartialEq for CLRES_V1_FUNCTIONS {
    fn eq(&self, other: &Self) -> bool {
        self.Open.map(|f| f as usize) == other.Open.map(|f| f as usize)
            && self.Close.map(|f| f as usize) == other.Close.map(|f| f as usize)
            && self.Online.map(|f| f as usize) == other.Online.map(|f| f as usize)
            && self.Offline.map(|f| f as usize) == other.Offline.map(|f| f as usize)
            && self.Terminate.map(|f| f as usize) == other.Terminate.map(|f| f as usize)
            && self.LooksAlive.map(|f| f as usize) == other.LooksAlive.map(|f| f as usize)
            && self.IsAlive.map(|f| f as usize) == other.IsAlive.map(|f| f as usize)
            && self.Arbitrate.map(|f| f as usize) == other.Arbitrate.map(|f| f as usize)
            && self.Release.map(|f| f as usize) == other.Release.map(|f| f as usize)
            && self.ResourceControl.map(|f| f as usize) == other.ResourceControl.map(|f| f as usize)
            && self.ResourceTypeControl.map(|f| f as usize)
                == other.ResourceTypeControl.map(|f| f as usize)
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::cmp::Eq for CLRES_V1_FUNCTIONS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
unsafe impl ::windows::runtime::Abi for CLRES_V1_FUNCTIONS {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub struct CLRES_V2_FUNCTIONS {
    pub Open: ::std::option::Option<POPEN_V2_ROUTINE>,
    pub Close: ::std::option::Option<PCLOSE_ROUTINE>,
    pub Online: ::std::option::Option<PONLINE_V2_ROUTINE>,
    pub Offline: ::std::option::Option<POFFLINE_V2_ROUTINE>,
    pub Terminate: ::std::option::Option<PTERMINATE_ROUTINE>,
    pub LooksAlive: ::std::option::Option<PLOOKS_ALIVE_ROUTINE>,
    pub IsAlive: ::std::option::Option<PIS_ALIVE_ROUTINE>,
    pub Arbitrate: ::std::option::Option<PARBITRATE_ROUTINE>,
    pub Release: ::std::option::Option<PRELEASE_ROUTINE>,
    pub ResourceControl: ::std::option::Option<PRESOURCE_CONTROL_ROUTINE>,
    pub ResourceTypeControl: ::std::option::Option<PRESOURCE_TYPE_CONTROL_ROUTINE>,
    pub Cancel: ::std::option::Option<PCANCEL_ROUTINE>,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl CLRES_V2_FUNCTIONS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::default::Default for CLRES_V2_FUNCTIONS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::fmt::Debug for CLRES_V2_FUNCTIONS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLRES_V2_FUNCTIONS").finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::cmp::PartialEq for CLRES_V2_FUNCTIONS {
    fn eq(&self, other: &Self) -> bool {
        self.Open.map(|f| f as usize) == other.Open.map(|f| f as usize)
            && self.Close.map(|f| f as usize) == other.Close.map(|f| f as usize)
            && self.Online.map(|f| f as usize) == other.Online.map(|f| f as usize)
            && self.Offline.map(|f| f as usize) == other.Offline.map(|f| f as usize)
            && self.Terminate.map(|f| f as usize) == other.Terminate.map(|f| f as usize)
            && self.LooksAlive.map(|f| f as usize) == other.LooksAlive.map(|f| f as usize)
            && self.IsAlive.map(|f| f as usize) == other.IsAlive.map(|f| f as usize)
            && self.Arbitrate.map(|f| f as usize) == other.Arbitrate.map(|f| f as usize)
            && self.Release.map(|f| f as usize) == other.Release.map(|f| f as usize)
            && self.ResourceControl.map(|f| f as usize) == other.ResourceControl.map(|f| f as usize)
            && self.ResourceTypeControl.map(|f| f as usize)
                == other.ResourceTypeControl.map(|f| f as usize)
            && self.Cancel.map(|f| f as usize) == other.Cancel.map(|f| f as usize)
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::cmp::Eq for CLRES_V2_FUNCTIONS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
unsafe impl ::windows::runtime::Abi for CLRES_V2_FUNCTIONS {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub struct CLRES_V3_FUNCTIONS {
    pub Open: ::std::option::Option<POPEN_V2_ROUTINE>,
    pub Close: ::std::option::Option<PCLOSE_ROUTINE>,
    pub Online: ::std::option::Option<PONLINE_V2_ROUTINE>,
    pub Offline: ::std::option::Option<POFFLINE_V2_ROUTINE>,
    pub Terminate: ::std::option::Option<PTERMINATE_ROUTINE>,
    pub LooksAlive: ::std::option::Option<PLOOKS_ALIVE_ROUTINE>,
    pub IsAlive: ::std::option::Option<PIS_ALIVE_ROUTINE>,
    pub Arbitrate: ::std::option::Option<PARBITRATE_ROUTINE>,
    pub Release: ::std::option::Option<PRELEASE_ROUTINE>,
    pub BeginResourceControl: ::std::option::Option<PBEGIN_RESCALL_ROUTINE>,
    pub BeginResourceTypeControl: ::std::option::Option<PBEGIN_RESTYPECALL_ROUTINE>,
    pub Cancel: ::std::option::Option<PCANCEL_ROUTINE>,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl CLRES_V3_FUNCTIONS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::default::Default for CLRES_V3_FUNCTIONS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::fmt::Debug for CLRES_V3_FUNCTIONS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLRES_V3_FUNCTIONS").finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::cmp::PartialEq for CLRES_V3_FUNCTIONS {
    fn eq(&self, other: &Self) -> bool {
        self.Open.map(|f| f as usize) == other.Open.map(|f| f as usize)
            && self.Close.map(|f| f as usize) == other.Close.map(|f| f as usize)
            && self.Online.map(|f| f as usize) == other.Online.map(|f| f as usize)
            && self.Offline.map(|f| f as usize) == other.Offline.map(|f| f as usize)
            && self.Terminate.map(|f| f as usize) == other.Terminate.map(|f| f as usize)
            && self.LooksAlive.map(|f| f as usize) == other.LooksAlive.map(|f| f as usize)
            && self.IsAlive.map(|f| f as usize) == other.IsAlive.map(|f| f as usize)
            && self.Arbitrate.map(|f| f as usize) == other.Arbitrate.map(|f| f as usize)
            && self.Release.map(|f| f as usize) == other.Release.map(|f| f as usize)
            && self.BeginResourceControl.map(|f| f as usize)
                == other.BeginResourceControl.map(|f| f as usize)
            && self.BeginResourceTypeControl.map(|f| f as usize)
                == other.BeginResourceTypeControl.map(|f| f as usize)
            && self.Cancel.map(|f| f as usize) == other.Cancel.map(|f| f as usize)
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::cmp::Eq for CLRES_V3_FUNCTIONS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
unsafe impl ::windows::runtime::Abi for CLRES_V3_FUNCTIONS {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub struct CLRES_V4_FUNCTIONS {
    pub Open: ::std::option::Option<POPEN_V2_ROUTINE>,
    pub Close: ::std::option::Option<PCLOSE_ROUTINE>,
    pub Online: ::std::option::Option<PONLINE_V2_ROUTINE>,
    pub Offline: ::std::option::Option<POFFLINE_V2_ROUTINE>,
    pub Terminate: ::std::option::Option<PTERMINATE_ROUTINE>,
    pub LooksAlive: ::std::option::Option<PLOOKS_ALIVE_ROUTINE>,
    pub IsAlive: ::std::option::Option<PIS_ALIVE_ROUTINE>,
    pub Arbitrate: ::std::option::Option<PARBITRATE_ROUTINE>,
    pub Release: ::std::option::Option<PRELEASE_ROUTINE>,
    pub BeginResourceControl: ::std::option::Option<PBEGIN_RESCALL_ROUTINE>,
    pub BeginResourceTypeControl: ::std::option::Option<PBEGIN_RESTYPECALL_ROUTINE>,
    pub Cancel: ::std::option::Option<PCANCEL_ROUTINE>,
    pub BeginResourceControlAsUser: ::std::option::Option<PBEGIN_RESCALL_AS_USER_ROUTINE>,
    pub BeginResourceTypeControlAsUser: ::std::option::Option<PBEGIN_RESTYPECALL_AS_USER_ROUTINE>,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl CLRES_V4_FUNCTIONS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::default::Default for CLRES_V4_FUNCTIONS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::fmt::Debug for CLRES_V4_FUNCTIONS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLRES_V4_FUNCTIONS").finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::cmp::PartialEq for CLRES_V4_FUNCTIONS {
    fn eq(&self, other: &Self) -> bool {
        self.Open.map(|f| f as usize) == other.Open.map(|f| f as usize)
            && self.Close.map(|f| f as usize) == other.Close.map(|f| f as usize)
            && self.Online.map(|f| f as usize) == other.Online.map(|f| f as usize)
            && self.Offline.map(|f| f as usize) == other.Offline.map(|f| f as usize)
            && self.Terminate.map(|f| f as usize) == other.Terminate.map(|f| f as usize)
            && self.LooksAlive.map(|f| f as usize) == other.LooksAlive.map(|f| f as usize)
            && self.IsAlive.map(|f| f as usize) == other.IsAlive.map(|f| f as usize)
            && self.Arbitrate.map(|f| f as usize) == other.Arbitrate.map(|f| f as usize)
            && self.Release.map(|f| f as usize) == other.Release.map(|f| f as usize)
            && self.BeginResourceControl.map(|f| f as usize)
                == other.BeginResourceControl.map(|f| f as usize)
            && self.BeginResourceTypeControl.map(|f| f as usize)
                == other.BeginResourceTypeControl.map(|f| f as usize)
            && self.Cancel.map(|f| f as usize) == other.Cancel.map(|f| f as usize)
            && self.BeginResourceControlAsUser.map(|f| f as usize)
                == other.BeginResourceControlAsUser.map(|f| f as usize)
            && self.BeginResourceTypeControlAsUser.map(|f| f as usize)
                == other.BeginResourceTypeControlAsUser.map(|f| f as usize)
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::std::cmp::Eq for CLRES_V4_FUNCTIONS {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
unsafe impl ::windows::runtime::Abi for CLRES_V4_FUNCTIONS {
    type Abi = ::std::mem::ManuallyDrop<Self>;
    type DefaultType = Self;
}
pub const CLRES_VERSION_V1_00: u32 = 256u32;
pub const CLRES_VERSION_V2_00: u32 = 512u32;
pub const CLRES_VERSION_V3_00: u32 = 768u32;
pub const CLRES_VERSION_V4_00: u32 = 1024u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUADMEX_OBJECT_TYPE(pub i32);
pub const CLUADMEX_OT_NONE: CLUADMEX_OBJECT_TYPE = CLUADMEX_OBJECT_TYPE(0i32);
pub const CLUADMEX_OT_CLUSTER: CLUADMEX_OBJECT_TYPE = CLUADMEX_OBJECT_TYPE(1i32);
pub const CLUADMEX_OT_NODE: CLUADMEX_OBJECT_TYPE = CLUADMEX_OBJECT_TYPE(2i32);
pub const CLUADMEX_OT_GROUP: CLUADMEX_OBJECT_TYPE = CLUADMEX_OBJECT_TYPE(3i32);
pub const CLUADMEX_OT_RESOURCE: CLUADMEX_OBJECT_TYPE = CLUADMEX_OBJECT_TYPE(4i32);
pub const CLUADMEX_OT_RESOURCETYPE: CLUADMEX_OBJECT_TYPE = CLUADMEX_OBJECT_TYPE(5i32);
pub const CLUADMEX_OT_NETWORK: CLUADMEX_OBJECT_TYPE = CLUADMEX_OBJECT_TYPE(6i32);
pub const CLUADMEX_OT_NETINTERFACE: CLUADMEX_OBJECT_TYPE = CLUADMEX_OBJECT_TYPE(7i32);
impl ::std::convert::From<i32> for CLUADMEX_OBJECT_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUADMEX_OBJECT_TYPE {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUSAPI_CHANGE_ACCESS: i32 = 2i32;
pub const CLUSAPI_CHANGE_RESOURCE_GROUP_FORCE_MOVE_TO_CSV: u64 = 1u64;
pub const CLUSAPI_GROUP_MOVE_FAILBACK: u32 = 16u32;
pub const CLUSAPI_GROUP_MOVE_HIGH_PRIORITY_START: u32 = 8u32;
pub const CLUSAPI_GROUP_MOVE_IGNORE_AFFINITY_RULE: u32 = 32u32;
pub const CLUSAPI_GROUP_MOVE_IGNORE_RESOURCE_STATUS: u32 = 1u32;
pub const CLUSAPI_GROUP_MOVE_QUEUE_ENABLED: u32 = 4u32;
pub const CLUSAPI_GROUP_MOVE_RETURN_TO_SOURCE_NODE_ON_ERROR: u32 = 2u32;
pub const CLUSAPI_GROUP_OFFLINE_IGNORE_RESOURCE_STATUS: u32 = 1u32;
pub const CLUSAPI_GROUP_ONLINE_BEST_POSSIBLE_NODE: u32 = 4u32;
pub const CLUSAPI_GROUP_ONLINE_IGNORE_AFFINITY_RULE: u32 = 8u32;
pub const CLUSAPI_GROUP_ONLINE_IGNORE_RESOURCE_STATUS: u32 = 1u32;
pub const CLUSAPI_GROUP_ONLINE_SYNCHRONOUS: u32 = 2u32;
pub const CLUSAPI_NODE_AVOID_PLACEMENT: u32 = 2u32;
pub const CLUSAPI_NODE_PAUSE_REMAIN_ON_PAUSED_NODE_ON_MOVE_ERROR: u32 = 1u32;
pub const CLUSAPI_NODE_PAUSE_RETRY_DRAIN_ON_FAILURE: u32 = 4u32;
pub const CLUSAPI_NO_ACCESS: i32 = 4i32;
pub const CLUSAPI_READ_ACCESS: i32 = 1i32;
pub const CLUSAPI_RESOURCE_OFFLINE_DO_NOT_UPDATE_PERSISTENT_STATE: u32 = 4u32;
pub const CLUSAPI_RESOURCE_OFFLINE_FORCE_WITH_TERMINATION: u32 = 2u32;
pub const CLUSAPI_RESOURCE_OFFLINE_IGNORE_RESOURCE_STATUS: u32 = 1u32;
pub const CLUSAPI_RESOURCE_OFFLINE_REASON_BEING_DELETED: u32 = 8u32;
pub const CLUSAPI_RESOURCE_OFFLINE_REASON_BEING_RESTARTED: u32 = 16u32;
pub const CLUSAPI_RESOURCE_OFFLINE_REASON_MOVING: u32 = 2u32;
pub const CLUSAPI_RESOURCE_OFFLINE_REASON_NONE: u32 = 0u32;
pub const CLUSAPI_RESOURCE_OFFLINE_REASON_PREEMPTED: u32 = 32u32;
pub const CLUSAPI_RESOURCE_OFFLINE_REASON_SHUTTING_DOWN: u32 = 64u32;
pub const CLUSAPI_RESOURCE_OFFLINE_REASON_UNKNOWN: u32 = 1u32;
pub const CLUSAPI_RESOURCE_OFFLINE_REASON_USER_REQUESTED: u32 = 4u32;
pub const CLUSAPI_RESOURCE_ONLINE_BEST_POSSIBLE_NODE: u32 = 8u32;
pub const CLUSAPI_RESOURCE_ONLINE_DO_NOT_UPDATE_PERSISTENT_STATE: u32 = 2u32;
pub const CLUSAPI_RESOURCE_ONLINE_IGNORE_AFFINITY_RULE: u32 = 32u32;
pub const CLUSAPI_RESOURCE_ONLINE_IGNORE_RESOURCE_STATUS: u32 = 1u32;
pub const CLUSAPI_RESOURCE_ONLINE_NECESSARY_FOR_QUORUM: u32 = 4u32;
pub const CLUSAPI_VALID_CHANGE_RESOURCE_GROUP_FLAGS: u64 = 1u64;
pub const CLUSAPI_VERSION: u32 = 2560u32;
pub const CLUSAPI_VERSION_RS3: u32 = 2560u32;
pub const CLUSAPI_VERSION_SERVER2008: u32 = 1536u32;
pub const CLUSAPI_VERSION_SERVER2008R2: u32 = 1792u32;
pub const CLUSAPI_VERSION_WINDOWS8: u32 = 1793u32;
pub const CLUSAPI_VERSION_WINDOWSBLUE: u32 = 1794u32;
pub const CLUSAPI_VERSION_WINTHRESHOLD: u32 = 1795u32;
pub const CLUSCTL_ACCESS_MODE_MASK: u32 = 3u32;
pub const CLUSCTL_ACCESS_SHIFT: u32 = 0u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSCTL_AFFINITYRULE_CODES(pub i32);
pub const CLUSCTL_AFFINITYRULE_GET_COMMON_PROPERTIES: CLUSCTL_AFFINITYRULE_CODES =
    CLUSCTL_AFFINITYRULE_CODES(150995033i32);
pub const CLUSCTL_AFFINITYRULE_GET_RO_COMMON_PROPERTIES: CLUSCTL_AFFINITYRULE_CODES =
    CLUSCTL_AFFINITYRULE_CODES(150995029i32);
pub const CLUSCTL_AFFINITYRULE_SET_COMMON_PROPERTIES: CLUSCTL_AFFINITYRULE_CODES =
    CLUSCTL_AFFINITYRULE_CODES(155189342i32);
pub const CLUSCTL_AFFINITYRULE_GET_ID: CLUSCTL_AFFINITYRULE_CODES =
    CLUSCTL_AFFINITYRULE_CODES(150995001i32);
pub const CLUSCTL_AFFINITYRULE_GET_GROUPNAMES: CLUSCTL_AFFINITYRULE_CODES =
    CLUSCTL_AFFINITYRULE_CODES(151006577i32);
impl ::std::convert::From<i32> for CLUSCTL_AFFINITYRULE_CODES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSCTL_AFFINITYRULE_CODES {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSCTL_CLUSTER_CODES(pub i32);
pub const CLUSCTL_CLUSTER_UNKNOWN: CLUSCTL_CLUSTER_CODES = CLUSCTL_CLUSTER_CODES(117440512i32);
pub const CLUSCTL_CLUSTER_GET_FQDN: CLUSCTL_CLUSTER_CODES = CLUSCTL_CLUSTER_CODES(117440573i32);
pub const CLUSCTL_CLUSTER_SET_STORAGE_CONFIGURATION: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(121635554i32);
pub const CLUSCTL_CLUSTER_GET_STORAGE_CONFIGURATION: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117441253i32);
pub const CLUSCTL_CLUSTER_GET_STORAGE_CONFIG_ATTRIBUTES: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117441257i32);
pub const CLUSCTL_CLUSTER_ENUM_COMMON_PROPERTIES: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117440593i32);
pub const CLUSCTL_CLUSTER_GET_RO_COMMON_PROPERTIES: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117440597i32);
pub const CLUSCTL_CLUSTER_GET_COMMON_PROPERTIES: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117440601i32);
pub const CLUSCTL_CLUSTER_SET_COMMON_PROPERTIES: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(121634910i32);
pub const CLUSCTL_CLUSTER_VALIDATE_COMMON_PROPERTIES: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117440609i32);
pub const CLUSCTL_CLUSTER_ENUM_PRIVATE_PROPERTIES: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117440633i32);
pub const CLUSCTL_CLUSTER_GET_RO_PRIVATE_PROPERTIES: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117440637i32);
pub const CLUSCTL_CLUSTER_GET_PRIVATE_PROPERTIES: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117440641i32);
pub const CLUSCTL_CLUSTER_SET_PRIVATE_PROPERTIES: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(121634950i32);
pub const CLUSCTL_CLUSTER_VALIDATE_PRIVATE_PROPERTIES: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117440649i32);
pub const CLUSCTL_CLUSTER_GET_COMMON_PROPERTY_FMTS: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117440613i32);
pub const CLUSCTL_CLUSTER_GET_PRIVATE_PROPERTY_FMTS: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117440653i32);
pub const CLUSCTL_CLUSTER_CHECK_VOTER_EVICT: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117440581i32);
pub const CLUSCTL_CLUSTER_CHECK_VOTER_DOWN: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117440585i32);
pub const CLUSCTL_CLUSTER_SHUTDOWN: CLUSCTL_CLUSTER_CODES = CLUSCTL_CLUSTER_CODES(117440589i32);
pub const CLUSCTL_CLUSTER_BATCH_BLOCK_KEY: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117441086i32);
pub const CLUSCTL_CLUSTER_BATCH_UNBLOCK_KEY: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117441089i32);
pub const CLUSCTL_CLUSTER_GET_SHARED_VOLUME_ID: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117441169i32);
pub const CLUSCTL_CLUSTER_GET_CLUSDB_TIMESTAMP: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117441193i32);
pub const CLUSCTL_CLUSTER_GET_GUM_LOCK_OWNER: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117441209i32);
pub const CLUSCTL_CLUSTER_REMOVE_NODE: CLUSCTL_CLUSTER_CODES = CLUSCTL_CLUSTER_CODES(121635566i32);
pub const CLUSCTL_CLUSTER_SET_ACCOUNT_ACCESS: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(121635058i32);
pub const CLUSCTL_CLUSTER_CLEAR_NODE_CONNECTION_INFO: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(121635590i32);
pub const CLUSCTL_CLUSTER_SET_DNS_DOMAIN: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(121635594i32);
pub const CLUSCTL_CLUSTER_SET_CLUSTER_S2D_ENABLED: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(121646434i32);
pub const CLUSCTL_CLUSTER_SET_CLUSTER_S2D_CACHE_METADATA_RESERVE_BYTES: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(121646446i32);
pub const CLUSCTL_CLUSTER_STORAGE_RENAME_SHARED_VOLUME: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117452246i32);
pub const CLUSCTL_CLUSTER_STORAGE_RENAME_SHARED_VOLUME_GUID: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117452250i32);
pub const CLUSCTL_CLUSTER_RELOAD_AUTOLOGGER_CONFIG: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117452242i32);
pub const CLUSCTL_CLUSTER_ENUM_AFFINITY_RULE_NAMES: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117452253i32);
pub const CLUSCTL_CLUSTER_GET_NODES_IN_FD: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117452257i32);
pub const CLUSCTL_CLUSTER_FORCE_FLUSH_DB: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(121646566i32);
pub const CLUSCTL_CLUSTER_GET_CLMUSR_TOKEN: CLUSCTL_CLUSTER_CODES =
    CLUSCTL_CLUSTER_CODES(117440877i32);
impl ::std::convert::From<i32> for CLUSCTL_CLUSTER_CODES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSCTL_CLUSTER_CODES {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUSCTL_CONTROL_CODE_MASK: u32 = 4194303u32;
pub const CLUSCTL_FUNCTION_SHIFT: u32 = 2u32;
pub const CLUSCTL_GET_OPERATION_CONTEXT_PARAMS_VERSION_1: u32 = 1u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSCTL_GROUPSET_CODES(pub i32);
pub const CLUSCTL_GROUPSET_GET_COMMON_PROPERTIES: CLUSCTL_GROUPSET_CODES =
    CLUSCTL_GROUPSET_CODES(134217817i32);
pub const CLUSCTL_GROUPSET_GET_RO_COMMON_PROPERTIES: CLUSCTL_GROUPSET_CODES =
    CLUSCTL_GROUPSET_CODES(134217813i32);
pub const CLUSCTL_GROUPSET_SET_COMMON_PROPERTIES: CLUSCTL_GROUPSET_CODES =
    CLUSCTL_GROUPSET_CODES(138412126i32);
pub const CLUSCTL_GROUPSET_GET_GROUPS: CLUSCTL_GROUPSET_CODES =
    CLUSCTL_GROUPSET_CODES(134229361i32);
pub const CLUSCTL_GROUPSET_GET_PROVIDER_GROUPS: CLUSCTL_GROUPSET_CODES =
    CLUSCTL_GROUPSET_CODES(134229365i32);
pub const CLUSCTL_GROUPSET_GET_PROVIDER_GROUPSETS: CLUSCTL_GROUPSET_CODES =
    CLUSCTL_GROUPSET_CODES(134229369i32);
pub const CLUSCTL_GROUP_GET_PROVIDER_GROUPS: CLUSCTL_GROUPSET_CODES =
    CLUSCTL_GROUPSET_CODES(134229373i32);
pub const CLUSCTL_GROUP_GET_PROVIDER_GROUPSETS: CLUSCTL_GROUPSET_CODES =
    CLUSCTL_GROUPSET_CODES(134229377i32);
pub const CLUSCTL_GROUPSET_GET_ID: CLUSCTL_GROUPSET_CODES = CLUSCTL_GROUPSET_CODES(134217785i32);
impl ::std::convert::From<i32> for CLUSCTL_GROUPSET_CODES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSCTL_GROUPSET_CODES {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSCTL_GROUP_CODES(pub i32);
pub const CLUSCTL_GROUP_UNKNOWN: CLUSCTL_GROUP_CODES = CLUSCTL_GROUP_CODES(50331648i32);
pub const CLUSCTL_GROUP_GET_CHARACTERISTICS: CLUSCTL_GROUP_CODES = CLUSCTL_GROUP_CODES(50331653i32);
pub const CLUSCTL_GROUP_GET_FLAGS: CLUSCTL_GROUP_CODES = CLUSCTL_GROUP_CODES(50331657i32);
pub const CLUSCTL_GROUP_GET_NAME: CLUSCTL_GROUP_CODES = CLUSCTL_GROUP_CODES(50331689i32);
pub const CLUSCTL_GROUP_GET_ID: CLUSCTL_GROUP_CODES = CLUSCTL_GROUP_CODES(50331705i32);
pub const CLUSCTL_GROUP_ENUM_COMMON_PROPERTIES: CLUSCTL_GROUP_CODES =
    CLUSCTL_GROUP_CODES(50331729i32);
pub const CLUSCTL_GROUP_GET_RO_COMMON_PROPERTIES: CLUSCTL_GROUP_CODES =
    CLUSCTL_GROUP_CODES(50331733i32);
pub const CLUSCTL_GROUP_GET_COMMON_PROPERTIES: CLUSCTL_GROUP_CODES =
    CLUSCTL_GROUP_CODES(50331737i32);
pub const CLUSCTL_GROUP_SET_COMMON_PROPERTIES: CLUSCTL_GROUP_CODES =
    CLUSCTL_GROUP_CODES(54526046i32);
pub const CLUSCTL_GROUP_VALIDATE_COMMON_PROPERTIES: CLUSCTL_GROUP_CODES =
    CLUSCTL_GROUP_CODES(50331745i32);
pub const CLUSCTL_GROUP_ENUM_PRIVATE_PROPERTIES: CLUSCTL_GROUP_CODES =
    CLUSCTL_GROUP_CODES(50331769i32);
pub const CLUSCTL_GROUP_GET_RO_PRIVATE_PROPERTIES: CLUSCTL_GROUP_CODES =
    CLUSCTL_GROUP_CODES(50331773i32);
pub const CLUSCTL_GROUP_GET_PRIVATE_PROPERTIES: CLUSCTL_GROUP_CODES =
    CLUSCTL_GROUP_CODES(50331777i32);
pub const CLUSCTL_GROUP_SET_PRIVATE_PROPERTIES: CLUSCTL_GROUP_CODES =
    CLUSCTL_GROUP_CODES(54526086i32);
pub const CLUSCTL_GROUP_VALIDATE_PRIVATE_PROPERTIES: CLUSCTL_GROUP_CODES =
    CLUSCTL_GROUP_CODES(50331785i32);
pub const CLUSCTL_GROUP_QUERY_DELETE: CLUSCTL_GROUP_CODES = CLUSCTL_GROUP_CODES(50332089i32);
pub const CLUSCTL_GROUP_GET_COMMON_PROPERTY_FMTS: CLUSCTL_GROUP_CODES =
    CLUSCTL_GROUP_CODES(50331749i32);
pub const CLUSCTL_GROUP_GET_PRIVATE_PROPERTY_FMTS: CLUSCTL_GROUP_CODES =
    CLUSCTL_GROUP_CODES(50331789i32);
pub const CLUSCTL_GROUP_GET_FAILURE_INFO: CLUSCTL_GROUP_CODES = CLUSCTL_GROUP_CODES(50331673i32);
pub const CLUSCTL_GROUP_GET_LAST_MOVE_TIME: CLUSCTL_GROUP_CODES = CLUSCTL_GROUP_CODES(50332377i32);
pub const CLUSCTL_GROUP_SET_CCF_FROM_MASTER: CLUSCTL_GROUP_CODES = CLUSCTL_GROUP_CODES(54537606i32);
impl ::std::convert::From<i32> for CLUSCTL_GROUP_CODES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSCTL_GROUP_CODES {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CLUSCTL_GROUP_GET_LAST_MOVE_TIME_OUTPUT {
    pub GetTickCount64: u64,
    pub GetSystemTime: super::super::Foundation::SYSTEMTIME,
    pub NodeId: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl CLUSCTL_GROUP_GET_LAST_MOVE_TIME_OUTPUT {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CLUSCTL_GROUP_GET_LAST_MOVE_TIME_OUTPUT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CLUSCTL_GROUP_GET_LAST_MOVE_TIME_OUTPUT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSCTL_GROUP_GET_LAST_MOVE_TIME_OUTPUT")
            .field("GetTickCount64", &self.GetTickCount64)
            .field("GetSystemTime", &self.GetSystemTime)
            .field("NodeId", &self.NodeId)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CLUSCTL_GROUP_GET_LAST_MOVE_TIME_OUTPUT {
    fn eq(&self, other: &Self) -> bool {
        self.GetTickCount64 == other.GetTickCount64
            && self.GetSystemTime == other.GetSystemTime
            && self.NodeId == other.NodeId
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CLUSCTL_GROUP_GET_LAST_MOVE_TIME_OUTPUT {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CLUSCTL_GROUP_GET_LAST_MOVE_TIME_OUTPUT {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSCTL_NETINTERFACE_CODES(pub i32);
pub const CLUSCTL_NETINTERFACE_UNKNOWN: CLUSCTL_NETINTERFACE_CODES =
    CLUSCTL_NETINTERFACE_CODES(100663296i32);
pub const CLUSCTL_NETINTERFACE_GET_CHARACTERISTICS: CLUSCTL_NETINTERFACE_CODES =
    CLUSCTL_NETINTERFACE_CODES(100663301i32);
pub const CLUSCTL_NETINTERFACE_GET_FLAGS: CLUSCTL_NETINTERFACE_CODES =
    CLUSCTL_NETINTERFACE_CODES(100663305i32);
pub const CLUSCTL_NETINTERFACE_GET_NAME: CLUSCTL_NETINTERFACE_CODES =
    CLUSCTL_NETINTERFACE_CODES(100663337i32);
pub const CLUSCTL_NETINTERFACE_GET_ID: CLUSCTL_NETINTERFACE_CODES =
    CLUSCTL_NETINTERFACE_CODES(100663353i32);
pub const CLUSCTL_NETINTERFACE_GET_NODE: CLUSCTL_NETINTERFACE_CODES =
    CLUSCTL_NETINTERFACE_CODES(100663345i32);
pub const CLUSCTL_NETINTERFACE_GET_NETWORK: CLUSCTL_NETINTERFACE_CODES =
    CLUSCTL_NETINTERFACE_CODES(100663349i32);
pub const CLUSCTL_NETINTERFACE_ENUM_COMMON_PROPERTIES: CLUSCTL_NETINTERFACE_CODES =
    CLUSCTL_NETINTERFACE_CODES(100663377i32);
pub const CLUSCTL_NETINTERFACE_GET_RO_COMMON_PROPERTIES: CLUSCTL_NETINTERFACE_CODES =
    CLUSCTL_NETINTERFACE_CODES(100663381i32);
pub const CLUSCTL_NETINTERFACE_GET_COMMON_PROPERTIES: CLUSCTL_NETINTERFACE_CODES =
    CLUSCTL_NETINTERFACE_CODES(100663385i32);
pub const CLUSCTL_NETINTERFACE_SET_COMMON_PROPERTIES: CLUSCTL_NETINTERFACE_CODES =
    CLUSCTL_NETINTERFACE_CODES(104857694i32);
pub const CLUSCTL_NETINTERFACE_VALIDATE_COMMON_PROPERTIES: CLUSCTL_NETINTERFACE_CODES =
    CLUSCTL_NETINTERFACE_CODES(100663393i32);
pub const CLUSCTL_NETINTERFACE_ENUM_PRIVATE_PROPERTIES: CLUSCTL_NETINTERFACE_CODES =
    CLUSCTL_NETINTERFACE_CODES(100663417i32);
pub const CLUSCTL_NETINTERFACE_GET_RO_PRIVATE_PROPERTIES: CLUSCTL_NETINTERFACE_CODES =
    CLUSCTL_NETINTERFACE_CODES(100663421i32);
pub const CLUSCTL_NETINTERFACE_GET_PRIVATE_PROPERTIES: CLUSCTL_NETINTERFACE_CODES =
    CLUSCTL_NETINTERFACE_CODES(100663425i32);
pub const CLUSCTL_NETINTERFACE_SET_PRIVATE_PROPERTIES: CLUSCTL_NETINTERFACE_CODES =
    CLUSCTL_NETINTERFACE_CODES(104857734i32);
pub const CLUSCTL_NETINTERFACE_VALIDATE_PRIVATE_PROPERTIES: CLUSCTL_NETINTERFACE_CODES =
    CLUSCTL_NETINTERFACE_CODES(100663433i32);
pub const CLUSCTL_NETINTERFACE_GET_COMMON_PROPERTY_FMTS: CLUSCTL_NETINTERFACE_CODES =
    CLUSCTL_NETINTERFACE_CODES(100663397i32);
pub const CLUSCTL_NETINTERFACE_GET_PRIVATE_PROPERTY_FMTS: CLUSCTL_NETINTERFACE_CODES =
    CLUSCTL_NETINTERFACE_CODES(100663437i32);
impl ::std::convert::From<i32> for CLUSCTL_NETINTERFACE_CODES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSCTL_NETINTERFACE_CODES {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSCTL_NETWORK_CODES(pub i32);
pub const CLUSCTL_NETWORK_UNKNOWN: CLUSCTL_NETWORK_CODES = CLUSCTL_NETWORK_CODES(83886080i32);
pub const CLUSCTL_NETWORK_GET_CHARACTERISTICS: CLUSCTL_NETWORK_CODES =
    CLUSCTL_NETWORK_CODES(83886085i32);
pub const CLUSCTL_NETWORK_GET_FLAGS: CLUSCTL_NETWORK_CODES = CLUSCTL_NETWORK_CODES(83886089i32);
pub const CLUSCTL_NETWORK_GET_NAME: CLUSCTL_NETWORK_CODES = CLUSCTL_NETWORK_CODES(83886121i32);
pub const CLUSCTL_NETWORK_GET_ID: CLUSCTL_NETWORK_CODES = CLUSCTL_NETWORK_CODES(83886137i32);
pub const CLUSCTL_NETWORK_ENUM_COMMON_PROPERTIES: CLUSCTL_NETWORK_CODES =
    CLUSCTL_NETWORK_CODES(83886161i32);
pub const CLUSCTL_NETWORK_GET_RO_COMMON_PROPERTIES: CLUSCTL_NETWORK_CODES =
    CLUSCTL_NETWORK_CODES(83886165i32);
pub const CLUSCTL_NETWORK_GET_COMMON_PROPERTIES: CLUSCTL_NETWORK_CODES =
    CLUSCTL_NETWORK_CODES(83886169i32);
pub const CLUSCTL_NETWORK_SET_COMMON_PROPERTIES: CLUSCTL_NETWORK_CODES =
    CLUSCTL_NETWORK_CODES(88080478i32);
pub const CLUSCTL_NETWORK_VALIDATE_COMMON_PROPERTIES: CLUSCTL_NETWORK_CODES =
    CLUSCTL_NETWORK_CODES(83886177i32);
pub const CLUSCTL_NETWORK_ENUM_PRIVATE_PROPERTIES: CLUSCTL_NETWORK_CODES =
    CLUSCTL_NETWORK_CODES(83886201i32);
pub const CLUSCTL_NETWORK_GET_RO_PRIVATE_PROPERTIES: CLUSCTL_NETWORK_CODES =
    CLUSCTL_NETWORK_CODES(83886205i32);
pub const CLUSCTL_NETWORK_GET_PRIVATE_PROPERTIES: CLUSCTL_NETWORK_CODES =
    CLUSCTL_NETWORK_CODES(83886209i32);
pub const CLUSCTL_NETWORK_SET_PRIVATE_PROPERTIES: CLUSCTL_NETWORK_CODES =
    CLUSCTL_NETWORK_CODES(88080518i32);
pub const CLUSCTL_NETWORK_VALIDATE_PRIVATE_PROPERTIES: CLUSCTL_NETWORK_CODES =
    CLUSCTL_NETWORK_CODES(83886217i32);
pub const CLUSCTL_NETWORK_GET_COMMON_PROPERTY_FMTS: CLUSCTL_NETWORK_CODES =
    CLUSCTL_NETWORK_CODES(83886181i32);
pub const CLUSCTL_NETWORK_GET_PRIVATE_PROPERTY_FMTS: CLUSCTL_NETWORK_CODES =
    CLUSCTL_NETWORK_CODES(83886221i32);
impl ::std::convert::From<i32> for CLUSCTL_NETWORK_CODES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSCTL_NETWORK_CODES {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSCTL_NODE_CODES(pub i32);
pub const CLUSCTL_NODE_UNKNOWN: CLUSCTL_NODE_CODES = CLUSCTL_NODE_CODES(67108864i32);
pub const CLUSCTL_NODE_GET_CHARACTERISTICS: CLUSCTL_NODE_CODES = CLUSCTL_NODE_CODES(67108869i32);
pub const CLUSCTL_NODE_GET_FLAGS: CLUSCTL_NODE_CODES = CLUSCTL_NODE_CODES(67108873i32);
pub const CLUSCTL_NODE_GET_NAME: CLUSCTL_NODE_CODES = CLUSCTL_NODE_CODES(67108905i32);
pub const CLUSCTL_NODE_GET_ID: CLUSCTL_NODE_CODES = CLUSCTL_NODE_CODES(67108921i32);
pub const CLUSCTL_NODE_ENUM_COMMON_PROPERTIES: CLUSCTL_NODE_CODES = CLUSCTL_NODE_CODES(67108945i32);
pub const CLUSCTL_NODE_GET_RO_COMMON_PROPERTIES: CLUSCTL_NODE_CODES =
    CLUSCTL_NODE_CODES(67108949i32);
pub const CLUSCTL_NODE_GET_COMMON_PROPERTIES: CLUSCTL_NODE_CODES = CLUSCTL_NODE_CODES(67108953i32);
pub const CLUSCTL_NODE_SET_COMMON_PROPERTIES: CLUSCTL_NODE_CODES = CLUSCTL_NODE_CODES(71303262i32);
pub const CLUSCTL_NODE_VALIDATE_COMMON_PROPERTIES: CLUSCTL_NODE_CODES =
    CLUSCTL_NODE_CODES(67108961i32);
pub const CLUSCTL_NODE_ENUM_PRIVATE_PROPERTIES: CLUSCTL_NODE_CODES =
    CLUSCTL_NODE_CODES(67108985i32);
pub const CLUSCTL_NODE_GET_RO_PRIVATE_PROPERTIES: CLUSCTL_NODE_CODES =
    CLUSCTL_NODE_CODES(67108989i32);
pub const CLUSCTL_NODE_GET_PRIVATE_PROPERTIES: CLUSCTL_NODE_CODES = CLUSCTL_NODE_CODES(67108993i32);
pub const CLUSCTL_NODE_SET_PRIVATE_PROPERTIES: CLUSCTL_NODE_CODES = CLUSCTL_NODE_CODES(71303302i32);
pub const CLUSCTL_NODE_VALIDATE_PRIVATE_PROPERTIES: CLUSCTL_NODE_CODES =
    CLUSCTL_NODE_CODES(67109001i32);
pub const CLUSCTL_NODE_GET_COMMON_PROPERTY_FMTS: CLUSCTL_NODE_CODES =
    CLUSCTL_NODE_CODES(67108965i32);
pub const CLUSCTL_NODE_GET_PRIVATE_PROPERTY_FMTS: CLUSCTL_NODE_CODES =
    CLUSCTL_NODE_CODES(67109005i32);
pub const CLUSCTL_NODE_GET_CLUSTER_SERVICE_ACCOUNT_NAME: CLUSCTL_NODE_CODES =
    CLUSCTL_NODE_CODES(67108929i32);
pub const CLUSCTL_NODE_GET_STUCK_NODES: CLUSCTL_NODE_CODES = CLUSCTL_NODE_CODES(67109565i32);
pub const CLUSCTL_NODE_INJECT_GEM_FAULT: CLUSCTL_NODE_CODES = CLUSCTL_NODE_CODES(67109569i32);
pub const CLUSCTL_NODE_INTRODUCE_GEM_REPAIR_DELAY: CLUSCTL_NODE_CODES =
    CLUSCTL_NODE_CODES(67109573i32);
pub const CLUSCTL_NODE_SEND_DUMMY_GEM_MESSAGES: CLUSCTL_NODE_CODES =
    CLUSCTL_NODE_CODES(67109577i32);
pub const CLUSCTL_NODE_BLOCK_GEM_SEND_RECV: CLUSCTL_NODE_CODES = CLUSCTL_NODE_CODES(67109581i32);
pub const CLUSCTL_NODE_GET_GEMID_VECTOR: CLUSCTL_NODE_CODES = CLUSCTL_NODE_CODES(67109585i32);
impl ::std::convert::From<i32> for CLUSCTL_NODE_CODES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSCTL_NODE_CODES {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUSCTL_OBJECT_MASK: u32 = 255u32;
pub const CLUSCTL_OBJECT_SHIFT: u32 = 24u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSCTL_RESOURCE_CODES(pub i32);
pub const CLUSCTL_RESOURCE_UNKNOWN: CLUSCTL_RESOURCE_CODES = CLUSCTL_RESOURCE_CODES(16777216i32);
pub const CLUSCTL_RESOURCE_GET_CHARACTERISTICS: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777221i32);
pub const CLUSCTL_RESOURCE_GET_FLAGS: CLUSCTL_RESOURCE_CODES = CLUSCTL_RESOURCE_CODES(16777225i32);
pub const CLUSCTL_RESOURCE_GET_CLASS_INFO: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777229i32);
pub const CLUSCTL_RESOURCE_GET_REQUIRED_DEPENDENCIES: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777233i32);
pub const CLUSCTL_RESOURCE_GET_NAME: CLUSCTL_RESOURCE_CODES = CLUSCTL_RESOURCE_CODES(16777257i32);
pub const CLUSCTL_RESOURCE_GET_ID: CLUSCTL_RESOURCE_CODES = CLUSCTL_RESOURCE_CODES(16777273i32);
pub const CLUSCTL_RESOURCE_GET_RESOURCE_TYPE: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777261i32);
pub const CLUSCTL_RESOURCE_ENUM_COMMON_PROPERTIES: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777297i32);
pub const CLUSCTL_RESOURCE_GET_RO_COMMON_PROPERTIES: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777301i32);
pub const CLUSCTL_RESOURCE_GET_COMMON_PROPERTIES: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777305i32);
pub const CLUSCTL_RESOURCE_SET_COMMON_PROPERTIES: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20971614i32);
pub const CLUSCTL_RESOURCE_VALIDATE_COMMON_PROPERTIES: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777313i32);
pub const CLUSCTL_RESOURCE_GET_COMMON_PROPERTY_FMTS: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777317i32);
pub const CLUSCTL_RESOURCE_ENUM_PRIVATE_PROPERTIES: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777337i32);
pub const CLUSCTL_RESOURCE_GET_RO_PRIVATE_PROPERTIES: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777341i32);
pub const CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTIES: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777345i32);
pub const CLUSCTL_RESOURCE_SET_PRIVATE_PROPERTIES: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20971654i32);
pub const CLUSCTL_RESOURCE_VALIDATE_PRIVATE_PROPERTIES: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777353i32);
pub const CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTY_FMTS: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777357i32);
pub const CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20971682i32);
pub const CLUSCTL_RESOURCE_DELETE_REGISTRY_CHECKPOINT: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20971686i32);
pub const CLUSCTL_RESOURCE_GET_REGISTRY_CHECKPOINTS: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777385i32);
pub const CLUSCTL_RESOURCE_ADD_CRYPTO_CHECKPOINT: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20971694i32);
pub const CLUSCTL_RESOURCE_DELETE_CRYPTO_CHECKPOINT: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20971698i32);
pub const CLUSCTL_RESOURCE_ADD_CRYPTO_CHECKPOINT_EX: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20972246i32);
pub const CLUSCTL_RESOURCE_GET_CRYPTO_CHECKPOINTS: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777397i32);
pub const CLUSCTL_RESOURCE_GET_LOADBAL_PROCESS_LIST: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777417i32);
pub const CLUSCTL_RESOURCE_GET_NETWORK_NAME: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777577i32);
pub const CLUSCTL_RESOURCE_NETNAME_GET_VIRTUAL_SERVER_TOKEN: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777581i32);
pub const CLUSCTL_RESOURCE_NETNAME_SET_PWD_INFO: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777594i32);
pub const CLUSCTL_RESOURCE_NETNAME_SET_PWD_INFOEX: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16778010i32);
pub const CLUSCTL_RESOURCE_NETNAME_DELETE_CO: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777598i32);
pub const CLUSCTL_RESOURCE_NETNAME_VALIDATE_VCO: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777601i32);
pub const CLUSCTL_RESOURCE_NETNAME_RESET_VCO: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777605i32);
pub const CLUSCTL_RESOURCE_NETNAME_REPAIR_VCO: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777613i32);
pub const CLUSCTL_RESOURCE_NETNAME_REGISTER_DNS_RECORDS: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777586i32);
pub const CLUSCTL_RESOURCE_GET_DNS_NAME: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777589i32);
pub const CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777617i32);
pub const CLUSCTL_RESOURCE_STORAGE_GET_DISK_NUMBER_INFO: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777633i32);
pub const CLUSCTL_RESOURCE_STORAGE_IS_PATH_VALID: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777625i32);
pub const CLUSCTL_RESOURCE_QUERY_DELETE: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777657i32);
pub const CLUSCTL_RESOURCE_UPGRADE_DLL: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20971706i32);
pub const CLUSCTL_RESOURCE_IPADDRESS_RENEW_LEASE: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20971966i32);
pub const CLUSCTL_RESOURCE_IPADDRESS_RELEASE_LEASE: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20971970i32);
pub const CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT_64BIT: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20971710i32);
pub const CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT_32BIT: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20971714i32);
pub const CLUSCTL_RESOURCE_QUERY_MAINTENANCE_MODE: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777697i32);
pub const CLUSCTL_RESOURCE_SET_MAINTENANCE_MODE: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20972006i32);
pub const CLUSCTL_RESOURCE_STORAGE_SET_DRIVELETTER: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20972010i32);
pub const CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO_EX: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777713i32);
pub const CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO_EX2: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777721i32);
pub const CLUSCTL_RESOURCE_STORAGE_GET_MOUNTPOINTS: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777745i32);
pub const CLUSCTL_RESOURCE_STORAGE_GET_DIRTY: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777753i32);
pub const CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_INFO: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777765i32);
pub const CLUSCTL_RESOURCE_SET_CSV_MAINTENANCE_MODE: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20972182i32);
pub const CLUSCTL_RESOURCE_ENABLE_SHARED_VOLUME_DIRECTIO: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20972170i32);
pub const CLUSCTL_RESOURCE_DISABLE_SHARED_VOLUME_DIRECTIO: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20972174i32);
pub const CLUSCTL_RESOURCE_SET_SHARED_VOLUME_BACKUP_MODE: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20972186i32);
pub const CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_PARTITION_NAMES: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777885i32);
pub const CLUSCTL_RESOURCE_GET_FAILURE_INFO: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777241i32);
pub const CLUSCTL_RESOURCE_STORAGE_GET_DISKID: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777733i32);
pub const CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_STATES: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20972194i32);
pub const CLUSCTL_RESOURCE_STORAGE_IS_SHARED_VOLUME: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777893i32);
pub const CLUSCTL_RESOURCE_IS_QUORUM_BLOCKED: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777905i32);
pub const CLUSCTL_RESOURCE_POOL_GET_DRIVE_INFO: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777909i32);
pub const CLUSCTL_RESOURCE_RLUA_GET_VIRTUAL_SERVER_TOKEN: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777581i32);
pub const CLUSCTL_RESOURCE_RLUA_SET_PWD_INFO: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16777594i32);
pub const CLUSCTL_RESOURCE_RLUA_SET_PWD_INFOEX: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16778010i32);
pub const CLUSCTL_RESOURCE_DELETE: CLUSCTL_RESOURCE_CODES = CLUSCTL_RESOURCE_CODES(22020102i32);
pub const CLUSCTL_RESOURCE_UNDELETE: CLUSCTL_RESOURCE_CODES = CLUSCTL_RESOURCE_CODES(22020230i32);
pub const CLUSCTL_RESOURCE_INSTALL_NODE: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(22020106i32);
pub const CLUSCTL_RESOURCE_EVICT_NODE: CLUSCTL_RESOURCE_CODES = CLUSCTL_RESOURCE_CODES(22020110i32);
pub const CLUSCTL_RESOURCE_ADD_DEPENDENCY: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(22020114i32);
pub const CLUSCTL_RESOURCE_REMOVE_DEPENDENCY: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(22020118i32);
pub const CLUSCTL_RESOURCE_ADD_OWNER: CLUSCTL_RESOURCE_CODES = CLUSCTL_RESOURCE_CODES(22020122i32);
pub const CLUSCTL_RESOURCE_REMOVE_OWNER: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(22020126i32);
pub const CLUSCTL_RESOURCE_SET_NAME: CLUSCTL_RESOURCE_CODES = CLUSCTL_RESOURCE_CODES(22020134i32);
pub const CLUSCTL_RESOURCE_CLUSTER_NAME_CHANGED: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(22020138i32);
pub const CLUSCTL_RESOURCE_CLUSTER_VERSION_CHANGED: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(22020142i32);
pub const CLUSCTL_RESOURCE_FORCE_QUORUM: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(22020166i32);
pub const CLUSCTL_RESOURCE_INITIALIZE: CLUSCTL_RESOURCE_CODES = CLUSCTL_RESOURCE_CODES(22020170i32);
pub const CLUSCTL_RESOURCE_STATE_CHANGE_REASON: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(22020174i32);
pub const CLUSCTL_RESOURCE_PROVIDER_STATE_CHANGE: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(22020178i32);
pub const CLUSCTL_RESOURCE_LEAVING_GROUP: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(22020182i32);
pub const CLUSCTL_RESOURCE_JOINING_GROUP: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(22020186i32);
pub const CLUSCTL_RESOURCE_FSWITNESS_GET_EPOCH_INFO: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(17825885i32);
pub const CLUSCTL_RESOURCE_FSWITNESS_SET_EPOCH_INFO: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(22020194i32);
pub const CLUSCTL_RESOURCE_FSWITNESS_RELEASE_LOCK: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(22020198i32);
pub const CLUSCTL_RESOURCE_NETNAME_CREDS_NOTIFYCAM: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(22020202i32);
pub const CLUSCTL_RESOURCE_GET_OPERATION_CONTEXT: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(17834217i32);
pub const CLUSCTL_RESOURCE_RW_MODIFY_NOOP: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20972206i32);
pub const CLUSCTL_RESOURCE_NOTIFY_QUORUM_STATUS: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(22020222i32);
pub const CLUSCTL_RESOURCE_NOTIFY_OWNER_CHANGE: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(22028578i32);
pub const CLUSCTL_RESOURCE_VALIDATE_CHANGE_GROUP: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(17834277i32);
pub const CLUSCTL_RESOURCE_STORAGE_RENAME_SHARED_VOLUME: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16788950i32);
pub const CLUSCTL_RESOURCE_STORAGE_RENAME_SHARED_VOLUME_GUID: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16788954i32);
pub const CLUSCTL_CLOUD_WITNESS_RESOURCE_UPDATE_TOKEN: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20979942i32);
pub const CLUSCTL_CLOUD_WITNESS_RESOURCE_UPDATE_KEY: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20979958i32);
pub const CLUSCTL_RESOURCE_PREPARE_UPGRADE: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20979946i32);
pub const CLUSCTL_RESOURCE_UPGRADE_COMPLETED: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20979950i32);
pub const CLUSCTL_RESOURCE_GET_STATE_CHANGE_TIME: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16788829i32);
pub const CLUSCTL_RESOURCE_GET_INFRASTRUCTURE_SOFS_BUFFER: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16788873i32);
pub const CLUSCTL_RESOURCE_SET_INFRASTRUCTURE_SOFS_BUFFER: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20983182i32);
pub const CLUSCTL_RESOURCE_SCALEOUT_COMMAND: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20983190i32);
pub const CLUSCTL_RESOURCE_SCALEOUT_CONTROL: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20983194i32);
pub const CLUSCTL_RESOURCE_SCALEOUT_GET_CLUSTERS: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(20983197i32);
pub const CLUSCTL_RESOURCE_CHECK_DRAIN_VETO: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(17834285i32);
pub const CLUSCTL_RESOURCE_NOTIFY_DRAIN_COMPLETE: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(17834289i32);
pub const CLUSCTL_RESOURCE_GET_NODES_IN_FD: CLUSCTL_RESOURCE_CODES =
    CLUSCTL_RESOURCE_CODES(16788961i32);
impl ::std::convert::From<i32> for CLUSCTL_RESOURCE_CODES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSCTL_RESOURCE_CODES {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSCTL_RESOURCE_STATE_CHANGE_REASON_STRUCT {
    pub dwSize: u32,
    pub dwVersion: u32,
    pub eReason: CLUSTER_RESOURCE_STATE_CHANGE_REASON,
}
impl CLUSCTL_RESOURCE_STATE_CHANGE_REASON_STRUCT {}
impl ::std::default::Default for CLUSCTL_RESOURCE_STATE_CHANGE_REASON_STRUCT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUSCTL_RESOURCE_STATE_CHANGE_REASON_STRUCT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSCTL_RESOURCE_STATE_CHANGE_REASON_STRUCT")
            .field("dwSize", &self.dwSize)
            .field("dwVersion", &self.dwVersion)
            .field("eReason", &self.eReason)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUSCTL_RESOURCE_STATE_CHANGE_REASON_STRUCT {
    fn eq(&self, other: &Self) -> bool {
        self.dwSize == other.dwSize
            && self.dwVersion == other.dwVersion
            && self.eReason == other.eReason
    }
}
impl ::std::cmp::Eq for CLUSCTL_RESOURCE_STATE_CHANGE_REASON_STRUCT {}
unsafe impl ::windows::runtime::Abi for CLUSCTL_RESOURCE_STATE_CHANGE_REASON_STRUCT {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUSCTL_RESOURCE_STATE_CHANGE_REASON_VERSION_1: u32 = 1u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSCTL_RESOURCE_TYPE_CODES(pub i32);
pub const CLUSCTL_RESOURCE_TYPE_UNKNOWN: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554432i32);
pub const CLUSCTL_RESOURCE_TYPE_GET_CHARACTERISTICS: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554437i32);
pub const CLUSCTL_RESOURCE_TYPE_GET_FLAGS: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554441i32);
pub const CLUSCTL_RESOURCE_TYPE_GET_CLASS_INFO: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554445i32);
pub const CLUSCTL_RESOURCE_TYPE_GET_REQUIRED_DEPENDENCIES: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554449i32);
pub const CLUSCTL_RESOURCE_TYPE_GET_ARB_TIMEOUT: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554453i32);
pub const CLUSCTL_RESOURCE_TYPE_ENUM_COMMON_PROPERTIES: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554513i32);
pub const CLUSCTL_RESOURCE_TYPE_GET_RO_COMMON_PROPERTIES: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554517i32);
pub const CLUSCTL_RESOURCE_TYPE_GET_COMMON_PROPERTIES: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554521i32);
pub const CLUSCTL_RESOURCE_TYPE_VALIDATE_COMMON_PROPERTIES: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554529i32);
pub const CLUSCTL_RESOURCE_TYPE_SET_COMMON_PROPERTIES: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(37748830i32);
pub const CLUSCTL_RESOURCE_TYPE_GET_COMMON_PROPERTY_FMTS: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554533i32);
pub const CLUSCTL_RESOURCE_TYPE_GET_COMMON_RESOURCE_PROPERTY_FMTS: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554537i32);
pub const CLUSCTL_RESOURCE_TYPE_ENUM_PRIVATE_PROPERTIES: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554553i32);
pub const CLUSCTL_RESOURCE_TYPE_GET_RO_PRIVATE_PROPERTIES: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554557i32);
pub const CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_PROPERTIES: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554561i32);
pub const CLUSCTL_RESOURCE_TYPE_SET_PRIVATE_PROPERTIES: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(37748870i32);
pub const CLUSCTL_RESOURCE_TYPE_VALIDATE_PRIVATE_PROPERTIES: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554569i32);
pub const CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_PROPERTY_FMTS: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554573i32);
pub const CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_RESOURCE_PROPERTY_FMTS: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554577i32);
pub const CLUSCTL_RESOURCE_TYPE_GET_REGISTRY_CHECKPOINTS: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554601i32);
pub const CLUSCTL_RESOURCE_TYPE_GET_CRYPTO_CHECKPOINTS: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554613i32);
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554837i32);
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_SYNC_CLUSDISK_DB: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(37749150i32);
pub const CLUSCTL_RESOURCE_TYPE_NETNAME_VALIDATE_NETNAME: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554997i32);
pub const CLUSCTL_RESOURCE_TYPE_NETNAME_GET_OU_FOR_VCO: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(37749358i32);
pub const CLUSCTL_RESOURCE_TYPE_GEN_APP_VALIDATE_PATH: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554993i32);
pub const CLUSCTL_RESOURCE_TYPE_GEN_APP_VALIDATE_DIRECTORY: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33555001i32);
pub const CLUSCTL_RESOURCE_TYPE_GEN_SCRIPT_VALIDATE_PATH: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554993i32);
pub const CLUSCTL_RESOURCE_TYPE_QUERY_DELETE: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554873i32);
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_DRIVELETTERS: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554925i32);
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554933i32);
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_REMAP_DRIVELETTER: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554945i32);
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_DISKID: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554949i32);
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_RESOURCEID: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554989i32);
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_IS_CLUSTERABLE: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554953i32);
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_REMOVE_VM_OWNERSHIP: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(37749262i32);
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_IS_CSV_FILE: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(16777769i32);
pub const CLUSCTL_RESOURCE_TYPE_WITNESS_VALIDATE_PATH: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33554993i32);
pub const CLUSCTL_RESOURCE_TYPE_INSTALL_NODE: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(38797322i32);
pub const CLUSCTL_RESOURCE_TYPE_EVICT_NODE: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(38797326i32);
pub const CLUSCTL_RESOURCE_TYPE_CLUSTER_VERSION_CHANGED: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(38797358i32);
pub const CLUSCTL_RESOURCE_TYPE_FIXUP_ON_UPGRADE: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(38797362i32);
pub const CLUSCTL_RESOURCE_TYPE_STARTING_PHASE1: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(38797366i32);
pub const CLUSCTL_RESOURCE_TYPE_STARTING_PHASE2: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(38797370i32);
pub const CLUSCTL_RESOURCE_TYPE_HOLD_IO: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(38797374i32);
pub const CLUSCTL_RESOURCE_TYPE_RESUME_IO: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(38797378i32);
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INT: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33562593i32);
pub const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_ELIGIBLE_LOGDISKS: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33562953i32);
pub const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_ELIGIBLE_TARGET_DATADISKS:
    CLUSCTL_RESOURCE_TYPE_CODES = CLUSCTL_RESOURCE_TYPE_CODES(33562957i32);
pub const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_ELIGIBLE_SOURCE_DATADISKS:
    CLUSCTL_RESOURCE_TYPE_CODES = CLUSCTL_RESOURCE_TYPE_CODES(33562961i32);
pub const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_REPLICATED_DISKS: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33562965i32);
pub const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_REPLICA_VOLUMES: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33562969i32);
pub const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_LOG_VOLUME: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33562973i32);
pub const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_RESOURCE_GROUP: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33562977i32);
pub const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_REPLICATED_PARTITION_INFO:
    CLUSCTL_RESOURCE_TYPE_CODES = CLUSCTL_RESOURCE_TYPE_CODES(33562981i32);
pub const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_LOG_INFO: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33562949i32);
pub const CLUSCTL_RESOURCE_TYPE_REPLICATION_ADD_REPLICATION_GROUP: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33562946i32);
pub const CLUSCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(33562849i32);
pub const CLUSCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS_WITH_KEY:
    CLUSCTL_RESOURCE_TYPE_CODES = CLUSCTL_RESOURCE_TYPE_CODES(33562865i32);
pub const CLUSCTL_RESOURCE_TYPE_PREPARE_UPGRADE: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(37757162i32);
pub const CLUSCTL_RESOURCE_TYPE_UPGRADE_COMPLETED: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(37757166i32);
pub const CLUSCTL_RESOURCE_TYPE_NOTIFY_MONITOR_SHUTTING_DOWN: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(34603137i32);
pub const CLUSCTL_RESOURCE_TYPE_CHECK_DRAIN_VETO: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(34611501i32);
pub const CLUSCTL_RESOURCE_TYPE_NOTIFY_DRAIN_COMPLETE: CLUSCTL_RESOURCE_TYPE_CODES =
    CLUSCTL_RESOURCE_TYPE_CODES(34611505i32);
impl ::std::convert::From<i32> for CLUSCTL_RESOURCE_TYPE_CODES {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSCTL_RESOURCE_TYPE_CODES {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_FLAG_ADD_VOLUME_INFO: u32 = 1u32;
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_FLAG_FILTER_BY_POOL: u32 = 2u32;
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_FLAG_INCLUDE_NON_SHARED_DISKS: u32 =
    4u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INPUT {
    pub dwFlags: u32,
    pub guidPoolFilter: ::windows::runtime::GUID,
}
impl CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INPUT {}
impl ::std::default::Default for CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INPUT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INPUT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INPUT")
            .field("dwFlags", &self.dwFlags)
            .field("guidPoolFilter", &self.guidPoolFilter)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INPUT {
    fn eq(&self, other: &Self) -> bool {
        self.dwFlags == other.dwFlags && self.guidPoolFilter == other.guidPoolFilter
    }
}
impl ::std::cmp::Eq for CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INPUT {}
unsafe impl ::windows::runtime::Abi
    for CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INPUT
{
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUSGROUPSET_STATUS_APPLICATION_READY: u64 = 8u64;
pub const CLUSGROUPSET_STATUS_GROUPS_ONLINE: u64 = 2u64;
pub const CLUSGROUPSET_STATUS_GROUPS_PENDING: u64 = 1u64;
pub const CLUSGROUPSET_STATUS_OS_HEARTBEAT: u64 = 4u64;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSGROUP_TYPE(pub i32);
pub const ClusGroupTypeCoreCluster: CLUSGROUP_TYPE = CLUSGROUP_TYPE(1i32);
pub const ClusGroupTypeAvailableStorage: CLUSGROUP_TYPE = CLUSGROUP_TYPE(2i32);
pub const ClusGroupTypeTemporary: CLUSGROUP_TYPE = CLUSGROUP_TYPE(3i32);
pub const ClusGroupTypeSharedVolume: CLUSGROUP_TYPE = CLUSGROUP_TYPE(4i32);
pub const ClusGroupTypeStoragePool: CLUSGROUP_TYPE = CLUSGROUP_TYPE(5i32);
pub const ClusGroupTypeFileServer: CLUSGROUP_TYPE = CLUSGROUP_TYPE(100i32);
pub const ClusGroupTypePrintServer: CLUSGROUP_TYPE = CLUSGROUP_TYPE(101i32);
pub const ClusGroupTypeDhcpServer: CLUSGROUP_TYPE = CLUSGROUP_TYPE(102i32);
pub const ClusGroupTypeDtc: CLUSGROUP_TYPE = CLUSGROUP_TYPE(103i32);
pub const ClusGroupTypeMsmq: CLUSGROUP_TYPE = CLUSGROUP_TYPE(104i32);
pub const ClusGroupTypeWins: CLUSGROUP_TYPE = CLUSGROUP_TYPE(105i32);
pub const ClusGroupTypeStandAloneDfs: CLUSGROUP_TYPE = CLUSGROUP_TYPE(106i32);
pub const ClusGroupTypeGenericApplication: CLUSGROUP_TYPE = CLUSGROUP_TYPE(107i32);
pub const ClusGroupTypeGenericService: CLUSGROUP_TYPE = CLUSGROUP_TYPE(108i32);
pub const ClusGroupTypeGenericScript: CLUSGROUP_TYPE = CLUSGROUP_TYPE(109i32);
pub const ClusGroupTypeIScsiNameService: CLUSGROUP_TYPE = CLUSGROUP_TYPE(110i32);
pub const ClusGroupTypeVirtualMachine: CLUSGROUP_TYPE = CLUSGROUP_TYPE(111i32);
pub const ClusGroupTypeTsSessionBroker: CLUSGROUP_TYPE = CLUSGROUP_TYPE(112i32);
pub const ClusGroupTypeIScsiTarget: CLUSGROUP_TYPE = CLUSGROUP_TYPE(113i32);
pub const ClusGroupTypeScaleoutFileServer: CLUSGROUP_TYPE = CLUSGROUP_TYPE(114i32);
pub const ClusGroupTypeVMReplicaBroker: CLUSGROUP_TYPE = CLUSGROUP_TYPE(115i32);
pub const ClusGroupTypeTaskScheduler: CLUSGROUP_TYPE = CLUSGROUP_TYPE(116i32);
pub const ClusGroupTypeClusterUpdateAgent: CLUSGROUP_TYPE = CLUSGROUP_TYPE(117i32);
pub const ClusGroupTypeScaleoutCluster: CLUSGROUP_TYPE = CLUSGROUP_TYPE(118i32);
pub const ClusGroupTypeStorageReplica: CLUSGROUP_TYPE = CLUSGROUP_TYPE(119i32);
pub const ClusGroupTypeVMReplicaCoordinator: CLUSGROUP_TYPE = CLUSGROUP_TYPE(120i32);
pub const ClusGroupTypeCrossClusterOrchestrator: CLUSGROUP_TYPE = CLUSGROUP_TYPE(121i32);
pub const ClusGroupTypeInfrastructureFileServer: CLUSGROUP_TYPE = CLUSGROUP_TYPE(122i32);
pub const ClusGroupTypeCoreSddc: CLUSGROUP_TYPE = CLUSGROUP_TYPE(123i32);
pub const ClusGroupTypeUnknown: CLUSGROUP_TYPE = CLUSGROUP_TYPE(9999i32);
impl ::std::convert::From<i32> for CLUSGROUP_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSGROUP_TYPE {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUSGRP_STATUS_APPLICATION_READY: u64 = 1024u64;
pub const CLUSGRP_STATUS_EMBEDDED_FAILURE: u64 = 32u64;
pub const CLUSGRP_STATUS_LOCKED_MODE: u64 = 1u64;
pub const CLUSGRP_STATUS_NETWORK_FAILURE: u64 = 128u64;
pub const CLUSGRP_STATUS_OFFLINE_DUE_TO_ANTIAFFINITY_CONFLICT: u64 = 64u64;
pub const CLUSGRP_STATUS_OFFLINE_NOT_LOCAL_DISK_OWNER: u64 = 2048u64;
pub const CLUSGRP_STATUS_OS_HEARTBEAT: u64 = 512u64;
pub const CLUSGRP_STATUS_PHYSICAL_RESOURCES_LACKING: u64 = 8u64;
pub const CLUSGRP_STATUS_PREEMPTED: u64 = 2u64;
pub const CLUSGRP_STATUS_UNMONITORED: u64 = 256u64;
pub const CLUSGRP_STATUS_WAITING_FOR_DEPENDENCIES: u64 = 4096u64;
pub const CLUSGRP_STATUS_WAITING_IN_QUEUE_FOR_MOVE: u64 = 4u64;
pub const CLUSGRP_STATUS_WAITING_TO_START: u64 = 16u64;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSPROP_BINARY {
    pub __AnonymousBase_clusapi_L5129_C41: CLUSPROP_VALUE,
    pub rgb: [u8; 1],
}
impl CLUSPROP_BINARY {}
impl ::std::default::Default for CLUSPROP_BINARY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUSPROP_BINARY {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUSPROP_BINARY {}
unsafe impl ::windows::runtime::Abi for CLUSPROP_BINARY {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
pub union CLUSPROP_BUFFER_HELPER {
    pub pb: *mut u8,
    pub pw: *mut u16,
    pub pdw: *mut u32,
    pub pl: *mut i32,
    pub psz: super::super::Foundation::PWSTR,
    pub pList: *mut CLUSPROP_LIST,
    pub pSyntax: *mut CLUSPROP_SYNTAX,
    pub pName: *mut CLUSPROP_SZ,
    pub pValue: *mut CLUSPROP_VALUE,
    pub pBinaryValue: *mut CLUSPROP_BINARY,
    pub pWordValue: *mut CLUSPROP_WORD,
    pub pDwordValue: *mut CLUSPROP_DWORD,
    pub pLongValue: *mut CLUSPROP_LONG,
    pub pULargeIntegerValue: *mut CLUSPROP_ULARGE_INTEGER,
    pub pLargeIntegerValue: *mut CLUSPROP_LARGE_INTEGER,
    pub pStringValue: *mut CLUSPROP_SZ,
    pub pMultiSzValue: *mut CLUSPROP_SZ,
    pub pSecurityDescriptor: *mut CLUSPROP_SECURITY_DESCRIPTOR,
    pub pResourceClassValue: *mut CLUSPROP_RESOURCE_CLASS,
    pub pResourceClassInfoValue: *mut CLUSPROP_RESOURCE_CLASS_INFO,
    pub pDiskSignatureValue: *mut CLUSPROP_DWORD,
    pub pScsiAddressValue: *mut CLUSPROP_SCSI_ADDRESS,
    pub pDiskNumberValue: *mut CLUSPROP_DWORD,
    pub pPartitionInfoValue: *mut CLUSPROP_PARTITION_INFO,
    pub pRequiredDependencyValue: *mut CLUSPROP_REQUIRED_DEPENDENCY,
    pub pPartitionInfoValueEx: *mut CLUSPROP_PARTITION_INFO_EX,
    pub pPartitionInfoValueEx2: *mut CLUSPROP_PARTITION_INFO_EX2,
    pub pFileTimeValue: *mut CLUSPROP_FILETIME,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl CLUSPROP_BUFFER_HELPER {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::default::Default for CLUSPROP_BUFFER_HELPER {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::PartialEq for CLUSPROP_BUFFER_HELPER {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
impl ::std::cmp::Eq for CLUSPROP_BUFFER_HELPER {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_SystemServices"))]
unsafe impl ::windows::runtime::Abi for CLUSPROP_BUFFER_HELPER {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSPROP_DWORD {
    pub __AnonymousBase_clusapi_L5149_C40: CLUSPROP_VALUE,
    pub dw: u32,
}
impl CLUSPROP_DWORD {}
impl ::std::default::Default for CLUSPROP_DWORD {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUSPROP_DWORD {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUSPROP_DWORD {}
unsafe impl ::windows::runtime::Abi for CLUSPROP_DWORD {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CLUSPROP_FILETIME {
    pub __AnonymousBase_clusapi_L5225_C14: CLUSPROP_VALUE,
    pub ft: super::super::Foundation::FILETIME,
}
#[cfg(feature = "Win32_Foundation")]
impl CLUSPROP_FILETIME {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CLUSPROP_FILETIME {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CLUSPROP_FILETIME {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CLUSPROP_FILETIME {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CLUSPROP_FILETIME {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSPROP_FTSET_INFO {
    pub __AnonymousBase_clusapi_L5555_C14: CLUSPROP_VALUE,
    pub __AnonymousBase_clusapi_L5556_C14: CLUS_FTSET_INFO,
}
impl CLUSPROP_FTSET_INFO {}
impl ::std::default::Default for CLUSPROP_FTSET_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUSPROP_FTSET_INFO {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUSPROP_FTSET_INFO {}
unsafe impl ::windows::runtime::Abi for CLUSPROP_FTSET_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSPROP_IPADDR_ENABLENETBIOS(pub i32);
pub const CLUSPROP_IPADDR_ENABLENETBIOS_DISABLED: CLUSPROP_IPADDR_ENABLENETBIOS =
    CLUSPROP_IPADDR_ENABLENETBIOS(0i32);
pub const CLUSPROP_IPADDR_ENABLENETBIOS_ENABLED: CLUSPROP_IPADDR_ENABLENETBIOS =
    CLUSPROP_IPADDR_ENABLENETBIOS(1i32);
pub const CLUSPROP_IPADDR_ENABLENETBIOS_TRACK_NIC: CLUSPROP_IPADDR_ENABLENETBIOS =
    CLUSPROP_IPADDR_ENABLENETBIOS(2i32);
impl ::std::convert::From<i32> for CLUSPROP_IPADDR_ENABLENETBIOS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSPROP_IPADDR_ENABLENETBIOS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSPROP_LARGE_INTEGER {
    pub __AnonymousBase_clusapi_L5199_C14: CLUSPROP_VALUE,
    pub li: i64,
}
impl CLUSPROP_LARGE_INTEGER {}
impl ::std::default::Default for CLUSPROP_LARGE_INTEGER {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUSPROP_LARGE_INTEGER {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUSPROP_LARGE_INTEGER {}
unsafe impl ::windows::runtime::Abi for CLUSPROP_LARGE_INTEGER {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSPROP_LIST {
    pub nPropertyCount: u32,
    pub PropertyName: CLUSPROP_SZ,
}
impl CLUSPROP_LIST {}
impl ::std::default::Default for CLUSPROP_LIST {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUSPROP_LIST {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUSPROP_LIST {}
unsafe impl ::windows::runtime::Abi for CLUSPROP_LIST {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSPROP_LONG {
    pub __AnonymousBase_clusapi_L5159_C39: CLUSPROP_VALUE,
    pub l: i32,
}
impl CLUSPROP_LONG {}
impl ::std::default::Default for CLUSPROP_LONG {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUSPROP_LONG {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUSPROP_LONG {}
unsafe impl ::windows::runtime::Abi for CLUSPROP_LONG {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSPROP_PARTITION_INFO {
    pub __AnonymousBase_clusapi_L5507_C14: CLUSPROP_VALUE,
    pub __AnonymousBase_clusapi_L5508_C14: CLUS_PARTITION_INFO,
}
impl CLUSPROP_PARTITION_INFO {}
impl ::std::default::Default for CLUSPROP_PARTITION_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUSPROP_PARTITION_INFO {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUSPROP_PARTITION_INFO {}
unsafe impl ::windows::runtime::Abi for CLUSPROP_PARTITION_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSPROP_PARTITION_INFO_EX {
    pub __AnonymousBase_clusapi_L5519_C14: CLUSPROP_VALUE,
    pub __AnonymousBase_clusapi_L5520_C14: CLUS_PARTITION_INFO_EX,
}
impl CLUSPROP_PARTITION_INFO_EX {}
impl ::std::default::Default for CLUSPROP_PARTITION_INFO_EX {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUSPROP_PARTITION_INFO_EX {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUSPROP_PARTITION_INFO_EX {}
unsafe impl ::windows::runtime::Abi for CLUSPROP_PARTITION_INFO_EX {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSPROP_PARTITION_INFO_EX2 {
    pub __AnonymousBase_clusapi_L5533_C14: CLUSPROP_PARTITION_INFO_EX,
    pub __AnonymousBase_clusapi_L5534_C14: CLUS_PARTITION_INFO_EX2,
}
impl CLUSPROP_PARTITION_INFO_EX2 {}
impl ::std::default::Default for CLUSPROP_PARTITION_INFO_EX2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUSPROP_PARTITION_INFO_EX2 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUSPROP_PARTITION_INFO_EX2 {}
unsafe impl ::windows::runtime::Abi for CLUSPROP_PARTITION_INFO_EX2 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSPROP_PIFLAGS(pub i32);
pub const CLUSPROP_PIFLAG_STICKY: CLUSPROP_PIFLAGS = CLUSPROP_PIFLAGS(1i32);
pub const CLUSPROP_PIFLAG_REMOVABLE: CLUSPROP_PIFLAGS = CLUSPROP_PIFLAGS(2i32);
pub const CLUSPROP_PIFLAG_USABLE: CLUSPROP_PIFLAGS = CLUSPROP_PIFLAGS(4i32);
pub const CLUSPROP_PIFLAG_DEFAULT_QUORUM: CLUSPROP_PIFLAGS = CLUSPROP_PIFLAGS(8i32);
pub const CLUSPROP_PIFLAG_USABLE_FOR_CSV: CLUSPROP_PIFLAGS = CLUSPROP_PIFLAGS(16i32);
pub const CLUSPROP_PIFLAG_ENCRYPTION_ENABLED: CLUSPROP_PIFLAGS = CLUSPROP_PIFLAGS(32i32);
pub const CLUSPROP_PIFLAG_RAW: CLUSPROP_PIFLAGS = CLUSPROP_PIFLAGS(64i32);
pub const CLUSPROP_PIFLAG_UNKNOWN: CLUSPROP_PIFLAGS = CLUSPROP_PIFLAGS(-2147483648i32);
impl ::std::convert::From<i32> for CLUSPROP_PIFLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSPROP_PIFLAGS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub union CLUSPROP_REQUIRED_DEPENDENCY {
    pub Value: CLUSPROP_VALUE,
    pub ResClass: CLUSPROP_RESOURCE_CLASS,
    pub ResTypeName: CLUSPROP_SZ,
}
impl CLUSPROP_REQUIRED_DEPENDENCY {}
impl ::std::default::Default for CLUSPROP_REQUIRED_DEPENDENCY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUSPROP_REQUIRED_DEPENDENCY {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUSPROP_REQUIRED_DEPENDENCY {}
unsafe impl ::windows::runtime::Abi for CLUSPROP_REQUIRED_DEPENDENCY {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSPROP_RESOURCE_CLASS {
    pub __AnonymousBase_clusapi_L5250_C14: CLUSPROP_VALUE,
    pub rc: CLUSTER_RESOURCE_CLASS,
}
impl CLUSPROP_RESOURCE_CLASS {}
impl ::std::default::Default for CLUSPROP_RESOURCE_CLASS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUSPROP_RESOURCE_CLASS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUSPROP_RESOURCE_CLASS {}
unsafe impl ::windows::runtime::Abi for CLUSPROP_RESOURCE_CLASS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSPROP_RESOURCE_CLASS_INFO {
    pub __AnonymousBase_clusapi_L5261_C14: CLUSPROP_VALUE,
    pub __AnonymousBase_clusapi_L5262_C14: CLUS_RESOURCE_CLASS_INFO,
}
impl CLUSPROP_RESOURCE_CLASS_INFO {}
impl ::std::default::Default for CLUSPROP_RESOURCE_CLASS_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUSPROP_RESOURCE_CLASS_INFO {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUSPROP_RESOURCE_CLASS_INFO {}
unsafe impl ::windows::runtime::Abi for CLUSPROP_RESOURCE_CLASS_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSPROP_SCSI_ADDRESS {
    pub __AnonymousBase_clusapi_L5583_C14: CLUSPROP_VALUE,
    pub __AnonymousBase_clusapi_L5584_C14: CLUS_SCSI_ADDRESS,
}
impl CLUSPROP_SCSI_ADDRESS {}
impl ::std::default::Default for CLUSPROP_SCSI_ADDRESS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUSPROP_SCSI_ADDRESS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUSPROP_SCSI_ADDRESS {}
unsafe impl ::windows::runtime::Abi for CLUSPROP_SCSI_ADDRESS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_System_SystemServices")]
pub struct CLUSPROP_SECURITY_DESCRIPTOR {
    pub __AnonymousBase_clusapi_L5211_C54: CLUSPROP_VALUE,
    pub Anonymous: CLUSPROP_SECURITY_DESCRIPTOR_0,
}
#[cfg(feature = "Win32_System_SystemServices")]
impl CLUSPROP_SECURITY_DESCRIPTOR {}
#[cfg(feature = "Win32_System_SystemServices")]
impl ::std::default::Default for CLUSPROP_SECURITY_DESCRIPTOR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_SystemServices")]
impl ::std::cmp::PartialEq for CLUSPROP_SECURITY_DESCRIPTOR {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_System_SystemServices")]
impl ::std::cmp::Eq for CLUSPROP_SECURITY_DESCRIPTOR {}
#[cfg(feature = "Win32_System_SystemServices")]
unsafe impl ::windows::runtime::Abi for CLUSPROP_SECURITY_DESCRIPTOR {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_System_SystemServices")]
pub union CLUSPROP_SECURITY_DESCRIPTOR_0 {
    pub sd: super::super::System::SystemServices::SECURITY_DESCRIPTOR_RELATIVE,
    pub rgbSecurityDescriptor: [u8; 1],
}
#[cfg(feature = "Win32_System_SystemServices")]
impl CLUSPROP_SECURITY_DESCRIPTOR_0 {}
#[cfg(feature = "Win32_System_SystemServices")]
impl ::std::default::Default for CLUSPROP_SECURITY_DESCRIPTOR_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_System_SystemServices")]
impl ::std::cmp::PartialEq for CLUSPROP_SECURITY_DESCRIPTOR_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_System_SystemServices")]
impl ::std::cmp::Eq for CLUSPROP_SECURITY_DESCRIPTOR_0 {}
#[cfg(feature = "Win32_System_SystemServices")]
unsafe impl ::windows::runtime::Abi for CLUSPROP_SECURITY_DESCRIPTOR_0 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub union CLUSPROP_SYNTAX {
    pub dw: u32,
    pub Anonymous: CLUSPROP_SYNTAX_0,
}
impl CLUSPROP_SYNTAX {}
impl ::std::default::Default for CLUSPROP_SYNTAX {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUSPROP_SYNTAX {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUSPROP_SYNTAX {}
unsafe impl ::windows::runtime::Abi for CLUSPROP_SYNTAX {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSPROP_SYNTAX_0 {
    pub wFormat: u16,
    pub wType: u16,
}
impl CLUSPROP_SYNTAX_0 {}
impl ::std::default::Default for CLUSPROP_SYNTAX_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUSPROP_SYNTAX_0 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_Anonymous_e__Struct")
            .field("wFormat", &self.wFormat)
            .field("wType", &self.wType)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUSPROP_SYNTAX_0 {
    fn eq(&self, other: &Self) -> bool {
        self.wFormat == other.wFormat && self.wType == other.wType
    }
}
impl ::std::cmp::Eq for CLUSPROP_SYNTAX_0 {}
unsafe impl ::windows::runtime::Abi for CLUSPROP_SYNTAX_0 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSPROP_SZ {
    pub __AnonymousBase_clusapi_L5169_C37: CLUSPROP_VALUE,
    pub sz: [u16; 1],
}
impl CLUSPROP_SZ {}
impl ::std::default::Default for CLUSPROP_SZ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUSPROP_SZ {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUSPROP_SZ {}
unsafe impl ::windows::runtime::Abi for CLUSPROP_SZ {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSPROP_ULARGE_INTEGER {
    pub __AnonymousBase_clusapi_L5186_C14: CLUSPROP_VALUE,
    pub li: u64,
}
impl CLUSPROP_ULARGE_INTEGER {}
impl ::std::default::Default for CLUSPROP_ULARGE_INTEGER {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUSPROP_ULARGE_INTEGER {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUSPROP_ULARGE_INTEGER {}
unsafe impl ::windows::runtime::Abi for CLUSPROP_ULARGE_INTEGER {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSPROP_VALUE {
    pub Syntax: CLUSPROP_SYNTAX,
    pub cbLength: u32,
}
impl CLUSPROP_VALUE {}
impl ::std::default::Default for CLUSPROP_VALUE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUSPROP_VALUE {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUSPROP_VALUE {}
unsafe impl ::windows::runtime::Abi for CLUSPROP_VALUE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSPROP_WORD {
    pub __AnonymousBase_clusapi_L5139_C39: CLUSPROP_VALUE,
    pub w: u16,
}
impl CLUSPROP_WORD {}
impl ::std::default::Default for CLUSPROP_WORD {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUSPROP_WORD {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUSPROP_WORD {}
unsafe impl ::windows::runtime::Abi for CLUSPROP_WORD {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUSREG_DATABASE_ISOLATE_READ: u32 = 2u32;
pub const CLUSREG_DATABASE_SYNC_WRITE_TO_ALL_NODES: u32 = 1u32;
pub const CLUSRESDLL_STATUS_DO_NOT_COLLECT_WER_REPORT: u32 = 1073741824u32;
pub const CLUSRESDLL_STATUS_DUMP_NOW: u32 = 2147483648u32;
pub const CLUSRESDLL_STATUS_INSUFFICIENT_MEMORY: u32 = 16u32;
pub const CLUSRESDLL_STATUS_INSUFFICIENT_OTHER_RESOURCES: u32 = 64u32;
pub const CLUSRESDLL_STATUS_INSUFFICIENT_PROCESSOR: u32 = 32u32;
pub const CLUSRESDLL_STATUS_INVALID_PARAMETERS: u32 = 128u32;
pub const CLUSRESDLL_STATUS_NETWORK_NOT_AVAILABLE: u32 = 256u32;
pub const CLUSRESDLL_STATUS_OFFLINE_BUSY: u32 = 1u32;
pub const CLUSRESDLL_STATUS_OFFLINE_DESTINATION_REJECTED: u32 = 8u32;
pub const CLUSRESDLL_STATUS_OFFLINE_DESTINATION_THROTTLED: u32 = 4u32;
pub const CLUSRESDLL_STATUS_OFFLINE_SOURCE_THROTTLED: u32 = 2u32;
pub const CLUSRES_STATUS_APPLICATION_READY: u64 = 256u64;
pub const CLUSRES_STATUS_EMBEDDED_FAILURE: u64 = 2u64;
pub const CLUSRES_STATUS_FAILED_DUE_TO_INSUFFICIENT_CPU: u64 = 4u64;
pub const CLUSRES_STATUS_FAILED_DUE_TO_INSUFFICIENT_GENERIC_RESOURCES: u64 = 16u64;
pub const CLUSRES_STATUS_FAILED_DUE_TO_INSUFFICIENT_MEMORY: u64 = 8u64;
pub const CLUSRES_STATUS_LOCKED_MODE: u64 = 1u64;
pub const CLUSRES_STATUS_NETWORK_FAILURE: u64 = 32u64;
pub const CLUSRES_STATUS_OFFLINE_NOT_LOCAL_DISK_OWNER: u64 = 512u64;
pub const CLUSRES_STATUS_OS_HEARTBEAT: u64 = 128u64;
pub const CLUSRES_STATUS_UNMONITORED: u64 = 64u64;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTERSET_OBJECT_TYPE(pub i32);
pub const CLUSTERSET_OBJECT_TYPE_NONE: CLUSTERSET_OBJECT_TYPE = CLUSTERSET_OBJECT_TYPE(0i32);
pub const CLUSTERSET_OBJECT_TYPE_MEMBER: CLUSTERSET_OBJECT_TYPE = CLUSTERSET_OBJECT_TYPE(1i32);
pub const CLUSTERSET_OBJECT_TYPE_WORKLOAD: CLUSTERSET_OBJECT_TYPE = CLUSTERSET_OBJECT_TYPE(2i32);
pub const CLUSTERSET_OBJECT_TYPE_DATABASE: CLUSTERSET_OBJECT_TYPE = CLUSTERSET_OBJECT_TYPE(3i32);
impl ::std::convert::From<i32> for CLUSTERSET_OBJECT_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTERSET_OBJECT_TYPE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSTERVERSIONINFO {
    pub dwVersionInfoSize: u32,
    pub MajorVersion: u16,
    pub MinorVersion: u16,
    pub BuildNumber: u16,
    pub szVendorId: [u16; 64],
    pub szCSDVersion: [u16; 64],
    pub dwClusterHighestVersion: u32,
    pub dwClusterLowestVersion: u32,
    pub dwFlags: u32,
    pub dwReserved: u32,
}
impl CLUSTERVERSIONINFO {}
impl ::std::default::Default for CLUSTERVERSIONINFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUSTERVERSIONINFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSTERVERSIONINFO")
            .field("dwVersionInfoSize", &self.dwVersionInfoSize)
            .field("MajorVersion", &self.MajorVersion)
            .field("MinorVersion", &self.MinorVersion)
            .field("BuildNumber", &self.BuildNumber)
            .field("szVendorId", &self.szVendorId)
            .field("szCSDVersion", &self.szCSDVersion)
            .field("dwClusterHighestVersion", &self.dwClusterHighestVersion)
            .field("dwClusterLowestVersion", &self.dwClusterLowestVersion)
            .field("dwFlags", &self.dwFlags)
            .field("dwReserved", &self.dwReserved)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUSTERVERSIONINFO {
    fn eq(&self, other: &Self) -> bool {
        self.dwVersionInfoSize == other.dwVersionInfoSize
            && self.MajorVersion == other.MajorVersion
            && self.MinorVersion == other.MinorVersion
            && self.BuildNumber == other.BuildNumber
            && self.szVendorId == other.szVendorId
            && self.szCSDVersion == other.szCSDVersion
            && self.dwClusterHighestVersion == other.dwClusterHighestVersion
            && self.dwClusterLowestVersion == other.dwClusterLowestVersion
            && self.dwFlags == other.dwFlags
            && self.dwReserved == other.dwReserved
    }
}
impl ::std::cmp::Eq for CLUSTERVERSIONINFO {}
unsafe impl ::windows::runtime::Abi for CLUSTERVERSIONINFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSTERVERSIONINFO_NT4 {
    pub dwVersionInfoSize: u32,
    pub MajorVersion: u16,
    pub MinorVersion: u16,
    pub BuildNumber: u16,
    pub szVendorId: [u16; 64],
    pub szCSDVersion: [u16; 64],
}
impl CLUSTERVERSIONINFO_NT4 {}
impl ::std::default::Default for CLUSTERVERSIONINFO_NT4 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUSTERVERSIONINFO_NT4 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSTERVERSIONINFO_NT4")
            .field("dwVersionInfoSize", &self.dwVersionInfoSize)
            .field("MajorVersion", &self.MajorVersion)
            .field("MinorVersion", &self.MinorVersion)
            .field("BuildNumber", &self.BuildNumber)
            .field("szVendorId", &self.szVendorId)
            .field("szCSDVersion", &self.szCSDVersion)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUSTERVERSIONINFO_NT4 {
    fn eq(&self, other: &Self) -> bool {
        self.dwVersionInfoSize == other.dwVersionInfoSize
            && self.MajorVersion == other.MajorVersion
            && self.MinorVersion == other.MinorVersion
            && self.BuildNumber == other.BuildNumber
            && self.szVendorId == other.szVendorId
            && self.szCSDVersion == other.szCSDVersion
    }
}
impl ::std::cmp::Eq for CLUSTERVERSIONINFO_NT4 {}
unsafe impl ::windows::runtime::Abi for CLUSTERVERSIONINFO_NT4 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CLUSTER_AVAILABILITY_SET_CONFIG {
    pub dwVersion: u32,
    pub dwUpdateDomains: u32,
    pub dwFaultDomains: u32,
    pub bReserveSpareNode: super::super::Foundation::BOOL,
}
#[cfg(feature = "Win32_Foundation")]
impl CLUSTER_AVAILABILITY_SET_CONFIG {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CLUSTER_AVAILABILITY_SET_CONFIG {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CLUSTER_AVAILABILITY_SET_CONFIG {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSTER_AVAILABILITY_SET_CONFIG")
            .field("dwVersion", &self.dwVersion)
            .field("dwUpdateDomains", &self.dwUpdateDomains)
            .field("dwFaultDomains", &self.dwFaultDomains)
            .field("bReserveSpareNode", &self.bReserveSpareNode)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CLUSTER_AVAILABILITY_SET_CONFIG {
    fn eq(&self, other: &Self) -> bool {
        self.dwVersion == other.dwVersion
            && self.dwUpdateDomains == other.dwUpdateDomains
            && self.dwFaultDomains == other.dwFaultDomains
            && self.bReserveSpareNode == other.bReserveSpareNode
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CLUSTER_AVAILABILITY_SET_CONFIG {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CLUSTER_AVAILABILITY_SET_CONFIG {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUSTER_AVAILABILITY_SET_CONFIG_V1: u32 = 1u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CLUSTER_BATCH_COMMAND {
    pub Command: CLUSTER_REG_COMMAND,
    pub dwOptions: u32,
    pub wzName: super::super::Foundation::PWSTR,
    pub lpData: *mut u8,
    pub cbData: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl CLUSTER_BATCH_COMMAND {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CLUSTER_BATCH_COMMAND {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CLUSTER_BATCH_COMMAND {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSTER_BATCH_COMMAND")
            .field("Command", &self.Command)
            .field("dwOptions", &self.dwOptions)
            .field("wzName", &self.wzName)
            .field("lpData", &self.lpData)
            .field("cbData", &self.cbData)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CLUSTER_BATCH_COMMAND {
    fn eq(&self, other: &Self) -> bool {
        self.Command == other.Command
            && self.dwOptions == other.dwOptions
            && self.wzName == other.wzName
            && self.lpData == other.lpData
            && self.cbData == other.cbData
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CLUSTER_BATCH_COMMAND {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CLUSTER_BATCH_COMMAND {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_CHANGE(pub i32);
pub const CLUSTER_CHANGE_NODE_STATE: CLUSTER_CHANGE = CLUSTER_CHANGE(1i32);
pub const CLUSTER_CHANGE_NODE_DELETED: CLUSTER_CHANGE = CLUSTER_CHANGE(2i32);
pub const CLUSTER_CHANGE_NODE_ADDED: CLUSTER_CHANGE = CLUSTER_CHANGE(4i32);
pub const CLUSTER_CHANGE_NODE_PROPERTY: CLUSTER_CHANGE = CLUSTER_CHANGE(8i32);
pub const CLUSTER_CHANGE_REGISTRY_NAME: CLUSTER_CHANGE = CLUSTER_CHANGE(16i32);
pub const CLUSTER_CHANGE_REGISTRY_ATTRIBUTES: CLUSTER_CHANGE = CLUSTER_CHANGE(32i32);
pub const CLUSTER_CHANGE_REGISTRY_VALUE: CLUSTER_CHANGE = CLUSTER_CHANGE(64i32);
pub const CLUSTER_CHANGE_REGISTRY_SUBTREE: CLUSTER_CHANGE = CLUSTER_CHANGE(128i32);
pub const CLUSTER_CHANGE_RESOURCE_STATE: CLUSTER_CHANGE = CLUSTER_CHANGE(256i32);
pub const CLUSTER_CHANGE_RESOURCE_DELETED: CLUSTER_CHANGE = CLUSTER_CHANGE(512i32);
pub const CLUSTER_CHANGE_RESOURCE_ADDED: CLUSTER_CHANGE = CLUSTER_CHANGE(1024i32);
pub const CLUSTER_CHANGE_RESOURCE_PROPERTY: CLUSTER_CHANGE = CLUSTER_CHANGE(2048i32);
pub const CLUSTER_CHANGE_GROUP_STATE: CLUSTER_CHANGE = CLUSTER_CHANGE(4096i32);
pub const CLUSTER_CHANGE_GROUP_DELETED: CLUSTER_CHANGE = CLUSTER_CHANGE(8192i32);
pub const CLUSTER_CHANGE_GROUP_ADDED: CLUSTER_CHANGE = CLUSTER_CHANGE(16384i32);
pub const CLUSTER_CHANGE_GROUP_PROPERTY: CLUSTER_CHANGE = CLUSTER_CHANGE(32768i32);
pub const CLUSTER_CHANGE_RESOURCE_TYPE_DELETED: CLUSTER_CHANGE = CLUSTER_CHANGE(65536i32);
pub const CLUSTER_CHANGE_RESOURCE_TYPE_ADDED: CLUSTER_CHANGE = CLUSTER_CHANGE(131072i32);
pub const CLUSTER_CHANGE_RESOURCE_TYPE_PROPERTY: CLUSTER_CHANGE = CLUSTER_CHANGE(262144i32);
pub const CLUSTER_CHANGE_CLUSTER_RECONNECT: CLUSTER_CHANGE = CLUSTER_CHANGE(524288i32);
pub const CLUSTER_CHANGE_NETWORK_STATE: CLUSTER_CHANGE = CLUSTER_CHANGE(1048576i32);
pub const CLUSTER_CHANGE_NETWORK_DELETED: CLUSTER_CHANGE = CLUSTER_CHANGE(2097152i32);
pub const CLUSTER_CHANGE_NETWORK_ADDED: CLUSTER_CHANGE = CLUSTER_CHANGE(4194304i32);
pub const CLUSTER_CHANGE_NETWORK_PROPERTY: CLUSTER_CHANGE = CLUSTER_CHANGE(8388608i32);
pub const CLUSTER_CHANGE_NETINTERFACE_STATE: CLUSTER_CHANGE = CLUSTER_CHANGE(16777216i32);
pub const CLUSTER_CHANGE_NETINTERFACE_DELETED: CLUSTER_CHANGE = CLUSTER_CHANGE(33554432i32);
pub const CLUSTER_CHANGE_NETINTERFACE_ADDED: CLUSTER_CHANGE = CLUSTER_CHANGE(67108864i32);
pub const CLUSTER_CHANGE_NETINTERFACE_PROPERTY: CLUSTER_CHANGE = CLUSTER_CHANGE(134217728i32);
pub const CLUSTER_CHANGE_QUORUM_STATE: CLUSTER_CHANGE = CLUSTER_CHANGE(268435456i32);
pub const CLUSTER_CHANGE_CLUSTER_STATE: CLUSTER_CHANGE = CLUSTER_CHANGE(536870912i32);
pub const CLUSTER_CHANGE_CLUSTER_PROPERTY: CLUSTER_CHANGE = CLUSTER_CHANGE(1073741824i32);
pub const CLUSTER_CHANGE_HANDLE_CLOSE: CLUSTER_CHANGE = CLUSTER_CHANGE(-2147483648i32);
pub const CLUSTER_CHANGE_ALL: CLUSTER_CHANGE = CLUSTER_CHANGE(-1i32);
impl ::std::convert::From<i32> for CLUSTER_CHANGE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_CHANGE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_CHANGE_CLUSTER_V2(pub i32);
pub const CLUSTER_CHANGE_CLUSTER_RECONNECT_V2: CLUSTER_CHANGE_CLUSTER_V2 =
    CLUSTER_CHANGE_CLUSTER_V2(1i32);
pub const CLUSTER_CHANGE_CLUSTER_STATE_V2: CLUSTER_CHANGE_CLUSTER_V2 =
    CLUSTER_CHANGE_CLUSTER_V2(2i32);
pub const CLUSTER_CHANGE_CLUSTER_GROUP_ADDED_V2: CLUSTER_CHANGE_CLUSTER_V2 =
    CLUSTER_CHANGE_CLUSTER_V2(4i32);
pub const CLUSTER_CHANGE_CLUSTER_HANDLE_CLOSE_V2: CLUSTER_CHANGE_CLUSTER_V2 =
    CLUSTER_CHANGE_CLUSTER_V2(8i32);
pub const CLUSTER_CHANGE_CLUSTER_NETWORK_ADDED_V2: CLUSTER_CHANGE_CLUSTER_V2 =
    CLUSTER_CHANGE_CLUSTER_V2(16i32);
pub const CLUSTER_CHANGE_CLUSTER_NODE_ADDED_V2: CLUSTER_CHANGE_CLUSTER_V2 =
    CLUSTER_CHANGE_CLUSTER_V2(32i32);
pub const CLUSTER_CHANGE_CLUSTER_RESOURCE_TYPE_ADDED_V2: CLUSTER_CHANGE_CLUSTER_V2 =
    CLUSTER_CHANGE_CLUSTER_V2(64i32);
pub const CLUSTER_CHANGE_CLUSTER_COMMON_PROPERTY_V2: CLUSTER_CHANGE_CLUSTER_V2 =
    CLUSTER_CHANGE_CLUSTER_V2(128i32);
pub const CLUSTER_CHANGE_CLUSTER_PRIVATE_PROPERTY_V2: CLUSTER_CHANGE_CLUSTER_V2 =
    CLUSTER_CHANGE_CLUSTER_V2(256i32);
pub const CLUSTER_CHANGE_CLUSTER_LOST_NOTIFICATIONS_V2: CLUSTER_CHANGE_CLUSTER_V2 =
    CLUSTER_CHANGE_CLUSTER_V2(512i32);
pub const CLUSTER_CHANGE_CLUSTER_RENAME_V2: CLUSTER_CHANGE_CLUSTER_V2 =
    CLUSTER_CHANGE_CLUSTER_V2(1024i32);
pub const CLUSTER_CHANGE_CLUSTER_MEMBERSHIP_V2: CLUSTER_CHANGE_CLUSTER_V2 =
    CLUSTER_CHANGE_CLUSTER_V2(2048i32);
pub const CLUSTER_CHANGE_CLUSTER_UPGRADED_V2: CLUSTER_CHANGE_CLUSTER_V2 =
    CLUSTER_CHANGE_CLUSTER_V2(4096i32);
pub const CLUSTER_CHANGE_CLUSTER_ALL_V2: CLUSTER_CHANGE_CLUSTER_V2 =
    CLUSTER_CHANGE_CLUSTER_V2(8191i32);
impl ::std::convert::From<i32> for CLUSTER_CHANGE_CLUSTER_V2 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_CHANGE_CLUSTER_V2 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_CHANGE_GROUPSET_V2(pub i32);
pub const CLUSTER_CHANGE_GROUPSET_DELETED_v2: CLUSTER_CHANGE_GROUPSET_V2 =
    CLUSTER_CHANGE_GROUPSET_V2(1i32);
pub const CLUSTER_CHANGE_GROUPSET_COMMON_PROPERTY_V2: CLUSTER_CHANGE_GROUPSET_V2 =
    CLUSTER_CHANGE_GROUPSET_V2(2i32);
pub const CLUSTER_CHANGE_GROUPSET_PRIVATE_PROPERTY_V2: CLUSTER_CHANGE_GROUPSET_V2 =
    CLUSTER_CHANGE_GROUPSET_V2(4i32);
pub const CLUSTER_CHANGE_GROUPSET_STATE_V2: CLUSTER_CHANGE_GROUPSET_V2 =
    CLUSTER_CHANGE_GROUPSET_V2(8i32);
pub const CLUSTER_CHANGE_GROUPSET_GROUP_ADDED: CLUSTER_CHANGE_GROUPSET_V2 =
    CLUSTER_CHANGE_GROUPSET_V2(16i32);
pub const CLUSTER_CHANGE_GROUPSET_GROUP_REMOVED: CLUSTER_CHANGE_GROUPSET_V2 =
    CLUSTER_CHANGE_GROUPSET_V2(32i32);
pub const CLUSTER_CHANGE_GROUPSET_DEPENDENCIES_V2: CLUSTER_CHANGE_GROUPSET_V2 =
    CLUSTER_CHANGE_GROUPSET_V2(64i32);
pub const CLUSTER_CHANGE_GROUPSET_DEPENDENTS_V2: CLUSTER_CHANGE_GROUPSET_V2 =
    CLUSTER_CHANGE_GROUPSET_V2(128i32);
pub const CLUSTER_CHANGE_GROUPSET_HANDLE_CLOSE_v2: CLUSTER_CHANGE_GROUPSET_V2 =
    CLUSTER_CHANGE_GROUPSET_V2(256i32);
pub const CLUSTER_CHANGE_GROUPSET_ALL_V2: CLUSTER_CHANGE_GROUPSET_V2 =
    CLUSTER_CHANGE_GROUPSET_V2(511i32);
impl ::std::convert::From<i32> for CLUSTER_CHANGE_GROUPSET_V2 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_CHANGE_GROUPSET_V2 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_CHANGE_GROUP_V2(pub i32);
pub const CLUSTER_CHANGE_GROUP_DELETED_V2: CLUSTER_CHANGE_GROUP_V2 = CLUSTER_CHANGE_GROUP_V2(1i32);
pub const CLUSTER_CHANGE_GROUP_COMMON_PROPERTY_V2: CLUSTER_CHANGE_GROUP_V2 =
    CLUSTER_CHANGE_GROUP_V2(2i32);
pub const CLUSTER_CHANGE_GROUP_PRIVATE_PROPERTY_V2: CLUSTER_CHANGE_GROUP_V2 =
    CLUSTER_CHANGE_GROUP_V2(4i32);
pub const CLUSTER_CHANGE_GROUP_STATE_V2: CLUSTER_CHANGE_GROUP_V2 = CLUSTER_CHANGE_GROUP_V2(8i32);
pub const CLUSTER_CHANGE_GROUP_OWNER_NODE_V2: CLUSTER_CHANGE_GROUP_V2 =
    CLUSTER_CHANGE_GROUP_V2(16i32);
pub const CLUSTER_CHANGE_GROUP_PREFERRED_OWNERS_V2: CLUSTER_CHANGE_GROUP_V2 =
    CLUSTER_CHANGE_GROUP_V2(32i32);
pub const CLUSTER_CHANGE_GROUP_RESOURCE_ADDED_V2: CLUSTER_CHANGE_GROUP_V2 =
    CLUSTER_CHANGE_GROUP_V2(64i32);
pub const CLUSTER_CHANGE_GROUP_RESOURCE_GAINED_V2: CLUSTER_CHANGE_GROUP_V2 =
    CLUSTER_CHANGE_GROUP_V2(128i32);
pub const CLUSTER_CHANGE_GROUP_RESOURCE_LOST_V2: CLUSTER_CHANGE_GROUP_V2 =
    CLUSTER_CHANGE_GROUP_V2(256i32);
pub const CLUSTER_CHANGE_GROUP_HANDLE_CLOSE_V2: CLUSTER_CHANGE_GROUP_V2 =
    CLUSTER_CHANGE_GROUP_V2(512i32);
pub const CLUSTER_CHANGE_GROUP_ALL_V2: CLUSTER_CHANGE_GROUP_V2 = CLUSTER_CHANGE_GROUP_V2(1023i32);
impl ::std::convert::From<i32> for CLUSTER_CHANGE_GROUP_V2 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_CHANGE_GROUP_V2 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_CHANGE_NETINTERFACE_V2(pub i32);
pub const CLUSTER_CHANGE_NETINTERFACE_DELETED_V2: CLUSTER_CHANGE_NETINTERFACE_V2 =
    CLUSTER_CHANGE_NETINTERFACE_V2(1i32);
pub const CLUSTER_CHANGE_NETINTERFACE_COMMON_PROPERTY_V2: CLUSTER_CHANGE_NETINTERFACE_V2 =
    CLUSTER_CHANGE_NETINTERFACE_V2(2i32);
pub const CLUSTER_CHANGE_NETINTERFACE_PRIVATE_PROPERTY_V2: CLUSTER_CHANGE_NETINTERFACE_V2 =
    CLUSTER_CHANGE_NETINTERFACE_V2(4i32);
pub const CLUSTER_CHANGE_NETINTERFACE_STATE_V2: CLUSTER_CHANGE_NETINTERFACE_V2 =
    CLUSTER_CHANGE_NETINTERFACE_V2(8i32);
pub const CLUSTER_CHANGE_NETINTERFACE_HANDLE_CLOSE_V2: CLUSTER_CHANGE_NETINTERFACE_V2 =
    CLUSTER_CHANGE_NETINTERFACE_V2(16i32);
pub const CLUSTER_CHANGE_NETINTERFACE_ALL_V2: CLUSTER_CHANGE_NETINTERFACE_V2 =
    CLUSTER_CHANGE_NETINTERFACE_V2(31i32);
impl ::std::convert::From<i32> for CLUSTER_CHANGE_NETINTERFACE_V2 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_CHANGE_NETINTERFACE_V2 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_CHANGE_NETWORK_V2(pub i32);
pub const CLUSTER_CHANGE_NETWORK_DELETED_V2: CLUSTER_CHANGE_NETWORK_V2 =
    CLUSTER_CHANGE_NETWORK_V2(1i32);
pub const CLUSTER_CHANGE_NETWORK_COMMON_PROPERTY_V2: CLUSTER_CHANGE_NETWORK_V2 =
    CLUSTER_CHANGE_NETWORK_V2(2i32);
pub const CLUSTER_CHANGE_NETWORK_PRIVATE_PROPERTY_V2: CLUSTER_CHANGE_NETWORK_V2 =
    CLUSTER_CHANGE_NETWORK_V2(4i32);
pub const CLUSTER_CHANGE_NETWORK_STATE_V2: CLUSTER_CHANGE_NETWORK_V2 =
    CLUSTER_CHANGE_NETWORK_V2(8i32);
pub const CLUSTER_CHANGE_NETWORK_HANDLE_CLOSE_V2: CLUSTER_CHANGE_NETWORK_V2 =
    CLUSTER_CHANGE_NETWORK_V2(16i32);
pub const CLUSTER_CHANGE_NETWORK_ALL_V2: CLUSTER_CHANGE_NETWORK_V2 =
    CLUSTER_CHANGE_NETWORK_V2(31i32);
impl ::std::convert::From<i32> for CLUSTER_CHANGE_NETWORK_V2 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_CHANGE_NETWORK_V2 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_CHANGE_NODE_UPGRADE_PHASE_V2(pub i32);
pub const CLUSTER_CHANGE_UPGRADE_NODE_PREPARE: CLUSTER_CHANGE_NODE_UPGRADE_PHASE_V2 =
    CLUSTER_CHANGE_NODE_UPGRADE_PHASE_V2(1i32);
pub const CLUSTER_CHANGE_UPGRADE_NODE_COMMIT: CLUSTER_CHANGE_NODE_UPGRADE_PHASE_V2 =
    CLUSTER_CHANGE_NODE_UPGRADE_PHASE_V2(2i32);
pub const CLUSTER_CHANGE_UPGRADE_NODE_POSTCOMMIT: CLUSTER_CHANGE_NODE_UPGRADE_PHASE_V2 =
    CLUSTER_CHANGE_NODE_UPGRADE_PHASE_V2(4i32);
pub const CLUSTER_CHANGE_UPGRADE_ALL: CLUSTER_CHANGE_NODE_UPGRADE_PHASE_V2 =
    CLUSTER_CHANGE_NODE_UPGRADE_PHASE_V2(7i32);
impl ::std::convert::From<i32> for CLUSTER_CHANGE_NODE_UPGRADE_PHASE_V2 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_CHANGE_NODE_UPGRADE_PHASE_V2 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_CHANGE_NODE_V2(pub i32);
pub const CLUSTER_CHANGE_NODE_NETINTERFACE_ADDED_V2: CLUSTER_CHANGE_NODE_V2 =
    CLUSTER_CHANGE_NODE_V2(1i32);
pub const CLUSTER_CHANGE_NODE_DELETED_V2: CLUSTER_CHANGE_NODE_V2 = CLUSTER_CHANGE_NODE_V2(2i32);
pub const CLUSTER_CHANGE_NODE_COMMON_PROPERTY_V2: CLUSTER_CHANGE_NODE_V2 =
    CLUSTER_CHANGE_NODE_V2(4i32);
pub const CLUSTER_CHANGE_NODE_PRIVATE_PROPERTY_V2: CLUSTER_CHANGE_NODE_V2 =
    CLUSTER_CHANGE_NODE_V2(8i32);
pub const CLUSTER_CHANGE_NODE_STATE_V2: CLUSTER_CHANGE_NODE_V2 = CLUSTER_CHANGE_NODE_V2(16i32);
pub const CLUSTER_CHANGE_NODE_GROUP_GAINED_V2: CLUSTER_CHANGE_NODE_V2 =
    CLUSTER_CHANGE_NODE_V2(32i32);
pub const CLUSTER_CHANGE_NODE_GROUP_LOST_V2: CLUSTER_CHANGE_NODE_V2 = CLUSTER_CHANGE_NODE_V2(64i32);
pub const CLUSTER_CHANGE_NODE_HANDLE_CLOSE_V2: CLUSTER_CHANGE_NODE_V2 =
    CLUSTER_CHANGE_NODE_V2(128i32);
pub const CLUSTER_CHANGE_NODE_ALL_V2: CLUSTER_CHANGE_NODE_V2 = CLUSTER_CHANGE_NODE_V2(255i32);
impl ::std::convert::From<i32> for CLUSTER_CHANGE_NODE_V2 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_CHANGE_NODE_V2 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_CHANGE_QUORUM_V2(pub i32);
pub const CLUSTER_CHANGE_QUORUM_STATE_V2: CLUSTER_CHANGE_QUORUM_V2 = CLUSTER_CHANGE_QUORUM_V2(1i32);
pub const CLUSTER_CHANGE_QUORUM_ALL_V2: CLUSTER_CHANGE_QUORUM_V2 = CLUSTER_CHANGE_QUORUM_V2(1i32);
impl ::std::convert::From<i32> for CLUSTER_CHANGE_QUORUM_V2 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_CHANGE_QUORUM_V2 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_CHANGE_REGISTRY_V2(pub i32);
pub const CLUSTER_CHANGE_REGISTRY_ATTRIBUTES_V2: CLUSTER_CHANGE_REGISTRY_V2 =
    CLUSTER_CHANGE_REGISTRY_V2(1i32);
pub const CLUSTER_CHANGE_REGISTRY_NAME_V2: CLUSTER_CHANGE_REGISTRY_V2 =
    CLUSTER_CHANGE_REGISTRY_V2(2i32);
pub const CLUSTER_CHANGE_REGISTRY_SUBTREE_V2: CLUSTER_CHANGE_REGISTRY_V2 =
    CLUSTER_CHANGE_REGISTRY_V2(4i32);
pub const CLUSTER_CHANGE_REGISTRY_VALUE_V2: CLUSTER_CHANGE_REGISTRY_V2 =
    CLUSTER_CHANGE_REGISTRY_V2(8i32);
pub const CLUSTER_CHANGE_REGISTRY_HANDLE_CLOSE_V2: CLUSTER_CHANGE_REGISTRY_V2 =
    CLUSTER_CHANGE_REGISTRY_V2(16i32);
pub const CLUSTER_CHANGE_REGISTRY_ALL_V2: CLUSTER_CHANGE_REGISTRY_V2 =
    CLUSTER_CHANGE_REGISTRY_V2(31i32);
impl ::std::convert::From<i32> for CLUSTER_CHANGE_REGISTRY_V2 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_CHANGE_REGISTRY_V2 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_CHANGE_RESOURCE_TYPE_V2(pub i32);
pub const CLUSTER_CHANGE_RESOURCE_TYPE_DELETED_V2: CLUSTER_CHANGE_RESOURCE_TYPE_V2 =
    CLUSTER_CHANGE_RESOURCE_TYPE_V2(1i32);
pub const CLUSTER_CHANGE_RESOURCE_TYPE_COMMON_PROPERTY_V2: CLUSTER_CHANGE_RESOURCE_TYPE_V2 =
    CLUSTER_CHANGE_RESOURCE_TYPE_V2(2i32);
pub const CLUSTER_CHANGE_RESOURCE_TYPE_PRIVATE_PROPERTY_V2: CLUSTER_CHANGE_RESOURCE_TYPE_V2 =
    CLUSTER_CHANGE_RESOURCE_TYPE_V2(4i32);
pub const CLUSTER_CHANGE_RESOURCE_TYPE_POSSIBLE_OWNERS_V2: CLUSTER_CHANGE_RESOURCE_TYPE_V2 =
    CLUSTER_CHANGE_RESOURCE_TYPE_V2(8i32);
pub const CLUSTER_CHANGE_RESOURCE_TYPE_DLL_UPGRADED_V2: CLUSTER_CHANGE_RESOURCE_TYPE_V2 =
    CLUSTER_CHANGE_RESOURCE_TYPE_V2(16i32);
pub const CLUSTER_RESOURCE_TYPE_SPECIFIC_V2: CLUSTER_CHANGE_RESOURCE_TYPE_V2 =
    CLUSTER_CHANGE_RESOURCE_TYPE_V2(32i32);
pub const CLUSTER_CHANGE_RESOURCE_TYPE_ALL_V2: CLUSTER_CHANGE_RESOURCE_TYPE_V2 =
    CLUSTER_CHANGE_RESOURCE_TYPE_V2(63i32);
impl ::std::convert::From<i32> for CLUSTER_CHANGE_RESOURCE_TYPE_V2 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_CHANGE_RESOURCE_TYPE_V2 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_CHANGE_RESOURCE_V2(pub i32);
pub const CLUSTER_CHANGE_RESOURCE_COMMON_PROPERTY_V2: CLUSTER_CHANGE_RESOURCE_V2 =
    CLUSTER_CHANGE_RESOURCE_V2(1i32);
pub const CLUSTER_CHANGE_RESOURCE_PRIVATE_PROPERTY_V2: CLUSTER_CHANGE_RESOURCE_V2 =
    CLUSTER_CHANGE_RESOURCE_V2(2i32);
pub const CLUSTER_CHANGE_RESOURCE_STATE_V2: CLUSTER_CHANGE_RESOURCE_V2 =
    CLUSTER_CHANGE_RESOURCE_V2(4i32);
pub const CLUSTER_CHANGE_RESOURCE_OWNER_GROUP_V2: CLUSTER_CHANGE_RESOURCE_V2 =
    CLUSTER_CHANGE_RESOURCE_V2(8i32);
pub const CLUSTER_CHANGE_RESOURCE_DEPENDENCIES_V2: CLUSTER_CHANGE_RESOURCE_V2 =
    CLUSTER_CHANGE_RESOURCE_V2(16i32);
pub const CLUSTER_CHANGE_RESOURCE_DEPENDENTS_V2: CLUSTER_CHANGE_RESOURCE_V2 =
    CLUSTER_CHANGE_RESOURCE_V2(32i32);
pub const CLUSTER_CHANGE_RESOURCE_POSSIBLE_OWNERS_V2: CLUSTER_CHANGE_RESOURCE_V2 =
    CLUSTER_CHANGE_RESOURCE_V2(64i32);
pub const CLUSTER_CHANGE_RESOURCE_DELETED_V2: CLUSTER_CHANGE_RESOURCE_V2 =
    CLUSTER_CHANGE_RESOURCE_V2(128i32);
pub const CLUSTER_CHANGE_RESOURCE_DLL_UPGRADED_V2: CLUSTER_CHANGE_RESOURCE_V2 =
    CLUSTER_CHANGE_RESOURCE_V2(256i32);
pub const CLUSTER_CHANGE_RESOURCE_HANDLE_CLOSE_V2: CLUSTER_CHANGE_RESOURCE_V2 =
    CLUSTER_CHANGE_RESOURCE_V2(512i32);
pub const CLUSTER_CHANGE_RESOURCE_TERMINAL_STATE_V2: CLUSTER_CHANGE_RESOURCE_V2 =
    CLUSTER_CHANGE_RESOURCE_V2(1024i32);
pub const CLUSTER_CHANGE_RESOURCE_ALL_V2: CLUSTER_CHANGE_RESOURCE_V2 =
    CLUSTER_CHANGE_RESOURCE_V2(2047i32);
impl ::std::convert::From<i32> for CLUSTER_CHANGE_RESOURCE_V2 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_CHANGE_RESOURCE_V2 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_CHANGE_SHARED_VOLUME_V2(pub i32);
pub const CLUSTER_CHANGE_SHARED_VOLUME_STATE_V2: CLUSTER_CHANGE_SHARED_VOLUME_V2 =
    CLUSTER_CHANGE_SHARED_VOLUME_V2(1i32);
pub const CLUSTER_CHANGE_SHARED_VOLUME_ADDED_V2: CLUSTER_CHANGE_SHARED_VOLUME_V2 =
    CLUSTER_CHANGE_SHARED_VOLUME_V2(2i32);
pub const CLUSTER_CHANGE_SHARED_VOLUME_REMOVED_V2: CLUSTER_CHANGE_SHARED_VOLUME_V2 =
    CLUSTER_CHANGE_SHARED_VOLUME_V2(4i32);
pub const CLUSTER_CHANGE_SHARED_VOLUME_ALL_V2: CLUSTER_CHANGE_SHARED_VOLUME_V2 =
    CLUSTER_CHANGE_SHARED_VOLUME_V2(7i32);
impl ::std::convert::From<i32> for CLUSTER_CHANGE_SHARED_VOLUME_V2 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_CHANGE_SHARED_VOLUME_V2 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_CHANGE_SPACEPORT_V2(pub i32);
pub const CLUSTER_CHANGE_SPACEPORT_CUSTOM_PNP_V2: CLUSTER_CHANGE_SPACEPORT_V2 =
    CLUSTER_CHANGE_SPACEPORT_V2(1i32);
impl ::std::convert::From<i32> for CLUSTER_CHANGE_SPACEPORT_V2 {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_CHANGE_SPACEPORT_V2 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_CLOUD_TYPE(pub i32);
pub const CLUSTER_CLOUD_TYPE_NONE: CLUSTER_CLOUD_TYPE = CLUSTER_CLOUD_TYPE(0i32);
pub const CLUSTER_CLOUD_TYPE_AZURE: CLUSTER_CLOUD_TYPE = CLUSTER_CLOUD_TYPE(1i32);
pub const CLUSTER_CLOUD_TYPE_MIXED: CLUSTER_CLOUD_TYPE = CLUSTER_CLOUD_TYPE(128i32);
pub const CLUSTER_CLOUD_TYPE_UNKNOWN: CLUSTER_CLOUD_TYPE = CLUSTER_CLOUD_TYPE(-1i32);
impl ::std::convert::From<i32> for CLUSTER_CLOUD_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_CLOUD_TYPE {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUSTER_CONFIGURED: u32 = 2u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_CONTROL_OBJECT(pub i32);
pub const CLUS_OBJECT_INVALID: CLUSTER_CONTROL_OBJECT = CLUSTER_CONTROL_OBJECT(0i32);
pub const CLUS_OBJECT_RESOURCE: CLUSTER_CONTROL_OBJECT = CLUSTER_CONTROL_OBJECT(1i32);
pub const CLUS_OBJECT_RESOURCE_TYPE: CLUSTER_CONTROL_OBJECT = CLUSTER_CONTROL_OBJECT(2i32);
pub const CLUS_OBJECT_GROUP: CLUSTER_CONTROL_OBJECT = CLUSTER_CONTROL_OBJECT(3i32);
pub const CLUS_OBJECT_NODE: CLUSTER_CONTROL_OBJECT = CLUSTER_CONTROL_OBJECT(4i32);
pub const CLUS_OBJECT_NETWORK: CLUSTER_CONTROL_OBJECT = CLUSTER_CONTROL_OBJECT(5i32);
pub const CLUS_OBJECT_NETINTERFACE: CLUSTER_CONTROL_OBJECT = CLUSTER_CONTROL_OBJECT(6i32);
pub const CLUS_OBJECT_CLUSTER: CLUSTER_CONTROL_OBJECT = CLUSTER_CONTROL_OBJECT(7i32);
pub const CLUS_OBJECT_GROUPSET: CLUSTER_CONTROL_OBJECT = CLUSTER_CONTROL_OBJECT(8i32);
pub const CLUS_OBJECT_AFFINITYRULE: CLUSTER_CONTROL_OBJECT = CLUSTER_CONTROL_OBJECT(9i32);
pub const CLUS_OBJECT_USER: CLUSTER_CONTROL_OBJECT = CLUSTER_CONTROL_OBJECT(128i32);
impl ::std::convert::From<i32> for CLUSTER_CONTROL_OBJECT {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_CONTROL_OBJECT {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSTER_CREATE_GROUP_INFO {
    pub dwVersion: u32,
    pub groupType: CLUSGROUP_TYPE,
}
impl CLUSTER_CREATE_GROUP_INFO {}
impl ::std::default::Default for CLUSTER_CREATE_GROUP_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUSTER_CREATE_GROUP_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSTER_CREATE_GROUP_INFO")
            .field("dwVersion", &self.dwVersion)
            .field("groupType", &self.groupType)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUSTER_CREATE_GROUP_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.dwVersion == other.dwVersion && self.groupType == other.groupType
    }
}
impl ::std::cmp::Eq for CLUSTER_CREATE_GROUP_INFO {}
unsafe impl ::windows::runtime::Abi for CLUSTER_CREATE_GROUP_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUSTER_CREATE_GROUP_INFO_VERSION: u32 = 1u32;
pub const CLUSTER_CREATE_GROUP_INFO_VERSION_1: u32 = 1u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_CSV_VOLUME_FAULT_STATE(pub i32);
pub const VolumeStateNoFaults: CLUSTER_CSV_VOLUME_FAULT_STATE =
    CLUSTER_CSV_VOLUME_FAULT_STATE(0i32);
pub const VolumeStateNoDirectIO: CLUSTER_CSV_VOLUME_FAULT_STATE =
    CLUSTER_CSV_VOLUME_FAULT_STATE(1i32);
pub const VolumeStateNoAccess: CLUSTER_CSV_VOLUME_FAULT_STATE =
    CLUSTER_CSV_VOLUME_FAULT_STATE(2i32);
pub const VolumeStateInMaintenance: CLUSTER_CSV_VOLUME_FAULT_STATE =
    CLUSTER_CSV_VOLUME_FAULT_STATE(4i32);
pub const VolumeStateDismounted: CLUSTER_CSV_VOLUME_FAULT_STATE =
    CLUSTER_CSV_VOLUME_FAULT_STATE(8i32);
impl ::std::convert::From<i32> for CLUSTER_CSV_VOLUME_FAULT_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_CSV_VOLUME_FAULT_STATE {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUSTER_DELETE_ACCESS_CONTROL_ENTRY: u32 = 2u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_ENUM(pub i32);
pub const CLUSTER_ENUM_NODE: CLUSTER_ENUM = CLUSTER_ENUM(1i32);
pub const CLUSTER_ENUM_RESTYPE: CLUSTER_ENUM = CLUSTER_ENUM(2i32);
pub const CLUSTER_ENUM_RESOURCE: CLUSTER_ENUM = CLUSTER_ENUM(4i32);
pub const CLUSTER_ENUM_GROUP: CLUSTER_ENUM = CLUSTER_ENUM(8i32);
pub const CLUSTER_ENUM_NETWORK: CLUSTER_ENUM = CLUSTER_ENUM(16i32);
pub const CLUSTER_ENUM_NETINTERFACE: CLUSTER_ENUM = CLUSTER_ENUM(32i32);
pub const CLUSTER_ENUM_SHARED_VOLUME_GROUP: CLUSTER_ENUM = CLUSTER_ENUM(536870912i32);
pub const CLUSTER_ENUM_SHARED_VOLUME_RESOURCE: CLUSTER_ENUM = CLUSTER_ENUM(1073741824i32);
pub const CLUSTER_ENUM_INTERNAL_NETWORK: CLUSTER_ENUM = CLUSTER_ENUM(-2147483648i32);
pub const CLUSTER_ENUM_ALL: CLUSTER_ENUM = CLUSTER_ENUM(63i32);
impl ::std::convert::From<i32> for CLUSTER_ENUM {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_ENUM {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CLUSTER_ENUM_ITEM {
    pub dwVersion: u32,
    pub dwType: u32,
    pub cbId: u32,
    pub lpszId: super::super::Foundation::PWSTR,
    pub cbName: u32,
    pub lpszName: super::super::Foundation::PWSTR,
}
#[cfg(feature = "Win32_Foundation")]
impl CLUSTER_ENUM_ITEM {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CLUSTER_ENUM_ITEM {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CLUSTER_ENUM_ITEM {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSTER_ENUM_ITEM")
            .field("dwVersion", &self.dwVersion)
            .field("dwType", &self.dwType)
            .field("cbId", &self.cbId)
            .field("lpszId", &self.lpszId)
            .field("cbName", &self.cbName)
            .field("lpszName", &self.lpszName)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CLUSTER_ENUM_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.dwVersion == other.dwVersion
            && self.dwType == other.dwType
            && self.cbId == other.cbId
            && self.lpszId == other.lpszId
            && self.cbName == other.cbName
            && self.lpszName == other.lpszName
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CLUSTER_ENUM_ITEM {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CLUSTER_ENUM_ITEM {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUSTER_ENUM_ITEM_VERSION: u32 = 1u32;
pub const CLUSTER_ENUM_ITEM_VERSION_1: u32 = 1u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_GROUP_AUTOFAILBACK_TYPE(pub i32);
pub const ClusterGroupPreventFailback: CLUSTER_GROUP_AUTOFAILBACK_TYPE =
    CLUSTER_GROUP_AUTOFAILBACK_TYPE(0i32);
pub const ClusterGroupAllowFailback: CLUSTER_GROUP_AUTOFAILBACK_TYPE =
    CLUSTER_GROUP_AUTOFAILBACK_TYPE(1i32);
pub const ClusterGroupFailbackTypeCount: CLUSTER_GROUP_AUTOFAILBACK_TYPE =
    CLUSTER_GROUP_AUTOFAILBACK_TYPE(2i32);
impl ::std::convert::From<i32> for CLUSTER_GROUP_AUTOFAILBACK_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_GROUP_AUTOFAILBACK_TYPE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_GROUP_ENUM(pub i32);
pub const CLUSTER_GROUP_ENUM_CONTAINS: CLUSTER_GROUP_ENUM = CLUSTER_GROUP_ENUM(1i32);
pub const CLUSTER_GROUP_ENUM_NODES: CLUSTER_GROUP_ENUM = CLUSTER_GROUP_ENUM(2i32);
pub const CLUSTER_GROUP_ENUM_ALL: CLUSTER_GROUP_ENUM = CLUSTER_GROUP_ENUM(3i32);
impl ::std::convert::From<i32> for CLUSTER_GROUP_ENUM {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_GROUP_ENUM {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CLUSTER_GROUP_ENUM_ITEM {
    pub dwVersion: u32,
    pub cbId: u32,
    pub lpszId: super::super::Foundation::PWSTR,
    pub cbName: u32,
    pub lpszName: super::super::Foundation::PWSTR,
    pub state: CLUSTER_GROUP_STATE,
    pub cbOwnerNode: u32,
    pub lpszOwnerNode: super::super::Foundation::PWSTR,
    pub dwFlags: u32,
    pub cbProperties: u32,
    pub pProperties: *mut ::std::ffi::c_void,
    pub cbRoProperties: u32,
    pub pRoProperties: *mut ::std::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl CLUSTER_GROUP_ENUM_ITEM {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CLUSTER_GROUP_ENUM_ITEM {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CLUSTER_GROUP_ENUM_ITEM {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSTER_GROUP_ENUM_ITEM")
            .field("dwVersion", &self.dwVersion)
            .field("cbId", &self.cbId)
            .field("lpszId", &self.lpszId)
            .field("cbName", &self.cbName)
            .field("lpszName", &self.lpszName)
            .field("state", &self.state)
            .field("cbOwnerNode", &self.cbOwnerNode)
            .field("lpszOwnerNode", &self.lpszOwnerNode)
            .field("dwFlags", &self.dwFlags)
            .field("cbProperties", &self.cbProperties)
            .field("pProperties", &self.pProperties)
            .field("cbRoProperties", &self.cbRoProperties)
            .field("pRoProperties", &self.pRoProperties)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CLUSTER_GROUP_ENUM_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.dwVersion == other.dwVersion
            && self.cbId == other.cbId
            && self.lpszId == other.lpszId
            && self.cbName == other.cbName
            && self.lpszName == other.lpszName
            && self.state == other.state
            && self.cbOwnerNode == other.cbOwnerNode
            && self.lpszOwnerNode == other.lpszOwnerNode
            && self.dwFlags == other.dwFlags
            && self.cbProperties == other.cbProperties
            && self.pProperties == other.pProperties
            && self.cbRoProperties == other.cbRoProperties
            && self.pRoProperties == other.pRoProperties
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CLUSTER_GROUP_ENUM_ITEM {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CLUSTER_GROUP_ENUM_ITEM {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUSTER_GROUP_ENUM_ITEM_VERSION: u32 = 1u32;
pub const CLUSTER_GROUP_ENUM_ITEM_VERSION_1: u32 = 1u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_GROUP_PRIORITY(pub i32);
pub const PriorityDisabled: CLUSTER_GROUP_PRIORITY = CLUSTER_GROUP_PRIORITY(0i32);
pub const PriorityLow: CLUSTER_GROUP_PRIORITY = CLUSTER_GROUP_PRIORITY(1000i32);
pub const PriorityMedium: CLUSTER_GROUP_PRIORITY = CLUSTER_GROUP_PRIORITY(2000i32);
pub const PriorityHigh: CLUSTER_GROUP_PRIORITY = CLUSTER_GROUP_PRIORITY(3000i32);
impl ::std::convert::From<i32> for CLUSTER_GROUP_PRIORITY {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_GROUP_PRIORITY {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_GROUP_STATE(pub i32);
pub const ClusterGroupStateUnknown: CLUSTER_GROUP_STATE = CLUSTER_GROUP_STATE(-1i32);
pub const ClusterGroupOnline: CLUSTER_GROUP_STATE = CLUSTER_GROUP_STATE(0i32);
pub const ClusterGroupOffline: CLUSTER_GROUP_STATE = CLUSTER_GROUP_STATE(1i32);
pub const ClusterGroupFailed: CLUSTER_GROUP_STATE = CLUSTER_GROUP_STATE(2i32);
pub const ClusterGroupPartialOnline: CLUSTER_GROUP_STATE = CLUSTER_GROUP_STATE(3i32);
pub const ClusterGroupPending: CLUSTER_GROUP_STATE = CLUSTER_GROUP_STATE(4i32);
impl ::std::convert::From<i32> for CLUSTER_GROUP_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_GROUP_STATE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CLUSTER_HEALTH_FAULT {
    pub Id: super::super::Foundation::PWSTR,
    pub ErrorType: u32,
    pub ErrorCode: u32,
    pub Description: super::super::Foundation::PWSTR,
    pub Provider: super::super::Foundation::PWSTR,
    pub Flags: u32,
    pub Reserved: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl CLUSTER_HEALTH_FAULT {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CLUSTER_HEALTH_FAULT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CLUSTER_HEALTH_FAULT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSTER_HEALTH_FAULT")
            .field("Id", &self.Id)
            .field("ErrorType", &self.ErrorType)
            .field("ErrorCode", &self.ErrorCode)
            .field("Description", &self.Description)
            .field("Provider", &self.Provider)
            .field("Flags", &self.Flags)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CLUSTER_HEALTH_FAULT {
    fn eq(&self, other: &Self) -> bool {
        self.Id == other.Id
            && self.ErrorType == other.ErrorType
            && self.ErrorCode == other.ErrorCode
            && self.Description == other.Description
            && self.Provider == other.Provider
            && self.Flags == other.Flags
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CLUSTER_HEALTH_FAULT {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CLUSTER_HEALTH_FAULT {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUSTER_HEALTH_FAULT_ARGS: u32 = 7u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CLUSTER_HEALTH_FAULT_ARRAY {
    pub numFaults: u32,
    pub faults: *mut CLUSTER_HEALTH_FAULT,
}
#[cfg(feature = "Win32_Foundation")]
impl CLUSTER_HEALTH_FAULT_ARRAY {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CLUSTER_HEALTH_FAULT_ARRAY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CLUSTER_HEALTH_FAULT_ARRAY {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSTER_HEALTH_FAULT_ARRAY")
            .field("numFaults", &self.numFaults)
            .field("faults", &self.faults)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CLUSTER_HEALTH_FAULT_ARRAY {
    fn eq(&self, other: &Self) -> bool {
        self.numFaults == other.numFaults && self.faults == other.faults
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CLUSTER_HEALTH_FAULT_ARRAY {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CLUSTER_HEALTH_FAULT_ARRAY {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUSTER_HEALTH_FAULT_DESCRIPTION: u32 = 3u32;
pub const CLUSTER_HEALTH_FAULT_ERRORCODE: u32 = 2u32;
pub const CLUSTER_HEALTH_FAULT_ERRORTYPE: u32 = 1u32;
pub const CLUSTER_HEALTH_FAULT_FLAGS: u32 = 5u32;
pub const CLUSTER_HEALTH_FAULT_ID: u32 = 0u32;
pub const CLUSTER_HEALTH_FAULT_PROVIDER: u32 = 4u32;
pub const CLUSTER_HEALTH_FAULT_RESERVED: u32 = 6u32;
pub const CLUSTER_INSTALLED: u32 = 1u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CLUSTER_IP_ENTRY {
    pub lpszIpAddress: super::super::Foundation::PWSTR,
    pub dwPrefixLength: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl CLUSTER_IP_ENTRY {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CLUSTER_IP_ENTRY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CLUSTER_IP_ENTRY {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSTER_IP_ENTRY")
            .field("lpszIpAddress", &self.lpszIpAddress)
            .field("dwPrefixLength", &self.dwPrefixLength)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CLUSTER_IP_ENTRY {
    fn eq(&self, other: &Self) -> bool {
        self.lpszIpAddress == other.lpszIpAddress && self.dwPrefixLength == other.dwPrefixLength
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CLUSTER_IP_ENTRY {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CLUSTER_IP_ENTRY {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CLUSTER_MEMBERSHIP_INFO {
    pub HasQuorum: super::super::Foundation::BOOL,
    pub UpnodesSize: u32,
    pub Upnodes: [u8; 1],
}
#[cfg(feature = "Win32_Foundation")]
impl CLUSTER_MEMBERSHIP_INFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CLUSTER_MEMBERSHIP_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CLUSTER_MEMBERSHIP_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSTER_MEMBERSHIP_INFO")
            .field("HasQuorum", &self.HasQuorum)
            .field("UpnodesSize", &self.UpnodesSize)
            .field("Upnodes", &self.Upnodes)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CLUSTER_MEMBERSHIP_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.HasQuorum == other.HasQuorum
            && self.UpnodesSize == other.UpnodesSize
            && self.Upnodes == other.Upnodes
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CLUSTER_MEMBERSHIP_INFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CLUSTER_MEMBERSHIP_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_MGMT_POINT_RESTYPE(pub i32);
pub const CLUSTER_MGMT_POINT_RESTYPE_AUTO: CLUSTER_MGMT_POINT_RESTYPE =
    CLUSTER_MGMT_POINT_RESTYPE(0i32);
pub const CLUSTER_MGMT_POINT_RESTYPE_SNN: CLUSTER_MGMT_POINT_RESTYPE =
    CLUSTER_MGMT_POINT_RESTYPE(1i32);
pub const CLUSTER_MGMT_POINT_RESTYPE_DNN: CLUSTER_MGMT_POINT_RESTYPE =
    CLUSTER_MGMT_POINT_RESTYPE(2i32);
impl ::std::convert::From<i32> for CLUSTER_MGMT_POINT_RESTYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_MGMT_POINT_RESTYPE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_MGMT_POINT_TYPE(pub i32);
pub const CLUSTER_MGMT_POINT_TYPE_NONE: CLUSTER_MGMT_POINT_TYPE = CLUSTER_MGMT_POINT_TYPE(0i32);
pub const CLUSTER_MGMT_POINT_TYPE_CNO: CLUSTER_MGMT_POINT_TYPE = CLUSTER_MGMT_POINT_TYPE(1i32);
pub const CLUSTER_MGMT_POINT_TYPE_DNS_ONLY: CLUSTER_MGMT_POINT_TYPE = CLUSTER_MGMT_POINT_TYPE(2i32);
pub const CLUSTER_MGMT_POINT_TYPE_CNO_ONLY: CLUSTER_MGMT_POINT_TYPE = CLUSTER_MGMT_POINT_TYPE(3i32);
impl ::std::convert::From<i32> for CLUSTER_MGMT_POINT_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_MGMT_POINT_TYPE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_NETINTERFACE_STATE(pub i32);
pub const ClusterNetInterfaceStateUnknown: CLUSTER_NETINTERFACE_STATE =
    CLUSTER_NETINTERFACE_STATE(-1i32);
pub const ClusterNetInterfaceUnavailable: CLUSTER_NETINTERFACE_STATE =
    CLUSTER_NETINTERFACE_STATE(0i32);
pub const ClusterNetInterfaceFailed: CLUSTER_NETINTERFACE_STATE = CLUSTER_NETINTERFACE_STATE(1i32);
pub const ClusterNetInterfaceUnreachable: CLUSTER_NETINTERFACE_STATE =
    CLUSTER_NETINTERFACE_STATE(2i32);
pub const ClusterNetInterfaceUp: CLUSTER_NETINTERFACE_STATE = CLUSTER_NETINTERFACE_STATE(3i32);
impl ::std::convert::From<i32> for CLUSTER_NETINTERFACE_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_NETINTERFACE_STATE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_NETWORK_ENUM(pub i32);
pub const CLUSTER_NETWORK_ENUM_NETINTERFACES: CLUSTER_NETWORK_ENUM = CLUSTER_NETWORK_ENUM(1i32);
pub const CLUSTER_NETWORK_ENUM_ALL: CLUSTER_NETWORK_ENUM = CLUSTER_NETWORK_ENUM(1i32);
impl ::std::convert::From<i32> for CLUSTER_NETWORK_ENUM {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_NETWORK_ENUM {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_NETWORK_ROLE(pub i32);
pub const ClusterNetworkRoleNone: CLUSTER_NETWORK_ROLE = CLUSTER_NETWORK_ROLE(0i32);
pub const ClusterNetworkRoleInternalUse: CLUSTER_NETWORK_ROLE = CLUSTER_NETWORK_ROLE(1i32);
pub const ClusterNetworkRoleClientAccess: CLUSTER_NETWORK_ROLE = CLUSTER_NETWORK_ROLE(2i32);
pub const ClusterNetworkRoleInternalAndClient: CLUSTER_NETWORK_ROLE = CLUSTER_NETWORK_ROLE(3i32);
impl ::std::convert::From<i32> for CLUSTER_NETWORK_ROLE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_NETWORK_ROLE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_NETWORK_STATE(pub i32);
pub const ClusterNetworkStateUnknown: CLUSTER_NETWORK_STATE = CLUSTER_NETWORK_STATE(-1i32);
pub const ClusterNetworkUnavailable: CLUSTER_NETWORK_STATE = CLUSTER_NETWORK_STATE(0i32);
pub const ClusterNetworkDown: CLUSTER_NETWORK_STATE = CLUSTER_NETWORK_STATE(1i32);
pub const ClusterNetworkPartitioned: CLUSTER_NETWORK_STATE = CLUSTER_NETWORK_STATE(2i32);
pub const ClusterNetworkUp: CLUSTER_NETWORK_STATE = CLUSTER_NETWORK_STATE(3i32);
impl ::std::convert::From<i32> for CLUSTER_NETWORK_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_NETWORK_STATE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_NODE_DRAIN_STATUS(pub i32);
pub const NodeDrainStatusNotInitiated: CLUSTER_NODE_DRAIN_STATUS = CLUSTER_NODE_DRAIN_STATUS(0i32);
pub const NodeDrainStatusInProgress: CLUSTER_NODE_DRAIN_STATUS = CLUSTER_NODE_DRAIN_STATUS(1i32);
pub const NodeDrainStatusCompleted: CLUSTER_NODE_DRAIN_STATUS = CLUSTER_NODE_DRAIN_STATUS(2i32);
pub const NodeDrainStatusFailed: CLUSTER_NODE_DRAIN_STATUS = CLUSTER_NODE_DRAIN_STATUS(3i32);
pub const ClusterNodeDrainStatusCount: CLUSTER_NODE_DRAIN_STATUS = CLUSTER_NODE_DRAIN_STATUS(4i32);
impl ::std::convert::From<i32> for CLUSTER_NODE_DRAIN_STATUS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_NODE_DRAIN_STATUS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_NODE_ENUM(pub i32);
pub const CLUSTER_NODE_ENUM_NETINTERFACES: CLUSTER_NODE_ENUM = CLUSTER_NODE_ENUM(1i32);
pub const CLUSTER_NODE_ENUM_GROUPS: CLUSTER_NODE_ENUM = CLUSTER_NODE_ENUM(2i32);
pub const CLUSTER_NODE_ENUM_PREFERRED_GROUPS: CLUSTER_NODE_ENUM = CLUSTER_NODE_ENUM(4i32);
pub const CLUSTER_NODE_ENUM_ALL: CLUSTER_NODE_ENUM = CLUSTER_NODE_ENUM(3i32);
impl ::std::convert::From<i32> for CLUSTER_NODE_ENUM {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_NODE_ENUM {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_NODE_RESUME_FAILBACK_TYPE(pub i32);
pub const DoNotFailbackGroups: CLUSTER_NODE_RESUME_FAILBACK_TYPE =
    CLUSTER_NODE_RESUME_FAILBACK_TYPE(0i32);
pub const FailbackGroupsImmediately: CLUSTER_NODE_RESUME_FAILBACK_TYPE =
    CLUSTER_NODE_RESUME_FAILBACK_TYPE(1i32);
pub const FailbackGroupsPerPolicy: CLUSTER_NODE_RESUME_FAILBACK_TYPE =
    CLUSTER_NODE_RESUME_FAILBACK_TYPE(2i32);
pub const ClusterNodeResumeFailbackTypeCount: CLUSTER_NODE_RESUME_FAILBACK_TYPE =
    CLUSTER_NODE_RESUME_FAILBACK_TYPE(3i32);
impl ::std::convert::From<i32> for CLUSTER_NODE_RESUME_FAILBACK_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_NODE_RESUME_FAILBACK_TYPE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_NODE_STATE(pub i32);
pub const ClusterNodeStateUnknown: CLUSTER_NODE_STATE = CLUSTER_NODE_STATE(-1i32);
pub const ClusterNodeUp: CLUSTER_NODE_STATE = CLUSTER_NODE_STATE(0i32);
pub const ClusterNodeDown: CLUSTER_NODE_STATE = CLUSTER_NODE_STATE(1i32);
pub const ClusterNodePaused: CLUSTER_NODE_STATE = CLUSTER_NODE_STATE(2i32);
pub const ClusterNodeJoining: CLUSTER_NODE_STATE = CLUSTER_NODE_STATE(3i32);
impl ::std::convert::From<i32> for CLUSTER_NODE_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_NODE_STATE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_NODE_STATUS(pub i32);
pub const NodeStatusNormal: CLUSTER_NODE_STATUS = CLUSTER_NODE_STATUS(0i32);
pub const NodeStatusIsolated: CLUSTER_NODE_STATUS = CLUSTER_NODE_STATUS(1i32);
pub const NodeStatusQuarantined: CLUSTER_NODE_STATUS = CLUSTER_NODE_STATUS(2i32);
pub const NodeStatusDrainInProgress: CLUSTER_NODE_STATUS = CLUSTER_NODE_STATUS(4i32);
pub const NodeStatusDrainCompleted: CLUSTER_NODE_STATUS = CLUSTER_NODE_STATUS(8i32);
pub const NodeStatusDrainFailed: CLUSTER_NODE_STATUS = CLUSTER_NODE_STATUS(16i32);
pub const NodeStatusAvoidPlacement: CLUSTER_NODE_STATUS = CLUSTER_NODE_STATUS(32i32);
pub const NodeStatusMax: CLUSTER_NODE_STATUS = CLUSTER_NODE_STATUS(51i32);
impl ::std::convert::From<i32> for CLUSTER_NODE_STATUS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_NODE_STATUS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_NOTIFICATIONS_VERSION(pub i32);
pub const CLUSTER_NOTIFICATIONS_V1: CLUSTER_NOTIFICATIONS_VERSION =
    CLUSTER_NOTIFICATIONS_VERSION(1i32);
pub const CLUSTER_NOTIFICATIONS_V2: CLUSTER_NOTIFICATIONS_VERSION =
    CLUSTER_NOTIFICATIONS_VERSION(2i32);
impl ::std::convert::From<i32> for CLUSTER_NOTIFICATIONS_VERSION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_NOTIFICATIONS_VERSION {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_OBJECT_TYPE(pub i32);
pub const CLUSTER_OBJECT_TYPE_NONE: CLUSTER_OBJECT_TYPE = CLUSTER_OBJECT_TYPE(0i32);
pub const CLUSTER_OBJECT_TYPE_CLUSTER: CLUSTER_OBJECT_TYPE = CLUSTER_OBJECT_TYPE(1i32);
pub const CLUSTER_OBJECT_TYPE_GROUP: CLUSTER_OBJECT_TYPE = CLUSTER_OBJECT_TYPE(2i32);
pub const CLUSTER_OBJECT_TYPE_RESOURCE: CLUSTER_OBJECT_TYPE = CLUSTER_OBJECT_TYPE(3i32);
pub const CLUSTER_OBJECT_TYPE_RESOURCE_TYPE: CLUSTER_OBJECT_TYPE = CLUSTER_OBJECT_TYPE(4i32);
pub const CLUSTER_OBJECT_TYPE_NETWORK_INTERFACE: CLUSTER_OBJECT_TYPE = CLUSTER_OBJECT_TYPE(5i32);
pub const CLUSTER_OBJECT_TYPE_NETWORK: CLUSTER_OBJECT_TYPE = CLUSTER_OBJECT_TYPE(6i32);
pub const CLUSTER_OBJECT_TYPE_NODE: CLUSTER_OBJECT_TYPE = CLUSTER_OBJECT_TYPE(7i32);
pub const CLUSTER_OBJECT_TYPE_REGISTRY: CLUSTER_OBJECT_TYPE = CLUSTER_OBJECT_TYPE(8i32);
pub const CLUSTER_OBJECT_TYPE_QUORUM: CLUSTER_OBJECT_TYPE = CLUSTER_OBJECT_TYPE(9i32);
pub const CLUSTER_OBJECT_TYPE_SHARED_VOLUME: CLUSTER_OBJECT_TYPE = CLUSTER_OBJECT_TYPE(10i32);
pub const CLUSTER_OBJECT_TYPE_GROUPSET: CLUSTER_OBJECT_TYPE = CLUSTER_OBJECT_TYPE(13i32);
pub const CLUSTER_OBJECT_TYPE_AFFINITYRULE: CLUSTER_OBJECT_TYPE = CLUSTER_OBJECT_TYPE(16i32);
impl ::std::convert::From<i32> for CLUSTER_OBJECT_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_OBJECT_TYPE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_PROPERTY_FORMAT(pub i32);
pub const CLUSPROP_FORMAT_UNKNOWN: CLUSTER_PROPERTY_FORMAT = CLUSTER_PROPERTY_FORMAT(0i32);
pub const CLUSPROP_FORMAT_BINARY: CLUSTER_PROPERTY_FORMAT = CLUSTER_PROPERTY_FORMAT(1i32);
pub const CLUSPROP_FORMAT_DWORD: CLUSTER_PROPERTY_FORMAT = CLUSTER_PROPERTY_FORMAT(2i32);
pub const CLUSPROP_FORMAT_SZ: CLUSTER_PROPERTY_FORMAT = CLUSTER_PROPERTY_FORMAT(3i32);
pub const CLUSPROP_FORMAT_EXPAND_SZ: CLUSTER_PROPERTY_FORMAT = CLUSTER_PROPERTY_FORMAT(4i32);
pub const CLUSPROP_FORMAT_MULTI_SZ: CLUSTER_PROPERTY_FORMAT = CLUSTER_PROPERTY_FORMAT(5i32);
pub const CLUSPROP_FORMAT_ULARGE_INTEGER: CLUSTER_PROPERTY_FORMAT = CLUSTER_PROPERTY_FORMAT(6i32);
pub const CLUSPROP_FORMAT_LONG: CLUSTER_PROPERTY_FORMAT = CLUSTER_PROPERTY_FORMAT(7i32);
pub const CLUSPROP_FORMAT_EXPANDED_SZ: CLUSTER_PROPERTY_FORMAT = CLUSTER_PROPERTY_FORMAT(8i32);
pub const CLUSPROP_FORMAT_SECURITY_DESCRIPTOR: CLUSTER_PROPERTY_FORMAT =
    CLUSTER_PROPERTY_FORMAT(9i32);
pub const CLUSPROP_FORMAT_LARGE_INTEGER: CLUSTER_PROPERTY_FORMAT = CLUSTER_PROPERTY_FORMAT(10i32);
pub const CLUSPROP_FORMAT_WORD: CLUSTER_PROPERTY_FORMAT = CLUSTER_PROPERTY_FORMAT(11i32);
pub const CLUSPROP_FORMAT_FILETIME: CLUSTER_PROPERTY_FORMAT = CLUSTER_PROPERTY_FORMAT(12i32);
pub const CLUSPROP_FORMAT_VALUE_LIST: CLUSTER_PROPERTY_FORMAT = CLUSTER_PROPERTY_FORMAT(13i32);
pub const CLUSPROP_FORMAT_PROPERTY_LIST: CLUSTER_PROPERTY_FORMAT = CLUSTER_PROPERTY_FORMAT(14i32);
pub const CLUSPROP_FORMAT_USER: CLUSTER_PROPERTY_FORMAT = CLUSTER_PROPERTY_FORMAT(32768i32);
impl ::std::convert::From<i32> for CLUSTER_PROPERTY_FORMAT {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_PROPERTY_FORMAT {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_PROPERTY_SYNTAX(pub u32);
pub const CLUSPROP_SYNTAX_ENDMARK: CLUSTER_PROPERTY_SYNTAX = CLUSTER_PROPERTY_SYNTAX(0u32);
pub const CLUSPROP_SYNTAX_NAME: CLUSTER_PROPERTY_SYNTAX = CLUSTER_PROPERTY_SYNTAX(262147u32);
pub const CLUSPROP_SYNTAX_RESCLASS: CLUSTER_PROPERTY_SYNTAX = CLUSTER_PROPERTY_SYNTAX(131074u32);
pub const CLUSPROP_SYNTAX_LIST_VALUE_SZ: CLUSTER_PROPERTY_SYNTAX =
    CLUSTER_PROPERTY_SYNTAX(65539u32);
pub const CLUSPROP_SYNTAX_LIST_VALUE_EXPAND_SZ: CLUSTER_PROPERTY_SYNTAX =
    CLUSTER_PROPERTY_SYNTAX(65540u32);
pub const CLUSPROP_SYNTAX_LIST_VALUE_DWORD: CLUSTER_PROPERTY_SYNTAX =
    CLUSTER_PROPERTY_SYNTAX(65538u32);
pub const CLUSPROP_SYNTAX_LIST_VALUE_BINARY: CLUSTER_PROPERTY_SYNTAX =
    CLUSTER_PROPERTY_SYNTAX(65537u32);
pub const CLUSPROP_SYNTAX_LIST_VALUE_MULTI_SZ: CLUSTER_PROPERTY_SYNTAX =
    CLUSTER_PROPERTY_SYNTAX(65541u32);
pub const CLUSPROP_SYNTAX_LIST_VALUE_LONG: CLUSTER_PROPERTY_SYNTAX =
    CLUSTER_PROPERTY_SYNTAX(65543u32);
pub const CLUSPROP_SYNTAX_LIST_VALUE_EXPANDED_SZ: CLUSTER_PROPERTY_SYNTAX =
    CLUSTER_PROPERTY_SYNTAX(65544u32);
pub const CLUSPROP_SYNTAX_LIST_VALUE_SECURITY_DESCRIPTOR: CLUSTER_PROPERTY_SYNTAX =
    CLUSTER_PROPERTY_SYNTAX(65545u32);
pub const CLUSPROP_SYNTAX_LIST_VALUE_LARGE_INTEGER: CLUSTER_PROPERTY_SYNTAX =
    CLUSTER_PROPERTY_SYNTAX(65546u32);
pub const CLUSPROP_SYNTAX_LIST_VALUE_ULARGE_INTEGER: CLUSTER_PROPERTY_SYNTAX =
    CLUSTER_PROPERTY_SYNTAX(65542u32);
pub const CLUSPROP_SYNTAX_LIST_VALUE_WORD: CLUSTER_PROPERTY_SYNTAX =
    CLUSTER_PROPERTY_SYNTAX(65547u32);
pub const CLUSPROP_SYNTAX_LIST_VALUE_PROPERTY_LIST: CLUSTER_PROPERTY_SYNTAX =
    CLUSTER_PROPERTY_SYNTAX(65550u32);
pub const CLUSPROP_SYNTAX_LIST_VALUE_FILETIME: CLUSTER_PROPERTY_SYNTAX =
    CLUSTER_PROPERTY_SYNTAX(65548u32);
pub const CLUSPROP_SYNTAX_DISK_SIGNATURE: CLUSTER_PROPERTY_SYNTAX =
    CLUSTER_PROPERTY_SYNTAX(327682u32);
pub const CLUSPROP_SYNTAX_SCSI_ADDRESS: CLUSTER_PROPERTY_SYNTAX =
    CLUSTER_PROPERTY_SYNTAX(393218u32);
pub const CLUSPROP_SYNTAX_DISK_NUMBER: CLUSTER_PROPERTY_SYNTAX = CLUSTER_PROPERTY_SYNTAX(458754u32);
pub const CLUSPROP_SYNTAX_PARTITION_INFO: CLUSTER_PROPERTY_SYNTAX =
    CLUSTER_PROPERTY_SYNTAX(524289u32);
pub const CLUSPROP_SYNTAX_FTSET_INFO: CLUSTER_PROPERTY_SYNTAX = CLUSTER_PROPERTY_SYNTAX(589825u32);
pub const CLUSPROP_SYNTAX_DISK_SERIALNUMBER: CLUSTER_PROPERTY_SYNTAX =
    CLUSTER_PROPERTY_SYNTAX(655363u32);
pub const CLUSPROP_SYNTAX_DISK_GUID: CLUSTER_PROPERTY_SYNTAX = CLUSTER_PROPERTY_SYNTAX(720899u32);
pub const CLUSPROP_SYNTAX_DISK_SIZE: CLUSTER_PROPERTY_SYNTAX = CLUSTER_PROPERTY_SYNTAX(786438u32);
pub const CLUSPROP_SYNTAX_PARTITION_INFO_EX: CLUSTER_PROPERTY_SYNTAX =
    CLUSTER_PROPERTY_SYNTAX(851969u32);
pub const CLUSPROP_SYNTAX_PARTITION_INFO_EX2: CLUSTER_PROPERTY_SYNTAX =
    CLUSTER_PROPERTY_SYNTAX(917505u32);
pub const CLUSPROP_SYNTAX_STORAGE_DEVICE_ID_DESCRIPTOR: CLUSTER_PROPERTY_SYNTAX =
    CLUSTER_PROPERTY_SYNTAX(983041u32);
impl ::std::convert::From<u32> for CLUSTER_PROPERTY_SYNTAX {
    fn from(value: u32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_PROPERTY_SYNTAX {
    type Abi = Self;
    type DefaultType = Self;
}
impl ::std::ops::BitOr for CLUSTER_PROPERTY_SYNTAX {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self {
        Self(self.0 | rhs.0)
    }
}
impl ::std::ops::BitAnd for CLUSTER_PROPERTY_SYNTAX {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self {
        Self(self.0 & rhs.0)
    }
}
impl ::std::ops::BitOrAssign for CLUSTER_PROPERTY_SYNTAX {
    fn bitor_assign(&mut self, rhs: Self) {
        self.0.bitor_assign(rhs.0)
    }
}
impl ::std::ops::BitAndAssign for CLUSTER_PROPERTY_SYNTAX {
    fn bitand_assign(&mut self, rhs: Self) {
        self.0.bitand_assign(rhs.0)
    }
}
impl ::std::ops::Not for CLUSTER_PROPERTY_SYNTAX {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_PROPERTY_TYPE(pub i32);
pub const CLUSPROP_TYPE_UNKNOWN: CLUSTER_PROPERTY_TYPE = CLUSTER_PROPERTY_TYPE(-1i32);
pub const CLUSPROP_TYPE_ENDMARK: CLUSTER_PROPERTY_TYPE = CLUSTER_PROPERTY_TYPE(0i32);
pub const CLUSPROP_TYPE_LIST_VALUE: CLUSTER_PROPERTY_TYPE = CLUSTER_PROPERTY_TYPE(1i32);
pub const CLUSPROP_TYPE_RESCLASS: CLUSTER_PROPERTY_TYPE = CLUSTER_PROPERTY_TYPE(2i32);
pub const CLUSPROP_TYPE_RESERVED1: CLUSTER_PROPERTY_TYPE = CLUSTER_PROPERTY_TYPE(3i32);
pub const CLUSPROP_TYPE_NAME: CLUSTER_PROPERTY_TYPE = CLUSTER_PROPERTY_TYPE(4i32);
pub const CLUSPROP_TYPE_SIGNATURE: CLUSTER_PROPERTY_TYPE = CLUSTER_PROPERTY_TYPE(5i32);
pub const CLUSPROP_TYPE_SCSI_ADDRESS: CLUSTER_PROPERTY_TYPE = CLUSTER_PROPERTY_TYPE(6i32);
pub const CLUSPROP_TYPE_DISK_NUMBER: CLUSTER_PROPERTY_TYPE = CLUSTER_PROPERTY_TYPE(7i32);
pub const CLUSPROP_TYPE_PARTITION_INFO: CLUSTER_PROPERTY_TYPE = CLUSTER_PROPERTY_TYPE(8i32);
pub const CLUSPROP_TYPE_FTSET_INFO: CLUSTER_PROPERTY_TYPE = CLUSTER_PROPERTY_TYPE(9i32);
pub const CLUSPROP_TYPE_DISK_SERIALNUMBER: CLUSTER_PROPERTY_TYPE = CLUSTER_PROPERTY_TYPE(10i32);
pub const CLUSPROP_TYPE_DISK_GUID: CLUSTER_PROPERTY_TYPE = CLUSTER_PROPERTY_TYPE(11i32);
pub const CLUSPROP_TYPE_DISK_SIZE: CLUSTER_PROPERTY_TYPE = CLUSTER_PROPERTY_TYPE(12i32);
pub const CLUSPROP_TYPE_PARTITION_INFO_EX: CLUSTER_PROPERTY_TYPE = CLUSTER_PROPERTY_TYPE(13i32);
pub const CLUSPROP_TYPE_PARTITION_INFO_EX2: CLUSTER_PROPERTY_TYPE = CLUSTER_PROPERTY_TYPE(14i32);
pub const CLUSPROP_TYPE_STORAGE_DEVICE_ID_DESCRIPTOR: CLUSTER_PROPERTY_TYPE =
    CLUSTER_PROPERTY_TYPE(15i32);
pub const CLUSPROP_TYPE_USER: CLUSTER_PROPERTY_TYPE = CLUSTER_PROPERTY_TYPE(32768i32);
impl ::std::convert::From<i32> for CLUSTER_PROPERTY_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_PROPERTY_TYPE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_QUORUM_TYPE(pub i32);
pub const OperationalQuorum: CLUSTER_QUORUM_TYPE = CLUSTER_QUORUM_TYPE(0i32);
pub const ModifyQuorum: CLUSTER_QUORUM_TYPE = CLUSTER_QUORUM_TYPE(1i32);
impl ::std::convert::From<i32> for CLUSTER_QUORUM_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_QUORUM_TYPE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_QUORUM_VALUE(pub i32);
pub const CLUSTER_QUORUM_MAINTAINED: CLUSTER_QUORUM_VALUE = CLUSTER_QUORUM_VALUE(0i32);
pub const CLUSTER_QUORUM_LOST: CLUSTER_QUORUM_VALUE = CLUSTER_QUORUM_VALUE(1i32);
impl ::std::convert::From<i32> for CLUSTER_QUORUM_VALUE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_QUORUM_VALUE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CLUSTER_READ_BATCH_COMMAND {
    pub Command: CLUSTER_REG_COMMAND,
    pub dwOptions: u32,
    pub wzSubkeyName: super::super::Foundation::PWSTR,
    pub wzValueName: super::super::Foundation::PWSTR,
    pub lpData: *mut u8,
    pub cbData: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl CLUSTER_READ_BATCH_COMMAND {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CLUSTER_READ_BATCH_COMMAND {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CLUSTER_READ_BATCH_COMMAND {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSTER_READ_BATCH_COMMAND")
            .field("Command", &self.Command)
            .field("dwOptions", &self.dwOptions)
            .field("wzSubkeyName", &self.wzSubkeyName)
            .field("wzValueName", &self.wzValueName)
            .field("lpData", &self.lpData)
            .field("cbData", &self.cbData)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CLUSTER_READ_BATCH_COMMAND {
    fn eq(&self, other: &Self) -> bool {
        self.Command == other.Command
            && self.dwOptions == other.dwOptions
            && self.wzSubkeyName == other.wzSubkeyName
            && self.wzValueName == other.wzValueName
            && self.lpData == other.lpData
            && self.cbData == other.cbData
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CLUSTER_READ_BATCH_COMMAND {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CLUSTER_READ_BATCH_COMMAND {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_REG_COMMAND(pub i32);
pub const CLUSREG_COMMAND_NONE: CLUSTER_REG_COMMAND = CLUSTER_REG_COMMAND(0i32);
pub const CLUSREG_SET_VALUE: CLUSTER_REG_COMMAND = CLUSTER_REG_COMMAND(1i32);
pub const CLUSREG_CREATE_KEY: CLUSTER_REG_COMMAND = CLUSTER_REG_COMMAND(2i32);
pub const CLUSREG_DELETE_KEY: CLUSTER_REG_COMMAND = CLUSTER_REG_COMMAND(3i32);
pub const CLUSREG_DELETE_VALUE: CLUSTER_REG_COMMAND = CLUSTER_REG_COMMAND(4i32);
pub const CLUSREG_SET_KEY_SECURITY: CLUSTER_REG_COMMAND = CLUSTER_REG_COMMAND(5i32);
pub const CLUSREG_VALUE_DELETED: CLUSTER_REG_COMMAND = CLUSTER_REG_COMMAND(6i32);
pub const CLUSREG_READ_KEY: CLUSTER_REG_COMMAND = CLUSTER_REG_COMMAND(7i32);
pub const CLUSREG_READ_VALUE: CLUSTER_REG_COMMAND = CLUSTER_REG_COMMAND(8i32);
pub const CLUSREG_READ_ERROR: CLUSTER_REG_COMMAND = CLUSTER_REG_COMMAND(9i32);
pub const CLUSREG_CONTROL_COMMAND: CLUSTER_REG_COMMAND = CLUSTER_REG_COMMAND(10i32);
pub const CLUSREG_CONDITION_EXISTS: CLUSTER_REG_COMMAND = CLUSTER_REG_COMMAND(11i32);
pub const CLUSREG_CONDITION_NOT_EXISTS: CLUSTER_REG_COMMAND = CLUSTER_REG_COMMAND(12i32);
pub const CLUSREG_CONDITION_IS_EQUAL: CLUSTER_REG_COMMAND = CLUSTER_REG_COMMAND(13i32);
pub const CLUSREG_CONDITION_IS_NOT_EQUAL: CLUSTER_REG_COMMAND = CLUSTER_REG_COMMAND(14i32);
pub const CLUSREG_CONDITION_IS_GREATER_THAN: CLUSTER_REG_COMMAND = CLUSTER_REG_COMMAND(15i32);
pub const CLUSREG_CONDITION_IS_LESS_THAN: CLUSTER_REG_COMMAND = CLUSTER_REG_COMMAND(16i32);
pub const CLUSREG_CONDITION_KEY_EXISTS: CLUSTER_REG_COMMAND = CLUSTER_REG_COMMAND(17i32);
pub const CLUSREG_CONDITION_KEY_NOT_EXISTS: CLUSTER_REG_COMMAND = CLUSTER_REG_COMMAND(18i32);
pub const CLUSREG_LAST_COMMAND: CLUSTER_REG_COMMAND = CLUSTER_REG_COMMAND(19i32);
impl ::std::convert::From<i32> for CLUSTER_REG_COMMAND {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_REG_COMMAND {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_RESOURCE_APPLICATION_STATE(pub i32);
pub const ClusterResourceApplicationStateUnknown: CLUSTER_RESOURCE_APPLICATION_STATE =
    CLUSTER_RESOURCE_APPLICATION_STATE(1i32);
pub const ClusterResourceApplicationOSHeartBeat: CLUSTER_RESOURCE_APPLICATION_STATE =
    CLUSTER_RESOURCE_APPLICATION_STATE(2i32);
pub const ClusterResourceApplicationReady: CLUSTER_RESOURCE_APPLICATION_STATE =
    CLUSTER_RESOURCE_APPLICATION_STATE(3i32);
impl ::std::convert::From<i32> for CLUSTER_RESOURCE_APPLICATION_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_RESOURCE_APPLICATION_STATE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_RESOURCE_CLASS(pub i32);
pub const CLUS_RESCLASS_UNKNOWN: CLUSTER_RESOURCE_CLASS = CLUSTER_RESOURCE_CLASS(0i32);
pub const CLUS_RESCLASS_STORAGE: CLUSTER_RESOURCE_CLASS = CLUSTER_RESOURCE_CLASS(1i32);
pub const CLUS_RESCLASS_NETWORK: CLUSTER_RESOURCE_CLASS = CLUSTER_RESOURCE_CLASS(2i32);
pub const CLUS_RESCLASS_USER: CLUSTER_RESOURCE_CLASS = CLUSTER_RESOURCE_CLASS(32768i32);
impl ::std::convert::From<i32> for CLUSTER_RESOURCE_CLASS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_RESOURCE_CLASS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_RESOURCE_CREATE_FLAGS(pub i32);
pub const CLUSTER_RESOURCE_DEFAULT_MONITOR: CLUSTER_RESOURCE_CREATE_FLAGS =
    CLUSTER_RESOURCE_CREATE_FLAGS(0i32);
pub const CLUSTER_RESOURCE_SEPARATE_MONITOR: CLUSTER_RESOURCE_CREATE_FLAGS =
    CLUSTER_RESOURCE_CREATE_FLAGS(1i32);
pub const CLUSTER_RESOURCE_VALID_FLAGS: CLUSTER_RESOURCE_CREATE_FLAGS =
    CLUSTER_RESOURCE_CREATE_FLAGS(1i32);
impl ::std::convert::From<i32> for CLUSTER_RESOURCE_CREATE_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_RESOURCE_CREATE_FLAGS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_RESOURCE_EMBEDDED_FAILURE_ACTION(pub i32);
pub const ClusterResourceEmbeddedFailureActionNone: CLUSTER_RESOURCE_EMBEDDED_FAILURE_ACTION =
    CLUSTER_RESOURCE_EMBEDDED_FAILURE_ACTION(0i32);
pub const ClusterResourceEmbeddedFailureActionLogOnly: CLUSTER_RESOURCE_EMBEDDED_FAILURE_ACTION =
    CLUSTER_RESOURCE_EMBEDDED_FAILURE_ACTION(1i32);
pub const ClusterResourceEmbeddedFailureActionRecover: CLUSTER_RESOURCE_EMBEDDED_FAILURE_ACTION =
    CLUSTER_RESOURCE_EMBEDDED_FAILURE_ACTION(2i32);
impl ::std::convert::From<i32> for CLUSTER_RESOURCE_EMBEDDED_FAILURE_ACTION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_RESOURCE_EMBEDDED_FAILURE_ACTION {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_RESOURCE_ENUM(pub i32);
pub const CLUSTER_RESOURCE_ENUM_DEPENDS: CLUSTER_RESOURCE_ENUM = CLUSTER_RESOURCE_ENUM(1i32);
pub const CLUSTER_RESOURCE_ENUM_PROVIDES: CLUSTER_RESOURCE_ENUM = CLUSTER_RESOURCE_ENUM(2i32);
pub const CLUSTER_RESOURCE_ENUM_NODES: CLUSTER_RESOURCE_ENUM = CLUSTER_RESOURCE_ENUM(4i32);
pub const CLUSTER_RESOURCE_ENUM_ALL: CLUSTER_RESOURCE_ENUM = CLUSTER_RESOURCE_ENUM(7i32);
impl ::std::convert::From<i32> for CLUSTER_RESOURCE_ENUM {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_RESOURCE_ENUM {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CLUSTER_RESOURCE_ENUM_ITEM {
    pub dwVersion: u32,
    pub cbId: u32,
    pub lpszId: super::super::Foundation::PWSTR,
    pub cbName: u32,
    pub lpszName: super::super::Foundation::PWSTR,
    pub cbOwnerGroupName: u32,
    pub lpszOwnerGroupName: super::super::Foundation::PWSTR,
    pub cbOwnerGroupId: u32,
    pub lpszOwnerGroupId: super::super::Foundation::PWSTR,
    pub cbProperties: u32,
    pub pProperties: *mut ::std::ffi::c_void,
    pub cbRoProperties: u32,
    pub pRoProperties: *mut ::std::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl CLUSTER_RESOURCE_ENUM_ITEM {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CLUSTER_RESOURCE_ENUM_ITEM {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CLUSTER_RESOURCE_ENUM_ITEM {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSTER_RESOURCE_ENUM_ITEM")
            .field("dwVersion", &self.dwVersion)
            .field("cbId", &self.cbId)
            .field("lpszId", &self.lpszId)
            .field("cbName", &self.cbName)
            .field("lpszName", &self.lpszName)
            .field("cbOwnerGroupName", &self.cbOwnerGroupName)
            .field("lpszOwnerGroupName", &self.lpszOwnerGroupName)
            .field("cbOwnerGroupId", &self.cbOwnerGroupId)
            .field("lpszOwnerGroupId", &self.lpszOwnerGroupId)
            .field("cbProperties", &self.cbProperties)
            .field("pProperties", &self.pProperties)
            .field("cbRoProperties", &self.cbRoProperties)
            .field("pRoProperties", &self.pRoProperties)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CLUSTER_RESOURCE_ENUM_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.dwVersion == other.dwVersion
            && self.cbId == other.cbId
            && self.lpszId == other.lpszId
            && self.cbName == other.cbName
            && self.lpszName == other.lpszName
            && self.cbOwnerGroupName == other.cbOwnerGroupName
            && self.lpszOwnerGroupName == other.lpszOwnerGroupName
            && self.cbOwnerGroupId == other.cbOwnerGroupId
            && self.lpszOwnerGroupId == other.lpszOwnerGroupId
            && self.cbProperties == other.cbProperties
            && self.pProperties == other.pProperties
            && self.cbRoProperties == other.cbRoProperties
            && self.pRoProperties == other.pRoProperties
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CLUSTER_RESOURCE_ENUM_ITEM {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CLUSTER_RESOURCE_ENUM_ITEM {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUSTER_RESOURCE_ENUM_ITEM_VERSION: u32 = 1u32;
pub const CLUSTER_RESOURCE_ENUM_ITEM_VERSION_1: u32 = 1u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_RESOURCE_RESTART_ACTION(pub i32);
pub const ClusterResourceDontRestart: CLUSTER_RESOURCE_RESTART_ACTION =
    CLUSTER_RESOURCE_RESTART_ACTION(0i32);
pub const ClusterResourceRestartNoNotify: CLUSTER_RESOURCE_RESTART_ACTION =
    CLUSTER_RESOURCE_RESTART_ACTION(1i32);
pub const ClusterResourceRestartNotify: CLUSTER_RESOURCE_RESTART_ACTION =
    CLUSTER_RESOURCE_RESTART_ACTION(2i32);
pub const ClusterResourceRestartActionCount: CLUSTER_RESOURCE_RESTART_ACTION =
    CLUSTER_RESOURCE_RESTART_ACTION(3i32);
impl ::std::convert::From<i32> for CLUSTER_RESOURCE_RESTART_ACTION {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_RESOURCE_RESTART_ACTION {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_RESOURCE_STATE(pub i32);
pub const ClusterResourceStateUnknown: CLUSTER_RESOURCE_STATE = CLUSTER_RESOURCE_STATE(-1i32);
pub const ClusterResourceInherited: CLUSTER_RESOURCE_STATE = CLUSTER_RESOURCE_STATE(0i32);
pub const ClusterResourceInitializing: CLUSTER_RESOURCE_STATE = CLUSTER_RESOURCE_STATE(1i32);
pub const ClusterResourceOnline: CLUSTER_RESOURCE_STATE = CLUSTER_RESOURCE_STATE(2i32);
pub const ClusterResourceOffline: CLUSTER_RESOURCE_STATE = CLUSTER_RESOURCE_STATE(3i32);
pub const ClusterResourceFailed: CLUSTER_RESOURCE_STATE = CLUSTER_RESOURCE_STATE(4i32);
pub const ClusterResourcePending: CLUSTER_RESOURCE_STATE = CLUSTER_RESOURCE_STATE(128i32);
pub const ClusterResourceOnlinePending: CLUSTER_RESOURCE_STATE = CLUSTER_RESOURCE_STATE(129i32);
pub const ClusterResourceOfflinePending: CLUSTER_RESOURCE_STATE = CLUSTER_RESOURCE_STATE(130i32);
impl ::std::convert::From<i32> for CLUSTER_RESOURCE_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_RESOURCE_STATE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_RESOURCE_STATE_CHANGE_REASON(pub i32);
pub const eResourceStateChangeReasonUnknown: CLUSTER_RESOURCE_STATE_CHANGE_REASON =
    CLUSTER_RESOURCE_STATE_CHANGE_REASON(0i32);
pub const eResourceStateChangeReasonMove: CLUSTER_RESOURCE_STATE_CHANGE_REASON =
    CLUSTER_RESOURCE_STATE_CHANGE_REASON(1i32);
pub const eResourceStateChangeReasonFailover: CLUSTER_RESOURCE_STATE_CHANGE_REASON =
    CLUSTER_RESOURCE_STATE_CHANGE_REASON(2i32);
pub const eResourceStateChangeReasonFailedMove: CLUSTER_RESOURCE_STATE_CHANGE_REASON =
    CLUSTER_RESOURCE_STATE_CHANGE_REASON(3i32);
pub const eResourceStateChangeReasonShutdown: CLUSTER_RESOURCE_STATE_CHANGE_REASON =
    CLUSTER_RESOURCE_STATE_CHANGE_REASON(4i32);
pub const eResourceStateChangeReasonRundown: CLUSTER_RESOURCE_STATE_CHANGE_REASON =
    CLUSTER_RESOURCE_STATE_CHANGE_REASON(5i32);
impl ::std::convert::From<i32> for CLUSTER_RESOURCE_STATE_CHANGE_REASON {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_RESOURCE_STATE_CHANGE_REASON {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_RESOURCE_TYPE_ENUM(pub i32);
pub const CLUSTER_RESOURCE_TYPE_ENUM_NODES: CLUSTER_RESOURCE_TYPE_ENUM =
    CLUSTER_RESOURCE_TYPE_ENUM(1i32);
pub const CLUSTER_RESOURCE_TYPE_ENUM_RESOURCES: CLUSTER_RESOURCE_TYPE_ENUM =
    CLUSTER_RESOURCE_TYPE_ENUM(2i32);
pub const CLUSTER_RESOURCE_TYPE_ENUM_ALL: CLUSTER_RESOURCE_TYPE_ENUM =
    CLUSTER_RESOURCE_TYPE_ENUM(3i32);
impl ::std::convert::From<i32> for CLUSTER_RESOURCE_TYPE_ENUM {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_RESOURCE_TYPE_ENUM {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_ROLE(pub i32);
pub const ClusterRoleDHCP: CLUSTER_ROLE = CLUSTER_ROLE(0i32);
pub const ClusterRoleDTC: CLUSTER_ROLE = CLUSTER_ROLE(1i32);
pub const ClusterRoleFileServer: CLUSTER_ROLE = CLUSTER_ROLE(2i32);
pub const ClusterRoleGenericApplication: CLUSTER_ROLE = CLUSTER_ROLE(3i32);
pub const ClusterRoleGenericScript: CLUSTER_ROLE = CLUSTER_ROLE(4i32);
pub const ClusterRoleGenericService: CLUSTER_ROLE = CLUSTER_ROLE(5i32);
pub const ClusterRoleISCSINameServer: CLUSTER_ROLE = CLUSTER_ROLE(6i32);
pub const ClusterRoleMSMQ: CLUSTER_ROLE = CLUSTER_ROLE(7i32);
pub const ClusterRoleNFS: CLUSTER_ROLE = CLUSTER_ROLE(8i32);
pub const ClusterRolePrintServer: CLUSTER_ROLE = CLUSTER_ROLE(9i32);
pub const ClusterRoleStandAloneNamespaceServer: CLUSTER_ROLE = CLUSTER_ROLE(10i32);
pub const ClusterRoleVolumeShadowCopyServiceTask: CLUSTER_ROLE = CLUSTER_ROLE(11i32);
pub const ClusterRoleWINS: CLUSTER_ROLE = CLUSTER_ROLE(12i32);
pub const ClusterRoleTaskScheduler: CLUSTER_ROLE = CLUSTER_ROLE(13i32);
pub const ClusterRoleNetworkFileSystem: CLUSTER_ROLE = CLUSTER_ROLE(14i32);
pub const ClusterRoleDFSReplicatedFolder: CLUSTER_ROLE = CLUSTER_ROLE(15i32);
pub const ClusterRoleDistributedFileSystem: CLUSTER_ROLE = CLUSTER_ROLE(16i32);
pub const ClusterRoleDistributedNetworkName: CLUSTER_ROLE = CLUSTER_ROLE(17i32);
pub const ClusterRoleFileShare: CLUSTER_ROLE = CLUSTER_ROLE(18i32);
pub const ClusterRoleFileShareWitness: CLUSTER_ROLE = CLUSTER_ROLE(19i32);
pub const ClusterRoleHardDisk: CLUSTER_ROLE = CLUSTER_ROLE(20i32);
pub const ClusterRoleIPAddress: CLUSTER_ROLE = CLUSTER_ROLE(21i32);
pub const ClusterRoleIPV6Address: CLUSTER_ROLE = CLUSTER_ROLE(22i32);
pub const ClusterRoleIPV6TunnelAddress: CLUSTER_ROLE = CLUSTER_ROLE(23i32);
pub const ClusterRoleISCSITargetServer: CLUSTER_ROLE = CLUSTER_ROLE(24i32);
pub const ClusterRoleNetworkName: CLUSTER_ROLE = CLUSTER_ROLE(25i32);
pub const ClusterRolePhysicalDisk: CLUSTER_ROLE = CLUSTER_ROLE(26i32);
pub const ClusterRoleSODAFileServer: CLUSTER_ROLE = CLUSTER_ROLE(27i32);
pub const ClusterRoleStoragePool: CLUSTER_ROLE = CLUSTER_ROLE(28i32);
pub const ClusterRoleVirtualMachine: CLUSTER_ROLE = CLUSTER_ROLE(29i32);
pub const ClusterRoleVirtualMachineConfiguration: CLUSTER_ROLE = CLUSTER_ROLE(30i32);
pub const ClusterRoleVirtualMachineReplicaBroker: CLUSTER_ROLE = CLUSTER_ROLE(31i32);
impl ::std::convert::From<i32> for CLUSTER_ROLE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_ROLE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_ROLE_STATE(pub i32);
pub const ClusterRoleUnknown: CLUSTER_ROLE_STATE = CLUSTER_ROLE_STATE(-1i32);
pub const ClusterRoleClustered: CLUSTER_ROLE_STATE = CLUSTER_ROLE_STATE(0i32);
pub const ClusterRoleUnclustered: CLUSTER_ROLE_STATE = CLUSTER_ROLE_STATE(1i32);
impl ::std::convert::From<i32> for CLUSTER_ROLE_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_ROLE_STATE {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUSTER_RUNNING: u32 = 16u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_SETUP_PHASE(pub i32);
pub const ClusterSetupPhaseInitialize: CLUSTER_SETUP_PHASE = CLUSTER_SETUP_PHASE(1i32);
pub const ClusterSetupPhaseValidateNodeState: CLUSTER_SETUP_PHASE = CLUSTER_SETUP_PHASE(100i32);
pub const ClusterSetupPhaseValidateNetft: CLUSTER_SETUP_PHASE = CLUSTER_SETUP_PHASE(102i32);
pub const ClusterSetupPhaseValidateClusDisk: CLUSTER_SETUP_PHASE = CLUSTER_SETUP_PHASE(103i32);
pub const ClusterSetupPhaseConfigureClusSvc: CLUSTER_SETUP_PHASE = CLUSTER_SETUP_PHASE(104i32);
pub const ClusterSetupPhaseStartingClusSvc: CLUSTER_SETUP_PHASE = CLUSTER_SETUP_PHASE(105i32);
pub const ClusterSetupPhaseQueryClusterNameAccount: CLUSTER_SETUP_PHASE =
    CLUSTER_SETUP_PHASE(106i32);
pub const ClusterSetupPhaseValidateClusterNameAccount: CLUSTER_SETUP_PHASE =
    CLUSTER_SETUP_PHASE(107i32);
pub const ClusterSetupPhaseCreateClusterAccount: CLUSTER_SETUP_PHASE = CLUSTER_SETUP_PHASE(108i32);
pub const ClusterSetupPhaseConfigureClusterAccount: CLUSTER_SETUP_PHASE =
    CLUSTER_SETUP_PHASE(109i32);
pub const ClusterSetupPhaseFormingCluster: CLUSTER_SETUP_PHASE = CLUSTER_SETUP_PHASE(200i32);
pub const ClusterSetupPhaseAddClusterProperties: CLUSTER_SETUP_PHASE = CLUSTER_SETUP_PHASE(201i32);
pub const ClusterSetupPhaseCreateResourceTypes: CLUSTER_SETUP_PHASE = CLUSTER_SETUP_PHASE(202i32);
pub const ClusterSetupPhaseCreateGroups: CLUSTER_SETUP_PHASE = CLUSTER_SETUP_PHASE(203i32);
pub const ClusterSetupPhaseCreateIPAddressResources: CLUSTER_SETUP_PHASE =
    CLUSTER_SETUP_PHASE(204i32);
pub const ClusterSetupPhaseCreateNetworkName: CLUSTER_SETUP_PHASE = CLUSTER_SETUP_PHASE(205i32);
pub const ClusterSetupPhaseClusterGroupOnline: CLUSTER_SETUP_PHASE = CLUSTER_SETUP_PHASE(206i32);
pub const ClusterSetupPhaseGettingCurrentMembership: CLUSTER_SETUP_PHASE =
    CLUSTER_SETUP_PHASE(300i32);
pub const ClusterSetupPhaseAddNodeToCluster: CLUSTER_SETUP_PHASE = CLUSTER_SETUP_PHASE(301i32);
pub const ClusterSetupPhaseNodeUp: CLUSTER_SETUP_PHASE = CLUSTER_SETUP_PHASE(302i32);
pub const ClusterSetupPhaseMoveGroup: CLUSTER_SETUP_PHASE = CLUSTER_SETUP_PHASE(400i32);
pub const ClusterSetupPhaseDeleteGroup: CLUSTER_SETUP_PHASE = CLUSTER_SETUP_PHASE(401i32);
pub const ClusterSetupPhaseCleanupCOs: CLUSTER_SETUP_PHASE = CLUSTER_SETUP_PHASE(402i32);
pub const ClusterSetupPhaseOfflineGroup: CLUSTER_SETUP_PHASE = CLUSTER_SETUP_PHASE(403i32);
pub const ClusterSetupPhaseEvictNode: CLUSTER_SETUP_PHASE = CLUSTER_SETUP_PHASE(404i32);
pub const ClusterSetupPhaseCleanupNode: CLUSTER_SETUP_PHASE = CLUSTER_SETUP_PHASE(405i32);
pub const ClusterSetupPhaseCoreGroupCleanup: CLUSTER_SETUP_PHASE = CLUSTER_SETUP_PHASE(406i32);
pub const ClusterSetupPhaseFailureCleanup: CLUSTER_SETUP_PHASE = CLUSTER_SETUP_PHASE(999i32);
impl ::std::convert::From<i32> for CLUSTER_SETUP_PHASE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_SETUP_PHASE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_SETUP_PHASE_SEVERITY(pub i32);
pub const ClusterSetupPhaseInformational: CLUSTER_SETUP_PHASE_SEVERITY =
    CLUSTER_SETUP_PHASE_SEVERITY(1i32);
pub const ClusterSetupPhaseWarning: CLUSTER_SETUP_PHASE_SEVERITY =
    CLUSTER_SETUP_PHASE_SEVERITY(2i32);
pub const ClusterSetupPhaseFatal: CLUSTER_SETUP_PHASE_SEVERITY = CLUSTER_SETUP_PHASE_SEVERITY(3i32);
impl ::std::convert::From<i32> for CLUSTER_SETUP_PHASE_SEVERITY {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_SETUP_PHASE_SEVERITY {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_SETUP_PHASE_TYPE(pub i32);
pub const ClusterSetupPhaseStart: CLUSTER_SETUP_PHASE_TYPE = CLUSTER_SETUP_PHASE_TYPE(1i32);
pub const ClusterSetupPhaseContinue: CLUSTER_SETUP_PHASE_TYPE = CLUSTER_SETUP_PHASE_TYPE(2i32);
pub const ClusterSetupPhaseEnd: CLUSTER_SETUP_PHASE_TYPE = CLUSTER_SETUP_PHASE_TYPE(3i32);
pub const ClusterSetupPhaseReport: CLUSTER_SETUP_PHASE_TYPE = CLUSTER_SETUP_PHASE_TYPE(4i32);
impl ::std::convert::From<i32> for CLUSTER_SETUP_PHASE_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_SETUP_PHASE_TYPE {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUSTER_SET_ACCESS_TYPE_ALLOWED: u32 = 0u32;
pub const CLUSTER_SET_ACCESS_TYPE_DENIED: u32 = 1u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CLUSTER_SET_PASSWORD_STATUS {
    pub NodeId: u32,
    pub SetAttempted: super::super::Foundation::BOOLEAN,
    pub ReturnStatus: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl CLUSTER_SET_PASSWORD_STATUS {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CLUSTER_SET_PASSWORD_STATUS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CLUSTER_SET_PASSWORD_STATUS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSTER_SET_PASSWORD_STATUS")
            .field("NodeId", &self.NodeId)
            .field("SetAttempted", &self.SetAttempted)
            .field("ReturnStatus", &self.ReturnStatus)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CLUSTER_SET_PASSWORD_STATUS {
    fn eq(&self, other: &Self) -> bool {
        self.NodeId == other.NodeId
            && self.SetAttempted == other.SetAttempted
            && self.ReturnStatus == other.ReturnStatus
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CLUSTER_SET_PASSWORD_STATUS {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CLUSTER_SET_PASSWORD_STATUS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_SHARED_VOLUME_BACKUP_STATE(pub i32);
pub const VolumeBackupNone: CLUSTER_SHARED_VOLUME_BACKUP_STATE =
    CLUSTER_SHARED_VOLUME_BACKUP_STATE(0i32);
pub const VolumeBackupInProgress: CLUSTER_SHARED_VOLUME_BACKUP_STATE =
    CLUSTER_SHARED_VOLUME_BACKUP_STATE(1i32);
impl ::std::convert::From<i32> for CLUSTER_SHARED_VOLUME_BACKUP_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_SHARED_VOLUME_BACKUP_STATE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSTER_SHARED_VOLUME_RENAME_GUID_INPUT {
    pub __AnonymousBase_clusapi_L5475_C14: CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME,
    pub __AnonymousBase_clusapi_L5476_C14: CLUSTER_SHARED_VOLUME_RENAME_INPUT_GUID_NAME,
}
impl CLUSTER_SHARED_VOLUME_RENAME_GUID_INPUT {}
impl ::std::default::Default for CLUSTER_SHARED_VOLUME_RENAME_GUID_INPUT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUSTER_SHARED_VOLUME_RENAME_GUID_INPUT {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUSTER_SHARED_VOLUME_RENAME_GUID_INPUT {}
unsafe impl ::windows::runtime::Abi for CLUSTER_SHARED_VOLUME_RENAME_GUID_INPUT {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSTER_SHARED_VOLUME_RENAME_INPUT {
    pub __AnonymousBase_clusapi_L5464_C14: CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME,
    pub __AnonymousBase_clusapi_L5465_C14: CLUSTER_SHARED_VOLUME_RENAME_INPUT_NAME,
}
impl CLUSTER_SHARED_VOLUME_RENAME_INPUT {}
impl ::std::default::Default for CLUSTER_SHARED_VOLUME_RENAME_INPUT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUSTER_SHARED_VOLUME_RENAME_INPUT {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUSTER_SHARED_VOLUME_RENAME_INPUT {}
unsafe impl ::windows::runtime::Abi for CLUSTER_SHARED_VOLUME_RENAME_INPUT {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSTER_SHARED_VOLUME_RENAME_INPUT_GUID_NAME {
    pub NewVolumeName: [u16; 260],
    pub NewVolumeGuid: [u16; 50],
}
impl CLUSTER_SHARED_VOLUME_RENAME_INPUT_GUID_NAME {}
impl ::std::default::Default for CLUSTER_SHARED_VOLUME_RENAME_INPUT_GUID_NAME {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUSTER_SHARED_VOLUME_RENAME_INPUT_GUID_NAME {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSTER_SHARED_VOLUME_RENAME_INPUT_GUID_NAME")
            .field("NewVolumeName", &self.NewVolumeName)
            .field("NewVolumeGuid", &self.NewVolumeGuid)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUSTER_SHARED_VOLUME_RENAME_INPUT_GUID_NAME {
    fn eq(&self, other: &Self) -> bool {
        self.NewVolumeName == other.NewVolumeName && self.NewVolumeGuid == other.NewVolumeGuid
    }
}
impl ::std::cmp::Eq for CLUSTER_SHARED_VOLUME_RENAME_INPUT_GUID_NAME {}
unsafe impl ::windows::runtime::Abi for CLUSTER_SHARED_VOLUME_RENAME_INPUT_GUID_NAME {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSTER_SHARED_VOLUME_RENAME_INPUT_NAME {
    pub NewVolumeName: [u16; 260],
}
impl CLUSTER_SHARED_VOLUME_RENAME_INPUT_NAME {}
impl ::std::default::Default for CLUSTER_SHARED_VOLUME_RENAME_INPUT_NAME {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUSTER_SHARED_VOLUME_RENAME_INPUT_NAME {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSTER_SHARED_VOLUME_RENAME_INPUT_NAME")
            .field("NewVolumeName", &self.NewVolumeName)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUSTER_SHARED_VOLUME_RENAME_INPUT_NAME {
    fn eq(&self, other: &Self) -> bool {
        self.NewVolumeName == other.NewVolumeName
    }
}
impl ::std::cmp::Eq for CLUSTER_SHARED_VOLUME_RENAME_INPUT_NAME {}
unsafe impl ::windows::runtime::Abi for CLUSTER_SHARED_VOLUME_RENAME_INPUT_NAME {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE(pub i32);
pub const ClusterSharedVolumeRenameInputTypeNone: CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE =
    CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE(0i32);
pub const ClusterSharedVolumeRenameInputTypeVolumeOffset: CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE =
    CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE(1i32);
pub const ClusterSharedVolumeRenameInputTypeVolumeId: CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE =
    CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE(2i32);
pub const ClusterSharedVolumeRenameInputTypeVolumeName: CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE =
    CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE(3i32);
pub const ClusterSharedVolumeRenameInputTypeVolumeGuid: CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE =
    CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE(4i32);
impl ::std::convert::From<i32> for CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME {
    pub InputType: CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE,
    pub Anonymous: CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME_0,
}
impl CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME {}
impl ::std::default::Default for CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME {}
unsafe impl ::windows::runtime::Abi for CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub union CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME_0 {
    pub VolumeOffset: u64,
    pub VolumeId: [u16; 260],
    pub VolumeName: [u16; 260],
    pub VolumeGuid: [u16; 50],
}
impl CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME_0 {}
impl ::std::default::Default for CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME_0 {}
unsafe impl ::windows::runtime::Abi for CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME_0 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE(pub i32);
pub const ClusterSharedVolumeSnapshotStateUnknown: CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE =
    CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE(0i32);
pub const ClusterSharedVolumePrepareForHWSnapshot: CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE =
    CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE(1i32);
pub const ClusterSharedVolumeHWSnapshotCompleted: CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE =
    CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE(2i32);
pub const ClusterSharedVolumePrepareForFreeze: CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE =
    CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE(3i32);
impl ::std::convert::From<i32> for CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_SHARED_VOLUME_STATE(pub i32);
pub const SharedVolumeStateUnavailable: CLUSTER_SHARED_VOLUME_STATE =
    CLUSTER_SHARED_VOLUME_STATE(0i32);
pub const SharedVolumeStatePaused: CLUSTER_SHARED_VOLUME_STATE = CLUSTER_SHARED_VOLUME_STATE(1i32);
pub const SharedVolumeStateActive: CLUSTER_SHARED_VOLUME_STATE = CLUSTER_SHARED_VOLUME_STATE(2i32);
pub const SharedVolumeStateActiveRedirected: CLUSTER_SHARED_VOLUME_STATE =
    CLUSTER_SHARED_VOLUME_STATE(3i32);
pub const SharedVolumeStateActiveVolumeRedirected: CLUSTER_SHARED_VOLUME_STATE =
    CLUSTER_SHARED_VOLUME_STATE(4i32);
impl ::std::convert::From<i32> for CLUSTER_SHARED_VOLUME_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_SHARED_VOLUME_STATE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSTER_SHARED_VOLUME_STATE_INFO {
    pub szVolumeName: [u16; 260],
    pub szNodeName: [u16; 260],
    pub VolumeState: CLUSTER_SHARED_VOLUME_STATE,
}
impl CLUSTER_SHARED_VOLUME_STATE_INFO {}
impl ::std::default::Default for CLUSTER_SHARED_VOLUME_STATE_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUSTER_SHARED_VOLUME_STATE_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSTER_SHARED_VOLUME_STATE_INFO")
            .field("szVolumeName", &self.szVolumeName)
            .field("szNodeName", &self.szNodeName)
            .field("VolumeState", &self.VolumeState)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUSTER_SHARED_VOLUME_STATE_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.szVolumeName == other.szVolumeName
            && self.szNodeName == other.szNodeName
            && self.VolumeState == other.VolumeState
    }
}
impl ::std::cmp::Eq for CLUSTER_SHARED_VOLUME_STATE_INFO {}
unsafe impl ::windows::runtime::Abi for CLUSTER_SHARED_VOLUME_STATE_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSTER_SHARED_VOLUME_STATE_INFO_EX {
    pub szVolumeName: [u16; 260],
    pub szNodeName: [u16; 260],
    pub VolumeState: CLUSTER_SHARED_VOLUME_STATE,
    pub szVolumeFriendlyName: [u16; 260],
    pub RedirectedIOReason: u64,
    pub VolumeRedirectedIOReason: u64,
}
impl CLUSTER_SHARED_VOLUME_STATE_INFO_EX {}
impl ::std::default::Default for CLUSTER_SHARED_VOLUME_STATE_INFO_EX {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUSTER_SHARED_VOLUME_STATE_INFO_EX {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSTER_SHARED_VOLUME_STATE_INFO_EX")
            .field("szVolumeName", &self.szVolumeName)
            .field("szNodeName", &self.szNodeName)
            .field("VolumeState", &self.VolumeState)
            .field("szVolumeFriendlyName", &self.szVolumeFriendlyName)
            .field("RedirectedIOReason", &self.RedirectedIOReason)
            .field("VolumeRedirectedIOReason", &self.VolumeRedirectedIOReason)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUSTER_SHARED_VOLUME_STATE_INFO_EX {
    fn eq(&self, other: &Self) -> bool {
        self.szVolumeName == other.szVolumeName
            && self.szNodeName == other.szNodeName
            && self.VolumeState == other.VolumeState
            && self.szVolumeFriendlyName == other.szVolumeFriendlyName
            && self.RedirectedIOReason == other.RedirectedIOReason
            && self.VolumeRedirectedIOReason == other.VolumeRedirectedIOReason
    }
}
impl ::std::cmp::Eq for CLUSTER_SHARED_VOLUME_STATE_INFO_EX {}
unsafe impl ::windows::runtime::Abi for CLUSTER_SHARED_VOLUME_STATE_INFO_EX {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_STORAGENODE_STATE(pub i32);
pub const ClusterStorageNodeStateUnknown: CLUSTER_STORAGENODE_STATE =
    CLUSTER_STORAGENODE_STATE(0i32);
pub const ClusterStorageNodeUp: CLUSTER_STORAGENODE_STATE = CLUSTER_STORAGENODE_STATE(1i32);
pub const ClusterStorageNodeDown: CLUSTER_STORAGENODE_STATE = CLUSTER_STORAGENODE_STATE(2i32);
pub const ClusterStorageNodePaused: CLUSTER_STORAGENODE_STATE = CLUSTER_STORAGENODE_STATE(3i32);
pub const ClusterStorageNodeStarting: CLUSTER_STORAGENODE_STATE = CLUSTER_STORAGENODE_STATE(4i32);
pub const ClusterStorageNodeStopping: CLUSTER_STORAGENODE_STATE = CLUSTER_STORAGENODE_STATE(5i32);
impl ::std::convert::From<i32> for CLUSTER_STORAGENODE_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_STORAGENODE_STATE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUSTER_UPGRADE_PHASE(pub i32);
pub const ClusterUpgradePhaseInitialize: CLUSTER_UPGRADE_PHASE = CLUSTER_UPGRADE_PHASE(1i32);
pub const ClusterUpgradePhaseValidatingUpgrade: CLUSTER_UPGRADE_PHASE = CLUSTER_UPGRADE_PHASE(2i32);
pub const ClusterUpgradePhaseUpgradingComponents: CLUSTER_UPGRADE_PHASE =
    CLUSTER_UPGRADE_PHASE(3i32);
pub const ClusterUpgradePhaseInstallingNewComponents: CLUSTER_UPGRADE_PHASE =
    CLUSTER_UPGRADE_PHASE(4i32);
pub const ClusterUpgradePhaseUpgradeComplete: CLUSTER_UPGRADE_PHASE = CLUSTER_UPGRADE_PHASE(5i32);
impl ::std::convert::From<i32> for CLUSTER_UPGRADE_PHASE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUSTER_UPGRADE_PHASE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSTER_VALIDATE_CSV_FILENAME {
    pub szFileName: [u16; 1],
}
impl CLUSTER_VALIDATE_CSV_FILENAME {}
impl ::std::default::Default for CLUSTER_VALIDATE_CSV_FILENAME {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUSTER_VALIDATE_CSV_FILENAME {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSTER_VALIDATE_CSV_FILENAME")
            .field("szFileName", &self.szFileName)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUSTER_VALIDATE_CSV_FILENAME {
    fn eq(&self, other: &Self) -> bool {
        self.szFileName == other.szFileName
    }
}
impl ::std::cmp::Eq for CLUSTER_VALIDATE_CSV_FILENAME {}
unsafe impl ::windows::runtime::Abi for CLUSTER_VALIDATE_CSV_FILENAME {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSTER_VALIDATE_DIRECTORY {
    pub szPath: [u16; 1],
}
impl CLUSTER_VALIDATE_DIRECTORY {}
impl ::std::default::Default for CLUSTER_VALIDATE_DIRECTORY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUSTER_VALIDATE_DIRECTORY {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSTER_VALIDATE_DIRECTORY")
            .field("szPath", &self.szPath)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUSTER_VALIDATE_DIRECTORY {
    fn eq(&self, other: &Self) -> bool {
        self.szPath == other.szPath
    }
}
impl ::std::cmp::Eq for CLUSTER_VALIDATE_DIRECTORY {}
unsafe impl ::windows::runtime::Abi for CLUSTER_VALIDATE_DIRECTORY {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSTER_VALIDATE_NETNAME {
    pub szNetworkName: [u16; 1],
}
impl CLUSTER_VALIDATE_NETNAME {}
impl ::std::default::Default for CLUSTER_VALIDATE_NETNAME {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUSTER_VALIDATE_NETNAME {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSTER_VALIDATE_NETNAME")
            .field("szNetworkName", &self.szNetworkName)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUSTER_VALIDATE_NETNAME {
    fn eq(&self, other: &Self) -> bool {
        self.szNetworkName == other.szNetworkName
    }
}
impl ::std::cmp::Eq for CLUSTER_VALIDATE_NETNAME {}
unsafe impl ::windows::runtime::Abi for CLUSTER_VALIDATE_NETNAME {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUSTER_VALIDATE_PATH {
    pub szPath: [u16; 1],
}
impl CLUSTER_VALIDATE_PATH {}
impl ::std::default::Default for CLUSTER_VALIDATE_PATH {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUSTER_VALIDATE_PATH {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUSTER_VALIDATE_PATH")
            .field("szPath", &self.szPath)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUSTER_VALIDATE_PATH {
    fn eq(&self, other: &Self) -> bool {
        self.szPath == other.szPath
    }
}
impl ::std::cmp::Eq for CLUSTER_VALIDATE_PATH {}
unsafe impl ::windows::runtime::Abi for CLUSTER_VALIDATE_PATH {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUSTER_VERSION_FLAG_MIXED_MODE: u32 = 1u32;
pub const CLUSTER_VERSION_UNKNOWN: u32 = 4294967295u32;
pub const CLUS_ACCESS_ANY: u32 = 0u32;
pub const CLUS_ACCESS_READ: u32 = 1u32;
pub const CLUS_ACCESS_WRITE: u32 = 2u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUS_AFFINITY_RULE_TYPE(pub i32);
pub const CLUS_AFFINITY_RULE_NONE: CLUS_AFFINITY_RULE_TYPE = CLUS_AFFINITY_RULE_TYPE(0i32);
pub const CLUS_AFFINITY_RULE_SAME_FAULT_DOMAIN: CLUS_AFFINITY_RULE_TYPE =
    CLUS_AFFINITY_RULE_TYPE(1i32);
pub const CLUS_AFFINITY_RULE_SAME_NODE: CLUS_AFFINITY_RULE_TYPE = CLUS_AFFINITY_RULE_TYPE(2i32);
pub const CLUS_AFFINITY_RULE_DIFFERENT_FAULT_DOMAIN: CLUS_AFFINITY_RULE_TYPE =
    CLUS_AFFINITY_RULE_TYPE(3i32);
pub const CLUS_AFFINITY_RULE_DIFFERENT_NODE: CLUS_AFFINITY_RULE_TYPE =
    CLUS_AFFINITY_RULE_TYPE(4i32);
pub const CLUS_AFFINITY_RULE_MIN: CLUS_AFFINITY_RULE_TYPE = CLUS_AFFINITY_RULE_TYPE(0i32);
pub const CLUS_AFFINITY_RULE_MAX: CLUS_AFFINITY_RULE_TYPE = CLUS_AFFINITY_RULE_TYPE(4i32);
impl ::std::convert::From<i32> for CLUS_AFFINITY_RULE_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUS_AFFINITY_RULE_TYPE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUS_CHARACTERISTICS(pub i32);
pub const CLUS_CHAR_UNKNOWN: CLUS_CHARACTERISTICS = CLUS_CHARACTERISTICS(0i32);
pub const CLUS_CHAR_QUORUM: CLUS_CHARACTERISTICS = CLUS_CHARACTERISTICS(1i32);
pub const CLUS_CHAR_DELETE_REQUIRES_ALL_NODES: CLUS_CHARACTERISTICS = CLUS_CHARACTERISTICS(2i32);
pub const CLUS_CHAR_LOCAL_QUORUM: CLUS_CHARACTERISTICS = CLUS_CHARACTERISTICS(4i32);
pub const CLUS_CHAR_LOCAL_QUORUM_DEBUG: CLUS_CHARACTERISTICS = CLUS_CHARACTERISTICS(8i32);
pub const CLUS_CHAR_REQUIRES_STATE_CHANGE_REASON: CLUS_CHARACTERISTICS =
    CLUS_CHARACTERISTICS(16i32);
pub const CLUS_CHAR_BROADCAST_DELETE: CLUS_CHARACTERISTICS = CLUS_CHARACTERISTICS(32i32);
pub const CLUS_CHAR_SINGLE_CLUSTER_INSTANCE: CLUS_CHARACTERISTICS = CLUS_CHARACTERISTICS(64i32);
pub const CLUS_CHAR_SINGLE_GROUP_INSTANCE: CLUS_CHARACTERISTICS = CLUS_CHARACTERISTICS(128i32);
pub const CLUS_CHAR_COEXIST_IN_SHARED_VOLUME_GROUP: CLUS_CHARACTERISTICS =
    CLUS_CHARACTERISTICS(256i32);
pub const CLUS_CHAR_PLACEMENT_DATA: CLUS_CHARACTERISTICS = CLUS_CHARACTERISTICS(512i32);
pub const CLUS_CHAR_MONITOR_DETACH: CLUS_CHARACTERISTICS = CLUS_CHARACTERISTICS(1024i32);
pub const CLUS_CHAR_MONITOR_REATTACH: CLUS_CHARACTERISTICS = CLUS_CHARACTERISTICS(2048i32);
pub const CLUS_CHAR_OPERATION_CONTEXT: CLUS_CHARACTERISTICS = CLUS_CHARACTERISTICS(4096i32);
pub const CLUS_CHAR_CLONES: CLUS_CHARACTERISTICS = CLUS_CHARACTERISTICS(8192i32);
pub const CLUS_CHAR_NOT_PREEMPTABLE: CLUS_CHARACTERISTICS = CLUS_CHARACTERISTICS(16384i32);
pub const CLUS_CHAR_NOTIFY_NEW_OWNER: CLUS_CHARACTERISTICS = CLUS_CHARACTERISTICS(32768i32);
pub const CLUS_CHAR_SUPPORTS_UNMONITORED_STATE: CLUS_CHARACTERISTICS =
    CLUS_CHARACTERISTICS(65536i32);
pub const CLUS_CHAR_INFRASTRUCTURE: CLUS_CHARACTERISTICS = CLUS_CHARACTERISTICS(131072i32);
pub const CLUS_CHAR_VETO_DRAIN: CLUS_CHARACTERISTICS = CLUS_CHARACTERISTICS(262144i32);
pub const CLUS_CHAR_DRAIN_LOCAL_OFFLINE: CLUS_CHARACTERISTICS = CLUS_CHARACTERISTICS(524288i32);
impl ::std::convert::From<i32> for CLUS_CHARACTERISTICS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUS_CHARACTERISTICS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_CHKDSK_INFO {
    pub PartitionNumber: u32,
    pub ChkdskState: u32,
    pub FileIdCount: u32,
    pub FileIdList: [u64; 1],
}
impl CLUS_CHKDSK_INFO {}
impl ::std::default::Default for CLUS_CHKDSK_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUS_CHKDSK_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_CHKDSK_INFO")
            .field("PartitionNumber", &self.PartitionNumber)
            .field("ChkdskState", &self.ChkdskState)
            .field("FileIdCount", &self.FileIdCount)
            .field("FileIdList", &self.FileIdList)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUS_CHKDSK_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionNumber == other.PartitionNumber
            && self.ChkdskState == other.ChkdskState
            && self.FileIdCount == other.FileIdCount
            && self.FileIdList == other.FileIdList
    }
}
impl ::std::cmp::Eq for CLUS_CHKDSK_INFO {}
unsafe impl ::windows::runtime::Abi for CLUS_CHKDSK_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUS_CREATE_CRYPT_CONTAINER_NOT_FOUND: u32 = 1u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_CREATE_INFRASTRUCTURE_FILESERVER_INPUT {
    pub FileServerName: [u16; 16],
}
impl CLUS_CREATE_INFRASTRUCTURE_FILESERVER_INPUT {}
impl ::std::default::Default for CLUS_CREATE_INFRASTRUCTURE_FILESERVER_INPUT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUS_CREATE_INFRASTRUCTURE_FILESERVER_INPUT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_CREATE_INFRASTRUCTURE_FILESERVER_INPUT")
            .field("FileServerName", &self.FileServerName)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUS_CREATE_INFRASTRUCTURE_FILESERVER_INPUT {
    fn eq(&self, other: &Self) -> bool {
        self.FileServerName == other.FileServerName
    }
}
impl ::std::cmp::Eq for CLUS_CREATE_INFRASTRUCTURE_FILESERVER_INPUT {}
unsafe impl ::windows::runtime::Abi for CLUS_CREATE_INFRASTRUCTURE_FILESERVER_INPUT {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_CREATE_INFRASTRUCTURE_FILESERVER_OUTPUT {
    pub FileServerName: [u16; 260],
}
impl CLUS_CREATE_INFRASTRUCTURE_FILESERVER_OUTPUT {}
impl ::std::default::Default for CLUS_CREATE_INFRASTRUCTURE_FILESERVER_OUTPUT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUS_CREATE_INFRASTRUCTURE_FILESERVER_OUTPUT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_CREATE_INFRASTRUCTURE_FILESERVER_OUTPUT")
            .field("FileServerName", &self.FileServerName)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUS_CREATE_INFRASTRUCTURE_FILESERVER_OUTPUT {
    fn eq(&self, other: &Self) -> bool {
        self.FileServerName == other.FileServerName
    }
}
impl ::std::cmp::Eq for CLUS_CREATE_INFRASTRUCTURE_FILESERVER_OUTPUT {}
unsafe impl ::windows::runtime::Abi for CLUS_CREATE_INFRASTRUCTURE_FILESERVER_OUTPUT {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CLUS_CSV_MAINTENANCE_MODE_INFO {
    pub InMaintenance: super::super::Foundation::BOOL,
    pub VolumeName: [u16; 260],
}
#[cfg(feature = "Win32_Foundation")]
impl CLUS_CSV_MAINTENANCE_MODE_INFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CLUS_CSV_MAINTENANCE_MODE_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CLUS_CSV_MAINTENANCE_MODE_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_CSV_MAINTENANCE_MODE_INFO")
            .field("InMaintenance", &self.InMaintenance)
            .field("VolumeName", &self.VolumeName)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CLUS_CSV_MAINTENANCE_MODE_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.InMaintenance == other.InMaintenance && self.VolumeName == other.VolumeName
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CLUS_CSV_MAINTENANCE_MODE_INFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CLUS_CSV_MAINTENANCE_MODE_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_CSV_VOLUME_INFO {
    pub VolumeOffset: u64,
    pub PartitionNumber: u32,
    pub FaultState: CLUSTER_CSV_VOLUME_FAULT_STATE,
    pub BackupState: CLUSTER_SHARED_VOLUME_BACKUP_STATE,
    pub szVolumeFriendlyName: [u16; 260],
    pub szVolumeName: [u16; 50],
}
impl CLUS_CSV_VOLUME_INFO {}
impl ::std::default::Default for CLUS_CSV_VOLUME_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUS_CSV_VOLUME_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_CSV_VOLUME_INFO")
            .field("VolumeOffset", &self.VolumeOffset)
            .field("PartitionNumber", &self.PartitionNumber)
            .field("FaultState", &self.FaultState)
            .field("BackupState", &self.BackupState)
            .field("szVolumeFriendlyName", &self.szVolumeFriendlyName)
            .field("szVolumeName", &self.szVolumeName)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUS_CSV_VOLUME_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.VolumeOffset == other.VolumeOffset
            && self.PartitionNumber == other.PartitionNumber
            && self.FaultState == other.FaultState
            && self.BackupState == other.BackupState
            && self.szVolumeFriendlyName == other.szVolumeFriendlyName
            && self.szVolumeName == other.szVolumeName
    }
}
impl ::std::cmp::Eq for CLUS_CSV_VOLUME_INFO {}
unsafe impl ::windows::runtime::Abi for CLUS_CSV_VOLUME_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_CSV_VOLUME_NAME {
    pub VolumeOffset: i64,
    pub szVolumeName: [u16; 260],
    pub szRootPath: [u16; 263],
}
impl CLUS_CSV_VOLUME_NAME {}
impl ::std::default::Default for CLUS_CSV_VOLUME_NAME {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUS_CSV_VOLUME_NAME {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_CSV_VOLUME_NAME")
            .field("VolumeOffset", &self.VolumeOffset)
            .field("szVolumeName", &self.szVolumeName)
            .field("szRootPath", &self.szRootPath)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUS_CSV_VOLUME_NAME {
    fn eq(&self, other: &Self) -> bool {
        self.VolumeOffset == other.VolumeOffset
            && self.szVolumeName == other.szVolumeName
            && self.szRootPath == other.szRootPath
    }
}
impl ::std::cmp::Eq for CLUS_CSV_VOLUME_NAME {}
unsafe impl ::windows::runtime::Abi for CLUS_CSV_VOLUME_NAME {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_DISK_NUMBER_INFO {
    pub DiskNumber: u32,
    pub BytesPerSector: u32,
}
impl CLUS_DISK_NUMBER_INFO {}
impl ::std::default::Default for CLUS_DISK_NUMBER_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUS_DISK_NUMBER_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_DISK_NUMBER_INFO")
            .field("DiskNumber", &self.DiskNumber)
            .field("BytesPerSector", &self.BytesPerSector)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUS_DISK_NUMBER_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.DiskNumber == other.DiskNumber && self.BytesPerSector == other.BytesPerSector
    }
}
impl ::std::cmp::Eq for CLUS_DISK_NUMBER_INFO {}
unsafe impl ::windows::runtime::Abi for CLUS_DISK_NUMBER_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CLUS_DNN_LEADER_STATUS {
    pub IsOnline: super::super::Foundation::BOOL,
    pub IsFileServerPresent: super::super::Foundation::BOOL,
}
#[cfg(feature = "Win32_Foundation")]
impl CLUS_DNN_LEADER_STATUS {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CLUS_DNN_LEADER_STATUS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CLUS_DNN_LEADER_STATUS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_DNN_LEADER_STATUS")
            .field("IsOnline", &self.IsOnline)
            .field("IsFileServerPresent", &self.IsFileServerPresent)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CLUS_DNN_LEADER_STATUS {
    fn eq(&self, other: &Self) -> bool {
        self.IsOnline == other.IsOnline && self.IsFileServerPresent == other.IsFileServerPresent
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CLUS_DNN_LEADER_STATUS {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CLUS_DNN_LEADER_STATUS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_DNN_SODAFS_CLONE_STATUS {
    pub NodeId: u32,
    pub Status: CLUSTER_RESOURCE_STATE,
}
impl CLUS_DNN_SODAFS_CLONE_STATUS {}
impl ::std::default::Default for CLUS_DNN_SODAFS_CLONE_STATUS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUS_DNN_SODAFS_CLONE_STATUS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_DNN_SODAFS_CLONE_STATUS")
            .field("NodeId", &self.NodeId)
            .field("Status", &self.Status)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUS_DNN_SODAFS_CLONE_STATUS {
    fn eq(&self, other: &Self) -> bool {
        self.NodeId == other.NodeId && self.Status == other.Status
    }
}
impl ::std::cmp::Eq for CLUS_DNN_SODAFS_CLONE_STATUS {}
unsafe impl ::windows::runtime::Abi for CLUS_DNN_SODAFS_CLONE_STATUS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUS_FLAGS(pub i32);
pub const CLUS_FLAG_CORE: CLUS_FLAGS = CLUS_FLAGS(1i32);
impl ::std::convert::From<i32> for CLUS_FLAGS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUS_FLAGS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_FORCE_QUORUM_INFO {
    pub dwSize: u32,
    pub dwNodeBitMask: u32,
    pub dwMaxNumberofNodes: u32,
    pub multiszNodeList: [u16; 1],
}
impl CLUS_FORCE_QUORUM_INFO {}
impl ::std::default::Default for CLUS_FORCE_QUORUM_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUS_FORCE_QUORUM_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_FORCE_QUORUM_INFO")
            .field("dwSize", &self.dwSize)
            .field("dwNodeBitMask", &self.dwNodeBitMask)
            .field("dwMaxNumberofNodes", &self.dwMaxNumberofNodes)
            .field("multiszNodeList", &self.multiszNodeList)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUS_FORCE_QUORUM_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.dwSize == other.dwSize
            && self.dwNodeBitMask == other.dwNodeBitMask
            && self.dwMaxNumberofNodes == other.dwMaxNumberofNodes
            && self.multiszNodeList == other.multiszNodeList
    }
}
impl ::std::cmp::Eq for CLUS_FORCE_QUORUM_INFO {}
unsafe impl ::windows::runtime::Abi for CLUS_FORCE_QUORUM_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_FTSET_INFO {
    pub dwRootSignature: u32,
    pub dwFtType: u32,
}
impl CLUS_FTSET_INFO {}
impl ::std::default::Default for CLUS_FTSET_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUS_FTSET_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_FTSET_INFO")
            .field("dwRootSignature", &self.dwRootSignature)
            .field("dwFtType", &self.dwFtType)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUS_FTSET_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.dwRootSignature == other.dwRootSignature && self.dwFtType == other.dwFtType
    }
}
impl ::std::cmp::Eq for CLUS_FTSET_INFO {}
unsafe impl ::windows::runtime::Abi for CLUS_FTSET_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUS_GLOBAL: u32 = 1u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUS_GROUP_START_SETTING(pub i32);
pub const CLUS_GROUP_START_ALWAYS: CLUS_GROUP_START_SETTING = CLUS_GROUP_START_SETTING(0i32);
pub const CLUS_GROUP_DO_NOT_START: CLUS_GROUP_START_SETTING = CLUS_GROUP_START_SETTING(1i32);
pub const CLUS_GROUP_START_ALLOWED: CLUS_GROUP_START_SETTING = CLUS_GROUP_START_SETTING(2i32);
impl ::std::convert::From<i32> for CLUS_GROUP_START_SETTING {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUS_GROUP_START_SETTING {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUS_GRP_MOVE_ALLOWED: u32 = 0u32;
pub const CLUS_GRP_MOVE_LOCKED: u32 = 1u32;
pub const CLUS_HYBRID_QUORUM: u32 = 1024u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CLUS_MAINTENANCE_MODE_INFO {
    pub InMaintenance: super::super::Foundation::BOOL,
}
#[cfg(feature = "Win32_Foundation")]
impl CLUS_MAINTENANCE_MODE_INFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CLUS_MAINTENANCE_MODE_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CLUS_MAINTENANCE_MODE_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_MAINTENANCE_MODE_INFO")
            .field("InMaintenance", &self.InMaintenance)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CLUS_MAINTENANCE_MODE_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.InMaintenance == other.InMaintenance
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CLUS_MAINTENANCE_MODE_INFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CLUS_MAINTENANCE_MODE_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CLUS_MAINTENANCE_MODE_INFOEX {
    pub InMaintenance: super::super::Foundation::BOOL,
    pub MaintainenceModeType: MAINTENANCE_MODE_TYPE_ENUM,
    pub InternalState: CLUSTER_RESOURCE_STATE,
    pub Signature: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl CLUS_MAINTENANCE_MODE_INFOEX {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CLUS_MAINTENANCE_MODE_INFOEX {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CLUS_MAINTENANCE_MODE_INFOEX {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_MAINTENANCE_MODE_INFOEX")
            .field("InMaintenance", &self.InMaintenance)
            .field("MaintainenceModeType", &self.MaintainenceModeType)
            .field("InternalState", &self.InternalState)
            .field("Signature", &self.Signature)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CLUS_MAINTENANCE_MODE_INFOEX {
    fn eq(&self, other: &Self) -> bool {
        self.InMaintenance == other.InMaintenance
            && self.MaintainenceModeType == other.MaintainenceModeType
            && self.InternalState == other.InternalState
            && self.Signature == other.Signature
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CLUS_MAINTENANCE_MODE_INFOEX {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CLUS_MAINTENANCE_MODE_INFOEX {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUS_MODIFY: u32 = 1u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_NETNAME_IP_INFO_ENTRY {
    pub NodeId: u32,
    pub AddressSize: u32,
    pub Address: [u8; 1],
}
impl CLUS_NETNAME_IP_INFO_ENTRY {}
impl ::std::default::Default for CLUS_NETNAME_IP_INFO_ENTRY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUS_NETNAME_IP_INFO_ENTRY {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_NETNAME_IP_INFO_ENTRY")
            .field("NodeId", &self.NodeId)
            .field("AddressSize", &self.AddressSize)
            .field("Address", &self.Address)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUS_NETNAME_IP_INFO_ENTRY {
    fn eq(&self, other: &Self) -> bool {
        self.NodeId == other.NodeId
            && self.AddressSize == other.AddressSize
            && self.Address == other.Address
    }
}
impl ::std::cmp::Eq for CLUS_NETNAME_IP_INFO_ENTRY {}
unsafe impl ::windows::runtime::Abi for CLUS_NETNAME_IP_INFO_ENTRY {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_NETNAME_IP_INFO_FOR_MULTICHANNEL {
    pub szName: [u16; 64],
    pub NumEntries: u32,
    pub IpInfo: [CLUS_NETNAME_IP_INFO_ENTRY; 1],
}
impl CLUS_NETNAME_IP_INFO_FOR_MULTICHANNEL {}
impl ::std::default::Default for CLUS_NETNAME_IP_INFO_FOR_MULTICHANNEL {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUS_NETNAME_IP_INFO_FOR_MULTICHANNEL {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_NETNAME_IP_INFO_FOR_MULTICHANNEL")
            .field("szName", &self.szName)
            .field("NumEntries", &self.NumEntries)
            .field("IpInfo", &self.IpInfo)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUS_NETNAME_IP_INFO_FOR_MULTICHANNEL {
    fn eq(&self, other: &Self) -> bool {
        self.szName == other.szName
            && self.NumEntries == other.NumEntries
            && self.IpInfo == other.IpInfo
    }
}
impl ::std::cmp::Eq for CLUS_NETNAME_IP_INFO_FOR_MULTICHANNEL {}
unsafe impl ::windows::runtime::Abi for CLUS_NETNAME_IP_INFO_FOR_MULTICHANNEL {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_NETNAME_PWD_INFO {
    pub Flags: u32,
    pub Password: [u16; 16],
    pub CreatingDC: [u16; 258],
    pub ObjectGuid: [u16; 64],
}
impl CLUS_NETNAME_PWD_INFO {}
impl ::std::default::Default for CLUS_NETNAME_PWD_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUS_NETNAME_PWD_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_NETNAME_PWD_INFO")
            .field("Flags", &self.Flags)
            .field("Password", &self.Password)
            .field("CreatingDC", &self.CreatingDC)
            .field("ObjectGuid", &self.ObjectGuid)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUS_NETNAME_PWD_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.Flags == other.Flags
            && self.Password == other.Password
            && self.CreatingDC == other.CreatingDC
            && self.ObjectGuid == other.ObjectGuid
    }
}
impl ::std::cmp::Eq for CLUS_NETNAME_PWD_INFO {}
unsafe impl ::windows::runtime::Abi for CLUS_NETNAME_PWD_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_NETNAME_PWD_INFOEX {
    pub Flags: u32,
    pub Password: [u16; 128],
    pub CreatingDC: [u16; 258],
    pub ObjectGuid: [u16; 64],
}
impl CLUS_NETNAME_PWD_INFOEX {}
impl ::std::default::Default for CLUS_NETNAME_PWD_INFOEX {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUS_NETNAME_PWD_INFOEX {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_NETNAME_PWD_INFOEX")
            .field("Flags", &self.Flags)
            .field("Password", &self.Password)
            .field("CreatingDC", &self.CreatingDC)
            .field("ObjectGuid", &self.ObjectGuid)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUS_NETNAME_PWD_INFOEX {
    fn eq(&self, other: &Self) -> bool {
        self.Flags == other.Flags
            && self.Password == other.Password
            && self.CreatingDC == other.CreatingDC
            && self.ObjectGuid == other.ObjectGuid
    }
}
impl ::std::cmp::Eq for CLUS_NETNAME_PWD_INFOEX {}
unsafe impl ::windows::runtime::Abi for CLUS_NETNAME_PWD_INFOEX {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CLUS_NETNAME_VS_TOKEN_INFO {
    pub ProcessID: u32,
    pub DesiredAccess: u32,
    pub InheritHandle: super::super::Foundation::BOOL,
}
#[cfg(feature = "Win32_Foundation")]
impl CLUS_NETNAME_VS_TOKEN_INFO {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CLUS_NETNAME_VS_TOKEN_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CLUS_NETNAME_VS_TOKEN_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_NETNAME_VS_TOKEN_INFO")
            .field("ProcessID", &self.ProcessID)
            .field("DesiredAccess", &self.DesiredAccess)
            .field("InheritHandle", &self.InheritHandle)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CLUS_NETNAME_VS_TOKEN_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.ProcessID == other.ProcessID
            && self.DesiredAccess == other.DesiredAccess
            && self.InheritHandle == other.InheritHandle
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CLUS_NETNAME_VS_TOKEN_INFO {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CLUS_NETNAME_VS_TOKEN_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUS_NODE_MAJORITY_QUORUM: u32 = 0u32;
pub const CLUS_NOT_GLOBAL: u32 = 0u32;
pub const CLUS_NO_MODIFY: u32 = 0u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_PARTITION_INFO {
    pub dwFlags: u32,
    pub szDeviceName: [u16; 260],
    pub szVolumeLabel: [u16; 260],
    pub dwSerialNumber: u32,
    pub rgdwMaximumComponentLength: u32,
    pub dwFileSystemFlags: u32,
    pub szFileSystem: [u16; 32],
}
impl CLUS_PARTITION_INFO {}
impl ::std::default::Default for CLUS_PARTITION_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUS_PARTITION_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_PARTITION_INFO")
            .field("dwFlags", &self.dwFlags)
            .field("szDeviceName", &self.szDeviceName)
            .field("szVolumeLabel", &self.szVolumeLabel)
            .field("dwSerialNumber", &self.dwSerialNumber)
            .field(
                "rgdwMaximumComponentLength",
                &self.rgdwMaximumComponentLength,
            )
            .field("dwFileSystemFlags", &self.dwFileSystemFlags)
            .field("szFileSystem", &self.szFileSystem)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUS_PARTITION_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.dwFlags == other.dwFlags
            && self.szDeviceName == other.szDeviceName
            && self.szVolumeLabel == other.szVolumeLabel
            && self.dwSerialNumber == other.dwSerialNumber
            && self.rgdwMaximumComponentLength == other.rgdwMaximumComponentLength
            && self.dwFileSystemFlags == other.dwFileSystemFlags
            && self.szFileSystem == other.szFileSystem
    }
}
impl ::std::cmp::Eq for CLUS_PARTITION_INFO {}
unsafe impl ::windows::runtime::Abi for CLUS_PARTITION_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_PARTITION_INFO_EX {
    pub dwFlags: u32,
    pub szDeviceName: [u16; 260],
    pub szVolumeLabel: [u16; 260],
    pub dwSerialNumber: u32,
    pub rgdwMaximumComponentLength: u32,
    pub dwFileSystemFlags: u32,
    pub szFileSystem: [u16; 32],
    pub TotalSizeInBytes: u64,
    pub FreeSizeInBytes: u64,
    pub DeviceNumber: u32,
    pub PartitionNumber: u32,
    pub VolumeGuid: ::windows::runtime::GUID,
}
impl CLUS_PARTITION_INFO_EX {}
impl ::std::default::Default for CLUS_PARTITION_INFO_EX {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUS_PARTITION_INFO_EX {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_PARTITION_INFO_EX")
            .field("dwFlags", &self.dwFlags)
            .field("szDeviceName", &self.szDeviceName)
            .field("szVolumeLabel", &self.szVolumeLabel)
            .field("dwSerialNumber", &self.dwSerialNumber)
            .field(
                "rgdwMaximumComponentLength",
                &self.rgdwMaximumComponentLength,
            )
            .field("dwFileSystemFlags", &self.dwFileSystemFlags)
            .field("szFileSystem", &self.szFileSystem)
            .field("TotalSizeInBytes", &self.TotalSizeInBytes)
            .field("FreeSizeInBytes", &self.FreeSizeInBytes)
            .field("DeviceNumber", &self.DeviceNumber)
            .field("PartitionNumber", &self.PartitionNumber)
            .field("VolumeGuid", &self.VolumeGuid)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUS_PARTITION_INFO_EX {
    fn eq(&self, other: &Self) -> bool {
        self.dwFlags == other.dwFlags
            && self.szDeviceName == other.szDeviceName
            && self.szVolumeLabel == other.szVolumeLabel
            && self.dwSerialNumber == other.dwSerialNumber
            && self.rgdwMaximumComponentLength == other.rgdwMaximumComponentLength
            && self.dwFileSystemFlags == other.dwFileSystemFlags
            && self.szFileSystem == other.szFileSystem
            && self.TotalSizeInBytes == other.TotalSizeInBytes
            && self.FreeSizeInBytes == other.FreeSizeInBytes
            && self.DeviceNumber == other.DeviceNumber
            && self.PartitionNumber == other.PartitionNumber
            && self.VolumeGuid == other.VolumeGuid
    }
}
impl ::std::cmp::Eq for CLUS_PARTITION_INFO_EX {}
unsafe impl ::windows::runtime::Abi for CLUS_PARTITION_INFO_EX {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_PARTITION_INFO_EX2 {
    pub GptPartitionId: ::windows::runtime::GUID,
    pub szPartitionName: [u16; 260],
    pub EncryptionFlags: u32,
}
impl CLUS_PARTITION_INFO_EX2 {}
impl ::std::default::Default for CLUS_PARTITION_INFO_EX2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUS_PARTITION_INFO_EX2 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_PARTITION_INFO_EX2")
            .field("GptPartitionId", &self.GptPartitionId)
            .field("szPartitionName", &self.szPartitionName)
            .field("EncryptionFlags", &self.EncryptionFlags)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUS_PARTITION_INFO_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.GptPartitionId == other.GptPartitionId
            && self.szPartitionName == other.szPartitionName
            && self.EncryptionFlags == other.EncryptionFlags
    }
}
impl ::std::cmp::Eq for CLUS_PARTITION_INFO_EX2 {}
unsafe impl ::windows::runtime::Abi for CLUS_PARTITION_INFO_EX2 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_PROVIDER_STATE_CHANGE_INFO {
    pub dwSize: u32,
    pub resourceState: CLUSTER_RESOURCE_STATE,
    pub szProviderId: [u16; 1],
}
impl CLUS_PROVIDER_STATE_CHANGE_INFO {}
impl ::std::default::Default for CLUS_PROVIDER_STATE_CHANGE_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUS_PROVIDER_STATE_CHANGE_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_PROVIDER_STATE_CHANGE_INFO")
            .field("dwSize", &self.dwSize)
            .field("resourceState", &self.resourceState)
            .field("szProviderId", &self.szProviderId)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUS_PROVIDER_STATE_CHANGE_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.dwSize == other.dwSize
            && self.resourceState == other.resourceState
            && self.szProviderId == other.szProviderId
    }
}
impl ::std::cmp::Eq for CLUS_PROVIDER_STATE_CHANGE_INFO {}
unsafe impl ::windows::runtime::Abi for CLUS_PROVIDER_STATE_CHANGE_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CLUS_RESDLL_OFFLINE_DO_NOT_UPDATE_PERSISTENT_STATE: u32 = 64u32;
pub const CLUS_RESDLL_OFFLINE_DUE_TO_EMBEDDED_FAILURE: u32 = 16u32;
pub const CLUS_RESDLL_OFFLINE_IGNORE_NETWORK_CONNECTIVITY: u32 = 32u32;
pub const CLUS_RESDLL_OFFLINE_IGNORE_RESOURCE_STATUS: u32 = 1u32;
pub const CLUS_RESDLL_OFFLINE_QUEUE_ENABLED: u32 = 4u32;
pub const CLUS_RESDLL_OFFLINE_RETURNING_TO_SOURCE_NODE_BECAUSE_OF_ERROR: u32 = 8u32;
pub const CLUS_RESDLL_OFFLINE_RETURN_TO_SOURCE_NODE_ON_ERROR: u32 = 2u32;
pub const CLUS_RESDLL_ONLINE_IGNORE_NETWORK_CONNECTIVITY: u32 = 16u32;
pub const CLUS_RESDLL_ONLINE_IGNORE_RESOURCE_STATUS: u32 = 2u32;
pub const CLUS_RESDLL_ONLINE_RECOVER_MONITOR_STATE: u32 = 1u32;
pub const CLUS_RESDLL_ONLINE_RESTORE_ONLINE_STATE: u32 = 8u32;
pub const CLUS_RESDLL_ONLINE_RETURN_TO_SOURCE_NODE_ON_ERROR: u32 = 4u32;
pub const CLUS_RESDLL_OPEN_DONT_DELETE_TEMP_DISK: u32 = 2u32;
pub const CLUS_RESDLL_OPEN_RECOVER_MONITOR_STATE: u32 = 1u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_RESOURCE_CLASS_INFO {
    pub Anonymous: CLUS_RESOURCE_CLASS_INFO_0,
}
impl CLUS_RESOURCE_CLASS_INFO {}
impl ::std::default::Default for CLUS_RESOURCE_CLASS_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUS_RESOURCE_CLASS_INFO {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUS_RESOURCE_CLASS_INFO {}
unsafe impl ::windows::runtime::Abi for CLUS_RESOURCE_CLASS_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub union CLUS_RESOURCE_CLASS_INFO_0 {
    pub Anonymous: CLUS_RESOURCE_CLASS_INFO_0_0,
    pub li: u64,
}
impl CLUS_RESOURCE_CLASS_INFO_0 {}
impl ::std::default::Default for CLUS_RESOURCE_CLASS_INFO_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUS_RESOURCE_CLASS_INFO_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUS_RESOURCE_CLASS_INFO_0 {}
unsafe impl ::windows::runtime::Abi for CLUS_RESOURCE_CLASS_INFO_0 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_RESOURCE_CLASS_INFO_0_0 {
    pub Anonymous: CLUS_RESOURCE_CLASS_INFO_0_0_0,
    pub SubClass: u32,
}
impl CLUS_RESOURCE_CLASS_INFO_0_0 {}
impl ::std::default::Default for CLUS_RESOURCE_CLASS_INFO_0_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUS_RESOURCE_CLASS_INFO_0_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUS_RESOURCE_CLASS_INFO_0_0 {}
unsafe impl ::windows::runtime::Abi for CLUS_RESOURCE_CLASS_INFO_0_0 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub union CLUS_RESOURCE_CLASS_INFO_0_0_0 {
    pub dw: u32,
    pub rc: CLUSTER_RESOURCE_CLASS,
}
impl CLUS_RESOURCE_CLASS_INFO_0_0_0 {}
impl ::std::default::Default for CLUS_RESOURCE_CLASS_INFO_0_0_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUS_RESOURCE_CLASS_INFO_0_0_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUS_RESOURCE_CLASS_INFO_0_0_0 {}
unsafe impl ::windows::runtime::Abi for CLUS_RESOURCE_CLASS_INFO_0_0_0 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUS_RESSUBCLASS(pub i32);
pub const CLUS_RESSUBCLASS_SHARED: CLUS_RESSUBCLASS = CLUS_RESSUBCLASS(-2147483648i32);
impl ::std::convert::From<i32> for CLUS_RESSUBCLASS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUS_RESSUBCLASS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUS_RESSUBCLASS_NETWORK(pub i32);
pub const CLUS_RESSUBCLASS_NETWORK_INTERNET_PROTOCOL: CLUS_RESSUBCLASS_NETWORK =
    CLUS_RESSUBCLASS_NETWORK(-2147483648i32);
impl ::std::convert::From<i32> for CLUS_RESSUBCLASS_NETWORK {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUS_RESSUBCLASS_NETWORK {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct CLUS_RESSUBCLASS_STORAGE(pub i32);
pub const CLUS_RESSUBCLASS_STORAGE_SHARED_BUS: CLUS_RESSUBCLASS_STORAGE =
    CLUS_RESSUBCLASS_STORAGE(-2147483648i32);
pub const CLUS_RESSUBCLASS_STORAGE_DISK: CLUS_RESSUBCLASS_STORAGE =
    CLUS_RESSUBCLASS_STORAGE(1073741824i32);
pub const CLUS_RESSUBCLASS_STORAGE_REPLICATION: CLUS_RESSUBCLASS_STORAGE =
    CLUS_RESSUBCLASS_STORAGE(268435456i32);
impl ::std::convert::From<i32> for CLUS_RESSUBCLASS_STORAGE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for CLUS_RESSUBCLASS_STORAGE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_SCSI_ADDRESS {
    pub Anonymous: CLUS_SCSI_ADDRESS_0,
}
impl CLUS_SCSI_ADDRESS {}
impl ::std::default::Default for CLUS_SCSI_ADDRESS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUS_SCSI_ADDRESS {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUS_SCSI_ADDRESS {}
unsafe impl ::windows::runtime::Abi for CLUS_SCSI_ADDRESS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub union CLUS_SCSI_ADDRESS_0 {
    pub Anonymous: CLUS_SCSI_ADDRESS_0_0,
    pub dw: u32,
}
impl CLUS_SCSI_ADDRESS_0 {}
impl ::std::default::Default for CLUS_SCSI_ADDRESS_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::cmp::PartialEq for CLUS_SCSI_ADDRESS_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
impl ::std::cmp::Eq for CLUS_SCSI_ADDRESS_0 {}
unsafe impl ::windows::runtime::Abi for CLUS_SCSI_ADDRESS_0 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_SCSI_ADDRESS_0_0 {
    pub PortNumber: u8,
    pub PathId: u8,
    pub TargetId: u8,
    pub Lun: u8,
}
impl CLUS_SCSI_ADDRESS_0_0 {}
impl ::std::default::Default for CLUS_SCSI_ADDRESS_0_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUS_SCSI_ADDRESS_0_0 {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("_Anonymous_e__Struct")
            .field("PortNumber", &self.PortNumber)
            .field("PathId", &self.PathId)
            .field("TargetId", &self.TargetId)
            .field("Lun", &self.Lun)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUS_SCSI_ADDRESS_0_0 {
    fn eq(&self, other: &Self) -> bool {
        self.PortNumber == other.PortNumber
            && self.PathId == other.PathId
            && self.TargetId == other.TargetId
            && self.Lun == other.Lun
    }
}
impl ::std::cmp::Eq for CLUS_SCSI_ADDRESS_0_0 {}
unsafe impl ::windows::runtime::Abi for CLUS_SCSI_ADDRESS_0_0 {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CLUS_SET_MAINTENANCE_MODE_INPUT {
    pub InMaintenance: super::super::Foundation::BOOL,
    pub ExtraParameterSize: u32,
    pub ExtraParameter: [u8; 1],
}
#[cfg(feature = "Win32_Foundation")]
impl CLUS_SET_MAINTENANCE_MODE_INPUT {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CLUS_SET_MAINTENANCE_MODE_INPUT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CLUS_SET_MAINTENANCE_MODE_INPUT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_SET_MAINTENANCE_MODE_INPUT")
            .field("InMaintenance", &self.InMaintenance)
            .field("ExtraParameterSize", &self.ExtraParameterSize)
            .field("ExtraParameter", &self.ExtraParameter)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CLUS_SET_MAINTENANCE_MODE_INPUT {
    fn eq(&self, other: &Self) -> bool {
        self.InMaintenance == other.InMaintenance
            && self.ExtraParameterSize == other.ExtraParameterSize
            && self.ExtraParameter == other.ExtraParameter
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CLUS_SET_MAINTENANCE_MODE_INPUT {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CLUS_SET_MAINTENANCE_MODE_INPUT {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_SHARED_VOLUME_BACKUP_MODE {
    pub BackupState: CLUSTER_SHARED_VOLUME_BACKUP_STATE,
    pub DelayTimerInSecs: u32,
    pub VolumeName: [u16; 260],
}
impl CLUS_SHARED_VOLUME_BACKUP_MODE {}
impl ::std::default::Default for CLUS_SHARED_VOLUME_BACKUP_MODE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUS_SHARED_VOLUME_BACKUP_MODE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_SHARED_VOLUME_BACKUP_MODE")
            .field("BackupState", &self.BackupState)
            .field("DelayTimerInSecs", &self.DelayTimerInSecs)
            .field("VolumeName", &self.VolumeName)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUS_SHARED_VOLUME_BACKUP_MODE {
    fn eq(&self, other: &Self) -> bool {
        self.BackupState == other.BackupState
            && self.DelayTimerInSecs == other.DelayTimerInSecs
            && self.VolumeName == other.VolumeName
    }
}
impl ::std::cmp::Eq for CLUS_SHARED_VOLUME_BACKUP_MODE {}
unsafe impl ::windows::runtime::Abi for CLUS_SHARED_VOLUME_BACKUP_MODE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CLUS_STARTING_PARAMS {
    pub dwSize: u32,
    pub bForm: super::super::Foundation::BOOL,
    pub bFirst: super::super::Foundation::BOOL,
}
#[cfg(feature = "Win32_Foundation")]
impl CLUS_STARTING_PARAMS {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CLUS_STARTING_PARAMS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CLUS_STARTING_PARAMS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_STARTING_PARAMS")
            .field("dwSize", &self.dwSize)
            .field("bForm", &self.bForm)
            .field("bFirst", &self.bFirst)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CLUS_STARTING_PARAMS {
    fn eq(&self, other: &Self) -> bool {
        self.dwSize == other.dwSize && self.bForm == other.bForm && self.bFirst == other.bFirst
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CLUS_STARTING_PARAMS {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CLUS_STARTING_PARAMS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_STORAGE_GET_AVAILABLE_DRIVELETTERS {
    pub AvailDrivelettersMask: u32,
}
impl CLUS_STORAGE_GET_AVAILABLE_DRIVELETTERS {}
impl ::std::default::Default for CLUS_STORAGE_GET_AVAILABLE_DRIVELETTERS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUS_STORAGE_GET_AVAILABLE_DRIVELETTERS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_STORAGE_GET_AVAILABLE_DRIVELETTERS")
            .field("AvailDrivelettersMask", &self.AvailDrivelettersMask)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUS_STORAGE_GET_AVAILABLE_DRIVELETTERS {
    fn eq(&self, other: &Self) -> bool {
        self.AvailDrivelettersMask == other.AvailDrivelettersMask
    }
}
impl ::std::cmp::Eq for CLUS_STORAGE_GET_AVAILABLE_DRIVELETTERS {}
unsafe impl ::windows::runtime::Abi for CLUS_STORAGE_GET_AVAILABLE_DRIVELETTERS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_STORAGE_REMAP_DRIVELETTER {
    pub CurrentDriveLetterMask: u32,
    pub TargetDriveLetterMask: u32,
}
impl CLUS_STORAGE_REMAP_DRIVELETTER {}
impl ::std::default::Default for CLUS_STORAGE_REMAP_DRIVELETTER {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUS_STORAGE_REMAP_DRIVELETTER {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_STORAGE_REMAP_DRIVELETTER")
            .field("CurrentDriveLetterMask", &self.CurrentDriveLetterMask)
            .field("TargetDriveLetterMask", &self.TargetDriveLetterMask)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUS_STORAGE_REMAP_DRIVELETTER {
    fn eq(&self, other: &Self) -> bool {
        self.CurrentDriveLetterMask == other.CurrentDriveLetterMask
            && self.TargetDriveLetterMask == other.TargetDriveLetterMask
    }
}
impl ::std::cmp::Eq for CLUS_STORAGE_REMAP_DRIVELETTER {}
unsafe impl ::windows::runtime::Abi for CLUS_STORAGE_REMAP_DRIVELETTER {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct CLUS_STORAGE_SET_DRIVELETTER {
    pub PartitionNumber: u32,
    pub DriveLetterMask: u32,
}
impl CLUS_STORAGE_SET_DRIVELETTER {}
impl ::std::default::Default for CLUS_STORAGE_SET_DRIVELETTER {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for CLUS_STORAGE_SET_DRIVELETTER {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_STORAGE_SET_DRIVELETTER")
            .field("PartitionNumber", &self.PartitionNumber)
            .field("DriveLetterMask", &self.DriveLetterMask)
            .finish()
    }
}
impl ::std::cmp::PartialEq for CLUS_STORAGE_SET_DRIVELETTER {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionNumber == other.PartitionNumber
            && self.DriveLetterMask == other.DriveLetterMask
    }
}
impl ::std::cmp::Eq for CLUS_STORAGE_SET_DRIVELETTER {}
unsafe impl ::windows::runtime::Abi for CLUS_STORAGE_SET_DRIVELETTER {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CLUS_WORKER {
    pub hThread: super::super::Foundation::HANDLE,
    pub Terminate: super::super::Foundation::BOOL,
}
#[cfg(feature = "Win32_Foundation")]
impl CLUS_WORKER {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CLUS_WORKER {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CLUS_WORKER {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CLUS_WORKER")
            .field("hThread", &self.hThread)
            .field("Terminate", &self.Terminate)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CLUS_WORKER {
    fn eq(&self, other: &Self) -> bool {
        self.hThread == other.hThread && self.Terminate == other.Terminate
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CLUS_WORKER {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CLUS_WORKER {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CREATEDC_PRESENT: u32 = 2u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CREATE_CLUSTER_CONFIG {
    pub dwVersion: u32,
    pub lpszClusterName: super::super::Foundation::PWSTR,
    pub cNodes: u32,
    pub ppszNodeNames: *mut super::super::Foundation::PWSTR,
    pub cIpEntries: u32,
    pub pIpEntries: *mut CLUSTER_IP_ENTRY,
    pub fEmptyCluster: super::super::Foundation::BOOLEAN,
    pub managementPointType: CLUSTER_MGMT_POINT_TYPE,
    pub managementPointResType: CLUSTER_MGMT_POINT_RESTYPE,
}
#[cfg(feature = "Win32_Foundation")]
impl CREATE_CLUSTER_CONFIG {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CREATE_CLUSTER_CONFIG {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CREATE_CLUSTER_CONFIG {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CREATE_CLUSTER_CONFIG")
            .field("dwVersion", &self.dwVersion)
            .field("lpszClusterName", &self.lpszClusterName)
            .field("cNodes", &self.cNodes)
            .field("ppszNodeNames", &self.ppszNodeNames)
            .field("cIpEntries", &self.cIpEntries)
            .field("pIpEntries", &self.pIpEntries)
            .field("fEmptyCluster", &self.fEmptyCluster)
            .field("managementPointType", &self.managementPointType)
            .field("managementPointResType", &self.managementPointResType)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CREATE_CLUSTER_CONFIG {
    fn eq(&self, other: &Self) -> bool {
        self.dwVersion == other.dwVersion
            && self.lpszClusterName == other.lpszClusterName
            && self.cNodes == other.cNodes
            && self.ppszNodeNames == other.ppszNodeNames
            && self.cIpEntries == other.cIpEntries
            && self.pIpEntries == other.pIpEntries
            && self.fEmptyCluster == other.fEmptyCluster
            && self.managementPointType == other.managementPointType
            && self.managementPointResType == other.managementPointResType
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CREATE_CLUSTER_CONFIG {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CREATE_CLUSTER_CONFIG {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CREATE_CLUSTER_MAJOR_VERSION_MASK: u32 = 4294967040u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct CREATE_CLUSTER_NAME_ACCOUNT {
    pub dwVersion: u32,
    pub lpszClusterName: super::super::Foundation::PWSTR,
    pub dwFlags: u32,
    pub pszUserName: super::super::Foundation::PWSTR,
    pub pszPassword: super::super::Foundation::PWSTR,
    pub pszDomain: super::super::Foundation::PWSTR,
    pub managementPointType: CLUSTER_MGMT_POINT_TYPE,
    pub managementPointResType: CLUSTER_MGMT_POINT_RESTYPE,
    pub bUpgradeVCOs: super::super::Foundation::BOOLEAN,
}
#[cfg(feature = "Win32_Foundation")]
impl CREATE_CLUSTER_NAME_ACCOUNT {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for CREATE_CLUSTER_NAME_ACCOUNT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for CREATE_CLUSTER_NAME_ACCOUNT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("CREATE_CLUSTER_NAME_ACCOUNT")
            .field("dwVersion", &self.dwVersion)
            .field("lpszClusterName", &self.lpszClusterName)
            .field("dwFlags", &self.dwFlags)
            .field("pszUserName", &self.pszUserName)
            .field("pszPassword", &self.pszPassword)
            .field("pszDomain", &self.pszDomain)
            .field("managementPointType", &self.managementPointType)
            .field("managementPointResType", &self.managementPointResType)
            .field("bUpgradeVCOs", &self.bUpgradeVCOs)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for CREATE_CLUSTER_NAME_ACCOUNT {
    fn eq(&self, other: &Self) -> bool {
        self.dwVersion == other.dwVersion
            && self.lpszClusterName == other.lpszClusterName
            && self.dwFlags == other.dwFlags
            && self.pszUserName == other.pszUserName
            && self.pszPassword == other.pszPassword
            && self.pszDomain == other.pszDomain
            && self.managementPointType == other.managementPointType
            && self.managementPointResType == other.managementPointResType
            && self.bUpgradeVCOs == other.bUpgradeVCOs
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for CREATE_CLUSTER_NAME_ACCOUNT {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for CREATE_CLUSTER_NAME_ACCOUNT {
    type Abi = Self;
    type DefaultType = Self;
}
pub const CREATE_CLUSTER_VERSION: u32 = 1536u32;
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn CanResourceBeDependent(
    hresource: *const _HRESOURCE,
    hresourcedependent: *const _HRESOURCE,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CanResourceBeDependent(
                hresource: *const _HRESOURCE,
                hresourcedependent: *const _HRESOURCE,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(CanResourceBeDependent(
            ::std::mem::transmute(hresource),
            ::std::mem::transmute(hresourcedependent),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn CancelClusterGroupOperation(
    hgroup: *const _HGROUP,
    dwcancelflags_reserved: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CancelClusterGroupOperation(
                hgroup: *const _HGROUP,
                dwcancelflags_reserved: u32,
            ) -> u32;
        }
        ::std::mem::transmute(CancelClusterGroupOperation(
            ::std::mem::transmute(hgroup),
            ::std::mem::transmute(dwcancelflags_reserved),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ChangeClusterResourceGroup(
    hresource: *const _HRESOURCE,
    hgroup: *const _HGROUP,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ChangeClusterResourceGroup(
                hresource: *const _HRESOURCE,
                hgroup: *const _HGROUP,
            ) -> u32;
        }
        ::std::mem::transmute(ChangeClusterResourceGroup(
            ::std::mem::transmute(hresource),
            ::std::mem::transmute(hgroup),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ChangeClusterResourceGroupEx(
    hresource: *const _HRESOURCE,
    hgroup: *const _HGROUP,
    flags: u64,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ChangeClusterResourceGroupEx(
                hresource: *const _HRESOURCE,
                hgroup: *const _HGROUP,
                flags: u64,
            ) -> u32;
        }
        ::std::mem::transmute(ChangeClusterResourceGroupEx(
            ::std::mem::transmute(hresource),
            ::std::mem::transmute(hgroup),
            ::std::mem::transmute(flags),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn CloseCluster(hcluster: *const _HCLUSTER) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CloseCluster(hcluster: *const _HCLUSTER) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(CloseCluster(::std::mem::transmute(hcluster)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn CloseClusterCryptProvider(hcluscryptprovider: *const _HCLUSCRYPTPROVIDER) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CloseClusterCryptProvider(hcluscryptprovider: *const _HCLUSCRYPTPROVIDER) -> u32;
        }
        ::std::mem::transmute(CloseClusterCryptProvider(::std::mem::transmute(
            hcluscryptprovider,
        )))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn CloseClusterGroup(hgroup: *const _HGROUP) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CloseClusterGroup(hgroup: *const _HGROUP) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(CloseClusterGroup(::std::mem::transmute(hgroup)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn CloseClusterGroupSet(hgroupset: *const _HGROUPSET) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CloseClusterGroupSet(hgroupset: *const _HGROUPSET)
                -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(CloseClusterGroupSet(::std::mem::transmute(hgroupset)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn CloseClusterNetInterface(
    hnetinterface: *const _HNETINTERFACE,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CloseClusterNetInterface(
                hnetinterface: *const _HNETINTERFACE,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(CloseClusterNetInterface(::std::mem::transmute(
            hnetinterface,
        )))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn CloseClusterNetwork(hnetwork: *const _HNETWORK) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CloseClusterNetwork(hnetwork: *const _HNETWORK) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(CloseClusterNetwork(::std::mem::transmute(hnetwork)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn CloseClusterNode(hnode: *const _HNODE) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CloseClusterNode(hnode: *const _HNODE) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(CloseClusterNode(::std::mem::transmute(hnode)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn CloseClusterNotifyPort(hchange: *const _HCHANGE) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CloseClusterNotifyPort(hchange: *const _HCHANGE) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(CloseClusterNotifyPort(::std::mem::transmute(hchange)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn CloseClusterResource(hresource: *const _HRESOURCE) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CloseClusterResource(hresource: *const _HRESOURCE)
                -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(CloseClusterResource(::std::mem::transmute(hresource)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusAddClusterHealthFault(
    hcluster: *const _HCLUSTER,
    failure: *const CLUSTER_HEALTH_FAULT,
    param2: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusAddClusterHealthFault(
                hcluster: *const _HCLUSTER,
                failure: *const CLUSTER_HEALTH_FAULT,
                param2: u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusAddClusterHealthFault(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(failure),
            ::std::mem::transmute(param2),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const ClusApplication: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161317,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusCryptoKeys: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161387,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusDisk: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161379,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusDisks: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161381,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusGetClusterHealthFaults(
    hcluster: *const _HCLUSTER,
    objects: *mut CLUSTER_HEALTH_FAULT_ARRAY,
    flags: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusGetClusterHealthFaults(
                hcluster: *const _HCLUSTER,
                objects: *mut CLUSTER_HEALTH_FAULT_ARRAY,
                flags: u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusGetClusterHealthFaults(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(objects),
            ::std::mem::transmute(flags),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const ClusNetInterface: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161325,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusNetInterfaces: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161327,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusNetwork: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161329,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusNetworkNetInterfaces: ::windows::runtime::GUID =
    ::windows::runtime::GUID::from_values(
        4075161333,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
pub const ClusNetworks: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161331,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusNode: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161335,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusNodeNetInterfaces: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161339,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusNodes: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161337,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusPartition: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161375,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusPartitionEx: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    1406475558,
    46363,
    19065,
    [178, 195, 80, 72, 217, 58, 152, 252],
);
pub const ClusPartitions: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161377,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusProperties: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161343,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusProperty: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161341,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusPropertyValue: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161369,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusPropertyValueData: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161373,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusPropertyValues: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161371,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusRefObject: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161345,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusRegistryKeys: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161385,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusRemoveClusterHealthFault<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    id: Param1,
    flags: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusRemoveClusterHealthFault(
                hcluster: *const _HCLUSTER,
                id: super::super::Foundation::PWSTR,
                flags: u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusRemoveClusterHealthFault(
            ::std::mem::transmute(hcluster),
            id.into_param().abi(),
            ::std::mem::transmute(flags),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const ClusResDependencies: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161347,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusResDependents: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161389,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusResGroup: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161349,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusResGroupPreferredOwnerNodes: ::windows::runtime::GUID =
    ::windows::runtime::GUID::from_values(
        4075161319,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
pub const ClusResGroupResources: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161321,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusResGroups: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161351,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusResPossibleOwnerNodes: ::windows::runtime::GUID =
    ::windows::runtime::GUID::from_values(
        4075161357,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
pub const ClusResType: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161359,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusResTypePossibleOwnerNodes: ::windows::runtime::GUID =
    ::windows::runtime::GUID::from_values(
        4075161367,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
pub const ClusResTypeResources: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161363,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusResTypes: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161361,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusResource: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161353,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusResources: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161355,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusScsiAddress: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161383,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
pub const ClusVersion: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161365,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusWorkerCheckTerminate(
    lpworker: *mut CLUS_WORKER,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusWorkerCheckTerminate(
                lpworker: *mut CLUS_WORKER,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(ClusWorkerCheckTerminate(::std::mem::transmute(lpworker)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusWorkerCreate(
    lpworker: *mut CLUS_WORKER,
    lpstartaddress: ::std::option::Option<PWORKER_START_ROUTINE>,
    lpparameter: *mut ::std::ffi::c_void,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusWorkerCreate(
                lpworker: *mut CLUS_WORKER,
                lpstartaddress: ::windows::runtime::RawPtr,
                lpparameter: *mut ::std::ffi::c_void,
            ) -> u32;
        }
        ::std::mem::transmute(ClusWorkerCreate(
            ::std::mem::transmute(lpworker),
            ::std::mem::transmute(lpstartaddress),
            ::std::mem::transmute(lpparameter),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusWorkerTerminate(lpworker: *const CLUS_WORKER) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusWorkerTerminate(lpworker: *const CLUS_WORKER);
        }
        ::std::mem::transmute(ClusWorkerTerminate(::std::mem::transmute(lpworker)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusWorkerTerminateEx<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    clusworker: *mut CLUS_WORKER,
    timeoutinmilliseconds: u32,
    waitonly: Param2,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusWorkerTerminateEx(
                clusworker: *mut CLUS_WORKER,
                timeoutinmilliseconds: u32,
                waitonly: super::super::Foundation::BOOL,
            ) -> u32;
        }
        ::std::mem::transmute(ClusWorkerTerminateEx(
            ::std::mem::transmute(clusworker),
            ::std::mem::transmute(timeoutinmilliseconds),
            waitonly.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusWorkersTerminate<
    'a,
    Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    clusworkers: *mut *mut CLUS_WORKER,
    clusworkerscount: usize,
    timeoutinmilliseconds: u32,
    waitonly: Param3,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusWorkersTerminate(
                clusworkers: *mut *mut CLUS_WORKER,
                clusworkerscount: usize,
                timeoutinmilliseconds: u32,
                waitonly: super::super::Foundation::BOOL,
            ) -> u32;
        }
        ::std::mem::transmute(ClusWorkersTerminate(
            ::std::mem::transmute(clusworkers),
            ::std::mem::transmute(clusworkerscount),
            ::std::mem::transmute(timeoutinmilliseconds),
            waitonly.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const Cluster: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161315,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterAddGroupToAffinityRule<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    rulename: Param1,
    hgroup: *const _HGROUP,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterAddGroupToAffinityRule(
                hcluster: *const _HCLUSTER,
                rulename: super::super::Foundation::PWSTR,
                hgroup: *const _HGROUP,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterAddGroupToAffinityRule(
            ::std::mem::transmute(hcluster),
            rulename.into_param().abi(),
            ::std::mem::transmute(hgroup),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterAddGroupToGroupSet(
    hgroupset: *const _HGROUPSET,
    hgroup: *const _HGROUP,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterAddGroupToGroupSet(
                hgroupset: *const _HGROUPSET,
                hgroup: *const _HGROUP,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterAddGroupToGroupSet(
            ::std::mem::transmute(hgroupset),
            ::std::mem::transmute(hgroup),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterAddGroupToGroupSetWithDomains(
    hgroupset: *const _HGROUPSET,
    hgroup: *const _HGROUP,
    faultdomain: u32,
    updatedomain: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterAddGroupToGroupSetWithDomains(
                hgroupset: *const _HGROUPSET,
                hgroup: *const _HGROUP,
                faultdomain: u32,
                updatedomain: u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterAddGroupToGroupSetWithDomains(
            ::std::mem::transmute(hgroupset),
            ::std::mem::transmute(hgroup),
            ::std::mem::transmute(faultdomain),
            ::std::mem::transmute(updatedomain),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterAffinityRuleControl<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    affinityrulename: Param1,
    hhostnode: *const _HNODE,
    dwcontrolcode: u32,
    lpinbuffer: *const ::std::ffi::c_void,
    cbinbuffersize: u32,
    lpoutbuffer: *mut ::std::ffi::c_void,
    cboutbuffersize: u32,
    lpbytesreturned: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterAffinityRuleControl(
                hcluster: *const _HCLUSTER,
                affinityrulename: super::super::Foundation::PWSTR,
                hhostnode: *const _HNODE,
                dwcontrolcode: u32,
                lpinbuffer: *const ::std::ffi::c_void,
                cbinbuffersize: u32,
                lpoutbuffer: *mut ::std::ffi::c_void,
                cboutbuffersize: u32,
                lpbytesreturned: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterAffinityRuleControl(
            ::std::mem::transmute(hcluster),
            affinityrulename.into_param().abi(),
            ::std::mem::transmute(hhostnode),
            ::std::mem::transmute(dwcontrolcode),
            ::std::mem::transmute(lpinbuffer),
            ::std::mem::transmute(cbinbuffersize),
            ::std::mem::transmute(lpoutbuffer),
            ::std::mem::transmute(cboutbuffersize),
            ::std::mem::transmute(lpbytesreturned),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterClearBackupStateForSharedVolume<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    lpszvolumepathname: Param0,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterClearBackupStateForSharedVolume(
                lpszvolumepathname: super::super::Foundation::PWSTR,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterClearBackupStateForSharedVolume(
            lpszvolumepathname.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterCloseEnum(henum: *const _HCLUSENUM) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterCloseEnum(henum: *const _HCLUSENUM) -> u32;
        }
        ::std::mem::transmute(ClusterCloseEnum(::std::mem::transmute(henum)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterCloseEnumEx(hclusterenum: *const _HCLUSENUMEX) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterCloseEnumEx(hclusterenum: *const _HCLUSENUMEX) -> u32;
        }
        ::std::mem::transmute(ClusterCloseEnumEx(::std::mem::transmute(hclusterenum)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterControl(
    hcluster: *const _HCLUSTER,
    hhostnode: *const _HNODE,
    dwcontrolcode: u32,
    lpinbuffer: *const ::std::ffi::c_void,
    ninbuffersize: u32,
    lpoutbuffer: *mut ::std::ffi::c_void,
    noutbuffersize: u32,
    lpbytesreturned: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterControl(
                hcluster: *const _HCLUSTER,
                hhostnode: *const _HNODE,
                dwcontrolcode: u32,
                lpinbuffer: *const ::std::ffi::c_void,
                ninbuffersize: u32,
                lpoutbuffer: *mut ::std::ffi::c_void,
                noutbuffersize: u32,
                lpbytesreturned: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterControl(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(hhostnode),
            ::std::mem::transmute(dwcontrolcode),
            ::std::mem::transmute(lpinbuffer),
            ::std::mem::transmute(ninbuffersize),
            ::std::mem::transmute(lpoutbuffer),
            ::std::mem::transmute(noutbuffersize),
            ::std::mem::transmute(lpbytesreturned),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterCreateAffinityRule<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    rulename: Param1,
    ruletype: CLUS_AFFINITY_RULE_TYPE,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterCreateAffinityRule(
                hcluster: *const _HCLUSTER,
                rulename: super::super::Foundation::PWSTR,
                ruletype: CLUS_AFFINITY_RULE_TYPE,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterCreateAffinityRule(
            ::std::mem::transmute(hcluster),
            rulename.into_param().abi(),
            ::std::mem::transmute(ruletype),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterDecrypt(
    hcluscryptprovider: *const _HCLUSCRYPTPROVIDER,
    pcryptinput: *const u8,
    cbcryptinput: u32,
    ppcryptoutput: *mut *mut u8,
    pcbcryptoutput: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterDecrypt(
                hcluscryptprovider: *const _HCLUSCRYPTPROVIDER,
                pcryptinput: *const u8,
                cbcryptinput: u32,
                ppcryptoutput: *mut *mut u8,
                pcbcryptoutput: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterDecrypt(
            ::std::mem::transmute(hcluscryptprovider),
            ::std::mem::transmute(pcryptinput),
            ::std::mem::transmute(cbcryptinput),
            ::std::mem::transmute(ppcryptoutput),
            ::std::mem::transmute(pcbcryptoutput),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterEncrypt(
    hcluscryptprovider: *const _HCLUSCRYPTPROVIDER,
    pdata: *const u8,
    cbdata: u32,
    ppdata: *mut *mut u8,
    pcbdata: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterEncrypt(
                hcluscryptprovider: *const _HCLUSCRYPTPROVIDER,
                pdata: *const u8,
                cbdata: u32,
                ppdata: *mut *mut u8,
                pcbdata: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterEncrypt(
            ::std::mem::transmute(hcluscryptprovider),
            ::std::mem::transmute(pdata),
            ::std::mem::transmute(cbdata),
            ::std::mem::transmute(ppdata),
            ::std::mem::transmute(pcbdata),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterEnum(
    henum: *const _HCLUSENUM,
    dwindex: u32,
    lpdwtype: *mut u32,
    lpszname: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterEnum(
                henum: *const _HCLUSENUM,
                dwindex: u32,
                lpdwtype: *mut u32,
                lpszname: super::super::Foundation::PWSTR,
                lpcchname: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterEnum(
            ::std::mem::transmute(henum),
            ::std::mem::transmute(dwindex),
            ::std::mem::transmute(lpdwtype),
            ::std::mem::transmute(lpszname),
            ::std::mem::transmute(lpcchname),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterEnumEx(
    hclusterenum: *const _HCLUSENUMEX,
    dwindex: u32,
    pitem: *mut CLUSTER_ENUM_ITEM,
    cbitem: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterEnumEx(
                hclusterenum: *const _HCLUSENUMEX,
                dwindex: u32,
                pitem: *mut CLUSTER_ENUM_ITEM,
                cbitem: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterEnumEx(
            ::std::mem::transmute(hclusterenum),
            ::std::mem::transmute(dwindex),
            ::std::mem::transmute(pitem),
            ::std::mem::transmute(cbitem),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterGetEnumCount(henum: *const _HCLUSENUM) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterGetEnumCount(henum: *const _HCLUSENUM) -> u32;
        }
        ::std::mem::transmute(ClusterGetEnumCount(::std::mem::transmute(henum)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterGetEnumCountEx(hclusterenum: *const _HCLUSENUMEX) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterGetEnumCountEx(hclusterenum: *const _HCLUSENUMEX) -> u32;
        }
        ::std::mem::transmute(ClusterGetEnumCountEx(::std::mem::transmute(hclusterenum)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterGetVolumeNameForVolumeMountPoint<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    lpszvolumemountpoint: Param0,
    lpszvolumename: super::super::Foundation::PWSTR,
    cchbufferlength: u32,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterGetVolumeNameForVolumeMountPoint(
                lpszvolumemountpoint: super::super::Foundation::PWSTR,
                lpszvolumename: super::super::Foundation::PWSTR,
                cchbufferlength: u32,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(ClusterGetVolumeNameForVolumeMountPoint(
            lpszvolumemountpoint.into_param().abi(),
            ::std::mem::transmute(lpszvolumename),
            ::std::mem::transmute(cchbufferlength),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterGetVolumePathName<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    lpszfilename: Param0,
    lpszvolumepathname: super::super::Foundation::PWSTR,
    cchbufferlength: u32,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterGetVolumePathName(
                lpszfilename: super::super::Foundation::PWSTR,
                lpszvolumepathname: super::super::Foundation::PWSTR,
                cchbufferlength: u32,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(ClusterGetVolumePathName(
            lpszfilename.into_param().abi(),
            ::std::mem::transmute(lpszvolumepathname),
            ::std::mem::transmute(cchbufferlength),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterGroupCloseEnum(hgroupenum: *const _HGROUPENUM) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterGroupCloseEnum(hgroupenum: *const _HGROUPENUM) -> u32;
        }
        ::std::mem::transmute(ClusterGroupCloseEnum(::std::mem::transmute(hgroupenum)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterGroupCloseEnumEx(hgroupenumex: *const _HGROUPENUMEX) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterGroupCloseEnumEx(hgroupenumex: *const _HGROUPENUMEX) -> u32;
        }
        ::std::mem::transmute(ClusterGroupCloseEnumEx(::std::mem::transmute(hgroupenumex)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterGroupControl(
    hgroup: *const _HGROUP,
    hhostnode: *const _HNODE,
    dwcontrolcode: u32,
    lpinbuffer: *const ::std::ffi::c_void,
    ninbuffersize: u32,
    lpoutbuffer: *mut ::std::ffi::c_void,
    noutbuffersize: u32,
    lpbytesreturned: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterGroupControl(
                hgroup: *const _HGROUP,
                hhostnode: *const _HNODE,
                dwcontrolcode: u32,
                lpinbuffer: *const ::std::ffi::c_void,
                ninbuffersize: u32,
                lpoutbuffer: *mut ::std::ffi::c_void,
                noutbuffersize: u32,
                lpbytesreturned: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterGroupControl(
            ::std::mem::transmute(hgroup),
            ::std::mem::transmute(hhostnode),
            ::std::mem::transmute(dwcontrolcode),
            ::std::mem::transmute(lpinbuffer),
            ::std::mem::transmute(ninbuffersize),
            ::std::mem::transmute(lpoutbuffer),
            ::std::mem::transmute(noutbuffersize),
            ::std::mem::transmute(lpbytesreturned),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterGroupEnum(
    hgroupenum: *const _HGROUPENUM,
    dwindex: u32,
    lpdwtype: *mut u32,
    lpszresourcename: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterGroupEnum(
                hgroupenum: *const _HGROUPENUM,
                dwindex: u32,
                lpdwtype: *mut u32,
                lpszresourcename: super::super::Foundation::PWSTR,
                lpcchname: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterGroupEnum(
            ::std::mem::transmute(hgroupenum),
            ::std::mem::transmute(dwindex),
            ::std::mem::transmute(lpdwtype),
            ::std::mem::transmute(lpszresourcename),
            ::std::mem::transmute(lpcchname),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterGroupEnumEx(
    hgroupenumex: *const _HGROUPENUMEX,
    dwindex: u32,
    pitem: *mut CLUSTER_GROUP_ENUM_ITEM,
    cbitem: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterGroupEnumEx(
                hgroupenumex: *const _HGROUPENUMEX,
                dwindex: u32,
                pitem: *mut CLUSTER_GROUP_ENUM_ITEM,
                cbitem: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterGroupEnumEx(
            ::std::mem::transmute(hgroupenumex),
            ::std::mem::transmute(dwindex),
            ::std::mem::transmute(pitem),
            ::std::mem::transmute(cbitem),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterGroupGetEnumCount(hgroupenum: *const _HGROUPENUM) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterGroupGetEnumCount(hgroupenum: *const _HGROUPENUM) -> u32;
        }
        ::std::mem::transmute(ClusterGroupGetEnumCount(::std::mem::transmute(hgroupenum)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterGroupGetEnumCountEx(hgroupenumex: *const _HGROUPENUMEX) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterGroupGetEnumCountEx(hgroupenumex: *const _HGROUPENUMEX) -> u32;
        }
        ::std::mem::transmute(ClusterGroupGetEnumCountEx(::std::mem::transmute(
            hgroupenumex,
        )))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterGroupOpenEnum(hgroup: *const _HGROUP, dwtype: u32) -> *mut _HGROUPENUM {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterGroupOpenEnum(hgroup: *const _HGROUP, dwtype: u32) -> *mut _HGROUPENUM;
        }
        ::std::mem::transmute(ClusterGroupOpenEnum(
            ::std::mem::transmute(hgroup),
            ::std::mem::transmute(dwtype),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterGroupOpenEnumEx<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpszproperties: Param1,
    cbproperties: u32,
    lpszroproperties: Param3,
    cbroproperties: u32,
    dwflags: u32,
) -> *mut _HGROUPENUMEX {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterGroupOpenEnumEx(
                hcluster: *const _HCLUSTER,
                lpszproperties: super::super::Foundation::PWSTR,
                cbproperties: u32,
                lpszroproperties: super::super::Foundation::PWSTR,
                cbroproperties: u32,
                dwflags: u32,
            ) -> *mut _HGROUPENUMEX;
        }
        ::std::mem::transmute(ClusterGroupOpenEnumEx(
            ::std::mem::transmute(hcluster),
            lpszproperties.into_param().abi(),
            ::std::mem::transmute(cbproperties),
            lpszroproperties.into_param().abi(),
            ::std::mem::transmute(cbroproperties),
            ::std::mem::transmute(dwflags),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterGroupSetCloseEnum(hgroupsetenum: *mut _HGROUPSETENUM) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterGroupSetCloseEnum(hgroupsetenum: *mut _HGROUPSETENUM) -> u32;
        }
        ::std::mem::transmute(ClusterGroupSetCloseEnum(::std::mem::transmute(
            hgroupsetenum,
        )))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterGroupSetControl(
    hgroupset: *const _HGROUPSET,
    hhostnode: *const _HNODE,
    dwcontrolcode: u32,
    lpinbuffer: *const ::std::ffi::c_void,
    cbinbuffersize: u32,
    lpoutbuffer: *mut ::std::ffi::c_void,
    cboutbuffersize: u32,
    lpbytesreturned: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterGroupSetControl(
                hgroupset: *const _HGROUPSET,
                hhostnode: *const _HNODE,
                dwcontrolcode: u32,
                lpinbuffer: *const ::std::ffi::c_void,
                cbinbuffersize: u32,
                lpoutbuffer: *mut ::std::ffi::c_void,
                cboutbuffersize: u32,
                lpbytesreturned: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterGroupSetControl(
            ::std::mem::transmute(hgroupset),
            ::std::mem::transmute(hhostnode),
            ::std::mem::transmute(dwcontrolcode),
            ::std::mem::transmute(lpinbuffer),
            ::std::mem::transmute(cbinbuffersize),
            ::std::mem::transmute(lpoutbuffer),
            ::std::mem::transmute(cboutbuffersize),
            ::std::mem::transmute(lpbytesreturned),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterGroupSetEnum(
    hgroupsetenum: *const _HGROUPSETENUM,
    dwindex: u32,
    lpszname: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterGroupSetEnum(
                hgroupsetenum: *const _HGROUPSETENUM,
                dwindex: u32,
                lpszname: super::super::Foundation::PWSTR,
                lpcchname: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterGroupSetEnum(
            ::std::mem::transmute(hgroupsetenum),
            ::std::mem::transmute(dwindex),
            ::std::mem::transmute(lpszname),
            ::std::mem::transmute(lpcchname),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterGroupSetGetEnumCount(hgroupsetenum: *mut _HGROUPSETENUM) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterGroupSetGetEnumCount(hgroupsetenum: *mut _HGROUPSETENUM) -> u32;
        }
        ::std::mem::transmute(ClusterGroupSetGetEnumCount(::std::mem::transmute(
            hgroupsetenum,
        )))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterGroupSetOpenEnum(hcluster: *mut _HCLUSTER) -> *mut _HGROUPSETENUM {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterGroupSetOpenEnum(hcluster: *mut _HCLUSTER) -> *mut _HGROUPSETENUM;
        }
        ::std::mem::transmute(ClusterGroupSetOpenEnum(::std::mem::transmute(hcluster)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterIsPathOnSharedVolume<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    lpszpathname: Param0,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterIsPathOnSharedVolume(
                lpszpathname: super::super::Foundation::PWSTR,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(ClusterIsPathOnSharedVolume(lpszpathname.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const ClusterNames: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161323,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
#[inline]
pub unsafe fn ClusterNetInterfaceCloseEnum(hnetinterfaceenum: *const _HNETINTERFACEENUM) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterNetInterfaceCloseEnum(hnetinterfaceenum: *const _HNETINTERFACEENUM) -> u32;
        }
        ::std::mem::transmute(ClusterNetInterfaceCloseEnum(::std::mem::transmute(
            hnetinterfaceenum,
        )))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterNetInterfaceControl(
    hnetinterface: *const _HNETINTERFACE,
    hhostnode: *const _HNODE,
    dwcontrolcode: u32,
    lpinbuffer: *const ::std::ffi::c_void,
    ninbuffersize: u32,
    lpoutbuffer: *mut ::std::ffi::c_void,
    noutbuffersize: u32,
    lpbytesreturned: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterNetInterfaceControl(
                hnetinterface: *const _HNETINTERFACE,
                hhostnode: *const _HNODE,
                dwcontrolcode: u32,
                lpinbuffer: *const ::std::ffi::c_void,
                ninbuffersize: u32,
                lpoutbuffer: *mut ::std::ffi::c_void,
                noutbuffersize: u32,
                lpbytesreturned: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterNetInterfaceControl(
            ::std::mem::transmute(hnetinterface),
            ::std::mem::transmute(hhostnode),
            ::std::mem::transmute(dwcontrolcode),
            ::std::mem::transmute(lpinbuffer),
            ::std::mem::transmute(ninbuffersize),
            ::std::mem::transmute(lpoutbuffer),
            ::std::mem::transmute(noutbuffersize),
            ::std::mem::transmute(lpbytesreturned),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterNetInterfaceEnum(
    hnetinterfaceenum: *const _HNETINTERFACEENUM,
    dwindex: u32,
    lpszname: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterNetInterfaceEnum(
                hnetinterfaceenum: *const _HNETINTERFACEENUM,
                dwindex: u32,
                lpszname: super::super::Foundation::PWSTR,
                lpcchname: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterNetInterfaceEnum(
            ::std::mem::transmute(hnetinterfaceenum),
            ::std::mem::transmute(dwindex),
            ::std::mem::transmute(lpszname),
            ::std::mem::transmute(lpcchname),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterNetInterfaceOpenEnum<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpsznodename: Param1,
    lpsznetworkname: Param2,
) -> *mut _HNETINTERFACEENUM {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterNetInterfaceOpenEnum(
                hcluster: *const _HCLUSTER,
                lpsznodename: super::super::Foundation::PWSTR,
                lpsznetworkname: super::super::Foundation::PWSTR,
            ) -> *mut _HNETINTERFACEENUM;
        }
        ::std::mem::transmute(ClusterNetInterfaceOpenEnum(
            ::std::mem::transmute(hcluster),
            lpsznodename.into_param().abi(),
            lpsznetworkname.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterNetworkCloseEnum(hnetworkenum: *const _HNETWORKENUM) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterNetworkCloseEnum(hnetworkenum: *const _HNETWORKENUM) -> u32;
        }
        ::std::mem::transmute(ClusterNetworkCloseEnum(::std::mem::transmute(hnetworkenum)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterNetworkControl(
    hnetwork: *const _HNETWORK,
    hhostnode: *const _HNODE,
    dwcontrolcode: u32,
    lpinbuffer: *const ::std::ffi::c_void,
    ninbuffersize: u32,
    lpoutbuffer: *mut ::std::ffi::c_void,
    noutbuffersize: u32,
    lpbytesreturned: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterNetworkControl(
                hnetwork: *const _HNETWORK,
                hhostnode: *const _HNODE,
                dwcontrolcode: u32,
                lpinbuffer: *const ::std::ffi::c_void,
                ninbuffersize: u32,
                lpoutbuffer: *mut ::std::ffi::c_void,
                noutbuffersize: u32,
                lpbytesreturned: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterNetworkControl(
            ::std::mem::transmute(hnetwork),
            ::std::mem::transmute(hhostnode),
            ::std::mem::transmute(dwcontrolcode),
            ::std::mem::transmute(lpinbuffer),
            ::std::mem::transmute(ninbuffersize),
            ::std::mem::transmute(lpoutbuffer),
            ::std::mem::transmute(noutbuffersize),
            ::std::mem::transmute(lpbytesreturned),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterNetworkEnum(
    hnetworkenum: *const _HNETWORKENUM,
    dwindex: u32,
    lpdwtype: *mut u32,
    lpszname: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterNetworkEnum(
                hnetworkenum: *const _HNETWORKENUM,
                dwindex: u32,
                lpdwtype: *mut u32,
                lpszname: super::super::Foundation::PWSTR,
                lpcchname: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterNetworkEnum(
            ::std::mem::transmute(hnetworkenum),
            ::std::mem::transmute(dwindex),
            ::std::mem::transmute(lpdwtype),
            ::std::mem::transmute(lpszname),
            ::std::mem::transmute(lpcchname),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterNetworkGetEnumCount(hnetworkenum: *const _HNETWORKENUM) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterNetworkGetEnumCount(hnetworkenum: *const _HNETWORKENUM) -> u32;
        }
        ::std::mem::transmute(ClusterNetworkGetEnumCount(::std::mem::transmute(
            hnetworkenum,
        )))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterNetworkOpenEnum(
    hnetwork: *const _HNETWORK,
    dwtype: u32,
) -> *mut _HNETWORKENUM {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterNetworkOpenEnum(
                hnetwork: *const _HNETWORK,
                dwtype: u32,
            ) -> *mut _HNETWORKENUM;
        }
        ::std::mem::transmute(ClusterNetworkOpenEnum(
            ::std::mem::transmute(hnetwork),
            ::std::mem::transmute(dwtype),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterNodeCloseEnum(hnodeenum: *const _HNODEENUM) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterNodeCloseEnum(hnodeenum: *const _HNODEENUM) -> u32;
        }
        ::std::mem::transmute(ClusterNodeCloseEnum(::std::mem::transmute(hnodeenum)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterNodeCloseEnumEx(hnodeenum: *const _HNODEENUMEX) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterNodeCloseEnumEx(hnodeenum: *const _HNODEENUMEX) -> u32;
        }
        ::std::mem::transmute(ClusterNodeCloseEnumEx(::std::mem::transmute(hnodeenum)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterNodeControl(
    hnode: *const _HNODE,
    hhostnode: *const _HNODE,
    dwcontrolcode: u32,
    lpinbuffer: *const ::std::ffi::c_void,
    ninbuffersize: u32,
    lpoutbuffer: *mut ::std::ffi::c_void,
    noutbuffersize: u32,
    lpbytesreturned: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterNodeControl(
                hnode: *const _HNODE,
                hhostnode: *const _HNODE,
                dwcontrolcode: u32,
                lpinbuffer: *const ::std::ffi::c_void,
                ninbuffersize: u32,
                lpoutbuffer: *mut ::std::ffi::c_void,
                noutbuffersize: u32,
                lpbytesreturned: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterNodeControl(
            ::std::mem::transmute(hnode),
            ::std::mem::transmute(hhostnode),
            ::std::mem::transmute(dwcontrolcode),
            ::std::mem::transmute(lpinbuffer),
            ::std::mem::transmute(ninbuffersize),
            ::std::mem::transmute(lpoutbuffer),
            ::std::mem::transmute(noutbuffersize),
            ::std::mem::transmute(lpbytesreturned),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterNodeEnum(
    hnodeenum: *const _HNODEENUM,
    dwindex: u32,
    lpdwtype: *mut u32,
    lpszname: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterNodeEnum(
                hnodeenum: *const _HNODEENUM,
                dwindex: u32,
                lpdwtype: *mut u32,
                lpszname: super::super::Foundation::PWSTR,
                lpcchname: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterNodeEnum(
            ::std::mem::transmute(hnodeenum),
            ::std::mem::transmute(dwindex),
            ::std::mem::transmute(lpdwtype),
            ::std::mem::transmute(lpszname),
            ::std::mem::transmute(lpcchname),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterNodeEnumEx(
    hnodeenum: *const _HNODEENUMEX,
    dwindex: u32,
    pitem: *mut CLUSTER_ENUM_ITEM,
    cbitem: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterNodeEnumEx(
                hnodeenum: *const _HNODEENUMEX,
                dwindex: u32,
                pitem: *mut CLUSTER_ENUM_ITEM,
                cbitem: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterNodeEnumEx(
            ::std::mem::transmute(hnodeenum),
            ::std::mem::transmute(dwindex),
            ::std::mem::transmute(pitem),
            ::std::mem::transmute(cbitem),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterNodeGetEnumCount(hnodeenum: *const _HNODEENUM) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterNodeGetEnumCount(hnodeenum: *const _HNODEENUM) -> u32;
        }
        ::std::mem::transmute(ClusterNodeGetEnumCount(::std::mem::transmute(hnodeenum)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterNodeGetEnumCountEx(hnodeenum: *const _HNODEENUMEX) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterNodeGetEnumCountEx(hnodeenum: *const _HNODEENUMEX) -> u32;
        }
        ::std::mem::transmute(ClusterNodeGetEnumCountEx(::std::mem::transmute(hnodeenum)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterNodeOpenEnum(hnode: *const _HNODE, dwtype: u32) -> *mut _HNODEENUM {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterNodeOpenEnum(hnode: *const _HNODE, dwtype: u32) -> *mut _HNODEENUM;
        }
        ::std::mem::transmute(ClusterNodeOpenEnum(
            ::std::mem::transmute(hnode),
            ::std::mem::transmute(dwtype),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterNodeOpenEnumEx(
    hnode: *const _HNODE,
    dwtype: u32,
    poptions: *const ::std::ffi::c_void,
) -> *mut _HNODEENUMEX {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterNodeOpenEnumEx(
                hnode: *const _HNODE,
                dwtype: u32,
                poptions: *const ::std::ffi::c_void,
            ) -> *mut _HNODEENUMEX;
        }
        ::std::mem::transmute(ClusterNodeOpenEnumEx(
            ::std::mem::transmute(hnode),
            ::std::mem::transmute(dwtype),
            ::std::mem::transmute(poptions),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterNodeReplacement<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpsznodenamecurrent: Param1,
    lpsznodenamenew: Param2,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterNodeReplacement(
                hcluster: *const _HCLUSTER,
                lpsznodenamecurrent: super::super::Foundation::PWSTR,
                lpsznodenamenew: super::super::Foundation::PWSTR,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterNodeReplacement(
            ::std::mem::transmute(hcluster),
            lpsznodenamecurrent.into_param().abi(),
            lpsznodenamenew.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterOpenEnum(hcluster: *const _HCLUSTER, dwtype: u32) -> *mut _HCLUSENUM {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterOpenEnum(hcluster: *const _HCLUSTER, dwtype: u32) -> *mut _HCLUSENUM;
        }
        ::std::mem::transmute(ClusterOpenEnum(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(dwtype),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterOpenEnumEx(
    hcluster: *const _HCLUSTER,
    dwtype: u32,
    poptions: *const ::std::ffi::c_void,
) -> *mut _HCLUSENUMEX {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterOpenEnumEx(
                hcluster: *const _HCLUSTER,
                dwtype: u32,
                poptions: *const ::std::ffi::c_void,
            ) -> *mut _HCLUSENUMEX;
        }
        ::std::mem::transmute(ClusterOpenEnumEx(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(dwtype),
            ::std::mem::transmute(poptions),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterPrepareSharedVolumeForBackup<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    lpszfilename: Param0,
    lpszvolumepathname: super::super::Foundation::PWSTR,
    lpcchvolumepathname: *mut u32,
    lpszvolumename: super::super::Foundation::PWSTR,
    lpcchvolumename: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterPrepareSharedVolumeForBackup(
                lpszfilename: super::super::Foundation::PWSTR,
                lpszvolumepathname: super::super::Foundation::PWSTR,
                lpcchvolumepathname: *mut u32,
                lpszvolumename: super::super::Foundation::PWSTR,
                lpcchvolumename: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterPrepareSharedVolumeForBackup(
            lpszfilename.into_param().abi(),
            ::std::mem::transmute(lpszvolumepathname),
            ::std::mem::transmute(lpcchvolumepathname),
            ::std::mem::transmute(lpszvolumename),
            ::std::mem::transmute(lpcchvolumename),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterRegBatchAddCommand<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hregbatch: *const _HREGBATCH,
    dwcommand: CLUSTER_REG_COMMAND,
    wzname: Param2,
    dwoptions: u32,
    lpdata: *const ::std::ffi::c_void,
    cbdata: u32,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegBatchAddCommand(
                hregbatch: *const _HREGBATCH,
                dwcommand: CLUSTER_REG_COMMAND,
                wzname: super::super::Foundation::PWSTR,
                dwoptions: u32,
                lpdata: *const ::std::ffi::c_void,
                cbdata: u32,
            ) -> i32;
        }
        ::std::mem::transmute(ClusterRegBatchAddCommand(
            ::std::mem::transmute(hregbatch),
            ::std::mem::transmute(dwcommand),
            wzname.into_param().abi(),
            ::std::mem::transmute(dwoptions),
            ::std::mem::transmute(lpdata),
            ::std::mem::transmute(cbdata),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterRegBatchCloseNotification(
    hbatchnotification: *const _HREGBATCHNOTIFICATION,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegBatchCloseNotification(
                hbatchnotification: *const _HREGBATCHNOTIFICATION,
            ) -> i32;
        }
        ::std::mem::transmute(ClusterRegBatchCloseNotification(::std::mem::transmute(
            hbatchnotification,
        )))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterRegBatchReadCommand(
    hbatchnotification: *const _HREGBATCHNOTIFICATION,
    pbatchcommand: *mut CLUSTER_BATCH_COMMAND,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegBatchReadCommand(
                hbatchnotification: *const _HREGBATCHNOTIFICATION,
                pbatchcommand: *mut CLUSTER_BATCH_COMMAND,
            ) -> i32;
        }
        ::std::mem::transmute(ClusterRegBatchReadCommand(
            ::std::mem::transmute(hbatchnotification),
            ::std::mem::transmute(pbatchcommand),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterRegCloseBatch<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    hregbatch: *const _HREGBATCH,
    bcommit: Param1,
    failedcommandnumber: *mut i32,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegCloseBatch(
                hregbatch: *const _HREGBATCH,
                bcommit: super::super::Foundation::BOOL,
                failedcommandnumber: *mut i32,
            ) -> i32;
        }
        ::std::mem::transmute(ClusterRegCloseBatch(
            ::std::mem::transmute(hregbatch),
            bcommit.into_param().abi(),
            ::std::mem::transmute(failedcommandnumber),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterRegCloseBatchEx(
    hregbatch: *const _HREGBATCH,
    flags: u32,
    failedcommandnumber: *mut i32,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegCloseBatchEx(
                hregbatch: *const _HREGBATCH,
                flags: u32,
                failedcommandnumber: *mut i32,
            ) -> i32;
        }
        ::std::mem::transmute(ClusterRegCloseBatchEx(
            ::std::mem::transmute(hregbatch),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(failedcommandnumber),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterRegCloseBatchNotifyPort(hbatchnotifyport: *const _HREGBATCHPORT) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegCloseBatchNotifyPort(hbatchnotifyport: *const _HREGBATCHPORT) -> i32;
        }
        ::std::mem::transmute(ClusterRegCloseBatchNotifyPort(::std::mem::transmute(
            hbatchnotifyport,
        )))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_System_Registry")]
#[inline]
pub unsafe fn ClusterRegCloseKey<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
>(
    hkey: Param0,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegCloseKey(hkey: super::super::System::Registry::HKEY) -> i32;
        }
        ::std::mem::transmute(ClusterRegCloseKey(hkey.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterRegCloseReadBatch(
    hregreadbatch: *const _HREGREADBATCH,
    phregreadbatchreply: *mut *mut _HREGREADBATCHREPLY,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegCloseReadBatch(
                hregreadbatch: *const _HREGREADBATCH,
                phregreadbatchreply: *mut *mut _HREGREADBATCHREPLY,
            ) -> i32;
        }
        ::std::mem::transmute(ClusterRegCloseReadBatch(
            ::std::mem::transmute(hregreadbatch),
            ::std::mem::transmute(phregreadbatchreply),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterRegCloseReadBatchEx(
    hregreadbatch: *const _HREGREADBATCH,
    flags: u32,
    phregreadbatchreply: *mut *mut _HREGREADBATCHREPLY,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegCloseReadBatchEx(
                hregreadbatch: *const _HREGREADBATCH,
                flags: u32,
                phregreadbatchreply: *mut *mut _HREGREADBATCHREPLY,
            ) -> i32;
        }
        ::std::mem::transmute(ClusterRegCloseReadBatchEx(
            ::std::mem::transmute(hregreadbatch),
            ::std::mem::transmute(flags),
            ::std::mem::transmute(phregreadbatchreply),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterRegCloseReadBatchReply(hregreadbatchreply: *const _HREGREADBATCHREPLY) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegCloseReadBatchReply(hregreadbatchreply: *const _HREGREADBATCHREPLY)
                -> i32;
        }
        ::std::mem::transmute(ClusterRegCloseReadBatchReply(::std::mem::transmute(
            hregreadbatchreply,
        )))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_System_Registry")]
#[inline]
pub unsafe fn ClusterRegCreateBatch<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
>(
    hkey: Param0,
    phregbatch: *mut *mut _HREGBATCH,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegCreateBatch(
                hkey: super::super::System::Registry::HKEY,
                phregbatch: *mut *mut _HREGBATCH,
            ) -> i32;
        }
        ::std::mem::transmute(ClusterRegCreateBatch(
            hkey.into_param().abi(),
            ::std::mem::transmute(phregbatch),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_System_Registry")]
#[inline]
pub unsafe fn ClusterRegCreateBatchNotifyPort<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
>(
    hkey: Param0,
    phbatchnotifyport: *mut *mut _HREGBATCHPORT,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegCreateBatchNotifyPort(
                hkey: super::super::System::Registry::HKEY,
                phbatchnotifyport: *mut *mut _HREGBATCHPORT,
            ) -> i32;
        }
        ::std::mem::transmute(ClusterRegCreateBatchNotifyPort(
            hkey.into_param().abi(),
            ::std::mem::transmute(phbatchnotifyport),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Security",
    feature = "Win32_System_Registry"
))]
#[inline]
pub unsafe fn ClusterRegCreateKey<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hkey: Param0,
    lpszsubkey: Param1,
    dwoptions: u32,
    samdesired: u32,
    lpsecurityattributes: *const super::super::Security::SECURITY_ATTRIBUTES,
    phkresult: *mut super::super::System::Registry::HKEY,
    lpdwdisposition: *mut u32,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegCreateKey(
                hkey: super::super::System::Registry::HKEY,
                lpszsubkey: super::super::Foundation::PWSTR,
                dwoptions: u32,
                samdesired: u32,
                lpsecurityattributes: *const super::super::Security::SECURITY_ATTRIBUTES,
                phkresult: *mut super::super::System::Registry::HKEY,
                lpdwdisposition: *mut u32,
            ) -> i32;
        }
        ::std::mem::transmute(ClusterRegCreateKey(
            hkey.into_param().abi(),
            lpszsubkey.into_param().abi(),
            ::std::mem::transmute(dwoptions),
            ::std::mem::transmute(samdesired),
            ::std::mem::transmute(lpsecurityattributes),
            ::std::mem::transmute(phkresult),
            ::std::mem::transmute(lpdwdisposition),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_System_Registry")]
#[inline]
pub unsafe fn ClusterRegCreateReadBatch<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
>(
    hkey: Param0,
    phregreadbatch: *mut *mut _HREGREADBATCH,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegCreateReadBatch(
                hkey: super::super::System::Registry::HKEY,
                phregreadbatch: *mut *mut _HREGREADBATCH,
            ) -> i32;
        }
        ::std::mem::transmute(ClusterRegCreateReadBatch(
            hkey.into_param().abi(),
            ::std::mem::transmute(phregreadbatch),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ClusterRegDeleteKey<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hkey: Param0,
    lpszsubkey: Param1,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegDeleteKey(
                hkey: super::super::System::Registry::HKEY,
                lpszsubkey: super::super::Foundation::PWSTR,
            ) -> i32;
        }
        ::std::mem::transmute(ClusterRegDeleteKey(
            hkey.into_param().abi(),
            lpszsubkey.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ClusterRegDeleteValue<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hkey: Param0,
    lpszvaluename: Param1,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegDeleteValue(
                hkey: super::super::System::Registry::HKEY,
                lpszvaluename: super::super::Foundation::PWSTR,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterRegDeleteValue(
            hkey.into_param().abi(),
            lpszvaluename.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ClusterRegEnumKey<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
>(
    hkey: Param0,
    dwindex: u32,
    lpszname: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
    lpftlastwritetime: *mut super::super::Foundation::FILETIME,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegEnumKey(
                hkey: super::super::System::Registry::HKEY,
                dwindex: u32,
                lpszname: super::super::Foundation::PWSTR,
                lpcchname: *mut u32,
                lpftlastwritetime: *mut super::super::Foundation::FILETIME,
            ) -> i32;
        }
        ::std::mem::transmute(ClusterRegEnumKey(
            hkey.into_param().abi(),
            ::std::mem::transmute(dwindex),
            ::std::mem::transmute(lpszname),
            ::std::mem::transmute(lpcchname),
            ::std::mem::transmute(lpftlastwritetime),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ClusterRegEnumValue<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
>(
    hkey: Param0,
    dwindex: u32,
    lpszvaluename: super::super::Foundation::PWSTR,
    lpcchvaluename: *mut u32,
    lpdwtype: *mut u32,
    lpdata: *mut u8,
    lpcbdata: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegEnumValue(
                hkey: super::super::System::Registry::HKEY,
                dwindex: u32,
                lpszvaluename: super::super::Foundation::PWSTR,
                lpcchvaluename: *mut u32,
                lpdwtype: *mut u32,
                lpdata: *mut u8,
                lpcbdata: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterRegEnumValue(
            hkey.into_param().abi(),
            ::std::mem::transmute(dwindex),
            ::std::mem::transmute(lpszvaluename),
            ::std::mem::transmute(lpcchvaluename),
            ::std::mem::transmute(lpdwtype),
            ::std::mem::transmute(lpdata),
            ::std::mem::transmute(lpcbdata),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterRegGetBatchNotification(
    hbatchnotify: *const _HREGBATCHPORT,
    phbatchnotification: *mut *mut _HREGBATCHNOTIFICATION,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegGetBatchNotification(
                hbatchnotify: *const _HREGBATCHPORT,
                phbatchnotification: *mut *mut _HREGBATCHNOTIFICATION,
            ) -> i32;
        }
        ::std::mem::transmute(ClusterRegGetBatchNotification(
            ::std::mem::transmute(hbatchnotify),
            ::std::mem::transmute(phbatchnotification),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Security",
    feature = "Win32_System_Registry"
))]
#[inline]
pub unsafe fn ClusterRegGetKeySecurity<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
>(
    hkey: Param0,
    requestedinformation: u32,
    psecuritydescriptor: *mut super::super::Security::SECURITY_DESCRIPTOR,
    lpcbsecuritydescriptor: *mut u32,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegGetKeySecurity(
                hkey: super::super::System::Registry::HKEY,
                requestedinformation: u32,
                psecuritydescriptor: *mut super::super::Security::SECURITY_DESCRIPTOR,
                lpcbsecuritydescriptor: *mut u32,
            ) -> i32;
        }
        ::std::mem::transmute(ClusterRegGetKeySecurity(
            hkey.into_param().abi(),
            ::std::mem::transmute(requestedinformation),
            ::std::mem::transmute(psecuritydescriptor),
            ::std::mem::transmute(lpcbsecuritydescriptor),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ClusterRegOpenKey<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hkey: Param0,
    lpszsubkey: Param1,
    samdesired: u32,
    phkresult: *mut super::super::System::Registry::HKEY,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegOpenKey(
                hkey: super::super::System::Registry::HKEY,
                lpszsubkey: super::super::Foundation::PWSTR,
                samdesired: u32,
                phkresult: *mut super::super::System::Registry::HKEY,
            ) -> i32;
        }
        ::std::mem::transmute(ClusterRegOpenKey(
            hkey.into_param().abi(),
            lpszsubkey.into_param().abi(),
            ::std::mem::transmute(samdesired),
            ::std::mem::transmute(phkresult),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ClusterRegQueryInfoKey<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
>(
    hkey: Param0,
    lpcsubkeys: *const u32,
    lpcchmaxsubkeylen: *const u32,
    lpcvalues: *const u32,
    lpcchmaxvaluenamelen: *const u32,
    lpcbmaxvaluelen: *const u32,
    lpcbsecuritydescriptor: *const u32,
    lpftlastwritetime: *const super::super::Foundation::FILETIME,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegQueryInfoKey(
                hkey: super::super::System::Registry::HKEY,
                lpcsubkeys: *const u32,
                lpcchmaxsubkeylen: *const u32,
                lpcvalues: *const u32,
                lpcchmaxvaluenamelen: *const u32,
                lpcbmaxvaluelen: *const u32,
                lpcbsecuritydescriptor: *const u32,
                lpftlastwritetime: *const super::super::Foundation::FILETIME,
            ) -> i32;
        }
        ::std::mem::transmute(ClusterRegQueryInfoKey(
            hkey.into_param().abi(),
            ::std::mem::transmute(lpcsubkeys),
            ::std::mem::transmute(lpcchmaxsubkeylen),
            ::std::mem::transmute(lpcvalues),
            ::std::mem::transmute(lpcchmaxvaluenamelen),
            ::std::mem::transmute(lpcbmaxvaluelen),
            ::std::mem::transmute(lpcbsecuritydescriptor),
            ::std::mem::transmute(lpftlastwritetime),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ClusterRegQueryValue<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hkey: Param0,
    lpszvaluename: Param1,
    lpdwvaluetype: *mut u32,
    lpdata: *mut u8,
    lpcbdata: *mut u32,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegQueryValue(
                hkey: super::super::System::Registry::HKEY,
                lpszvaluename: super::super::Foundation::PWSTR,
                lpdwvaluetype: *mut u32,
                lpdata: *mut u8,
                lpcbdata: *mut u32,
            ) -> i32;
        }
        ::std::mem::transmute(ClusterRegQueryValue(
            hkey.into_param().abi(),
            lpszvaluename.into_param().abi(),
            ::std::mem::transmute(lpdwvaluetype),
            ::std::mem::transmute(lpdata),
            ::std::mem::transmute(lpcbdata),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterRegReadBatchAddCommand<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hregreadbatch: *const _HREGREADBATCH,
    wzsubkeyname: Param1,
    wzvaluename: Param2,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegReadBatchAddCommand(
                hregreadbatch: *const _HREGREADBATCH,
                wzsubkeyname: super::super::Foundation::PWSTR,
                wzvaluename: super::super::Foundation::PWSTR,
            ) -> i32;
        }
        ::std::mem::transmute(ClusterRegReadBatchAddCommand(
            ::std::mem::transmute(hregreadbatch),
            wzsubkeyname.into_param().abi(),
            wzvaluename.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterRegReadBatchReplyNextCommand(
    hregreadbatchreply: *const _HREGREADBATCHREPLY,
    pbatchcommand: *mut CLUSTER_READ_BATCH_COMMAND,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegReadBatchReplyNextCommand(
                hregreadbatchreply: *const _HREGREADBATCHREPLY,
                pbatchcommand: *mut CLUSTER_READ_BATCH_COMMAND,
            ) -> i32;
        }
        ::std::mem::transmute(ClusterRegReadBatchReplyNextCommand(
            ::std::mem::transmute(hregreadbatchreply),
            ::std::mem::transmute(pbatchcommand),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Security",
    feature = "Win32_System_Registry"
))]
#[inline]
pub unsafe fn ClusterRegSetKeySecurity<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
>(
    hkey: Param0,
    securityinformation: u32,
    psecuritydescriptor: *const super::super::Security::SECURITY_DESCRIPTOR,
) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegSetKeySecurity(
                hkey: super::super::System::Registry::HKEY,
                securityinformation: u32,
                psecuritydescriptor: *const super::super::Security::SECURITY_DESCRIPTOR,
            ) -> i32;
        }
        ::std::mem::transmute(ClusterRegSetKeySecurity(
            hkey.into_param().abi(),
            ::std::mem::transmute(securityinformation),
            ::std::mem::transmute(psecuritydescriptor),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ClusterRegSetValue<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hkey: Param0,
    lpszvaluename: Param1,
    dwtype: u32,
    lpdata: *const u8,
    cbdata: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegSetValue(
                hkey: super::super::System::Registry::HKEY,
                lpszvaluename: super::super::Foundation::PWSTR,
                dwtype: u32,
                lpdata: *const u8,
                cbdata: u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterRegSetValue(
            hkey.into_param().abi(),
            lpszvaluename.into_param().abi(),
            ::std::mem::transmute(dwtype),
            ::std::mem::transmute(lpdata),
            ::std::mem::transmute(cbdata),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterRegSyncDatabase(hcluster: *const _HCLUSTER, flags: u32) -> i32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRegSyncDatabase(hcluster: *const _HCLUSTER, flags: u32) -> i32;
        }
        ::std::mem::transmute(ClusterRegSyncDatabase(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(flags),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterRemoveAffinityRule<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    rulename: Param1,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRemoveAffinityRule(
                hcluster: *const _HCLUSTER,
                rulename: super::super::Foundation::PWSTR,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterRemoveAffinityRule(
            ::std::mem::transmute(hcluster),
            rulename.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterRemoveGroupFromAffinityRule<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    rulename: Param1,
    hgroup: *const _HGROUP,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRemoveGroupFromAffinityRule(
                hcluster: *const _HCLUSTER,
                rulename: super::super::Foundation::PWSTR,
                hgroup: *const _HGROUP,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterRemoveGroupFromAffinityRule(
            ::std::mem::transmute(hcluster),
            rulename.into_param().abi(),
            ::std::mem::transmute(hgroup),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterRemoveGroupFromGroupSet(hgroup: *const _HGROUP) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterRemoveGroupFromGroupSet(hgroup: *const _HGROUP) -> u32;
        }
        ::std::mem::transmute(ClusterRemoveGroupFromGroupSet(::std::mem::transmute(
            hgroup,
        )))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterResourceCloseEnum(hresenum: *const _HRESENUM) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterResourceCloseEnum(hresenum: *const _HRESENUM) -> u32;
        }
        ::std::mem::transmute(ClusterResourceCloseEnum(::std::mem::transmute(hresenum)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterResourceCloseEnumEx(hresourceenumex: *const _HRESENUMEX) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterResourceCloseEnumEx(hresourceenumex: *const _HRESENUMEX) -> u32;
        }
        ::std::mem::transmute(ClusterResourceCloseEnumEx(::std::mem::transmute(
            hresourceenumex,
        )))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterResourceControl(
    hresource: *const _HRESOURCE,
    hhostnode: *const _HNODE,
    dwcontrolcode: u32,
    lpinbuffer: *const ::std::ffi::c_void,
    cbinbuffersize: u32,
    lpoutbuffer: *mut ::std::ffi::c_void,
    cboutbuffersize: u32,
    lpbytesreturned: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterResourceControl(
                hresource: *const _HRESOURCE,
                hhostnode: *const _HNODE,
                dwcontrolcode: u32,
                lpinbuffer: *const ::std::ffi::c_void,
                cbinbuffersize: u32,
                lpoutbuffer: *mut ::std::ffi::c_void,
                cboutbuffersize: u32,
                lpbytesreturned: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterResourceControl(
            ::std::mem::transmute(hresource),
            ::std::mem::transmute(hhostnode),
            ::std::mem::transmute(dwcontrolcode),
            ::std::mem::transmute(lpinbuffer),
            ::std::mem::transmute(cbinbuffersize),
            ::std::mem::transmute(lpoutbuffer),
            ::std::mem::transmute(cboutbuffersize),
            ::std::mem::transmute(lpbytesreturned),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterResourceControlAsUser(
    hresource: *const _HRESOURCE,
    hhostnode: *const _HNODE,
    dwcontrolcode: u32,
    lpinbuffer: *const ::std::ffi::c_void,
    cbinbuffersize: u32,
    lpoutbuffer: *mut ::std::ffi::c_void,
    cboutbuffersize: u32,
    lpbytesreturned: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterResourceControlAsUser(
                hresource: *const _HRESOURCE,
                hhostnode: *const _HNODE,
                dwcontrolcode: u32,
                lpinbuffer: *const ::std::ffi::c_void,
                cbinbuffersize: u32,
                lpoutbuffer: *mut ::std::ffi::c_void,
                cboutbuffersize: u32,
                lpbytesreturned: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterResourceControlAsUser(
            ::std::mem::transmute(hresource),
            ::std::mem::transmute(hhostnode),
            ::std::mem::transmute(dwcontrolcode),
            ::std::mem::transmute(lpinbuffer),
            ::std::mem::transmute(cbinbuffersize),
            ::std::mem::transmute(lpoutbuffer),
            ::std::mem::transmute(cboutbuffersize),
            ::std::mem::transmute(lpbytesreturned),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterResourceEnum(
    hresenum: *const _HRESENUM,
    dwindex: u32,
    lpdwtype: *mut u32,
    lpszname: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterResourceEnum(
                hresenum: *const _HRESENUM,
                dwindex: u32,
                lpdwtype: *mut u32,
                lpszname: super::super::Foundation::PWSTR,
                lpcchname: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterResourceEnum(
            ::std::mem::transmute(hresenum),
            ::std::mem::transmute(dwindex),
            ::std::mem::transmute(lpdwtype),
            ::std::mem::transmute(lpszname),
            ::std::mem::transmute(lpcchname),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterResourceEnumEx(
    hresourceenumex: *const _HRESENUMEX,
    dwindex: u32,
    pitem: *mut CLUSTER_RESOURCE_ENUM_ITEM,
    cbitem: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterResourceEnumEx(
                hresourceenumex: *const _HRESENUMEX,
                dwindex: u32,
                pitem: *mut CLUSTER_RESOURCE_ENUM_ITEM,
                cbitem: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterResourceEnumEx(
            ::std::mem::transmute(hresourceenumex),
            ::std::mem::transmute(dwindex),
            ::std::mem::transmute(pitem),
            ::std::mem::transmute(cbitem),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterResourceGetEnumCount(hresenum: *const _HRESENUM) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterResourceGetEnumCount(hresenum: *const _HRESENUM) -> u32;
        }
        ::std::mem::transmute(ClusterResourceGetEnumCount(::std::mem::transmute(hresenum)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterResourceGetEnumCountEx(hresourceenumex: *const _HRESENUMEX) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterResourceGetEnumCountEx(hresourceenumex: *const _HRESENUMEX) -> u32;
        }
        ::std::mem::transmute(ClusterResourceGetEnumCountEx(::std::mem::transmute(
            hresourceenumex,
        )))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterResourceOpenEnum(hresource: *const _HRESOURCE, dwtype: u32) -> *mut _HRESENUM {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterResourceOpenEnum(hresource: *const _HRESOURCE, dwtype: u32)
                -> *mut _HRESENUM;
        }
        ::std::mem::transmute(ClusterResourceOpenEnum(
            ::std::mem::transmute(hresource),
            ::std::mem::transmute(dwtype),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterResourceOpenEnumEx<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpszproperties: Param1,
    cbproperties: u32,
    lpszroproperties: Param3,
    cbroproperties: u32,
    dwflags: u32,
) -> *mut _HRESENUMEX {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterResourceOpenEnumEx(
                hcluster: *const _HCLUSTER,
                lpszproperties: super::super::Foundation::PWSTR,
                cbproperties: u32,
                lpszroproperties: super::super::Foundation::PWSTR,
                cbroproperties: u32,
                dwflags: u32,
            ) -> *mut _HRESENUMEX;
        }
        ::std::mem::transmute(ClusterResourceOpenEnumEx(
            ::std::mem::transmute(hcluster),
            lpszproperties.into_param().abi(),
            ::std::mem::transmute(cbproperties),
            lpszroproperties.into_param().abi(),
            ::std::mem::transmute(cbroproperties),
            ::std::mem::transmute(dwflags),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterResourceTypeCloseEnum(hrestypeenum: *const _HRESTYPEENUM) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterResourceTypeCloseEnum(hrestypeenum: *const _HRESTYPEENUM) -> u32;
        }
        ::std::mem::transmute(ClusterResourceTypeCloseEnum(::std::mem::transmute(
            hrestypeenum,
        )))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterResourceTypeControl<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpszresourcetypename: Param1,
    hhostnode: *const _HNODE,
    dwcontrolcode: u32,
    lpinbuffer: *const ::std::ffi::c_void,
    ninbuffersize: u32,
    lpoutbuffer: *mut ::std::ffi::c_void,
    noutbuffersize: u32,
    lpbytesreturned: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterResourceTypeControl(
                hcluster: *const _HCLUSTER,
                lpszresourcetypename: super::super::Foundation::PWSTR,
                hhostnode: *const _HNODE,
                dwcontrolcode: u32,
                lpinbuffer: *const ::std::ffi::c_void,
                ninbuffersize: u32,
                lpoutbuffer: *mut ::std::ffi::c_void,
                noutbuffersize: u32,
                lpbytesreturned: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterResourceTypeControl(
            ::std::mem::transmute(hcluster),
            lpszresourcetypename.into_param().abi(),
            ::std::mem::transmute(hhostnode),
            ::std::mem::transmute(dwcontrolcode),
            ::std::mem::transmute(lpinbuffer),
            ::std::mem::transmute(ninbuffersize),
            ::std::mem::transmute(lpoutbuffer),
            ::std::mem::transmute(noutbuffersize),
            ::std::mem::transmute(lpbytesreturned),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterResourceTypeControlAsUser<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpszresourcetypename: Param1,
    hhostnode: *const _HNODE,
    dwcontrolcode: u32,
    lpinbuffer: *const ::std::ffi::c_void,
    ninbuffersize: u32,
    lpoutbuffer: *mut ::std::ffi::c_void,
    noutbuffersize: u32,
    lpbytesreturned: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterResourceTypeControlAsUser(
                hcluster: *const _HCLUSTER,
                lpszresourcetypename: super::super::Foundation::PWSTR,
                hhostnode: *const _HNODE,
                dwcontrolcode: u32,
                lpinbuffer: *const ::std::ffi::c_void,
                ninbuffersize: u32,
                lpoutbuffer: *mut ::std::ffi::c_void,
                noutbuffersize: u32,
                lpbytesreturned: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterResourceTypeControlAsUser(
            ::std::mem::transmute(hcluster),
            lpszresourcetypename.into_param().abi(),
            ::std::mem::transmute(hhostnode),
            ::std::mem::transmute(dwcontrolcode),
            ::std::mem::transmute(lpinbuffer),
            ::std::mem::transmute(ninbuffersize),
            ::std::mem::transmute(lpoutbuffer),
            ::std::mem::transmute(noutbuffersize),
            ::std::mem::transmute(lpbytesreturned),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterResourceTypeEnum(
    hrestypeenum: *const _HRESTYPEENUM,
    dwindex: u32,
    lpdwtype: *mut u32,
    lpszname: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterResourceTypeEnum(
                hrestypeenum: *const _HRESTYPEENUM,
                dwindex: u32,
                lpdwtype: *mut u32,
                lpszname: super::super::Foundation::PWSTR,
                lpcchname: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterResourceTypeEnum(
            ::std::mem::transmute(hrestypeenum),
            ::std::mem::transmute(dwindex),
            ::std::mem::transmute(lpdwtype),
            ::std::mem::transmute(lpszname),
            ::std::mem::transmute(lpcchname),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ClusterResourceTypeGetEnumCount(hrestypeenum: *const _HRESTYPEENUM) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterResourceTypeGetEnumCount(hrestypeenum: *const _HRESTYPEENUM) -> u32;
        }
        ::std::mem::transmute(ClusterResourceTypeGetEnumCount(::std::mem::transmute(
            hrestypeenum,
        )))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterResourceTypeOpenEnum<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpszresourcetypename: Param1,
    dwtype: u32,
) -> *mut _HRESTYPEENUM {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterResourceTypeOpenEnum(
                hcluster: *const _HCLUSTER,
                lpszresourcetypename: super::super::Foundation::PWSTR,
                dwtype: u32,
            ) -> *mut _HRESTYPEENUM;
        }
        ::std::mem::transmute(ClusterResourceTypeOpenEnum(
            ::std::mem::transmute(hcluster),
            lpszresourcetypename.into_param().abi(),
            ::std::mem::transmute(dwtype),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterSetAccountAccess<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    szaccountsid: Param1,
    dwaccess: u32,
    dwcontroltype: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterSetAccountAccess(
                hcluster: *const _HCLUSTER,
                szaccountsid: super::super::Foundation::PWSTR,
                dwaccess: u32,
                dwcontroltype: u32,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterSetAccountAccess(
            ::std::mem::transmute(hcluster),
            szaccountsid.into_param().abi(),
            ::std::mem::transmute(dwaccess),
            ::std::mem::transmute(dwcontroltype),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterSharedVolumeSetSnapshotState<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::GUID>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    guidsnapshotset: Param0,
    lpszvolumename: Param1,
    state: CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterSharedVolumeSetSnapshotState(
                guidsnapshotset: ::windows::runtime::GUID,
                lpszvolumename: super::super::Foundation::PWSTR,
                state: CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterSharedVolumeSetSnapshotState(
            guidsnapshotset.into_param().abi(),
            lpszvolumename.into_param().abi(),
            ::std::mem::transmute(state),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ClusterUpgradeFunctionalLevel<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    hcluster: *const _HCLUSTER,
    perform: Param1,
    pfnprogresscallback: ::std::option::Option<PCLUSTER_UPGRADE_PROGRESS_CALLBACK>,
    pvcallbackarg: *const ::std::ffi::c_void,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ClusterUpgradeFunctionalLevel(
                hcluster: *const _HCLUSTER,
                perform: super::super::Foundation::BOOL,
                pfnprogresscallback: ::windows::runtime::RawPtr,
                pvcallbackarg: *const ::std::ffi::c_void,
            ) -> u32;
        }
        ::std::mem::transmute(ClusterUpgradeFunctionalLevel(
            ::std::mem::transmute(hcluster),
            perform.into_param().abi(),
            ::std::mem::transmute(pfnprogresscallback),
            ::std::mem::transmute(pvcallbackarg),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn CreateCluster(
    pconfig: *const CREATE_CLUSTER_CONFIG,
    pfnprogresscallback: ::std::option::Option<PCLUSTER_SETUP_PROGRESS_CALLBACK>,
    pvcallbackarg: *const ::std::ffi::c_void,
) -> *mut _HCLUSTER {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CreateCluster(
                pconfig: *const CREATE_CLUSTER_CONFIG,
                pfnprogresscallback: ::windows::runtime::RawPtr,
                pvcallbackarg: *const ::std::ffi::c_void,
            ) -> *mut _HCLUSTER;
        }
        ::std::mem::transmute(CreateCluster(
            ::std::mem::transmute(pconfig),
            ::std::mem::transmute(pfnprogresscallback),
            ::std::mem::transmute(pvcallbackarg),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn CreateClusterAvailabilitySet<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpavailabilitysetname: Param1,
    pavailabilitysetconfig: *const CLUSTER_AVAILABILITY_SET_CONFIG,
) -> *mut _HGROUPSET {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CreateClusterAvailabilitySet(
                hcluster: *const _HCLUSTER,
                lpavailabilitysetname: super::super::Foundation::PWSTR,
                pavailabilitysetconfig: *const CLUSTER_AVAILABILITY_SET_CONFIG,
            ) -> *mut _HGROUPSET;
        }
        ::std::mem::transmute(CreateClusterAvailabilitySet(
            ::std::mem::transmute(hcluster),
            lpavailabilitysetname.into_param().abi(),
            ::std::mem::transmute(pavailabilitysetconfig),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn CreateClusterGroup<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpszgroupname: Param1,
) -> *mut _HGROUP {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CreateClusterGroup(
                hcluster: *const _HCLUSTER,
                lpszgroupname: super::super::Foundation::PWSTR,
            ) -> *mut _HGROUP;
        }
        ::std::mem::transmute(CreateClusterGroup(
            ::std::mem::transmute(hcluster),
            lpszgroupname.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn CreateClusterGroupEx<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpszgroupname: Param1,
    pgroupinfo: *const CLUSTER_CREATE_GROUP_INFO,
) -> *mut _HGROUP {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CreateClusterGroupEx(
                hcluster: *const _HCLUSTER,
                lpszgroupname: super::super::Foundation::PWSTR,
                pgroupinfo: *const CLUSTER_CREATE_GROUP_INFO,
            ) -> *mut _HGROUP;
        }
        ::std::mem::transmute(CreateClusterGroupEx(
            ::std::mem::transmute(hcluster),
            lpszgroupname.into_param().abi(),
            ::std::mem::transmute(pgroupinfo),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn CreateClusterGroupSet<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    groupsetname: Param1,
) -> *mut _HGROUPSET {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CreateClusterGroupSet(
                hcluster: *const _HCLUSTER,
                groupsetname: super::super::Foundation::PWSTR,
            ) -> *mut _HGROUPSET;
        }
        ::std::mem::transmute(CreateClusterGroupSet(
            ::std::mem::transmute(hcluster),
            groupsetname.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn CreateClusterNameAccount(
    hcluster: *const _HCLUSTER,
    pconfig: *const CREATE_CLUSTER_NAME_ACCOUNT,
    pfnprogresscallback: ::std::option::Option<PCLUSTER_SETUP_PROGRESS_CALLBACK>,
    pvcallbackarg: *const ::std::ffi::c_void,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CreateClusterNameAccount(
                hcluster: *const _HCLUSTER,
                pconfig: *const CREATE_CLUSTER_NAME_ACCOUNT,
                pfnprogresscallback: ::windows::runtime::RawPtr,
                pvcallbackarg: *const ::std::ffi::c_void,
            ) -> u32;
        }
        ::std::mem::transmute(CreateClusterNameAccount(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(pconfig),
            ::std::mem::transmute(pfnprogresscallback),
            ::std::mem::transmute(pvcallbackarg),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn CreateClusterNotifyPort(
    hchange: *const _HCHANGE,
    hcluster: *const _HCLUSTER,
    dwfilter: u32,
    dwnotifykey: usize,
) -> *mut _HCHANGE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CreateClusterNotifyPort(
                hchange: *const _HCHANGE,
                hcluster: *const _HCLUSTER,
                dwfilter: u32,
                dwnotifykey: usize,
            ) -> *mut _HCHANGE;
        }
        ::std::mem::transmute(CreateClusterNotifyPort(
            ::std::mem::transmute(hchange),
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(dwfilter),
            ::std::mem::transmute(dwnotifykey),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn CreateClusterNotifyPortV2(
    hchange: *const _HCHANGE,
    hcluster: *const _HCLUSTER,
    filters: *const NOTIFY_FILTER_AND_TYPE,
    dwfiltercount: u32,
    dwnotifykey: usize,
) -> *mut _HCHANGE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CreateClusterNotifyPortV2(
                hchange: *const _HCHANGE,
                hcluster: *const _HCLUSTER,
                filters: *const NOTIFY_FILTER_AND_TYPE,
                dwfiltercount: u32,
                dwnotifykey: usize,
            ) -> *mut _HCHANGE;
        }
        ::std::mem::transmute(CreateClusterNotifyPortV2(
            ::std::mem::transmute(hchange),
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(filters),
            ::std::mem::transmute(dwfiltercount),
            ::std::mem::transmute(dwnotifykey),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn CreateClusterResource<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hgroup: *const _HGROUP,
    lpszresourcename: Param1,
    lpszresourcetype: Param2,
    dwflags: u32,
) -> *mut _HRESOURCE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CreateClusterResource(
                hgroup: *const _HGROUP,
                lpszresourcename: super::super::Foundation::PWSTR,
                lpszresourcetype: super::super::Foundation::PWSTR,
                dwflags: u32,
            ) -> *mut _HRESOURCE;
        }
        ::std::mem::transmute(CreateClusterResource(
            ::std::mem::transmute(hgroup),
            lpszresourcename.into_param().abi(),
            lpszresourcetype.into_param().abi(),
            ::std::mem::transmute(dwflags),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn CreateClusterResourceType<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpszresourcetypename: Param1,
    lpszdisplayname: Param2,
    lpszresourcetypedll: Param3,
    dwlooksalivepollinterval: u32,
    dwisalivepollinterval: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn CreateClusterResourceType(
                hcluster: *const _HCLUSTER,
                lpszresourcetypename: super::super::Foundation::PWSTR,
                lpszdisplayname: super::super::Foundation::PWSTR,
                lpszresourcetypedll: super::super::Foundation::PWSTR,
                dwlooksalivepollinterval: u32,
                dwisalivepollinterval: u32,
            ) -> u32;
        }
        ::std::mem::transmute(CreateClusterResourceType(
            ::std::mem::transmute(hcluster),
            lpszresourcetypename.into_param().abi(),
            lpszdisplayname.into_param().abi(),
            lpszresourcetypedll.into_param().abi(),
            ::std::mem::transmute(dwlooksalivepollinterval),
            ::std::mem::transmute(dwisalivepollinterval),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const DNS_LENGTH: u32 = 64u32;
#[inline]
pub unsafe fn DeleteClusterGroup(hgroup: *const _HGROUP) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DeleteClusterGroup(hgroup: *const _HGROUP) -> u32;
        }
        ::std::mem::transmute(DeleteClusterGroup(::std::mem::transmute(hgroup)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn DeleteClusterGroupSet(hgroupset: *const _HGROUPSET) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DeleteClusterGroupSet(hgroupset: *const _HGROUPSET) -> u32;
        }
        ::std::mem::transmute(DeleteClusterGroupSet(::std::mem::transmute(hgroupset)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn DeleteClusterResource(hresource: *const _HRESOURCE) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DeleteClusterResource(hresource: *const _HRESOURCE) -> u32;
        }
        ::std::mem::transmute(DeleteClusterResource(::std::mem::transmute(hresource)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn DeleteClusterResourceType<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpszresourcetypename: Param1,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DeleteClusterResourceType(
                hcluster: *const _HCLUSTER,
                lpszresourcetypename: super::super::Foundation::PWSTR,
            ) -> u32;
        }
        ::std::mem::transmute(DeleteClusterResourceType(
            ::std::mem::transmute(hcluster),
            lpszresourcetypename.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn DestroyCluster<
    'a,
    Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    hcluster: *const _HCLUSTER,
    pfnprogresscallback: ::std::option::Option<PCLUSTER_SETUP_PROGRESS_CALLBACK>,
    pvcallbackarg: *const ::std::ffi::c_void,
    fdeletevirtualcomputerobjects: Param3,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DestroyCluster(
                hcluster: *const _HCLUSTER,
                pfnprogresscallback: ::windows::runtime::RawPtr,
                pvcallbackarg: *const ::std::ffi::c_void,
                fdeletevirtualcomputerobjects: super::super::Foundation::BOOL,
            ) -> u32;
        }
        ::std::mem::transmute(DestroyCluster(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(pfnprogresscallback),
            ::std::mem::transmute(pvcallbackarg),
            fdeletevirtualcomputerobjects.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn DestroyClusterGroup(hgroup: *const _HGROUP) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DestroyClusterGroup(hgroup: *const _HGROUP) -> u32;
        }
        ::std::mem::transmute(DestroyClusterGroup(::std::mem::transmute(hgroup)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn DetermineCNOResTypeFromCluster(
    hcluster: *const _HCLUSTER,
    pcnorestype: *mut CLUSTER_MGMT_POINT_RESTYPE,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DetermineCNOResTypeFromCluster(
                hcluster: *const _HCLUSTER,
                pcnorestype: *mut CLUSTER_MGMT_POINT_RESTYPE,
            ) -> u32;
        }
        ::std::mem::transmute(DetermineCNOResTypeFromCluster(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(pcnorestype),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn DetermineCNOResTypeFromNodelist(
    cnodes: u32,
    ppsznodenames: *const super::super::Foundation::PWSTR,
    pcnorestype: *mut CLUSTER_MGMT_POINT_RESTYPE,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DetermineCNOResTypeFromNodelist(
                cnodes: u32,
                ppsznodenames: *const super::super::Foundation::PWSTR,
                pcnorestype: *mut CLUSTER_MGMT_POINT_RESTYPE,
            ) -> u32;
        }
        ::std::mem::transmute(DetermineCNOResTypeFromNodelist(
            ::std::mem::transmute(cnodes),
            ::std::mem::transmute(ppsznodenames),
            ::std::mem::transmute(pcnorestype),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn DetermineClusterCloudTypeFromCluster(
    hcluster: *const _HCLUSTER,
    pcloudtype: *mut CLUSTER_CLOUD_TYPE,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DetermineClusterCloudTypeFromCluster(
                hcluster: *const _HCLUSTER,
                pcloudtype: *mut CLUSTER_CLOUD_TYPE,
            ) -> u32;
        }
        ::std::mem::transmute(DetermineClusterCloudTypeFromCluster(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(pcloudtype),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn DetermineClusterCloudTypeFromNodelist(
    cnodes: u32,
    ppsznodenames: *const super::super::Foundation::PWSTR,
    pcloudtype: *mut CLUSTER_CLOUD_TYPE,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn DetermineClusterCloudTypeFromNodelist(
                cnodes: u32,
                ppsznodenames: *const super::super::Foundation::PWSTR,
                pcloudtype: *mut CLUSTER_CLOUD_TYPE,
            ) -> u32;
        }
        ::std::mem::transmute(DetermineClusterCloudTypeFromNodelist(
            ::std::mem::transmute(cnodes),
            ::std::mem::transmute(ppsznodenames),
            ::std::mem::transmute(pcloudtype),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const DomainNames: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
    4075161313,
    9777,
    4561,
    [137, 241, 0, 160, 201, 13, 6, 30],
);
#[inline]
pub unsafe fn EvictClusterNode(hnode: *const _HNODE) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn EvictClusterNode(hnode: *const _HNODE) -> u32;
        }
        ::std::mem::transmute(EvictClusterNode(::std::mem::transmute(hnode)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn EvictClusterNodeEx(
    hnode: *const _HNODE,
    dwtimeout: u32,
    phrcleanupstatus: *mut ::windows::runtime::HRESULT,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn EvictClusterNodeEx(
                hnode: *const _HNODE,
                dwtimeout: u32,
                phrcleanupstatus: *mut ::windows::runtime::HRESULT,
            ) -> u32;
        }
        ::std::mem::transmute(EvictClusterNodeEx(
            ::std::mem::transmute(hnode),
            ::std::mem::transmute(dwtimeout),
            ::std::mem::transmute(phrcleanupstatus),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct FAILURE_TYPE(pub i32);
pub const FAILURE_TYPE_GENERAL: FAILURE_TYPE = FAILURE_TYPE(0i32);
pub const FAILURE_TYPE_EMBEDDED: FAILURE_TYPE = FAILURE_TYPE(1i32);
pub const FAILURE_TYPE_NETWORK_LOSS: FAILURE_TYPE = FAILURE_TYPE(2i32);
impl ::std::convert::From<i32> for FAILURE_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for FAILURE_TYPE {
    type Abi = Self;
    type DefaultType = Self;
}
pub const FE_UPGRADE_VERSION: u32 = 4u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct FILESHARE_CHANGE {
    pub Change: FILESHARE_CHANGE_ENUM,
    pub ShareName: [u16; 84],
}
impl FILESHARE_CHANGE {}
impl ::std::default::Default for FILESHARE_CHANGE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for FILESHARE_CHANGE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("FILESHARE_CHANGE")
            .field("Change", &self.Change)
            .field("ShareName", &self.ShareName)
            .finish()
    }
}
impl ::std::cmp::PartialEq for FILESHARE_CHANGE {
    fn eq(&self, other: &Self) -> bool {
        self.Change == other.Change && self.ShareName == other.ShareName
    }
}
impl ::std::cmp::Eq for FILESHARE_CHANGE {}
unsafe impl ::windows::runtime::Abi for FILESHARE_CHANGE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct FILESHARE_CHANGE_ENUM(pub i32);
pub const FILESHARE_CHANGE_NONE: FILESHARE_CHANGE_ENUM = FILESHARE_CHANGE_ENUM(0i32);
pub const FILESHARE_CHANGE_ADD: FILESHARE_CHANGE_ENUM = FILESHARE_CHANGE_ENUM(1i32);
pub const FILESHARE_CHANGE_DEL: FILESHARE_CHANGE_ENUM = FILESHARE_CHANGE_ENUM(2i32);
pub const FILESHARE_CHANGE_MODIFY: FILESHARE_CHANGE_ENUM = FILESHARE_CHANGE_ENUM(3i32);
impl ::std::convert::From<i32> for FILESHARE_CHANGE_ENUM {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for FILESHARE_CHANGE_ENUM {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct FILESHARE_CHANGE_LIST {
    pub NumEntries: u32,
    pub ChangeEntry: [FILESHARE_CHANGE; 1],
}
impl FILESHARE_CHANGE_LIST {}
impl ::std::default::Default for FILESHARE_CHANGE_LIST {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for FILESHARE_CHANGE_LIST {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("FILESHARE_CHANGE_LIST")
            .field("NumEntries", &self.NumEntries)
            .field("ChangeEntry", &self.ChangeEntry)
            .finish()
    }
}
impl ::std::cmp::PartialEq for FILESHARE_CHANGE_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.NumEntries == other.NumEntries && self.ChangeEntry == other.ChangeEntry
    }
}
impl ::std::cmp::Eq for FILESHARE_CHANGE_LIST {}
unsafe impl ::windows::runtime::Abi for FILESHARE_CHANGE_LIST {
    type Abi = Self;
    type DefaultType = Self;
}
#[inline]
pub unsafe fn FailClusterResource(hresource: *const _HRESOURCE) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn FailClusterResource(hresource: *const _HRESOURCE) -> u32;
        }
        ::std::mem::transmute(FailClusterResource(::std::mem::transmute(hresource)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn FreeClusterCrypt(pcryptinfo: *const ::std::ffi::c_void) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn FreeClusterCrypt(pcryptinfo: *const ::std::ffi::c_void) -> u32;
        }
        ::std::mem::transmute(FreeClusterCrypt(::std::mem::transmute(pcryptinfo)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn FreeClusterHealthFault(clusterhealthfault: *mut CLUSTER_HEALTH_FAULT) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn FreeClusterHealthFault(clusterhealthfault: *mut CLUSTER_HEALTH_FAULT) -> u32;
        }
        ::std::mem::transmute(FreeClusterHealthFault(::std::mem::transmute(
            clusterhealthfault,
        )))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn FreeClusterHealthFaultArray(
    clusterhealthfaultarray: *mut CLUSTER_HEALTH_FAULT_ARRAY,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn FreeClusterHealthFaultArray(
                clusterhealthfaultarray: *mut CLUSTER_HEALTH_FAULT_ARRAY,
            ) -> u32;
        }
        ::std::mem::transmute(FreeClusterHealthFaultArray(::std::mem::transmute(
            clusterhealthfaultarray,
        )))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct GET_OPERATION_CONTEXT_PARAMS {
    pub Size: u32,
    pub Version: u32,
    pub Type: RESDLL_CONTEXT_OPERATION_TYPE,
    pub Priority: u32,
}
impl GET_OPERATION_CONTEXT_PARAMS {}
impl ::std::default::Default for GET_OPERATION_CONTEXT_PARAMS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for GET_OPERATION_CONTEXT_PARAMS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("GET_OPERATION_CONTEXT_PARAMS")
            .field("Size", &self.Size)
            .field("Version", &self.Version)
            .field("Type", &self.Type)
            .field("Priority", &self.Priority)
            .finish()
    }
}
impl ::std::cmp::PartialEq for GET_OPERATION_CONTEXT_PARAMS {
    fn eq(&self, other: &Self) -> bool {
        self.Size == other.Size
            && self.Version == other.Version
            && self.Type == other.Type
            && self.Priority == other.Priority
    }
}
impl ::std::cmp::Eq for GET_OPERATION_CONTEXT_PARAMS {}
unsafe impl ::windows::runtime::Abi for GET_OPERATION_CONTEXT_PARAMS {
    type Abi = Self;
    type DefaultType = Self;
}
pub const GROUPSET_READY_SETTING_APPLICATION_READY: u32 = 4u32;
pub const GROUPSET_READY_SETTING_DELAY: u32 = 1u32;
pub const GROUPSET_READY_SETTING_ONLINE: u32 = 2u32;
pub const GROUPSET_READY_SETTING_OS_HEARTBEAT: u32 = 3u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct GROUP_FAILURE_INFO {
    pub dwFailoverAttemptsRemaining: u32,
    pub dwFailoverPeriodRemaining: u32,
}
impl GROUP_FAILURE_INFO {}
impl ::std::default::Default for GROUP_FAILURE_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for GROUP_FAILURE_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("GROUP_FAILURE_INFO")
            .field(
                "dwFailoverAttemptsRemaining",
                &self.dwFailoverAttemptsRemaining,
            )
            .field("dwFailoverPeriodRemaining", &self.dwFailoverPeriodRemaining)
            .finish()
    }
}
impl ::std::cmp::PartialEq for GROUP_FAILURE_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.dwFailoverAttemptsRemaining == other.dwFailoverAttemptsRemaining
            && self.dwFailoverPeriodRemaining == other.dwFailoverPeriodRemaining
    }
}
impl ::std::cmp::Eq for GROUP_FAILURE_INFO {}
unsafe impl ::windows::runtime::Abi for GROUP_FAILURE_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct GROUP_FAILURE_INFO_BUFFER {
    pub dwVersion: u32,
    pub Info: GROUP_FAILURE_INFO,
}
impl GROUP_FAILURE_INFO_BUFFER {}
impl ::std::default::Default for GROUP_FAILURE_INFO_BUFFER {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for GROUP_FAILURE_INFO_BUFFER {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("GROUP_FAILURE_INFO_BUFFER")
            .field("dwVersion", &self.dwVersion)
            .field("Info", &self.Info)
            .finish()
    }
}
impl ::std::cmp::PartialEq for GROUP_FAILURE_INFO_BUFFER {
    fn eq(&self, other: &Self) -> bool {
        self.dwVersion == other.dwVersion && self.Info == other.Info
    }
}
impl ::std::cmp::Eq for GROUP_FAILURE_INFO_BUFFER {}
unsafe impl ::windows::runtime::Abi for GROUP_FAILURE_INFO_BUFFER {
    type Abi = Self;
    type DefaultType = Self;
}
pub const GROUP_FAILURE_INFO_VERSION_1: u32 = 1u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct GRP_PLACEMENT_OPTIONS(pub i32);
pub const GRP_PLACEMENT_OPTIONS_MIN_VALUE: GRP_PLACEMENT_OPTIONS = GRP_PLACEMENT_OPTIONS(0i32);
pub const GRP_PLACEMENT_OPTIONS_DEFAULT: GRP_PLACEMENT_OPTIONS = GRP_PLACEMENT_OPTIONS(0i32);
pub const GRP_PLACEMENT_OPTIONS_DISABLE_AUTOBALANCING: GRP_PLACEMENT_OPTIONS =
    GRP_PLACEMENT_OPTIONS(1i32);
pub const GRP_PLACEMENT_OPTIONS_ALL: GRP_PLACEMENT_OPTIONS = GRP_PLACEMENT_OPTIONS(1i32);
impl ::std::convert::From<i32> for GRP_PLACEMENT_OPTIONS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for GRP_PLACEMENT_OPTIONS {
    type Abi = Self;
    type DefaultType = Self;
}
pub const GUID_PRESENT: u32 = 1u32;
#[inline]
pub unsafe fn GetClusterFromGroup(hgroup: *const _HGROUP) -> *mut _HCLUSTER {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterFromGroup(hgroup: *const _HGROUP) -> *mut _HCLUSTER;
        }
        ::std::mem::transmute(GetClusterFromGroup(::std::mem::transmute(hgroup)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn GetClusterFromNetInterface(hnetinterface: *const _HNETINTERFACE) -> *mut _HCLUSTER {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterFromNetInterface(hnetinterface: *const _HNETINTERFACE) -> *mut _HCLUSTER;
        }
        ::std::mem::transmute(GetClusterFromNetInterface(::std::mem::transmute(
            hnetinterface,
        )))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn GetClusterFromNetwork(hnetwork: *const _HNETWORK) -> *mut _HCLUSTER {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterFromNetwork(hnetwork: *const _HNETWORK) -> *mut _HCLUSTER;
        }
        ::std::mem::transmute(GetClusterFromNetwork(::std::mem::transmute(hnetwork)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn GetClusterFromNode(hnode: *const _HNODE) -> *mut _HCLUSTER {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterFromNode(hnode: *const _HNODE) -> *mut _HCLUSTER;
        }
        ::std::mem::transmute(GetClusterFromNode(::std::mem::transmute(hnode)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn GetClusterFromResource(hresource: *const _HRESOURCE) -> *mut _HCLUSTER {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterFromResource(hresource: *const _HRESOURCE) -> *mut _HCLUSTER;
        }
        ::std::mem::transmute(GetClusterFromResource(::std::mem::transmute(hresource)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_System_Registry")]
#[inline]
pub unsafe fn GetClusterGroupKey(
    hgroup: *const _HGROUP,
    samdesired: u32,
) -> super::super::System::Registry::HKEY {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterGroupKey(
                hgroup: *const _HGROUP,
                samdesired: u32,
            ) -> super::super::System::Registry::HKEY;
        }
        ::std::mem::transmute(GetClusterGroupKey(
            ::std::mem::transmute(hgroup),
            ::std::mem::transmute(samdesired),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetClusterGroupState(
    hgroup: *const _HGROUP,
    lpsznodename: super::super::Foundation::PWSTR,
    lpcchnodename: *mut u32,
) -> CLUSTER_GROUP_STATE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterGroupState(
                hgroup: *const _HGROUP,
                lpsznodename: super::super::Foundation::PWSTR,
                lpcchnodename: *mut u32,
            ) -> CLUSTER_GROUP_STATE;
        }
        ::std::mem::transmute(GetClusterGroupState(
            ::std::mem::transmute(hgroup),
            ::std::mem::transmute(lpsznodename),
            ::std::mem::transmute(lpcchnodename),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetClusterInformation(
    hcluster: *const _HCLUSTER,
    lpszclustername: super::super::Foundation::PWSTR,
    lpcchclustername: *mut u32,
    lpclusterinfo: *mut CLUSTERVERSIONINFO,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterInformation(
                hcluster: *const _HCLUSTER,
                lpszclustername: super::super::Foundation::PWSTR,
                lpcchclustername: *mut u32,
                lpclusterinfo: *mut CLUSTERVERSIONINFO,
            ) -> u32;
        }
        ::std::mem::transmute(GetClusterInformation(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(lpszclustername),
            ::std::mem::transmute(lpcchclustername),
            ::std::mem::transmute(lpclusterinfo),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_System_Registry")]
#[inline]
pub unsafe fn GetClusterKey(
    hcluster: *const _HCLUSTER,
    samdesired: u32,
) -> super::super::System::Registry::HKEY {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterKey(
                hcluster: *const _HCLUSTER,
                samdesired: u32,
            ) -> super::super::System::Registry::HKEY;
        }
        ::std::mem::transmute(GetClusterKey(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(samdesired),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetClusterNetInterface<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpsznodename: Param1,
    lpsznetworkname: Param2,
    lpszinterfacename: super::super::Foundation::PWSTR,
    lpcchinterfacename: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterNetInterface(
                hcluster: *const _HCLUSTER,
                lpsznodename: super::super::Foundation::PWSTR,
                lpsznetworkname: super::super::Foundation::PWSTR,
                lpszinterfacename: super::super::Foundation::PWSTR,
                lpcchinterfacename: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(GetClusterNetInterface(
            ::std::mem::transmute(hcluster),
            lpsznodename.into_param().abi(),
            lpsznetworkname.into_param().abi(),
            ::std::mem::transmute(lpszinterfacename),
            ::std::mem::transmute(lpcchinterfacename),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_System_Registry")]
#[inline]
pub unsafe fn GetClusterNetInterfaceKey(
    hnetinterface: *const _HNETINTERFACE,
    samdesired: u32,
) -> super::super::System::Registry::HKEY {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterNetInterfaceKey(
                hnetinterface: *const _HNETINTERFACE,
                samdesired: u32,
            ) -> super::super::System::Registry::HKEY;
        }
        ::std::mem::transmute(GetClusterNetInterfaceKey(
            ::std::mem::transmute(hnetinterface),
            ::std::mem::transmute(samdesired),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn GetClusterNetInterfaceState(
    hnetinterface: *const _HNETINTERFACE,
) -> CLUSTER_NETINTERFACE_STATE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterNetInterfaceState(
                hnetinterface: *const _HNETINTERFACE,
            ) -> CLUSTER_NETINTERFACE_STATE;
        }
        ::std::mem::transmute(GetClusterNetInterfaceState(::std::mem::transmute(
            hnetinterface,
        )))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetClusterNetworkId(
    hnetwork: *const _HNETWORK,
    lpsznetworkid: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterNetworkId(
                hnetwork: *const _HNETWORK,
                lpsznetworkid: super::super::Foundation::PWSTR,
                lpcchname: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(GetClusterNetworkId(
            ::std::mem::transmute(hnetwork),
            ::std::mem::transmute(lpsznetworkid),
            ::std::mem::transmute(lpcchname),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_System_Registry")]
#[inline]
pub unsafe fn GetClusterNetworkKey(
    hnetwork: *const _HNETWORK,
    samdesired: u32,
) -> super::super::System::Registry::HKEY {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterNetworkKey(
                hnetwork: *const _HNETWORK,
                samdesired: u32,
            ) -> super::super::System::Registry::HKEY;
        }
        ::std::mem::transmute(GetClusterNetworkKey(
            ::std::mem::transmute(hnetwork),
            ::std::mem::transmute(samdesired),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn GetClusterNetworkState(hnetwork: *const _HNETWORK) -> CLUSTER_NETWORK_STATE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterNetworkState(hnetwork: *const _HNETWORK) -> CLUSTER_NETWORK_STATE;
        }
        ::std::mem::transmute(GetClusterNetworkState(::std::mem::transmute(hnetwork)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetClusterNodeId(
    hnode: *const _HNODE,
    lpsznodeid: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterNodeId(
                hnode: *const _HNODE,
                lpsznodeid: super::super::Foundation::PWSTR,
                lpcchname: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(GetClusterNodeId(
            ::std::mem::transmute(hnode),
            ::std::mem::transmute(lpsznodeid),
            ::std::mem::transmute(lpcchname),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_System_Registry")]
#[inline]
pub unsafe fn GetClusterNodeKey(
    hnode: *const _HNODE,
    samdesired: u32,
) -> super::super::System::Registry::HKEY {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterNodeKey(
                hnode: *const _HNODE,
                samdesired: u32,
            ) -> super::super::System::Registry::HKEY;
        }
        ::std::mem::transmute(GetClusterNodeKey(
            ::std::mem::transmute(hnode),
            ::std::mem::transmute(samdesired),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn GetClusterNodeState(hnode: *const _HNODE) -> CLUSTER_NODE_STATE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterNodeState(hnode: *const _HNODE) -> CLUSTER_NODE_STATE;
        }
        ::std::mem::transmute(GetClusterNodeState(::std::mem::transmute(hnode)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetClusterNotify(
    hchange: *const _HCHANGE,
    lpdwnotifykey: *mut usize,
    lpdwfiltertype: *mut u32,
    lpszname: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
    dwmilliseconds: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterNotify(
                hchange: *const _HCHANGE,
                lpdwnotifykey: *mut usize,
                lpdwfiltertype: *mut u32,
                lpszname: super::super::Foundation::PWSTR,
                lpcchname: *mut u32,
                dwmilliseconds: u32,
            ) -> u32;
        }
        ::std::mem::transmute(GetClusterNotify(
            ::std::mem::transmute(hchange),
            ::std::mem::transmute(lpdwnotifykey),
            ::std::mem::transmute(lpdwfiltertype),
            ::std::mem::transmute(lpszname),
            ::std::mem::transmute(lpcchname),
            ::std::mem::transmute(dwmilliseconds),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetClusterNotifyV2(
    hchange: *const _HCHANGE,
    lpdwnotifykey: *mut usize,
    pfilterandtype: *mut NOTIFY_FILTER_AND_TYPE,
    buffer: *mut u8,
    lpbbuffersize: *mut u32,
    lpszobjectid: super::super::Foundation::PWSTR,
    lpcchobjectid: *mut u32,
    lpszparentid: super::super::Foundation::PWSTR,
    lpcchparentid: *mut u32,
    lpszname: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
    lpsztype: super::super::Foundation::PWSTR,
    lpcchtype: *mut u32,
    dwmilliseconds: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterNotifyV2(
                hchange: *const _HCHANGE,
                lpdwnotifykey: *mut usize,
                pfilterandtype: *mut NOTIFY_FILTER_AND_TYPE,
                buffer: *mut u8,
                lpbbuffersize: *mut u32,
                lpszobjectid: super::super::Foundation::PWSTR,
                lpcchobjectid: *mut u32,
                lpszparentid: super::super::Foundation::PWSTR,
                lpcchparentid: *mut u32,
                lpszname: super::super::Foundation::PWSTR,
                lpcchname: *mut u32,
                lpsztype: super::super::Foundation::PWSTR,
                lpcchtype: *mut u32,
                dwmilliseconds: u32,
            ) -> u32;
        }
        ::std::mem::transmute(GetClusterNotifyV2(
            ::std::mem::transmute(hchange),
            ::std::mem::transmute(lpdwnotifykey),
            ::std::mem::transmute(pfilterandtype),
            ::std::mem::transmute(buffer),
            ::std::mem::transmute(lpbbuffersize),
            ::std::mem::transmute(lpszobjectid),
            ::std::mem::transmute(lpcchobjectid),
            ::std::mem::transmute(lpszparentid),
            ::std::mem::transmute(lpcchparentid),
            ::std::mem::transmute(lpszname),
            ::std::mem::transmute(lpcchname),
            ::std::mem::transmute(lpsztype),
            ::std::mem::transmute(lpcchtype),
            ::std::mem::transmute(dwmilliseconds),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetClusterQuorumResource(
    hcluster: *const _HCLUSTER,
    lpszresourcename: super::super::Foundation::PWSTR,
    lpcchresourcename: *mut u32,
    lpszdevicename: super::super::Foundation::PWSTR,
    lpcchdevicename: *mut u32,
    lpdwmaxquorumlogsize: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterQuorumResource(
                hcluster: *const _HCLUSTER,
                lpszresourcename: super::super::Foundation::PWSTR,
                lpcchresourcename: *mut u32,
                lpszdevicename: super::super::Foundation::PWSTR,
                lpcchdevicename: *mut u32,
                lpdwmaxquorumlogsize: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(GetClusterQuorumResource(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(lpszresourcename),
            ::std::mem::transmute(lpcchresourcename),
            ::std::mem::transmute(lpszdevicename),
            ::std::mem::transmute(lpcchdevicename),
            ::std::mem::transmute(lpdwmaxquorumlogsize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetClusterResourceDependencyExpression(
    hresource: *const _HRESOURCE,
    lpszdependencyexpression: super::super::Foundation::PWSTR,
    lpcchdependencyexpression: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterResourceDependencyExpression(
                hresource: *const _HRESOURCE,
                lpszdependencyexpression: super::super::Foundation::PWSTR,
                lpcchdependencyexpression: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(GetClusterResourceDependencyExpression(
            ::std::mem::transmute(hresource),
            ::std::mem::transmute(lpszdependencyexpression),
            ::std::mem::transmute(lpcchdependencyexpression),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_System_Registry")]
#[inline]
pub unsafe fn GetClusterResourceKey(
    hresource: *const _HRESOURCE,
    samdesired: u32,
) -> super::super::System::Registry::HKEY {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterResourceKey(
                hresource: *const _HRESOURCE,
                samdesired: u32,
            ) -> super::super::System::Registry::HKEY;
        }
        ::std::mem::transmute(GetClusterResourceKey(
            ::std::mem::transmute(hresource),
            ::std::mem::transmute(samdesired),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetClusterResourceNetworkName(
    hresource: *const _HRESOURCE,
    lpbuffer: super::super::Foundation::PWSTR,
    nsize: *mut u32,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterResourceNetworkName(
                hresource: *const _HRESOURCE,
                lpbuffer: super::super::Foundation::PWSTR,
                nsize: *mut u32,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(GetClusterResourceNetworkName(
            ::std::mem::transmute(hresource),
            ::std::mem::transmute(lpbuffer),
            ::std::mem::transmute(nsize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetClusterResourceState(
    hresource: *const _HRESOURCE,
    lpsznodename: super::super::Foundation::PWSTR,
    lpcchnodename: *mut u32,
    lpszgroupname: super::super::Foundation::PWSTR,
    lpcchgroupname: *mut u32,
) -> CLUSTER_RESOURCE_STATE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterResourceState(
                hresource: *const _HRESOURCE,
                lpsznodename: super::super::Foundation::PWSTR,
                lpcchnodename: *mut u32,
                lpszgroupname: super::super::Foundation::PWSTR,
                lpcchgroupname: *mut u32,
            ) -> CLUSTER_RESOURCE_STATE;
        }
        ::std::mem::transmute(GetClusterResourceState(
            ::std::mem::transmute(hresource),
            ::std::mem::transmute(lpsznodename),
            ::std::mem::transmute(lpcchnodename),
            ::std::mem::transmute(lpszgroupname),
            ::std::mem::transmute(lpcchgroupname),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn GetClusterResourceTypeKey<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpsztypename: Param1,
    samdesired: u32,
) -> super::super::System::Registry::HKEY {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetClusterResourceTypeKey(
                hcluster: *const _HCLUSTER,
                lpsztypename: super::super::Foundation::PWSTR,
                samdesired: u32,
            ) -> super::super::System::Registry::HKEY;
        }
        ::std::mem::transmute(GetClusterResourceTypeKey(
            ::std::mem::transmute(hcluster),
            lpsztypename.into_param().abi(),
            ::std::mem::transmute(samdesired),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetNodeCloudTypeDW<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    ppsznodename: Param0,
    nodecloudtype: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetNodeCloudTypeDW(
                ppsznodename: super::super::Foundation::PWSTR,
                nodecloudtype: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(GetNodeCloudTypeDW(
            ppsznodename.into_param().abi(),
            ::std::mem::transmute(nodecloudtype),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetNodeClusterState<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    lpsznodename: Param0,
    pdwclusterstate: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetNodeClusterState(
                lpsznodename: super::super::Foundation::PWSTR,
                pdwclusterstate: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(GetNodeClusterState(
            lpsznodename.into_param().abi(),
            ::std::mem::transmute(pdwclusterstate),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetNotifyEventHandle(
    hchange: *const _HCHANGE,
    lphtargetevent: *mut super::super::Foundation::HANDLE,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn GetNotifyEventHandle(
                hchange: *const _HCHANGE,
                lphtargetevent: *mut super::super::Foundation::HANDLE,
            ) -> u32;
        }
        ::std::mem::transmute(GetNotifyEventHandle(
            ::std::mem::transmute(hchange),
            ::std::mem::transmute(lphtargetevent),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const HCI_UPGRADE_BIT: u32 = 32768u32;
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IGetClusterDataInfo(::windows::runtime::IUnknown);
impl IGetClusterDataInfo {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetClusterName(
        &self,
        lpszname: super::super::Foundation::BSTR,
        pcchname: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(lpszname),
            ::std::mem::transmute(pcchname),
        )
        .ok()
    }
    pub unsafe fn GetClusterHandle(&self) -> *mut _HCLUSTER {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
        ))
    }
    pub unsafe fn GetObjectCount(&self) -> i32 {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
        ))
    }
}
unsafe impl ::windows::runtime::Interface for IGetClusterDataInfo {
    type Vtable = IGetClusterDataInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2547965521,
        64619,
        4559,
        [181, 245, 0, 160, 201, 10, 181, 5],
    );
}
impl ::std::convert::From<IGetClusterDataInfo> for ::windows::runtime::IUnknown {
    fn from(value: IGetClusterDataInfo) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IGetClusterDataInfo> for ::windows::runtime::IUnknown {
    fn from(value: &IGetClusterDataInfo) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IGetClusterDataInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IGetClusterDataInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGetClusterDataInfo_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        lpszname: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        pcchname: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> *mut _HCLUSTER,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> i32,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IGetClusterGroupInfo(::windows::runtime::IUnknown);
impl IGetClusterGroupInfo {
    pub unsafe fn GetGroupHandle(&self, lobjindex: i32) -> *mut _HGROUP {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(lobjindex),
        ))
    }
}
unsafe impl ::windows::runtime::Interface for IGetClusterGroupInfo {
    type Vtable = IGetClusterGroupInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2547965524,
        64619,
        4559,
        [181, 245, 0, 160, 201, 10, 181, 5],
    );
}
impl ::std::convert::From<IGetClusterGroupInfo> for ::windows::runtime::IUnknown {
    fn from(value: IGetClusterGroupInfo) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IGetClusterGroupInfo> for ::windows::runtime::IUnknown {
    fn from(value: &IGetClusterGroupInfo) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IGetClusterGroupInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IGetClusterGroupInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGetClusterGroupInfo_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lobjindex: i32) -> *mut _HGROUP,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IGetClusterNetInterfaceInfo(::windows::runtime::IUnknown);
impl IGetClusterNetInterfaceInfo {
    pub unsafe fn GetNetInterfaceHandle(&self, lobjindex: i32) -> *mut _HNETINTERFACE {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(lobjindex),
        ))
    }
}
unsafe impl ::windows::runtime::Interface for IGetClusterNetInterfaceInfo {
    type Vtable = IGetClusterNetInterfaceInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2547965527,
        64619,
        4559,
        [181, 245, 0, 160, 201, 10, 181, 5],
    );
}
impl ::std::convert::From<IGetClusterNetInterfaceInfo> for ::windows::runtime::IUnknown {
    fn from(value: IGetClusterNetInterfaceInfo) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IGetClusterNetInterfaceInfo> for ::windows::runtime::IUnknown {
    fn from(value: &IGetClusterNetInterfaceInfo) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IGetClusterNetInterfaceInfo
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IGetClusterNetInterfaceInfo
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGetClusterNetInterfaceInfo_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        lobjindex: i32,
    ) -> *mut _HNETINTERFACE,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IGetClusterNetworkInfo(::windows::runtime::IUnknown);
impl IGetClusterNetworkInfo {
    pub unsafe fn GetNetworkHandle(&self, lobjindex: i32) -> *mut _HNETWORK {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(lobjindex),
        ))
    }
}
unsafe impl ::windows::runtime::Interface for IGetClusterNetworkInfo {
    type Vtable = IGetClusterNetworkInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2547965526,
        64619,
        4559,
        [181, 245, 0, 160, 201, 10, 181, 5],
    );
}
impl ::std::convert::From<IGetClusterNetworkInfo> for ::windows::runtime::IUnknown {
    fn from(value: IGetClusterNetworkInfo) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IGetClusterNetworkInfo> for ::windows::runtime::IUnknown {
    fn from(value: &IGetClusterNetworkInfo) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IGetClusterNetworkInfo
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IGetClusterNetworkInfo
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGetClusterNetworkInfo_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        lobjindex: i32,
    ) -> *mut _HNETWORK,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IGetClusterNodeInfo(::windows::runtime::IUnknown);
impl IGetClusterNodeInfo {
    pub unsafe fn GetNodeHandle(&self, lobjindex: i32) -> *mut _HNODE {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(lobjindex),
        ))
    }
}
unsafe impl ::windows::runtime::Interface for IGetClusterNodeInfo {
    type Vtable = IGetClusterNodeInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2547965523,
        64619,
        4559,
        [181, 245, 0, 160, 201, 10, 181, 5],
    );
}
impl ::std::convert::From<IGetClusterNodeInfo> for ::windows::runtime::IUnknown {
    fn from(value: IGetClusterNodeInfo) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IGetClusterNodeInfo> for ::windows::runtime::IUnknown {
    fn from(value: &IGetClusterNodeInfo) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IGetClusterNodeInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IGetClusterNodeInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGetClusterNodeInfo_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr, lobjindex: i32) -> *mut _HNODE,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IGetClusterObjectInfo(::windows::runtime::IUnknown);
impl IGetClusterObjectInfo {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetObjectName(
        &self,
        lobjindex: i32,
        lpszname: super::super::Foundation::BSTR,
        pcchname: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(lobjindex),
            ::std::mem::transmute(lpszname),
            ::std::mem::transmute(pcchname),
        )
        .ok()
    }
    pub unsafe fn GetObjectType(&self, lobjindex: i32) -> CLUADMEX_OBJECT_TYPE {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(lobjindex),
        ))
    }
}
unsafe impl ::windows::runtime::Interface for IGetClusterObjectInfo {
    type Vtable = IGetClusterObjectInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2547965522,
        64619,
        4559,
        [181, 245, 0, 160, 201, 10, 181, 5],
    );
}
impl ::std::convert::From<IGetClusterObjectInfo> for ::windows::runtime::IUnknown {
    fn from(value: IGetClusterObjectInfo) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IGetClusterObjectInfo> for ::windows::runtime::IUnknown {
    fn from(value: &IGetClusterObjectInfo) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IGetClusterObjectInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IGetClusterObjectInfo
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGetClusterObjectInfo_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        lobjindex: i32,
        lpszname: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        pcchname: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        lobjindex: i32,
    ) -> CLUADMEX_OBJECT_TYPE,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IGetClusterResourceInfo(::windows::runtime::IUnknown);
impl IGetClusterResourceInfo {
    pub unsafe fn GetResourceHandle(&self, lobjindex: i32) -> *mut _HRESOURCE {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(lobjindex),
        ))
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetResourceTypeName(
        &self,
        lobjindex: i32,
        lpszrestypename: super::super::Foundation::BSTR,
        pcchrestypename: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(lobjindex),
            ::std::mem::transmute(lpszrestypename),
            ::std::mem::transmute(pcchrestypename),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetResourceNetworkName(
        &self,
        lobjindex: i32,
        lpsznetname: super::super::Foundation::BSTR,
        pcchnetname: *mut u32,
    ) -> super::super::Foundation::BOOL {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(lobjindex),
            ::std::mem::transmute(lpsznetname),
            ::std::mem::transmute(pcchnetname),
        ))
    }
}
unsafe impl ::windows::runtime::Interface for IGetClusterResourceInfo {
    type Vtable = IGetClusterResourceInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2547965525,
        64619,
        4559,
        [181, 245, 0, 160, 201, 10, 181, 5],
    );
}
impl ::std::convert::From<IGetClusterResourceInfo> for ::windows::runtime::IUnknown {
    fn from(value: IGetClusterResourceInfo) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IGetClusterResourceInfo> for ::windows::runtime::IUnknown {
    fn from(value: &IGetClusterResourceInfo) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IGetClusterResourceInfo
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IGetClusterResourceInfo
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGetClusterResourceInfo_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        lobjindex: i32,
    ) -> *mut _HRESOURCE,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        lobjindex: i32,
        lpszrestypename: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        pcchrestypename: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        lobjindex: i32,
        lpsznetname: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        pcchnetname: *mut u32,
    ) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IGetClusterUIInfo(::windows::runtime::IUnknown);
impl IGetClusterUIInfo {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetClusterName(
        &self,
        lpszname: super::super::Foundation::BSTR,
        pcchname: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(lpszname),
            ::std::mem::transmute(pcchname),
        )
        .ok()
    }
    pub unsafe fn GetLocale(&self) -> u32 {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
        ))
    }
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn GetFont(&self) -> super::super::Graphics::Gdi::HFONT {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
        ))
    }
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub unsafe fn GetIcon(&self) -> super::super::UI::WindowsAndMessaging::HICON {
        ::std::mem::transmute((::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
        ))
    }
}
unsafe impl ::windows::runtime::Interface for IGetClusterUIInfo {
    type Vtable = IGetClusterUIInfo_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2547965520,
        64619,
        4559,
        [181, 245, 0, 160, 201, 10, 181, 5],
    );
}
impl ::std::convert::From<IGetClusterUIInfo> for ::windows::runtime::IUnknown {
    fn from(value: IGetClusterUIInfo) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IGetClusterUIInfo> for ::windows::runtime::IUnknown {
    fn from(value: &IGetClusterUIInfo) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IGetClusterUIInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IGetClusterUIInfo {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGetClusterUIInfo_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        lpszname: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        pcchname: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
    ) -> super::super::Graphics::Gdi::HFONT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))] usize,
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
    ) -> super::super::UI::WindowsAndMessaging::HICON,
    #[cfg(not(feature = "Win32_UI_WindowsAndMessaging"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusApplication(::windows::runtime::IUnknown);
impl ISClusApplication {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn DomainNames(&self) -> ::windows::runtime::Result<ISDomainNames> {
        let mut result__: <ISDomainNames as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISDomainNames>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ClusterNames<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrdomainname: Param0,
    ) -> ::windows::runtime::Result<ISClusterNames> {
        let mut result__: <ISClusterNames as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            bstrdomainname.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISClusterNames>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OpenCluster<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrclustername: Param0,
    ) -> ::windows::runtime::Result<ISCluster> {
        let mut result__: <ISCluster as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            bstrclustername.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISCluster>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusApplication {
    type Vtable = ISClusApplication_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161318,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusApplication> for ::windows::runtime::IUnknown {
    fn from(value: ISClusApplication) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusApplication> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusApplication) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusApplication {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusApplication {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusApplication> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusApplication) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusApplication> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISClusApplication) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusApplication
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusApplication
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusApplication_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppdomains: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrdomainname: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        ppclusters: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrclustername: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        pcluster: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusCryptoKeys(::windows::runtime::IUnknown);
impl ISClusCryptoKeys {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    pub unsafe fn Refresh(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn AddItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrcryptokey: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            bstrcryptokey.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn RemoveItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ISClusCryptoKeys {
    type Vtable = ISClusCryptoKeys_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161388,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusCryptoKeys> for ::windows::runtime::IUnknown {
    fn from(value: ISClusCryptoKeys) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusCryptoKeys> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusCryptoKeys) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusCryptoKeys {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusCryptoKeys {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusCryptoKeys> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusCryptoKeys) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusCryptoKeys> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISClusCryptoKeys) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusCryptoKeys
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusCryptoKeys
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusCryptoKeys_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pbstrcyrptokey: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrcryptokey: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusDisk(::windows::runtime::IUnknown);
impl ISClusDisk {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Signature(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn ScsiAddress(&self) -> ::windows::runtime::Result<ISClusScsiAddress> {
        let mut result__: <ISClusScsiAddress as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusScsiAddress>(result__)
    }
    pub unsafe fn DiskNumber(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn Partitions(&self) -> ::windows::runtime::Result<ISClusPartitions> {
        let mut result__: <ISClusPartitions as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusPartitions>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusDisk {
    type Vtable = ISClusDisk_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161380,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusDisk> for ::windows::runtime::IUnknown {
    fn from(value: ISClusDisk) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusDisk> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusDisk) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusDisk {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusDisk {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusDisk> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusDisk) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusDisk> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISClusDisk) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusDisk
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusDisk
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusDisk_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plsignature: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppscsiaddress: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pldisknumber: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pppartitions: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusDisks(::windows::runtime::IUnknown);
impl ISClusDisks {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<ISClusDisk> {
        let mut result__: <ISClusDisk as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISClusDisk>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusDisks {
    type Vtable = ISClusDisks_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161382,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusDisks> for ::windows::runtime::IUnknown {
    fn from(value: ISClusDisks) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusDisks> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusDisks) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusDisks {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusDisks {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusDisks> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusDisks) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusDisks> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISClusDisks) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusDisks
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusDisks
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusDisks_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        ppdisk: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusNetInterface(::windows::runtime::IUnknown);
impl ISClusNetInterface {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn CommonProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn PrivateProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn CommonROProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn PrivateROProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Name(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    pub unsafe fn Handle(&self) -> ::windows::runtime::Result<usize> {
        let mut result__: <usize as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<usize>(result__)
    }
    pub unsafe fn State(&self) -> ::windows::runtime::Result<CLUSTER_NETINTERFACE_STATE> {
        let mut result__: <CLUSTER_NETINTERFACE_STATE as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<CLUSTER_NETINTERFACE_STATE>(result__)
    }
    pub unsafe fn Cluster(&self) -> ::windows::runtime::Result<ISCluster> {
        let mut result__: <ISCluster as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISCluster>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusNetInterface {
    type Vtable = ISClusNetInterface_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161326,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusNetInterface> for ::windows::runtime::IUnknown {
    fn from(value: ISClusNetInterface) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusNetInterface> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusNetInterface) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusNetInterface {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusNetInterface {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusNetInterface> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusNetInterface) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusNetInterface>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: &ISClusNetInterface) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusNetInterface
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusNetInterface
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusNetInterface_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrname: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phandle: *mut usize,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwstate: *mut CLUSTER_NETINTERFACE_STATE,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppcluster: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusNetInterfaces(::windows::runtime::IUnknown);
impl ISClusNetInterfaces {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    pub unsafe fn Refresh(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<ISClusNetInterface> {
        let mut result__: <ISClusNetInterface as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISClusNetInterface>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusNetInterfaces {
    type Vtable = ISClusNetInterfaces_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161328,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusNetInterfaces> for ::windows::runtime::IUnknown {
    fn from(value: ISClusNetInterfaces) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusNetInterfaces> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusNetInterfaces) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusNetInterfaces {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusNetInterfaces {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusNetInterfaces>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: ISClusNetInterfaces) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusNetInterfaces>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: &ISClusNetInterfaces) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusNetInterfaces
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusNetInterfaces
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusNetInterfaces_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        ppclusnetinterface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusNetwork(::windows::runtime::IUnknown);
impl ISClusNetwork {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn CommonProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn PrivateProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn CommonROProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn PrivateROProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn Handle(&self) -> ::windows::runtime::Result<usize> {
        let mut result__: <usize as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<usize>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Name(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetName<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrnetworkname: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            bstrnetworkname.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn NetworkID(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    pub unsafe fn State(&self) -> ::windows::runtime::Result<CLUSTER_NETWORK_STATE> {
        let mut result__: <CLUSTER_NETWORK_STATE as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<CLUSTER_NETWORK_STATE>(result__)
    }
    pub unsafe fn NetInterfaces(&self) -> ::windows::runtime::Result<ISClusNetworkNetInterfaces> {
        let mut result__: <ISClusNetworkNetInterfaces as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusNetworkNetInterfaces>(result__)
    }
    pub unsafe fn Cluster(&self) -> ::windows::runtime::Result<ISCluster> {
        let mut result__: <ISCluster as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISCluster>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusNetwork {
    type Vtable = ISClusNetwork_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161330,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusNetwork> for ::windows::runtime::IUnknown {
    fn from(value: ISClusNetwork) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusNetwork> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusNetwork) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusNetwork {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusNetwork {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusNetwork> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusNetwork) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusNetwork> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISClusNetwork) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusNetwork
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusNetwork
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusNetwork_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phandle: *mut usize,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrname: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrnetworkname: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrnetworkid: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwstate: *mut CLUSTER_NETWORK_STATE,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppclusnetinterfaces: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppcluster: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusNetworkNetInterfaces(::windows::runtime::IUnknown);
impl ISClusNetworkNetInterfaces {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    pub unsafe fn Refresh(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<ISClusNetInterface> {
        let mut result__: <ISClusNetInterface as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISClusNetInterface>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusNetworkNetInterfaces {
    type Vtable = ISClusNetworkNetInterfaces_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161334,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusNetworkNetInterfaces> for ::windows::runtime::IUnknown {
    fn from(value: ISClusNetworkNetInterfaces) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusNetworkNetInterfaces> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusNetworkNetInterfaces) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for ISClusNetworkNetInterfaces
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &ISClusNetworkNetInterfaces
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusNetworkNetInterfaces>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: ISClusNetworkNetInterfaces) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusNetworkNetInterfaces>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: &ISClusNetworkNetInterfaces) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusNetworkNetInterfaces
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusNetworkNetInterfaces
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusNetworkNetInterfaces_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        ppclusnetinterface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusNetworks(::windows::runtime::IUnknown);
impl ISClusNetworks {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    pub unsafe fn Refresh(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<ISClusNetwork> {
        let mut result__: <ISClusNetwork as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISClusNetwork>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusNetworks {
    type Vtable = ISClusNetworks_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161332,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusNetworks> for ::windows::runtime::IUnknown {
    fn from(value: ISClusNetworks) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusNetworks> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusNetworks) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusNetworks {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusNetworks {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusNetworks> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusNetworks) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusNetworks> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISClusNetworks) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusNetworks
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusNetworks
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusNetworks_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        ppclusnetwork: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusNode(::windows::runtime::IUnknown);
impl ISClusNode {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn CommonProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn PrivateProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn CommonROProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn PrivateROProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Name(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    pub unsafe fn Handle(&self) -> ::windows::runtime::Result<usize> {
        let mut result__: <usize as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<usize>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn NodeID(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    pub unsafe fn State(&self) -> ::windows::runtime::Result<CLUSTER_NODE_STATE> {
        let mut result__: <CLUSTER_NODE_STATE as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<CLUSTER_NODE_STATE>(result__)
    }
    pub unsafe fn Pause(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Resume(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Evict(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn ResourceGroups(&self) -> ::windows::runtime::Result<ISClusResGroups> {
        let mut result__: <ISClusResGroups as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusResGroups>(result__)
    }
    pub unsafe fn Cluster(&self) -> ::windows::runtime::Result<ISCluster> {
        let mut result__: <ISCluster as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISCluster>(result__)
    }
    pub unsafe fn NetInterfaces(&self) -> ::windows::runtime::Result<ISClusNodeNetInterfaces> {
        let mut result__: <ISClusNodeNetInterfaces as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).20)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusNodeNetInterfaces>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusNode {
    type Vtable = ISClusNode_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161336,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusNode> for ::windows::runtime::IUnknown {
    fn from(value: ISClusNode) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusNode> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusNode) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusNode {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusNode {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusNode> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusNode) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusNode> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISClusNode) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusNode
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusNode
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusNode_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrname: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phandle: *mut usize,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrnodeid: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwstate: *mut CLUSTER_NODE_STATE,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppresourcegroups: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppcluster: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppclusnetinterfaces: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusNodeNetInterfaces(::windows::runtime::IUnknown);
impl ISClusNodeNetInterfaces {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    pub unsafe fn Refresh(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<ISClusNetInterface> {
        let mut result__: <ISClusNetInterface as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISClusNetInterface>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusNodeNetInterfaces {
    type Vtable = ISClusNodeNetInterfaces_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161340,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusNodeNetInterfaces> for ::windows::runtime::IUnknown {
    fn from(value: ISClusNodeNetInterfaces) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusNodeNetInterfaces> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusNodeNetInterfaces) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for ISClusNodeNetInterfaces
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &ISClusNodeNetInterfaces
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusNodeNetInterfaces>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: ISClusNodeNetInterfaces) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusNodeNetInterfaces>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: &ISClusNodeNetInterfaces) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusNodeNetInterfaces
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusNodeNetInterfaces
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusNodeNetInterfaces_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        ppclusnetinterface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusNodes(::windows::runtime::IUnknown);
impl ISClusNodes {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    pub unsafe fn Refresh(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<ISClusNode> {
        let mut result__: <ISClusNode as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISClusNode>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusNodes {
    type Vtable = ISClusNodes_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161338,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusNodes> for ::windows::runtime::IUnknown {
    fn from(value: ISClusNodes) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusNodes> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusNodes) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusNodes {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusNodes {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusNodes> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusNodes) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusNodes> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISClusNodes) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusNodes
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusNodes
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusNodes_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        ppnode: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusPartition(::windows::runtime::IUnknown);
impl ISClusPartition {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Flags(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn DeviceName(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn VolumeLabel(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    pub unsafe fn SerialNumber(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn MaximumComponentLength(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn FileSystemFlags(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn FileSystem(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusPartition {
    type Vtable = ISClusPartition_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161376,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusPartition> for ::windows::runtime::IUnknown {
    fn from(value: ISClusPartition) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusPartition> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusPartition) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusPartition {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusPartition {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusPartition> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusPartition) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusPartition> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISClusPartition) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusPartition
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusPartition
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusPartition_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plflags: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrdevicename: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrvolumelabel: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plserialnumber: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plmaximumcomponentlength: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plfilesystemflags: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrfilesystem: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusPartitionEx(::windows::runtime::IUnknown);
impl ISClusPartitionEx {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Flags(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn DeviceName(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn VolumeLabel(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    pub unsafe fn SerialNumber(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn MaximumComponentLength(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn FileSystemFlags(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn FileSystem(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    pub unsafe fn TotalSize(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn FreeSpace(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn DeviceNumber(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn PartitionNumber(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn VolumeGuid(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusPartitionEx {
    type Vtable = ISClusPartitionEx_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2281886974,
        45870,
        19153,
        [157, 189, 100, 241, 142, 17, 102, 206],
    );
}
impl ::std::convert::From<ISClusPartitionEx> for ::windows::runtime::IUnknown {
    fn from(value: ISClusPartitionEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusPartitionEx> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusPartitionEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusPartitionEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusPartitionEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
impl ::std::convert::From<ISClusPartitionEx> for ISClusPartition {
    fn from(value: ISClusPartitionEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusPartitionEx> for ISClusPartition {
    fn from(value: &ISClusPartitionEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ISClusPartition> for ISClusPartitionEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ISClusPartition> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<ISClusPartition>::into(self))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ISClusPartition> for &ISClusPartitionEx {
    fn into_param(self) -> ::windows::runtime::Param<'a, ISClusPartition> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<ISClusPartition>::into(
            ::std::clone::Clone::clone(self),
        ))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusPartitionEx> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusPartitionEx) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusPartitionEx> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISClusPartitionEx) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusPartitionEx
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusPartitionEx
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusPartitionEx_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plflags: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrdevicename: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrvolumelabel: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plserialnumber: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plmaximumcomponentlength: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plfilesystemflags: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrfilesystem: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pltotalsize: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plfreespace: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pldevicenumber: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plpartitionnumber: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrvolumeguid: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusPartitions(::windows::runtime::IUnknown);
impl ISClusPartitions {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<ISClusPartition> {
        let mut result__: <ISClusPartition as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISClusPartition>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusPartitions {
    type Vtable = ISClusPartitions_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161378,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusPartitions> for ::windows::runtime::IUnknown {
    fn from(value: ISClusPartitions) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusPartitions> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusPartitions) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusPartitions {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusPartitions {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusPartitions> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusPartitions) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusPartitions> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISClusPartitions) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusPartitions
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusPartitions
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusPartitions_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pppartition: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusProperties(::windows::runtime::IUnknown);
impl ISClusProperties {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    pub unsafe fn Refresh(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<ISClusProperty> {
        let mut result__: <ISClusProperty as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISClusProperty>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn CreateItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        bstrname: Param0,
        varvalue: Param1,
    ) -> ::windows::runtime::Result<ISClusProperty> {
        let mut result__: <ISClusProperty as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            bstrname.into_param().abi(),
            varvalue.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISClusProperty>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn UseDefaultValue<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn SaveChanges(
        &self,
    ) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn ReadOnly(
        &self,
    ) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Private(&self) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Common(&self) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Modified(
        &self,
    ) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusProperties {
    type Vtable = ISClusProperties_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161344,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusProperties> for ::windows::runtime::IUnknown {
    fn from(value: ISClusProperties) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusProperties> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusProperties) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusProperties {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusProperties {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusProperties> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusProperties) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusProperties> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISClusProperties) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusProperties
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusProperties
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusProperties_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        ppclusproperty: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrname: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        varvalue: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pproperty: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pvarstatuscode: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pvarreadonly: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pvarprivate: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pvarcommon: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pvarmodified: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusProperty(::windows::runtime::IUnknown);
impl ISClusProperty {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Name(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    pub unsafe fn Length(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn ValueCount(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn Values(&self) -> ::windows::runtime::Result<ISClusPropertyValues> {
        let mut result__: <ISClusPropertyValues as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusPropertyValues>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Value(&self) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn SetValue<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varvalue: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            varvalue.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Type(&self) -> ::windows::runtime::Result<CLUSTER_PROPERTY_TYPE> {
        let mut result__: <CLUSTER_PROPERTY_TYPE as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<CLUSTER_PROPERTY_TYPE>(result__)
    }
    pub unsafe fn SetType(&self, r#type: CLUSTER_PROPERTY_TYPE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
        )
        .ok()
    }
    pub unsafe fn Format(&self) -> ::windows::runtime::Result<CLUSTER_PROPERTY_FORMAT> {
        let mut result__: <CLUSTER_PROPERTY_FORMAT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<CLUSTER_PROPERTY_FORMAT>(result__)
    }
    pub unsafe fn SetFormat(
        &self,
        format: CLUSTER_PROPERTY_FORMAT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(format),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn ReadOnly(
        &self,
    ) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Private(&self) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Common(&self) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Modified(
        &self,
    ) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).20)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    pub unsafe fn UseDefaultValue(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(::std::mem::transmute_copy(self)).ok()
    }
}
unsafe impl ::windows::runtime::Interface for ISClusProperty {
    type Vtable = ISClusProperty_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161342,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusProperty> for ::windows::runtime::IUnknown {
    fn from(value: ISClusProperty) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusProperty> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusProperty) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusProperty {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusProperty {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusProperty> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusProperty) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusProperty> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISClusProperty) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusProperty
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusProperty
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusProperty_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrname: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plength: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppclusterpropertyvalues: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pvarvalue: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varvalue: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ptype: *mut CLUSTER_PROPERTY_TYPE,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        r#type: CLUSTER_PROPERTY_TYPE,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pformat: *mut CLUSTER_PROPERTY_FORMAT,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        format: CLUSTER_PROPERTY_FORMAT,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pvarreadonly: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pvarprivate: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pvarcommon: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pvarmodified: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusPropertyValue(::windows::runtime::IUnknown);
impl ISClusPropertyValue {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Value(&self) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn SetValue<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varvalue: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            varvalue.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Type(&self) -> ::windows::runtime::Result<CLUSTER_PROPERTY_TYPE> {
        let mut result__: <CLUSTER_PROPERTY_TYPE as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<CLUSTER_PROPERTY_TYPE>(result__)
    }
    pub unsafe fn SetType(&self, r#type: CLUSTER_PROPERTY_TYPE) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(r#type),
        )
        .ok()
    }
    pub unsafe fn Format(&self) -> ::windows::runtime::Result<CLUSTER_PROPERTY_FORMAT> {
        let mut result__: <CLUSTER_PROPERTY_FORMAT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<CLUSTER_PROPERTY_FORMAT>(result__)
    }
    pub unsafe fn SetFormat(
        &self,
        format: CLUSTER_PROPERTY_FORMAT,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(format),
        )
        .ok()
    }
    pub unsafe fn Length(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn DataCount(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn Data(&self) -> ::windows::runtime::Result<ISClusPropertyValueData> {
        let mut result__: <ISClusPropertyValueData as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusPropertyValueData>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusPropertyValue {
    type Vtable = ISClusPropertyValue_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161370,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusPropertyValue> for ::windows::runtime::IUnknown {
    fn from(value: ISClusPropertyValue) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusPropertyValue> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusPropertyValue) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusPropertyValue {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusPropertyValue {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusPropertyValue>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: ISClusPropertyValue) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusPropertyValue>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: &ISClusPropertyValue) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusPropertyValue
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusPropertyValue
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusPropertyValue_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pvarvalue: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varvalue: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ptype: *mut CLUSTER_PROPERTY_TYPE,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        r#type: CLUSTER_PROPERTY_TYPE,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pformat: *mut CLUSTER_PROPERTY_FORMAT,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        format: CLUSTER_PROPERTY_FORMAT,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plength: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppclusterpropertyvaluedata: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusPropertyValueData(::windows::runtime::IUnknown);
impl ISClusPropertyValueData {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn CreateItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varvalue: Param0,
    ) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            varvalue.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn RemoveItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ISClusPropertyValueData {
    type Vtable = ISClusPropertyValueData_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161374,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusPropertyValueData> for ::windows::runtime::IUnknown {
    fn from(value: ISClusPropertyValueData) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusPropertyValueData> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusPropertyValueData) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for ISClusPropertyValueData
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &ISClusPropertyValueData
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusPropertyValueData>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: ISClusPropertyValueData) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusPropertyValueData>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: &ISClusPropertyValueData) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusPropertyValueData
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusPropertyValueData
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusPropertyValueData_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pvarvalue: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varvalue: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pvardata: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusPropertyValues(::windows::runtime::IUnknown);
impl ISClusPropertyValues {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<ISClusPropertyValue> {
        let mut result__: <ISClusPropertyValue as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISClusPropertyValue>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn CreateItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        bstrname: Param0,
        varvalue: Param1,
    ) -> ::windows::runtime::Result<ISClusPropertyValue> {
        let mut result__: <ISClusPropertyValue as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            bstrname.into_param().abi(),
            varvalue.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISClusPropertyValue>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn RemoveItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ISClusPropertyValues {
    type Vtable = ISClusPropertyValues_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161372,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusPropertyValues> for ::windows::runtime::IUnknown {
    fn from(value: ISClusPropertyValues) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusPropertyValues> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusPropertyValues) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusPropertyValues {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusPropertyValues {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusPropertyValues>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: ISClusPropertyValues) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusPropertyValues>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: &ISClusPropertyValues) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusPropertyValues
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusPropertyValues
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusPropertyValues_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pppropertyvalue: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrname: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        varvalue: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pppropertyvalue: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusRefObject(::windows::runtime::IUnknown);
impl ISClusRefObject {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Handle(&self) -> ::windows::runtime::Result<usize> {
        let mut result__: <usize as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<usize>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusRefObject {
    type Vtable = ISClusRefObject_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161346,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusRefObject> for ::windows::runtime::IUnknown {
    fn from(value: ISClusRefObject) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusRefObject> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusRefObject) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusRefObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusRefObject {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusRefObject> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusRefObject) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusRefObject> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISClusRefObject) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusRefObject
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusRefObject
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusRefObject_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phandle: *mut usize,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusRegistryKeys(::windows::runtime::IUnknown);
impl ISClusRegistryKeys {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    pub unsafe fn Refresh(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn AddItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrregistrykey: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            bstrregistrykey.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn RemoveItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ISClusRegistryKeys {
    type Vtable = ISClusRegistryKeys_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161386,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusRegistryKeys> for ::windows::runtime::IUnknown {
    fn from(value: ISClusRegistryKeys) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusRegistryKeys> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusRegistryKeys) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusRegistryKeys {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusRegistryKeys {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusRegistryKeys> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusRegistryKeys) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusRegistryKeys>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: &ISClusRegistryKeys) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusRegistryKeys
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusRegistryKeys
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusRegistryKeys_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pbstrregistrykey: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrregistrykey: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusResDependencies(::windows::runtime::IUnknown);
impl ISClusResDependencies {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    pub unsafe fn Refresh(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<ISClusResource> {
        let mut result__: <ISClusResource as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISClusResource>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CreateItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrresourcename: Param0,
        bstrresourcetype: Param1,
        dwflags: CLUSTER_RESOURCE_CREATE_FLAGS,
    ) -> ::windows::runtime::Result<ISClusResource> {
        let mut result__: <ISClusResource as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            bstrresourcename.into_param().abi(),
            bstrresourcetype.into_param().abi(),
            ::std::mem::transmute(dwflags),
            &mut result__,
        )
        .from_abi::<ISClusResource>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn DeleteItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AddItem<'a, Param0: ::windows::runtime::IntoParam<'a, ISClusResource>>(
        &self,
        presource: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            presource.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn RemoveItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ISClusResDependencies {
    type Vtable = ISClusResDependencies_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161348,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusResDependencies> for ::windows::runtime::IUnknown {
    fn from(value: ISClusResDependencies) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusResDependencies> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusResDependencies) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusResDependencies {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &ISClusResDependencies
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusResDependencies>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: ISClusResDependencies) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusResDependencies>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: &ISClusResDependencies) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusResDependencies
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusResDependencies
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusResDependencies_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        ppclusresource: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrresourcename: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        bstrresourcetype: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        dwflags: CLUSTER_RESOURCE_CREATE_FLAGS,
        ppclusterresource: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        presource: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusResDependents(::windows::runtime::IUnknown);
impl ISClusResDependents {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    pub unsafe fn Refresh(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<ISClusResource> {
        let mut result__: <ISClusResource as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISClusResource>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CreateItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrresourcename: Param0,
        bstrresourcetype: Param1,
        dwflags: CLUSTER_RESOURCE_CREATE_FLAGS,
    ) -> ::windows::runtime::Result<ISClusResource> {
        let mut result__: <ISClusResource as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            bstrresourcename.into_param().abi(),
            bstrresourcetype.into_param().abi(),
            ::std::mem::transmute(dwflags),
            &mut result__,
        )
        .from_abi::<ISClusResource>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn DeleteItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AddItem<'a, Param0: ::windows::runtime::IntoParam<'a, ISClusResource>>(
        &self,
        presource: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            presource.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn RemoveItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ISClusResDependents {
    type Vtable = ISClusResDependents_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161390,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusResDependents> for ::windows::runtime::IUnknown {
    fn from(value: ISClusResDependents) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusResDependents> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusResDependents) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusResDependents {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusResDependents {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusResDependents>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: ISClusResDependents) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusResDependents>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: &ISClusResDependents) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusResDependents
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusResDependents
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusResDependents_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        ppclusresource: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrresourcename: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        bstrresourcetype: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        dwflags: CLUSTER_RESOURCE_CREATE_FLAGS,
        ppclusterresource: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        presource: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusResGroup(::windows::runtime::IUnknown);
impl ISClusResGroup {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn CommonProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn PrivateProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn CommonROProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn PrivateROProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn Handle(&self) -> ::windows::runtime::Result<usize> {
        let mut result__: <usize as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<usize>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Name(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetName<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrgroupname: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            bstrgroupname.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn State(&self) -> ::windows::runtime::Result<CLUSTER_GROUP_STATE> {
        let mut result__: <CLUSTER_GROUP_STATE as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<CLUSTER_GROUP_STATE>(result__)
    }
    pub unsafe fn OwnerNode(&self) -> ::windows::runtime::Result<ISClusNode> {
        let mut result__: <ISClusNode as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusNode>(result__)
    }
    pub unsafe fn Resources(&self) -> ::windows::runtime::Result<ISClusResGroupResources> {
        let mut result__: <ISClusResGroupResources as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusResGroupResources>(result__)
    }
    pub unsafe fn PreferredOwnerNodes(
        &self,
    ) -> ::windows::runtime::Result<ISClusResGroupPreferredOwnerNodes> {
        let mut result__: <ISClusResGroupPreferredOwnerNodes as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusResGroupPreferredOwnerNodes>(result__)
    }
    pub unsafe fn Delete(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Online<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        vartimeout: Param0,
        varnode: Param1,
    ) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(
            ::std::mem::transmute_copy(self),
            vartimeout.into_param().abi(),
            varnode.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Move<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        vartimeout: Param0,
        varnode: Param1,
    ) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).20)(
            ::std::mem::transmute_copy(self),
            vartimeout.into_param().abi(),
            varnode.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Offline<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        vartimeout: Param0,
    ) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).21)(
            ::std::mem::transmute_copy(self),
            vartimeout.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    pub unsafe fn Cluster(&self) -> ::windows::runtime::Result<ISCluster> {
        let mut result__: <ISCluster as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).22)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISCluster>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusResGroup {
    type Vtable = ISClusResGroup_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161350,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusResGroup> for ::windows::runtime::IUnknown {
    fn from(value: ISClusResGroup) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusResGroup> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusResGroup) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusResGroup {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusResGroup {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusResGroup> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusResGroup) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusResGroup> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISClusResGroup) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusResGroup
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusResGroup
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusResGroup_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phandle: *mut usize,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrname: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrgroupname: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwstate: *mut CLUSTER_GROUP_STATE,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppownernode: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppclustergroupresources: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppownernodes: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        vartimeout: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        varnode: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pvarpending: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        vartimeout: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        varnode: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pvarpending: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        vartimeout: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pvarpending: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppcluster: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusResGroupPreferredOwnerNodes(::windows::runtime::IUnknown);
impl ISClusResGroupPreferredOwnerNodes {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    pub unsafe fn Refresh(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<ISClusNode> {
        let mut result__: <ISClusNode as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISClusNode>(result__)
    }
    pub unsafe fn InsertItem<'a, Param0: ::windows::runtime::IntoParam<'a, ISClusNode>>(
        &self,
        pnode: Param0,
        nposition: i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            pnode.into_param().abi(),
            ::std::mem::transmute(nposition),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn RemoveItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Modified(
        &self,
    ) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    pub unsafe fn SaveChanges(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn AddItem<'a, Param0: ::windows::runtime::IntoParam<'a, ISClusNode>>(
        &self,
        pnode: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            pnode.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ISClusResGroupPreferredOwnerNodes {
    type Vtable = ISClusResGroupPreferredOwnerNodes_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161320,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusResGroupPreferredOwnerNodes> for ::windows::runtime::IUnknown {
    fn from(value: ISClusResGroupPreferredOwnerNodes) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusResGroupPreferredOwnerNodes> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusResGroupPreferredOwnerNodes) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for ISClusResGroupPreferredOwnerNodes
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &ISClusResGroupPreferredOwnerNodes
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusResGroupPreferredOwnerNodes>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: ISClusResGroupPreferredOwnerNodes) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusResGroupPreferredOwnerNodes>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: &ISClusResGroupPreferredOwnerNodes) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusResGroupPreferredOwnerNodes
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusResGroupPreferredOwnerNodes
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusResGroupPreferredOwnerNodes_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        ppnode: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pnode: ::windows::runtime::RawPtr,
        nposition: i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pvarmodified: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pnode: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusResGroupResources(::windows::runtime::IUnknown);
impl ISClusResGroupResources {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    pub unsafe fn Refresh(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<ISClusResource> {
        let mut result__: <ISClusResource as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISClusResource>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CreateItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrresourcename: Param0,
        bstrresourcetype: Param1,
        dwflags: CLUSTER_RESOURCE_CREATE_FLAGS,
    ) -> ::windows::runtime::Result<ISClusResource> {
        let mut result__: <ISClusResource as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            bstrresourcename.into_param().abi(),
            bstrresourcetype.into_param().abi(),
            ::std::mem::transmute(dwflags),
            &mut result__,
        )
        .from_abi::<ISClusResource>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn DeleteItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ISClusResGroupResources {
    type Vtable = ISClusResGroupResources_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161322,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusResGroupResources> for ::windows::runtime::IUnknown {
    fn from(value: ISClusResGroupResources) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusResGroupResources> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusResGroupResources) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for ISClusResGroupResources
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &ISClusResGroupResources
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusResGroupResources>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: ISClusResGroupResources) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusResGroupResources>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: &ISClusResGroupResources) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusResGroupResources
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusResGroupResources
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusResGroupResources_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        ppclusresource: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrresourcename: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        bstrresourcetype: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        dwflags: CLUSTER_RESOURCE_CREATE_FLAGS,
        ppclusterresource: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusResGroups(::windows::runtime::IUnknown);
impl ISClusResGroups {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    pub unsafe fn Refresh(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<ISClusResGroup> {
        let mut result__: <ISClusResGroup as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISClusResGroup>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CreateItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrresourcegroupname: Param0,
    ) -> ::windows::runtime::Result<ISClusResGroup> {
        let mut result__: <ISClusResGroup as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            bstrresourcegroupname.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISClusResGroup>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn DeleteItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ISClusResGroups {
    type Vtable = ISClusResGroups_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161352,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusResGroups> for ::windows::runtime::IUnknown {
    fn from(value: ISClusResGroups) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusResGroups> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusResGroups) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusResGroups {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusResGroups {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusResGroups> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusResGroups) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusResGroups> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISClusResGroups) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusResGroups
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusResGroups
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusResGroups_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        ppclusresgroup: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrresourcegroupname: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        ppresourcegroup: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusResPossibleOwnerNodes(::windows::runtime::IUnknown);
impl ISClusResPossibleOwnerNodes {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    pub unsafe fn Refresh(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<ISClusNode> {
        let mut result__: <ISClusNode as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISClusNode>(result__)
    }
    pub unsafe fn AddItem<'a, Param0: ::windows::runtime::IntoParam<'a, ISClusNode>>(
        &self,
        pnode: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            pnode.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn RemoveItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Modified(
        &self,
    ) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusResPossibleOwnerNodes {
    type Vtable = ISClusResPossibleOwnerNodes_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161358,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusResPossibleOwnerNodes> for ::windows::runtime::IUnknown {
    fn from(value: ISClusResPossibleOwnerNodes) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusResPossibleOwnerNodes> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusResPossibleOwnerNodes) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for ISClusResPossibleOwnerNodes
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &ISClusResPossibleOwnerNodes
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusResPossibleOwnerNodes>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: ISClusResPossibleOwnerNodes) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusResPossibleOwnerNodes>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: &ISClusResPossibleOwnerNodes) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusResPossibleOwnerNodes
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusResPossibleOwnerNodes
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusResPossibleOwnerNodes_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        ppnode: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pnode: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pvarmodified: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusResType(::windows::runtime::IUnknown);
impl ISClusResType {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn CommonProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn PrivateProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn CommonROProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn PrivateROProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Name(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    pub unsafe fn Delete(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Cluster(&self) -> ::windows::runtime::Result<ISCluster> {
        let mut result__: <ISCluster as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISCluster>(result__)
    }
    pub unsafe fn Resources(&self) -> ::windows::runtime::Result<ISClusResTypeResources> {
        let mut result__: <ISClusResTypeResources as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusResTypeResources>(result__)
    }
    pub unsafe fn PossibleOwnerNodes(
        &self,
    ) -> ::windows::runtime::Result<ISClusResTypePossibleOwnerNodes> {
        let mut result__: <ISClusResTypePossibleOwnerNodes as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusResTypePossibleOwnerNodes>(result__)
    }
    pub unsafe fn AvailableDisks(&self) -> ::windows::runtime::Result<ISClusDisks> {
        let mut result__: <ISClusDisks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusDisks>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusResType {
    type Vtable = ISClusResType_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161360,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusResType> for ::windows::runtime::IUnknown {
    fn from(value: ISClusResType) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusResType> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusResType) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusResType {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusResType {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusResType> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusResType) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusResType> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISClusResType) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusResType
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusResType
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusResType_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrname: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppcluster: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppclusterrestyperesources: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppownernodes: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppavailabledisks: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusResTypePossibleOwnerNodes(::windows::runtime::IUnknown);
impl ISClusResTypePossibleOwnerNodes {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    pub unsafe fn Refresh(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<ISClusNode> {
        let mut result__: <ISClusNode as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISClusNode>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusResTypePossibleOwnerNodes {
    type Vtable = ISClusResTypePossibleOwnerNodes_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161368,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusResTypePossibleOwnerNodes> for ::windows::runtime::IUnknown {
    fn from(value: ISClusResTypePossibleOwnerNodes) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusResTypePossibleOwnerNodes> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusResTypePossibleOwnerNodes) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for ISClusResTypePossibleOwnerNodes
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &ISClusResTypePossibleOwnerNodes
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusResTypePossibleOwnerNodes>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: ISClusResTypePossibleOwnerNodes) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusResTypePossibleOwnerNodes>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: &ISClusResTypePossibleOwnerNodes) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusResTypePossibleOwnerNodes
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusResTypePossibleOwnerNodes
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusResTypePossibleOwnerNodes_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        ppnode: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusResTypeResources(::windows::runtime::IUnknown);
impl ISClusResTypeResources {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    pub unsafe fn Refresh(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<ISClusResource> {
        let mut result__: <ISClusResource as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISClusResource>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CreateItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrresourcename: Param0,
        bstrgroupname: Param1,
        dwflags: CLUSTER_RESOURCE_CREATE_FLAGS,
    ) -> ::windows::runtime::Result<ISClusResource> {
        let mut result__: <ISClusResource as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            bstrresourcename.into_param().abi(),
            bstrgroupname.into_param().abi(),
            ::std::mem::transmute(dwflags),
            &mut result__,
        )
        .from_abi::<ISClusResource>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn DeleteItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ISClusResTypeResources {
    type Vtable = ISClusResTypeResources_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161364,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusResTypeResources> for ::windows::runtime::IUnknown {
    fn from(value: ISClusResTypeResources) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusResTypeResources> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusResTypeResources) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for ISClusResTypeResources
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &ISClusResTypeResources
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusResTypeResources>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: ISClusResTypeResources) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusResTypeResources>
    for super::super::System::Ole::Automation::IDispatch
{
    fn from(value: &ISClusResTypeResources) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusResTypeResources
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusResTypeResources
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusResTypeResources_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        ppclusresource: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrresourcename: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        bstrgroupname: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        dwflags: CLUSTER_RESOURCE_CREATE_FLAGS,
        ppclusterresource: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusResTypes(::windows::runtime::IUnknown);
impl ISClusResTypes {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    pub unsafe fn Refresh(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<ISClusResType> {
        let mut result__: <ISClusResType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISClusResType>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CreateItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrresourcetypename: Param0,
        bstrdisplayname: Param1,
        bstrresourcetypedll: Param2,
        dwlooksalivepollinterval: i32,
        dwisalivepollinterval: i32,
    ) -> ::windows::runtime::Result<ISClusResType> {
        let mut result__: <ISClusResType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            bstrresourcetypename.into_param().abi(),
            bstrdisplayname.into_param().abi(),
            bstrresourcetypedll.into_param().abi(),
            ::std::mem::transmute(dwlooksalivepollinterval),
            ::std::mem::transmute(dwisalivepollinterval),
            &mut result__,
        )
        .from_abi::<ISClusResType>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn DeleteItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ISClusResTypes {
    type Vtable = ISClusResTypes_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161362,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusResTypes> for ::windows::runtime::IUnknown {
    fn from(value: ISClusResTypes) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusResTypes> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusResTypes) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusResTypes {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusResTypes {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusResTypes> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusResTypes) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusResTypes> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISClusResTypes) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusResTypes
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusResTypes
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusResTypes_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        ppclusrestype: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrresourcetypename: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        bstrdisplayname: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        bstrresourcetypedll: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        dwlooksalivepollinterval: i32,
        dwisalivepollinterval: i32,
        ppresourcetype: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusResource(::windows::runtime::IUnknown);
impl ISClusResource {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn CommonProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn PrivateProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn CommonROProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn PrivateROProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn Handle(&self) -> ::windows::runtime::Result<usize> {
        let mut result__: <usize as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<usize>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Name(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetName<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrresourcename: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            bstrresourcename.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn State(&self) -> ::windows::runtime::Result<CLUSTER_RESOURCE_STATE> {
        let mut result__: <CLUSTER_RESOURCE_STATE as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<CLUSTER_RESOURCE_STATE>(result__)
    }
    pub unsafe fn CoreFlag(&self) -> ::windows::runtime::Result<CLUS_FLAGS> {
        let mut result__: <CLUS_FLAGS as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<CLUS_FLAGS>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn BecomeQuorumResource<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrdevicepath: Param0,
        lmaxlogsize: i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            bstrdevicepath.into_param().abi(),
            ::std::mem::transmute(lmaxlogsize),
        )
        .ok()
    }
    pub unsafe fn Delete(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).17)(::std::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Fail(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).18)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Online(
        &self,
        ntimeout: i32,
    ) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).19)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ntimeout),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Offline(
        &self,
        ntimeout: i32,
    ) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).20)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ntimeout),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    pub unsafe fn ChangeResourceGroup<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ISClusResGroup>,
    >(
        &self,
        presourcegroup: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(
            ::std::mem::transmute_copy(self),
            presourcegroup.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AddResourceNode<'a, Param0: ::windows::runtime::IntoParam<'a, ISClusNode>>(
        &self,
        pnode: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).22)(
            ::std::mem::transmute_copy(self),
            pnode.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn RemoveResourceNode<'a, Param0: ::windows::runtime::IntoParam<'a, ISClusNode>>(
        &self,
        pnode: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).23)(
            ::std::mem::transmute_copy(self),
            pnode.into_param().abi(),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn CanResourceBeDependent<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ISClusResource>,
    >(
        &self,
        presource: Param0,
    ) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).24)(
            ::std::mem::transmute_copy(self),
            presource.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    pub unsafe fn PossibleOwnerNodes(
        &self,
    ) -> ::windows::runtime::Result<ISClusResPossibleOwnerNodes> {
        let mut result__: <ISClusResPossibleOwnerNodes as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).25)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusResPossibleOwnerNodes>(result__)
    }
    pub unsafe fn Dependencies(&self) -> ::windows::runtime::Result<ISClusResDependencies> {
        let mut result__: <ISClusResDependencies as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).26)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusResDependencies>(result__)
    }
    pub unsafe fn Dependents(&self) -> ::windows::runtime::Result<ISClusResDependents> {
        let mut result__: <ISClusResDependents as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusResDependents>(result__)
    }
    pub unsafe fn Group(&self) -> ::windows::runtime::Result<ISClusResGroup> {
        let mut result__: <ISClusResGroup as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).28)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusResGroup>(result__)
    }
    pub unsafe fn OwnerNode(&self) -> ::windows::runtime::Result<ISClusNode> {
        let mut result__: <ISClusNode as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).29)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusNode>(result__)
    }
    pub unsafe fn Cluster(&self) -> ::windows::runtime::Result<ISCluster> {
        let mut result__: <ISCluster as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).30)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISCluster>(result__)
    }
    pub unsafe fn ClassInfo(&self) -> ::windows::runtime::Result<CLUSTER_RESOURCE_CLASS> {
        let mut result__: <CLUSTER_RESOURCE_CLASS as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).31)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<CLUSTER_RESOURCE_CLASS>(result__)
    }
    pub unsafe fn Disk(&self) -> ::windows::runtime::Result<ISClusDisk> {
        let mut result__: <ISClusDisk as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).32)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusDisk>(result__)
    }
    pub unsafe fn RegistryKeys(&self) -> ::windows::runtime::Result<ISClusRegistryKeys> {
        let mut result__: <ISClusRegistryKeys as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).33)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusRegistryKeys>(result__)
    }
    pub unsafe fn CryptoKeys(&self) -> ::windows::runtime::Result<ISClusCryptoKeys> {
        let mut result__: <ISClusCryptoKeys as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).34)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusCryptoKeys>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn TypeName(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).35)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    pub unsafe fn Type(&self) -> ::windows::runtime::Result<ISClusResType> {
        let mut result__: <ISClusResType as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).36)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusResType>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn MaintenanceMode(
        &self,
    ) -> ::windows::runtime::Result<super::super::Foundation::BOOL> {
        let mut result__: <super::super::Foundation::BOOL as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).37)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BOOL>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetMaintenanceMode<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        bmaintenancemode: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).38)(
            ::std::mem::transmute_copy(self),
            bmaintenancemode.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ISClusResource {
    type Vtable = ISClusResource_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161354,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusResource> for ::windows::runtime::IUnknown {
    fn from(value: ISClusResource) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusResource> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusResource) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusResource {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusResource {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusResource> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusResource) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusResource> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISClusResource) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusResource
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusResource
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusResource_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phandle: *mut usize,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrname: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrresourcename: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwstate: *mut CLUSTER_RESOURCE_STATE,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dwcoreflag: *mut CLUS_FLAGS,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrdevicepath: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        lmaxlogsize: i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ntimeout: i32,
        pvarpending: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ntimeout: i32,
        pvarpending: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        presourcegroup: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pnode: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pnode: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        presource: ::windows::runtime::RawPtr,
        pvardependent: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppownernodes: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppresdependencies: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppresdependents: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppresgroup: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppownernode: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppcluster: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        prcclassinfo: *mut CLUSTER_RESOURCE_CLASS,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppdisk: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppregistrykeys: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppcryptokeys: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrtypename: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppresourcetype: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbmaintenancemode: *mut super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bmaintenancemode: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusResources(::windows::runtime::IUnknown);
impl ISClusResources {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    pub unsafe fn Refresh(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<ISClusResource> {
        let mut result__: <ISClusResource as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<ISClusResource>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CreateItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrresourcename: Param0,
        bstrresourcetype: Param1,
        bstrgroupname: Param2,
        dwflags: CLUSTER_RESOURCE_CREATE_FLAGS,
    ) -> ::windows::runtime::Result<ISClusResource> {
        let mut result__: <ISClusResource as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            bstrresourcename.into_param().abi(),
            bstrresourcetype.into_param().abi(),
            bstrgroupname.into_param().abi(),
            ::std::mem::transmute(dwflags),
            &mut result__,
        )
        .from_abi::<ISClusResource>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn DeleteItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for ISClusResources {
    type Vtable = ISClusResources_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161356,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusResources> for ::windows::runtime::IUnknown {
    fn from(value: ISClusResources) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusResources> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusResources) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusResources {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusResources {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusResources> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusResources) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusResources> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISClusResources) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusResources
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusResources
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusResources_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        ppclusresource: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrresourcename: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        bstrresourcetype: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        bstrgroupname: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        dwflags: CLUSTER_RESOURCE_CREATE_FLAGS,
        ppclusterresource: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusScsiAddress(::windows::runtime::IUnknown);
impl ISClusScsiAddress {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn PortNumber(
        &self,
    ) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn PathId(&self) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn TargetId(
        &self,
    ) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Lun(&self) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusScsiAddress {
    type Vtable = ISClusScsiAddress_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161384,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusScsiAddress> for ::windows::runtime::IUnknown {
    fn from(value: ISClusScsiAddress) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusScsiAddress> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusScsiAddress) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusScsiAddress {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusScsiAddress {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusScsiAddress> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusScsiAddress) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusScsiAddress> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISClusScsiAddress) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusScsiAddress
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusScsiAddress
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusScsiAddress_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pvarportnumber: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pvarpathid: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pvartargetid: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pvarlun: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusVersion(::windows::runtime::IUnknown);
impl ISClusVersion {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Name(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    pub unsafe fn MajorVersion(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn MinorVersion(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn BuildNumber(&self) -> ::windows::runtime::Result<i16> {
        let mut result__: <i16 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i16>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn VendorId(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CSDVersion(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    pub unsafe fn ClusterHighestVersion(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn ClusterLowestVersion(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn Flags(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn MixedVersion(
        &self,
    ) -> ::windows::runtime::Result<super::super::System::Com::VARIANT> {
        let mut result__: <super::super::System::Com::VARIANT as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::System::Com::VARIANT>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusVersion {
    type Vtable = ISClusVersion_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161366,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusVersion> for ::windows::runtime::IUnknown {
    fn from(value: ISClusVersion) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusVersion> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusVersion) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusVersion {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusVersion {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusVersion> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusVersion) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusVersion> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISClusVersion) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusVersion
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusVersion
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusVersion_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrclustername: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pnmajorversion: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pnminorversion: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pnbuildnumber: *mut i16,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrvendorid: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrcsdversion: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pnclusterhighestversion: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pnclusterlowestversion: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pnflags: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pvarmixedversion: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISCluster(::windows::runtime::IUnknown);
impl ISCluster {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn CommonProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn PrivateProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn CommonROProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).9)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn PrivateROProperties(&self) -> ::windows::runtime::Result<ISClusProperties> {
        let mut result__: <ISClusProperties as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusProperties>(result__)
    }
    pub unsafe fn Handle(&self) -> ::windows::runtime::Result<usize> {
        let mut result__: <usize as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<usize>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Open<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrclustername: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).12)(
            ::std::mem::transmute_copy(self),
            bstrclustername.into_param().abi(),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Name(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).13)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetName<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        bstrclustername: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).14)(
            ::std::mem::transmute_copy(self),
            bstrclustername.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Version(&self) -> ::windows::runtime::Result<ISClusVersion> {
        let mut result__: <ISClusVersion as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).15)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusVersion>(result__)
    }
    pub unsafe fn SetQuorumResource<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ISClusResource>,
    >(
        &self,
        pclusterresource: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).16)(
            ::std::mem::transmute_copy(self),
            pclusterresource.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn QuorumResource(&self) -> ::windows::runtime::Result<ISClusResource> {
        let mut result__: <ISClusResource as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).17)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusResource>(result__)
    }
    pub unsafe fn QuorumLogSize(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).18)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn SetQuorumLogSize(&self, nlogsize: i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).19)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(nlogsize),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn QuorumPath(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).20)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetQuorumPath<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        ppath: Param0,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).21)(
            ::std::mem::transmute_copy(self),
            ppath.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Nodes(&self) -> ::windows::runtime::Result<ISClusNodes> {
        let mut result__: <ISClusNodes as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).22)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusNodes>(result__)
    }
    pub unsafe fn ResourceGroups(&self) -> ::windows::runtime::Result<ISClusResGroups> {
        let mut result__: <ISClusResGroups as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).23)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusResGroups>(result__)
    }
    pub unsafe fn Resources(&self) -> ::windows::runtime::Result<ISClusResources> {
        let mut result__: <ISClusResources as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).24)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusResources>(result__)
    }
    pub unsafe fn ResourceTypes(&self) -> ::windows::runtime::Result<ISClusResTypes> {
        let mut result__: <ISClusResTypes as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).25)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusResTypes>(result__)
    }
    pub unsafe fn Networks(&self) -> ::windows::runtime::Result<ISClusNetworks> {
        let mut result__: <ISClusNetworks as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).26)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusNetworks>(result__)
    }
    pub unsafe fn NetInterfaces(&self) -> ::windows::runtime::Result<ISClusNetInterfaces> {
        let mut result__: <ISClusNetInterfaces as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).27)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<ISClusNetInterfaces>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISCluster {
    type Vtable = ISCluster_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161316,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISCluster> for ::windows::runtime::IUnknown {
    fn from(value: ISCluster) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISCluster> for ::windows::runtime::IUnknown {
    fn from(value: &ISCluster) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISCluster {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISCluster {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISCluster> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISCluster) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISCluster> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISCluster) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISCluster
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISCluster
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISCluster_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppproperties: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        phandle: *mut usize,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrclustername: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrname: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        bstrclustername: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppclusversion: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pclusterresource: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pclusterresource: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pnlogsize: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        nlogsize: i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pppath: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppath: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppnodes: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppclusterresourcegroups: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppclusterresources: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppresourcetypes: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppnetworks: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ppnetinterfaces: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISClusterNames(::windows::runtime::IUnknown);
impl ISClusterNames {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    pub unsafe fn Refresh(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn DomainName(&self) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).11)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISClusterNames {
    type Vtable = ISClusterNames_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161324,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISClusterNames> for ::windows::runtime::IUnknown {
    fn from(value: ISClusterNames) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISClusterNames> for ::windows::runtime::IUnknown {
    fn from(value: &ISClusterNames) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISClusterNames {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISClusterNames {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISClusterNames> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISClusterNames) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISClusterNames> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISClusterNames) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISClusterNames
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISClusterNames
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISClusterNames_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pbstrclustername: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pbstrdomainname: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct ISDomainNames(::windows::runtime::IUnknown);
impl ISDomainNames {
    pub unsafe fn GetTypeInfoCount(&self) -> ::windows::runtime::Result<u32> {
        let mut result__: <u32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<u32>(result__)
    }
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub unsafe fn GetTypeInfo(
        &self,
        itinfo: u32,
        lcid: u32,
    ) -> ::windows::runtime::Result<super::super::System::Ole::Automation::ITypeInfo> {
        let mut result__ : < super::super::System::Ole::Automation:: ITypeInfo as :: windows :: runtime :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(itinfo),
            ::std::mem::transmute(lcid),
            &mut result__,
        )
        .from_abi::<super::super::System::Ole::Automation::ITypeInfo>(result__)
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetIDsOfNames(
        &self,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).5)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(rgsznames),
            ::std::mem::transmute(cnames),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(rgdispid),
        )
        .ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Invoke(
        &self,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut super::super::System::Com::VARIANT,
        pexcepinfo: *mut super::super::System::Ole::Automation::EXCEPINFO,
        puargerr: *mut u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).6)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(dispidmember),
            ::std::mem::transmute(riid),
            ::std::mem::transmute(lcid),
            ::std::mem::transmute(wflags),
            ::std::mem::transmute(pdispparams),
            ::std::mem::transmute(pvarresult),
            ::std::mem::transmute(pexcepinfo),
            ::std::mem::transmute(puargerr),
        )
        .ok()
    }
    pub unsafe fn Count(&self) -> ::windows::runtime::Result<i32> {
        let mut result__: <i32 as ::windows::runtime::Abi>::Abi = ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).7)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<i32>(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows::runtime::Result<::windows::runtime::IUnknown> {
        let mut result__: <::windows::runtime::IUnknown as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).8)(
            ::std::mem::transmute_copy(self),
            &mut result__,
        )
        .from_abi::<::windows::runtime::IUnknown>(result__)
    }
    pub unsafe fn Refresh(&self) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).9)(::std::mem::transmute_copy(self)).ok()
    }
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub unsafe fn Item<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::System::Com::VARIANT>,
    >(
        &self,
        varindex: Param0,
    ) -> ::windows::runtime::Result<super::super::Foundation::BSTR> {
        let mut result__: <super::super::Foundation::BSTR as ::windows::runtime::Abi>::Abi =
            ::std::mem::zeroed();
        (::windows::runtime::Interface::vtable(self).10)(
            ::std::mem::transmute_copy(self),
            varindex.into_param().abi(),
            &mut result__,
        )
        .from_abi::<super::super::Foundation::BSTR>(result__)
    }
}
unsafe impl ::windows::runtime::Interface for ISDomainNames {
    type Vtable = ISDomainNames_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        4075161314,
        9777,
        4561,
        [137, 241, 0, 160, 201, 13, 6, 30],
    );
}
impl ::std::convert::From<ISDomainNames> for ::windows::runtime::IUnknown {
    fn from(value: ISDomainNames) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&ISDomainNames> for ::windows::runtime::IUnknown {
    fn from(value: &ISDomainNames) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for ISDomainNames {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &ISDomainNames {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<ISDomainNames> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: ISDomainNames) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl ::std::convert::From<&ISDomainNames> for super::super::System::Ole::Automation::IDispatch {
    fn from(value: &ISDomainNames) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for ISDomainNames
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(self))
    }
}
#[cfg(feature = "Win32_System_Ole_Automation")]
impl<'a> ::windows::runtime::IntoParam<'a, super::super::System::Ole::Automation::IDispatch>
    for &ISDomainNames
{
    fn into_param(
        self,
    ) -> ::windows::runtime::Param<'a, super::super::System::Ole::Automation::IDispatch> {
        ::windows::runtime::Param::Owned(::std::convert::Into::<
            super::super::System::Ole::Automation::IDispatch,
        >::into(::std::clone::Clone::clone(self)))
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISDomainNames_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pctinfo: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_System_Ole_Automation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        itinfo: u32,
        lcid: u32,
        pptinfo: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole_Automation"))] usize,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        riid: *const ::windows::runtime::GUID,
        rgsznames: *const super::super::Foundation::PWSTR,
        cnames: u32,
        lcid: u32,
        rgdispid: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        dispidmember: i32,
        riid: *const ::windows::runtime::GUID,
        lcid: u32,
        wflags: u16,
        pdispparams: *const super::super::System::Ole::Automation::DISPPARAMS,
        pvarresult: *mut ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pexcepinfo: *mut ::std::mem::ManuallyDrop<super::super::System::Ole::Automation::EXCEPINFO>,
        puargerr: *mut u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        plcount: *mut i32,
    ) -> ::windows::runtime::HRESULT,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        retval: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> ::windows::runtime::HRESULT,
    #[cfg(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    ))]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        varindex: ::std::mem::ManuallyDrop<super::super::System::Com::VARIANT>,
        pbstrdomainname: *mut ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(all(
        feature = "Win32_Foundation",
        feature = "Win32_System_Com",
        feature = "Win32_System_Ole_Automation"
    )))]
    usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IWCContextMenuCallback(::windows::runtime::IUnknown);
impl IWCContextMenuCallback {
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn AddExtensionMenuItem<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BSTR>,
    >(
        &self,
        lpszname: Param0,
        lpszstatusbartext: Param1,
        ncommandid: u32,
        nsubmenucommandid: u32,
        uflags: u32,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            lpszname.into_param().abi(),
            lpszstatusbartext.into_param().abi(),
            ::std::mem::transmute(ncommandid),
            ::std::mem::transmute(nsubmenucommandid),
            ::std::mem::transmute(uflags),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWCContextMenuCallback {
    type Vtable = IWCContextMenuCallback_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2547965540,
        64619,
        4559,
        [181, 245, 0, 160, 201, 10, 181, 5],
    );
}
impl ::std::convert::From<IWCContextMenuCallback> for ::windows::runtime::IUnknown {
    fn from(value: IWCContextMenuCallback) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IWCContextMenuCallback> for ::windows::runtime::IUnknown {
    fn from(value: &IWCContextMenuCallback) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IWCContextMenuCallback
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IWCContextMenuCallback
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWCContextMenuCallback_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        lpszname: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        lpszstatusbartext: ::std::mem::ManuallyDrop<super::super::Foundation::BSTR>,
        ncommandid: u32,
        nsubmenucommandid: u32,
        uflags: u32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IWCPropertySheetCallback(::windows::runtime::IUnknown);
impl IWCPropertySheetCallback {
    pub unsafe fn AddPropertySheetPage(&self, hpage: *const i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(hpage),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWCPropertySheetCallback {
    type Vtable = IWCPropertySheetCallback_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2547965536,
        64619,
        4559,
        [181, 245, 0, 160, 201, 10, 181, 5],
    );
}
impl ::std::convert::From<IWCPropertySheetCallback> for ::windows::runtime::IUnknown {
    fn from(value: IWCPropertySheetCallback) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IWCPropertySheetCallback> for ::windows::runtime::IUnknown {
    fn from(value: &IWCPropertySheetCallback) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IWCPropertySheetCallback
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IWCPropertySheetCallback
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWCPropertySheetCallback_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hpage: *const i32,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IWCWizard97Callback(::windows::runtime::IUnknown);
impl IWCWizard97Callback {
    pub unsafe fn AddWizard97Page(&self, hpage: *const i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(hpage),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn EnableNext<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        hpage: *const i32,
        benable: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(hpage),
            benable.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWCWizard97Callback {
    type Vtable = IWCWizard97Callback_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2547965543,
        64619,
        4559,
        [181, 245, 0, 160, 201, 10, 181, 5],
    );
}
impl ::std::convert::From<IWCWizard97Callback> for ::windows::runtime::IUnknown {
    fn from(value: IWCWizard97Callback) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IWCWizard97Callback> for ::windows::runtime::IUnknown {
    fn from(value: &IWCWizard97Callback) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWCWizard97Callback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IWCWizard97Callback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWCWizard97Callback_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hpage: *const i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hpage: *const i32,
        benable: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IWCWizardCallback(::windows::runtime::IUnknown);
impl IWCWizardCallback {
    pub unsafe fn AddWizardPage(&self, hpage: *const i32) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(hpage),
        )
        .ok()
    }
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn EnableNext<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    >(
        &self,
        hpage: *const i32,
        benable: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).4)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(hpage),
            benable.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWCWizardCallback {
    type Vtable = IWCWizardCallback_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2547965538,
        64619,
        4559,
        [181, 245, 0, 160, 201, 10, 181, 5],
    );
}
impl ::std::convert::From<IWCWizardCallback> for ::windows::runtime::IUnknown {
    fn from(value: IWCWizardCallback) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IWCWizardCallback> for ::windows::runtime::IUnknown {
    fn from(value: &IWCWizardCallback) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWCWizardCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IWCWizardCallback {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWCWizardCallback_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hpage: *const i32,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        hpage: *const i32,
        benable: super::super::Foundation::BOOL,
    ) -> ::windows::runtime::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))] usize,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IWEExtendContextMenu(::windows::runtime::IUnknown);
impl IWEExtendContextMenu {
    pub unsafe fn AddContextMenuItems<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
        Param1: ::windows::runtime::IntoParam<'a, IWCContextMenuCallback>,
    >(
        &self,
        pidata: Param0,
        picallback: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pidata.into_param().abi(),
            picallback.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWEExtendContextMenu {
    type Vtable = IWEExtendContextMenu_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2547965541,
        64619,
        4559,
        [181, 245, 0, 160, 201, 10, 181, 5],
    );
}
impl ::std::convert::From<IWEExtendContextMenu> for ::windows::runtime::IUnknown {
    fn from(value: IWEExtendContextMenu) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IWEExtendContextMenu> for ::windows::runtime::IUnknown {
    fn from(value: &IWEExtendContextMenu) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWEExtendContextMenu {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IWEExtendContextMenu {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWEExtendContextMenu_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pidata: ::windows::runtime::RawPtr,
        picallback: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IWEExtendPropertySheet(::windows::runtime::IUnknown);
impl IWEExtendPropertySheet {
    pub unsafe fn CreatePropertySheetPages<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
        Param1: ::windows::runtime::IntoParam<'a, IWCPropertySheetCallback>,
    >(
        &self,
        pidata: Param0,
        picallback: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pidata.into_param().abi(),
            picallback.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWEExtendPropertySheet {
    type Vtable = IWEExtendPropertySheet_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2547965537,
        64619,
        4559,
        [181, 245, 0, 160, 201, 10, 181, 5],
    );
}
impl ::std::convert::From<IWEExtendPropertySheet> for ::windows::runtime::IUnknown {
    fn from(value: IWEExtendPropertySheet) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IWEExtendPropertySheet> for ::windows::runtime::IUnknown {
    fn from(value: &IWEExtendPropertySheet) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for IWEExtendPropertySheet
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>
    for &IWEExtendPropertySheet
{
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWEExtendPropertySheet_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pidata: ::windows::runtime::RawPtr,
        picallback: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IWEExtendWizard(::windows::runtime::IUnknown);
impl IWEExtendWizard {
    pub unsafe fn CreateWizardPages<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
        Param1: ::windows::runtime::IntoParam<'a, IWCWizardCallback>,
    >(
        &self,
        pidata: Param0,
        picallback: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pidata.into_param().abi(),
            picallback.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWEExtendWizard {
    type Vtable = IWEExtendWizard_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2547965539,
        64619,
        4559,
        [181, 245, 0, 160, 201, 10, 181, 5],
    );
}
impl ::std::convert::From<IWEExtendWizard> for ::windows::runtime::IUnknown {
    fn from(value: IWEExtendWizard) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IWEExtendWizard> for ::windows::runtime::IUnknown {
    fn from(value: &IWEExtendWizard) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWEExtendWizard {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IWEExtendWizard {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWEExtendWizard_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pidata: ::windows::runtime::RawPtr,
        picallback: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IWEExtendWizard97(::windows::runtime::IUnknown);
impl IWEExtendWizard97 {
    pub unsafe fn CreateWizard97Pages<
        'a,
        Param0: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
        Param1: ::windows::runtime::IntoParam<'a, IWCWizard97Callback>,
    >(
        &self,
        pidata: Param0,
        picallback: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            pidata.into_param().abi(),
            picallback.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWEExtendWizard97 {
    type Vtable = IWEExtendWizard97_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2547965544,
        64619,
        4559,
        [181, 245, 0, 160, 201, 10, 181, 5],
    );
}
impl ::std::convert::From<IWEExtendWizard97> for ::windows::runtime::IUnknown {
    fn from(value: IWEExtendWizard97) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IWEExtendWizard97> for ::windows::runtime::IUnknown {
    fn from(value: &IWEExtendWizard97) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWEExtendWizard97 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IWEExtendWizard97 {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWEExtendWizard97_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        pidata: ::windows::runtime::RawPtr,
        picallback: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[repr(transparent)]
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: clone :: Clone,
    :: std :: fmt :: Debug,
)]
pub struct IWEInvokeCommand(::windows::runtime::IUnknown);
impl IWEInvokeCommand {
    pub unsafe fn InvokeCommand<
        'a,
        Param1: ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown>,
    >(
        &self,
        ncommandid: u32,
        pidata: Param1,
    ) -> ::windows::runtime::Result<()> {
        (::windows::runtime::Interface::vtable(self).3)(
            ::std::mem::transmute_copy(self),
            ::std::mem::transmute(ncommandid),
            pidata.into_param().abi(),
        )
        .ok()
    }
}
unsafe impl ::windows::runtime::Interface for IWEInvokeCommand {
    type Vtable = IWEInvokeCommand_abi;
    const IID: ::windows::runtime::GUID = ::windows::runtime::GUID::from_values(
        2547965542,
        64619,
        4559,
        [181, 245, 0, 160, 201, 10, 181, 5],
    );
}
impl ::std::convert::From<IWEInvokeCommand> for ::windows::runtime::IUnknown {
    fn from(value: IWEInvokeCommand) -> Self {
        unsafe { ::std::mem::transmute(value) }
    }
}
impl ::std::convert::From<&IWEInvokeCommand> for ::windows::runtime::IUnknown {
    fn from(value: &IWEInvokeCommand) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for IWEInvokeCommand {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(self),
        )
    }
}
impl<'a> ::windows::runtime::IntoParam<'a, ::windows::runtime::IUnknown> for &IWEInvokeCommand {
    fn into_param(self) -> ::windows::runtime::Param<'a, ::windows::runtime::IUnknown> {
        ::windows::runtime::Param::Owned(
            ::std::convert::Into::<::windows::runtime::IUnknown>::into(::std::clone::Clone::clone(
                self,
            )),
        )
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWEInvokeCommand_abi(
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        iid: &::windows::runtime::GUID,
        interface: *mut ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub unsafe extern "system" fn(this: ::windows::runtime::RawPtr) -> u32,
    pub  unsafe extern "system" fn(
        this: ::windows::runtime::RawPtr,
        ncommandid: u32,
        pidata: ::windows::runtime::RawPtr,
    ) -> ::windows::runtime::HRESULT,
);
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn InitializeClusterHealthFault(clusterhealthfault: *mut CLUSTER_HEALTH_FAULT) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn InitializeClusterHealthFault(clusterhealthfault: *mut CLUSTER_HEALTH_FAULT) -> u32;
        }
        ::std::mem::transmute(InitializeClusterHealthFault(::std::mem::transmute(
            clusterhealthfault,
        )))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn InitializeClusterHealthFaultArray(
    clusterhealthfaultarray: *mut CLUSTER_HEALTH_FAULT_ARRAY,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn InitializeClusterHealthFaultArray(
                clusterhealthfaultarray: *mut CLUSTER_HEALTH_FAULT_ARRAY,
            ) -> u32;
        }
        ::std::mem::transmute(InitializeClusterHealthFaultArray(::std::mem::transmute(
            clusterhealthfaultarray,
        )))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn IsFileOnClusterSharedVolume<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    lpszpathname: Param0,
    pbfileisonsharedvolume: *mut super::super::Foundation::BOOL,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn IsFileOnClusterSharedVolume(
                lpszpathname: super::super::Foundation::PWSTR,
                pbfileisonsharedvolume: *mut super::super::Foundation::BOOL,
            ) -> u32;
        }
        ::std::mem::transmute(IsFileOnClusterSharedVolume(
            lpszpathname.into_param().abi(),
            ::std::mem::transmute(pbfileisonsharedvolume),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const LOCKED_MODE_FLAGS_DONT_REMOVE_FROM_MOVE_QUEUE: u32 = 1u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct LOG_LEVEL(pub i32);
pub const LOG_INFORMATION: LOG_LEVEL = LOG_LEVEL(0i32);
pub const LOG_WARNING: LOG_LEVEL = LOG_LEVEL(1i32);
pub const LOG_ERROR: LOG_LEVEL = LOG_LEVEL(2i32);
pub const LOG_SEVERE: LOG_LEVEL = LOG_LEVEL(3i32);
impl ::std::convert::From<i32> for LOG_LEVEL {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for LOG_LEVEL {
    type Abi = Self;
    type DefaultType = Self;
}
pub type LPGROUP_CALLBACK_EX = unsafe extern "system" fn(
    param0: *mut _HCLUSTER,
    param1: *mut _HGROUP,
    param2: *mut _HGROUP,
    param3: *mut ::std::ffi::c_void,
) -> u32;
pub type LPNODE_CALLBACK = unsafe extern "system" fn(
    param0: *mut _HCLUSTER,
    param1: *mut _HNODE,
    param2: CLUSTER_NODE_STATE,
    param3: *mut ::std::ffi::c_void,
) -> u32;
pub type LPRESOURCE_CALLBACK = unsafe extern "system" fn(
    param0: *mut _HRESOURCE,
    param1: *mut _HRESOURCE,
    param2: *mut ::std::ffi::c_void,
) -> u32;
pub type LPRESOURCE_CALLBACK_EX = unsafe extern "system" fn(
    param0: *mut _HCLUSTER,
    param1: *mut _HRESOURCE,
    param2: *mut _HRESOURCE,
    param3: *mut ::std::ffi::c_void,
) -> u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct MAINTENANCE_MODE_TYPE_ENUM(pub i32);
pub const MaintenanceModeTypeDisableIsAliveCheck: MAINTENANCE_MODE_TYPE_ENUM =
    MAINTENANCE_MODE_TYPE_ENUM(1i32);
pub const MaintenanceModeTypeOfflineResource: MAINTENANCE_MODE_TYPE_ENUM =
    MAINTENANCE_MODE_TYPE_ENUM(2i32);
pub const MaintenanceModeTypeUnclusterResource: MAINTENANCE_MODE_TYPE_ENUM =
    MAINTENANCE_MODE_TYPE_ENUM(3i32);
impl ::std::convert::From<i32> for MAINTENANCE_MODE_TYPE_ENUM {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for MAINTENANCE_MODE_TYPE_ENUM {
    type Abi = Self;
    type DefaultType = Self;
}
pub const MAINTENANCE_MODE_V2_SIG: u32 = 2881155087u32;
pub const MAX_CLUSTERNAME_LENGTH: u32 = 63u32;
pub const MAX_CO_PASSWORD_LENGTH: u32 = 16u32;
pub const MAX_CO_PASSWORD_LENGTHEX: u32 = 127u32;
pub const MAX_CO_PASSWORD_STORAGEEX: u32 = 128u32;
pub const MAX_CREATINGDC_LENGTH: u32 = 256u32;
pub const MAX_OBJECTID: u32 = 64u32;
pub const MN_UPGRADE_VERSION: u32 = 3u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct MONITOR_STATE {
    pub LastUpdate: i64,
    pub State: RESOURCE_MONITOR_STATE,
    pub ActiveResource: super::super::Foundation::HANDLE,
    pub ResmonStop: super::super::Foundation::BOOL,
}
#[cfg(feature = "Win32_Foundation")]
impl MONITOR_STATE {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for MONITOR_STATE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for MONITOR_STATE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("MONITOR_STATE")
            .field("LastUpdate", &self.LastUpdate)
            .field("State", &self.State)
            .field("ActiveResource", &self.ActiveResource)
            .field("ResmonStop", &self.ResmonStop)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for MONITOR_STATE {
    fn eq(&self, other: &Self) -> bool {
        self.LastUpdate == other.LastUpdate
            && self.State == other.State
            && self.ActiveResource == other.ActiveResource
            && self.ResmonStop == other.ResmonStop
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for MONITOR_STATE {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for MONITOR_STATE {
    type Abi = Self;
    type DefaultType = Self;
}
#[inline]
pub unsafe fn MoveClusterGroup(hgroup: *const _HGROUP, hdestinationnode: *const _HNODE) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MoveClusterGroup(hgroup: *const _HGROUP, hdestinationnode: *const _HNODE) -> u32;
        }
        ::std::mem::transmute(MoveClusterGroup(
            ::std::mem::transmute(hgroup),
            ::std::mem::transmute(hdestinationnode),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn MoveClusterGroupEx(
    hgroup: *const _HGROUP,
    hdestinationnode: *const _HNODE,
    dwmoveflags: u32,
    lpinbuffer: *const u8,
    cbinbuffersize: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn MoveClusterGroupEx(
                hgroup: *const _HGROUP,
                hdestinationnode: *const _HNODE,
                dwmoveflags: u32,
                lpinbuffer: *const u8,
                cbinbuffersize: u32,
            ) -> u32;
        }
        ::std::mem::transmute(MoveClusterGroupEx(
            ::std::mem::transmute(hgroup),
            ::std::mem::transmute(hdestinationnode),
            ::std::mem::transmute(dwmoveflags),
            ::std::mem::transmute(lpinbuffer),
            ::std::mem::transmute(cbinbuffersize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const NINETEEN_H1_UPGRADE_VERSION: u32 = 1u32;
pub const NINETEEN_H2_UPGRADE_VERSION: u32 = 2u32;
pub const NNLEN: u32 = 80u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct NODE_CLUSTER_STATE(pub i32);
pub const ClusterStateNotInstalled: NODE_CLUSTER_STATE = NODE_CLUSTER_STATE(0i32);
pub const ClusterStateNotConfigured: NODE_CLUSTER_STATE = NODE_CLUSTER_STATE(1i32);
pub const ClusterStateNotRunning: NODE_CLUSTER_STATE = NODE_CLUSTER_STATE(3i32);
pub const ClusterStateRunning: NODE_CLUSTER_STATE = NODE_CLUSTER_STATE(19i32);
impl ::std::convert::From<i32> for NODE_CLUSTER_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for NODE_CLUSTER_STATE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct NOTIFY_FILTER_AND_TYPE {
    pub dwObjectType: u32,
    pub FilterFlags: i64,
}
impl NOTIFY_FILTER_AND_TYPE {}
impl ::std::default::Default for NOTIFY_FILTER_AND_TYPE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for NOTIFY_FILTER_AND_TYPE {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("NOTIFY_FILTER_AND_TYPE")
            .field("dwObjectType", &self.dwObjectType)
            .field("FilterFlags", &self.FilterFlags)
            .finish()
    }
}
impl ::std::cmp::PartialEq for NOTIFY_FILTER_AND_TYPE {
    fn eq(&self, other: &Self) -> bool {
        self.dwObjectType == other.dwObjectType && self.FilterFlags == other.FilterFlags
    }
}
impl ::std::cmp::Eq for NOTIFY_FILTER_AND_TYPE {}
unsafe impl ::windows::runtime::Abi for NOTIFY_FILTER_AND_TYPE {
    type Abi = Self;
    type DefaultType = Self;
}
pub const NT10_MAJOR_VERSION: u32 = 9u32;
pub const NT11_MAJOR_VERSION: u32 = 10u32;
pub const NT12_MAJOR_VERSION: u32 = 11u32;
pub const NT13_MAJOR_VERSION: u32 = 12u32;
pub const NT4SP4_MAJOR_VERSION: u32 = 2u32;
pub const NT4_MAJOR_VERSION: u32 = 1u32;
pub const NT51_MAJOR_VERSION: u32 = 4u32;
pub const NT5_MAJOR_VERSION: u32 = 3u32;
pub const NT6_MAJOR_VERSION: u32 = 5u32;
pub const NT7_MAJOR_VERSION: u32 = 6u32;
pub const NT8_MAJOR_VERSION: u32 = 7u32;
pub const NT9_MAJOR_VERSION: u32 = 8u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct NodeUtilizationInfoElement {
    pub Id: u64,
    pub AvailableMemory: u64,
    pub AvailableMemoryAfterReclamation: u64,
}
impl NodeUtilizationInfoElement {}
impl ::std::default::Default for NodeUtilizationInfoElement {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for NodeUtilizationInfoElement {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("NodeUtilizationInfoElement")
            .field("Id", &self.Id)
            .field("AvailableMemory", &self.AvailableMemory)
            .field(
                "AvailableMemoryAfterReclamation",
                &self.AvailableMemoryAfterReclamation,
            )
            .finish()
    }
}
impl ::std::cmp::PartialEq for NodeUtilizationInfoElement {
    fn eq(&self, other: &Self) -> bool {
        self.Id == other.Id
            && self.AvailableMemory == other.AvailableMemory
            && self.AvailableMemoryAfterReclamation == other.AvailableMemoryAfterReclamation
    }
}
impl ::std::cmp::Eq for NodeUtilizationInfoElement {}
unsafe impl ::windows::runtime::Abi for NodeUtilizationInfoElement {
    type Abi = Self;
    type DefaultType = Self;
}
#[inline]
pub unsafe fn OfflineClusterGroup(hgroup: *const _HGROUP) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OfflineClusterGroup(hgroup: *const _HGROUP) -> u32;
        }
        ::std::mem::transmute(OfflineClusterGroup(::std::mem::transmute(hgroup)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn OfflineClusterGroupEx(
    hgroup: *const _HGROUP,
    dwofflineflags: u32,
    lpinbuffer: *const u8,
    cbinbuffersize: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OfflineClusterGroupEx(
                hgroup: *const _HGROUP,
                dwofflineflags: u32,
                lpinbuffer: *const u8,
                cbinbuffersize: u32,
            ) -> u32;
        }
        ::std::mem::transmute(OfflineClusterGroupEx(
            ::std::mem::transmute(hgroup),
            ::std::mem::transmute(dwofflineflags),
            ::std::mem::transmute(lpinbuffer),
            ::std::mem::transmute(cbinbuffersize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn OfflineClusterResource(hresource: *const _HRESOURCE) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OfflineClusterResource(hresource: *const _HRESOURCE) -> u32;
        }
        ::std::mem::transmute(OfflineClusterResource(::std::mem::transmute(hresource)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn OfflineClusterResourceEx(
    hresource: *const _HRESOURCE,
    dwofflineflags: u32,
    lpinbuffer: *const u8,
    cbinbuffersize: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OfflineClusterResourceEx(
                hresource: *const _HRESOURCE,
                dwofflineflags: u32,
                lpinbuffer: *const u8,
                cbinbuffersize: u32,
            ) -> u32;
        }
        ::std::mem::transmute(OfflineClusterResourceEx(
            ::std::mem::transmute(hresource),
            ::std::mem::transmute(dwofflineflags),
            ::std::mem::transmute(lpinbuffer),
            ::std::mem::transmute(cbinbuffersize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn OnlineClusterGroup(hgroup: *const _HGROUP, hdestinationnode: *const _HNODE) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OnlineClusterGroup(hgroup: *const _HGROUP, hdestinationnode: *const _HNODE) -> u32;
        }
        ::std::mem::transmute(OnlineClusterGroup(
            ::std::mem::transmute(hgroup),
            ::std::mem::transmute(hdestinationnode),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn OnlineClusterGroupEx(
    hgroup: *const _HGROUP,
    hdestinationnode: *const _HNODE,
    dwonlineflags: u32,
    lpinbuffer: *const u8,
    cbinbuffersize: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OnlineClusterGroupEx(
                hgroup: *const _HGROUP,
                hdestinationnode: *const _HNODE,
                dwonlineflags: u32,
                lpinbuffer: *const u8,
                cbinbuffersize: u32,
            ) -> u32;
        }
        ::std::mem::transmute(OnlineClusterGroupEx(
            ::std::mem::transmute(hgroup),
            ::std::mem::transmute(hdestinationnode),
            ::std::mem::transmute(dwonlineflags),
            ::std::mem::transmute(lpinbuffer),
            ::std::mem::transmute(cbinbuffersize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn OnlineClusterResource(hresource: *const _HRESOURCE) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OnlineClusterResource(hresource: *const _HRESOURCE) -> u32;
        }
        ::std::mem::transmute(OnlineClusterResource(::std::mem::transmute(hresource)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn OnlineClusterResourceEx(
    hresource: *const _HRESOURCE,
    dwonlineflags: u32,
    lpinbuffer: *const u8,
    cbinbuffersize: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OnlineClusterResourceEx(
                hresource: *const _HRESOURCE,
                dwonlineflags: u32,
                lpinbuffer: *const u8,
                cbinbuffersize: u32,
            ) -> u32;
        }
        ::std::mem::transmute(OnlineClusterResourceEx(
            ::std::mem::transmute(hresource),
            ::std::mem::transmute(dwonlineflags),
            ::std::mem::transmute(lpinbuffer),
            ::std::mem::transmute(cbinbuffersize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn OpenCluster<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    lpszclustername: Param0,
) -> *mut _HCLUSTER {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OpenCluster(lpszclustername: super::super::Foundation::PWSTR) -> *mut _HCLUSTER;
        }
        ::std::mem::transmute(OpenCluster(lpszclustername.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn OpenClusterCryptProvider<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    lpszresource: Param0,
    lpszprovider: *const i8,
    dwtype: u32,
    dwflags: u32,
) -> *mut _HCLUSCRYPTPROVIDER {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OpenClusterCryptProvider(
                lpszresource: super::super::Foundation::PWSTR,
                lpszprovider: *const i8,
                dwtype: u32,
                dwflags: u32,
            ) -> *mut _HCLUSCRYPTPROVIDER;
        }
        ::std::mem::transmute(OpenClusterCryptProvider(
            lpszresource.into_param().abi(),
            ::std::mem::transmute(lpszprovider),
            ::std::mem::transmute(dwtype),
            ::std::mem::transmute(dwflags),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn OpenClusterCryptProviderEx<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    lpszresource: Param0,
    lpszkeyname: Param1,
    lpszprovider: *const i8,
    dwtype: u32,
    dwflags: u32,
) -> *mut _HCLUSCRYPTPROVIDER {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OpenClusterCryptProviderEx(
                lpszresource: super::super::Foundation::PWSTR,
                lpszkeyname: super::super::Foundation::PWSTR,
                lpszprovider: *const i8,
                dwtype: u32,
                dwflags: u32,
            ) -> *mut _HCLUSCRYPTPROVIDER;
        }
        ::std::mem::transmute(OpenClusterCryptProviderEx(
            lpszresource.into_param().abi(),
            lpszkeyname.into_param().abi(),
            ::std::mem::transmute(lpszprovider),
            ::std::mem::transmute(dwtype),
            ::std::mem::transmute(dwflags),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn OpenClusterEx<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    lpszclustername: Param0,
    desiredaccess: u32,
    grantedaccess: *mut u32,
) -> *mut _HCLUSTER {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OpenClusterEx(
                lpszclustername: super::super::Foundation::PWSTR,
                desiredaccess: u32,
                grantedaccess: *mut u32,
            ) -> *mut _HCLUSTER;
        }
        ::std::mem::transmute(OpenClusterEx(
            lpszclustername.into_param().abi(),
            ::std::mem::transmute(desiredaccess),
            ::std::mem::transmute(grantedaccess),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn OpenClusterGroup<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpszgroupname: Param1,
) -> *mut _HGROUP {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OpenClusterGroup(
                hcluster: *const _HCLUSTER,
                lpszgroupname: super::super::Foundation::PWSTR,
            ) -> *mut _HGROUP;
        }
        ::std::mem::transmute(OpenClusterGroup(
            ::std::mem::transmute(hcluster),
            lpszgroupname.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn OpenClusterGroupEx<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpszgroupname: Param1,
    dwdesiredaccess: u32,
    lpdwgrantedaccess: *mut u32,
) -> *mut _HGROUP {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OpenClusterGroupEx(
                hcluster: *const _HCLUSTER,
                lpszgroupname: super::super::Foundation::PWSTR,
                dwdesiredaccess: u32,
                lpdwgrantedaccess: *mut u32,
            ) -> *mut _HGROUP;
        }
        ::std::mem::transmute(OpenClusterGroupEx(
            ::std::mem::transmute(hcluster),
            lpszgroupname.into_param().abi(),
            ::std::mem::transmute(dwdesiredaccess),
            ::std::mem::transmute(lpdwgrantedaccess),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn OpenClusterGroupSet<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpszgroupsetname: Param1,
) -> *mut _HGROUPSET {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OpenClusterGroupSet(
                hcluster: *const _HCLUSTER,
                lpszgroupsetname: super::super::Foundation::PWSTR,
            ) -> *mut _HGROUPSET;
        }
        ::std::mem::transmute(OpenClusterGroupSet(
            ::std::mem::transmute(hcluster),
            lpszgroupsetname.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn OpenClusterNetInterface<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpszinterfacename: Param1,
) -> *mut _HNETINTERFACE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OpenClusterNetInterface(
                hcluster: *const _HCLUSTER,
                lpszinterfacename: super::super::Foundation::PWSTR,
            ) -> *mut _HNETINTERFACE;
        }
        ::std::mem::transmute(OpenClusterNetInterface(
            ::std::mem::transmute(hcluster),
            lpszinterfacename.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn OpenClusterNetInterfaceEx<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpszinterfacename: Param1,
    dwdesiredaccess: u32,
    lpdwgrantedaccess: *mut u32,
) -> *mut _HNETINTERFACE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OpenClusterNetInterfaceEx(
                hcluster: *const _HCLUSTER,
                lpszinterfacename: super::super::Foundation::PWSTR,
                dwdesiredaccess: u32,
                lpdwgrantedaccess: *mut u32,
            ) -> *mut _HNETINTERFACE;
        }
        ::std::mem::transmute(OpenClusterNetInterfaceEx(
            ::std::mem::transmute(hcluster),
            lpszinterfacename.into_param().abi(),
            ::std::mem::transmute(dwdesiredaccess),
            ::std::mem::transmute(lpdwgrantedaccess),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn OpenClusterNetwork<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpsznetworkname: Param1,
) -> *mut _HNETWORK {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OpenClusterNetwork(
                hcluster: *const _HCLUSTER,
                lpsznetworkname: super::super::Foundation::PWSTR,
            ) -> *mut _HNETWORK;
        }
        ::std::mem::transmute(OpenClusterNetwork(
            ::std::mem::transmute(hcluster),
            lpsznetworkname.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn OpenClusterNetworkEx<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpsznetworkname: Param1,
    dwdesiredaccess: u32,
    lpdwgrantedaccess: *mut u32,
) -> *mut _HNETWORK {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OpenClusterNetworkEx(
                hcluster: *const _HCLUSTER,
                lpsznetworkname: super::super::Foundation::PWSTR,
                dwdesiredaccess: u32,
                lpdwgrantedaccess: *mut u32,
            ) -> *mut _HNETWORK;
        }
        ::std::mem::transmute(OpenClusterNetworkEx(
            ::std::mem::transmute(hcluster),
            lpsznetworkname.into_param().abi(),
            ::std::mem::transmute(dwdesiredaccess),
            ::std::mem::transmute(lpdwgrantedaccess),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn OpenClusterNode<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpsznodename: Param1,
) -> *mut _HNODE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OpenClusterNode(
                hcluster: *const _HCLUSTER,
                lpsznodename: super::super::Foundation::PWSTR,
            ) -> *mut _HNODE;
        }
        ::std::mem::transmute(OpenClusterNode(
            ::std::mem::transmute(hcluster),
            lpsznodename.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn OpenClusterNodeById(hcluster: *const _HCLUSTER, nodeid: u32) -> *mut _HNODE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OpenClusterNodeById(hcluster: *const _HCLUSTER, nodeid: u32) -> *mut _HNODE;
        }
        ::std::mem::transmute(OpenClusterNodeById(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(nodeid),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn OpenClusterNodeEx<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpsznodename: Param1,
    dwdesiredaccess: u32,
    lpdwgrantedaccess: *mut u32,
) -> *mut _HNODE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OpenClusterNodeEx(
                hcluster: *const _HCLUSTER,
                lpsznodename: super::super::Foundation::PWSTR,
                dwdesiredaccess: u32,
                lpdwgrantedaccess: *mut u32,
            ) -> *mut _HNODE;
        }
        ::std::mem::transmute(OpenClusterNodeEx(
            ::std::mem::transmute(hcluster),
            lpsznodename.into_param().abi(),
            ::std::mem::transmute(dwdesiredaccess),
            ::std::mem::transmute(lpdwgrantedaccess),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn OpenClusterResource<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpszresourcename: Param1,
) -> *mut _HRESOURCE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OpenClusterResource(
                hcluster: *const _HCLUSTER,
                lpszresourcename: super::super::Foundation::PWSTR,
            ) -> *mut _HRESOURCE;
        }
        ::std::mem::transmute(OpenClusterResource(
            ::std::mem::transmute(hcluster),
            lpszresourcename.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn OpenClusterResourceEx<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpszresourcename: Param1,
    dwdesiredaccess: u32,
    lpdwgrantedaccess: *mut u32,
) -> *mut _HRESOURCE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn OpenClusterResourceEx(
                hcluster: *const _HCLUSTER,
                lpszresourcename: super::super::Foundation::PWSTR,
                dwdesiredaccess: u32,
                lpdwgrantedaccess: *mut u32,
            ) -> *mut _HRESOURCE;
        }
        ::std::mem::transmute(OpenClusterResourceEx(
            ::std::mem::transmute(hcluster),
            lpszresourcename.into_param().abi(),
            ::std::mem::transmute(dwdesiredaccess),
            ::std::mem::transmute(lpdwgrantedaccess),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub type PARBITRATE_ROUTINE = unsafe extern "system" fn(
    resource: *mut ::std::ffi::c_void,
    lostquorumresource: ::windows::runtime::RawPtr,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PBEGIN_RESCALL_AS_USER_ROUTINE = unsafe extern "system" fn(
    resource: *mut ::std::ffi::c_void,
    tokenhandle: super::super::Foundation::HANDLE,
    controlcode: u32,
    inbuffer: *mut ::std::ffi::c_void,
    inbuffersize: u32,
    outbuffer: *mut ::std::ffi::c_void,
    outbuffersize: u32,
    bytesreturned: *mut u32,
    context: i64,
    returnedasynchronously: *mut super::super::Foundation::BOOL,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PBEGIN_RESCALL_ROUTINE = unsafe extern "system" fn(
    resource: *mut ::std::ffi::c_void,
    controlcode: u32,
    inbuffer: *mut ::std::ffi::c_void,
    inbuffersize: u32,
    outbuffer: *mut ::std::ffi::c_void,
    outbuffersize: u32,
    bytesreturned: *mut u32,
    context: i64,
    returnedasynchronously: *mut super::super::Foundation::BOOL,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PBEGIN_RESTYPECALL_AS_USER_ROUTINE = unsafe extern "system" fn(
    resourcetypename: super::super::Foundation::PWSTR,
    tokenhandle: super::super::Foundation::HANDLE,
    controlcode: u32,
    inbuffer: *mut ::std::ffi::c_void,
    inbuffersize: u32,
    outbuffer: *mut ::std::ffi::c_void,
    outbuffersize: u32,
    bytesreturned: *mut u32,
    context: i64,
    returnedasynchronously: *mut super::super::Foundation::BOOL,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PBEGIN_RESTYPECALL_ROUTINE = unsafe extern "system" fn(
    resourcetypename: super::super::Foundation::PWSTR,
    controlcode: u32,
    inbuffer: *mut ::std::ffi::c_void,
    inbuffersize: u32,
    outbuffer: *mut ::std::ffi::c_void,
    outbuffersize: u32,
    bytesreturned: *mut u32,
    context: i64,
    returnedasynchronously: *mut super::super::Foundation::BOOL,
) -> u32;
pub type PCANCEL_ROUTINE =
    unsafe extern "system" fn(resource: *mut ::std::ffi::c_void, cancelflags_reserved: u32) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCHANGE_RESOURCE_PROCESS_FOR_DUMPS = unsafe extern "system" fn(
    resource: isize,
    processname: super::super::Foundation::PWSTR,
    processid: u32,
    isadd: super::super::Foundation::BOOL,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCHANGE_RES_TYPE_PROCESS_FOR_DUMPS = unsafe extern "system" fn(
    resourcetypename: super::super::Foundation::PWSTR,
    processname: super::super::Foundation::PWSTR,
    processid: u32,
    isadd: super::super::Foundation::BOOL,
) -> u32;
pub type PCLOSE_CLUSTER_CRYPT_PROVIDER =
    unsafe extern "system" fn(hcluscryptprovider: *const _HCLUSCRYPTPROVIDER) -> u32;
pub type PCLOSE_ROUTINE = unsafe extern "system" fn(resource: *mut ::std::ffi::c_void);
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPIClusWorkerCheckTerminate =
    unsafe extern "system" fn(lpworker: *mut CLUS_WORKER) -> super::super::Foundation::BOOL;
pub type PCLUSAPI_ADD_CLUSTER_GROUP_DEPENDENCY = unsafe extern "system" fn(
    hdependentgroup: *const _HGROUP,
    hprovidergroup: *const _HGROUP,
) -> u32;
pub type PCLUSAPI_ADD_CLUSTER_GROUP_GROUPSET_DEPENDENCY = unsafe extern "system" fn(
    hdependentgroupset: *const _HGROUPSET,
    hprovidergroupset: *const _HGROUPSET,
) -> u32;
pub type PCLUSAPI_ADD_CLUSTER_GROUP_TO_GROUP_GROUPSET_DEPENDENCY = unsafe extern "system" fn(
    hdependentgroup: *const _HGROUP,
    hprovidergroupset: *const _HGROUPSET,
)
    -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_ADD_CLUSTER_NODE = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpsznodename: super::super::Foundation::PWSTR,
    pfnprogresscallback: ::windows::runtime::RawPtr,
    pvcallbackarg: *const ::std::ffi::c_void,
) -> *mut _HNODE;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_ADD_CLUSTER_NODE_EX = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpsznodename: super::super::Foundation::PWSTR,
    dwflags: u32,
    pfnprogresscallback: ::windows::runtime::RawPtr,
    pvcallbackarg: *const ::std::ffi::c_void,
) -> *mut _HNODE;
pub type PCLUSAPI_ADD_CLUSTER_RESOURCE_DEPENDENCY =
    unsafe extern "system" fn(hresource: *mut _HRESOURCE, hdependson: *mut _HRESOURCE) -> u32;
pub type PCLUSAPI_ADD_CLUSTER_RESOURCE_NODE =
    unsafe extern "system" fn(hresource: *mut _HRESOURCE, hnode: *mut _HNODE) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_ADD_CROSS_CLUSTER_GROUPSET_DEPENDENCY = unsafe extern "system" fn(
    hdependentgroupset: *const _HGROUPSET,
    lpremoteclustername: super::super::Foundation::PWSTR,
    lpremotegroupsetname: super::super::Foundation::PWSTR,
) -> u32;
pub type PCLUSAPI_ADD_RESOURCE_TO_CLUSTER_SHARED_VOLUMES =
    unsafe extern "system" fn(hresource: *const _HRESOURCE) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_BACKUP_CLUSTER_DATABASE = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpszpathname: super::super::Foundation::PWSTR,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CAN_RESOURCE_BE_DEPENDENT =
    unsafe extern "system" fn(
        hresource: *mut _HRESOURCE,
        hresourcedependent: *mut _HRESOURCE,
    ) -> super::super::Foundation::BOOL;
pub type PCLUSAPI_CHANGE_CLUSTER_RESOURCE_GROUP =
    unsafe extern "system" fn(hresource: *mut _HRESOURCE, hgroup: *mut _HGROUP) -> u32;
pub type PCLUSAPI_CHANGE_CLUSTER_RESOURCE_GROUP_EX =
    unsafe extern "system" fn(hresource: *mut _HRESOURCE, hgroup: *mut _HGROUP, flags: u64) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLOSE_CLUSTER =
    unsafe extern "system" fn(hcluster: *const _HCLUSTER) -> super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLOSE_CLUSTER_GROUP =
    unsafe extern "system" fn(hgroup: *const _HGROUP) -> super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLOSE_CLUSTER_GROUP_GROUPSET =
    unsafe extern "system" fn(hgroupset: *const _HGROUPSET) -> super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLOSE_CLUSTER_NETWORK =
    unsafe extern "system" fn(hnetwork: *const _HNETWORK) -> super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLOSE_CLUSTER_NET_INTERFACE =
    unsafe extern "system" fn(
        hnetinterface: *const _HNETINTERFACE,
    ) -> super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLOSE_CLUSTER_NODE =
    unsafe extern "system" fn(hnode: *const _HNODE) -> super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLOSE_CLUSTER_NOTIFY_PORT =
    unsafe extern "system" fn(hchange: *const _HCHANGE) -> super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLOSE_CLUSTER_RESOURCE =
    unsafe extern "system" fn(hresource: *mut _HRESOURCE) -> super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLUSTER_ADD_GROUP_TO_AFFINITY_RULE = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    rulename: super::super::Foundation::PWSTR,
    hgroup: *const _HGROUP,
) -> u32;
pub type PCLUSAPI_CLUSTER_ADD_GROUP_TO_GROUP_GROUPSET =
    unsafe extern "system" fn(hgroupset: *const _HGROUPSET, hgroup: *const _HGROUP) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLUSTER_AFFINITY_RULE_CONTROL = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    affinityrulename: super::super::Foundation::PWSTR,
    hhostnode: *const _HNODE,
    dwcontrolcode: u32,
    lpinbuffer: *const ::std::ffi::c_void,
    cbinbuffersize: u32,
    lpoutbuffer: *mut ::std::ffi::c_void,
    cboutbuffersize: u32,
    lpbytesreturned: *mut u32,
) -> u32;
pub type PCLUSAPI_CLUSTER_CLOSE_ENUM = unsafe extern "system" fn(henum: *const _HCLUSENUM) -> u32;
pub type PCLUSAPI_CLUSTER_CLOSE_ENUM_EX =
    unsafe extern "system" fn(hclusterenum: *const _HCLUSENUMEX) -> u32;
pub type PCLUSAPI_CLUSTER_CONTROL = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    hhostnode: *const _HNODE,
    dwcontrolcode: u32,
    lpinbuffer: *const ::std::ffi::c_void,
    ninbuffersize: u32,
    lpoutbuffer: *mut ::std::ffi::c_void,
    noutbuffersize: u32,
    lpbytesreturned: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLUSTER_CREATE_AFFINITY_RULE = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    rulename: super::super::Foundation::PWSTR,
    ruletype: CLUS_AFFINITY_RULE_TYPE,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLUSTER_ENUM = unsafe extern "system" fn(
    henum: *const _HCLUSENUM,
    dwindex: u32,
    lpdwtype: *mut u32,
    lpszname: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLUSTER_ENUM_EX = unsafe extern "system" fn(
    hclusterenum: *const _HCLUSENUMEX,
    dwindex: u32,
    pitem: *mut CLUSTER_ENUM_ITEM,
    cbitem: *mut u32,
) -> u32;
pub type PCLUSAPI_CLUSTER_GET_ENUM_COUNT =
    unsafe extern "system" fn(henum: *const _HCLUSENUM) -> u32;
pub type PCLUSAPI_CLUSTER_GET_ENUM_COUNT_EX =
    unsafe extern "system" fn(hclusterenum: *const _HCLUSENUMEX) -> u32;
pub type PCLUSAPI_CLUSTER_GROUP_CLOSE_ENUM =
    unsafe extern "system" fn(hgroupenum: *mut _HGROUPENUM) -> u32;
pub type PCLUSAPI_CLUSTER_GROUP_CLOSE_ENUM_EX =
    unsafe extern "system" fn(hgroupenumex: *const _HGROUPENUMEX) -> u32;
pub type PCLUSAPI_CLUSTER_GROUP_CONTROL = unsafe extern "system" fn(
    hgroup: *const _HGROUP,
    hhostnode: *const _HNODE,
    dwcontrolcode: u32,
    lpinbuffer: *const ::std::ffi::c_void,
    ninbuffersize: u32,
    lpoutbuffer: *mut ::std::ffi::c_void,
    noutbuffersize: u32,
    lpbytesreturned: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLUSTER_GROUP_ENUM = unsafe extern "system" fn(
    hgroupenum: *const _HGROUPENUM,
    dwindex: u32,
    lpdwtype: *mut u32,
    lpszresourcename: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLUSTER_GROUP_ENUM_EX = unsafe extern "system" fn(
    hgroupenumex: *const _HGROUPENUMEX,
    dwindex: u32,
    pitem: *mut CLUSTER_GROUP_ENUM_ITEM,
    cbitem: *mut u32,
) -> u32;
pub type PCLUSAPI_CLUSTER_GROUP_GET_ENUM_COUNT =
    unsafe extern "system" fn(hgroupenum: *const _HGROUPENUM) -> u32;
pub type PCLUSAPI_CLUSTER_GROUP_GET_ENUM_COUNT_EX =
    unsafe extern "system" fn(hgroupenumex: *const _HGROUPENUMEX) -> u32;
pub type PCLUSAPI_CLUSTER_GROUP_GROUPSET_CONTROL = unsafe extern "system" fn(
    hgroupset: *const _HGROUPSET,
    hhostnode: *const _HNODE,
    dwcontrolcode: u32,
    lpinbuffer: *const ::std::ffi::c_void,
    cbinbuffersize: u32,
    lpoutbuffer: *mut ::std::ffi::c_void,
    cboutbuffersize: u32,
    lpbytesreturned: *mut u32,
) -> u32;
pub type PCLUSAPI_CLUSTER_GROUP_OPEN_ENUM =
    unsafe extern "system" fn(hgroup: *mut _HGROUP, dwtype: u32) -> *mut _HGROUPENUM;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLUSTER_GROUP_OPEN_ENUM_EX = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpszproperties: super::super::Foundation::PWSTR,
    cbproperties: u32,
    lpszroproperties: super::super::Foundation::PWSTR,
    cbroproperties: u32,
    dwflags: u32,
) -> *mut _HGROUPENUMEX;
pub type PCLUSAPI_CLUSTER_NETWORK_CLOSE_ENUM =
    unsafe extern "system" fn(hnetworkenum: *const _HNETWORKENUM) -> u32;
pub type PCLUSAPI_CLUSTER_NETWORK_CONTROL = unsafe extern "system" fn(
    hnetwork: *const _HNETWORK,
    hhostnode: *const _HNODE,
    dwcontrolcode: u32,
    lpinbuffer: *const ::std::ffi::c_void,
    ninbuffersize: u32,
    lpoutbuffer: *mut ::std::ffi::c_void,
    noutbuffersize: u32,
    lpbytesreturned: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLUSTER_NETWORK_ENUM = unsafe extern "system" fn(
    hnetworkenum: *const _HNETWORKENUM,
    dwindex: u32,
    lpdwtype: *mut u32,
    lpszname: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
) -> u32;
pub type PCLUSAPI_CLUSTER_NETWORK_GET_ENUM_COUNT =
    unsafe extern "system" fn(hnetworkenum: *const _HNETWORKENUM) -> u32;
pub type PCLUSAPI_CLUSTER_NETWORK_OPEN_ENUM =
    unsafe extern "system" fn(hnetwork: *const _HNETWORK, dwtype: u32) -> *mut _HNETWORKENUM;
pub type PCLUSAPI_CLUSTER_NET_INTERFACE_CONTROL = unsafe extern "system" fn(
    hnetinterface: *const _HNETINTERFACE,
    hhostnode: *const _HNODE,
    dwcontrolcode: u32,
    lpinbuffer: *const ::std::ffi::c_void,
    ninbuffersize: u32,
    lpoutbuffer: *mut ::std::ffi::c_void,
    noutbuffersize: u32,
    lpbytesreturned: *mut u32,
) -> u32;
pub type PCLUSAPI_CLUSTER_NODE_CLOSE_ENUM =
    unsafe extern "system" fn(hnodeenum: *const _HNODEENUM) -> u32;
pub type PCLUSAPI_CLUSTER_NODE_CLOSE_ENUM_EX =
    unsafe extern "system" fn(hnodeenum: *const _HNODEENUMEX) -> u32;
pub type PCLUSAPI_CLUSTER_NODE_CONTROL = unsafe extern "system" fn(
    hnode: *const _HNODE,
    hhostnode: *const _HNODE,
    dwcontrolcode: u32,
    lpinbuffer: *const ::std::ffi::c_void,
    ninbuffersize: u32,
    lpoutbuffer: *mut ::std::ffi::c_void,
    noutbuffersize: u32,
    lpbytesreturned: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLUSTER_NODE_ENUM = unsafe extern "system" fn(
    hnodeenum: *const _HNODEENUM,
    dwindex: u32,
    lpdwtype: *mut u32,
    lpszname: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLUSTER_NODE_ENUM_EX = unsafe extern "system" fn(
    hnodeenum: *const _HNODEENUMEX,
    dwindex: u32,
    pitem: *mut CLUSTER_ENUM_ITEM,
    cbitem: *mut u32,
) -> u32;
pub type PCLUSAPI_CLUSTER_NODE_GET_ENUM_COUNT =
    unsafe extern "system" fn(hnodeenum: *const _HNODEENUM) -> u32;
pub type PCLUSAPI_CLUSTER_NODE_GET_ENUM_COUNT_EX =
    unsafe extern "system" fn(hnodeenum: *const _HNODEENUMEX) -> u32;
pub type PCLUSAPI_CLUSTER_NODE_OPEN_ENUM =
    unsafe extern "system" fn(hnode: *const _HNODE, dwtype: u32) -> *mut _HNODEENUM;
pub type PCLUSAPI_CLUSTER_NODE_OPEN_ENUM_EX = unsafe extern "system" fn(
    hnode: *const _HNODE,
    dwtype: u32,
    poptions: *const ::std::ffi::c_void,
) -> *mut _HNODEENUMEX;
pub type PCLUSAPI_CLUSTER_OPEN_ENUM =
    unsafe extern "system" fn(hcluster: *const _HCLUSTER, dwtype: u32) -> *mut _HCLUSENUM;
pub type PCLUSAPI_CLUSTER_OPEN_ENUM_EX = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    dwtype: u32,
    poptions: *const ::std::ffi::c_void,
) -> *mut _HCLUSENUMEX;
#[cfg(feature = "Win32_System_Registry")]
pub type PCLUSAPI_CLUSTER_REG_CLOSE_KEY =
    unsafe extern "system" fn(hkey: super::super::System::Registry::HKEY) -> i32;
#[cfg(feature = "Win32_System_Registry")]
pub type PCLUSAPI_CLUSTER_REG_CREATE_BATCH = unsafe extern "system" fn(
    hkey: super::super::System::Registry::HKEY,
    phregbatch: *mut *mut _HREGBATCH,
) -> i32;
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Security",
    feature = "Win32_System_Registry"
))]
pub type PCLUSAPI_CLUSTER_REG_CREATE_KEY = unsafe extern "system" fn(
    hkey: super::super::System::Registry::HKEY,
    lpszsubkey: super::super::Foundation::PWSTR,
    dwoptions: u32,
    samdesired: u32,
    lpsecurityattributes: *const super::super::Security::SECURITY_ATTRIBUTES,
    phkresult: *mut super::super::System::Registry::HKEY,
    lpdwdisposition: *mut u32,
) -> i32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PCLUSAPI_CLUSTER_REG_DELETE_KEY = unsafe extern "system" fn(
    hkey: super::super::System::Registry::HKEY,
    lpszsubkey: super::super::Foundation::PWSTR,
) -> i32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PCLUSAPI_CLUSTER_REG_DELETE_VALUE = unsafe extern "system" fn(
    hkey: super::super::System::Registry::HKEY,
    lpszvaluename: super::super::Foundation::PWSTR,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PCLUSAPI_CLUSTER_REG_ENUM_KEY = unsafe extern "system" fn(
    hkey: super::super::System::Registry::HKEY,
    dwindex: u32,
    lpszname: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
    lpftlastwritetime: *mut super::super::Foundation::FILETIME,
) -> i32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PCLUSAPI_CLUSTER_REG_ENUM_VALUE = unsafe extern "system" fn(
    hkey: super::super::System::Registry::HKEY,
    dwindex: u32,
    lpszvaluename: super::super::Foundation::PWSTR,
    lpcchvaluename: *mut u32,
    lpdwtype: *mut u32,
    lpdata: *mut u8,
    lpcbdata: *mut u32,
) -> u32;
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Security",
    feature = "Win32_System_Registry"
))]
pub type PCLUSAPI_CLUSTER_REG_GET_KEY_SECURITY = unsafe extern "system" fn(
    hkey: super::super::System::Registry::HKEY,
    requestedinformation: u32,
    psecuritydescriptor: *mut super::super::Security::SECURITY_DESCRIPTOR,
    lpcbsecuritydescriptor: *mut u32,
) -> i32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PCLUSAPI_CLUSTER_REG_OPEN_KEY = unsafe extern "system" fn(
    hkey: super::super::System::Registry::HKEY,
    lpszsubkey: super::super::Foundation::PWSTR,
    samdesired: u32,
    phkresult: *mut super::super::System::Registry::HKEY,
) -> i32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PCLUSAPI_CLUSTER_REG_QUERY_INFO_KEY = unsafe extern "system" fn(
    hkey: super::super::System::Registry::HKEY,
    lpcsubkeys: *mut u32,
    lpcbmaxsubkeylen: *mut u32,
    lpcvalues: *mut u32,
    lpcbmaxvaluenamelen: *mut u32,
    lpcbmaxvaluelen: *mut u32,
    lpcbsecuritydescriptor: *mut u32,
    lpftlastwritetime: *mut super::super::Foundation::FILETIME,
) -> i32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PCLUSAPI_CLUSTER_REG_QUERY_VALUE = unsafe extern "system" fn(
    hkey: super::super::System::Registry::HKEY,
    lpszvaluename: super::super::Foundation::PWSTR,
    lpdwvaluetype: *mut u32,
    lpdata: *mut u8,
    lpcbdata: *mut u32,
) -> i32;
#[cfg(all(
    feature = "Win32_Foundation",
    feature = "Win32_Security",
    feature = "Win32_System_Registry"
))]
pub type PCLUSAPI_CLUSTER_REG_SET_KEY_SECURITY = unsafe extern "system" fn(
    hkey: super::super::System::Registry::HKEY,
    securityinformation: u32,
    psecuritydescriptor: *mut super::super::Security::SECURITY_DESCRIPTOR,
) -> i32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PCLUSAPI_CLUSTER_REG_SET_VALUE = unsafe extern "system" fn(
    hkey: super::super::System::Registry::HKEY,
    lpszvaluename: super::super::Foundation::PWSTR,
    dwtype: u32,
    lpdata: *const u8,
    cbdata: u32,
) -> u32;
pub type PCLUSAPI_CLUSTER_REG_SYNC_DATABASE =
    unsafe extern "system" fn(hcluster: *mut _HCLUSTER, flags: u32) -> i32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLUSTER_REMOVE_AFFINITY_RULE = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    rulename: super::super::Foundation::PWSTR,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLUSTER_REMOVE_GROUP_FROM_AFFINITY_RULE = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    rulename: super::super::Foundation::PWSTR,
    hgroup: *const _HGROUP,
) -> u32;
pub type PCLUSAPI_CLUSTER_REMOVE_GROUP_FROM_GROUP_GROUPSET =
    unsafe extern "system" fn(hgroupset: *const _HGROUPSET, hgroupname: *const _HGROUP) -> u32;
pub type PCLUSAPI_CLUSTER_RESOURCE_CLOSE_ENUM =
    unsafe extern "system" fn(hresenum: *mut _HRESENUM) -> u32;
pub type PCLUSAPI_CLUSTER_RESOURCE_CLOSE_ENUM_EX =
    unsafe extern "system" fn(hresourceenumex: *const _HRESENUMEX) -> u32;
pub type PCLUSAPI_CLUSTER_RESOURCE_CONTROL = unsafe extern "system" fn(
    hresource: *const _HRESOURCE,
    hhostnode: *const _HNODE,
    dwcontrolcode: u32,
    lpinbuffer: *const ::std::ffi::c_void,
    cbinbuffersize: u32,
    lpoutbuffer: *mut ::std::ffi::c_void,
    cboutbuffersize: u32,
    lpbytesreturned: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLUSTER_RESOURCE_ENUM = unsafe extern "system" fn(
    hresenum: *const _HRESENUM,
    dwindex: u32,
    lpdwtype: *mut u32,
    lpszname: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLUSTER_RESOURCE_ENUM_EX = unsafe extern "system" fn(
    hresourceenumex: *const _HRESENUMEX,
    dwindex: u32,
    pitem: *mut CLUSTER_RESOURCE_ENUM_ITEM,
    cbitem: *mut u32,
) -> u32;
pub type PCLUSAPI_CLUSTER_RESOURCE_GET_ENUM_COUNT =
    unsafe extern "system" fn(hresenum: *const _HRESENUM) -> u32;
pub type PCLUSAPI_CLUSTER_RESOURCE_GET_ENUM_COUNT_EX =
    unsafe extern "system" fn(hresourceenumex: *const _HRESENUMEX) -> u32;
pub type PCLUSAPI_CLUSTER_RESOURCE_OPEN_ENUM =
    unsafe extern "system" fn(hresource: *mut _HRESOURCE, dwtype: u32) -> *mut _HRESENUM;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLUSTER_RESOURCE_OPEN_ENUM_EX = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpszproperties: super::super::Foundation::PWSTR,
    cbproperties: u32,
    lpszroproperties: super::super::Foundation::PWSTR,
    cbroproperties: u32,
    dwflags: u32,
) -> *mut _HRESENUMEX;
pub type PCLUSAPI_CLUSTER_RESOURCE_TYPE_CLOSE_ENUM =
    unsafe extern "system" fn(hrestypeenum: *const _HRESTYPEENUM) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLUSTER_RESOURCE_TYPE_CONTROL = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpszresourcetypename: super::super::Foundation::PWSTR,
    hhostnode: *const _HNODE,
    dwcontrolcode: u32,
    lpinbuffer: *const ::std::ffi::c_void,
    ninbuffersize: u32,
    lpoutbuffer: *mut ::std::ffi::c_void,
    noutbuffersize: u32,
    lpbytesreturned: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLUSTER_RESOURCE_TYPE_ENUM = unsafe extern "system" fn(
    hrestypeenum: *const _HRESTYPEENUM,
    dwindex: u32,
    lpdwtype: *mut u32,
    lpszname: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
) -> u32;
pub type PCLUSAPI_CLUSTER_RESOURCE_TYPE_GET_ENUM_COUNT =
    unsafe extern "system" fn(hrestypeenum: *const _HRESTYPEENUM) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLUSTER_RESOURCE_TYPE_OPEN_ENUM = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpszresourcetypename: super::super::Foundation::PWSTR,
    dwtype: u32,
)
    -> *mut _HRESTYPEENUM;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLUSTER_UPGRADE = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    perform: super::super::Foundation::BOOL,
    pfnprogresscallback: ::windows::runtime::RawPtr,
    pvcallbackarg: *const ::std::ffi::c_void,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLUS_WORKER_CREATE = unsafe extern "system" fn(
    lpworker: *mut CLUS_WORKER,
    lpstartaddress: ::windows::runtime::RawPtr,
    lpparameter: *mut ::std::ffi::c_void,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CLUS_WORKER_TERMINATE = unsafe extern "system" fn(lpworker: *const CLUS_WORKER);
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CREATE_CLUSTER = unsafe extern "system" fn(
    pconfig: *const CREATE_CLUSTER_CONFIG,
    pfnprogresscallback: ::windows::runtime::RawPtr,
    pvcallbackarg: *const ::std::ffi::c_void,
) -> *mut _HCLUSTER;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CREATE_CLUSTER_AVAILABILITY_SET = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpavailabilitysetname: super::super::Foundation::PWSTR,
    pavailabilitysetconfig: *const CLUSTER_AVAILABILITY_SET_CONFIG,
) -> *mut _HGROUPSET;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CREATE_CLUSTER_CNOLESS = unsafe extern "system" fn(
    pconfig: *const CREATE_CLUSTER_CONFIG,
    pfnprogresscallback: ::windows::runtime::RawPtr,
    pvcallbackarg: *const ::std::ffi::c_void,
) -> *mut _HCLUSTER;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CREATE_CLUSTER_GROUP = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpszgroupname: super::super::Foundation::PWSTR,
) -> *mut _HGROUP;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CREATE_CLUSTER_GROUPEX = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpszgroupname: super::super::Foundation::PWSTR,
    pgroupinfo: *const CLUSTER_CREATE_GROUP_INFO,
) -> *mut _HGROUP;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CREATE_CLUSTER_GROUP_GROUPSET = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpszgroupsetname: super::super::Foundation::PWSTR,
) -> *mut _HGROUPSET;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CREATE_CLUSTER_NAME_ACCOUNT = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    pconfig: *const CREATE_CLUSTER_NAME_ACCOUNT,
    pfnprogresscallback: ::windows::runtime::RawPtr,
    pvcallbackarg: *const ::std::ffi::c_void,
) -> u32;
pub type PCLUSAPI_CREATE_CLUSTER_NOTIFY_PORT = unsafe extern "system" fn(
    hchange: *const _HCHANGE,
    hcluster: *const _HCLUSTER,
    dwfilter: u32,
    dwnotifykey: usize,
) -> *mut _HCHANGE;
pub type PCLUSAPI_CREATE_CLUSTER_NOTIFY_PORT_V2 = unsafe extern "system" fn(
    hchange: *const _HCHANGE,
    hcluster: *const _HCLUSTER,
    filters: *const NOTIFY_FILTER_AND_TYPE,
    dwfiltercount: u32,
    dwnotifykey: usize,
) -> *mut _HCHANGE;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CREATE_CLUSTER_RESOURCE = unsafe extern "system" fn(
    hgroup: *mut _HGROUP,
    lpszresourcename: super::super::Foundation::PWSTR,
    lpszresourcetype: super::super::Foundation::PWSTR,
    dwflags: u32,
) -> *mut _HRESOURCE;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_CREATE_CLUSTER_RESOURCE_TYPE = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpszresourcetypename: super::super::Foundation::PWSTR,
    lpszdisplayname: super::super::Foundation::PWSTR,
    lpszresourcetypedll: super::super::Foundation::PWSTR,
    dwlooksalivepollinterval: u32,
    dwisalivepollinterval: u32,
) -> u32;
pub type PCLUSAPI_DELETE_CLUSTER_GROUP = unsafe extern "system" fn(hgroup: *mut _HGROUP) -> u32;
pub type PCLUSAPI_DELETE_CLUSTER_GROUP_GROUPSET =
    unsafe extern "system" fn(hgroupset: *const _HGROUPSET) -> u32;
pub type PCLUSAPI_DELETE_CLUSTER_RESOURCE =
    unsafe extern "system" fn(hresource: *mut _HRESOURCE) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_DELETE_CLUSTER_RESOURCE_TYPE = unsafe extern "system" fn(
    hcluster: *mut _HCLUSTER,
    lpszresourcetypename: super::super::Foundation::PWSTR,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_DESTROY_CLUSTER = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    pfnprogresscallback: ::windows::runtime::RawPtr,
    pvcallbackarg: *const ::std::ffi::c_void,
    fdeletevirtualcomputerobjects: super::super::Foundation::BOOL,
) -> u32;
pub type PCLUSAPI_DESTROY_CLUSTER_GROUP = unsafe extern "system" fn(hgroup: *mut _HGROUP) -> u32;
pub type PCLUSAPI_EVICT_CLUSTER_NODE = unsafe extern "system" fn(hnode: *const _HNODE) -> u32;
pub type PCLUSAPI_EVICT_CLUSTER_NODE_EX = unsafe extern "system" fn(
    hnode: *const _HNODE,
    dwtimeout: u32,
    phrcleanupstatus: *mut ::windows::runtime::HRESULT,
) -> u32;
pub type PCLUSAPI_FAIL_CLUSTER_RESOURCE =
    unsafe extern "system" fn(hresource: *mut _HRESOURCE) -> u32;
pub type PCLUSAPI_GET_CLUSTER_FROM_GROUP =
    unsafe extern "system" fn(hgroup: *const _HGROUP) -> *mut _HCLUSTER;
pub type PCLUSAPI_GET_CLUSTER_FROM_GROUP_GROUPSET =
    unsafe extern "system" fn(hgroupset: *const _HGROUPSET) -> *mut _HCLUSTER;
pub type PCLUSAPI_GET_CLUSTER_FROM_NETWORK =
    unsafe extern "system" fn(hnetwork: *const _HNETWORK) -> *mut _HCLUSTER;
pub type PCLUSAPI_GET_CLUSTER_FROM_NET_INTERFACE =
    unsafe extern "system" fn(hnetinterface: *const _HNETINTERFACE) -> *mut _HCLUSTER;
pub type PCLUSAPI_GET_CLUSTER_FROM_NODE =
    unsafe extern "system" fn(hnode: *const _HNODE) -> *mut _HCLUSTER;
pub type PCLUSAPI_GET_CLUSTER_FROM_RESOURCE =
    unsafe extern "system" fn(hresource: *const _HRESOURCE) -> *mut _HCLUSTER;
#[cfg(feature = "Win32_System_Registry")]
pub type PCLUSAPI_GET_CLUSTER_GROUP_KEY =
    unsafe extern "system" fn(
        hgroup: *mut _HGROUP,
        samdesired: u32,
    ) -> super::super::System::Registry::HKEY;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_GET_CLUSTER_GROUP_STATE = unsafe extern "system" fn(
    hgroup: *const _HGROUP,
    lpsznodename: super::super::Foundation::PWSTR,
    lpcchnodename: *mut u32,
) -> CLUSTER_GROUP_STATE;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_GET_CLUSTER_INFORMATION = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpszclustername: super::super::Foundation::PWSTR,
    lpcchclustername: *mut u32,
    lpclusterinfo: *mut CLUSTERVERSIONINFO,
) -> u32;
#[cfg(feature = "Win32_System_Registry")]
pub type PCLUSAPI_GET_CLUSTER_KEY =
    unsafe extern "system" fn(
        hcluster: *mut _HCLUSTER,
        samdesired: u32,
    ) -> super::super::System::Registry::HKEY;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_GET_CLUSTER_NETWORK_ID = unsafe extern "system" fn(
    hnetwork: *const _HNETWORK,
    lpsznetworkid: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
) -> u32;
#[cfg(feature = "Win32_System_Registry")]
pub type PCLUSAPI_GET_CLUSTER_NETWORK_KEY =
    unsafe extern "system" fn(
        hnetwork: *const _HNETWORK,
        samdesired: u32,
    ) -> super::super::System::Registry::HKEY;
pub type PCLUSAPI_GET_CLUSTER_NETWORK_STATE =
    unsafe extern "system" fn(hnetwork: *const _HNETWORK) -> CLUSTER_NETWORK_STATE;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_GET_CLUSTER_NET_INTERFACE = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpsznodename: super::super::Foundation::PWSTR,
    lpsznetworkname: super::super::Foundation::PWSTR,
    lpszinterfacename: super::super::Foundation::PWSTR,
    lpcchinterfacename: *mut u32,
) -> u32;
#[cfg(feature = "Win32_System_Registry")]
pub type PCLUSAPI_GET_CLUSTER_NET_INTERFACE_KEY =
    unsafe extern "system" fn(
        hnetinterface: *const _HNETINTERFACE,
        samdesired: u32,
    ) -> super::super::System::Registry::HKEY;
pub type PCLUSAPI_GET_CLUSTER_NET_INTERFACE_STATE =
    unsafe extern "system" fn(hnetinterface: *const _HNETINTERFACE) -> CLUSTER_NETINTERFACE_STATE;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_GET_CLUSTER_NODE_ID = unsafe extern "system" fn(
    hnode: *const _HNODE,
    lpsznodeid: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
) -> u32;
#[cfg(feature = "Win32_System_Registry")]
pub type PCLUSAPI_GET_CLUSTER_NODE_KEY =
    unsafe extern "system" fn(
        hnode: *mut _HNODE,
        samdesired: u32,
    ) -> super::super::System::Registry::HKEY;
pub type PCLUSAPI_GET_CLUSTER_NODE_STATE =
    unsafe extern "system" fn(hnode: *const _HNODE) -> CLUSTER_NODE_STATE;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_GET_CLUSTER_NOTIFY = unsafe extern "system" fn(
    hchange: *const _HCHANGE,
    lpdwnotifykey: *mut usize,
    lpdwfiltertype: *mut u32,
    lpszname: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
    dwmilliseconds: u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_GET_CLUSTER_NOTIFY_V2 = unsafe extern "system" fn(
    hchange: *const _HCHANGE,
    lpdwnotifykey: *mut usize,
    pfilterandtype: *mut NOTIFY_FILTER_AND_TYPE,
    buffer: *mut u8,
    lpcchbuffersize: *mut u32,
    lpszobjectid: super::super::Foundation::PWSTR,
    lpcchobjectid: *mut u32,
    lpszparentid: super::super::Foundation::PWSTR,
    lpcchparentid: *mut u32,
    lpszname: super::super::Foundation::PWSTR,
    lpcchname: *mut u32,
    lpsztype: super::super::Foundation::PWSTR,
    lpcchtype: *mut u32,
    dwmilliseconds: u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_GET_CLUSTER_QUORUM_RESOURCE = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpszresourcename: super::super::Foundation::PWSTR,
    lpcchresourcename: *mut u32,
    lpszdevicename: super::super::Foundation::PWSTR,
    lpcchdevicename: *mut u32,
    lpdwmaxquorumlogsize: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_GET_CLUSTER_RESOURCE_DEPENDENCY_EXPRESSION = unsafe extern "system" fn(
    hresource: *const _HRESOURCE,
    lpszdependencyexpression: super::super::Foundation::PWSTR,
    lpcchdependencyexpression: *mut u32,
) -> u32;
#[cfg(feature = "Win32_System_Registry")]
pub type PCLUSAPI_GET_CLUSTER_RESOURCE_KEY =
    unsafe extern "system" fn(
        hresource: *mut _HRESOURCE,
        samdesired: u32,
    ) -> super::super::System::Registry::HKEY;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_GET_CLUSTER_RESOURCE_NETWORK_NAME =
    unsafe extern "system" fn(
        hresource: *const _HRESOURCE,
        lpbuffer: super::super::Foundation::PWSTR,
        nsize: *mut u32,
    ) -> super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_GET_CLUSTER_RESOURCE_STATE = unsafe extern "system" fn(
    hresource: *const _HRESOURCE,
    lpsznodename: super::super::Foundation::PWSTR,
    lpcchnodename: *mut u32,
    lpszgroupname: super::super::Foundation::PWSTR,
    lpcchgroupname: *mut u32,
) -> CLUSTER_RESOURCE_STATE;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PCLUSAPI_GET_CLUSTER_RESOURCE_TYPE_KEY =
    unsafe extern "system" fn(
        hcluster: *const _HCLUSTER,
        lpsztypename: super::super::Foundation::PWSTR,
        samdesired: u32,
    ) -> super::super::System::Registry::HKEY;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_GET_NODE_CLUSTER_STATE = unsafe extern "system" fn(
    lpsznodename: super::super::Foundation::PWSTR,
    pdwclusterstate: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_GET_NOTIFY_EVENT_HANDLE_V2 = unsafe extern "system" fn(
    hchange: *const _HCHANGE,
    lphtargetevent: *mut super::super::Foundation::HANDLE,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_IS_FILE_ON_CLUSTER_SHARED_VOLUME = unsafe extern "system" fn(
    lpszpathname: super::super::Foundation::PWSTR,
    pbfileisonsharedvolume: *mut super::super::Foundation::BOOL,
) -> u32;
pub type PCLUSAPI_MOVE_CLUSTER_GROUP =
    unsafe extern "system" fn(hgroup: *const _HGROUP, hdestinationnode: *const _HNODE) -> u32;
pub type PCLUSAPI_OFFLINE_CLUSTER_GROUP = unsafe extern "system" fn(hgroup: *mut _HGROUP) -> u32;
pub type PCLUSAPI_OFFLINE_CLUSTER_RESOURCE =
    unsafe extern "system" fn(hresource: *mut _HRESOURCE) -> u32;
pub type PCLUSAPI_ONLINE_CLUSTER_GROUP =
    unsafe extern "system" fn(hgroup: *const _HGROUP, hdestinationnode: *const _HNODE) -> u32;
pub type PCLUSAPI_ONLINE_CLUSTER_RESOURCE =
    unsafe extern "system" fn(hresource: *mut _HRESOURCE) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_OPEN_CLUSTER =
    unsafe extern "system" fn(lpszclustername: super::super::Foundation::PWSTR) -> *mut _HCLUSTER;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_OPEN_CLUSTER_EX = unsafe extern "system" fn(
    lpszclustername: super::super::Foundation::PWSTR,
    dwdesiredaccess: u32,
    lpdwgrantedaccess: *mut u32,
) -> *mut _HCLUSTER;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_OPEN_CLUSTER_GROUP = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpszgroupname: super::super::Foundation::PWSTR,
) -> *mut _HGROUP;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_OPEN_CLUSTER_GROUP_EX = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpszgroupname: super::super::Foundation::PWSTR,
    dwdesiredaccess: u32,
    lpdwgrantedaccess: *mut u32,
) -> *mut _HGROUP;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_OPEN_CLUSTER_GROUP_GROUPSET = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpszgroupsetname: super::super::Foundation::PWSTR,
) -> *mut _HGROUPSET;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_OPEN_CLUSTER_NETINTERFACE_EX = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpsznetinterfacename: super::super::Foundation::PWSTR,
    dwdesiredaccess: u32,
    lpdwgrantedaccess: *mut u32,
) -> *mut _HNETINTERFACE;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_OPEN_CLUSTER_NETWORK = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpsznetworkname: super::super::Foundation::PWSTR,
) -> *mut _HNETWORK;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_OPEN_CLUSTER_NETWORK_EX = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpsznetworkname: super::super::Foundation::PWSTR,
    dwdesiredaccess: u32,
    lpdwgrantedaccess: *mut u32,
) -> *mut _HNETWORK;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_OPEN_CLUSTER_NET_INTERFACE = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpszinterfacename: super::super::Foundation::PWSTR,
) -> *mut _HNETINTERFACE;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_OPEN_CLUSTER_NODE = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpsznodename: super::super::Foundation::PWSTR,
) -> *mut _HNODE;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_OPEN_CLUSTER_NODE_EX = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpsznodename: super::super::Foundation::PWSTR,
    dwdesiredaccess: u32,
    lpdwgrantedaccess: *mut u32,
) -> *mut _HNODE;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_OPEN_CLUSTER_RESOURCE = unsafe extern "system" fn(
    hcluster: *mut _HCLUSTER,
    lpszresourcename: super::super::Foundation::PWSTR,
) -> *mut _HRESOURCE;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_OPEN_CLUSTER_RESOURCE_EX = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpszresourcename: super::super::Foundation::PWSTR,
    dwdesiredaccess: u32,
    lpdwgrantedaccess: *mut u32,
) -> *mut _HRESOURCE;
pub type PCLUSAPI_OPEN_NODE_BY_ID =
    unsafe extern "system" fn(hcluster: *const _HCLUSTER, nodeid: u32) -> *mut _HNODE;
pub type PCLUSAPI_PAUSE_CLUSTER_NODE = unsafe extern "system" fn(hnode: *const _HNODE) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_PAUSE_CLUSTER_NODE_EX = unsafe extern "system" fn(
    hnode: *const _HNODE,
    bdrainnode: super::super::Foundation::BOOL,
    dwpauseflags: u32,
    hnodedraintarget: *const _HNODE,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_REGISTER_CLUSTER_NOTIFY = unsafe extern "system" fn(
    hchange: *const _HCHANGE,
    dwfiltertype: u32,
    hobject: super::super::Foundation::HANDLE,
    dwnotifykey: usize,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_REGISTER_CLUSTER_NOTIFY_V2 = unsafe extern "system" fn(
    hchange: *const _HCHANGE,
    filter: NOTIFY_FILTER_AND_TYPE,
    hobject: super::super::Foundation::HANDLE,
    dwnotifykey: usize,
) -> u32;
pub type PCLUSAPI_REMOVE_CLUSTER_GROUP_DEPENDENCY =
    unsafe extern "system" fn(hgroup: *const _HGROUP, hdependson: *const _HGROUP) -> u32;
pub type PCLUSAPI_REMOVE_CLUSTER_GROUP_GROUPSET_DEPENDENCY =
    unsafe extern "system" fn(hgroupset: *const _HGROUPSET, hdependson: *const _HGROUPSET) -> u32;
pub type PCLUSAPI_REMOVE_CLUSTER_GROUP_TO_GROUP_GROUPSET_DEPENDENCY =
    unsafe extern "system" fn(hgroup: *const _HGROUP, hdependson: *const _HGROUPSET) -> u32;
pub type PCLUSAPI_REMOVE_CLUSTER_NAME_ACCOUNT =
    unsafe extern "system" fn(hcluster: *const _HCLUSTER) -> u32;
pub type PCLUSAPI_REMOVE_CLUSTER_RESOURCE_DEPENDENCY =
    unsafe extern "system" fn(hresource: *mut _HRESOURCE, hdependson: *mut _HRESOURCE) -> u32;
pub type PCLUSAPI_REMOVE_CLUSTER_RESOURCE_NODE =
    unsafe extern "system" fn(hresource: *mut _HRESOURCE, hnode: *mut _HNODE) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_REMOVE_CROSS_CLUSTER_GROUPSET_DEPENDENCY = unsafe extern "system" fn(
    hdependentgroupset: *const _HGROUPSET,
    lpremoteclustername: super::super::Foundation::PWSTR,
    lpremotegroupsetname: super::super::Foundation::PWSTR,
) -> u32;
pub type PCLUSAPI_REMOVE_RESOURCE_FROM_CLUSTER_SHARED_VOLUMES =
    unsafe extern "system" fn(hresource: *const _HRESOURCE) -> u32;
pub type PCLUSAPI_RESTART_CLUSTER_RESOURCE =
    unsafe extern "system" fn(hresource: *mut _HRESOURCE, dwflags: u32) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_RESTORE_CLUSTER_DATABASE = unsafe extern "system" fn(
    lpszpathname: super::super::Foundation::PWSTR,
    bforce: super::super::Foundation::BOOL,
    lpszquorumdriveletter: super::super::Foundation::PWSTR,
) -> u32;
pub type PCLUSAPI_RESUME_CLUSTER_NODE = unsafe extern "system" fn(hnode: *const _HNODE) -> u32;
pub type PCLUSAPI_RESUME_CLUSTER_NODE_EX = unsafe extern "system" fn(
    hnode: *const _HNODE,
    eresumefailbacktype: CLUSTER_NODE_RESUME_FAILBACK_TYPE,
    dwresumeflagsreserved: u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_SET_CLUSTER_GROUP_GROUPSET_DEPENDENCY_EXPRESSION =
    unsafe extern "system" fn(
        hgroupset: *const _HGROUPSET,
        lpszdependencyexpression: super::super::Foundation::PWSTR,
    ) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_SET_CLUSTER_GROUP_NAME = unsafe extern "system" fn(
    hgroup: *mut _HGROUP,
    lpszgroupname: super::super::Foundation::PWSTR,
) -> u32;
pub type PCLUSAPI_SET_CLUSTER_GROUP_NODE_LIST = unsafe extern "system" fn(
    hgroup: *const _HGROUP,
    nodecount: u32,
    nodelist: *const *const _HNODE,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_SET_CLUSTER_NETWORK_NAME = unsafe extern "system" fn(
    hnetwork: *const _HNETWORK,
    lpszname: super::super::Foundation::PWSTR,
) -> u32;
pub type PCLUSAPI_SET_CLUSTER_NETWORK_PRIORITY_ORDER = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    networkcount: u32,
    networklist: *const *const _HNETWORK,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_SET_CLUSTER_QUORUM_RESOURCE = unsafe extern "system" fn(
    hresource: *const _HRESOURCE,
    lpszdevicename: super::super::Foundation::PWSTR,
    dwmaxquologsize: u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_SET_CLUSTER_RESOURCE_DEPENDENCY_EXPRESSION = unsafe extern "system" fn(
    hresource: *const _HRESOURCE,
    lpszdependencyexpression: super::super::Foundation::PWSTR,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_SET_CLUSTER_RESOURCE_NAME = unsafe extern "system" fn(
    hresource: *mut _HRESOURCE,
    lpszresourcename: super::super::Foundation::PWSTR,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_SET_CLUSTER_SERVICE_ACCOUNT_PASSWORD = unsafe extern "system" fn(
    lpszclustername: super::super::Foundation::PWSTR,
    lpsznewpassword: super::super::Foundation::PWSTR,
    dwflags: u32,
    lpreturnstatusbuffer: *mut CLUSTER_SET_PASSWORD_STATUS,
    lpcbreturnstatusbuffersize: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_SET_GROUP_DEPENDENCY_EXPRESSION = unsafe extern "system" fn(
    hgroupset: *const _HGROUP,
    lpszdependencyexpression: super::super::Foundation::PWSTR,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_SHARED_VOLUME_SET_SNAPSHOT_STATE = unsafe extern "system" fn(
    guidsnapshotset: ::windows::runtime::GUID,
    lpszvolumename: super::super::Foundation::PWSTR,
    state: CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSAPI_SetClusterName = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    lpsznewclustername: super::super::Foundation::PWSTR,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSTER_CLEAR_BACKUP_STATE_FOR_SHARED_VOLUME =
    unsafe extern "system" fn(lpszvolumepathname: super::super::Foundation::PWSTR) -> u32;
pub type PCLUSTER_DECRYPT = unsafe extern "system" fn(
    hcluscryptprovider: *const _HCLUSCRYPTPROVIDER,
    pcryptinput: *const u8,
    cbcryptinput: u32,
    ppcryptoutput: *mut *mut u8,
    pcbcryptoutput: *mut u32,
) -> u32;
pub type PCLUSTER_ENCRYPT = unsafe extern "system" fn(
    hcluscryptprovider: *const _HCLUSCRYPTPROVIDER,
    pdata: *const u8,
    cbdata: u32,
    ppdata: *mut *mut u8,
    pcbdata: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSTER_GET_VOLUME_NAME_FOR_VOLUME_MOUNT_POINT =
    unsafe extern "system" fn(
        lpszvolumemountpoint: super::super::Foundation::PWSTR,
        lpszvolumename: super::super::Foundation::PWSTR,
        cchbufferlength: u32,
    ) -> super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSTER_GET_VOLUME_PATH_NAME =
    unsafe extern "system" fn(
        lpszfilename: super::super::Foundation::PWSTR,
        lpszvolumepathname: super::super::Foundation::PWSTR,
        cchbufferlength: u32,
    ) -> super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSTER_IS_PATH_ON_SHARED_VOLUME =
    unsafe extern "system" fn(
        lpszpathname: super::super::Foundation::PWSTR,
    ) -> super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSTER_PREPARE_SHARED_VOLUME_FOR_BACKUP = unsafe extern "system" fn(
    lpszfilename: super::super::Foundation::PWSTR,
    lpszvolumepathname: super::super::Foundation::PWSTR,
    lpcchvolumepathname: *mut u32,
    lpszvolumename: super::super::Foundation::PWSTR,
    lpcchvolumename: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSTER_REG_BATCH_ADD_COMMAND = unsafe extern "system" fn(
    hregbatch: *const _HREGBATCH,
    dwcommand: CLUSTER_REG_COMMAND,
    wzname: super::super::Foundation::PWSTR,
    dwoptions: u32,
    lpdata: *const ::std::ffi::c_void,
    cbdata: u32,
) -> i32;
pub type PCLUSTER_REG_BATCH_CLOSE_NOTIFICATION =
    unsafe extern "system" fn(hbatchnotification: *const _HREGBATCHNOTIFICATION) -> i32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSTER_REG_BATCH_READ_COMMAND = unsafe extern "system" fn(
    hbatchnotification: *const _HREGBATCHNOTIFICATION,
    pbatchcommand: *mut CLUSTER_BATCH_COMMAND,
) -> i32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSTER_REG_CLOSE_BATCH = unsafe extern "system" fn(
    hregbatch: *const _HREGBATCH,
    bcommit: super::super::Foundation::BOOL,
    failedcommandnumber: *mut i32,
) -> i32;
pub type PCLUSTER_REG_CLOSE_BATCH_NOTIFY_PORT =
    unsafe extern "system" fn(hbatchnotifyport: *const _HREGBATCHPORT) -> i32;
pub type PCLUSTER_REG_CLOSE_READ_BATCH = unsafe extern "system" fn(
    hregreadbatch: *const _HREGREADBATCH,
    phregreadbatchreply: *mut *mut _HREGREADBATCHREPLY,
) -> i32;
pub type PCLUSTER_REG_CLOSE_READ_BATCH_EX = unsafe extern "system" fn(
    hregreadbatch: *const _HREGREADBATCH,
    flags: u32,
    phregreadbatchreply: *mut *mut _HREGREADBATCHREPLY,
) -> i32;
pub type PCLUSTER_REG_CLOSE_READ_BATCH_REPLY =
    unsafe extern "system" fn(hregreadbatchreply: *const _HREGREADBATCHREPLY) -> i32;
#[cfg(feature = "Win32_System_Registry")]
pub type PCLUSTER_REG_CREATE_BATCH_NOTIFY_PORT = unsafe extern "system" fn(
    hkey: super::super::System::Registry::HKEY,
    phbatchnotifyport: *mut *mut _HREGBATCHPORT,
) -> i32;
#[cfg(feature = "Win32_System_Registry")]
pub type PCLUSTER_REG_CREATE_READ_BATCH = unsafe extern "system" fn(
    hkey: super::super::System::Registry::HKEY,
    phregreadbatch: *mut *mut _HREGREADBATCH,
) -> i32;
pub type PCLUSTER_REG_GET_BATCH_NOTIFICATION = unsafe extern "system" fn(
    hbatchnotify: *const _HREGBATCHPORT,
    phbatchnotification: *mut *mut _HREGBATCHNOTIFICATION,
) -> i32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSTER_REG_READ_BATCH_ADD_COMMAND = unsafe extern "system" fn(
    hregreadbatch: *const _HREGREADBATCH,
    wzsubkeyname: super::super::Foundation::PWSTR,
    wzvaluename: super::super::Foundation::PWSTR,
) -> i32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSTER_REG_READ_BATCH_REPLY_NEXT_COMMAND = unsafe extern "system" fn(
    hregreadbatchreply: *const _HREGREADBATCHREPLY,
    pbatchcommand: *mut CLUSTER_READ_BATCH_COMMAND,
) -> i32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSTER_SETUP_PROGRESS_CALLBACK =
    unsafe extern "system" fn(
        pvcallbackarg: *mut ::std::ffi::c_void,
        esetupphase: CLUSTER_SETUP_PHASE,
        ephasetype: CLUSTER_SETUP_PHASE_TYPE,
        ephaseseverity: CLUSTER_SETUP_PHASE_SEVERITY,
        dwpercentcomplete: u32,
        lpszobjectname: super::super::Foundation::PWSTR,
        dwstatus: u32,
    ) -> super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSTER_SET_ACCOUNT_ACCESS = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    szaccountsid: super::super::Foundation::PWSTR,
    dwaccess: u32,
    dwcontroltype: u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PCLUSTER_UPGRADE_PROGRESS_CALLBACK =
    unsafe extern "system" fn(
        pvcallbackarg: *mut ::std::ffi::c_void,
        eupgradephase: CLUSTER_UPGRADE_PHASE,
    ) -> super::super::Foundation::BOOL;
pub type PEND_CONTROL_CALL = unsafe extern "system" fn(context: i64, status: u32) -> u32;
pub type PEND_TYPE_CONTROL_CALL = unsafe extern "system" fn(context: i64, status: u32) -> u32;
pub type PEXTEND_RES_CONTROL_CALL =
    unsafe extern "system" fn(context: i64, newtimeoutinms: u32) -> u32;
pub type PEXTEND_RES_TYPE_CONTROL_CALL =
    unsafe extern "system" fn(context: i64, newtimeoutinms: u32) -> u32;
pub type PFREE_CLUSTER_CRYPT =
    unsafe extern "system" fn(pcryptinfo: *const ::std::ffi::c_void) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PIS_ALIVE_ROUTINE =
    unsafe extern "system" fn(resource: *mut ::std::ffi::c_void) -> super::super::Foundation::BOOL;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct PLACEMENT_OPTIONS(pub i32);
pub const PLACEMENT_OPTIONS_MIN_VALUE: PLACEMENT_OPTIONS = PLACEMENT_OPTIONS(0i32);
pub const PLACEMENT_OPTIONS_DEFAULT_PLACEMENT_OPTIONS: PLACEMENT_OPTIONS = PLACEMENT_OPTIONS(0i32);
pub const PLACEMENT_OPTIONS_DISABLE_CSV_VM_DEPENDENCY: PLACEMENT_OPTIONS = PLACEMENT_OPTIONS(1i32);
pub const PLACEMENT_OPTIONS_CONSIDER_OFFLINE_VMS: PLACEMENT_OPTIONS = PLACEMENT_OPTIONS(2i32);
pub const PLACEMENT_OPTIONS_DONT_USE_MEMORY: PLACEMENT_OPTIONS = PLACEMENT_OPTIONS(4i32);
pub const PLACEMENT_OPTIONS_DONT_USE_CPU: PLACEMENT_OPTIONS = PLACEMENT_OPTIONS(8i32);
pub const PLACEMENT_OPTIONS_DONT_USE_LOCAL_TEMP_DISK: PLACEMENT_OPTIONS = PLACEMENT_OPTIONS(16i32);
pub const PLACEMENT_OPTIONS_DONT_RESUME_VMS_WITH_EXISTING_TEMP_DISK: PLACEMENT_OPTIONS =
    PLACEMENT_OPTIONS(32i32);
pub const PLACEMENT_OPTIONS_SAVE_VMS_WITH_LOCAL_DISK_ON_DRAIN_OVERWRITE: PLACEMENT_OPTIONS =
    PLACEMENT_OPTIONS(64i32);
pub const PLACEMENT_OPTIONS_DONT_RESUME_AVAILABILTY_SET_VMS_WITH_EXISTING_TEMP_DISK:
    PLACEMENT_OPTIONS = PLACEMENT_OPTIONS(128i32);
pub const PLACEMENT_OPTIONS_SAVE_AVAILABILTY_SET_VMS_WITH_LOCAL_DISK_ON_DRAIN_OVERWRITE:
    PLACEMENT_OPTIONS = PLACEMENT_OPTIONS(256i32);
pub const PLACEMENT_OPTIONS_AVAILABILITY_SET_DOMAIN_AFFINITY: PLACEMENT_OPTIONS =
    PLACEMENT_OPTIONS(512i32);
pub const PLACEMENT_OPTIONS_ALL: PLACEMENT_OPTIONS = PLACEMENT_OPTIONS(1023i32);
impl ::std::convert::From<i32> for PLACEMENT_OPTIONS {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for PLACEMENT_OPTIONS {
    type Abi = Self;
    type DefaultType = Self;
}
#[cfg(feature = "Win32_Foundation")]
pub type PLOG_EVENT_ROUTINE = unsafe extern "system" fn(
    resourcehandle: isize,
    loglevel: LOG_LEVEL,
    formatstring: super::super::Foundation::PWSTR,
);
#[cfg(feature = "Win32_Foundation")]
pub type PLOOKS_ALIVE_ROUTINE =
    unsafe extern "system" fn(resource: *mut ::std::ffi::c_void) -> super::super::Foundation::BOOL;
pub type POFFLINE_ROUTINE = unsafe extern "system" fn(resource: *mut ::std::ffi::c_void) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type POFFLINE_V2_ROUTINE = unsafe extern "system" fn(
    resource: *const ::std::ffi::c_void,
    destinationnodename: super::super::Foundation::PWSTR,
    offlineflags: u32,
    inbuffer: *const u8,
    inbuffersize: u32,
    reserved: u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PONLINE_ROUTINE = unsafe extern "system" fn(
    resource: *mut ::std::ffi::c_void,
    eventhandle: *mut super::super::Foundation::HANDLE,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PONLINE_V2_ROUTINE = unsafe extern "system" fn(
    resource: *const ::std::ffi::c_void,
    eventhandle: *mut super::super::Foundation::HANDLE,
    onlineflags: u32,
    inbuffer: *const u8,
    inbuffersize: u32,
    reserved: u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type POPEN_CLUSTER_CRYPT_PROVIDER = unsafe extern "system" fn(
    lpszresource: super::super::Foundation::PWSTR,
    lpszprovider: *const i8,
    dwtype: u32,
    dwflags: u32,
) -> *mut _HCLUSCRYPTPROVIDER;
#[cfg(feature = "Win32_Foundation")]
pub type POPEN_CLUSTER_CRYPT_PROVIDEREX = unsafe extern "system" fn(
    lpszresource: super::super::Foundation::PWSTR,
    lpszkeyname: super::super::Foundation::PWSTR,
    lpszprovider: *const i8,
    dwtype: u32,
    dwflags: u32,
) -> *mut _HCLUSCRYPTPROVIDER;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type POPEN_ROUTINE = unsafe extern "system" fn(
    resourcename: super::super::Foundation::PWSTR,
    resourcekey: super::super::System::Registry::HKEY,
    resourcehandle: isize,
) -> *mut ::std::ffi::c_void;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type POPEN_V2_ROUTINE = unsafe extern "system" fn(
    resourcename: super::super::Foundation::PWSTR,
    resourcekey: super::super::System::Registry::HKEY,
    resourcehandle: isize,
    openflags: u32,
) -> *mut ::std::ffi::c_void;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct POST_UPGRADE_VERSION_INFO {
    pub newMajorVersion: u32,
    pub newUpgradeVersion: u32,
    pub oldMajorVersion: u32,
    pub oldUpgradeVersion: u32,
    pub reserved: u32,
}
impl POST_UPGRADE_VERSION_INFO {}
impl ::std::default::Default for POST_UPGRADE_VERSION_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for POST_UPGRADE_VERSION_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("POST_UPGRADE_VERSION_INFO")
            .field("newMajorVersion", &self.newMajorVersion)
            .field("newUpgradeVersion", &self.newUpgradeVersion)
            .field("oldMajorVersion", &self.oldMajorVersion)
            .field("oldUpgradeVersion", &self.oldUpgradeVersion)
            .field("reserved", &self.reserved)
            .finish()
    }
}
impl ::std::cmp::PartialEq for POST_UPGRADE_VERSION_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.newMajorVersion == other.newMajorVersion
            && self.newUpgradeVersion == other.newUpgradeVersion
            && self.oldMajorVersion == other.oldMajorVersion
            && self.oldUpgradeVersion == other.oldUpgradeVersion
            && self.reserved == other.reserved
    }
}
impl ::std::cmp::Eq for POST_UPGRADE_VERSION_INFO {}
unsafe impl ::windows::runtime::Abi for POST_UPGRADE_VERSION_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[cfg(feature = "Win32_Foundation")]
pub type PQUERY_APPINSTANCE_VERSION = unsafe extern "system" fn(
    appinstanceid: *const ::windows::runtime::GUID,
    instanceversionhigh: *mut u64,
    instanceversionlow: *mut u64,
    versionstatus: *mut super::super::Foundation::NTSTATUS,
) -> u32;
pub type PQUORUM_RESOURCE_LOST = unsafe extern "system" fn(resource: isize);
#[cfg(feature = "Win32_Foundation")]
pub type PRAISE_RES_TYPE_NOTIFICATION = unsafe extern "system" fn(
    resourcetype: super::super::Foundation::PWSTR,
    ppayload: *const u8,
    payloadsize: u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PREGISTER_APPINSTANCE = unsafe extern "system" fn(
    processhandle: super::super::Foundation::HANDLE,
    appinstanceid: *const ::windows::runtime::GUID,
    childreninheritappinstance: super::super::Foundation::BOOL,
) -> u32;
pub type PREGISTER_APPINSTANCE_VERSION = unsafe extern "system" fn(
    appinstanceid: *const ::windows::runtime::GUID,
    instanceversionhigh: u64,
    instanceversionlow: u64,
) -> u32;
pub type PRELEASE_ROUTINE = unsafe extern "system" fn(resource: *mut ::std::ffi::c_void) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PREQUEST_DUMP_ROUTINE = unsafe extern "system" fn(
    resourcehandle: isize,
    dumpduetocallinprogress: super::super::Foundation::BOOL,
    dumpdelayinms: u32,
) -> u32;
pub type PRESET_ALL_APPINSTANCE_VERSIONS = unsafe extern "system" fn() -> u32;
pub type PRESOURCE_CONTROL_ROUTINE = unsafe extern "system" fn(
    resource: *mut ::std::ffi::c_void,
    controlcode: u32,
    inbuffer: *mut ::std::ffi::c_void,
    inbuffersize: u32,
    outbuffer: *mut ::std::ffi::c_void,
    outbuffersize: u32,
    bytesreturned: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESOURCE_TYPE_CONTROL_ROUTINE = unsafe extern "system" fn(
    resourcetypename: super::super::Foundation::PWSTR,
    controlcode: u32,
    inbuffer: *mut ::std::ffi::c_void,
    inbuffersize: u32,
    outbuffer: *mut ::std::ffi::c_void,
    outbuffersize: u32,
    bytesreturned: *mut u32,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PRESUTIL_ADD_UNKNOWN_PROPERTIES = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    poutpropertylist: *mut ::std::ffi::c_void,
    pcboutpropertylistsize: u32,
    pcbbytesreturned: *mut u32,
    pcbrequired: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_CREATE_DIRECTORY_TREE =
    unsafe extern "system" fn(pszpath: super::super::Foundation::PWSTR) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_DUP_PARAMETER_BLOCK = unsafe extern "system" fn(
    poutparams: *mut u8,
    pinparams: *const u8,
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_DUP_STRING = unsafe extern "system" fn(
    pszinstring: super::super::Foundation::PWSTR,
) -> super::super::Foundation::PWSTR;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PRESUTIL_ENUM_PRIVATE_PROPERTIES = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    pszoutproperties: super::super::Foundation::PWSTR,
    cboutpropertiessize: u32,
    pcbbytesreturned: *mut u32,
    pcbrequired: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_ENUM_PROPERTIES = unsafe extern "system" fn(
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    pszoutproperties: super::super::Foundation::PWSTR,
    cboutpropertiessize: u32,
    pcbbytesreturned: *mut u32,
    pcbrequired: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_ENUM_RESOURCES = unsafe extern "system" fn(
    hself: *mut _HRESOURCE,
    lpszrestypename: super::super::Foundation::PWSTR,
    prescallback: ::windows::runtime::RawPtr,
    pparameter: *mut ::std::ffi::c_void,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_ENUM_RESOURCES_EX = unsafe extern "system" fn(
    hcluster: *mut _HCLUSTER,
    hself: *mut _HRESOURCE,
    lpszrestypename: super::super::Foundation::PWSTR,
    prescallback: ::windows::runtime::RawPtr,
    pparameter: *mut ::std::ffi::c_void,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_ENUM_RESOURCES_EX2 = unsafe extern "system" fn(
    hcluster: *mut _HCLUSTER,
    hself: *mut _HRESOURCE,
    lpszrestypename: super::super::Foundation::PWSTR,
    prescallback: ::windows::runtime::RawPtr,
    pparameter: *mut ::std::ffi::c_void,
    dwdesiredaccess: u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_EXPAND_ENVIRONMENT_STRINGS =
    unsafe extern "system" fn(
        pszsrc: super::super::Foundation::PWSTR,
    ) -> super::super::Foundation::PWSTR;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_FIND_BINARY_PROPERTY = unsafe extern "system" fn(
    ppropertylist: *const ::std::ffi::c_void,
    cbpropertylistsize: u32,
    pszpropertyname: super::super::Foundation::PWSTR,
    pbpropertyvalue: *mut *mut u8,
    pcbpropertyvaluesize: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_FIND_DEPENDENT_DISK_RESOURCE_DRIVE_LETTER = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    hresource: *const _HRESOURCE,
    pszdriveletter: super::super::Foundation::PWSTR,
    pcchdriveletter: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_FIND_DWORD_PROPERTY = unsafe extern "system" fn(
    ppropertylist: *const ::std::ffi::c_void,
    cbpropertylistsize: u32,
    pszpropertyname: super::super::Foundation::PWSTR,
    pdwpropertyvalue: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_FIND_EXPANDED_SZ_PROPERTY = unsafe extern "system" fn(
    ppropertylist: *const ::std::ffi::c_void,
    cbpropertylistsize: u32,
    pszpropertyname: super::super::Foundation::PWSTR,
    pszpropertyvalue: *mut super::super::Foundation::PWSTR,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_FIND_EXPAND_SZ_PROPERTY = unsafe extern "system" fn(
    ppropertylist: *const ::std::ffi::c_void,
    cbpropertylistsize: u32,
    pszpropertyname: super::super::Foundation::PWSTR,
    pszpropertyvalue: *mut super::super::Foundation::PWSTR,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_FIND_FILETIME_PROPERTY = unsafe extern "system" fn(
    ppropertylist: *const ::std::ffi::c_void,
    cbpropertylistsize: u32,
    pszpropertyname: super::super::Foundation::PWSTR,
    pftpropertyvalue: *mut super::super::Foundation::FILETIME,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_FIND_LONG_PROPERTY = unsafe extern "system" fn(
    ppropertylist: *const ::std::ffi::c_void,
    cbpropertylistsize: u32,
    pszpropertyname: super::super::Foundation::PWSTR,
    plpropertyvalue: *mut i32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_FIND_MULTI_SZ_PROPERTY = unsafe extern "system" fn(
    ppropertylist: *const ::std::ffi::c_void,
    cbpropertylistsize: u32,
    pszpropertyname: super::super::Foundation::PWSTR,
    pszpropertyvalue: *mut super::super::Foundation::PWSTR,
    pcbpropertyvaluesize: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_FIND_SZ_PROPERTY = unsafe extern "system" fn(
    ppropertylist: *const ::std::ffi::c_void,
    cbpropertylistsize: u32,
    pszpropertyname: super::super::Foundation::PWSTR,
    pszpropertyvalue: *mut super::super::Foundation::PWSTR,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_FIND_ULARGEINTEGER_PROPERTY = unsafe extern "system" fn(
    ppropertylist: *const ::std::ffi::c_void,
    cbpropertylistsize: u32,
    pszpropertyname: super::super::Foundation::PWSTR,
    plpropertyvalue: *mut u64,
) -> u32;
pub type PRESUTIL_FREE_ENVIRONMENT =
    unsafe extern "system" fn(lpenvironment: *mut ::std::ffi::c_void) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_FREE_PARAMETER_BLOCK = unsafe extern "system" fn(
    poutparams: *mut u8,
    pinparams: *const u8,
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
);
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PRESUTIL_GET_ALL_PROPERTIES = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    poutpropertylist: *mut ::std::ffi::c_void,
    cboutpropertylistsize: u32,
    pcbbytesreturned: *mut u32,
    pcbrequired: *mut u32,
) -> u32;
pub type PRESUTIL_GET_BINARY_PROPERTY = unsafe extern "system" fn(
    ppboutvalue: *mut *mut u8,
    pcboutvaluesize: *mut u32,
    pvaluestruct: *const CLUSPROP_BINARY,
    pboldvalue: *const u8,
    cboldvaluesize: u32,
    pppropertylist: *mut *mut u8,
    pcbpropertylistsize: *mut u32,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PRESUTIL_GET_BINARY_VALUE = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    pszvaluename: super::super::Foundation::PWSTR,
    ppboutvalue: *mut *mut u8,
    pcboutvaluesize: *mut u32,
) -> u32;
pub type PRESUTIL_GET_CORE_CLUSTER_RESOURCES = unsafe extern "system" fn(
    hcluster: *const _HCLUSTER,
    phclusternameresource: *mut *mut _HRESOURCE,
    phclusteripaddressresource: *mut *mut _HRESOURCE,
    phclusterquorumresource: *mut *mut _HRESOURCE,
) -> u32;
pub type PRESUTIL_GET_CORE_CLUSTER_RESOURCES_EX = unsafe extern "system" fn(
    hclusterin: *const _HCLUSTER,
    phclusternameresourceout: *mut *mut _HRESOURCE,
    phclusteripaddressresourceout: *mut *mut _HRESOURCE,
    phclusterquorumresourceout: *mut *mut _HRESOURCE,
    dwdesiredaccess: u32,
) -> u32;
pub type PRESUTIL_GET_DWORD_PROPERTY = unsafe extern "system" fn(
    pdwoutvalue: *mut u32,
    pvaluestruct: *const CLUSPROP_DWORD,
    dwoldvalue: u32,
    dwminimum: u32,
    dwmaximum: u32,
    pppropertylist: *mut *mut u8,
    pcbpropertylistsize: *mut u32,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PRESUTIL_GET_DWORD_VALUE = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    pszvaluename: super::super::Foundation::PWSTR,
    pdwoutvalue: *mut u32,
    dwdefaultvalue: u32,
) -> u32;
pub type PRESUTIL_GET_ENVIRONMENT_WITH_NET_NAME =
    unsafe extern "system" fn(hresource: *const _HRESOURCE) -> *mut ::std::ffi::c_void;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PRESUTIL_GET_EXPAND_SZ_VALUE =
    unsafe extern "system" fn(
        hkeyclusterkey: super::super::System::Registry::HKEY,
        pszvaluename: super::super::Foundation::PWSTR,
        bexpand: super::super::Foundation::BOOL,
    ) -> super::super::Foundation::PWSTR;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_GET_FILETIME_PROPERTY = unsafe extern "system" fn(
    pftoutvalue: *mut super::super::Foundation::FILETIME,
    pvaluestruct: *const CLUSPROP_FILETIME,
    ftoldvalue: super::super::Foundation::FILETIME,
    ftminimum: super::super::Foundation::FILETIME,
    ftmaximum: super::super::Foundation::FILETIME,
    pppropertylist: *mut *mut u8,
    pcbpropertylistsize: *mut u32,
) -> u32;
pub type PRESUTIL_GET_LONG_PROPERTY = unsafe extern "system" fn(
    ploutvalue: *mut i32,
    pvaluestruct: *const CLUSPROP_LONG,
    loldvalue: i32,
    lminimum: i32,
    lmaximum: i32,
    pppropertylist: *mut *mut u8,
    pcbpropertylistsize: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_GET_MULTI_SZ_PROPERTY = unsafe extern "system" fn(
    ppszoutvalue: *mut super::super::Foundation::PWSTR,
    pcboutvaluesize: *mut u32,
    pvaluestruct: *const CLUSPROP_SZ,
    pszoldvalue: super::super::Foundation::PWSTR,
    cboldvaluesize: u32,
    pppropertylist: *mut *mut u8,
    pcbpropertylistsize: *mut u32,
) -> u32;
#[cfg(feature = "Win32_System_Registry")]
pub type PRESUTIL_GET_PRIVATE_PROPERTIES = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    poutpropertylist: *mut ::std::ffi::c_void,
    cboutpropertylistsize: u32,
    pcbbytesreturned: *mut u32,
    pcbrequired: *mut u32,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PRESUTIL_GET_PROPERTIES = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    poutpropertylist: *mut ::std::ffi::c_void,
    cboutpropertylistsize: u32,
    pcbbytesreturned: *mut u32,
    pcbrequired: *mut u32,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PRESUTIL_GET_PROPERTIES_TO_PARAMETER_BLOCK = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    poutparams: *mut u8,
    bcheckforrequiredproperties: super::super::Foundation::BOOL,
    psznameofpropinerror: *mut super::super::Foundation::PWSTR,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PRESUTIL_GET_PROPERTY = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    ppropertytableitem: *const RESUTIL_PROPERTY_ITEM,
    poutpropertyitem: *mut *mut ::std::ffi::c_void,
    pcboutpropertyitemsize: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_GET_PROPERTY_FORMATS = unsafe extern "system" fn(
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    poutpropertyformatlist: *mut ::std::ffi::c_void,
    cbpropertyformatlistsize: u32,
    pcbbytesreturned: *mut u32,
    pcbrequired: *mut u32,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PRESUTIL_GET_PROPERTY_SIZE = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    ppropertytableitem: *const RESUTIL_PROPERTY_ITEM,
    pcboutpropertylistsize: *mut u32,
    pnpropertycount: *mut u32,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PRESUTIL_GET_QWORD_VALUE = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    pszvaluename: super::super::Foundation::PWSTR,
    pqwoutvalue: *mut u64,
    qwdefaultvalue: u64,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_GET_RESOURCE_DEPENDENCY = unsafe extern "system" fn(
    hself: super::super::Foundation::HANDLE,
    lpszresourcetype: super::super::Foundation::PWSTR,
) -> *mut _HRESOURCE;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_CLASS = unsafe extern "system" fn(
    hcluster: *mut _HCLUSTER,
    hself: super::super::Foundation::HANDLE,
    prci: *mut CLUS_RESOURCE_CLASS_INFO,
    brecurse: super::super::Foundation::BOOL,
) -> *mut _HRESOURCE;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_CLASS_EX =
    unsafe extern "system" fn(
        hcluster: *mut _HCLUSTER,
        hself: super::super::Foundation::HANDLE,
        prci: *mut CLUS_RESOURCE_CLASS_INFO,
        brecurse: super::super::Foundation::BOOL,
        dwdesiredaccess: u32,
    ) -> *mut _HRESOURCE;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_NAME = unsafe extern "system" fn(
    hcluster: *mut _HCLUSTER,
    hself: super::super::Foundation::HANDLE,
    lpszresourcetype: super::super::Foundation::PWSTR,
    brecurse: super::super::Foundation::BOOL,
) -> *mut _HRESOURCE;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_NAME_EX = unsafe extern "system" fn(
    hcluster: *mut _HCLUSTER,
    hself: super::super::Foundation::HANDLE,
    lpszresourcetype: super::super::Foundation::PWSTR,
    brecurse: super::super::Foundation::BOOL,
    dwdesiredaccess: u32,
)
    -> *mut _HRESOURCE;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_GET_RESOURCE_DEPENDENCY_EX = unsafe extern "system" fn(
    hself: super::super::Foundation::HANDLE,
    lpszresourcetype: super::super::Foundation::PWSTR,
    dwdesiredaccess: u32,
) -> *mut _HRESOURCE;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_GET_RESOURCE_DEPENDENTIP_ADDRESS_PROPS = unsafe extern "system" fn(
    hresource: *const _HRESOURCE,
    pszaddress: super::super::Foundation::PWSTR,
    pcchaddress: *mut u32,
    pszsubnetmask: super::super::Foundation::PWSTR,
    pcchsubnetmask: *mut u32,
    psznetwork: super::super::Foundation::PWSTR,
    pcchnetwork: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_GET_RESOURCE_NAME = unsafe extern "system" fn(
    hresource: *const _HRESOURCE,
    pszresourcename: super::super::Foundation::PWSTR,
    pcchresourcenameinout: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_GET_RESOURCE_NAME_DEPENDENCY = unsafe extern "system" fn(
    lpszresourcename: super::super::Foundation::PWSTR,
    lpszresourcetype: super::super::Foundation::PWSTR,
) -> *mut _HRESOURCE;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_GET_RESOURCE_NAME_DEPENDENCY_EX = unsafe extern "system" fn(
    lpszresourcename: super::super::Foundation::PWSTR,
    lpszresourcetype: super::super::Foundation::PWSTR,
    dwdesiredaccess: u32,
) -> *mut _HRESOURCE;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_GET_SZ_PROPERTY = unsafe extern "system" fn(
    ppszoutvalue: *mut super::super::Foundation::PWSTR,
    pvaluestruct: *const CLUSPROP_SZ,
    pszoldvalue: super::super::Foundation::PWSTR,
    pppropertylist: *mut *mut u8,
    pcbpropertylistsize: *mut u32,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PRESUTIL_GET_SZ_VALUE = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    pszvaluename: super::super::Foundation::PWSTR,
) -> super::super::Foundation::PWSTR;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_IS_PATH_VALID = unsafe extern "system" fn(
    pszpath: super::super::Foundation::PWSTR,
) -> super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_IS_RESOURCE_CLASS_EQUAL =
    unsafe extern "system" fn(
        prci: *mut CLUS_RESOURCE_CLASS_INFO,
        hresource: *mut _HRESOURCE,
    ) -> super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_PROPERTY_LIST_FROM_PARAMETER_BLOCK = unsafe extern "system" fn(
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    poutpropertylist: *mut ::std::ffi::c_void,
    pcboutpropertylistsize: *mut u32,
    pinparams: *const u8,
    pcbbytesreturned: *mut u32,
    pcbrequired: *mut u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_REMOVE_RESOURCE_SERVICE_ENVIRONMENT = unsafe extern "system" fn(
    pszservicename: super::super::Foundation::PWSTR,
    pfnlogevent: ::windows::runtime::RawPtr,
    hresourcehandle: isize,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_RESOURCES_EQUAL = unsafe extern "system" fn(
    hself: *mut _HRESOURCE,
    hresource: *mut _HRESOURCE,
) -> super::super::Foundation::BOOL;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_RESOURCE_TYPES_EQUAL =
    unsafe extern "system" fn(
        lpszresourcetypename: super::super::Foundation::PWSTR,
        hresource: *mut _HRESOURCE,
    ) -> super::super::Foundation::BOOL;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PRESUTIL_SET_BINARY_VALUE = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    pszvaluename: super::super::Foundation::PWSTR,
    pbnewvalue: *const u8,
    cbnewvaluesize: u32,
    ppboutvalue: *mut *mut u8,
    pcboutvaluesize: *mut u32,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PRESUTIL_SET_DWORD_VALUE = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    pszvaluename: super::super::Foundation::PWSTR,
    dwnewvalue: u32,
    pdwoutvalue: *mut u32,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PRESUTIL_SET_EXPAND_SZ_VALUE = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    pszvaluename: super::super::Foundation::PWSTR,
    psznewvalue: super::super::Foundation::PWSTR,
    ppszoutstring: *mut super::super::Foundation::PWSTR,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PRESUTIL_SET_MULTI_SZ_VALUE = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    pszvaluename: super::super::Foundation::PWSTR,
    psznewvalue: super::super::Foundation::PWSTR,
    cbnewvaluesize: u32,
    ppszoutvalue: *mut super::super::Foundation::PWSTR,
    pcboutvaluesize: *mut u32,
) -> u32;
#[cfg(feature = "Win32_System_Registry")]
pub type PRESUTIL_SET_PRIVATE_PROPERTY_LIST = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    pinpropertylist: *const ::std::ffi::c_void,
    cbinpropertylistsize: u32,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PRESUTIL_SET_PROPERTY_PARAMETER_BLOCK = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    reserved: *mut ::std::ffi::c_void,
    pinparams: *const u8,
    pinpropertylist: *const ::std::ffi::c_void,
    cbinpropertylistsize: u32,
    poutparams: *mut u8,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PRESUTIL_SET_PROPERTY_PARAMETER_BLOCK_EX = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    reserved: *mut ::std::ffi::c_void,
    pinparams: *const u8,
    pinpropertylist: *const ::std::ffi::c_void,
    cbinpropertylistsize: u32,
    bforcewrite: super::super::Foundation::BOOL,
    poutparams: *mut u8,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PRESUTIL_SET_PROPERTY_TABLE = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    reserved: *mut ::std::ffi::c_void,
    ballowunknownproperties: super::super::Foundation::BOOL,
    pinpropertylist: *const ::std::ffi::c_void,
    cbinpropertylistsize: u32,
    poutparams: *mut u8,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PRESUTIL_SET_PROPERTY_TABLE_EX = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    reserved: *mut ::std::ffi::c_void,
    ballowunknownproperties: super::super::Foundation::BOOL,
    pinpropertylist: *const ::std::ffi::c_void,
    cbinpropertylistsize: u32,
    bforcewrite: super::super::Foundation::BOOL,
    poutparams: *mut u8,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PRESUTIL_SET_QWORD_VALUE = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    pszvaluename: super::super::Foundation::PWSTR,
    qwnewvalue: u64,
    pqwoutvalue: *mut u64,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_SET_RESOURCE_SERVICE_ENVIRONMENT = unsafe extern "system" fn(
    pszservicename: super::super::Foundation::PWSTR,
    hresource: *mut _HRESOURCE,
    pfnlogevent: ::windows::runtime::RawPtr,
    hresourcehandle: isize,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Security"))]
pub type PRESUTIL_SET_RESOURCE_SERVICE_START_PARAMETERS = unsafe extern "system" fn(
    pszservicename: super::super::Foundation::PWSTR,
    schscmhandle: super::super::Security::SC_HANDLE,
    phservice: *mut isize,
    pfnlogevent: ::windows::runtime::RawPtr,
    hresourcehandle: isize,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Security"))]
pub type PRESUTIL_SET_RESOURCE_SERVICE_START_PARAMETERS_EX = unsafe extern "system" fn(
    pszservicename: super::super::Foundation::PWSTR,
    schscmhandle: super::super::Security::SC_HANDLE,
    phservice: *mut isize,
    dwdesiredaccess: u32,
    pfnlogevent: ::windows::runtime::RawPtr,
    hresourcehandle: isize,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PRESUTIL_SET_SZ_VALUE = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    pszvaluename: super::super::Foundation::PWSTR,
    psznewvalue: super::super::Foundation::PWSTR,
    ppszoutstring: *mut super::super::Foundation::PWSTR,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PRESUTIL_SET_UNKNOWN_PROPERTIES = unsafe extern "system" fn(
    hkeyclusterkey: super::super::System::Registry::HKEY,
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    pinpropertylist: *const ::std::ffi::c_void,
    cbinpropertylistsize: u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_START_RESOURCE_SERVICE = unsafe extern "system" fn(
    pszservicename: super::super::Foundation::PWSTR,
    phservicehandle: *mut isize,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_STOP_RESOURCE_SERVICE =
    unsafe extern "system" fn(pszservicename: super::super::Foundation::PWSTR) -> u32;
#[cfg(feature = "Win32_Security")]
pub type PRESUTIL_STOP_SERVICE =
    unsafe extern "system" fn(hservicehandle: super::super::Security::SC_HANDLE) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_TERMINATE_SERVICE_PROCESS_FROM_RES_DLL = unsafe extern "system" fn(
    dwservicepid: u32,
    boffline: super::super::Foundation::BOOL,
    pdwresourcestate: *mut u32,
    pfnlogevent: ::windows::runtime::RawPtr,
    hresourcehandle: isize,
) -> u32;
pub type PRESUTIL_VERIFY_PRIVATE_PROPERTY_LIST = unsafe extern "system" fn(
    pinpropertylist: *const ::std::ffi::c_void,
    cbinpropertylistsize: u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_VERIFY_PROPERTY_TABLE = unsafe extern "system" fn(
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    reserved: *mut ::std::ffi::c_void,
    ballowunknownproperties: super::super::Foundation::BOOL,
    pinpropertylist: *const ::std::ffi::c_void,
    cbinpropertylistsize: u32,
    poutparams: *mut u8,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PRESUTIL_VERIFY_RESOURCE_SERVICE =
    unsafe extern "system" fn(pszservicename: super::super::Foundation::PWSTR) -> u32;
#[cfg(feature = "Win32_Security")]
pub type PRESUTIL_VERIFY_SERVICE =
    unsafe extern "system" fn(hservicehandle: super::super::Security::SC_HANDLE) -> u32;
pub type PRES_UTIL_VERIFY_SHUTDOWN_SAFE =
    unsafe extern "system" fn(flags: u32, reason: u32, presult: *mut u32) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PSET_INTERNAL_STATE = unsafe extern "system" fn(
    param0: isize,
    statetype: CLUSTER_RESOURCE_APPLICATION_STATE,
    active: super::super::Foundation::BOOL,
) -> u32;
pub type PSET_RESOURCE_INMEMORY_NODELOCAL_PROPERTIES_ROUTINE = unsafe extern "system" fn(
    resourcehandle: isize,
    propertylistbuffer: *const u8,
    propertylistbuffersize: u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PSET_RESOURCE_LOCKED_MODE_EX_ROUTINE = unsafe extern "system" fn(
    resourcehandle: isize,
    lockedmodeenabled: super::super::Foundation::BOOL,
    lockedmodereason: u32,
    lockedmodeflags: u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PSET_RESOURCE_LOCKED_MODE_ROUTINE = unsafe extern "system" fn(
    resourcehandle: isize,
    lockedmodeenabled: super::super::Foundation::BOOL,
    lockedmodereason: u32,
) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PSET_RESOURCE_STATUS_ROUTINE =
    unsafe extern "system" fn(resourcehandle: isize, resourcestatus: *mut RESOURCE_STATUS) -> u32;
#[cfg(feature = "Win32_Foundation")]
pub type PSET_RESOURCE_STATUS_ROUTINE_EX = unsafe extern "system" fn(
    resourcehandle: isize,
    resourcestatus: *mut RESOURCE_STATUS_EX,
) -> u32;
pub type PSIGNAL_FAILURE_ROUTINE = unsafe extern "system" fn(
    resourcehandle: isize,
    failuretype: FAILURE_TYPE,
    applicationspecificerrorcode: u32,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PSTARTUP_EX_ROUTINE = unsafe extern "system" fn(
    resourcetype: super::super::Foundation::PWSTR,
    minversionsupported: u32,
    maxversionsupported: u32,
    monitorcallbackfunctions: *mut ::std::mem::ManuallyDrop<CLRES_CALLBACK_FUNCTION_TABLE>,
    resourcedllinterfacefunctions: *mut *mut CLRES_FUNCTION_TABLE,
) -> u32;
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub type PSTARTUP_ROUTINE = unsafe extern "system" fn(
    resourcetype: super::super::Foundation::PWSTR,
    minversionsupported: u32,
    maxversionsupported: u32,
    setresourcestatus: ::windows::runtime::RawPtr,
    logevent: ::windows::runtime::RawPtr,
    functiontable: *mut *mut CLRES_FUNCTION_TABLE,
) -> u32;
pub type PTERMINATE_ROUTINE = unsafe extern "system" fn(resource: *mut ::std::ffi::c_void);
#[cfg(feature = "Win32_Foundation")]
pub type PWORKER_START_ROUTINE = unsafe extern "system" fn(
    pworker: *mut CLUS_WORKER,
    lpthreadparameter: *mut ::std::ffi::c_void,
) -> u32;
#[inline]
pub unsafe fn PauseClusterNode(hnode: *const _HNODE) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn PauseClusterNode(hnode: *const _HNODE) -> u32;
        }
        ::std::mem::transmute(PauseClusterNode(::std::mem::transmute(hnode)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PauseClusterNodeEx<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    hnode: *const _HNODE,
    bdrainnode: Param1,
    dwpauseflags: u32,
    hnodedraintarget: *const _HNODE,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn PauseClusterNodeEx(
                hnode: *const _HNODE,
                bdrainnode: super::super::Foundation::BOOL,
                dwpauseflags: u32,
                hnodedraintarget: *const _HNODE,
            ) -> u32;
        }
        ::std::mem::transmute(PauseClusterNodeEx(
            ::std::mem::transmute(hnode),
            bdrainnode.into_param().abi(),
            ::std::mem::transmute(dwpauseflags),
            ::std::mem::transmute(hnodedraintarget),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct PaxosTagCStruct {
    pub __padding__PaxosTagVtable: u64,
    pub __padding__NextEpochVtable: u64,
    pub __padding__NextEpoch_DateTimeVtable: u64,
    pub NextEpoch_DateTime_ticks: u64,
    pub NextEpoch_Value: i32,
    pub __padding__BoundryNextEpoch: u32,
    pub __padding__EpochVtable: u64,
    pub __padding__Epoch_DateTimeVtable: u64,
    pub Epoch_DateTime_ticks: u64,
    pub Epoch_Value: i32,
    pub __padding__BoundryEpoch: u32,
    pub Sequence: i32,
    pub __padding__BoundrySequence: u32,
}
impl PaxosTagCStruct {}
impl ::std::default::Default for PaxosTagCStruct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for PaxosTagCStruct {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("PaxosTagCStruct")
            .field("__padding__PaxosTagVtable", &self.__padding__PaxosTagVtable)
            .field(
                "__padding__NextEpochVtable",
                &self.__padding__NextEpochVtable,
            )
            .field(
                "__padding__NextEpoch_DateTimeVtable",
                &self.__padding__NextEpoch_DateTimeVtable,
            )
            .field("NextEpoch_DateTime_ticks", &self.NextEpoch_DateTime_ticks)
            .field("NextEpoch_Value", &self.NextEpoch_Value)
            .field(
                "__padding__BoundryNextEpoch",
                &self.__padding__BoundryNextEpoch,
            )
            .field("__padding__EpochVtable", &self.__padding__EpochVtable)
            .field(
                "__padding__Epoch_DateTimeVtable",
                &self.__padding__Epoch_DateTimeVtable,
            )
            .field("Epoch_DateTime_ticks", &self.Epoch_DateTime_ticks)
            .field("Epoch_Value", &self.Epoch_Value)
            .field("__padding__BoundryEpoch", &self.__padding__BoundryEpoch)
            .field("Sequence", &self.Sequence)
            .field(
                "__padding__BoundrySequence",
                &self.__padding__BoundrySequence,
            )
            .finish()
    }
}
impl ::std::cmp::PartialEq for PaxosTagCStruct {
    fn eq(&self, other: &Self) -> bool {
        self.__padding__PaxosTagVtable == other.__padding__PaxosTagVtable
            && self.__padding__NextEpochVtable == other.__padding__NextEpochVtable
            && self.__padding__NextEpoch_DateTimeVtable == other.__padding__NextEpoch_DateTimeVtable
            && self.NextEpoch_DateTime_ticks == other.NextEpoch_DateTime_ticks
            && self.NextEpoch_Value == other.NextEpoch_Value
            && self.__padding__BoundryNextEpoch == other.__padding__BoundryNextEpoch
            && self.__padding__EpochVtable == other.__padding__EpochVtable
            && self.__padding__Epoch_DateTimeVtable == other.__padding__Epoch_DateTimeVtable
            && self.Epoch_DateTime_ticks == other.Epoch_DateTime_ticks
            && self.Epoch_Value == other.Epoch_Value
            && self.__padding__BoundryEpoch == other.__padding__BoundryEpoch
            && self.Sequence == other.Sequence
            && self.__padding__BoundrySequence == other.__padding__BoundrySequence
    }
}
impl ::std::cmp::Eq for PaxosTagCStruct {}
unsafe impl ::windows::runtime::Abi for PaxosTagCStruct {
    type Abi = Self;
    type DefaultType = Self;
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn QueryAppInstanceVersion(
    appinstanceid: *const ::windows::runtime::GUID,
    instanceversionhigh: *mut u64,
    instanceversionlow: *mut u64,
    versionstatus: *mut super::super::Foundation::NTSTATUS,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn QueryAppInstanceVersion(
                appinstanceid: *const ::windows::runtime::GUID,
                instanceversionhigh: *mut u64,
                instanceversionlow: *mut u64,
                versionstatus: *mut super::super::Foundation::NTSTATUS,
            ) -> u32;
        }
        ::std::mem::transmute(QueryAppInstanceVersion(
            ::std::mem::transmute(appinstanceid),
            ::std::mem::transmute(instanceversionhigh),
            ::std::mem::transmute(instanceversionlow),
            ::std::mem::transmute(versionstatus),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct RESDLL_CONTEXT_OPERATION_TYPE(pub i32);
pub const ResdllContextOperationTypeFailback: RESDLL_CONTEXT_OPERATION_TYPE =
    RESDLL_CONTEXT_OPERATION_TYPE(0i32);
pub const ResdllContextOperationTypeDrain: RESDLL_CONTEXT_OPERATION_TYPE =
    RESDLL_CONTEXT_OPERATION_TYPE(1i32);
pub const ResdllContextOperationTypeDrainFailure: RESDLL_CONTEXT_OPERATION_TYPE =
    RESDLL_CONTEXT_OPERATION_TYPE(2i32);
pub const ResdllContextOperationTypeEmbeddedFailure: RESDLL_CONTEXT_OPERATION_TYPE =
    RESDLL_CONTEXT_OPERATION_TYPE(3i32);
pub const ResdllContextOperationTypePreemption: RESDLL_CONTEXT_OPERATION_TYPE =
    RESDLL_CONTEXT_OPERATION_TYPE(4i32);
pub const ResdllContextOperationTypeNetworkDisconnect: RESDLL_CONTEXT_OPERATION_TYPE =
    RESDLL_CONTEXT_OPERATION_TYPE(5i32);
pub const ResdllContextOperationTypeNetworkDisconnectMoveRetry: RESDLL_CONTEXT_OPERATION_TYPE =
    RESDLL_CONTEXT_OPERATION_TYPE(6i32);
impl ::std::convert::From<i32> for RESDLL_CONTEXT_OPERATION_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for RESDLL_CONTEXT_OPERATION_TYPE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct RESOURCE_EXIT_STATE(pub i32);
pub const ResourceExitStateContinue: RESOURCE_EXIT_STATE = RESOURCE_EXIT_STATE(0i32);
pub const ResourceExitStateTerminate: RESOURCE_EXIT_STATE = RESOURCE_EXIT_STATE(1i32);
pub const ResourceExitStateMax: RESOURCE_EXIT_STATE = RESOURCE_EXIT_STATE(2i32);
impl ::std::convert::From<i32> for RESOURCE_EXIT_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for RESOURCE_EXIT_STATE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct RESOURCE_FAILURE_INFO {
    pub dwRestartAttemptsRemaining: u32,
    pub dwRestartPeriodRemaining: u32,
}
impl RESOURCE_FAILURE_INFO {}
impl ::std::default::Default for RESOURCE_FAILURE_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for RESOURCE_FAILURE_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("RESOURCE_FAILURE_INFO")
            .field(
                "dwRestartAttemptsRemaining",
                &self.dwRestartAttemptsRemaining,
            )
            .field("dwRestartPeriodRemaining", &self.dwRestartPeriodRemaining)
            .finish()
    }
}
impl ::std::cmp::PartialEq for RESOURCE_FAILURE_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.dwRestartAttemptsRemaining == other.dwRestartAttemptsRemaining
            && self.dwRestartPeriodRemaining == other.dwRestartPeriodRemaining
    }
}
impl ::std::cmp::Eq for RESOURCE_FAILURE_INFO {}
unsafe impl ::windows::runtime::Abi for RESOURCE_FAILURE_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct RESOURCE_FAILURE_INFO_BUFFER {
    pub dwVersion: u32,
    pub Info: RESOURCE_FAILURE_INFO,
}
impl RESOURCE_FAILURE_INFO_BUFFER {}
impl ::std::default::Default for RESOURCE_FAILURE_INFO_BUFFER {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for RESOURCE_FAILURE_INFO_BUFFER {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("RESOURCE_FAILURE_INFO_BUFFER")
            .field("dwVersion", &self.dwVersion)
            .field("Info", &self.Info)
            .finish()
    }
}
impl ::std::cmp::PartialEq for RESOURCE_FAILURE_INFO_BUFFER {
    fn eq(&self, other: &Self) -> bool {
        self.dwVersion == other.dwVersion && self.Info == other.Info
    }
}
impl ::std::cmp::Eq for RESOURCE_FAILURE_INFO_BUFFER {}
unsafe impl ::windows::runtime::Abi for RESOURCE_FAILURE_INFO_BUFFER {
    type Abi = Self;
    type DefaultType = Self;
}
pub const RESOURCE_FAILURE_INFO_VERSION_1: u32 = 1u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct RESOURCE_MONITOR_STATE(pub i32);
pub const RmonInitializing: RESOURCE_MONITOR_STATE = RESOURCE_MONITOR_STATE(0i32);
pub const RmonIdle: RESOURCE_MONITOR_STATE = RESOURCE_MONITOR_STATE(1i32);
pub const RmonStartingResource: RESOURCE_MONITOR_STATE = RESOURCE_MONITOR_STATE(2i32);
pub const RmonInitializingResource: RESOURCE_MONITOR_STATE = RESOURCE_MONITOR_STATE(3i32);
pub const RmonOnlineResource: RESOURCE_MONITOR_STATE = RESOURCE_MONITOR_STATE(4i32);
pub const RmonOfflineResource: RESOURCE_MONITOR_STATE = RESOURCE_MONITOR_STATE(5i32);
pub const RmonShutdownResource: RESOURCE_MONITOR_STATE = RESOURCE_MONITOR_STATE(6i32);
pub const RmonDeletingResource: RESOURCE_MONITOR_STATE = RESOURCE_MONITOR_STATE(7i32);
pub const RmonIsAlivePoll: RESOURCE_MONITOR_STATE = RESOURCE_MONITOR_STATE(8i32);
pub const RmonLooksAlivePoll: RESOURCE_MONITOR_STATE = RESOURCE_MONITOR_STATE(9i32);
pub const RmonArbitrateResource: RESOURCE_MONITOR_STATE = RESOURCE_MONITOR_STATE(10i32);
pub const RmonReleaseResource: RESOURCE_MONITOR_STATE = RESOURCE_MONITOR_STATE(11i32);
pub const RmonResourceControl: RESOURCE_MONITOR_STATE = RESOURCE_MONITOR_STATE(12i32);
pub const RmonResourceTypeControl: RESOURCE_MONITOR_STATE = RESOURCE_MONITOR_STATE(13i32);
pub const RmonTerminateResource: RESOURCE_MONITOR_STATE = RESOURCE_MONITOR_STATE(14i32);
pub const RmonDeadlocked: RESOURCE_MONITOR_STATE = RESOURCE_MONITOR_STATE(15i32);
impl ::std::convert::From<i32> for RESOURCE_MONITOR_STATE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for RESOURCE_MONITOR_STATE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct RESOURCE_STATUS {
    pub ResourceState: CLUSTER_RESOURCE_STATE,
    pub CheckPoint: u32,
    pub WaitHint: u32,
    pub EventHandle: super::super::Foundation::HANDLE,
}
#[cfg(feature = "Win32_Foundation")]
impl RESOURCE_STATUS {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for RESOURCE_STATUS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for RESOURCE_STATUS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("RESOURCE_STATUS")
            .field("ResourceState", &self.ResourceState)
            .field("CheckPoint", &self.CheckPoint)
            .field("WaitHint", &self.WaitHint)
            .field("EventHandle", &self.EventHandle)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for RESOURCE_STATUS {
    fn eq(&self, other: &Self) -> bool {
        self.ResourceState == other.ResourceState
            && self.CheckPoint == other.CheckPoint
            && self.WaitHint == other.WaitHint
            && self.EventHandle == other.EventHandle
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for RESOURCE_STATUS {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for RESOURCE_STATUS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct RESOURCE_STATUS_EX {
    pub ResourceState: CLUSTER_RESOURCE_STATE,
    pub CheckPoint: u32,
    pub EventHandle: super::super::Foundation::HANDLE,
    pub ApplicationSpecificErrorCode: u32,
    pub Flags: u32,
    pub WaitHint: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl RESOURCE_STATUS_EX {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for RESOURCE_STATUS_EX {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for RESOURCE_STATUS_EX {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("RESOURCE_STATUS_EX")
            .field("ResourceState", &self.ResourceState)
            .field("CheckPoint", &self.CheckPoint)
            .field("EventHandle", &self.EventHandle)
            .field(
                "ApplicationSpecificErrorCode",
                &self.ApplicationSpecificErrorCode,
            )
            .field("Flags", &self.Flags)
            .field("WaitHint", &self.WaitHint)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for RESOURCE_STATUS_EX {
    fn eq(&self, other: &Self) -> bool {
        self.ResourceState == other.ResourceState
            && self.CheckPoint == other.CheckPoint
            && self.EventHandle == other.EventHandle
            && self.ApplicationSpecificErrorCode == other.ApplicationSpecificErrorCode
            && self.Flags == other.Flags
            && self.WaitHint == other.WaitHint
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for RESOURCE_STATUS_EX {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for RESOURCE_STATUS_EX {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct RESOURCE_TERMINAL_FAILURE_INFO_BUFFER {
    pub isTerminalFailure: super::super::Foundation::BOOL,
    pub restartPeriodRemaining: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl RESOURCE_TERMINAL_FAILURE_INFO_BUFFER {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for RESOURCE_TERMINAL_FAILURE_INFO_BUFFER {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for RESOURCE_TERMINAL_FAILURE_INFO_BUFFER {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("RESOURCE_TERMINAL_FAILURE_INFO_BUFFER")
            .field("isTerminalFailure", &self.isTerminalFailure)
            .field("restartPeriodRemaining", &self.restartPeriodRemaining)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for RESOURCE_TERMINAL_FAILURE_INFO_BUFFER {
    fn eq(&self, other: &Self) -> bool {
        self.isTerminalFailure == other.isTerminalFailure
            && self.restartPeriodRemaining == other.restartPeriodRemaining
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for RESOURCE_TERMINAL_FAILURE_INFO_BUFFER {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for RESOURCE_TERMINAL_FAILURE_INFO_BUFFER {
    type Abi = Self;
    type DefaultType = Self;
}
pub const RESTYPE_MONITOR_SHUTTING_DOWN_CLUSSVC_CRASH: u32 = 2u32;
pub const RESTYPE_MONITOR_SHUTTING_DOWN_NODE_STOP: u32 = 1u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct RESUTIL_FILETIME_DATA {
    pub Default: super::super::Foundation::FILETIME,
    pub Minimum: super::super::Foundation::FILETIME,
    pub Maximum: super::super::Foundation::FILETIME,
}
#[cfg(feature = "Win32_Foundation")]
impl RESUTIL_FILETIME_DATA {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for RESUTIL_FILETIME_DATA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for RESUTIL_FILETIME_DATA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("RESUTIL_FILETIME_DATA")
            .field("Default", &self.Default)
            .field("Minimum", &self.Minimum)
            .field("Maximum", &self.Maximum)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for RESUTIL_FILETIME_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.Default == other.Default
            && self.Minimum == other.Minimum
            && self.Maximum == other.Maximum
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for RESUTIL_FILETIME_DATA {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for RESUTIL_FILETIME_DATA {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct RESUTIL_LARGEINT_DATA {
    pub Default: i64,
    pub Minimum: i64,
    pub Maximum: i64,
}
impl RESUTIL_LARGEINT_DATA {}
impl ::std::default::Default for RESUTIL_LARGEINT_DATA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for RESUTIL_LARGEINT_DATA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("RESUTIL_LARGEINT_DATA")
            .field("Default", &self.Default)
            .field("Minimum", &self.Minimum)
            .field("Maximum", &self.Maximum)
            .finish()
    }
}
impl ::std::cmp::PartialEq for RESUTIL_LARGEINT_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.Default == other.Default
            && self.Minimum == other.Minimum
            && self.Maximum == other.Maximum
    }
}
impl ::std::cmp::Eq for RESUTIL_LARGEINT_DATA {}
unsafe impl ::windows::runtime::Abi for RESUTIL_LARGEINT_DATA {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct RESUTIL_PROPERTY_ITEM {
    pub Name: super::super::Foundation::PWSTR,
    pub KeyName: super::super::Foundation::PWSTR,
    pub Format: u32,
    pub Anonymous: RESUTIL_PROPERTY_ITEM_0,
    pub Minimum: u32,
    pub Maximum: u32,
    pub Flags: u32,
    pub Offset: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl RESUTIL_PROPERTY_ITEM {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for RESUTIL_PROPERTY_ITEM {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for RESUTIL_PROPERTY_ITEM {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for RESUTIL_PROPERTY_ITEM {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for RESUTIL_PROPERTY_ITEM {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub union RESUTIL_PROPERTY_ITEM_0 {
    pub DefaultPtr: usize,
    pub Default: u32,
    pub lpDefault: *mut ::std::ffi::c_void,
    pub LargeIntData: *mut RESUTIL_LARGEINT_DATA,
    pub ULargeIntData: *mut RESUTIL_ULARGEINT_DATA,
    pub FileTimeData: *mut RESUTIL_FILETIME_DATA,
}
#[cfg(feature = "Win32_Foundation")]
impl RESUTIL_PROPERTY_ITEM_0 {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for RESUTIL_PROPERTY_ITEM_0 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for RESUTIL_PROPERTY_ITEM_0 {
    fn eq(&self, _other: &Self) -> bool {
        unimplemented!()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for RESUTIL_PROPERTY_ITEM_0 {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for RESUTIL_PROPERTY_ITEM_0 {
    type Abi = Self;
    type DefaultType = Self;
}
pub const RESUTIL_PROPITEM_IN_MEMORY: u32 = 8u32;
pub const RESUTIL_PROPITEM_READ_ONLY: u32 = 1u32;
pub const RESUTIL_PROPITEM_REQUIRED: u32 = 2u32;
pub const RESUTIL_PROPITEM_SIGNED: u32 = 4u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct RESUTIL_ULARGEINT_DATA {
    pub Default: u64,
    pub Minimum: u64,
    pub Maximum: u64,
}
impl RESUTIL_ULARGEINT_DATA {}
impl ::std::default::Default for RESUTIL_ULARGEINT_DATA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for RESUTIL_ULARGEINT_DATA {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("RESUTIL_ULARGEINT_DATA")
            .field("Default", &self.Default)
            .field("Minimum", &self.Minimum)
            .field("Maximum", &self.Maximum)
            .finish()
    }
}
impl ::std::cmp::PartialEq for RESUTIL_ULARGEINT_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.Default == other.Default
            && self.Minimum == other.Minimum
            && self.Maximum == other.Maximum
    }
}
impl ::std::cmp::Eq for RESUTIL_ULARGEINT_DATA {}
unsafe impl ::windows::runtime::Abi for RESUTIL_ULARGEINT_DATA {
    type Abi = Self;
    type DefaultType = Self;
}
pub const RS3_UPGRADE_VERSION: u32 = 1u32;
pub const RS4_UPGRADE_VERSION: u32 = 2u32;
pub const RS5_UPGRADE_VERSION: u32 = 3u32;
pub const RedirectedIOReasonBitLockerInitializing: u64 = 16u64;
pub const RedirectedIOReasonFileSystemTiering: u64 = 8u64;
pub const RedirectedIOReasonMax: u64 = 9223372036854775808u64;
pub const RedirectedIOReasonReFs: u64 = 32u64;
pub const RedirectedIOReasonUnsafeFileSystemFilter: u64 = 2u64;
pub const RedirectedIOReasonUnsafeVolumeFilter: u64 = 4u64;
pub const RedirectedIOReasonUserRequest: u64 = 1u64;
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn RegisterAppInstance<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    processhandle: Param0,
    appinstanceid: *const ::windows::runtime::GUID,
    childreninheritappinstance: Param2,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RegisterAppInstance(
                processhandle: super::super::Foundation::HANDLE,
                appinstanceid: *const ::windows::runtime::GUID,
                childreninheritappinstance: super::super::Foundation::BOOL,
            ) -> u32;
        }
        ::std::mem::transmute(RegisterAppInstance(
            processhandle.into_param().abi(),
            ::std::mem::transmute(appinstanceid),
            childreninheritappinstance.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn RegisterAppInstanceVersion(
    appinstanceid: *const ::windows::runtime::GUID,
    instanceversionhigh: u64,
    instanceversionlow: u64,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RegisterAppInstanceVersion(
                appinstanceid: *const ::windows::runtime::GUID,
                instanceversionhigh: u64,
                instanceversionlow: u64,
            ) -> u32;
        }
        ::std::mem::transmute(RegisterAppInstanceVersion(
            ::std::mem::transmute(appinstanceid),
            ::std::mem::transmute(instanceversionhigh),
            ::std::mem::transmute(instanceversionlow),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn RegisterClusterNotify<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>,
>(
    hchange: *const _HCHANGE,
    dwfiltertype: u32,
    hobject: Param2,
    dwnotifykey: usize,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RegisterClusterNotify(
                hchange: *const _HCHANGE,
                dwfiltertype: u32,
                hobject: super::super::Foundation::HANDLE,
                dwnotifykey: usize,
            ) -> u32;
        }
        ::std::mem::transmute(RegisterClusterNotify(
            ::std::mem::transmute(hchange),
            ::std::mem::transmute(dwfiltertype),
            hobject.into_param().abi(),
            ::std::mem::transmute(dwnotifykey),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn RegisterClusterNotifyV2<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, NOTIFY_FILTER_AND_TYPE>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>,
>(
    hchange: *const _HCHANGE,
    filter: Param1,
    hobject: Param2,
    dwnotifykey: usize,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RegisterClusterNotifyV2(
                hchange: *const _HCHANGE,
                filter: NOTIFY_FILTER_AND_TYPE,
                hobject: super::super::Foundation::HANDLE,
                dwnotifykey: usize,
            ) -> u32;
        }
        ::std::mem::transmute(RegisterClusterNotifyV2(
            ::std::mem::transmute(hchange),
            filter.into_param().abi(),
            hobject.into_param().abi(),
            ::std::mem::transmute(dwnotifykey),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn RegisterClusterResourceTypeNotifyV2<
    'a,
    Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hchange: *const _HCHANGE,
    hcluster: *const _HCLUSTER,
    flags: i64,
    restypename: Param3,
    dwnotifykey: usize,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RegisterClusterResourceTypeNotifyV2(
                hchange: *const _HCHANGE,
                hcluster: *const _HCLUSTER,
                flags: i64,
                restypename: super::super::Foundation::PWSTR,
                dwnotifykey: usize,
            ) -> u32;
        }
        ::std::mem::transmute(RegisterClusterResourceTypeNotifyV2(
            ::std::mem::transmute(hchange),
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(flags),
            restypename.into_param().abi(),
            ::std::mem::transmute(dwnotifykey),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn RemoveClusterGroupDependency(
    hgroup: *const _HGROUP,
    hdependson: *const _HGROUP,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RemoveClusterGroupDependency(
                hgroup: *const _HGROUP,
                hdependson: *const _HGROUP,
            ) -> u32;
        }
        ::std::mem::transmute(RemoveClusterGroupDependency(
            ::std::mem::transmute(hgroup),
            ::std::mem::transmute(hdependson),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn RemoveClusterGroupSetDependency(
    hgroupset: *const _HGROUPSET,
    hdependson: *const _HGROUPSET,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RemoveClusterGroupSetDependency(
                hgroupset: *const _HGROUPSET,
                hdependson: *const _HGROUPSET,
            ) -> u32;
        }
        ::std::mem::transmute(RemoveClusterGroupSetDependency(
            ::std::mem::transmute(hgroupset),
            ::std::mem::transmute(hdependson),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn RemoveClusterGroupToGroupSetDependency(
    hgroup: *const _HGROUP,
    hdependson: *const _HGROUPSET,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RemoveClusterGroupToGroupSetDependency(
                hgroup: *const _HGROUP,
                hdependson: *const _HGROUPSET,
            ) -> u32;
        }
        ::std::mem::transmute(RemoveClusterGroupToGroupSetDependency(
            ::std::mem::transmute(hgroup),
            ::std::mem::transmute(hdependson),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn RemoveClusterNameAccount<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    hcluster: *const _HCLUSTER,
    bdeletecomputerobjects: Param1,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RemoveClusterNameAccount(
                hcluster: *const _HCLUSTER,
                bdeletecomputerobjects: super::super::Foundation::BOOL,
            ) -> u32;
        }
        ::std::mem::transmute(RemoveClusterNameAccount(
            ::std::mem::transmute(hcluster),
            bdeletecomputerobjects.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn RemoveClusterResourceDependency(
    hresource: *const _HRESOURCE,
    hdependson: *const _HRESOURCE,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RemoveClusterResourceDependency(
                hresource: *const _HRESOURCE,
                hdependson: *const _HRESOURCE,
            ) -> u32;
        }
        ::std::mem::transmute(RemoveClusterResourceDependency(
            ::std::mem::transmute(hresource),
            ::std::mem::transmute(hdependson),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn RemoveClusterResourceNode(hresource: *const _HRESOURCE, hnode: *const _HNODE) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RemoveClusterResourceNode(hresource: *const _HRESOURCE, hnode: *const _HNODE)
                -> u32;
        }
        ::std::mem::transmute(RemoveClusterResourceNode(
            ::std::mem::transmute(hresource),
            ::std::mem::transmute(hnode),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn RemoveClusterStorageNode<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpszclusterstorageenclosurename: Param1,
    dwtimeout: u32,
    dwflags: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RemoveClusterStorageNode(
                hcluster: *const _HCLUSTER,
                lpszclusterstorageenclosurename: super::super::Foundation::PWSTR,
                dwtimeout: u32,
                dwflags: u32,
            ) -> u32;
        }
        ::std::mem::transmute(RemoveClusterStorageNode(
            ::std::mem::transmute(hcluster),
            lpszclusterstorageenclosurename.into_param().abi(),
            ::std::mem::transmute(dwtimeout),
            ::std::mem::transmute(dwflags),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn RemoveCrossClusterGroupSetDependency<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hdependentgroupset: *const _HGROUPSET,
    lpremoteclustername: Param1,
    lpremotegroupsetname: Param2,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RemoveCrossClusterGroupSetDependency(
                hdependentgroupset: *const _HGROUPSET,
                lpremoteclustername: super::super::Foundation::PWSTR,
                lpremotegroupsetname: super::super::Foundation::PWSTR,
            ) -> u32;
        }
        ::std::mem::transmute(RemoveCrossClusterGroupSetDependency(
            ::std::mem::transmute(hdependentgroupset),
            lpremoteclustername.into_param().abi(),
            lpremotegroupsetname.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn RemoveResourceFromClusterSharedVolumes(hresource: *const _HRESOURCE) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RemoveResourceFromClusterSharedVolumes(hresource: *const _HRESOURCE) -> u32;
        }
        ::std::mem::transmute(RemoveResourceFromClusterSharedVolumes(
            ::std::mem::transmute(hresource),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilAddUnknownProperties<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
>(
    hkeyclusterkey: Param0,
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    poutpropertylist: *mut ::std::ffi::c_void,
    pcboutpropertylistsize: u32,
    pcbbytesreturned: *mut u32,
    pcbrequired: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilAddUnknownProperties(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                ppropertytable: *const RESUTIL_PROPERTY_ITEM,
                poutpropertylist: *mut ::std::ffi::c_void,
                pcboutpropertylistsize: u32,
                pcbbytesreturned: *mut u32,
                pcbrequired: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilAddUnknownProperties(
            hkeyclusterkey.into_param().abi(),
            ::std::mem::transmute(ppropertytable),
            ::std::mem::transmute(poutpropertylist),
            ::std::mem::transmute(pcboutpropertylistsize),
            ::std::mem::transmute(pcbbytesreturned),
            ::std::mem::transmute(pcbrequired),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilCreateDirectoryTree<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pszpath: Param0,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilCreateDirectoryTree(pszpath: super::super::Foundation::PWSTR) -> u32;
        }
        ::std::mem::transmute(ResUtilCreateDirectoryTree(pszpath.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ResUtilDupGroup(group: *mut _HGROUP, copy: *mut *mut _HGROUP) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilDupGroup(group: *mut _HGROUP, copy: *mut *mut _HGROUP) -> u32;
        }
        ::std::mem::transmute(ResUtilDupGroup(
            ::std::mem::transmute(group),
            ::std::mem::transmute(copy),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilDupParameterBlock(
    poutparams: *mut u8,
    pinparams: *const u8,
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilDupParameterBlock(
                poutparams: *mut u8,
                pinparams: *const u8,
                ppropertytable: *const RESUTIL_PROPERTY_ITEM,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilDupParameterBlock(
            ::std::mem::transmute(poutparams),
            ::std::mem::transmute(pinparams),
            ::std::mem::transmute(ppropertytable),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ResUtilDupResource(group: *mut _HRESOURCE, copy: *mut *mut _HRESOURCE) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilDupResource(group: *mut _HRESOURCE, copy: *mut *mut _HRESOURCE) -> u32;
        }
        ::std::mem::transmute(ResUtilDupResource(
            ::std::mem::transmute(group),
            ::std::mem::transmute(copy),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilDupString<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pszinstring: Param0,
) -> super::super::Foundation::PWSTR {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilDupString(
                pszinstring: super::super::Foundation::PWSTR,
            ) -> super::super::Foundation::PWSTR;
        }
        ::std::mem::transmute(ResUtilDupString(pszinstring.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ResUtilEnumGroups(
    hcluster: *mut _HCLUSTER,
    hself: *mut _HGROUP,
    prescallback: ::std::option::Option<LPGROUP_CALLBACK_EX>,
    pparameter: *mut ::std::ffi::c_void,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilEnumGroups(
                hcluster: *mut _HCLUSTER,
                hself: *mut _HGROUP,
                prescallback: ::windows::runtime::RawPtr,
                pparameter: *mut ::std::ffi::c_void,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilEnumGroups(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(hself),
            ::std::mem::transmute(prescallback),
            ::std::mem::transmute(pparameter),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ResUtilEnumGroupsEx(
    hcluster: *mut _HCLUSTER,
    hself: *mut _HGROUP,
    grouptype: CLUSGROUP_TYPE,
    prescallback: ::std::option::Option<LPGROUP_CALLBACK_EX>,
    pparameter: *mut ::std::ffi::c_void,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilEnumGroupsEx(
                hcluster: *mut _HCLUSTER,
                hself: *mut _HGROUP,
                grouptype: CLUSGROUP_TYPE,
                prescallback: ::windows::runtime::RawPtr,
                pparameter: *mut ::std::ffi::c_void,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilEnumGroupsEx(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(hself),
            ::std::mem::transmute(grouptype),
            ::std::mem::transmute(prescallback),
            ::std::mem::transmute(pparameter),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilEnumPrivateProperties<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
>(
    hkeyclusterkey: Param0,
    pszoutproperties: super::super::Foundation::PWSTR,
    cboutpropertiessize: u32,
    pcbbytesreturned: *mut u32,
    pcbrequired: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilEnumPrivateProperties(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                pszoutproperties: super::super::Foundation::PWSTR,
                cboutpropertiessize: u32,
                pcbbytesreturned: *mut u32,
                pcbrequired: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilEnumPrivateProperties(
            hkeyclusterkey.into_param().abi(),
            ::std::mem::transmute(pszoutproperties),
            ::std::mem::transmute(cboutpropertiessize),
            ::std::mem::transmute(pcbbytesreturned),
            ::std::mem::transmute(pcbrequired),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilEnumProperties(
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    pszoutproperties: super::super::Foundation::PWSTR,
    cboutpropertiessize: u32,
    pcbbytesreturned: *mut u32,
    pcbrequired: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilEnumProperties(
                ppropertytable: *const RESUTIL_PROPERTY_ITEM,
                pszoutproperties: super::super::Foundation::PWSTR,
                cboutpropertiessize: u32,
                pcbbytesreturned: *mut u32,
                pcbrequired: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilEnumProperties(
            ::std::mem::transmute(ppropertytable),
            ::std::mem::transmute(pszoutproperties),
            ::std::mem::transmute(cboutpropertiessize),
            ::std::mem::transmute(pcbbytesreturned),
            ::std::mem::transmute(pcbrequired),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilEnumResources<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hself: *mut _HRESOURCE,
    lpszrestypename: Param1,
    prescallback: ::std::option::Option<LPRESOURCE_CALLBACK>,
    pparameter: *mut ::std::ffi::c_void,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilEnumResources(
                hself: *mut _HRESOURCE,
                lpszrestypename: super::super::Foundation::PWSTR,
                prescallback: ::windows::runtime::RawPtr,
                pparameter: *mut ::std::ffi::c_void,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilEnumResources(
            ::std::mem::transmute(hself),
            lpszrestypename.into_param().abi(),
            ::std::mem::transmute(prescallback),
            ::std::mem::transmute(pparameter),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilEnumResourcesEx<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *mut _HCLUSTER,
    hself: *mut _HRESOURCE,
    lpszrestypename: Param2,
    prescallback: ::std::option::Option<LPRESOURCE_CALLBACK_EX>,
    pparameter: *mut ::std::ffi::c_void,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilEnumResourcesEx(
                hcluster: *mut _HCLUSTER,
                hself: *mut _HRESOURCE,
                lpszrestypename: super::super::Foundation::PWSTR,
                prescallback: ::windows::runtime::RawPtr,
                pparameter: *mut ::std::ffi::c_void,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilEnumResourcesEx(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(hself),
            lpszrestypename.into_param().abi(),
            ::std::mem::transmute(prescallback),
            ::std::mem::transmute(pparameter),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilEnumResourcesEx2<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *mut _HCLUSTER,
    hself: *mut _HRESOURCE,
    lpszrestypename: Param2,
    prescallback: ::std::option::Option<LPRESOURCE_CALLBACK_EX>,
    pparameter: *mut ::std::ffi::c_void,
    dwdesiredaccess: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilEnumResourcesEx2(
                hcluster: *mut _HCLUSTER,
                hself: *mut _HRESOURCE,
                lpszrestypename: super::super::Foundation::PWSTR,
                prescallback: ::windows::runtime::RawPtr,
                pparameter: *mut ::std::ffi::c_void,
                dwdesiredaccess: u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilEnumResourcesEx2(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(hself),
            lpszrestypename.into_param().abi(),
            ::std::mem::transmute(prescallback),
            ::std::mem::transmute(pparameter),
            ::std::mem::transmute(dwdesiredaccess),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilExpandEnvironmentStrings<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pszsrc: Param0,
) -> super::super::Foundation::PWSTR {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilExpandEnvironmentStrings(
                pszsrc: super::super::Foundation::PWSTR,
            ) -> super::super::Foundation::PWSTR;
        }
        ::std::mem::transmute(ResUtilExpandEnvironmentStrings(pszsrc.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilFindBinaryProperty<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    ppropertylist: *const ::std::ffi::c_void,
    cbpropertylistsize: u32,
    pszpropertyname: Param2,
    pbpropertyvalue: *mut *mut u8,
    pcbpropertyvaluesize: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilFindBinaryProperty(
                ppropertylist: *const ::std::ffi::c_void,
                cbpropertylistsize: u32,
                pszpropertyname: super::super::Foundation::PWSTR,
                pbpropertyvalue: *mut *mut u8,
                pcbpropertyvaluesize: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilFindBinaryProperty(
            ::std::mem::transmute(ppropertylist),
            ::std::mem::transmute(cbpropertylistsize),
            pszpropertyname.into_param().abi(),
            ::std::mem::transmute(pbpropertyvalue),
            ::std::mem::transmute(pcbpropertyvaluesize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilFindDependentDiskResourceDriveLetter(
    hcluster: *const _HCLUSTER,
    hresource: *const _HRESOURCE,
    pszdriveletter: super::super::Foundation::PWSTR,
    pcchdriveletter: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilFindDependentDiskResourceDriveLetter(
                hcluster: *const _HCLUSTER,
                hresource: *const _HRESOURCE,
                pszdriveletter: super::super::Foundation::PWSTR,
                pcchdriveletter: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilFindDependentDiskResourceDriveLetter(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(hresource),
            ::std::mem::transmute(pszdriveletter),
            ::std::mem::transmute(pcchdriveletter),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilFindDwordProperty<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    ppropertylist: *const ::std::ffi::c_void,
    cbpropertylistsize: u32,
    pszpropertyname: Param2,
    pdwpropertyvalue: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilFindDwordProperty(
                ppropertylist: *const ::std::ffi::c_void,
                cbpropertylistsize: u32,
                pszpropertyname: super::super::Foundation::PWSTR,
                pdwpropertyvalue: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilFindDwordProperty(
            ::std::mem::transmute(ppropertylist),
            ::std::mem::transmute(cbpropertylistsize),
            pszpropertyname.into_param().abi(),
            ::std::mem::transmute(pdwpropertyvalue),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilFindExpandSzProperty<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    ppropertylist: *const ::std::ffi::c_void,
    cbpropertylistsize: u32,
    pszpropertyname: Param2,
    pszpropertyvalue: *mut super::super::Foundation::PWSTR,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilFindExpandSzProperty(
                ppropertylist: *const ::std::ffi::c_void,
                cbpropertylistsize: u32,
                pszpropertyname: super::super::Foundation::PWSTR,
                pszpropertyvalue: *mut super::super::Foundation::PWSTR,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilFindExpandSzProperty(
            ::std::mem::transmute(ppropertylist),
            ::std::mem::transmute(cbpropertylistsize),
            pszpropertyname.into_param().abi(),
            ::std::mem::transmute(pszpropertyvalue),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilFindExpandedSzProperty<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    ppropertylist: *const ::std::ffi::c_void,
    cbpropertylistsize: u32,
    pszpropertyname: Param2,
    pszpropertyvalue: *mut super::super::Foundation::PWSTR,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilFindExpandedSzProperty(
                ppropertylist: *const ::std::ffi::c_void,
                cbpropertylistsize: u32,
                pszpropertyname: super::super::Foundation::PWSTR,
                pszpropertyvalue: *mut super::super::Foundation::PWSTR,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilFindExpandedSzProperty(
            ::std::mem::transmute(ppropertylist),
            ::std::mem::transmute(cbpropertylistsize),
            pszpropertyname.into_param().abi(),
            ::std::mem::transmute(pszpropertyvalue),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilFindFileTimeProperty<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    ppropertylist: *const ::std::ffi::c_void,
    cbpropertylistsize: u32,
    pszpropertyname: Param2,
    pftpropertyvalue: *mut super::super::Foundation::FILETIME,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilFindFileTimeProperty(
                ppropertylist: *const ::std::ffi::c_void,
                cbpropertylistsize: u32,
                pszpropertyname: super::super::Foundation::PWSTR,
                pftpropertyvalue: *mut super::super::Foundation::FILETIME,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilFindFileTimeProperty(
            ::std::mem::transmute(ppropertylist),
            ::std::mem::transmute(cbpropertylistsize),
            pszpropertyname.into_param().abi(),
            ::std::mem::transmute(pftpropertyvalue),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilFindLongProperty<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    ppropertylist: *const ::std::ffi::c_void,
    cbpropertylistsize: u32,
    pszpropertyname: Param2,
    plpropertyvalue: *mut i32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilFindLongProperty(
                ppropertylist: *const ::std::ffi::c_void,
                cbpropertylistsize: u32,
                pszpropertyname: super::super::Foundation::PWSTR,
                plpropertyvalue: *mut i32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilFindLongProperty(
            ::std::mem::transmute(ppropertylist),
            ::std::mem::transmute(cbpropertylistsize),
            pszpropertyname.into_param().abi(),
            ::std::mem::transmute(plpropertyvalue),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilFindMultiSzProperty<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    ppropertylist: *const ::std::ffi::c_void,
    cbpropertylistsize: u32,
    pszpropertyname: Param2,
    pszpropertyvalue: *mut super::super::Foundation::PWSTR,
    pcbpropertyvaluesize: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilFindMultiSzProperty(
                ppropertylist: *const ::std::ffi::c_void,
                cbpropertylistsize: u32,
                pszpropertyname: super::super::Foundation::PWSTR,
                pszpropertyvalue: *mut super::super::Foundation::PWSTR,
                pcbpropertyvaluesize: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilFindMultiSzProperty(
            ::std::mem::transmute(ppropertylist),
            ::std::mem::transmute(cbpropertylistsize),
            pszpropertyname.into_param().abi(),
            ::std::mem::transmute(pszpropertyvalue),
            ::std::mem::transmute(pcbpropertyvaluesize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilFindSzProperty<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    ppropertylist: *const ::std::ffi::c_void,
    cbpropertylistsize: u32,
    pszpropertyname: Param2,
    pszpropertyvalue: *mut super::super::Foundation::PWSTR,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilFindSzProperty(
                ppropertylist: *const ::std::ffi::c_void,
                cbpropertylistsize: u32,
                pszpropertyname: super::super::Foundation::PWSTR,
                pszpropertyvalue: *mut super::super::Foundation::PWSTR,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilFindSzProperty(
            ::std::mem::transmute(ppropertylist),
            ::std::mem::transmute(cbpropertylistsize),
            pszpropertyname.into_param().abi(),
            ::std::mem::transmute(pszpropertyvalue),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilFindULargeIntegerProperty<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    ppropertylist: *const ::std::ffi::c_void,
    cbpropertylistsize: u32,
    pszpropertyname: Param2,
    plpropertyvalue: *mut u64,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilFindULargeIntegerProperty(
                ppropertylist: *const ::std::ffi::c_void,
                cbpropertylistsize: u32,
                pszpropertyname: super::super::Foundation::PWSTR,
                plpropertyvalue: *mut u64,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilFindULargeIntegerProperty(
            ::std::mem::transmute(ppropertylist),
            ::std::mem::transmute(cbpropertylistsize),
            pszpropertyname.into_param().abi(),
            ::std::mem::transmute(plpropertyvalue),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ResUtilFreeEnvironment(lpenvironment: *mut ::std::ffi::c_void) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilFreeEnvironment(lpenvironment: *mut ::std::ffi::c_void) -> u32;
        }
        ::std::mem::transmute(ResUtilFreeEnvironment(::std::mem::transmute(lpenvironment)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilFreeParameterBlock(
    poutparams: *mut u8,
    pinparams: *const u8,
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
) {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilFreeParameterBlock(
                poutparams: *mut u8,
                pinparams: *const u8,
                ppropertytable: *const RESUTIL_PROPERTY_ITEM,
            );
        }
        ::std::mem::transmute(ResUtilFreeParameterBlock(
            ::std::mem::transmute(poutparams),
            ::std::mem::transmute(pinparams),
            ::std::mem::transmute(ppropertytable),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilGetAllProperties<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
>(
    hkeyclusterkey: Param0,
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    poutpropertylist: *mut ::std::ffi::c_void,
    cboutpropertylistsize: u32,
    pcbbytesreturned: *mut u32,
    pcbrequired: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetAllProperties(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                ppropertytable: *const RESUTIL_PROPERTY_ITEM,
                poutpropertylist: *mut ::std::ffi::c_void,
                cboutpropertylistsize: u32,
                pcbbytesreturned: *mut u32,
                pcbrequired: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilGetAllProperties(
            hkeyclusterkey.into_param().abi(),
            ::std::mem::transmute(ppropertytable),
            ::std::mem::transmute(poutpropertylist),
            ::std::mem::transmute(cboutpropertylistsize),
            ::std::mem::transmute(pcbbytesreturned),
            ::std::mem::transmute(pcbrequired),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ResUtilGetBinaryProperty(
    ppboutvalue: *mut *mut u8,
    pcboutvaluesize: *mut u32,
    pvaluestruct: *const CLUSPROP_BINARY,
    pboldvalue: *const u8,
    cboldvaluesize: u32,
    pppropertylist: *mut *mut u8,
    pcbpropertylistsize: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetBinaryProperty(
                ppboutvalue: *mut *mut u8,
                pcboutvaluesize: *mut u32,
                pvaluestruct: *const CLUSPROP_BINARY,
                pboldvalue: *const u8,
                cboldvaluesize: u32,
                pppropertylist: *mut *mut u8,
                pcbpropertylistsize: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilGetBinaryProperty(
            ::std::mem::transmute(ppboutvalue),
            ::std::mem::transmute(pcboutvaluesize),
            ::std::mem::transmute(pvaluestruct),
            ::std::mem::transmute(pboldvalue),
            ::std::mem::transmute(cboldvaluesize),
            ::std::mem::transmute(pppropertylist),
            ::std::mem::transmute(pcbpropertylistsize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilGetBinaryValue<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hkeyclusterkey: Param0,
    pszvaluename: Param1,
    ppboutvalue: *mut *mut u8,
    pcboutvaluesize: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetBinaryValue(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                pszvaluename: super::super::Foundation::PWSTR,
                ppboutvalue: *mut *mut u8,
                pcboutvaluesize: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilGetBinaryValue(
            hkeyclusterkey.into_param().abi(),
            pszvaluename.into_param().abi(),
            ::std::mem::transmute(ppboutvalue),
            ::std::mem::transmute(pcboutvaluesize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ResUtilGetClusterGroupType(
    hgroup: *mut _HGROUP,
    grouptype: *mut CLUSGROUP_TYPE,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetClusterGroupType(
                hgroup: *mut _HGROUP,
                grouptype: *mut CLUSGROUP_TYPE,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilGetClusterGroupType(
            ::std::mem::transmute(hgroup),
            ::std::mem::transmute(grouptype),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ResUtilGetClusterId(
    hcluster: *mut _HCLUSTER,
    guid: *mut ::windows::runtime::GUID,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetClusterId(
                hcluster: *mut _HCLUSTER,
                guid: *mut ::windows::runtime::GUID,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilGetClusterId(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(guid),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ResUtilGetClusterRoleState(
    hcluster: *const _HCLUSTER,
    eclusterrole: CLUSTER_ROLE,
) -> CLUSTER_ROLE_STATE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetClusterRoleState(
                hcluster: *const _HCLUSTER,
                eclusterrole: CLUSTER_ROLE,
            ) -> CLUSTER_ROLE_STATE;
        }
        ::std::mem::transmute(ResUtilGetClusterRoleState(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(eclusterrole),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ResUtilGetCoreClusterResources(
    hcluster: *const _HCLUSTER,
    phclusternameresource: *mut *mut _HRESOURCE,
    phclusteripaddressresource: *mut *mut _HRESOURCE,
    phclusterquorumresource: *mut *mut _HRESOURCE,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetCoreClusterResources(
                hcluster: *const _HCLUSTER,
                phclusternameresource: *mut *mut _HRESOURCE,
                phclusteripaddressresource: *mut *mut _HRESOURCE,
                phclusterquorumresource: *mut *mut _HRESOURCE,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilGetCoreClusterResources(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(phclusternameresource),
            ::std::mem::transmute(phclusteripaddressresource),
            ::std::mem::transmute(phclusterquorumresource),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ResUtilGetCoreClusterResourcesEx(
    hclusterin: *const _HCLUSTER,
    phclusternameresourceout: *mut *mut _HRESOURCE,
    phclusterquorumresourceout: *mut *mut _HRESOURCE,
    dwdesiredaccess: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetCoreClusterResourcesEx(
                hclusterin: *const _HCLUSTER,
                phclusternameresourceout: *mut *mut _HRESOURCE,
                phclusterquorumresourceout: *mut *mut _HRESOURCE,
                dwdesiredaccess: u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilGetCoreClusterResourcesEx(
            ::std::mem::transmute(hclusterin),
            ::std::mem::transmute(phclusternameresourceout),
            ::std::mem::transmute(phclusterquorumresourceout),
            ::std::mem::transmute(dwdesiredaccess),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ResUtilGetCoreGroup(hcluster: *mut _HCLUSTER) -> *mut _HGROUP {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetCoreGroup(hcluster: *mut _HCLUSTER) -> *mut _HGROUP;
        }
        ::std::mem::transmute(ResUtilGetCoreGroup(::std::mem::transmute(hcluster)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ResUtilGetDwordProperty(
    pdwoutvalue: *mut u32,
    pvaluestruct: *const CLUSPROP_DWORD,
    dwoldvalue: u32,
    dwminimum: u32,
    dwmaximum: u32,
    pppropertylist: *mut *mut u8,
    pcbpropertylistsize: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetDwordProperty(
                pdwoutvalue: *mut u32,
                pvaluestruct: *const CLUSPROP_DWORD,
                dwoldvalue: u32,
                dwminimum: u32,
                dwmaximum: u32,
                pppropertylist: *mut *mut u8,
                pcbpropertylistsize: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilGetDwordProperty(
            ::std::mem::transmute(pdwoutvalue),
            ::std::mem::transmute(pvaluestruct),
            ::std::mem::transmute(dwoldvalue),
            ::std::mem::transmute(dwminimum),
            ::std::mem::transmute(dwmaximum),
            ::std::mem::transmute(pppropertylist),
            ::std::mem::transmute(pcbpropertylistsize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilGetDwordValue<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hkeyclusterkey: Param0,
    pszvaluename: Param1,
    pdwoutvalue: *mut u32,
    dwdefaultvalue: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetDwordValue(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                pszvaluename: super::super::Foundation::PWSTR,
                pdwoutvalue: *mut u32,
                dwdefaultvalue: u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilGetDwordValue(
            hkeyclusterkey.into_param().abi(),
            pszvaluename.into_param().abi(),
            ::std::mem::transmute(pdwoutvalue),
            ::std::mem::transmute(dwdefaultvalue),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ResUtilGetEnvironmentWithNetName(
    hresource: *const _HRESOURCE,
) -> *mut ::std::ffi::c_void {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetEnvironmentWithNetName(
                hresource: *const _HRESOURCE,
            ) -> *mut ::std::ffi::c_void;
        }
        ::std::mem::transmute(ResUtilGetEnvironmentWithNetName(::std::mem::transmute(
            hresource,
        )))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilGetFileTimeProperty<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::FILETIME>,
    Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::FILETIME>,
    Param4: ::windows::runtime::IntoParam<'a, super::super::Foundation::FILETIME>,
>(
    pftoutvalue: *mut super::super::Foundation::FILETIME,
    pvaluestruct: *const CLUSPROP_FILETIME,
    ftoldvalue: Param2,
    ftminimum: Param3,
    ftmaximum: Param4,
    pppropertylist: *mut *mut u8,
    pcbpropertylistsize: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetFileTimeProperty(
                pftoutvalue: *mut super::super::Foundation::FILETIME,
                pvaluestruct: *const CLUSPROP_FILETIME,
                ftoldvalue: super::super::Foundation::FILETIME,
                ftminimum: super::super::Foundation::FILETIME,
                ftmaximum: super::super::Foundation::FILETIME,
                pppropertylist: *mut *mut u8,
                pcbpropertylistsize: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilGetFileTimeProperty(
            ::std::mem::transmute(pftoutvalue),
            ::std::mem::transmute(pvaluestruct),
            ftoldvalue.into_param().abi(),
            ftminimum.into_param().abi(),
            ftmaximum.into_param().abi(),
            ::std::mem::transmute(pppropertylist),
            ::std::mem::transmute(pcbpropertylistsize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ResUtilGetLongProperty(
    ploutvalue: *mut i32,
    pvaluestruct: *const CLUSPROP_LONG,
    loldvalue: i32,
    lminimum: i32,
    lmaximum: i32,
    pppropertylist: *mut *mut u8,
    pcbpropertylistsize: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetLongProperty(
                ploutvalue: *mut i32,
                pvaluestruct: *const CLUSPROP_LONG,
                loldvalue: i32,
                lminimum: i32,
                lmaximum: i32,
                pppropertylist: *mut *mut u8,
                pcbpropertylistsize: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilGetLongProperty(
            ::std::mem::transmute(ploutvalue),
            ::std::mem::transmute(pvaluestruct),
            ::std::mem::transmute(loldvalue),
            ::std::mem::transmute(lminimum),
            ::std::mem::transmute(lmaximum),
            ::std::mem::transmute(pppropertylist),
            ::std::mem::transmute(pcbpropertylistsize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilGetMultiSzProperty<
    'a,
    Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    ppszoutvalue: *mut super::super::Foundation::PWSTR,
    pcboutvaluesize: *mut u32,
    pvaluestruct: *const CLUSPROP_SZ,
    pszoldvalue: Param3,
    cboldvaluesize: u32,
    pppropertylist: *mut *mut u8,
    pcbpropertylistsize: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetMultiSzProperty(
                ppszoutvalue: *mut super::super::Foundation::PWSTR,
                pcboutvaluesize: *mut u32,
                pvaluestruct: *const CLUSPROP_SZ,
                pszoldvalue: super::super::Foundation::PWSTR,
                cboldvaluesize: u32,
                pppropertylist: *mut *mut u8,
                pcbpropertylistsize: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilGetMultiSzProperty(
            ::std::mem::transmute(ppszoutvalue),
            ::std::mem::transmute(pcboutvaluesize),
            ::std::mem::transmute(pvaluestruct),
            pszoldvalue.into_param().abi(),
            ::std::mem::transmute(cboldvaluesize),
            ::std::mem::transmute(pppropertylist),
            ::std::mem::transmute(pcbpropertylistsize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_System_Registry")]
#[inline]
pub unsafe fn ResUtilGetPrivateProperties<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
>(
    hkeyclusterkey: Param0,
    poutpropertylist: *mut ::std::ffi::c_void,
    cboutpropertylistsize: u32,
    pcbbytesreturned: *mut u32,
    pcbrequired: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetPrivateProperties(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                poutpropertylist: *mut ::std::ffi::c_void,
                cboutpropertylistsize: u32,
                pcbbytesreturned: *mut u32,
                pcbrequired: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilGetPrivateProperties(
            hkeyclusterkey.into_param().abi(),
            ::std::mem::transmute(poutpropertylist),
            ::std::mem::transmute(cboutpropertylistsize),
            ::std::mem::transmute(pcbbytesreturned),
            ::std::mem::transmute(pcbrequired),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilGetProperties<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
>(
    hkeyclusterkey: Param0,
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    poutpropertylist: *mut ::std::ffi::c_void,
    cboutpropertylistsize: u32,
    pcbbytesreturned: *mut u32,
    pcbrequired: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetProperties(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                ppropertytable: *const RESUTIL_PROPERTY_ITEM,
                poutpropertylist: *mut ::std::ffi::c_void,
                cboutpropertylistsize: u32,
                pcbbytesreturned: *mut u32,
                pcbrequired: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilGetProperties(
            hkeyclusterkey.into_param().abi(),
            ::std::mem::transmute(ppropertytable),
            ::std::mem::transmute(poutpropertylist),
            ::std::mem::transmute(cboutpropertylistsize),
            ::std::mem::transmute(pcbbytesreturned),
            ::std::mem::transmute(pcbrequired),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilGetPropertiesToParameterBlock<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
    Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    hkeyclusterkey: Param0,
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    poutparams: *mut u8,
    bcheckforrequiredproperties: Param3,
    psznameofpropinerror: *mut super::super::Foundation::PWSTR,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetPropertiesToParameterBlock(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                ppropertytable: *const RESUTIL_PROPERTY_ITEM,
                poutparams: *mut u8,
                bcheckforrequiredproperties: super::super::Foundation::BOOL,
                psznameofpropinerror: *mut super::super::Foundation::PWSTR,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilGetPropertiesToParameterBlock(
            hkeyclusterkey.into_param().abi(),
            ::std::mem::transmute(ppropertytable),
            ::std::mem::transmute(poutparams),
            bcheckforrequiredproperties.into_param().abi(),
            ::std::mem::transmute(psznameofpropinerror),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilGetProperty<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
>(
    hkeyclusterkey: Param0,
    ppropertytableitem: *const RESUTIL_PROPERTY_ITEM,
    poutpropertyitem: *mut *mut ::std::ffi::c_void,
    pcboutpropertyitemsize: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetProperty(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                ppropertytableitem: *const RESUTIL_PROPERTY_ITEM,
                poutpropertyitem: *mut *mut ::std::ffi::c_void,
                pcboutpropertyitemsize: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilGetProperty(
            hkeyclusterkey.into_param().abi(),
            ::std::mem::transmute(ppropertytableitem),
            ::std::mem::transmute(poutpropertyitem),
            ::std::mem::transmute(pcboutpropertyitemsize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilGetPropertyFormats(
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    poutpropertyformatlist: *mut ::std::ffi::c_void,
    cbpropertyformatlistsize: u32,
    pcbbytesreturned: *mut u32,
    pcbrequired: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetPropertyFormats(
                ppropertytable: *const RESUTIL_PROPERTY_ITEM,
                poutpropertyformatlist: *mut ::std::ffi::c_void,
                cbpropertyformatlistsize: u32,
                pcbbytesreturned: *mut u32,
                pcbrequired: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilGetPropertyFormats(
            ::std::mem::transmute(ppropertytable),
            ::std::mem::transmute(poutpropertyformatlist),
            ::std::mem::transmute(cbpropertyformatlistsize),
            ::std::mem::transmute(pcbbytesreturned),
            ::std::mem::transmute(pcbrequired),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilGetPropertySize<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
>(
    hkeyclusterkey: Param0,
    ppropertytableitem: *const RESUTIL_PROPERTY_ITEM,
    pcboutpropertylistsize: *mut u32,
    pnpropertycount: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetPropertySize(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                ppropertytableitem: *const RESUTIL_PROPERTY_ITEM,
                pcboutpropertylistsize: *mut u32,
                pnpropertycount: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilGetPropertySize(
            hkeyclusterkey.into_param().abi(),
            ::std::mem::transmute(ppropertytableitem),
            ::std::mem::transmute(pcboutpropertylistsize),
            ::std::mem::transmute(pnpropertycount),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilGetQwordValue<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hkeyclusterkey: Param0,
    pszvaluename: Param1,
    pqwoutvalue: *mut u64,
    qwdefaultvalue: u64,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetQwordValue(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                pszvaluename: super::super::Foundation::PWSTR,
                pqwoutvalue: *mut u64,
                qwdefaultvalue: u64,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilGetQwordValue(
            hkeyclusterkey.into_param().abi(),
            pszvaluename.into_param().abi(),
            ::std::mem::transmute(pqwoutvalue),
            ::std::mem::transmute(qwdefaultvalue),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilGetResourceDependency<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hself: Param0,
    lpszresourcetype: Param1,
) -> *mut _HRESOURCE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetResourceDependency(
                hself: super::super::Foundation::HANDLE,
                lpszresourcetype: super::super::Foundation::PWSTR,
            ) -> *mut _HRESOURCE;
        }
        ::std::mem::transmute(ResUtilGetResourceDependency(
            hself.into_param().abi(),
            lpszresourcetype.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilGetResourceDependencyByClass<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>,
    Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    hcluster: *mut _HCLUSTER,
    hself: Param1,
    prci: *mut CLUS_RESOURCE_CLASS_INFO,
    brecurse: Param3,
) -> *mut _HRESOURCE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetResourceDependencyByClass(
                hcluster: *mut _HCLUSTER,
                hself: super::super::Foundation::HANDLE,
                prci: *mut CLUS_RESOURCE_CLASS_INFO,
                brecurse: super::super::Foundation::BOOL,
            ) -> *mut _HRESOURCE;
        }
        ::std::mem::transmute(ResUtilGetResourceDependencyByClass(
            ::std::mem::transmute(hcluster),
            hself.into_param().abi(),
            ::std::mem::transmute(prci),
            brecurse.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilGetResourceDependencyByClassEx<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>,
    Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    hcluster: *mut _HCLUSTER,
    hself: Param1,
    prci: *mut CLUS_RESOURCE_CLASS_INFO,
    brecurse: Param3,
    dwdesiredaccess: u32,
) -> *mut _HRESOURCE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetResourceDependencyByClassEx(
                hcluster: *mut _HCLUSTER,
                hself: super::super::Foundation::HANDLE,
                prci: *mut CLUS_RESOURCE_CLASS_INFO,
                brecurse: super::super::Foundation::BOOL,
                dwdesiredaccess: u32,
            ) -> *mut _HRESOURCE;
        }
        ::std::mem::transmute(ResUtilGetResourceDependencyByClassEx(
            ::std::mem::transmute(hcluster),
            hself.into_param().abi(),
            ::std::mem::transmute(prci),
            brecurse.into_param().abi(),
            ::std::mem::transmute(dwdesiredaccess),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilGetResourceDependencyByName<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    hcluster: *mut _HCLUSTER,
    hself: Param1,
    lpszresourcetype: Param2,
    brecurse: Param3,
) -> *mut _HRESOURCE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetResourceDependencyByName(
                hcluster: *mut _HCLUSTER,
                hself: super::super::Foundation::HANDLE,
                lpszresourcetype: super::super::Foundation::PWSTR,
                brecurse: super::super::Foundation::BOOL,
            ) -> *mut _HRESOURCE;
        }
        ::std::mem::transmute(ResUtilGetResourceDependencyByName(
            ::std::mem::transmute(hcluster),
            hself.into_param().abi(),
            lpszresourcetype.into_param().abi(),
            brecurse.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilGetResourceDependencyByNameEx<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    hcluster: *mut _HCLUSTER,
    hself: Param1,
    lpszresourcetype: Param2,
    brecurse: Param3,
    dwdesiredaccess: u32,
) -> *mut _HRESOURCE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetResourceDependencyByNameEx(
                hcluster: *mut _HCLUSTER,
                hself: super::super::Foundation::HANDLE,
                lpszresourcetype: super::super::Foundation::PWSTR,
                brecurse: super::super::Foundation::BOOL,
                dwdesiredaccess: u32,
            ) -> *mut _HRESOURCE;
        }
        ::std::mem::transmute(ResUtilGetResourceDependencyByNameEx(
            ::std::mem::transmute(hcluster),
            hself.into_param().abi(),
            lpszresourcetype.into_param().abi(),
            brecurse.into_param().abi(),
            ::std::mem::transmute(dwdesiredaccess),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilGetResourceDependencyEx<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hself: Param0,
    lpszresourcetype: Param1,
    dwdesiredaccess: u32,
) -> *mut _HRESOURCE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetResourceDependencyEx(
                hself: super::super::Foundation::HANDLE,
                lpszresourcetype: super::super::Foundation::PWSTR,
                dwdesiredaccess: u32,
            ) -> *mut _HRESOURCE;
        }
        ::std::mem::transmute(ResUtilGetResourceDependencyEx(
            hself.into_param().abi(),
            lpszresourcetype.into_param().abi(),
            ::std::mem::transmute(dwdesiredaccess),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilGetResourceDependentIPAddressProps(
    hresource: *const _HRESOURCE,
    pszaddress: super::super::Foundation::PWSTR,
    pcchaddress: *mut u32,
    pszsubnetmask: super::super::Foundation::PWSTR,
    pcchsubnetmask: *mut u32,
    psznetwork: super::super::Foundation::PWSTR,
    pcchnetwork: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetResourceDependentIPAddressProps(
                hresource: *const _HRESOURCE,
                pszaddress: super::super::Foundation::PWSTR,
                pcchaddress: *mut u32,
                pszsubnetmask: super::super::Foundation::PWSTR,
                pcchsubnetmask: *mut u32,
                psznetwork: super::super::Foundation::PWSTR,
                pcchnetwork: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilGetResourceDependentIPAddressProps(
            ::std::mem::transmute(hresource),
            ::std::mem::transmute(pszaddress),
            ::std::mem::transmute(pcchaddress),
            ::std::mem::transmute(pszsubnetmask),
            ::std::mem::transmute(pcchsubnetmask),
            ::std::mem::transmute(psznetwork),
            ::std::mem::transmute(pcchnetwork),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilGetResourceName(
    hresource: *const _HRESOURCE,
    pszresourcename: super::super::Foundation::PWSTR,
    pcchresourcenameinout: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetResourceName(
                hresource: *const _HRESOURCE,
                pszresourcename: super::super::Foundation::PWSTR,
                pcchresourcenameinout: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilGetResourceName(
            ::std::mem::transmute(hresource),
            ::std::mem::transmute(pszresourcename),
            ::std::mem::transmute(pcchresourcenameinout),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilGetResourceNameDependency<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    lpszresourcename: Param0,
    lpszresourcetype: Param1,
) -> *mut _HRESOURCE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetResourceNameDependency(
                lpszresourcename: super::super::Foundation::PWSTR,
                lpszresourcetype: super::super::Foundation::PWSTR,
            ) -> *mut _HRESOURCE;
        }
        ::std::mem::transmute(ResUtilGetResourceNameDependency(
            lpszresourcename.into_param().abi(),
            lpszresourcetype.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilGetResourceNameDependencyEx<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    lpszresourcename: Param0,
    lpszresourcetype: Param1,
    dwdesiredaccess: u32,
) -> *mut _HRESOURCE {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetResourceNameDependencyEx(
                lpszresourcename: super::super::Foundation::PWSTR,
                lpszresourcetype: super::super::Foundation::PWSTR,
                dwdesiredaccess: u32,
            ) -> *mut _HRESOURCE;
        }
        ::std::mem::transmute(ResUtilGetResourceNameDependencyEx(
            lpszresourcename.into_param().abi(),
            lpszresourcetype.into_param().abi(),
            ::std::mem::transmute(dwdesiredaccess),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilGetSzProperty<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    ppszoutvalue: *mut super::super::Foundation::PWSTR,
    pvaluestruct: *const CLUSPROP_SZ,
    pszoldvalue: Param2,
    pppropertylist: *mut *mut u8,
    pcbpropertylistsize: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetSzProperty(
                ppszoutvalue: *mut super::super::Foundation::PWSTR,
                pvaluestruct: *const CLUSPROP_SZ,
                pszoldvalue: super::super::Foundation::PWSTR,
                pppropertylist: *mut *mut u8,
                pcbpropertylistsize: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilGetSzProperty(
            ::std::mem::transmute(ppszoutvalue),
            ::std::mem::transmute(pvaluestruct),
            pszoldvalue.into_param().abi(),
            ::std::mem::transmute(pppropertylist),
            ::std::mem::transmute(pcbpropertylistsize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilGetSzValue<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hkeyclusterkey: Param0,
    pszvaluename: Param1,
) -> super::super::Foundation::PWSTR {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGetSzValue(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                pszvaluename: super::super::Foundation::PWSTR,
            ) -> super::super::Foundation::PWSTR;
        }
        ::std::mem::transmute(ResUtilGetSzValue(
            hkeyclusterkey.into_param().abi(),
            pszvaluename.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilGroupsEqual(
    hself: *mut _HGROUP,
    hgroup: *mut _HGROUP,
    pequal: *mut super::super::Foundation::BOOL,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilGroupsEqual(
                hself: *mut _HGROUP,
                hgroup: *mut _HGROUP,
                pequal: *mut super::super::Foundation::BOOL,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilGroupsEqual(
            ::std::mem::transmute(hself),
            ::std::mem::transmute(hgroup),
            ::std::mem::transmute(pequal),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilIsPathValid<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pszpath: Param0,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilIsPathValid(
                pszpath: super::super::Foundation::PWSTR,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(ResUtilIsPathValid(pszpath.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilIsResourceClassEqual(
    prci: *mut CLUS_RESOURCE_CLASS_INFO,
    hresource: *mut _HRESOURCE,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilIsResourceClassEqual(
                prci: *mut CLUS_RESOURCE_CLASS_INFO,
                hresource: *mut _HRESOURCE,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(ResUtilIsResourceClassEqual(
            ::std::mem::transmute(prci),
            ::std::mem::transmute(hresource),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilLeftPaxosIsLessThanRight(
    left: *const PaxosTagCStruct,
    right: *const PaxosTagCStruct,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilLeftPaxosIsLessThanRight(
                left: *const PaxosTagCStruct,
                right: *const PaxosTagCStruct,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(ResUtilLeftPaxosIsLessThanRight(
            ::std::mem::transmute(left),
            ::std::mem::transmute(right),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ResUtilNodeEnum(
    hcluster: *mut _HCLUSTER,
    pnodecallback: ::std::option::Option<LPNODE_CALLBACK>,
    pparameter: *mut ::std::ffi::c_void,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilNodeEnum(
                hcluster: *mut _HCLUSTER,
                pnodecallback: ::windows::runtime::RawPtr,
                pparameter: *mut ::std::ffi::c_void,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilNodeEnum(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(pnodecallback),
            ::std::mem::transmute(pparameter),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilPaxosComparer(
    left: *const PaxosTagCStruct,
    right: *const PaxosTagCStruct,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilPaxosComparer(
                left: *const PaxosTagCStruct,
                right: *const PaxosTagCStruct,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(ResUtilPaxosComparer(
            ::std::mem::transmute(left),
            ::std::mem::transmute(right),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilPropertyListFromParameterBlock(
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    poutpropertylist: *mut ::std::ffi::c_void,
    pcboutpropertylistsize: *mut u32,
    pinparams: *const u8,
    pcbbytesreturned: *mut u32,
    pcbrequired: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilPropertyListFromParameterBlock(
                ppropertytable: *const RESUTIL_PROPERTY_ITEM,
                poutpropertylist: *mut ::std::ffi::c_void,
                pcboutpropertylistsize: *mut u32,
                pinparams: *const u8,
                pcbbytesreturned: *mut u32,
                pcbrequired: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilPropertyListFromParameterBlock(
            ::std::mem::transmute(ppropertytable),
            ::std::mem::transmute(poutpropertylist),
            ::std::mem::transmute(pcboutpropertylistsize),
            ::std::mem::transmute(pinparams),
            ::std::mem::transmute(pcbbytesreturned),
            ::std::mem::transmute(pcbrequired),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilRemoveResourceServiceEnvironment<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pszservicename: Param0,
    pfnlogevent: ::std::option::Option<PLOG_EVENT_ROUTINE>,
    hresourcehandle: isize,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilRemoveResourceServiceEnvironment(
                pszservicename: super::super::Foundation::PWSTR,
                pfnlogevent: ::windows::runtime::RawPtr,
                hresourcehandle: isize,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilRemoveResourceServiceEnvironment(
            pszservicename.into_param().abi(),
            ::std::mem::transmute(pfnlogevent),
            ::std::mem::transmute(hresourcehandle),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ResUtilResourceDepEnum(
    hself: *mut _HRESOURCE,
    enumtype: u32,
    prescallback: ::std::option::Option<LPRESOURCE_CALLBACK_EX>,
    pparameter: *mut ::std::ffi::c_void,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilResourceDepEnum(
                hself: *mut _HRESOURCE,
                enumtype: u32,
                prescallback: ::windows::runtime::RawPtr,
                pparameter: *mut ::std::ffi::c_void,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilResourceDepEnum(
            ::std::mem::transmute(hself),
            ::std::mem::transmute(enumtype),
            ::std::mem::transmute(prescallback),
            ::std::mem::transmute(pparameter),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilResourceTypesEqual<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    lpszresourcetypename: Param0,
    hresource: *mut _HRESOURCE,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilResourceTypesEqual(
                lpszresourcetypename: super::super::Foundation::PWSTR,
                hresource: *mut _HRESOURCE,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(ResUtilResourceTypesEqual(
            lpszresourcetypename.into_param().abi(),
            ::std::mem::transmute(hresource),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilResourcesEqual(
    hself: *mut _HRESOURCE,
    hresource: *mut _HRESOURCE,
) -> super::super::Foundation::BOOL {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilResourcesEqual(
                hself: *mut _HRESOURCE,
                hresource: *mut _HRESOURCE,
            ) -> super::super::Foundation::BOOL;
        }
        ::std::mem::transmute(ResUtilResourcesEqual(
            ::std::mem::transmute(hself),
            ::std::mem::transmute(hresource),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilSetBinaryValue<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hkeyclusterkey: Param0,
    pszvaluename: Param1,
    pbnewvalue: *const u8,
    cbnewvaluesize: u32,
    ppboutvalue: *mut *mut u8,
    pcboutvaluesize: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilSetBinaryValue(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                pszvaluename: super::super::Foundation::PWSTR,
                pbnewvalue: *const u8,
                cbnewvaluesize: u32,
                ppboutvalue: *mut *mut u8,
                pcboutvaluesize: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilSetBinaryValue(
            hkeyclusterkey.into_param().abi(),
            pszvaluename.into_param().abi(),
            ::std::mem::transmute(pbnewvalue),
            ::std::mem::transmute(cbnewvaluesize),
            ::std::mem::transmute(ppboutvalue),
            ::std::mem::transmute(pcboutvaluesize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilSetDwordValue<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hkeyclusterkey: Param0,
    pszvaluename: Param1,
    dwnewvalue: u32,
    pdwoutvalue: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilSetDwordValue(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                pszvaluename: super::super::Foundation::PWSTR,
                dwnewvalue: u32,
                pdwoutvalue: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilSetDwordValue(
            hkeyclusterkey.into_param().abi(),
            pszvaluename.into_param().abi(),
            ::std::mem::transmute(dwnewvalue),
            ::std::mem::transmute(pdwoutvalue),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilSetExpandSzValue<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hkeyclusterkey: Param0,
    pszvaluename: Param1,
    psznewvalue: Param2,
    ppszoutstring: *mut super::super::Foundation::PWSTR,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilSetExpandSzValue(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                pszvaluename: super::super::Foundation::PWSTR,
                psznewvalue: super::super::Foundation::PWSTR,
                ppszoutstring: *mut super::super::Foundation::PWSTR,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilSetExpandSzValue(
            hkeyclusterkey.into_param().abi(),
            pszvaluename.into_param().abi(),
            psznewvalue.into_param().abi(),
            ::std::mem::transmute(ppszoutstring),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilSetMultiSzValue<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hkeyclusterkey: Param0,
    pszvaluename: Param1,
    psznewvalue: Param2,
    cbnewvaluesize: u32,
    ppszoutvalue: *mut super::super::Foundation::PWSTR,
    pcboutvaluesize: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilSetMultiSzValue(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                pszvaluename: super::super::Foundation::PWSTR,
                psznewvalue: super::super::Foundation::PWSTR,
                cbnewvaluesize: u32,
                ppszoutvalue: *mut super::super::Foundation::PWSTR,
                pcboutvaluesize: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilSetMultiSzValue(
            hkeyclusterkey.into_param().abi(),
            pszvaluename.into_param().abi(),
            psznewvalue.into_param().abi(),
            ::std::mem::transmute(cbnewvaluesize),
            ::std::mem::transmute(ppszoutvalue),
            ::std::mem::transmute(pcboutvaluesize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_System_Registry")]
#[inline]
pub unsafe fn ResUtilSetPrivatePropertyList<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
>(
    hkeyclusterkey: Param0,
    pinpropertylist: *const ::std::ffi::c_void,
    cbinpropertylistsize: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilSetPrivatePropertyList(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                pinpropertylist: *const ::std::ffi::c_void,
                cbinpropertylistsize: u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilSetPrivatePropertyList(
            hkeyclusterkey.into_param().abi(),
            ::std::mem::transmute(pinpropertylist),
            ::std::mem::transmute(cbinpropertylistsize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilSetPropertyParameterBlock<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
>(
    hkeyclusterkey: Param0,
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    reserved: *mut ::std::ffi::c_void,
    pinparams: *const u8,
    pinpropertylist: *const ::std::ffi::c_void,
    cbinpropertylistsize: u32,
    poutparams: *mut u8,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilSetPropertyParameterBlock(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                ppropertytable: *const RESUTIL_PROPERTY_ITEM,
                reserved: *mut ::std::ffi::c_void,
                pinparams: *const u8,
                pinpropertylist: *const ::std::ffi::c_void,
                cbinpropertylistsize: u32,
                poutparams: *mut u8,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilSetPropertyParameterBlock(
            hkeyclusterkey.into_param().abi(),
            ::std::mem::transmute(ppropertytable),
            ::std::mem::transmute(reserved),
            ::std::mem::transmute(pinparams),
            ::std::mem::transmute(pinpropertylist),
            ::std::mem::transmute(cbinpropertylistsize),
            ::std::mem::transmute(poutparams),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilSetPropertyParameterBlockEx<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
    Param6: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    hkeyclusterkey: Param0,
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    reserved: *mut ::std::ffi::c_void,
    pinparams: *const u8,
    pinpropertylist: *const ::std::ffi::c_void,
    cbinpropertylistsize: u32,
    bforcewrite: Param6,
    poutparams: *mut u8,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilSetPropertyParameterBlockEx(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                ppropertytable: *const RESUTIL_PROPERTY_ITEM,
                reserved: *mut ::std::ffi::c_void,
                pinparams: *const u8,
                pinpropertylist: *const ::std::ffi::c_void,
                cbinpropertylistsize: u32,
                bforcewrite: super::super::Foundation::BOOL,
                poutparams: *mut u8,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilSetPropertyParameterBlockEx(
            hkeyclusterkey.into_param().abi(),
            ::std::mem::transmute(ppropertytable),
            ::std::mem::transmute(reserved),
            ::std::mem::transmute(pinparams),
            ::std::mem::transmute(pinpropertylist),
            ::std::mem::transmute(cbinpropertylistsize),
            bforcewrite.into_param().abi(),
            ::std::mem::transmute(poutparams),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilSetPropertyTable<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
    Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    hkeyclusterkey: Param0,
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    reserved: *mut ::std::ffi::c_void,
    ballowunknownproperties: Param3,
    pinpropertylist: *const ::std::ffi::c_void,
    cbinpropertylistsize: u32,
    poutparams: *mut u8,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilSetPropertyTable(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                ppropertytable: *const RESUTIL_PROPERTY_ITEM,
                reserved: *mut ::std::ffi::c_void,
                ballowunknownproperties: super::super::Foundation::BOOL,
                pinpropertylist: *const ::std::ffi::c_void,
                cbinpropertylistsize: u32,
                poutparams: *mut u8,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilSetPropertyTable(
            hkeyclusterkey.into_param().abi(),
            ::std::mem::transmute(ppropertytable),
            ::std::mem::transmute(reserved),
            ballowunknownproperties.into_param().abi(),
            ::std::mem::transmute(pinpropertylist),
            ::std::mem::transmute(cbinpropertylistsize),
            ::std::mem::transmute(poutparams),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilSetPropertyTableEx<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
    Param3: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    Param6: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    hkeyclusterkey: Param0,
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    reserved: *mut ::std::ffi::c_void,
    ballowunknownproperties: Param3,
    pinpropertylist: *const ::std::ffi::c_void,
    cbinpropertylistsize: u32,
    bforcewrite: Param6,
    poutparams: *mut u8,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilSetPropertyTableEx(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                ppropertytable: *const RESUTIL_PROPERTY_ITEM,
                reserved: *mut ::std::ffi::c_void,
                ballowunknownproperties: super::super::Foundation::BOOL,
                pinpropertylist: *const ::std::ffi::c_void,
                cbinpropertylistsize: u32,
                bforcewrite: super::super::Foundation::BOOL,
                poutparams: *mut u8,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilSetPropertyTableEx(
            hkeyclusterkey.into_param().abi(),
            ::std::mem::transmute(ppropertytable),
            ::std::mem::transmute(reserved),
            ballowunknownproperties.into_param().abi(),
            ::std::mem::transmute(pinpropertylist),
            ::std::mem::transmute(cbinpropertylistsize),
            bforcewrite.into_param().abi(),
            ::std::mem::transmute(poutparams),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilSetQwordValue<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hkeyclusterkey: Param0,
    pszvaluename: Param1,
    qwnewvalue: u64,
    pqwoutvalue: *mut u64,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilSetQwordValue(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                pszvaluename: super::super::Foundation::PWSTR,
                qwnewvalue: u64,
                pqwoutvalue: *mut u64,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilSetQwordValue(
            hkeyclusterkey.into_param().abi(),
            pszvaluename.into_param().abi(),
            ::std::mem::transmute(qwnewvalue),
            ::std::mem::transmute(pqwoutvalue),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilSetResourceServiceEnvironment<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pszservicename: Param0,
    hresource: *mut _HRESOURCE,
    pfnlogevent: ::std::option::Option<PLOG_EVENT_ROUTINE>,
    hresourcehandle: isize,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilSetResourceServiceEnvironment(
                pszservicename: super::super::Foundation::PWSTR,
                hresource: *mut _HRESOURCE,
                pfnlogevent: ::windows::runtime::RawPtr,
                hresourcehandle: isize,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilSetResourceServiceEnvironment(
            pszservicename.into_param().abi(),
            ::std::mem::transmute(hresource),
            ::std::mem::transmute(pfnlogevent),
            ::std::mem::transmute(hresourcehandle),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Security"))]
#[inline]
pub unsafe fn ResUtilSetResourceServiceStartParameters<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Security::SC_HANDLE>,
>(
    pszservicename: Param0,
    schscmhandle: Param1,
    phservice: *mut isize,
    pfnlogevent: ::std::option::Option<PLOG_EVENT_ROUTINE>,
    hresourcehandle: isize,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilSetResourceServiceStartParameters(
                pszservicename: super::super::Foundation::PWSTR,
                schscmhandle: super::super::Security::SC_HANDLE,
                phservice: *mut isize,
                pfnlogevent: ::windows::runtime::RawPtr,
                hresourcehandle: isize,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilSetResourceServiceStartParameters(
            pszservicename.into_param().abi(),
            schscmhandle.into_param().abi(),
            ::std::mem::transmute(phservice),
            ::std::mem::transmute(pfnlogevent),
            ::std::mem::transmute(hresourcehandle),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Security"))]
#[inline]
pub unsafe fn ResUtilSetResourceServiceStartParametersEx<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Security::SC_HANDLE>,
>(
    pszservicename: Param0,
    schscmhandle: Param1,
    phservice: *mut isize,
    dwdesiredaccess: u32,
    pfnlogevent: ::std::option::Option<PLOG_EVENT_ROUTINE>,
    hresourcehandle: isize,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilSetResourceServiceStartParametersEx(
                pszservicename: super::super::Foundation::PWSTR,
                schscmhandle: super::super::Security::SC_HANDLE,
                phservice: *mut isize,
                dwdesiredaccess: u32,
                pfnlogevent: ::windows::runtime::RawPtr,
                hresourcehandle: isize,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilSetResourceServiceStartParametersEx(
            pszservicename.into_param().abi(),
            schscmhandle.into_param().abi(),
            ::std::mem::transmute(phservice),
            ::std::mem::transmute(dwdesiredaccess),
            ::std::mem::transmute(pfnlogevent),
            ::std::mem::transmute(hresourcehandle),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilSetSzValue<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hkeyclusterkey: Param0,
    pszvaluename: Param1,
    psznewvalue: Param2,
    ppszoutstring: *mut super::super::Foundation::PWSTR,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilSetSzValue(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                pszvaluename: super::super::Foundation::PWSTR,
                psznewvalue: super::super::Foundation::PWSTR,
                ppszoutstring: *mut super::super::Foundation::PWSTR,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilSetSzValue(
            hkeyclusterkey.into_param().abi(),
            pszvaluename.into_param().abi(),
            psznewvalue.into_param().abi(),
            ::std::mem::transmute(ppszoutstring),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilSetUnknownProperties<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
>(
    hkeyclusterkey: Param0,
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    pinpropertylist: *const ::std::ffi::c_void,
    cbinpropertylistsize: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilSetUnknownProperties(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                ppropertytable: *const RESUTIL_PROPERTY_ITEM,
                pinpropertylist: *const ::std::ffi::c_void,
                cbinpropertylistsize: u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilSetUnknownProperties(
            hkeyclusterkey.into_param().abi(),
            ::std::mem::transmute(ppropertytable),
            ::std::mem::transmute(pinpropertylist),
            ::std::mem::transmute(cbinpropertylistsize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilSetValueEx<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hkeyclusterkey: Param0,
    valuename: Param1,
    valuetype: u32,
    valuedata: *const u8,
    valuesize: u32,
    flags: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilSetValueEx(
                hkeyclusterkey: super::super::System::Registry::HKEY,
                valuename: super::super::Foundation::PWSTR,
                valuetype: u32,
                valuedata: *const u8,
                valuesize: u32,
                flags: u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilSetValueEx(
            hkeyclusterkey.into_param().abi(),
            valuename.into_param().abi(),
            ::std::mem::transmute(valuetype),
            ::std::mem::transmute(valuedata),
            ::std::mem::transmute(valuesize),
            ::std::mem::transmute(flags),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilStartResourceService<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pszservicename: Param0,
    phservicehandle: *mut isize,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilStartResourceService(
                pszservicename: super::super::Foundation::PWSTR,
                phservicehandle: *mut isize,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilStartResourceService(
            pszservicename.into_param().abi(),
            ::std::mem::transmute(phservicehandle),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilStopResourceService<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pszservicename: Param0,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilStopResourceService(pszservicename: super::super::Foundation::PWSTR) -> u32;
        }
        ::std::mem::transmute(ResUtilStopResourceService(
            pszservicename.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Security")]
#[inline]
pub unsafe fn ResUtilStopService<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Security::SC_HANDLE>,
>(
    hservicehandle: Param0,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilStopService(hservicehandle: super::super::Security::SC_HANDLE) -> u32;
        }
        ::std::mem::transmute(ResUtilStopService(hservicehandle.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilTerminateServiceProcessFromResDll<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    dwservicepid: u32,
    boffline: Param1,
    pdwresourcestate: *mut u32,
    pfnlogevent: ::std::option::Option<PLOG_EVENT_ROUTINE>,
    hresourcehandle: isize,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilTerminateServiceProcessFromResDll(
                dwservicepid: u32,
                boffline: super::super::Foundation::BOOL,
                pdwresourcestate: *mut u32,
                pfnlogevent: ::windows::runtime::RawPtr,
                hresourcehandle: isize,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilTerminateServiceProcessFromResDll(
            ::std::mem::transmute(dwservicepid),
            boffline.into_param().abi(),
            ::std::mem::transmute(pdwresourcestate),
            ::std::mem::transmute(pfnlogevent),
            ::std::mem::transmute(hresourcehandle),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ResUtilVerifyPrivatePropertyList(
    pinpropertylist: *const ::std::ffi::c_void,
    cbinpropertylistsize: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilVerifyPrivatePropertyList(
                pinpropertylist: *const ::std::ffi::c_void,
                cbinpropertylistsize: u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilVerifyPrivatePropertyList(
            ::std::mem::transmute(pinpropertylist),
            ::std::mem::transmute(cbinpropertylistsize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilVerifyPropertyTable<
    'a,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    ppropertytable: *const RESUTIL_PROPERTY_ITEM,
    reserved: *mut ::std::ffi::c_void,
    ballowunknownproperties: Param2,
    pinpropertylist: *const ::std::ffi::c_void,
    cbinpropertylistsize: u32,
    poutparams: *mut u8,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilVerifyPropertyTable(
                ppropertytable: *const RESUTIL_PROPERTY_ITEM,
                reserved: *mut ::std::ffi::c_void,
                ballowunknownproperties: super::super::Foundation::BOOL,
                pinpropertylist: *const ::std::ffi::c_void,
                cbinpropertylistsize: u32,
                poutparams: *mut u8,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilVerifyPropertyTable(
            ::std::mem::transmute(ppropertytable),
            ::std::mem::transmute(reserved),
            ballowunknownproperties.into_param().abi(),
            ::std::mem::transmute(pinpropertylist),
            ::std::mem::transmute(cbinpropertylistsize),
            ::std::mem::transmute(poutparams),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ResUtilVerifyResourceService<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    pszservicename: Param0,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilVerifyResourceService(pszservicename: super::super::Foundation::PWSTR)
                -> u32;
        }
        ::std::mem::transmute(ResUtilVerifyResourceService(
            pszservicename.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Security")]
#[inline]
pub unsafe fn ResUtilVerifyService<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Security::SC_HANDLE>,
>(
    hservicehandle: Param0,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilVerifyService(hservicehandle: super::super::Security::SC_HANDLE) -> u32;
        }
        ::std::mem::transmute(ResUtilVerifyService(hservicehandle.into_param().abi()))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ResUtilVerifyShutdownSafe(flags: u32, reason: u32, presult: *mut u32) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilVerifyShutdownSafe(flags: u32, reason: u32, presult: *mut u32) -> u32;
        }
        ::std::mem::transmute(ResUtilVerifyShutdownSafe(
            ::std::mem::transmute(flags),
            ::std::mem::transmute(reason),
            ::std::mem::transmute(presult),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ResUtilsDeleteKeyTree<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::System::Registry::HKEY>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
>(
    key: Param0,
    keyname: Param1,
    treatnokeyaserror: Param2,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResUtilsDeleteKeyTree(
                key: super::super::System::Registry::HKEY,
                keyname: super::super::Foundation::PWSTR,
                treatnokeyaserror: super::super::Foundation::BOOL,
            ) -> u32;
        }
        ::std::mem::transmute(ResUtilsDeleteKeyTree(
            key.into_param().abi(),
            keyname.into_param().abi(),
            treatnokeyaserror.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ResetAllAppInstanceVersions() -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResetAllAppInstanceVersions() -> u32;
        }
        ::std::mem::transmute(ResetAllAppInstanceVersions())
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct ResourceUtilizationInfoElement {
    pub PhysicalNumaId: u64,
    pub CurrentMemory: u64,
}
impl ResourceUtilizationInfoElement {}
impl ::std::default::Default for ResourceUtilizationInfoElement {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for ResourceUtilizationInfoElement {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("ResourceUtilizationInfoElement")
            .field("PhysicalNumaId", &self.PhysicalNumaId)
            .field("CurrentMemory", &self.CurrentMemory)
            .finish()
    }
}
impl ::std::cmp::PartialEq for ResourceUtilizationInfoElement {
    fn eq(&self, other: &Self) -> bool {
        self.PhysicalNumaId == other.PhysicalNumaId && self.CurrentMemory == other.CurrentMemory
    }
}
impl ::std::cmp::Eq for ResourceUtilizationInfoElement {}
unsafe impl ::windows::runtime::Abi for ResourceUtilizationInfoElement {
    type Abi = Self;
    type DefaultType = Self;
}
#[inline]
pub unsafe fn RestartClusterResource(hresource: *const _HRESOURCE, dwflags: u32) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RestartClusterResource(hresource: *const _HRESOURCE, dwflags: u32) -> u32;
        }
        ::std::mem::transmute(RestartClusterResource(
            ::std::mem::transmute(hresource),
            ::std::mem::transmute(dwflags),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn RestoreClusterDatabase<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::BOOL>,
    Param2: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    lpszpathname: Param0,
    bforce: Param1,
    lpszquorumdriveletter: Param2,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn RestoreClusterDatabase(
                lpszpathname: super::super::Foundation::PWSTR,
                bforce: super::super::Foundation::BOOL,
                lpszquorumdriveletter: super::super::Foundation::PWSTR,
            ) -> u32;
        }
        ::std::mem::transmute(RestoreClusterDatabase(
            lpszpathname.into_param().abi(),
            bforce.into_param().abi(),
            lpszquorumdriveletter.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ResumeClusterNode(hnode: *const _HNODE) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResumeClusterNode(hnode: *const _HNODE) -> u32;
        }
        ::std::mem::transmute(ResumeClusterNode(::std::mem::transmute(hnode)))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn ResumeClusterNodeEx(
    hnode: *const _HNODE,
    eresumefailbacktype: CLUSTER_NODE_RESUME_FAILBACK_TYPE,
    dwresumeflagsreserved: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn ResumeClusterNodeEx(
                hnode: *const _HNODE,
                eresumefailbacktype: CLUSTER_NODE_RESUME_FAILBACK_TYPE,
                dwresumeflagsreserved: u32,
            ) -> u32;
        }
        ::std::mem::transmute(ResumeClusterNodeEx(
            ::std::mem::transmute(hnode),
            ::std::mem::transmute(eresumefailbacktype),
            ::std::mem::transmute(dwresumeflagsreserved),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
pub const SET_APPINSTANCE_CSV_FLAGS_VALID_ONLY_IF_CSV_COORDINATOR: u32 = 1u32;
#[cfg(feature = "Win32_Foundation")]
pub type SET_APP_INSTANCE_CSV_FLAGS = unsafe extern "system" fn(
    processhandle: super::super::Foundation::HANDLE,
    mask: u32,
    flags: u32,
) -> u32;
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct SR_DISK_REPLICATION_ELIGIBLE(pub i32);
pub const SrDiskReplicationEligibleNone: SR_DISK_REPLICATION_ELIGIBLE =
    SR_DISK_REPLICATION_ELIGIBLE(0i32);
pub const SrDiskReplicationEligibleYes: SR_DISK_REPLICATION_ELIGIBLE =
    SR_DISK_REPLICATION_ELIGIBLE(1i32);
pub const SrDiskReplicationEligibleOffline: SR_DISK_REPLICATION_ELIGIBLE =
    SR_DISK_REPLICATION_ELIGIBLE(2i32);
pub const SrDiskReplicationEligibleNotGpt: SR_DISK_REPLICATION_ELIGIBLE =
    SR_DISK_REPLICATION_ELIGIBLE(3i32);
pub const SrDiskReplicationEligiblePartitionLayoutMismatch: SR_DISK_REPLICATION_ELIGIBLE =
    SR_DISK_REPLICATION_ELIGIBLE(4i32);
pub const SrDiskReplicationEligibleInsufficientFreeSpace: SR_DISK_REPLICATION_ELIGIBLE =
    SR_DISK_REPLICATION_ELIGIBLE(5i32);
pub const SrDiskReplicationEligibleNotInSameSite: SR_DISK_REPLICATION_ELIGIBLE =
    SR_DISK_REPLICATION_ELIGIBLE(6i32);
pub const SrDiskReplicationEligibleInSameSite: SR_DISK_REPLICATION_ELIGIBLE =
    SR_DISK_REPLICATION_ELIGIBLE(7i32);
pub const SrDiskReplicationEligibleFileSystemNotSupported: SR_DISK_REPLICATION_ELIGIBLE =
    SR_DISK_REPLICATION_ELIGIBLE(8i32);
pub const SrDiskReplicationEligibleAlreadyInReplication: SR_DISK_REPLICATION_ELIGIBLE =
    SR_DISK_REPLICATION_ELIGIBLE(9i32);
pub const SrDiskReplicationEligibleSameAsSpecifiedDisk: SR_DISK_REPLICATION_ELIGIBLE =
    SR_DISK_REPLICATION_ELIGIBLE(10i32);
pub const SrDiskReplicationEligibleOther: SR_DISK_REPLICATION_ELIGIBLE =
    SR_DISK_REPLICATION_ELIGIBLE(9999i32);
impl ::std::convert::From<i32> for SR_DISK_REPLICATION_ELIGIBLE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SR_DISK_REPLICATION_ELIGIBLE {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct SR_REPLICATED_DISK_TYPE(pub i32);
pub const SrReplicatedDiskTypeNone: SR_REPLICATED_DISK_TYPE = SR_REPLICATED_DISK_TYPE(0i32);
pub const SrReplicatedDiskTypeSource: SR_REPLICATED_DISK_TYPE = SR_REPLICATED_DISK_TYPE(1i32);
pub const SrReplicatedDiskTypeLogSource: SR_REPLICATED_DISK_TYPE = SR_REPLICATED_DISK_TYPE(2i32);
pub const SrReplicatedDiskTypeDestination: SR_REPLICATED_DISK_TYPE = SR_REPLICATED_DISK_TYPE(3i32);
pub const SrReplicatedDiskTypeLogDestination: SR_REPLICATED_DISK_TYPE =
    SR_REPLICATED_DISK_TYPE(4i32);
pub const SrReplicatedDiskTypeNotInParthership: SR_REPLICATED_DISK_TYPE =
    SR_REPLICATED_DISK_TYPE(5i32);
pub const SrReplicatedDiskTypeLogNotInParthership: SR_REPLICATED_DISK_TYPE =
    SR_REPLICATED_DISK_TYPE(6i32);
pub const SrReplicatedDiskTypeOther: SR_REPLICATED_DISK_TYPE = SR_REPLICATED_DISK_TYPE(7i32);
impl ::std::convert::From<i32> for SR_REPLICATED_DISK_TYPE {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for SR_REPLICATED_DISK_TYPE {
    type Abi = Self;
    type DefaultType = Self;
}
pub const SR_REPLICATED_PARTITION_DISALLOW_MULTINODE_IO: u32 = 1u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP {
    pub ReplicationGroupName: [u16; 260],
    pub Description: [u16; 260],
    pub LogPath: [u16; 260],
    pub MaxLogSizeInBytes: u64,
    pub LogType: u16,
    pub ReplicationMode: u32,
    pub MinimumPartnersInSync: u32,
    pub EnableWriteConsistency: super::super::Foundation::BOOLEAN,
    pub EnableEncryption: super::super::Foundation::BOOLEAN,
    pub CertificateThumbprint: [u16; 260],
    pub VolumeNameCount: u32,
    pub VolumeNames: [u16; 260],
}
#[cfg(feature = "Win32_Foundation")]
impl SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP")
            .field("ReplicationGroupName", &self.ReplicationGroupName)
            .field("Description", &self.Description)
            .field("LogPath", &self.LogPath)
            .field("MaxLogSizeInBytes", &self.MaxLogSizeInBytes)
            .field("LogType", &self.LogType)
            .field("ReplicationMode", &self.ReplicationMode)
            .field("MinimumPartnersInSync", &self.MinimumPartnersInSync)
            .field("EnableWriteConsistency", &self.EnableWriteConsistency)
            .field("EnableEncryption", &self.EnableEncryption)
            .field("CertificateThumbprint", &self.CertificateThumbprint)
            .field("VolumeNameCount", &self.VolumeNameCount)
            .field("VolumeNames", &self.VolumeNames)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP {
    fn eq(&self, other: &Self) -> bool {
        self.ReplicationGroupName == other.ReplicationGroupName
            && self.Description == other.Description
            && self.LogPath == other.LogPath
            && self.MaxLogSizeInBytes == other.MaxLogSizeInBytes
            && self.LogType == other.LogType
            && self.ReplicationMode == other.ReplicationMode
            && self.MinimumPartnersInSync == other.MinimumPartnersInSync
            && self.EnableWriteConsistency == other.EnableWriteConsistency
            && self.EnableEncryption == other.EnableEncryption
            && self.CertificateThumbprint == other.CertificateThumbprint
            && self.VolumeNameCount == other.VolumeNameCount
            && self.VolumeNames == other.VolumeNames
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP_RESULT {
    pub Result: u32,
    pub ErrorString: [u16; 260],
}
impl SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP_RESULT {}
impl ::std::default::Default for SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP_RESULT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP_RESULT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP_RESULT")
            .field("Result", &self.Result)
            .field("ErrorString", &self.ErrorString)
            .finish()
    }
}
impl ::std::cmp::PartialEq for SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP_RESULT {
    fn eq(&self, other: &Self) -> bool {
        self.Result == other.Result && self.ErrorString == other.ErrorString
    }
}
impl ::std::cmp::Eq for SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP_RESULT {}
unsafe impl ::windows::runtime::Abi for SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP_RESULT {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct SR_RESOURCE_TYPE_DISK_INFO {
    pub Reason: SR_DISK_REPLICATION_ELIGIBLE,
    pub DiskGuid: ::windows::runtime::GUID,
}
impl SR_RESOURCE_TYPE_DISK_INFO {}
impl ::std::default::Default for SR_RESOURCE_TYPE_DISK_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for SR_RESOURCE_TYPE_DISK_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SR_RESOURCE_TYPE_DISK_INFO")
            .field("Reason", &self.Reason)
            .field("DiskGuid", &self.DiskGuid)
            .finish()
    }
}
impl ::std::cmp::PartialEq for SR_RESOURCE_TYPE_DISK_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.Reason == other.Reason && self.DiskGuid == other.DiskGuid
    }
}
impl ::std::cmp::Eq for SR_RESOURCE_TYPE_DISK_INFO {}
unsafe impl ::windows::runtime::Abi for SR_RESOURCE_TYPE_DISK_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct SR_RESOURCE_TYPE_ELIGIBLE_DISKS_RESULT {
    pub Count: u16,
    pub DiskInfo: [SR_RESOURCE_TYPE_DISK_INFO; 1],
}
impl SR_RESOURCE_TYPE_ELIGIBLE_DISKS_RESULT {}
impl ::std::default::Default for SR_RESOURCE_TYPE_ELIGIBLE_DISKS_RESULT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for SR_RESOURCE_TYPE_ELIGIBLE_DISKS_RESULT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SR_RESOURCE_TYPE_ELIGIBLE_DISKS_RESULT")
            .field("Count", &self.Count)
            .field("DiskInfo", &self.DiskInfo)
            .finish()
    }
}
impl ::std::cmp::PartialEq for SR_RESOURCE_TYPE_ELIGIBLE_DISKS_RESULT {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.DiskInfo == other.DiskInfo
    }
}
impl ::std::cmp::Eq for SR_RESOURCE_TYPE_ELIGIBLE_DISKS_RESULT {}
unsafe impl ::windows::runtime::Abi for SR_RESOURCE_TYPE_ELIGIBLE_DISKS_RESULT {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct SR_RESOURCE_TYPE_QUERY_ELIGIBLE_LOGDISKS {
    pub DataDiskGuid: ::windows::runtime::GUID,
    pub IncludeOfflineDisks: super::super::Foundation::BOOLEAN,
}
#[cfg(feature = "Win32_Foundation")]
impl SR_RESOURCE_TYPE_QUERY_ELIGIBLE_LOGDISKS {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for SR_RESOURCE_TYPE_QUERY_ELIGIBLE_LOGDISKS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for SR_RESOURCE_TYPE_QUERY_ELIGIBLE_LOGDISKS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SR_RESOURCE_TYPE_QUERY_ELIGIBLE_LOGDISKS")
            .field("DataDiskGuid", &self.DataDiskGuid)
            .field("IncludeOfflineDisks", &self.IncludeOfflineDisks)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for SR_RESOURCE_TYPE_QUERY_ELIGIBLE_LOGDISKS {
    fn eq(&self, other: &Self) -> bool {
        self.DataDiskGuid == other.DataDiskGuid
            && self.IncludeOfflineDisks == other.IncludeOfflineDisks
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for SR_RESOURCE_TYPE_QUERY_ELIGIBLE_LOGDISKS {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for SR_RESOURCE_TYPE_QUERY_ELIGIBLE_LOGDISKS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct SR_RESOURCE_TYPE_QUERY_ELIGIBLE_SOURCE_DATADISKS {
    pub DataDiskGuid: ::windows::runtime::GUID,
    pub IncludeAvailableStoargeDisks: super::super::Foundation::BOOLEAN,
}
#[cfg(feature = "Win32_Foundation")]
impl SR_RESOURCE_TYPE_QUERY_ELIGIBLE_SOURCE_DATADISKS {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for SR_RESOURCE_TYPE_QUERY_ELIGIBLE_SOURCE_DATADISKS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for SR_RESOURCE_TYPE_QUERY_ELIGIBLE_SOURCE_DATADISKS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SR_RESOURCE_TYPE_QUERY_ELIGIBLE_SOURCE_DATADISKS")
            .field("DataDiskGuid", &self.DataDiskGuid)
            .field(
                "IncludeAvailableStoargeDisks",
                &self.IncludeAvailableStoargeDisks,
            )
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for SR_RESOURCE_TYPE_QUERY_ELIGIBLE_SOURCE_DATADISKS {
    fn eq(&self, other: &Self) -> bool {
        self.DataDiskGuid == other.DataDiskGuid
            && self.IncludeAvailableStoargeDisks == other.IncludeAvailableStoargeDisks
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for SR_RESOURCE_TYPE_QUERY_ELIGIBLE_SOURCE_DATADISKS {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for SR_RESOURCE_TYPE_QUERY_ELIGIBLE_SOURCE_DATADISKS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct SR_RESOURCE_TYPE_QUERY_ELIGIBLE_TARGET_DATADISKS {
    pub SourceDataDiskGuid: ::windows::runtime::GUID,
    pub TargetReplicationGroupGuid: ::windows::runtime::GUID,
    pub SkipConnectivityCheck: super::super::Foundation::BOOLEAN,
    pub IncludeOfflineDisks: super::super::Foundation::BOOLEAN,
}
#[cfg(feature = "Win32_Foundation")]
impl SR_RESOURCE_TYPE_QUERY_ELIGIBLE_TARGET_DATADISKS {}
#[cfg(feature = "Win32_Foundation")]
impl ::std::default::Default for SR_RESOURCE_TYPE_QUERY_ELIGIBLE_TARGET_DATADISKS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::fmt::Debug for SR_RESOURCE_TYPE_QUERY_ELIGIBLE_TARGET_DATADISKS {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SR_RESOURCE_TYPE_QUERY_ELIGIBLE_TARGET_DATADISKS")
            .field("SourceDataDiskGuid", &self.SourceDataDiskGuid)
            .field(
                "TargetReplicationGroupGuid",
                &self.TargetReplicationGroupGuid,
            )
            .field("SkipConnectivityCheck", &self.SkipConnectivityCheck)
            .field("IncludeOfflineDisks", &self.IncludeOfflineDisks)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::PartialEq for SR_RESOURCE_TYPE_QUERY_ELIGIBLE_TARGET_DATADISKS {
    fn eq(&self, other: &Self) -> bool {
        self.SourceDataDiskGuid == other.SourceDataDiskGuid
            && self.TargetReplicationGroupGuid == other.TargetReplicationGroupGuid
            && self.SkipConnectivityCheck == other.SkipConnectivityCheck
            && self.IncludeOfflineDisks == other.IncludeOfflineDisks
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::std::cmp::Eq for SR_RESOURCE_TYPE_QUERY_ELIGIBLE_TARGET_DATADISKS {}
#[cfg(feature = "Win32_Foundation")]
unsafe impl ::windows::runtime::Abi for SR_RESOURCE_TYPE_QUERY_ELIGIBLE_TARGET_DATADISKS {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct SR_RESOURCE_TYPE_REPLICATED_DISK {
    pub Type: SR_REPLICATED_DISK_TYPE,
    pub ClusterDiskResourceGuid: ::windows::runtime::GUID,
    pub ReplicationGroupId: ::windows::runtime::GUID,
    pub ReplicationGroupName: [u16; 260],
}
impl SR_RESOURCE_TYPE_REPLICATED_DISK {}
impl ::std::default::Default for SR_RESOURCE_TYPE_REPLICATED_DISK {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for SR_RESOURCE_TYPE_REPLICATED_DISK {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SR_RESOURCE_TYPE_REPLICATED_DISK")
            .field("Type", &self.Type)
            .field("ClusterDiskResourceGuid", &self.ClusterDiskResourceGuid)
            .field("ReplicationGroupId", &self.ReplicationGroupId)
            .field("ReplicationGroupName", &self.ReplicationGroupName)
            .finish()
    }
}
impl ::std::cmp::PartialEq for SR_RESOURCE_TYPE_REPLICATED_DISK {
    fn eq(&self, other: &Self) -> bool {
        self.Type == other.Type
            && self.ClusterDiskResourceGuid == other.ClusterDiskResourceGuid
            && self.ReplicationGroupId == other.ReplicationGroupId
            && self.ReplicationGroupName == other.ReplicationGroupName
    }
}
impl ::std::cmp::Eq for SR_RESOURCE_TYPE_REPLICATED_DISK {}
unsafe impl ::windows::runtime::Abi for SR_RESOURCE_TYPE_REPLICATED_DISK {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct SR_RESOURCE_TYPE_REPLICATED_DISKS_RESULT {
    pub Count: u16,
    pub ReplicatedDisks: [SR_RESOURCE_TYPE_REPLICATED_DISK; 1],
}
impl SR_RESOURCE_TYPE_REPLICATED_DISKS_RESULT {}
impl ::std::default::Default for SR_RESOURCE_TYPE_REPLICATED_DISKS_RESULT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for SR_RESOURCE_TYPE_REPLICATED_DISKS_RESULT {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SR_RESOURCE_TYPE_REPLICATED_DISKS_RESULT")
            .field("Count", &self.Count)
            .field("ReplicatedDisks", &self.ReplicatedDisks)
            .finish()
    }
}
impl ::std::cmp::PartialEq for SR_RESOURCE_TYPE_REPLICATED_DISKS_RESULT {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.ReplicatedDisks == other.ReplicatedDisks
    }
}
impl ::std::cmp::Eq for SR_RESOURCE_TYPE_REPLICATED_DISKS_RESULT {}
unsafe impl ::windows::runtime::Abi for SR_RESOURCE_TYPE_REPLICATED_DISKS_RESULT {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct SR_RESOURCE_TYPE_REPLICATED_PARTITION_ARRAY {
    pub Count: u32,
    pub PartitionArray: [SR_RESOURCE_TYPE_REPLICATED_PARTITION_INFO; 1],
}
impl SR_RESOURCE_TYPE_REPLICATED_PARTITION_ARRAY {}
impl ::std::default::Default for SR_RESOURCE_TYPE_REPLICATED_PARTITION_ARRAY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for SR_RESOURCE_TYPE_REPLICATED_PARTITION_ARRAY {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SR_RESOURCE_TYPE_REPLICATED_PARTITION_ARRAY")
            .field("Count", &self.Count)
            .field("PartitionArray", &self.PartitionArray)
            .finish()
    }
}
impl ::std::cmp::PartialEq for SR_RESOURCE_TYPE_REPLICATED_PARTITION_ARRAY {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.PartitionArray == other.PartitionArray
    }
}
impl ::std::cmp::Eq for SR_RESOURCE_TYPE_REPLICATED_PARTITION_ARRAY {}
unsafe impl ::windows::runtime::Abi for SR_RESOURCE_TYPE_REPLICATED_PARTITION_ARRAY {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct SR_RESOURCE_TYPE_REPLICATED_PARTITION_INFO {
    pub PartitionOffset: u64,
    pub Capabilities: u32,
}
impl SR_RESOURCE_TYPE_REPLICATED_PARTITION_INFO {}
impl ::std::default::Default for SR_RESOURCE_TYPE_REPLICATED_PARTITION_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for SR_RESOURCE_TYPE_REPLICATED_PARTITION_INFO {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("SR_RESOURCE_TYPE_REPLICATED_PARTITION_INFO")
            .field("PartitionOffset", &self.PartitionOffset)
            .field("Capabilities", &self.Capabilities)
            .finish()
    }
}
impl ::std::cmp::PartialEq for SR_RESOURCE_TYPE_REPLICATED_PARTITION_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionOffset == other.PartitionOffset && self.Capabilities == other.Capabilities
    }
}
impl ::std::cmp::Eq for SR_RESOURCE_TYPE_REPLICATED_PARTITION_INFO {}
unsafe impl ::windows::runtime::Abi for SR_RESOURCE_TYPE_REPLICATED_PARTITION_INFO {
    type Abi = Self;
    type DefaultType = Self;
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SetAppInstanceCsvFlags<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::HANDLE>,
>(
    processhandle: Param0,
    mask: u32,
    flags: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SetAppInstanceCsvFlags(
                processhandle: super::super::Foundation::HANDLE,
                mask: u32,
                flags: u32,
            ) -> u32;
        }
        ::std::mem::transmute(SetAppInstanceCsvFlags(
            processhandle.into_param().abi(),
            ::std::mem::transmute(mask),
            ::std::mem::transmute(flags),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SetClusterGroupName<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hgroup: *const _HGROUP,
    lpszgroupname: Param1,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SetClusterGroupName(
                hgroup: *const _HGROUP,
                lpszgroupname: super::super::Foundation::PWSTR,
            ) -> u32;
        }
        ::std::mem::transmute(SetClusterGroupName(
            ::std::mem::transmute(hgroup),
            lpszgroupname.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn SetClusterGroupNodeList(
    hgroup: *const _HGROUP,
    nodecount: u32,
    nodelist: *const *const _HNODE,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SetClusterGroupNodeList(
                hgroup: *const _HGROUP,
                nodecount: u32,
                nodelist: *const *const _HNODE,
            ) -> u32;
        }
        ::std::mem::transmute(SetClusterGroupNodeList(
            ::std::mem::transmute(hgroup),
            ::std::mem::transmute(nodecount),
            ::std::mem::transmute(nodelist),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SetClusterGroupSetDependencyExpression<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hgroupset: *const _HGROUPSET,
    lpszdependencyexprssion: Param1,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SetClusterGroupSetDependencyExpression(
                hgroupset: *const _HGROUPSET,
                lpszdependencyexprssion: super::super::Foundation::PWSTR,
            ) -> u32;
        }
        ::std::mem::transmute(SetClusterGroupSetDependencyExpression(
            ::std::mem::transmute(hgroupset),
            lpszdependencyexprssion.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SetClusterName<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hcluster: *const _HCLUSTER,
    lpsznewclustername: Param1,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SetClusterName(
                hcluster: *const _HCLUSTER,
                lpsznewclustername: super::super::Foundation::PWSTR,
            ) -> u32;
        }
        ::std::mem::transmute(SetClusterName(
            ::std::mem::transmute(hcluster),
            lpsznewclustername.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SetClusterNetworkName<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hnetwork: *const _HNETWORK,
    lpszname: Param1,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SetClusterNetworkName(
                hnetwork: *const _HNETWORK,
                lpszname: super::super::Foundation::PWSTR,
            ) -> u32;
        }
        ::std::mem::transmute(SetClusterNetworkName(
            ::std::mem::transmute(hnetwork),
            lpszname.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn SetClusterNetworkPriorityOrder(
    hcluster: *const _HCLUSTER,
    networkcount: u32,
    networklist: *const *const _HNETWORK,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SetClusterNetworkPriorityOrder(
                hcluster: *const _HCLUSTER,
                networkcount: u32,
                networklist: *const *const _HNETWORK,
            ) -> u32;
        }
        ::std::mem::transmute(SetClusterNetworkPriorityOrder(
            ::std::mem::transmute(hcluster),
            ::std::mem::transmute(networkcount),
            ::std::mem::transmute(networklist),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SetClusterQuorumResource<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hresource: *const _HRESOURCE,
    lpszdevicename: Param1,
    dwmaxquologsize: u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SetClusterQuorumResource(
                hresource: *const _HRESOURCE,
                lpszdevicename: super::super::Foundation::PWSTR,
                dwmaxquologsize: u32,
            ) -> u32;
        }
        ::std::mem::transmute(SetClusterQuorumResource(
            ::std::mem::transmute(hresource),
            lpszdevicename.into_param().abi(),
            ::std::mem::transmute(dwmaxquologsize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SetClusterResourceDependencyExpression<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hresource: *const _HRESOURCE,
    lpszdependencyexpression: Param1,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SetClusterResourceDependencyExpression(
                hresource: *const _HRESOURCE,
                lpszdependencyexpression: super::super::Foundation::PWSTR,
            ) -> u32;
        }
        ::std::mem::transmute(SetClusterResourceDependencyExpression(
            ::std::mem::transmute(hresource),
            lpszdependencyexpression.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SetClusterResourceName<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hresource: *const _HRESOURCE,
    lpszresourcename: Param1,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SetClusterResourceName(
                hresource: *const _HRESOURCE,
                lpszresourcename: super::super::Foundation::PWSTR,
            ) -> u32;
        }
        ::std::mem::transmute(SetClusterResourceName(
            ::std::mem::transmute(hresource),
            lpszresourcename.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SetClusterServiceAccountPassword<
    'a,
    Param0: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    lpszclustername: Param0,
    lpsznewpassword: Param1,
    dwflags: u32,
    lpreturnstatusbuffer: *mut CLUSTER_SET_PASSWORD_STATUS,
    lpcbreturnstatusbuffersize: *mut u32,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SetClusterServiceAccountPassword(
                lpszclustername: super::super::Foundation::PWSTR,
                lpsznewpassword: super::super::Foundation::PWSTR,
                dwflags: u32,
                lpreturnstatusbuffer: *mut CLUSTER_SET_PASSWORD_STATUS,
                lpcbreturnstatusbuffersize: *mut u32,
            ) -> u32;
        }
        ::std::mem::transmute(SetClusterServiceAccountPassword(
            lpszclustername.into_param().abi(),
            lpsznewpassword.into_param().abi(),
            ::std::mem::transmute(dwflags),
            ::std::mem::transmute(lpreturnstatusbuffer),
            ::std::mem::transmute(lpcbreturnstatusbuffersize),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SetGroupDependencyExpression<
    'a,
    Param1: ::windows::runtime::IntoParam<'a, super::super::Foundation::PWSTR>,
>(
    hgroup: *const _HGROUP,
    lpszdependencyexpression: Param1,
) -> u32 {
    #[cfg(windows)]
    {
        #[link(name = "windows")]
        extern "system" {
            fn SetGroupDependencyExpression(
                hgroup: *const _HGROUP,
                lpszdependencyexpression: super::super::Foundation::PWSTR,
            ) -> u32;
        }
        ::std::mem::transmute(SetGroupDependencyExpression(
            ::std::mem::transmute(hgroup),
            lpszdependencyexpression.into_param().abi(),
        ))
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[derive(
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
)]
#[repr(transparent)]
pub struct VM_RESDLL_CONTEXT(pub i32);
pub const VmResdllContextTurnOff: VM_RESDLL_CONTEXT = VM_RESDLL_CONTEXT(0i32);
pub const VmResdllContextSave: VM_RESDLL_CONTEXT = VM_RESDLL_CONTEXT(1i32);
pub const VmResdllContextShutdown: VM_RESDLL_CONTEXT = VM_RESDLL_CONTEXT(2i32);
pub const VmResdllContextShutdownForce: VM_RESDLL_CONTEXT = VM_RESDLL_CONTEXT(3i32);
pub const VmResdllContextLiveMigration: VM_RESDLL_CONTEXT = VM_RESDLL_CONTEXT(4i32);
impl ::std::convert::From<i32> for VM_RESDLL_CONTEXT {
    fn from(value: i32) -> Self {
        Self(value)
    }
}
unsafe impl ::windows::runtime::Abi for VM_RESDLL_CONTEXT {
    type Abi = Self;
    type DefaultType = Self;
}
pub const VolumeRedirectedIOReasonMax: u64 = 9223372036854775808u64;
pub const VolumeRedirectedIOReasonNoDiskConnectivity: u64 = 1u64;
pub const VolumeRedirectedIOReasonStorageSpaceNotAttached: u64 = 2u64;
pub const VolumeRedirectedIOReasonVolumeReplicationEnabled: u64 = 4u64;
pub const WS2016_RTM_UPGRADE_VERSION: u32 = 8u32;
pub const WS2016_TP4_UPGRADE_VERSION: u32 = 6u32;
pub const WS2016_TP5_UPGRADE_VERSION: u32 = 7u32;
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct WitnessTagHelper {
    pub Version: i32,
    pub paxosToValidate: PaxosTagCStruct,
}
impl WitnessTagHelper {}
impl ::std::default::Default for WitnessTagHelper {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for WitnessTagHelper {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("WitnessTagHelper")
            .field("Version", &self.Version)
            .field("paxosToValidate", &self.paxosToValidate)
            .finish()
    }
}
impl ::std::cmp::PartialEq for WitnessTagHelper {
    fn eq(&self, other: &Self) -> bool {
        self.Version == other.Version && self.paxosToValidate == other.paxosToValidate
    }
}
impl ::std::cmp::Eq for WitnessTagHelper {}
unsafe impl ::windows::runtime::Abi for WitnessTagHelper {
    type Abi = Self;
    type DefaultType = Self;
}
#[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
#[repr(C)]
pub struct WitnessTagUpdateHelper {
    pub Version: i32,
    pub paxosToSet: PaxosTagCStruct,
    pub paxosToValidate: PaxosTagCStruct,
}
impl WitnessTagUpdateHelper {}
impl ::std::default::Default for WitnessTagUpdateHelper {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for WitnessTagUpdateHelper {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.debug_struct("WitnessTagUpdateHelper")
            .field("Version", &self.Version)
            .field("paxosToSet", &self.paxosToSet)
            .field("paxosToValidate", &self.paxosToValidate)
            .finish()
    }
}
impl ::std::cmp::PartialEq for WitnessTagUpdateHelper {
    fn eq(&self, other: &Self) -> bool {
        self.Version == other.Version
            && self.paxosToSet == other.paxosToSet
            && self.paxosToValidate == other.paxosToValidate
    }
}
impl ::std::cmp::Eq for WitnessTagUpdateHelper {}
unsafe impl ::windows::runtime::Abi for WitnessTagUpdateHelper {
    type Abi = Self;
    type DefaultType = Self;
}
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HCHANGE(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HCLUSCRYPTPROVIDER(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HCLUSENUM(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HCLUSENUMEX(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HCLUSTER(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HGROUP(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HGROUPENUM(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HGROUPENUMEX(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HGROUPSET(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HGROUPSETENUM(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HNETINTERFACE(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HNETINTERFACEENUM(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HNETWORK(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HNETWORKENUM(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HNODE(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HNODEENUM(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HNODEENUMEX(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HREGBATCH(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HREGBATCHNOTIFICATION(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HREGBATCHPORT(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HREGREADBATCH(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HREGREADBATCHREPLY(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HRESENUM(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HRESENUMEX(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HRESOURCE(pub u8);
#[repr(C)]
#[derive(
    :: std :: clone :: Clone,
    :: std :: default :: Default,
    :: std :: fmt :: Debug,
    :: std :: cmp :: PartialEq,
    :: std :: cmp :: Eq,
    :: std :: marker :: Copy,
)]
pub struct _HRESTYPEENUM(pub u8);
